
Jeevan_Lite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022b74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08022d08  08022d08  00032d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023200  08023200  000401a0  2**0
                  CONTENTS
  4 .ARM          00000008  08023200  08023200  00033200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023208  08023208  000401a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023208  08023208  00033208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802320c  0802320c  0003320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08023210  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000401a0  2**0
                  CONTENTS
 10 .bss          00016234  200001a0  200001a0  000401a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200163d4  200163d4  000401a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00113310  00000000  00000000  000401d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c32e  00000000  00000000  001534e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002cf0  00000000  00000000  0015f810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002910  00000000  00000000  00162500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038eb1  00000000  00000000  00164e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006ccd2  00000000  00000000  0019dcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0546  00000000  00000000  0020a993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002faed9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b514  00000000  00000000  002faf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08022cec 	.word	0x08022cec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	08022cec 	.word	0x08022cec

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <Split_Alert_Parameter_Packets>:
/*
 * This Function is used for Receiving Alert Range Parameter values
 */

void Split_Alert_Parameter_Packets(ALERT_RANGE_PACKET *Receive_Graph_Packet)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	Alert_Range._RANGE_PIP_MIN_Val      =	(Receive_Graph_Packet->_RANGE_PIP_MIN);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	78da      	ldrb	r2, [r3, #3]
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000eb2:	701a      	strb	r2, [r3, #0]
	Alert_Range._RANGE_PIP_MAX_Val	    =	(Receive_Graph_Packet->_RANGE_PIP_MAX);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	791a      	ldrb	r2, [r3, #4]
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000eba:	705a      	strb	r2, [r3, #1]
	Alert_Range._RANGE_VT_MIN_Val	    = 	(Receive_Graph_Packet->_RANGE_VT_MIN);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000ec6:	805a      	strh	r2, [r3, #2]
	Alert_Range._RANGE_VT_MAX_Val	    = 	(Receive_Graph_Packet->_RANGE_VT_MAX);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000ed2:	809a      	strh	r2, [r3, #4]
	Alert_Range._RANGE_RR_MIN_Val       =	(Receive_Graph_Packet->_RANGE_RR_MIN);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7a5a      	ldrb	r2, [r3, #9]
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000eda:	719a      	strb	r2, [r3, #6]
	Alert_Range._RANGE_RR_MAX_Val       =	(Receive_Graph_Packet->_RANGE_RR_MAX);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7a9a      	ldrb	r2, [r3, #10]
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000ee2:	71da      	strb	r2, [r3, #7]
	Alert_Range._RANGE_MINT_VOL_MIN_Val =	(Receive_Graph_Packet->_RANGE_MINT_VOL_MIN);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7ada      	ldrb	r2, [r3, #11]
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000eea:	721a      	strb	r2, [r3, #8]
	Alert_Range._RANGE_MINT_VOL_MAX_Val =	(Receive_Graph_Packet->_RANGE_MINT_VOL_MAX);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7b1a      	ldrb	r2, [r3, #12]
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000ef2:	725a      	strb	r2, [r3, #9]
	Alert_Range._RANGE_SPO2_MIN_Val     =	(Receive_Graph_Packet->_RANGE_SPO2_MIN);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7b5a      	ldrb	r2, [r3, #13]
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000efa:	729a      	strb	r2, [r3, #10]
	Alert_Range._RANGE_PULSE_MAX_Val     =	(Receive_Graph_Packet->_RANGE_PULSE_MAX);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7bda      	ldrb	r2, [r3, #15]
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000f02:	731a      	strb	r2, [r3, #12]
	Alert_Range._RANGE_PULSE_MIN_Val    =	(Receive_Graph_Packet->_RANGE_PULSE_MIN);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7b9a      	ldrb	r2, [r3, #14]
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <Split_Alert_Parameter_Packets+0x74>)
 8000f0a:	72da      	strb	r2, [r3, #11]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	20014228 	.word	0x20014228

08000f1c <SEND_ALERT_PACKET>:


void SEND_ALERT_PACKET()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

	DEVICE_ALERT_DATA_SEND._header  = Send_BlueTooth_Alert_Header;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <SEND_ALERT_PACKET+0x48>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8000f30:	705a      	strb	r2, [r3, #1]
	DEVICE_ALERT_DATA_SEND._length  = 7;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <SEND_ALERT_PACKET+0x48>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	709a      	strb	r2, [r3, #2]
	DEVICE_ALERT_DATA_SEND._CRC8    = chksum8((unsigned char*)&DEVICE_ALERT_DATA_SEND.FIRST_FRAME_UN.FIRST_BYTES,(DEVICE_ALERT_DATA_SEND_LENGTH -1));
 8000f38:	2105      	movs	r1, #5
 8000f3a:	480b      	ldr	r0, [pc, #44]	; (8000f68 <SEND_ALERT_PACKET+0x4c>)
 8000f3c:	f003 fa5a 	bl	80043f4 <chksum8>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <SEND_ALERT_PACKET+0x48>)
 8000f46:	725a      	strb	r2, [r3, #9]
#ifdef	UART_COMMUNICATION_1
	HAL_UART_Transmit(&huart6,(uint8_t*)&DEVICE_ALERT_DATA_SEND,sizeof(DEVICE_ALERT_DATA_SEND),300);
 8000f48:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	4905      	ldr	r1, [pc, #20]	; (8000f64 <SEND_ALERT_PACKET+0x48>)
 8000f50:	4806      	ldr	r0, [pc, #24]	; (8000f6c <SEND_ALERT_PACKET+0x50>)
 8000f52:	f019 f884 	bl	801a05e <HAL_UART_Transmit>
#endif
#ifdef	USB_COMMUNICATION_1
	CDC_Transmit_FS((uint8_t*)&DEVICE_ALERT_DATA_SEND,sizeof(DEVICE_ALERT_DATA_SEND));
 8000f56:	210a      	movs	r1, #10
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <SEND_ALERT_PACKET+0x48>)
 8000f5a:	f020 f983 	bl	8021264 <CDC_Transmit_FS>
#endif


}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20013b34 	.word	0x20013b34
 8000f68:	20013b37 	.word	0x20013b37
 8000f6c:	20014104 	.word	0x20014104

08000f70 <Clear_All_Alert_Bits>:



void Clear_All_Alert_Bits()
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 8000f74:	4a36      	ldr	r2, [pc, #216]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000f76:	78d3      	ldrb	r3, [r2, #3]
 8000f78:	f36f 0300 	bfc	r3, #0, #1
 8000f7c:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 8000f7e:	4a34      	ldr	r2, [pc, #208]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000f80:	78d3      	ldrb	r3, [r2, #3]
 8000f82:	f36f 0341 	bfc	r3, #1, #1
 8000f86:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 8000f88:	4a31      	ldr	r2, [pc, #196]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000f8a:	7953      	ldrb	r3, [r2, #5]
 8000f8c:	f36f 0300 	bfc	r3, #0, #1
 8000f90:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 8000f92:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000f94:	7953      	ldrb	r3, [r2, #5]
 8000f96:	f36f 0341 	bfc	r3, #1, #1
 8000f9a:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 8000f9c:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000f9e:	7953      	ldrb	r3, [r2, #5]
 8000fa0:	f36f 0382 	bfc	r3, #2, #1
 8000fa4:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 8000fa6:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000fa8:	7953      	ldrb	r3, [r2, #5]
 8000faa:	f36f 03c3 	bfc	r3, #3, #1
 8000fae:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 8000fb0:	4a27      	ldr	r2, [pc, #156]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000fb2:	7953      	ldrb	r3, [r2, #5]
 8000fb4:	f36f 1386 	bfc	r3, #6, #1
 8000fb8:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 8000fba:	4a25      	ldr	r2, [pc, #148]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000fbc:	7953      	ldrb	r3, [r2, #5]
 8000fbe:	f36f 13c7 	bfc	r3, #7, #1
 8000fc2:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000fc6:	7953      	ldrb	r3, [r2, #5]
 8000fc8:	f36f 1304 	bfc	r3, #4, #1
 8000fcc:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 8000fce:	4a20      	ldr	r2, [pc, #128]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000fd0:	7953      	ldrb	r3, [r2, #5]
 8000fd2:	f36f 1345 	bfc	r3, #5, #1
 8000fd6:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000fda:	7993      	ldrb	r3, [r2, #6]
 8000fdc:	f36f 1386 	bfc	r3, #6, #1
 8000fe0:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 8000fe2:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000fe4:	7993      	ldrb	r3, [r2, #6]
 8000fe6:	f36f 13c7 	bfc	r3, #7, #1
 8000fea:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 8000fec:	4a18      	ldr	r2, [pc, #96]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000fee:	78d3      	ldrb	r3, [r2, #3]
 8000ff0:	f36f 03c3 	bfc	r3, #3, #1
 8000ff4:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8000ff8:	78d3      	ldrb	r3, [r2, #3]
 8000ffa:	f36f 1304 	bfc	r3, #4, #1
 8000ffe:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_FLOW_SENSOR_WRONG_DIRECTION);
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8001002:	78d3      	ldrb	r3, [r2, #3]
 8001004:	f36f 1345 	bfc	r3, #5, #1
 8001008:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 800100c:	7993      	ldrb	r3, [r2, #6]
 800100e:	f36f 0300 	bfc	r3, #0, #1
 8001012:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8001016:	7993      	ldrb	r3, [r2, #6]
 8001018:	f36f 0341 	bfc	r3, #1, #1
 800101c:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_LEAK);
 800101e:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8001020:	7913      	ldrb	r3, [r2, #4]
 8001022:	f36f 03c3 	bfc	r3, #3, #1
 8001026:	7113      	strb	r3, [r2, #4]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_20_PER_BATTERY_DRAIN);
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 800102a:	78d3      	ldrb	r3, [r2, #3]
 800102c:	f36f 0382 	bfc	r3, #2, #1
 8001030:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 8001034:	78d3      	ldrb	r3, [r2, #3]
 8001036:	f36f 1386 	bfc	r3, #6, #1
 800103a:	70d3      	strb	r3, [r2, #3]
    CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <Clear_All_Alert_Bits+0xe0>)
 800103e:	78d3      	ldrb	r3, [r2, #3]
 8001040:	f36f 13c7 	bfc	r3, #7, #1
 8001044:	70d3      	strb	r3, [r2, #3]
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20013b34 	.word	0x20013b34

08001054 <Alert_Task>:



void Alert_Task (void *argument)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if( (Run_Current_Breathe_State == Run_Inspiration_Cycle)  )
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <Alert_Task+0x38>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d10f      	bne.n	8001084 <Alert_Task+0x30>
		{
			if(Alert_Check == 1 && (! ((Assist_Control == ASSIST_OFF) && (Patient_Trigger == PATIENT_TRIGGER_HAPPEN) )) )
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <Alert_Task+0x3c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d109      	bne.n	8001080 <Alert_Task+0x2c>
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <Alert_Task+0x40>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d103      	bne.n	800107c <Alert_Task+0x28>
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <Alert_Task+0x44>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d001      	beq.n	8001080 <Alert_Task+0x2c>
			{
				Patient_Circuit_Disconnected_Alert();
 800107c:	f000 fbe8 	bl	8001850 <Patient_Circuit_Disconnected_Alert>
			}
			Proximal_Flow_Sensor_Reverse_Direction();
 8001080:	f000 fc5a 	bl	8001938 <Proximal_Flow_Sensor_Reverse_Direction>
		}
		vTaskDelay(Two_Millisecond_Delay);
 8001084:	2002      	movs	r0, #2
 8001086:	f01e f8d1 	bl	801f22c <vTaskDelay>
		if( (Run_Current_Breathe_State == Run_Inspiration_Cycle)  )
 800108a:	e7e7      	b.n	800105c <Alert_Task+0x8>
 800108c:	20013f7c 	.word	0x20013f7c
 8001090:	20014174 	.word	0x20014174
 8001094:	200139e0 	.word	0x200139e0
 8001098:	20013ca9 	.word	0x20013ca9

0800109c <Alert_Flags_Reset>:
}



void Alert_Flags_Reset()
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	Alert_Count.PIP_Alert_Count          = 0;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <Alert_Flags_Reset+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
	Alert_Count.PEEP_Alert_Count         = 0;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <Alert_Flags_Reset+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	705a      	strb	r2, [r3, #1]
	Alert_Count.Tidal_Volume_Alert_Count = 0;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <Alert_Flags_Reset+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	709a      	strb	r2, [r3, #2]
	Achieved_Respiratory_Count           = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <Alert_Flags_Reset+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
	Total_Tidal_volume                   = 0;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <Alert_Flags_Reset+0x54>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
	Alert_Count.FIO2_Supply_Alert_Count  = 0;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <Alert_Flags_Reset+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	70da      	strb	r2, [r3, #3]
	Alert_Count.FIO2_Alert_Count         = 0;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <Alert_Flags_Reset+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	711a      	strb	r2, [r3, #4]
	Alert_Count.Leak_Alert_Count         = 0;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <Alert_Flags_Reset+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	715a      	strb	r2, [r3, #5]
	Alert_Count.Patient_Circuit_disconnected_Alert_Count=0;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <Alert_Flags_Reset+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	80da      	strh	r2, [r3, #6]
	Alert_Check=5;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <Alert_Flags_Reset+0x58>)
 80010d8:	2205      	movs	r2, #5
 80010da:	701a      	strb	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20014274 	.word	0x20014274
 80010ec:	200001bc 	.word	0x200001bc
 80010f0:	20013ac0 	.word	0x20013ac0
 80010f4:	20014174 	.word	0x20014174

080010f8 <Check_Alert>:


void Check_Alert()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	Convert_Battery_Percentage();
 80010fc:	f006 f904 	bl	8007308 <Convert_Battery_Percentage>
	if(Patient_Ckt_Discon == 1)
 8001100:	4b43      	ldr	r3, [pc, #268]	; (8001210 <Check_Alert+0x118>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d105      	bne.n	8001114 <Check_Alert+0x1c>
	{
		Hide_Alert_1();
 8001108:	f000 fc90 	bl	8001a2c <Hide_Alert_1>
		Patient_Ckt_Discon = 0;
 800110c:	4b40      	ldr	r3, [pc, #256]	; (8001210 <Check_Alert+0x118>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e055      	b.n	80011c0 <Check_Alert+0xc8>
	}
    else if(Proximal_Flow_Sensor_Reverse == 1)
 8001114:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <Check_Alert+0x11c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d105      	bne.n	8001128 <Check_Alert+0x30>
	{
		Hide_Alert_2();
 800111c:	f000 fcf4 	bl	8001b08 <Hide_Alert_2>
		Proximal_Flow_Sensor_Reverse = 0;
 8001120:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <Check_Alert+0x11c>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e04b      	b.n	80011c0 <Check_Alert+0xc8>
	}
	else
	{
		Pip_Alert(PIP_Average_Parameter.Maximum_PIP_Acheived );
 8001128:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <Check_Alert+0x120>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f92b 	bl	8001388 <Pip_Alert>
		Peep_Alert(Common_Mode_Parameter._PEEP_Val);
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <Check_Alert+0x124>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f97a 	bl	8001430 <Peep_Alert>
		Tidal_Volume_Alert(vol.Volume_max);
 800113c:	4b38      	ldr	r3, [pc, #224]	; (8001220 <Check_Alert+0x128>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f9cf 	bl	80014e4 <Tidal_Volume_Alert>
		if(Achieved_Respiratory_Count == Common_Mode_Parameter._RESPIRATORY_RATE_Val)
 8001146:	4b35      	ldr	r3, [pc, #212]	; (800121c <Check_Alert+0x124>)
 8001148:	789a      	ldrb	r2, [r3, #2]
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <Check_Alert+0x12c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d11a      	bne.n	8001188 <Check_Alert+0x90>
		{
			Achieved_Minite_Volume         = ((float)Total_Tidal_volume / 1000);
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <Check_Alert+0x130>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800122c <Check_Alert+0x134>
 8001162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116a:	ee17 2a90 	vmov	r2, s15
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <Check_Alert+0x138>)
 8001170:	601a      	str	r2, [r3, #0]
			Total_Tidal_volume             = 0;
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <Check_Alert+0x130>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
			Achieved_Respiratory_Count     = 0;
 8001178:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <Check_Alert+0x12c>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
			Minite_Volume_Alert(Achieved_Minite_Volume);
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <Check_Alert+0x138>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fa04 	bl	8001590 <Minite_Volume_Alert>
		}
		if(Alert_Check == 1)
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <Check_Alert+0x13c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d101      	bne.n	8001194 <Check_Alert+0x9c>
		{
			Respiratory_Rate_Alert();
 8001190:	f000 fa40 	bl	8001614 <Respiratory_Rate_Alert>
		}
		if(Common_Mode_Parameter._FIO2_Val>21)
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <Check_Alert+0x124>)
 8001196:	78db      	ldrb	r3, [r3, #3]
 8001198:	2b15      	cmp	r3, #21
 800119a:	d90f      	bls.n	80011bc <Check_Alert+0xc4>
		{
			Oxygen_Supply_Alert(Common_Mode_Parameter._FIO2_Val,Oxygen_Parameter.Achieved_Oxygen);
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <Check_Alert+0x124>)
 800119e:	78db      	ldrb	r3, [r3, #3]
 80011a0:	4a25      	ldr	r2, [pc, #148]	; (8001238 <Check_Alert+0x140>)
 80011a2:	7b12      	ldrb	r2, [r2, #12]
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fa92 	bl	80016d0 <Oxygen_Supply_Alert>
			Oxygen_Blending_Alert(Common_Mode_Parameter._FIO2_Val,Oxygen_Parameter.Achieved_Oxygen);
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <Check_Alert+0x124>)
 80011ae:	78db      	ldrb	r3, [r3, #3]
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <Check_Alert+0x140>)
 80011b2:	7b12      	ldrb	r2, [r2, #12]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fac2 	bl	8001740 <Oxygen_Blending_Alert>
		}
		Leak_Alert();
 80011bc:	f000 fb1c 	bl	80017f8 <Leak_Alert>
	}
	AC_Supply_or_Battery_Supply_Indication();
 80011c0:	f000 f894 	bl	80012ec <AC_Supply_or_Battery_Supply_Indication>
	if(old_State != Newstate)
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <Check_Alert+0x144>)
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <Check_Alert+0x148>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d01c      	beq.n	800120a <Check_Alert+0x112>
	{
		if(Toggle == 1)
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <Check_Alert+0x14c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10a      	bne.n	80011ee <Check_Alert+0xf6>
		{
		    SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <Check_Alert+0x150>)
 80011da:	78d3      	ldrb	r3, [r2, #3]
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	70d3      	strb	r3, [r2, #3]
			CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 80011e2:	4a19      	ldr	r2, [pc, #100]	; (8001248 <Check_Alert+0x150>)
 80011e4:	78d3      	ldrb	r3, [r2, #3]
 80011e6:	f36f 0341 	bfc	r3, #1, #1
 80011ea:	70d3      	strb	r3, [r2, #3]
 80011ec:	e009      	b.n	8001202 <Check_Alert+0x10a>
		}
		else
		{
			CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <Check_Alert+0x150>)
 80011f0:	78d3      	ldrb	r3, [r2, #3]
 80011f2:	f36f 0300 	bfc	r3, #0, #1
 80011f6:	70d3      	strb	r3, [r2, #3]
			SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 80011f8:	4a13      	ldr	r2, [pc, #76]	; (8001248 <Check_Alert+0x150>)
 80011fa:	78d3      	ldrb	r3, [r2, #3]
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	70d3      	strb	r3, [r2, #3]
		}
		Newstate = old_State;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <Check_Alert+0x144>)
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <Check_Alert+0x148>)
 8001208:	701a      	strb	r2, [r3, #0]
	}


}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200001cd 	.word	0x200001cd
 8001214:	200001ce 	.word	0x200001ce
 8001218:	20013b70 	.word	0x20013b70
 800121c:	20013ba4 	.word	0x20013ba4
 8001220:	200140c8 	.word	0x200140c8
 8001224:	200001bc 	.word	0x200001bc
 8001228:	20013ac0 	.word	0x20013ac0
 800122c:	447a0000 	.word	0x447a0000
 8001230:	200001c0 	.word	0x200001c0
 8001234:	20014174 	.word	0x20014174
 8001238:	2001409c 	.word	0x2001409c
 800123c:	20000000 	.word	0x20000000
 8001240:	200001d0 	.word	0x200001d0
 8001244:	200001cf 	.word	0x200001cf
 8001248:	20013b34 	.word	0x20013b34

0800124c <Alert_Inspiration_Time_Parameter>:

void Alert_Inspiration_Time_Parameter()
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	Send_Bluetooth_Data_Farme = SEND_ALERT_FRAME;
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <Alert_Inspiration_Time_Parameter+0x78>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
	Achieved_Respiratory_Count++;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <Alert_Inspiration_Time_Parameter+0x7c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <Alert_Inspiration_Time_Parameter+0x7c>)
 8001260:	701a      	strb	r2, [r3, #0]
	Total_Tidal_volume += vol.Volume_max;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <Alert_Inspiration_Time_Parameter+0x80>)
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <Alert_Inspiration_Time_Parameter+0x84>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <Alert_Inspiration_Time_Parameter+0x84>)
 800126e:	6013      	str	r3, [r2, #0]
	RR_E_TIME_ACHIEVED = TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED ;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <Alert_Inspiration_Time_Parameter+0x88>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <Alert_Inspiration_Time_Parameter+0x8c>)
 8001276:	6013      	str	r3, [r2, #0]
	if(Alert_Check>1)
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <Alert_Inspiration_Time_Parameter+0x90>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d905      	bls.n	800128c <Alert_Inspiration_Time_Parameter+0x40>
		Alert_Check--;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <Alert_Inspiration_Time_Parameter+0x90>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <Alert_Inspiration_Time_Parameter+0x90>)
 800128a:	701a      	strb	r2, [r3, #0]
	Exp_Volume=vol.Volume;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <Alert_Inspiration_Time_Parameter+0x80>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001296:	ee17 2a90 	vmov	r2, s15
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <Alert_Inspiration_Time_Parameter+0x94>)
 800129c:	601a      	str	r2, [r3, #0]
    Exp_Volume=Insp_Volume-Exp_Volume;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <Alert_Inspiration_Time_Parameter+0x98>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <Alert_Inspiration_Time_Parameter+0x94>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <Alert_Inspiration_Time_Parameter+0x94>)
 80012aa:	6013      	str	r3, [r2, #0]
	Leak=Insp_Volume-Exp_Volume;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <Alert_Inspiration_Time_Parameter+0x98>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <Alert_Inspiration_Time_Parameter+0x94>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <Alert_Inspiration_Time_Parameter+0x9c>)
 80012b8:	6013      	str	r3, [r2, #0]
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	20013d10 	.word	0x20013d10
 80012c8:	200001bc 	.word	0x200001bc
 80012cc:	200140c8 	.word	0x200140c8
 80012d0:	20013ac0 	.word	0x20013ac0
 80012d4:	200141fc 	.word	0x200141fc
 80012d8:	200001c4 	.word	0x200001c4
 80012dc:	20014174 	.word	0x20014174
 80012e0:	200140bc 	.word	0x200140bc
 80012e4:	20014280 	.word	0x20014280
 80012e8:	20013f84 	.word	0x20013f84

080012ec <AC_Supply_or_Battery_Supply_Indication>:



void AC_Supply_or_Battery_Supply_Indication()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2))== 0)
 80012f0:	2104      	movs	r1, #4
 80012f2:	480b      	ldr	r0, [pc, #44]	; (8001320 <AC_Supply_or_Battery_Supply_Indication+0x34>)
 80012f4:	f014 f872 	bl	80153dc <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d107      	bne.n	800130e <AC_Supply_or_Battery_Supply_Indication+0x22>
	{
		Toggle = 1;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <AC_Supply_or_Battery_Supply_Indication+0x38>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
		old_State=Toggle;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <AC_Supply_or_Battery_Supply_Indication+0x38>)
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <AC_Supply_or_Battery_Supply_Indication+0x3c>)
 800130a:	701a      	strb	r2, [r3, #0]
	else
	{
		Toggle = 0;
		old_State = Toggle;
	}
}
 800130c:	e006      	b.n	800131c <AC_Supply_or_Battery_Supply_Indication+0x30>
		Toggle = 0;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <AC_Supply_or_Battery_Supply_Indication+0x38>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
		old_State = Toggle;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <AC_Supply_or_Battery_Supply_Indication+0x38>)
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <AC_Supply_or_Battery_Supply_Indication+0x3c>)
 800131a:	701a      	strb	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	200001cf 	.word	0x200001cf
 8001328:	20000000 	.word	0x20000000

0800132c <Alert_Expiration_Time_Parameter>:



void Alert_Expiration_Time_Parameter()
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	RR_I_TIME_ACHIEVED = TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED ;
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <Alert_Expiration_Time_Parameter+0x40>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <Alert_Expiration_Time_Parameter+0x44>)
 8001336:	6013      	str	r3, [r2, #0]
	Insp_Volume=vol.Volume;
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <Alert_Expiration_Time_Parameter+0x48>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001342:	ee17 2a90 	vmov	r2, s15
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <Alert_Expiration_Time_Parameter+0x4c>)
 8001348:	601a      	str	r2, [r3, #0]
	Alert_Count.Patient_Circuit_disconnected_Alert_Count=0;
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <Alert_Expiration_Time_Parameter+0x50>)
 800134c:	2200      	movs	r2, #0
 800134e:	80da      	strh	r2, [r3, #6]
	Alert_Count.Proximal_Flow_Sensor_reversed_Alert_Count=0;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <Alert_Expiration_Time_Parameter+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	811a      	strh	r2, [r3, #8]
	PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = CHECK;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <Alert_Expiration_Time_Parameter+0x54>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
	PROXIMAL_SENSOR_REVERSE_ALERT_CHECK = CHECK;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <Alert_Expiration_Time_Parameter+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]

}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	200141fc 	.word	0x200141fc
 8001370:	200001c8 	.word	0x200001c8
 8001374:	200140c8 	.word	0x200140c8
 8001378:	20014280 	.word	0x20014280
 800137c:	20014274 	.word	0x20014274
 8001380:	20013ac9 	.word	0x20013ac9
 8001384:	20013948 	.word	0x20013948

08001388 <Pip_Alert>:


void Pip_Alert(uint8_t PIP)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]

	if ( (PIP >= Alert_Range._RANGE_PIP_MIN_Val) && (PIP <= Alert_Range._RANGE_PIP_MAX_Val))
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <Pip_Alert+0x98>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	79fa      	ldrb	r2, [r7, #7]
 8001398:	429a      	cmp	r2, r3
 800139a:	d308      	bcc.n	80013ae <Pip_Alert+0x26>
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <Pip_Alert+0x98>)
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	79fa      	ldrb	r2, [r7, #7]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d803      	bhi.n	80013ae <Pip_Alert+0x26>
	{
		Alert_Count.PIP_Alert_Count = 0;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <Pip_Alert+0x9c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
					Alert_Count.PIP_Alert_Count = 0;
				}
		}
	}
}
 80013ac:	e031      	b.n	8001412 <Pip_Alert+0x8a>
		Alert_Count.PIP_Alert_Count++;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <Pip_Alert+0x9c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <Pip_Alert+0x9c>)
 80013b8:	701a      	strb	r2, [r3, #0]
		if (Alert_Count.PIP_Alert_Count > 3)
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <Pip_Alert+0x9c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d927      	bls.n	8001412 <Pip_Alert+0x8a>
			Alert_Status = ALERT_HAPPEN;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <Pip_Alert+0xa0>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
				if (Alert_Range._RANGE_PIP_MIN_Val > PIP)
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <Pip_Alert+0x98>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d20d      	bcs.n	80013ee <Pip_Alert+0x66>
					SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 80013d2:	4a16      	ldr	r2, [pc, #88]	; (800142c <Pip_Alert+0xa4>)
 80013d4:	7953      	ldrb	r3, [r2, #5]
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	7153      	strb	r3, [r2, #5]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 80013dc:	4a13      	ldr	r2, [pc, #76]	; (800142c <Pip_Alert+0xa4>)
 80013de:	7953      	ldrb	r3, [r2, #5]
 80013e0:	f36f 0300 	bfc	r3, #0, #1
 80013e4:	7153      	strb	r3, [r2, #5]
					Alert_Count.PIP_Alert_Count = 0;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <Pip_Alert+0x9c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
}
 80013ec:	e011      	b.n	8001412 <Pip_Alert+0x8a>
				else if (Alert_Range._RANGE_PIP_MAX_Val < PIP)
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <Pip_Alert+0x98>)
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	79fa      	ldrb	r2, [r7, #7]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d90c      	bls.n	8001412 <Pip_Alert+0x8a>
					SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 80013f8:	4a0c      	ldr	r2, [pc, #48]	; (800142c <Pip_Alert+0xa4>)
 80013fa:	7953      	ldrb	r3, [r2, #5]
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	7153      	strb	r3, [r2, #5]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <Pip_Alert+0xa4>)
 8001404:	7953      	ldrb	r3, [r2, #5]
 8001406:	f36f 0341 	bfc	r3, #1, #1
 800140a:	7153      	strb	r3, [r2, #5]
					Alert_Count.PIP_Alert_Count = 0;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <Pip_Alert+0x9c>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20014228 	.word	0x20014228
 8001424:	20014274 	.word	0x20014274
 8001428:	20013f88 	.word	0x20013f88
 800142c:	20013b34 	.word	0x20013b34

08001430 <Peep_Alert>:


void Peep_Alert(uint8_t PEEP)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	uint8_t PEEP_HIGH = (PEEP+3);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	3303      	adds	r3, #3
 800143e:	73fb      	strb	r3, [r7, #15]
	uint8_t PEEP_LOW = (PEEP-3);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	3b03      	subs	r3, #3
 8001444:	73bb      	strb	r3, [r7, #14]
	if ((PEEP_Maintain_Parameter.PEEP_AVG_VAL <= PEEP_HIGH)&& (PEEP_Maintain_Parameter.PEEP_AVG_VAL >= PEEP_LOW))
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <Peep_Alert+0xa4>)
 8001448:	7c1b      	ldrb	r3, [r3, #16]
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	429a      	cmp	r2, r3
 800144e:	d308      	bcc.n	8001462 <Peep_Alert+0x32>
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <Peep_Alert+0xa4>)
 8001452:	7c1b      	ldrb	r3, [r3, #16]
 8001454:	7bba      	ldrb	r2, [r7, #14]
 8001456:	429a      	cmp	r2, r3
 8001458:	d803      	bhi.n	8001462 <Peep_Alert+0x32>
	{
		Alert_Count.PEEP_Alert_Count = 0;
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <Peep_Alert+0xa8>)
 800145c:	2200      	movs	r2, #0
 800145e:	705a      	strb	r2, [r3, #1]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
					Alert_Count.PEEP_Alert_Count = 0;
				}
			}
	}
}
 8001460:	e031      	b.n	80014c6 <Peep_Alert+0x96>
		Alert_Count.PEEP_Alert_Count++;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <Peep_Alert+0xa8>)
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	3301      	adds	r3, #1
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <Peep_Alert+0xa8>)
 800146c:	705a      	strb	r2, [r3, #1]
			if(Alert_Count.PEEP_Alert_Count>3)
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <Peep_Alert+0xa8>)
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d927      	bls.n	80014c6 <Peep_Alert+0x96>
				Alert_Status = ALERT_HAPPEN;
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <Peep_Alert+0xac>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
				if (PEEP_HIGH > PEEP_Maintain_Parameter.PEEP_AVG_VAL)
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <Peep_Alert+0xa4>)
 800147e:	7c1b      	ldrb	r3, [r3, #16]
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	429a      	cmp	r2, r3
 8001484:	d90d      	bls.n	80014a2 <Peep_Alert+0x72>
					SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <Peep_Alert+0xb0>)
 8001488:	7953      	ldrb	r3, [r2, #5]
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	7153      	strb	r3, [r2, #5]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 8001490:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <Peep_Alert+0xb0>)
 8001492:	7953      	ldrb	r3, [r2, #5]
 8001494:	f36f 0382 	bfc	r3, #2, #1
 8001498:	7153      	strb	r3, [r2, #5]
					Alert_Count.PEEP_Alert_Count = 0;
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <Peep_Alert+0xa8>)
 800149c:	2200      	movs	r2, #0
 800149e:	705a      	strb	r2, [r3, #1]
}
 80014a0:	e011      	b.n	80014c6 <Peep_Alert+0x96>
				else if (PEEP_LOW< PEEP_Maintain_Parameter.PEEP_AVG_VAL)
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <Peep_Alert+0xa4>)
 80014a4:	7c1b      	ldrb	r3, [r3, #16]
 80014a6:	7bba      	ldrb	r2, [r7, #14]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d20c      	bcs.n	80014c6 <Peep_Alert+0x96>
					SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <Peep_Alert+0xb0>)
 80014ae:	7953      	ldrb	r3, [r2, #5]
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	7153      	strb	r3, [r2, #5]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <Peep_Alert+0xb0>)
 80014b8:	7953      	ldrb	r3, [r2, #5]
 80014ba:	f36f 03c3 	bfc	r3, #3, #1
 80014be:	7153      	strb	r3, [r2, #5]
					Alert_Count.PEEP_Alert_Count = 0;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <Peep_Alert+0xa8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	705a      	strb	r2, [r3, #1]
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20014300 	.word	0x20014300
 80014d8:	20014274 	.word	0x20014274
 80014dc:	20013f88 	.word	0x20013f88
 80014e0:	20013b34 	.word	0x20013b34

080014e4 <Tidal_Volume_Alert>:




void Tidal_Volume_Alert(int Maximum_Volume_Achieved)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	if( (Maximum_Volume_Achieved >= Alert_Range._RANGE_VT_MIN_Val)  &&  (Maximum_Volume_Achieved <= Alert_Range._RANGE_VT_MAX_Val))
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <Tidal_Volume_Alert+0x9c>)
 80014ee:	885b      	ldrh	r3, [r3, #2]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	db09      	blt.n	800150c <Tidal_Volume_Alert+0x28>
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <Tidal_Volume_Alert+0x9c>)
 80014fa:	889b      	ldrh	r3, [r3, #4]
 80014fc:	461a      	mov	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4293      	cmp	r3, r2
 8001502:	dc03      	bgt.n	800150c <Tidal_Volume_Alert+0x28>
	{
		Alert_Count.Tidal_Volume_Alert_Count=0;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <Tidal_Volume_Alert+0xa0>)
 8001506:	2200      	movs	r2, #0
 8001508:	709a      	strb	r2, [r3, #2]
				Alert_Count.Tidal_Volume_Alert_Count=0;
			}
		}

	  }
}
 800150a:	e033      	b.n	8001574 <Tidal_Volume_Alert+0x90>
		Alert_Count.Tidal_Volume_Alert_Count++;
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <Tidal_Volume_Alert+0xa0>)
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	3301      	adds	r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <Tidal_Volume_Alert+0xa0>)
 8001516:	709a      	strb	r2, [r3, #2]
		if(Alert_Count.Tidal_Volume_Alert_Count>3)
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <Tidal_Volume_Alert+0xa0>)
 800151a:	789b      	ldrb	r3, [r3, #2]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d929      	bls.n	8001574 <Tidal_Volume_Alert+0x90>
			Alert_Status = ALERT_HAPPEN;
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <Tidal_Volume_Alert+0xa4>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
			if(Alert_Range._RANGE_VT_MIN_Val>Maximum_Volume_Achieved)
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <Tidal_Volume_Alert+0x9c>)
 8001528:	885b      	ldrh	r3, [r3, #2]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4293      	cmp	r3, r2
 8001530:	da0d      	bge.n	800154e <Tidal_Volume_Alert+0x6a>
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 8001532:	4a16      	ldr	r2, [pc, #88]	; (800158c <Tidal_Volume_Alert+0xa8>)
 8001534:	7953      	ldrb	r3, [r2, #5]
 8001536:	f043 0320 	orr.w	r3, r3, #32
 800153a:	7153      	strb	r3, [r2, #5]
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <Tidal_Volume_Alert+0xa8>)
 800153e:	7953      	ldrb	r3, [r2, #5]
 8001540:	f36f 1304 	bfc	r3, #4, #1
 8001544:	7153      	strb	r3, [r2, #5]
				Alert_Count.Tidal_Volume_Alert_Count=0;
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <Tidal_Volume_Alert+0xa0>)
 8001548:	2200      	movs	r2, #0
 800154a:	709a      	strb	r2, [r3, #2]
}
 800154c:	e012      	b.n	8001574 <Tidal_Volume_Alert+0x90>
			else if(Alert_Range._RANGE_VT_MAX_Val<Maximum_Volume_Achieved)
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <Tidal_Volume_Alert+0x9c>)
 8001550:	889b      	ldrh	r3, [r3, #4]
 8001552:	461a      	mov	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4293      	cmp	r3, r2
 8001558:	dd0c      	ble.n	8001574 <Tidal_Volume_Alert+0x90>
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 800155a:	4a0c      	ldr	r2, [pc, #48]	; (800158c <Tidal_Volume_Alert+0xa8>)
 800155c:	7953      	ldrb	r3, [r2, #5]
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	7153      	strb	r3, [r2, #5]
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 8001564:	4a09      	ldr	r2, [pc, #36]	; (800158c <Tidal_Volume_Alert+0xa8>)
 8001566:	7953      	ldrb	r3, [r2, #5]
 8001568:	f36f 1345 	bfc	r3, #5, #1
 800156c:	7153      	strb	r3, [r2, #5]
				Alert_Count.Tidal_Volume_Alert_Count=0;
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <Tidal_Volume_Alert+0xa0>)
 8001570:	2200      	movs	r2, #0
 8001572:	709a      	strb	r2, [r3, #2]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20014228 	.word	0x20014228
 8001584:	20014274 	.word	0x20014274
 8001588:	20013f88 	.word	0x20013f88
 800158c:	20013b34 	.word	0x20013b34

08001590 <Minite_Volume_Alert>:




void Minite_Volume_Alert(int Achieved_Minite_Volume)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	if ((Achieved_Minite_Volume >= Alert_Range._RANGE_MINT_VOL_MIN_Val) && (Achieved_Minite_Volume <= Alert_Range._RANGE_MINT_VOL_MAX_Val))
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <Minite_Volume_Alert+0x78>)
 800159a:	7a1b      	ldrb	r3, [r3, #8]
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4293      	cmp	r3, r2
 80015a2:	db05      	blt.n	80015b0 <Minite_Volume_Alert+0x20>
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <Minite_Volume_Alert+0x78>)
 80015a6:	7a5b      	ldrb	r3, [r3, #9]
 80015a8:	461a      	mov	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4293      	cmp	r3, r2
 80015ae:	dd24      	ble.n	80015fa <Minite_Volume_Alert+0x6a>

	}
	else
	{

		Alert_Status = ALERT_HAPPEN;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <Minite_Volume_Alert+0x7c>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]

			if (Alert_Range._RANGE_MINT_VOL_MIN_Val > Achieved_Minite_Volume)
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <Minite_Volume_Alert+0x78>)
 80015b8:	7a1b      	ldrb	r3, [r3, #8]
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4293      	cmp	r3, r2
 80015c0:	da0a      	bge.n	80015d8 <Minite_Volume_Alert+0x48>
			{
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <Minite_Volume_Alert+0x80>)
 80015c4:	7953      	ldrb	r3, [r2, #5]
 80015c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ca:	7153      	strb	r3, [r2, #5]
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 80015cc:	4a10      	ldr	r2, [pc, #64]	; (8001610 <Minite_Volume_Alert+0x80>)
 80015ce:	7953      	ldrb	r3, [r2, #5]
 80015d0:	f36f 1386 	bfc	r3, #6, #1
 80015d4:	7153      	strb	r3, [r2, #5]
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
			}
	}

}
 80015d6:	e010      	b.n	80015fa <Minite_Volume_Alert+0x6a>
			else if (Alert_Range._RANGE_MINT_VOL_MAX_Val < Achieved_Minite_Volume)
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <Minite_Volume_Alert+0x78>)
 80015da:	7a5b      	ldrb	r3, [r3, #9]
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4293      	cmp	r3, r2
 80015e2:	dd0a      	ble.n	80015fa <Minite_Volume_Alert+0x6a>
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <Minite_Volume_Alert+0x80>)
 80015e6:	7953      	ldrb	r3, [r2, #5]
 80015e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ec:	7153      	strb	r3, [r2, #5]
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <Minite_Volume_Alert+0x80>)
 80015f0:	7953      	ldrb	r3, [r2, #5]
 80015f2:	f36f 13c7 	bfc	r3, #7, #1
 80015f6:	7153      	strb	r3, [r2, #5]
}
 80015f8:	e7ff      	b.n	80015fa <Minite_Volume_Alert+0x6a>
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20014228 	.word	0x20014228
 800160c:	20013f88 	.word	0x20013f88
 8001610:	20013b34 	.word	0x20013b34

08001614 <Respiratory_Rate_Alert>:


void Respiratory_Rate_Alert()
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
	Achieved_One_RR=  (60000/((float)(RR_E_TIME_ACHIEVED + RR_I_TIME_ACHIEVED)));
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <Respiratory_Rate_Alert+0xa0>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <Respiratory_Rate_Alert+0xa4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162c:	eddf 6a23 	vldr	s13, [pc, #140]	; 80016bc <Respiratory_Rate_Alert+0xa8>
 8001630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001638:	edc7 7a01 	vstr	s15, [r7, #4]
 800163c:	793b      	ldrb	r3, [r7, #4]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <Respiratory_Rate_Alert+0xac>)
 8001642:	701a      	strb	r2, [r3, #0]
	if(( Achieved_One_RR >= Alert_Range._RANGE_RR_MIN_Val) && (Achieved_One_RR <=Alert_Range._RANGE_RR_MAX_Val))
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <Respiratory_Rate_Alert+0xb0>)
 8001646:	799a      	ldrb	r2, [r3, #6]
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <Respiratory_Rate_Alert+0xac>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d805      	bhi.n	800165c <Respiratory_Rate_Alert+0x48>
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <Respiratory_Rate_Alert+0xb0>)
 8001652:	79da      	ldrb	r2, [r3, #7]
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <Respiratory_Rate_Alert+0xac>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d224      	bcs.n	80016a6 <Respiratory_Rate_Alert+0x92>
	{

	}
	else
	{
		Alert_Status = ALERT_HAPPEN;
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <Respiratory_Rate_Alert+0xb4>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
		if(Alert_Range._RANGE_RR_MIN_Val>Achieved_One_RR)
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <Respiratory_Rate_Alert+0xb0>)
 8001664:	799a      	ldrb	r2, [r3, #6]
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <Respiratory_Rate_Alert+0xac>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d90a      	bls.n	8001684 <Respiratory_Rate_Alert+0x70>
		{
			SET_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 800166e:	4a17      	ldr	r2, [pc, #92]	; (80016cc <Respiratory_Rate_Alert+0xb8>)
 8001670:	7993      	ldrb	r3, [r2, #6]
 8001672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001676:	7193      	strb	r3, [r2, #6]
			CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <Respiratory_Rate_Alert+0xb8>)
 800167a:	7993      	ldrb	r3, [r2, #6]
 800167c:	f36f 1386 	bfc	r3, #6, #1
 8001680:	7193      	strb	r3, [r2, #6]
		{
			SET_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
			CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
		}
	}
}
 8001682:	e010      	b.n	80016a6 <Respiratory_Rate_Alert+0x92>
		else if(Alert_Range._RANGE_RR_MAX_Val<Achieved_One_RR)
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <Respiratory_Rate_Alert+0xb0>)
 8001686:	79da      	ldrb	r2, [r3, #7]
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <Respiratory_Rate_Alert+0xac>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d20a      	bcs.n	80016a6 <Respiratory_Rate_Alert+0x92>
			SET_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <Respiratory_Rate_Alert+0xb8>)
 8001692:	7993      	ldrb	r3, [r2, #6]
 8001694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001698:	7193      	strb	r3, [r2, #6]
			CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 800169a:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <Respiratory_Rate_Alert+0xb8>)
 800169c:	7993      	ldrb	r3, [r2, #6]
 800169e:	f36f 13c7 	bfc	r3, #7, #1
 80016a2:	7193      	strb	r3, [r2, #6]
}
 80016a4:	e7ff      	b.n	80016a6 <Respiratory_Rate_Alert+0x92>
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	200001c4 	.word	0x200001c4
 80016b8:	200001c8 	.word	0x200001c8
 80016bc:	476a6000 	.word	0x476a6000
 80016c0:	200001bd 	.word	0x200001bd
 80016c4:	20014228 	.word	0x20014228
 80016c8:	20013f88 	.word	0x20013f88
 80016cc:	20013b34 	.word	0x20013b34

080016d0 <Oxygen_Supply_Alert>:




void Oxygen_Supply_Alert(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
	if(Achieved_Oxygen<=22)
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	2b16      	cmp	r3, #22
 80016e4:	d818      	bhi.n	8001718 <Oxygen_Supply_Alert+0x48>
	{
		Alert_Count.FIO2_Supply_Alert_Count++;
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <Oxygen_Supply_Alert+0x60>)
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	3301      	adds	r3, #1
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <Oxygen_Supply_Alert+0x60>)
 80016f0:	70da      	strb	r2, [r3, #3]
		if(Alert_Count.FIO2_Supply_Alert_Count>5)
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <Oxygen_Supply_Alert+0x60>)
 80016f4:	78db      	ldrb	r3, [r3, #3]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d914      	bls.n	8001724 <Oxygen_Supply_Alert+0x54>
		{
			Alert_Status = ALERT_HAPPEN;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <Oxygen_Supply_Alert+0x64>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
			  SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <Oxygen_Supply_Alert+0x68>)
 8001702:	78d3      	ldrb	r3, [r2, #3]
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	70d3      	strb	r3, [r2, #3]
			  Alert_Count.FIO2_Supply_Alert_Count=0;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <Oxygen_Supply_Alert+0x60>)
 800170c:	2200      	movs	r2, #0
 800170e:	70da      	strb	r2, [r3, #3]
			  Oxygen_Supply_Failed = YES;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <Oxygen_Supply_Alert+0x6c>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
	{
		Alert_Count.FIO2_Supply_Alert_Count=0;
		Oxygen_Supply_Failed = NO;
	}

}
 8001716:	e005      	b.n	8001724 <Oxygen_Supply_Alert+0x54>
		Alert_Count.FIO2_Supply_Alert_Count=0;
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <Oxygen_Supply_Alert+0x60>)
 800171a:	2200      	movs	r2, #0
 800171c:	70da      	strb	r2, [r3, #3]
		Oxygen_Supply_Failed = NO;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <Oxygen_Supply_Alert+0x6c>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	20014274 	.word	0x20014274
 8001734:	20013f88 	.word	0x20013f88
 8001738:	20013b34 	.word	0x20013b34
 800173c:	200001cc 	.word	0x200001cc

08001740 <Oxygen_Blending_Alert>:

void Oxygen_Blending_Alert(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
	if( Oxygen_Supply_Failed == NO)
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <Oxygen_Blending_Alert+0xa8>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d141      	bne.n	80017dc <Oxygen_Blending_Alert+0x9c>
	{
			uint8_t FIO2_HIGH = (FIO2_Val+5);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	3305      	adds	r3, #5
 800175c:	73fb      	strb	r3, [r7, #15]
			uint8_t FIO2_LOW = (FIO2_Val-5);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	3b05      	subs	r3, #5
 8001762:	73bb      	strb	r3, [r7, #14]
			 if( (Achieved_Oxygen <= FIO2_HIGH) && (Achieved_Oxygen >= FIO2_LOW))
 8001764:	79ba      	ldrb	r2, [r7, #6]
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	429a      	cmp	r2, r3
 800176a:	d807      	bhi.n	800177c <Oxygen_Blending_Alert+0x3c>
 800176c:	79ba      	ldrb	r2, [r7, #6]
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	429a      	cmp	r2, r3
 8001772:	d303      	bcc.n	800177c <Oxygen_Blending_Alert+0x3c>
			 {

				Alert_Count.FIO2_Alert_Count=0;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <Oxygen_Blending_Alert+0xac>)
 8001776:	2200      	movs	r2, #0
 8001778:	711a      	strb	r2, [r3, #4]
						}
					}
			 }
	}

}
 800177a:	e02f      	b.n	80017dc <Oxygen_Blending_Alert+0x9c>
				Alert_Count.FIO2_Alert_Count++;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <Oxygen_Blending_Alert+0xac>)
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <Oxygen_Blending_Alert+0xac>)
 8001786:	711a      	strb	r2, [r3, #4]
					if(Alert_Count.FIO2_Alert_Count>3)
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <Oxygen_Blending_Alert+0xac>)
 800178a:	791b      	ldrb	r3, [r3, #4]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d925      	bls.n	80017dc <Oxygen_Blending_Alert+0x9c>
						Alert_Status = ALERT_HAPPEN;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <Oxygen_Blending_Alert+0xb0>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
						if (Achieved_Oxygen > FIO2_HIGH)
 8001796:	79ba      	ldrb	r2, [r7, #6]
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	429a      	cmp	r2, r3
 800179c:	d90d      	bls.n	80017ba <Oxygen_Blending_Alert+0x7a>
							SET_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <Oxygen_Blending_Alert+0xb4>)
 80017a0:	7993      	ldrb	r3, [r2, #6]
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	7193      	strb	r3, [r2, #6]
							CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <Oxygen_Blending_Alert+0xb4>)
 80017aa:	7993      	ldrb	r3, [r2, #6]
 80017ac:	f36f 0341 	bfc	r3, #1, #1
 80017b0:	7193      	strb	r3, [r2, #6]
							Alert_Count.FIO2_Alert_Count=0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <Oxygen_Blending_Alert+0xac>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	711a      	strb	r2, [r3, #4]
}
 80017b8:	e010      	b.n	80017dc <Oxygen_Blending_Alert+0x9c>
						else if (Achieved_Oxygen < FIO2_LOW)
 80017ba:	79ba      	ldrb	r2, [r7, #6]
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d20c      	bcs.n	80017dc <Oxygen_Blending_Alert+0x9c>
							SET_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 80017c2:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <Oxygen_Blending_Alert+0xb4>)
 80017c4:	7993      	ldrb	r3, [r2, #6]
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	7193      	strb	r3, [r2, #6]
							CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <Oxygen_Blending_Alert+0xb4>)
 80017ce:	7993      	ldrb	r3, [r2, #6]
 80017d0:	f36f 0300 	bfc	r3, #0, #1
 80017d4:	7193      	strb	r3, [r2, #6]
							Alert_Count.FIO2_Alert_Count=0;
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <Oxygen_Blending_Alert+0xac>)
 80017d8:	2200      	movs	r2, #0
 80017da:	711a      	strb	r2, [r3, #4]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	200001cc 	.word	0x200001cc
 80017ec:	20014274 	.word	0x20014274
 80017f0:	20013f88 	.word	0x20013f88
 80017f4:	20013b34 	.word	0x20013b34

080017f8 <Leak_Alert>:


void Leak_Alert()
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
	if(0>Leak)
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <Leak_Alert+0x48>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	da15      	bge.n	8001830 <Leak_Alert+0x38>
	{
		Alert_Count.Leak_Alert_Count++;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <Leak_Alert+0x4c>)
 8001806:	795b      	ldrb	r3, [r3, #5]
 8001808:	3301      	adds	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <Leak_Alert+0x4c>)
 800180e:	715a      	strb	r2, [r3, #5]
		 if(Alert_Count.Leak_Alert_Count>3)
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <Leak_Alert+0x4c>)
 8001812:	795b      	ldrb	r3, [r3, #5]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d90e      	bls.n	8001836 <Leak_Alert+0x3e>
		 {
			Alert_Status = ALERT_HAPPEN;
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <Leak_Alert+0x50>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
		    SET_ALERT_BIT(SECOND_FRAME_UN, _ALERT_LEAK);
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <Leak_Alert+0x54>)
 8001820:	7913      	ldrb	r3, [r2, #4]
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	7113      	strb	r3, [r2, #4]
		    Alert_Count.Leak_Alert_Count=0;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <Leak_Alert+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		Alert_Count.Leak_Alert_Count=0;
	}
}
 800182e:	e002      	b.n	8001836 <Leak_Alert+0x3e>
		Alert_Count.Leak_Alert_Count=0;
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <Leak_Alert+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	715a      	strb	r2, [r3, #5]
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20013f84 	.word	0x20013f84
 8001844:	20014274 	.word	0x20014274
 8001848:	20013f88 	.word	0x20013f88
 800184c:	20013b34 	.word	0x20013b34

08001850 <Patient_Circuit_Disconnected_Alert>:




void Patient_Circuit_Disconnected_Alert()
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
	if(  (vol.Volume_Val<=0) && (Flow_Sensor_cal._Flow_Val==0 || Flow_Sensor_cal._Flow_Val==-1 || Flow_Sensor_cal._Flow_Val==-2))
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <Patient_Circuit_Disconnected_Alert+0xc0>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	dc2f      	bgt.n	80018bc <Patient_Circuit_Disconnected_Alert+0x6c>
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <Patient_Circuit_Disconnected_Alert+0xc4>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	2b00      	cmp	r3, #0
 8001862:	d009      	beq.n	8001878 <Patient_Circuit_Disconnected_Alert+0x28>
 8001864:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <Patient_Circuit_Disconnected_Alert+0xc4>)
 8001866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d004      	beq.n	8001878 <Patient_Circuit_Disconnected_Alert+0x28>
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <Patient_Circuit_Disconnected_Alert+0xc4>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	f113 0f02 	cmn.w	r3, #2
 8001876:	d121      	bne.n	80018bc <Patient_Circuit_Disconnected_Alert+0x6c>
	{
			if((DAC1->DHR12R1)>=400)
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <Patient_Circuit_Disconnected_Alert+0xc8>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001880:	d33f      	bcc.n	8001902 <Patient_Circuit_Disconnected_Alert+0xb2>
			{
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <Patient_Circuit_Disconnected_Alert+0xcc>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d13b      	bne.n	8001902 <Patient_Circuit_Disconnected_Alert+0xb2>
				{
					Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <Patient_Circuit_Disconnected_Alert+0xd0>)
 800188c:	88db      	ldrh	r3, [r3, #6]
 800188e:	3301      	adds	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <Patient_Circuit_Disconnected_Alert+0xd0>)
 8001894:	80da      	strh	r2, [r3, #6]
						if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 200)
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <Patient_Circuit_Disconnected_Alert+0xd0>)
 8001898:	88db      	ldrh	r3, [r3, #6]
 800189a:	2bc7      	cmp	r3, #199	; 0xc7
 800189c:	d931      	bls.n	8001902 <Patient_Circuit_Disconnected_Alert+0xb2>
						{
							Alert_Status = ALERT_HAPPEN;
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <Patient_Circuit_Disconnected_Alert+0xd4>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
							SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 80018a4:	4a20      	ldr	r2, [pc, #128]	; (8001928 <Patient_Circuit_Disconnected_Alert+0xd8>)
 80018a6:	78d3      	ldrb	r3, [r2, #3]
 80018a8:	f043 0310 	orr.w	r3, r3, #16
 80018ac:	70d3      	strb	r3, [r2, #3]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <Patient_Circuit_Disconnected_Alert+0xcc>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
							Patient_Ckt_Discon = 1;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <Patient_Circuit_Disconnected_Alert+0xdc>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
			if((DAC1->DHR12R1)>=400)
 80018ba:	e022      	b.n	8001902 <Patient_Circuit_Disconnected_Alert+0xb2>
			}
	}
	else
	{

		if( (Common_Mode_Parameter._PEEP_Val  ) >= (Pressure_sensor.Pressure_Val ) )
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <Patient_Circuit_Disconnected_Alert+0xe0>)
 80018be:	785a      	ldrb	r2, [r3, #1]
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <Patient_Circuit_Disconnected_Alert+0xe4>)
 80018c2:	789b      	ldrb	r3, [r3, #2]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d31d      	bcc.n	8001904 <Patient_Circuit_Disconnected_Alert+0xb4>
		{
			if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <Patient_Circuit_Disconnected_Alert+0xcc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d119      	bne.n	8001904 <Patient_Circuit_Disconnected_Alert+0xb4>
			{
				Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <Patient_Circuit_Disconnected_Alert+0xd0>)
 80018d2:	88db      	ldrh	r3, [r3, #6]
 80018d4:	3301      	adds	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <Patient_Circuit_Disconnected_Alert+0xd0>)
 80018da:	80da      	strh	r2, [r3, #6]
					if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 200)
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <Patient_Circuit_Disconnected_Alert+0xd0>)
 80018de:	88db      	ldrh	r3, [r3, #6]
 80018e0:	2bc7      	cmp	r3, #199	; 0xc7
 80018e2:	d90f      	bls.n	8001904 <Patient_Circuit_Disconnected_Alert+0xb4>
					{
						Alert_Status = ALERT_HAPPEN;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <Patient_Circuit_Disconnected_Alert+0xd4>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
						SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 80018ea:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <Patient_Circuit_Disconnected_Alert+0xd8>)
 80018ec:	78d3      	ldrb	r3, [r2, #3]
 80018ee:	f043 0310 	orr.w	r3, r3, #16
 80018f2:	70d3      	strb	r3, [r2, #3]
            			PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <Patient_Circuit_Disconnected_Alert+0xcc>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
						Patient_Ckt_Discon = 1;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <Patient_Circuit_Disconnected_Alert+0xdc>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
					}
			}
		}
	}
}
 8001900:	e000      	b.n	8001904 <Patient_Circuit_Disconnected_Alert+0xb4>
			if((DAC1->DHR12R1)>=400)
 8001902:	bf00      	nop
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200140c8 	.word	0x200140c8
 8001914:	20013fb0 	.word	0x20013fb0
 8001918:	40007400 	.word	0x40007400
 800191c:	20013ac9 	.word	0x20013ac9
 8001920:	20014274 	.word	0x20014274
 8001924:	20013f88 	.word	0x20013f88
 8001928:	20013b34 	.word	0x20013b34
 800192c:	200001cd 	.word	0x200001cd
 8001930:	20013ba4 	.word	0x20013ba4
 8001934:	2001405c 	.word	0x2001405c

08001938 <Proximal_Flow_Sensor_Reverse_Direction>:



void Proximal_Flow_Sensor_Reverse_Direction()
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
	if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED < 500)
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <Proximal_Flow_Sensor_Reverse_Direction+0x5c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001944:	da20      	bge.n	8001988 <Proximal_Flow_Sensor_Reverse_Direction+0x50>
	{
		if((vol.Volume_Val<(-10)))
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <Proximal_Flow_Sensor_Reverse_Direction+0x60>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f113 0f0a 	cmn.w	r3, #10
 800194e:	da1b      	bge.n	8001988 <Proximal_Flow_Sensor_Reverse_Direction+0x50>
		{
			if(PROXIMAL_SENSOR_REVERSE_ALERT_CHECK == CHECK)
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <Proximal_Flow_Sensor_Reverse_Direction+0x64>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d117      	bne.n	8001988 <Proximal_Flow_Sensor_Reverse_Direction+0x50>
			{
				Alert_Count.Proximal_Flow_Sensor_reversed_Alert_Count++;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <Proximal_Flow_Sensor_Reverse_Direction+0x68>)
 800195a:	891b      	ldrh	r3, [r3, #8]
 800195c:	3301      	adds	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <Proximal_Flow_Sensor_Reverse_Direction+0x68>)
 8001962:	811a      	strh	r2, [r3, #8]
					 if( Alert_Count.Proximal_Flow_Sensor_reversed_Alert_Count>=150)
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <Proximal_Flow_Sensor_Reverse_Direction+0x68>)
 8001966:	891b      	ldrh	r3, [r3, #8]
 8001968:	2b95      	cmp	r3, #149	; 0x95
 800196a:	d90d      	bls.n	8001988 <Proximal_Flow_Sensor_Reverse_Direction+0x50>
					 {
						  Alert_Status = ALERT_HAPPEN;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <Proximal_Flow_Sensor_Reverse_Direction+0x6c>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
						  SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_FLOW_SENSOR_WRONG_DIRECTION);
 8001972:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <Proximal_Flow_Sensor_Reverse_Direction+0x70>)
 8001974:	78d3      	ldrb	r3, [r2, #3]
 8001976:	f043 0320 	orr.w	r3, r3, #32
 800197a:	70d3      	strb	r3, [r2, #3]
						  PROXIMAL_SENSOR_REVERSE_ALERT_CHECK =  DO_NOT_CHECK;
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <Proximal_Flow_Sensor_Reverse_Direction+0x64>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
						  Proximal_Flow_Sensor_Reverse = 1;
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <Proximal_Flow_Sensor_Reverse_Direction+0x74>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
					 }
			}

		}
	}
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200141fc 	.word	0x200141fc
 8001998:	200140c8 	.word	0x200140c8
 800199c:	20013948 	.word	0x20013948
 80019a0:	20014274 	.word	0x20014274
 80019a4:	20013f88 	.word	0x20013f88
 80019a8:	20013b34 	.word	0x20013b34
 80019ac:	200001ce 	.word	0x200001ce

080019b0 <LED_Alert>:




void LED_Alert()
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	if(Alert_Status == ALERT_HAPPEN)
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <LED_Alert+0x70>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d115      	bne.n	80019e8 <LED_Alert+0x38>
	{
		Alert_Status_Led_Strip = ALERT_HAPPEN;
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <LED_Alert+0x74>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
		Red_Led_ON();
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <LED_Alert+0x78>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a18      	ldr	r2, [pc, #96]	; (8001a28 <LED_Alert+0x78>)
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <LED_Alert+0x78>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <LED_Alert+0x78>)
 80019d4:	f023 0308 	bic.w	r3, r3, #8
 80019d8:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <LED_Alert+0x78>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <LED_Alert+0x78>)
 80019e0:	f023 0320 	bic.w	r3, r3, #32
 80019e4:	6153      	str	r3, [r2, #20]
	{
		Green_Led_ON();
		Blue_Led_OFF();
		Red_Led_OFF();
	}
}
 80019e6:	e015      	b.n	8001a14 <LED_Alert+0x64>
	else if(Alert_Status == NO_ALERT)
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <LED_Alert+0x70>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d111      	bne.n	8001a14 <LED_Alert+0x64>
		Green_Led_ON();
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <LED_Alert+0x78>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <LED_Alert+0x78>)
 80019f6:	f043 0320 	orr.w	r3, r3, #32
 80019fa:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <LED_Alert+0x78>)
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <LED_Alert+0x78>)
 8001a02:	f023 0308 	bic.w	r3, r3, #8
 8001a06:	6153      	str	r3, [r2, #20]
		Red_Led_OFF();
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <LED_Alert+0x78>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <LED_Alert+0x78>)
 8001a0e:	f023 0310 	bic.w	r3, r3, #16
 8001a12:	6153      	str	r3, [r2, #20]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20013f88 	.word	0x20013f88
 8001a24:	20014188 	.word	0x20014188
 8001a28:	40020c00 	.word	0x40020c00

08001a2c <Hide_Alert_1>:


void Hide_Alert_1()
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 8001a30:	4a34      	ldr	r2, [pc, #208]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a32:	78d3      	ldrb	r3, [r2, #3]
 8001a34:	f36f 0300 	bfc	r3, #0, #1
 8001a38:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 8001a3a:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a3c:	78d3      	ldrb	r3, [r2, #3]
 8001a3e:	f36f 0341 	bfc	r3, #1, #1
 8001a42:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 8001a44:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a46:	7953      	ldrb	r3, [r2, #5]
 8001a48:	f36f 0300 	bfc	r3, #0, #1
 8001a4c:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a50:	7953      	ldrb	r3, [r2, #5]
 8001a52:	f36f 0341 	bfc	r3, #1, #1
 8001a56:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 8001a58:	4a2a      	ldr	r2, [pc, #168]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a5a:	7953      	ldrb	r3, [r2, #5]
 8001a5c:	f36f 0382 	bfc	r3, #2, #1
 8001a60:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 8001a62:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a64:	7953      	ldrb	r3, [r2, #5]
 8001a66:	f36f 03c3 	bfc	r3, #3, #1
 8001a6a:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 8001a6c:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a6e:	7953      	ldrb	r3, [r2, #5]
 8001a70:	f36f 1386 	bfc	r3, #6, #1
 8001a74:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 8001a76:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a78:	7953      	ldrb	r3, [r2, #5]
 8001a7a:	f36f 13c7 	bfc	r3, #7, #1
 8001a7e:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 8001a80:	4a20      	ldr	r2, [pc, #128]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a82:	7953      	ldrb	r3, [r2, #5]
 8001a84:	f36f 1304 	bfc	r3, #4, #1
 8001a88:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a8c:	7953      	ldrb	r3, [r2, #5]
 8001a8e:	f36f 1345 	bfc	r3, #5, #1
 8001a92:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 8001a94:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001a96:	7993      	ldrb	r3, [r2, #6]
 8001a98:	f36f 1386 	bfc	r3, #6, #1
 8001a9c:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 8001a9e:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001aa0:	7993      	ldrb	r3, [r2, #6]
 8001aa2:	f36f 13c7 	bfc	r3, #7, #1
 8001aa6:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 8001aa8:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001aaa:	78d3      	ldrb	r3, [r2, #3]
 8001aac:	f36f 03c3 	bfc	r3, #3, #1
 8001ab0:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_FLOW_SENSOR_WRONG_DIRECTION);
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001ab4:	78d3      	ldrb	r3, [r2, #3]
 8001ab6:	f36f 1345 	bfc	r3, #5, #1
 8001aba:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 8001abc:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001abe:	7993      	ldrb	r3, [r2, #6]
 8001ac0:	f36f 0300 	bfc	r3, #0, #1
 8001ac4:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001ac8:	7993      	ldrb	r3, [r2, #6]
 8001aca:	f36f 0341 	bfc	r3, #1, #1
 8001ace:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_LEAK);
 8001ad0:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001ad2:	7913      	ldrb	r3, [r2, #4]
 8001ad4:	f36f 03c3 	bfc	r3, #3, #1
 8001ad8:	7113      	strb	r3, [r2, #4]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_20_PER_BATTERY_DRAIN);
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001adc:	78d3      	ldrb	r3, [r2, #3]
 8001ade:	f36f 0382 	bfc	r3, #2, #1
 8001ae2:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001ae6:	78d3      	ldrb	r3, [r2, #3]
 8001ae8:	f36f 1386 	bfc	r3, #6, #1
 8001aec:	70d3      	strb	r3, [r2, #3]
    CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <Hide_Alert_1+0xd8>)
 8001af0:	78d3      	ldrb	r3, [r2, #3]
 8001af2:	f36f 13c7 	bfc	r3, #7, #1
 8001af6:	70d3      	strb	r3, [r2, #3]

}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20013b34 	.word	0x20013b34

08001b08 <Hide_Alert_2>:


void Hide_Alert_2()
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 8001b0c:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b0e:	78d3      	ldrb	r3, [r2, #3]
 8001b10:	f36f 0300 	bfc	r3, #0, #1
 8001b14:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 8001b16:	4a32      	ldr	r2, [pc, #200]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b18:	78d3      	ldrb	r3, [r2, #3]
 8001b1a:	f36f 0341 	bfc	r3, #1, #1
 8001b1e:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 8001b20:	4a2f      	ldr	r2, [pc, #188]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b22:	7953      	ldrb	r3, [r2, #5]
 8001b24:	f36f 0300 	bfc	r3, #0, #1
 8001b28:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b2c:	7953      	ldrb	r3, [r2, #5]
 8001b2e:	f36f 0341 	bfc	r3, #1, #1
 8001b32:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b36:	7953      	ldrb	r3, [r2, #5]
 8001b38:	f36f 0382 	bfc	r3, #2, #1
 8001b3c:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 8001b3e:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b40:	7953      	ldrb	r3, [r2, #5]
 8001b42:	f36f 03c3 	bfc	r3, #3, #1
 8001b46:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 8001b48:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b4a:	7953      	ldrb	r3, [r2, #5]
 8001b4c:	f36f 1386 	bfc	r3, #6, #1
 8001b50:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 8001b52:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b54:	7953      	ldrb	r3, [r2, #5]
 8001b56:	f36f 13c7 	bfc	r3, #7, #1
 8001b5a:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b5e:	7953      	ldrb	r3, [r2, #5]
 8001b60:	f36f 1304 	bfc	r3, #4, #1
 8001b64:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b68:	7953      	ldrb	r3, [r2, #5]
 8001b6a:	f36f 1345 	bfc	r3, #5, #1
 8001b6e:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 8001b70:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b72:	7993      	ldrb	r3, [r2, #6]
 8001b74:	f36f 1386 	bfc	r3, #6, #1
 8001b78:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 8001b7a:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b7c:	7993      	ldrb	r3, [r2, #6]
 8001b7e:	f36f 13c7 	bfc	r3, #7, #1
 8001b82:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 8001b84:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b86:	78d3      	ldrb	r3, [r2, #3]
 8001b88:	f36f 03c3 	bfc	r3, #3, #1
 8001b8c:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b90:	78d3      	ldrb	r3, [r2, #3]
 8001b92:	f36f 1304 	bfc	r3, #4, #1
 8001b96:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 8001b98:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001b9a:	7993      	ldrb	r3, [r2, #6]
 8001b9c:	f36f 0300 	bfc	r3, #0, #1
 8001ba0:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001ba4:	7993      	ldrb	r3, [r2, #6]
 8001ba6:	f36f 0341 	bfc	r3, #1, #1
 8001baa:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_LEAK);
 8001bac:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001bae:	7913      	ldrb	r3, [r2, #4]
 8001bb0:	f36f 03c3 	bfc	r3, #3, #1
 8001bb4:	7113      	strb	r3, [r2, #4]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_20_PER_BATTERY_DRAIN);
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001bb8:	78d3      	ldrb	r3, [r2, #3]
 8001bba:	f36f 0382 	bfc	r3, #2, #1
 8001bbe:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001bc2:	78d3      	ldrb	r3, [r2, #3]
 8001bc4:	f36f 1386 	bfc	r3, #6, #1
 8001bc8:	70d3      	strb	r3, [r2, #3]
    CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <Hide_Alert_2+0xd8>)
 8001bcc:	78d3      	ldrb	r3, [r2, #3]
 8001bce:	f36f 13c7 	bfc	r3, #7, #1
 8001bd2:	70d3      	strb	r3, [r2, #3]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20013b34 	.word	0x20013b34

08001be4 <APRV_Mode_Packet_Data>:
void Dec_Timer();



void APRV_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	 APRV.P_HIGH		     =  (Receive_Graph_Packet->PIP_PS_Phigh);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	791a      	ldrb	r2, [r3, #4]
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <APRV_Mode_Packet_Data+0x6c>)
 8001bf2:	701a      	strb	r2, [r3, #0]
	 APRV.P_LOW 		     =  (Receive_Graph_Packet->PEEP_CPAP_Plow);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	795a      	ldrb	r2, [r3, #5]
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <APRV_Mode_Packet_Data+0x6c>)
 8001bfa:	705a      	strb	r2, [r3, #1]
	 APRV.T_HIGH             =  (Receive_Graph_Packet->T_high);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7a9a      	ldrb	r2, [r3, #10]
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <APRV_Mode_Packet_Data+0x6c>)
 8001c02:	709a      	strb	r2, [r3, #2]
	 APRV.T_LOW              =  (Receive_Graph_Packet->T_low);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7ada      	ldrb	r2, [r3, #11]
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <APRV_Mode_Packet_Data+0x6c>)
 8001c0a:	70da      	strb	r2, [r3, #3]
	 APRV.T_HIGH_VAL         =  ( APRV.T_HIGH   * 100);
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <APRV_Mode_Packet_Data+0x6c>)
 8001c0e:	789b      	ldrb	r3, [r3, #2]
 8001c10:	461a      	mov	r2, r3
 8001c12:	2364      	movs	r3, #100	; 0x64
 8001c14:	fb03 f302 	mul.w	r3, r3, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <APRV_Mode_Packet_Data+0x6c>)
 8001c1c:	605a      	str	r2, [r3, #4]
	 APRV.T_LOW_VAL          =  ( APRV.T_LOW    * 100);
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <APRV_Mode_Packet_Data+0x6c>)
 8001c20:	78db      	ldrb	r3, [r3, #3]
 8001c22:	461a      	mov	r2, r3
 8001c24:	2364      	movs	r3, #100	; 0x64
 8001c26:	fb03 f302 	mul.w	r3, r3, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <APRV_Mode_Packet_Data+0x6c>)
 8001c2e:	609a      	str	r2, [r3, #8]
	 APRV.FIO2_VAL           =  (Receive_Graph_Packet->FiO2);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7a1a      	ldrb	r2, [r3, #8]
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <APRV_Mode_Packet_Data+0x6c>)
 8001c36:	751a      	strb	r2, [r3, #20]

	 Mode_Initial_Flag_Set   = OPEN;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <APRV_Mode_Packet_Data+0x70>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
	 vTaskResume(Mode_initial_Flag_Set_Handler);
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <APRV_Mode_Packet_Data+0x74>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f01d fbea 	bl	801f41c <vTaskResume>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200140dc 	.word	0x200140dc
 8001c54:	20014338 	.word	0x20014338
 8001c58:	2001406c 	.word	0x2001406c

08001c5c <APRV_Task>:




void APRV_Task(void *argument)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (APRV_current_breathe)
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <APRV_Task+0x40>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d002      	beq.n	8001c72 <APRV_Task+0x16>
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d003      	beq.n	8001c78 <APRV_Task+0x1c>
			  case APRV_EXP:
				  APRV_EXPIRATION_CYCLE_CONTINUOUS(PEEP_Maintain_Parameter.PEEP_Temp,
	                                                PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
			  break;
			  default:
			  break;
 8001c70:	e00f      	b.n	8001c92 <APRV_Task+0x36>
				  APRV_INSPIRATION_CYCLE_CONTINUOUS();
 8001c72:	f000 f8f5 	bl	8001e60 <APRV_INSPIRATION_CYCLE_CONTINUOUS>
			  break;
 8001c76:	e00c      	b.n	8001c92 <APRV_Task+0x36>
				  APRV_EXPIRATION_CYCLE_CONTINUOUS(PEEP_Maintain_Parameter.PEEP_Temp,
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <APRV_Task+0x44>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
	                                                PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <APRV_Task+0x44>)
 8001c80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
				  APRV_EXPIRATION_CYCLE_CONTINUOUS(PEEP_Maintain_Parameter.PEEP_Temp,
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	f000 f8fc 	bl	8001e88 <APRV_EXPIRATION_CYCLE_CONTINUOUS>
			  break;
 8001c90:	bf00      	nop
		}
		vTaskDelay(Two_Millisecond_Delay);
 8001c92:	2002      	movs	r0, #2
 8001c94:	f01d faca 	bl	801f22c <vTaskDelay>
		switch (APRV_current_breathe)
 8001c98:	e7e4      	b.n	8001c64 <APRV_Task+0x8>
 8001c9a:	bf00      	nop
 8001c9c:	20013ca8 	.word	0x20013ca8
 8001ca0:	20014300 	.word	0x20014300

08001ca4 <APRV_ONE_TIME_Task>:
}



void APRV_ONE_TIME_Task(void *argument)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (APRV_Next_Breathe)
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <APRV_ONE_TIME_Task+0x24>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d002      	beq.n	8001cba <APRV_ONE_TIME_Task+0x16>
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d003      	beq.n	8001cc0 <APRV_ONE_TIME_Task+0x1c>
			  break;
		      case APRV_EXPIRATION:
		    	  APRV_EXPIRATION_CYCLE_SINGLE();
		      break;
		      default:
		      break;
 8001cb8:	e005      	b.n	8001cc6 <APRV_ONE_TIME_Task+0x22>
		    	  APRV_INSPIRATION_CYCLE_SINGLE();
 8001cba:	f000 f807 	bl	8001ccc <APRV_INSPIRATION_CYCLE_SINGLE>
			  break;
 8001cbe:	e002      	b.n	8001cc6 <APRV_ONE_TIME_Task+0x22>
		    	  APRV_EXPIRATION_CYCLE_SINGLE();
 8001cc0:	f000 f888 	bl	8001dd4 <APRV_EXPIRATION_CYCLE_SINGLE>
		      break;
 8001cc4:	bf00      	nop
		switch (APRV_Next_Breathe)
 8001cc6:	e7f1      	b.n	8001cac <APRV_ONE_TIME_Task+0x8>
 8001cc8:	200140d8 	.word	0x200140d8

08001ccc <APRV_INSPIRATION_CYCLE_SINGLE>:
}



static void APRV_INSPIRATION_CYCLE_SINGLE()
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	Breath_Count                       = Count_The_Breath;
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <APRV_INSPIRATION_CYCLE_SINGLE+0xc4>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
	BREATH_STATE                       = INSPIRATION_CYCLE;
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <APRV_INSPIRATION_CYCLE_SINGLE+0xc8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
	ExpValve_CLOSE();
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <APRV_INSPIRATION_CYCLE_SINGLE+0xcc>)
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <APRV_INSPIRATION_CYCLE_SINGLE+0xcc>)
 8001ce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce6:	6153      	str	r3, [r2, #20]
	APRV_PIP_AVERAGE();
 8001ce8:	f000 f912 	bl	8001f10 <APRV_PIP_AVERAGE>
	APRV_PEEP_AVERAGE();
 8001cec:	f000 f93c 	bl	8001f68 <APRV_PEEP_AVERAGE>

	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <APRV_INSPIRATION_CYCLE_SINGLE+0xd0>)
 8001cf2:	78db      	ldrb	r3, [r3, #3]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f009 ff07 	bl	800bb08 <O2_DAC_Control>
	Check_Alert();
 8001cfa:	f7ff f9fd 	bl	80010f8 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 8001cfe:	f7ff faa5 	bl	800124c <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 8001d02:	f7ff fe55 	bl	80019b0 <LED_Alert>
	Alert_Status                      = NO_ALERT;
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <APRV_INSPIRATION_CYCLE_SINGLE+0xd4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]

	Sampled_Parameter_Inspiration_time();
 8001d0c:	f00e fdec 	bl	80108e8 <Sampled_Parameter_Inspiration_time>

	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    =   PEEP_Control(APRV_PEEP_average.PEEP_AVG_VAL,
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <APRV_INSPIRATION_CYCLE_SINGLE+0xd8>)
 8001d12:	7a1b      	ldrb	r3, [r3, #8]
 8001d14:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <APRV_INSPIRATION_CYCLE_SINGLE+0xdc>)
 8001d16:	7851      	ldrb	r1, [r2, #1]
													                       APRV.P_LOW,
												                           PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8001d18:	4a24      	ldr	r2, [pc, #144]	; (8001dac <APRV_INSPIRATION_CYCLE_SINGLE+0xe0>)
 8001d1a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    =   PEEP_Control(APRV_PEEP_average.PEEP_AVG_VAL,
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f9c5 	bl	80020b0 <PEEP_Control>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b21a      	sxth	r2, r3
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <APRV_INSPIRATION_CYCLE_SINGLE+0xe0>)
 8001d2c:	809a      	strh	r2, [r3, #4]

	PIP_Average_Parameter.Maximum_PIP_Acheived       =  RESET;
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <APRV_INSPIRATION_CYCLE_SINGLE+0xe4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
	Peep_Status                                      =  PEEP_NOT_ACHEIVED;
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <APRV_INSPIRATION_CYCLE_SINGLE+0xe8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay                      =  OPENED;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <APRV_INSPIRATION_CYCLE_SINGLE+0xec>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
	vol.Volume                                       =  RESET;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <APRV_INSPIRATION_CYCLE_SINGLE+0xf0>)
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
	vol.Volume_max                                   =  RESET;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <APRV_INSPIRATION_CYCLE_SINGLE+0xf0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
	APRV_Next_Breathe                                =  APRV_EXPIRATION;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <APRV_INSPIRATION_CYCLE_SINGLE+0xf4>)
 8001d50:	2202      	movs	r2, #2
 8001d52:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                             =  APRV_INS;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <APRV_INSPIRATION_CYCLE_SINGLE+0xf8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
	APRV.T_HIGH_VAL_COUNTER                          =  APRV.T_HIGH_VAL;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <APRV_INSPIRATION_CYCLE_SINGLE+0xdc>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <APRV_INSPIRATION_CYCLE_SINGLE+0xdc>)
 8001d60:	6113      	str	r3, [r2, #16]
	TIME_Base_parameter._INSPIRATION_TIME            =  APRV.T_HIGH_VAL;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <APRV_INSPIRATION_CYCLE_SINGLE+0xdc>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <APRV_INSPIRATION_CYCLE_SINGLE+0xfc>)
 8001d6a:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED    =  RESET;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <APRV_INSPIRATION_CYCLE_SINGLE+0xfc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]

	Patient_Trigger_Count                            = 0;
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <APRV_INSPIRATION_CYCLE_SINGLE+0x100>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
	APRV_Trigger_Check_Time                          = 750;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <APRV_INSPIRATION_CYCLE_SINGLE+0x104>)
 8001d7a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001d7e:	601a      	str	r2, [r3, #0]

	vTaskDelay(APRV.T_HIGH_VAL);
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <APRV_INSPIRATION_CYCLE_SINGLE+0xdc>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f01d fa51 	bl	801f22c <vTaskDelay>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200139a6 	.word	0x200139a6
 8001d94:	200140fd 	.word	0x200140fd
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	20013ba4 	.word	0x20013ba4
 8001da0:	20013f88 	.word	0x20013f88
 8001da4:	20013f4c 	.word	0x20013f4c
 8001da8:	200140dc 	.word	0x200140dc
 8001dac:	20014300 	.word	0x20014300
 8001db0:	20013b70 	.word	0x20013b70
 8001db4:	200140f5 	.word	0x200140f5
 8001db8:	200140f4 	.word	0x200140f4
 8001dbc:	200140c8 	.word	0x200140c8
 8001dc0:	200140d8 	.word	0x200140d8
 8001dc4:	20013ca8 	.word	0x20013ca8
 8001dc8:	200141fc 	.word	0x200141fc
 8001dcc:	200140d4 	.word	0x200140d4
 8001dd0:	20014378 	.word	0x20014378

08001dd4 <APRV_EXPIRATION_CYCLE_SINGLE>:


static void APRV_EXPIRATION_CYCLE_SINGLE()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	BREATH_STATE                                        = EXPIRATION_CYCLE;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <APRV_EXPIRATION_CYCLE_SINGLE+0x6c>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
	ExpValve_OPEN();
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <APRV_EXPIRATION_CYCLE_SINGLE+0x70>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <APRV_EXPIRATION_CYCLE_SINGLE+0x70>)
 8001de4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001de8:	6153      	str	r3, [r2, #20]
	APRV_mode_blower_control.BLOWER_DAC_VAL             = APRV_TUNE_PIP_BLOWER(&APRV_mode_blower_control.BLOWER_DAC_VAL,
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <APRV_EXPIRATION_CYCLE_SINGLE+0x74>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4816      	ldr	r0, [pc, #88]	; (8001e4c <APRV_EXPIRATION_CYCLE_SINGLE+0x78>)
 8001df2:	f000 f8e5 	bl	8001fc0 <APRV_TUNE_PIP_BLOWER>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <APRV_EXPIRATION_CYCLE_SINGLE+0x78>)
 8001dfc:	801a      	strh	r2, [r3, #0]
			                                                       APRV.P_HIGH );

	Adjust_Servo_And_Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <APRV_EXPIRATION_CYCLE_SINGLE+0x7c>)
 8001e00:	78db      	ldrb	r3, [r3, #3]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f009 fcba 	bl	800b77c <Adjust_Servo_And_Calculate_O2>
	Alert_Expiration_Time_Parameter();
 8001e08:	f7ff fa90 	bl	800132c <Alert_Expiration_Time_Parameter>

	APRV_Next_Breathe                                   = APRV_INSPIRATION;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <APRV_EXPIRATION_CYCLE_SINGLE+0x80>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                                = APRV_EXP;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <APRV_EXPIRATION_CYCLE_SINGLE+0x84>)
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
	APRV.T_LOW_VAL_COUNTER                              = APRV.T_LOW_VAL;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <APRV_EXPIRATION_CYCLE_SINGLE+0x74>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <APRV_EXPIRATION_CYCLE_SINGLE+0x74>)
 8001e1e:	60d3      	str	r3, [r2, #12]

	TIME_Base_parameter._EXPIRATION_TIME                = APRV.T_LOW_VAL;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <APRV_EXPIRATION_CYCLE_SINGLE+0x74>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <APRV_EXPIRATION_CYCLE_SINGLE+0x88>)
 8001e28:	605a      	str	r2, [r3, #4]
	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <APRV_EXPIRATION_CYCLE_SINGLE+0x88>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]

	vTaskDelay(APRV.T_LOW_VAL);
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <APRV_EXPIRATION_CYCLE_SINGLE+0x74>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f01d f9f9 	bl	801f22c <vTaskDelay>
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200140fd 	.word	0x200140fd
 8001e44:	40020400 	.word	0x40020400
 8001e48:	200140dc 	.word	0x200140dc
 8001e4c:	200139f0 	.word	0x200139f0
 8001e50:	20013ba4 	.word	0x20013ba4
 8001e54:	200140d8 	.word	0x200140d8
 8001e58:	20013ca8 	.word	0x20013ca8
 8001e5c:	200141fc 	.word	0x200141fc

08001e60 <APRV_INSPIRATION_CYCLE_CONTINUOUS>:



static void APRV_INSPIRATION_CYCLE_CONTINUOUS()
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	Blower_Signal(APRV_mode_blower_control.BLOWER_DAC_VAL);
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x20>)
 8001e66:	881a      	ldrh	r2, [r3, #0]
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x24>)
 8001e6a:	609a      	str	r2, [r3, #8]
	Patient_Circuit_Disconnected_Alert();
 8001e6c:	f7ff fcf0 	bl	8001850 <Patient_Circuit_Disconnected_Alert>
	Find_Max_PIP();
 8001e70:	f007 f8a8 	bl	8008fc4 <Find_Max_PIP>
	Check_Trigger();
 8001e74:	f000 fada 	bl	800242c <Check_Trigger>
	Dec_Timer();
 8001e78:	f000 fb94 	bl	80025a4 <Dec_Timer>

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200139f0 	.word	0x200139f0
 8001e84:	40007400 	.word	0x40007400

08001e88 <APRV_EXPIRATION_CYCLE_CONTINUOUS>:



static void APRV_EXPIRATION_CYCLE_CONTINUOUS(float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e92:	4603      	mov	r3, r0
 8001e94:	807b      	strh	r3, [r7, #2]
	Blower_Signal(0);
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x74>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
	if(Pressure_sensor.Pressure_Val<= PEEP)
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x78>)
 8001e9e:	789b      	ldrb	r3, [r3, #2]
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	db14      	blt.n	8001ee0 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x58>
	{
		if(Expiratory_Valve_Lock_Delay==OPENED)
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x7c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x44>
		{
			Expiratory_Valve_Lock_Delay=CLOSED;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x7c>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Expiratory_Valve_Open_Time);
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f01d f9b0 	bl	801f22c <vTaskDelay>
		}
		Peep_Status=PEEP_ACHEIVED;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x80>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
		ExpValve_CLOSE();
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x84>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x84>)
 8001ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001edc:	6153      	str	r3, [r2, #20]
	}
	else if(Peep_Status==PEEP_NOT_ACHEIVED)
	{
		ExpValve_OPEN();
	}
}
 8001ede:	e009      	b.n	8001ef4 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x6c>
	else if(Peep_Status==PEEP_NOT_ACHEIVED)
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x80>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x6c>
		ExpValve_OPEN();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x84>)
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x84>)
 8001eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ef2:	6153      	str	r3, [r2, #20]
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40007400 	.word	0x40007400
 8001f00:	2001405c 	.word	0x2001405c
 8001f04:	200140f4 	.word	0x200140f4
 8001f08:	200140f5 	.word	0x200140f5
 8001f0c:	40020400 	.word	0x40020400

08001f10 <APRV_PIP_AVERAGE>:




static void APRV_PIP_AVERAGE()
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
	if((APRV_PIP_average.PIP_Cumulative_Val == 0) || (APRV_PIP_average.PIP_Event_Count == 0))
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <APRV_PIP_AVERAGE+0x14>
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <APRV_PIP_AVERAGE+0x20>
	{
		APRV_PIP_average.PIP_Cumulative_Val = 1;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
		APRV_PIP_average.PIP_Event_Count    = 1;
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	605a      	str	r2, [r3, #4]
	}
	APRV_PIP_average.PIP_AVG_VAL        = (uint32_t)(APRV_PIP_average.PIP_Cumulative_Val/ APRV_PIP_average.PIP_Event_Count);
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f40:	721a      	strb	r2, [r3, #8]
	APRV_PIP_average.PIP_Cumulative_Val = RESET;
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
	APRV_PIP_average.PIP_Event_Count    = RESET;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	605a      	str	r2, [r3, #4]
	PIP_Average_Parameter.PIP_AVG_VAL   = APRV_PIP_average.PIP_AVG_VAL;
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <APRV_PIP_AVERAGE+0x50>)
 8001f50:	7a1a      	ldrb	r2, [r3, #8]
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <APRV_PIP_AVERAGE+0x54>)
 8001f54:	731a      	strb	r2, [r3, #12]
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	20014160 	.word	0x20014160
 8001f64:	20013b70 	.word	0x20013b70

08001f68 <APRV_PEEP_AVERAGE>:




static void APRV_PEEP_AVERAGE()
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
	if((APRV_PEEP_average.PEEP_Cumulative_Val == 0) || (APRV_PEEP_average.PEEP_Event_Count == 0))
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <APRV_PEEP_AVERAGE+0x14>
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <APRV_PEEP_AVERAGE+0x20>
	{
		APRV_PEEP_average.PEEP_Cumulative_Val = 1;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
		APRV_PEEP_average.PEEP_Event_Count    = 1;
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	605a      	str	r2, [r3, #4]
	}
	APRV_PEEP_average.PEEP_AVG_VAL        = (uint32_t)(APRV_PEEP_average.PEEP_Cumulative_Val/ APRV_PEEP_average.PEEP_Event_Count);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001f98:	721a      	strb	r2, [r3, #8]
	APRV_PEEP_average.PEEP_Cumulative_Val = RESET;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
	APRV_PEEP_average.PEEP_Event_Count    = RESET;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	605a      	str	r2, [r3, #4]

	PEEP_Maintain_Parameter.PEEP_AVG_VAL  = APRV_PEEP_average.PEEP_AVG_VAL;
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <APRV_PEEP_AVERAGE+0x50>)
 8001fa8:	7a1a      	ldrb	r2, [r3, #8]
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <APRV_PEEP_AVERAGE+0x54>)
 8001fac:	741a      	strb	r2, [r3, #16]
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	20013f4c 	.word	0x20013f4c
 8001fbc:	20014300 	.word	0x20014300

08001fc0 <APRV_TUNE_PIP_BLOWER>:

static uint16_t APRV_TUNE_PIP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PIP)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
	if(  ( APRV_PIP_average.PIP_AVG_VAL)  > ( Set_PIP ) && (APRV_PIP_average.PIP_AVG_VAL  < (Set_PIP + 2) ) )
 8001fcc:	4b37      	ldr	r3, [pc, #220]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 8001fce:	7a1b      	ldrb	r3, [r3, #8]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d20c      	bcs.n	8001ff0 <APRV_TUNE_PIP_BLOWER+0x30>
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a34      	ldr	r2, [pc, #208]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 8001fdc:	7a12      	ldrb	r2, [r2, #8]
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	db06      	blt.n	8001ff0 <APRV_TUNE_PIP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	3b0a      	subs	r3, #10
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	e055      	b.n	800209c <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  ( APRV_PIP_average.PIP_AVG_VAL)  >= ( Set_PIP + 2 ) && (APRV_PIP_average.PIP_AVG_VAL  < (Set_PIP + 4) ) )
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4a2d      	ldr	r2, [pc, #180]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 8001ff6:	7a12      	ldrb	r2, [r2, #8]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	da0c      	bge.n	8002016 <APRV_TUNE_PIP_BLOWER+0x56>
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	3303      	adds	r3, #3
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 8002002:	7a12      	ldrb	r2, [r2, #8]
 8002004:	4293      	cmp	r3, r2
 8002006:	db06      	blt.n	8002016 <APRV_TUNE_PIP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	3b14      	subs	r3, #20
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	801a      	strh	r2, [r3, #0]
 8002014:	e042      	b.n	800209c <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  ( APRV_PIP_average.PIP_AVG_VAL)  >= ( Set_PIP + 4 )  )
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	3303      	adds	r3, #3
 800201a:	4a24      	ldr	r2, [pc, #144]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 800201c:	7a12      	ldrb	r2, [r2, #8]
 800201e:	4293      	cmp	r3, r2
 8002020:	da06      	bge.n	8002030 <APRV_TUNE_PIP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	3b28      	subs	r3, #40	; 0x28
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	e035      	b.n	800209c <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if( (APRV_PIP_average.PIP_AVG_VAL  < Set_PIP) && (APRV_PIP_average.PIP_AVG_VAL  > (Set_PIP -2) ) )
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 8002032:	7a1b      	ldrb	r3, [r3, #8]
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	429a      	cmp	r2, r3
 8002038:	d90c      	bls.n	8002054 <APRV_TUNE_PIP_BLOWER+0x94>
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	3b01      	subs	r3, #1
 800203e:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 8002040:	7a12      	ldrb	r2, [r2, #8]
 8002042:	4293      	cmp	r3, r2
 8002044:	dc06      	bgt.n	8002054 <APRV_TUNE_PIP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	330a      	adds	r3, #10
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	e023      	b.n	800209c <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  (APRV_PIP_average.PIP_AVG_VAL  <= (Set_PIP-2) ) && (APRV_PIP_average.PIP_AVG_VAL  >  (Set_PIP-4) ) )
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	3b01      	subs	r3, #1
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 800205a:	7a12      	ldrb	r2, [r2, #8]
 800205c:	4293      	cmp	r3, r2
 800205e:	dd0c      	ble.n	800207a <APRV_TUNE_PIP_BLOWER+0xba>
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	3b03      	subs	r3, #3
 8002064:	4a11      	ldr	r2, [pc, #68]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 8002066:	7a12      	ldrb	r2, [r2, #8]
 8002068:	4293      	cmp	r3, r2
 800206a:	dc06      	bgt.n	800207a <APRV_TUNE_PIP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	3314      	adds	r3, #20
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	801a      	strh	r2, [r3, #0]
 8002078:	e010      	b.n	800209c <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  (APRV_PIP_average.PIP_AVG_VAL  <= (Set_PIP-4) )  )
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	3b03      	subs	r3, #3
 800207e:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <APRV_TUNE_PIP_BLOWER+0xec>)
 8002080:	7a12      	ldrb	r2, [r2, #8]
 8002082:	4293      	cmp	r3, r2
 8002084:	dd06      	ble.n	8002094 <APRV_TUNE_PIP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	3328      	adds	r3, #40	; 0x28
 800208c:	b29a      	uxth	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	801a      	strh	r2, [r3, #0]
 8002092:	e003      	b.n	800209c <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	881a      	ldrh	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	881b      	ldrh	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	20014160 	.word	0x20014160

080020b0 <PEEP_Control>:




static uint16_t PEEP_Control(uint8_t Achieved_PEEP,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	460b      	mov	r3, r1
 80020bc:	71bb      	strb	r3, [r7, #6]
 80020be:	4613      	mov	r3, r2
 80020c0:	80bb      	strh	r3, [r7, #4]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if (Achieved_PEEP >  (Set_PEEP+8) )
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	3308      	adds	r3, #8
 80020c8:	429a      	cmp	r2, r3
 80020ca:	dd2f      	ble.n	800212c <PEEP_Control+0x7c>
	{
		Wait_Count_1++;
 80020cc:	4bac      	ldr	r3, [pc, #688]	; (8002380 <PEEP_Control+0x2d0>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4baa      	ldr	r3, [pc, #680]	; (8002380 <PEEP_Control+0x2d0>)
 80020d6:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 80020d8:	4ba9      	ldr	r3, [pc, #676]	; (8002380 <PEEP_Control+0x2d0>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d016      	beq.n	800210e <PEEP_Control+0x5e>
		{
			Valve_Open_Time = (Valve_Open_Time + 100);
 80020e0:	88bb      	ldrh	r3, [r7, #4]
 80020e2:	3364      	adds	r3, #100	; 0x64
 80020e4:	80bb      	strh	r3, [r7, #4]
			Wait_Count_1    = RESET;
 80020e6:	4ba6      	ldr	r3, [pc, #664]	; (8002380 <PEEP_Control+0x2d0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 500)
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020f2:	d30c      	bcc.n	800210e <PEEP_Control+0x5e>
				{
					Valve_Open_Time                   = 500;
 80020f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020f8:	80bb      	strh	r3, [r7, #4]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 0.5);
 80020fa:	4ba2      	ldr	r3, [pc, #648]	; (8002384 <PEEP_Control+0x2d4>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002104:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002108:	4b9e      	ldr	r3, [pc, #632]	; (8002384 <PEEP_Control+0x2d4>)
 800210a:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800210e:	4b9d      	ldr	r3, [pc, #628]	; (8002384 <PEEP_Control+0x2d4>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	f200 8179 	bhi.w	8002416 <PEEP_Control+0x366>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8002124:	4b97      	ldr	r3, [pc, #604]	; (8002384 <PEEP_Control+0x2d4>)
 8002126:	4a98      	ldr	r2, [pc, #608]	; (8002388 <PEEP_Control+0x2d8>)
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e174      	b.n	8002416 <PEEP_Control+0x366>

	}
	else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 800212c:	79fa      	ldrb	r2, [r7, #7]
 800212e:	79bb      	ldrb	r3, [r7, #6]
 8002130:	3302      	adds	r3, #2
 8002132:	429a      	cmp	r2, r3
 8002134:	dd34      	ble.n	80021a0 <PEEP_Control+0xf0>
 8002136:	79fa      	ldrb	r2, [r7, #7]
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	3308      	adds	r3, #8
 800213c:	429a      	cmp	r2, r3
 800213e:	dc2f      	bgt.n	80021a0 <PEEP_Control+0xf0>
	{

		Wait_Count_1++;
 8002140:	4b8f      	ldr	r3, [pc, #572]	; (8002380 <PEEP_Control+0x2d0>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b8d      	ldr	r3, [pc, #564]	; (8002380 <PEEP_Control+0x2d0>)
 800214a:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 800214c:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <PEEP_Control+0x2d0>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d016      	beq.n	8002182 <PEEP_Control+0xd2>
		{
			Valve_Open_Time = Valve_Open_Time + 40;
 8002154:	88bb      	ldrh	r3, [r7, #4]
 8002156:	3328      	adds	r3, #40	; 0x28
 8002158:	80bb      	strh	r3, [r7, #4]
			Wait_Count_1    = RESET;
 800215a:	4b89      	ldr	r3, [pc, #548]	; (8002380 <PEEP_Control+0x2d0>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 500)
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002166:	d30c      	bcc.n	8002182 <PEEP_Control+0xd2>
				{
					Valve_Open_Time                   = 500;
 8002168:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800216c:	80bb      	strh	r3, [r7, #4]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 0.5);
 800216e:	4b85      	ldr	r3, [pc, #532]	; (8002384 <PEEP_Control+0x2d4>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002178:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800217c:	4b81      	ldr	r3, [pc, #516]	; (8002384 <PEEP_Control+0x2d4>)
 800217e:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8002182:	4b80      	ldr	r3, [pc, #512]	; (8002384 <PEEP_Control+0x2d4>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800218c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	f200 813f 	bhi.w	8002416 <PEEP_Control+0x366>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8002198:	4b7a      	ldr	r3, [pc, #488]	; (8002384 <PEEP_Control+0x2d4>)
 800219a:	4a7b      	ldr	r2, [pc, #492]	; (8002388 <PEEP_Control+0x2d8>)
 800219c:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800219e:	e13a      	b.n	8002416 <PEEP_Control+0x366>

	}


	else if( (Achieved_PEEP> Set_PEEP)  && (Achieved_PEEP <= (Set_PEEP+2)) )
 80021a0:	79fa      	ldrb	r2, [r7, #7]
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d934      	bls.n	8002212 <PEEP_Control+0x162>
 80021a8:	79fa      	ldrb	r2, [r7, #7]
 80021aa:	79bb      	ldrb	r3, [r7, #6]
 80021ac:	3302      	adds	r3, #2
 80021ae:	429a      	cmp	r2, r3
 80021b0:	dc2f      	bgt.n	8002212 <PEEP_Control+0x162>
	{
		Wait_Count_1++;
 80021b2:	4b73      	ldr	r3, [pc, #460]	; (8002380 <PEEP_Control+0x2d0>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b71      	ldr	r3, [pc, #452]	; (8002380 <PEEP_Control+0x2d0>)
 80021bc:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 80021be:	4b70      	ldr	r3, [pc, #448]	; (8002380 <PEEP_Control+0x2d0>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <PEEP_Control+0x144>
		{

			Valve_Open_Time = Valve_Open_Time + 10;
 80021c6:	88bb      	ldrh	r3, [r7, #4]
 80021c8:	330a      	adds	r3, #10
 80021ca:	80bb      	strh	r3, [r7, #4]
			Wait_Count_1    = RESET;
 80021cc:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <PEEP_Control+0x2d0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 500)
 80021d2:	88bb      	ldrh	r3, [r7, #4]
 80021d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021d8:	d30c      	bcc.n	80021f4 <PEEP_Control+0x144>
				{
					Valve_Open_Time                   = 500;
 80021da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021de:	80bb      	strh	r3, [r7, #4]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 0.5);
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <PEEP_Control+0x2d4>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <PEEP_Control+0x2d4>)
 80021f0:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <PEEP_Control+0x2d4>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80021fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	f200 8106 	bhi.w	8002416 <PEEP_Control+0x366>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 800220a:	4b5e      	ldr	r3, [pc, #376]	; (8002384 <PEEP_Control+0x2d4>)
 800220c:	4a5e      	ldr	r2, [pc, #376]	; (8002388 <PEEP_Control+0x2d8>)
 800220e:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8002210:	e101      	b.n	8002416 <PEEP_Control+0x366>

	}
	else if ((Achieved_PEEP == 0 ) )
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d136      	bne.n	8002286 <PEEP_Control+0x1d6>
	{
		Wait_Count_2++;
 8002218:	4b5c      	ldr	r3, [pc, #368]	; (800238c <PEEP_Control+0x2dc>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b5a      	ldr	r3, [pc, #360]	; (800238c <PEEP_Control+0x2dc>)
 8002222:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8002224:	4b59      	ldr	r3, [pc, #356]	; (800238c <PEEP_Control+0x2dc>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d018      	beq.n	800225e <PEEP_Control+0x1ae>
		{
			PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 800222c:	4b55      	ldr	r3, [pc, #340]	; (8002384 <PEEP_Control+0x2d4>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800223a:	4b52      	ldr	r3, [pc, #328]	; (8002384 <PEEP_Control+0x2d4>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
			Valve_Open_Time                   = (Valve_Open_Time - 10);
 8002240:	88bb      	ldrh	r3, [r7, #4]
 8002242:	3b0a      	subs	r3, #10
 8002244:	80bb      	strh	r3, [r7, #4]
			Wait_Count_2                      = RESET;
 8002246:	4b51      	ldr	r3, [pc, #324]	; (800238c <PEEP_Control+0x2dc>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time > 500) )
 800224c:	88bb      	ldrh	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <PEEP_Control+0x1aa>
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002258:	d901      	bls.n	800225e <PEEP_Control+0x1ae>
				{
					Valve_Open_Time = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	80bb      	strh	r3, [r7, #4]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp  > (Set_PEEP + 10) )
 800225e:	4b49      	ldr	r3, [pc, #292]	; (8002384 <PEEP_Control+0x2d4>)
 8002260:	ed93 7a00 	vldr	s14, [r3]
 8002264:	79bb      	ldrb	r3, [r7, #6]
 8002266:	330a      	adds	r3, #10
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	f340 80cd 	ble.w	8002416 <PEEP_Control+0x366>
			PEEP_Maintain_Parameter.PEEP_Temp  = PEEP_Maintain_Parameter.PEEP_Temp ;
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <PEEP_Control+0x2d4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a40      	ldr	r2, [pc, #256]	; (8002384 <PEEP_Control+0x2d4>)
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e0c7      	b.n	8002416 <PEEP_Control+0x366>

	}
		else if (Achieved_PEEP< (Set_PEEP -8))
 8002286:	79fa      	ldrb	r2, [r7, #7]
 8002288:	79bb      	ldrb	r3, [r7, #6]
 800228a:	3b08      	subs	r3, #8
 800228c:	429a      	cmp	r2, r3
 800228e:	da36      	bge.n	80022fe <PEEP_Control+0x24e>
		{
			Wait_Count_2++;
 8002290:	4b3e      	ldr	r3, [pc, #248]	; (800238c <PEEP_Control+0x2dc>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b3c      	ldr	r3, [pc, #240]	; (800238c <PEEP_Control+0x2dc>)
 800229a:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 0)
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <PEEP_Control+0x2dc>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d018      	beq.n	80022d6 <PEEP_Control+0x226>
			{
				Valve_Open_Time = ( Valve_Open_Time - 50);
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	3b32      	subs	r3, #50	; 0x32
 80022a8:	80bb      	strh	r3, [r7, #4]
				Wait_Count_2    = RESET;
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <PEEP_Control+0x2dc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
					if ((Valve_Open_Time < 1) || (Valve_Open_Time > 500) )
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <PEEP_Control+0x20e>
 80022b6:	88bb      	ldrh	r3, [r7, #4]
 80022b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022bc:	d90b      	bls.n	80022d6 <PEEP_Control+0x226>
					{
						Valve_Open_Time                   = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	80bb      	strh	r3, [r7, #4]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 0.5);
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <PEEP_Control+0x2d4>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022d0:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <PEEP_Control+0x2d4>)
 80022d2:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp> (Set_PEEP + 10) )
 80022d6:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <PEEP_Control+0x2d4>)
 80022d8:	ed93 7a00 	vldr	s14, [r3]
 80022dc:	79bb      	ldrb	r3, [r7, #6]
 80022de:	330a      	adds	r3, #10
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f0:	f340 8091 	ble.w	8002416 <PEEP_Control+0x366>
				PEEP_Maintain_Parameter.PEEP_Temp =PEEP_Maintain_Parameter.PEEP_Temp;
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <PEEP_Control+0x2d4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a22      	ldr	r2, [pc, #136]	; (8002384 <PEEP_Control+0x2d4>)
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	e08b      	b.n	8002416 <PEEP_Control+0x366>

		}
		else if (( Achieved_PEEP >= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 80022fe:	79fa      	ldrb	r2, [r7, #7]
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	3b08      	subs	r3, #8
 8002304:	429a      	cmp	r2, r3
 8002306:	db43      	blt.n	8002390 <PEEP_Control+0x2e0>
 8002308:	79fa      	ldrb	r2, [r7, #7]
 800230a:	79bb      	ldrb	r3, [r7, #6]
 800230c:	3b02      	subs	r3, #2
 800230e:	429a      	cmp	r2, r3
 8002310:	da3e      	bge.n	8002390 <PEEP_Control+0x2e0>
		{
			Wait_Count_2++;
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <PEEP_Control+0x2dc>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <PEEP_Control+0x2dc>)
 800231c:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 0)
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <PEEP_Control+0x2dc>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d018      	beq.n	8002358 <PEEP_Control+0x2a8>
			{
				Valve_Open_Time = (Valve_Open_Time - 30);
 8002326:	88bb      	ldrh	r3, [r7, #4]
 8002328:	3b1e      	subs	r3, #30
 800232a:	80bb      	strh	r3, [r7, #4]
				Wait_Count_2    = RESET;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <PEEP_Control+0x2dc>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time< 1 || Valve_Open_Time > 500)
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <PEEP_Control+0x290>
 8002338:	88bb      	ldrh	r3, [r7, #4]
 800233a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800233e:	d90b      	bls.n	8002358 <PEEP_Control+0x2a8>
					{
						Valve_Open_Time                   = 1;
 8002340:	2301      	movs	r3, #1
 8002342:	80bb      	strh	r3, [r7, #4]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 0.5);
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <PEEP_Control+0x2d4>)
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800234e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <PEEP_Control+0x2d4>)
 8002354:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <PEEP_Control+0x2d4>)
 800235a:	ed93 7a00 	vldr	s14, [r3]
 800235e:	79bb      	ldrb	r3, [r7, #6]
 8002360:	330a      	adds	r3, #10
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800236a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	dd50      	ble.n	8002416 <PEEP_Control+0x366>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <PEEP_Control+0x2d4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a02      	ldr	r2, [pc, #8]	; (8002384 <PEEP_Control+0x2d4>)
 800237a:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 800237c:	e04b      	b.n	8002416 <PEEP_Control+0x366>
 800237e:	bf00      	nop
 8002380:	200001d1 	.word	0x200001d1
 8002384:	20014300 	.word	0x20014300
 8002388:	40400000 	.word	0x40400000
 800238c:	200001d2 	.word	0x200001d2

		}
		else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 8002390:	79fa      	ldrb	r2, [r7, #7]
 8002392:	79bb      	ldrb	r3, [r7, #6]
 8002394:	3b02      	subs	r3, #2
 8002396:	429a      	cmp	r2, r3
 8002398:	db39      	blt.n	800240e <PEEP_Control+0x35e>
 800239a:	79fa      	ldrb	r2, [r7, #7]
 800239c:	79bb      	ldrb	r3, [r7, #6]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d235      	bcs.n	800240e <PEEP_Control+0x35e>
		{
			Wait_Count_2++;
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <PEEP_Control+0x374>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <PEEP_Control+0x374>)
 80023ac:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 0)
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <PEEP_Control+0x374>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d018      	beq.n	80023e8 <PEEP_Control+0x338>
			{

				Valve_Open_Time = (Valve_Open_Time - 10);
 80023b6:	88bb      	ldrh	r3, [r7, #4]
 80023b8:	3b0a      	subs	r3, #10
 80023ba:	80bb      	strh	r3, [r7, #4]
				Wait_Count_2    = RESET;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <PEEP_Control+0x374>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
					if ( (Valve_Open_Time < 1) || (Valve_Open_Time> 500) )
 80023c2:	88bb      	ldrh	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <PEEP_Control+0x320>
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023ce:	d90b      	bls.n	80023e8 <PEEP_Control+0x338>
					{
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 0.5);
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <PEEP_Control+0x378>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <PEEP_Control+0x378>)
 80023e0:	edc3 7a00 	vstr	s15, [r3]
						Valve_Open_Time                   = 1;
 80023e4:	2301      	movs	r3, #1
 80023e6:	80bb      	strh	r3, [r7, #4]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <PEEP_Control+0x378>)
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	79bb      	ldrb	r3, [r7, #6]
 80023f0:	330a      	adds	r3, #10
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	dd08      	ble.n	8002416 <PEEP_Control+0x366>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <PEEP_Control+0x378>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <PEEP_Control+0x378>)
 800240a:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 800240c:	e003      	b.n	8002416 <PEEP_Control+0x366>
		}
		else
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <PEEP_Control+0x378>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <PEEP_Control+0x378>)
 8002414:	6013      	str	r3, [r2, #0]


	return Valve_Open_Time;
 8002416:	88bb      	ldrh	r3, [r7, #4]
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	200001d2 	.word	0x200001d2
 8002428:	20014300 	.word	0x20014300

0800242c <Check_Trigger>:




static void Check_Trigger()
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	if(APRV_Trigger_Check_Time == 0 )
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <Check_Trigger+0x3c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d113      	bne.n	8002460 <Check_Trigger+0x34>
	{
		if( (Flow_Sensor_cal._Flow_Val > 0) )
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <Check_Trigger+0x40>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243c:	2b00      	cmp	r3, #0
 800243e:	dd11      	ble.n	8002464 <Check_Trigger+0x38>
		{
			STOP_BLOWER_IF_FLOW_SENSE();
 8002440:	f000 f818 	bl	8002474 <STOP_BLOWER_IF_FLOW_SENSE>

				if (Trigger_Type == Pressure_Trigger)
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <Check_Trigger+0x44>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <Check_Trigger+0x26>
				{
					CHECK_PRESSURE_TRIGGER();
 800244c:	f000 f848 	bl	80024e0 <CHECK_PRESSURE_TRIGGER>
	}
	else
	{
		CHECK_TRIGGER_OFFSET();
	}
}
 8002450:	e008      	b.n	8002464 <Check_Trigger+0x38>
				else if (Trigger_Type == Flow_Trigger)
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <Check_Trigger+0x44>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d104      	bne.n	8002464 <Check_Trigger+0x38>
					CHECK_FLOW_TRIGGER();
 800245a:	f000 f86f 	bl	800253c <CHECK_FLOW_TRIGGER>
}
 800245e:	e001      	b.n	8002464 <Check_Trigger+0x38>
		CHECK_TRIGGER_OFFSET();
 8002460:	f000 f814 	bl	800248c <CHECK_TRIGGER_OFFSET>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20014378 	.word	0x20014378
 800246c:	20013fb0 	.word	0x20013fb0
 8002470:	2001398c 	.word	0x2001398c

08002474 <STOP_BLOWER_IF_FLOW_SENSE>:



static void STOP_BLOWER_IF_FLOW_SENSE()
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <STOP_BLOWER_IF_FLOW_SENSE+0x14>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40007400 	.word	0x40007400

0800248c <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
	if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <CHECK_TRIGGER_OFFSET+0x40>)
 8002492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <CHECK_TRIGGER_OFFSET+0x1e>
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <CHECK_TRIGGER_OFFSET+0x40>)
 800249a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249c:	f113 0f08 	cmn.w	r3, #8
 80024a0:	db0f      	blt.n	80024c2 <CHECK_TRIGGER_OFFSET+0x36>
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <CHECK_TRIGGER_OFFSET+0x40>)
 80024a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da0b      	bge.n	80024c2 <CHECK_TRIGGER_OFFSET+0x36>
	{
		FLOW_TRIGGER             = 0;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <CHECK_TRIGGER_OFFSET+0x44>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
		Pressure_Trigger_Offset  =  Pressure_sensor.Pressure_Val;
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <CHECK_TRIGGER_OFFSET+0x48>)
 80024b2:	789b      	ldrb	r3, [r3, #2]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <CHECK_TRIGGER_OFFSET+0x4c>)
 80024b8:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  Flow_Sensor_cal._Flow_Val;
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <CHECK_TRIGGER_OFFSET+0x40>)
 80024bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <CHECK_TRIGGER_OFFSET+0x50>)
 80024c0:	6013      	str	r3, [r2, #0]
	}
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	20013fb0 	.word	0x20013fb0
 80024d0:	20014068 	.word	0x20014068
 80024d4:	2001405c 	.word	0x2001405c
 80024d8:	20014024 	.word	0x20014024
 80024dc:	20014018 	.word	0x20014018

080024e0 <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	if (( Pressure_sensor.Pressure_Val < (Pressure_Trigger_Offset - 2 )))
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <CHECK_PRESSURE_TRIGGER+0x44>)
 80024e6:	789b      	ldrb	r3, [r3, #2]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <CHECK_PRESSURE_TRIGGER+0x48>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3b02      	subs	r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	da15      	bge.n	8002520 <CHECK_PRESSURE_TRIGGER+0x40>
	{
	    Breath_Count                                 = Count_The_Breath;
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <CHECK_PRESSURE_TRIGGER+0x4c>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                              = PATIENT_TRIGGER_HAPPEN;
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <CHECK_PRESSURE_TRIGGER+0x50>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
		Patient_Trigger_Count++;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <CHECK_PRESSURE_TRIGGER+0x54>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <CHECK_PRESSURE_TRIGGER+0x54>)
 8002508:	6013      	str	r3, [r2, #0]
		vTaskDelay(500);
 800250a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800250e:	f01c fe8d 	bl	801f22c <vTaskDelay>
		APRV_Trigger_Check_Time                      = 500;
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <CHECK_PRESSURE_TRIGGER+0x58>)
 8002514:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002518:	601a      	str	r2, [r3, #0]
		Patient_Trigger  							 = NO_PATIENT_TRIGGER;
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <CHECK_PRESSURE_TRIGGER+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
	}
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2001405c 	.word	0x2001405c
 8002528:	20014024 	.word	0x20014024
 800252c:	200139a6 	.word	0x200139a6
 8002530:	20013ca9 	.word	0x20013ca9
 8002534:	200140d4 	.word	0x200140d4
 8002538:	20014378 	.word	0x20014378

0800253c <CHECK_FLOW_TRIGGER>:

static void CHECK_FLOW_TRIGGER()
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+2 )))
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <CHECK_FLOW_TRIGGER+0x4c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <CHECK_FLOW_TRIGGER+0x50>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3302      	adds	r3, #2
 800254c:	429a      	cmp	r2, r3
 800254e:	dd19      	ble.n	8002584 <CHECK_FLOW_TRIGGER+0x48>
	{
		Breath_Count                                = Count_The_Breath;
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <CHECK_FLOW_TRIGGER+0x54>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
		LAST_FLOW_TRIGGER 							= FLOW_TRIGGER;
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <CHECK_FLOW_TRIGGER+0x4c>)
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <CHECK_FLOW_TRIGGER+0x58>)
 800255c:	701a      	strb	r2, [r3, #0]
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <CHECK_FLOW_TRIGGER+0x5c>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
		Patient_Trigger_Count++;
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <CHECK_FLOW_TRIGGER+0x60>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <CHECK_FLOW_TRIGGER+0x60>)
 800256c:	6013      	str	r3, [r2, #0]
		vTaskDelay(500);
 800256e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002572:	f01c fe5b 	bl	801f22c <vTaskDelay>
		APRV_Trigger_Check_Time                     = 500;
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <CHECK_FLOW_TRIGGER+0x64>)
 8002578:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800257c:	601a      	str	r2, [r3, #0]
		Patient_Trigger  							= NO_PATIENT_TRIGGER;
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <CHECK_FLOW_TRIGGER+0x5c>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
	}
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20014068 	.word	0x20014068
 800258c:	20014018 	.word	0x20014018
 8002590:	200139a6 	.word	0x200139a6
 8002594:	20014240 	.word	0x20014240
 8002598:	20013ca9 	.word	0x20013ca9
 800259c:	200140d4 	.word	0x200140d4
 80025a0:	20014378 	.word	0x20014378

080025a4 <Dec_Timer>:


void Dec_Timer()
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
	if(APRV_Trigger_Check_Time>=0)
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <Dec_Timer+0x30>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0b      	blt.n	80025c8 <Dec_Timer+0x24>
	{
		APRV_Trigger_Check_Time = APRV_Trigger_Check_Time -2;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <Dec_Timer+0x30>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3b02      	subs	r3, #2
 80025b6:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <Dec_Timer+0x30>)
 80025b8:	6013      	str	r3, [r2, #0]
		if(APRV_Trigger_Check_Time<0)
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <Dec_Timer+0x30>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da02      	bge.n	80025c8 <Dec_Timer+0x24>
			APRV_Trigger_Check_Time=0;
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <Dec_Timer+0x30>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
	}
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20014378 	.word	0x20014378

080025d8 <Backup_Pc_Cmv_Mode_Packet_Data>:
static void Trigger_Time_Monitor();

extern uint16_t Expiratory_Valve_Open_Time;

void Backup_Pc_Cmv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	BACKUP_PC_CMV.PIP_Val                = Receive_Graph_Packet->PIP_PS_Phigh;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	791a      	ldrb	r2, [r3, #4]
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 80025e6:	701a      	strb	r2, [r3, #0]
	BACKUP_PC_CMV.PEEP_Val               = Receive_Graph_Packet->PEEP_CPAP_Plow;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	795a      	ldrb	r2, [r3, #5]
 80025ec:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 80025ee:	705a      	strb	r2, [r3, #1]
	BACKUP_PC_CMV.FIO2_Val               = Receive_Graph_Packet->FiO2;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7a1a      	ldrb	r2, [r3, #8]
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 80025f6:	70da      	strb	r2, [r3, #3]

	BACKUP_PC_CMV.RESPIRATORY_RATE_Val   = Receive_Graph_Packet->RR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7a5a      	ldrb	r2, [r3, #9]
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 80025fe:	709a      	strb	r2, [r3, #2]
	One_Breathe_time                     = (One_Minite_In_MS / BACKUP_PC_CMV.RESPIRATORY_RATE_Val);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 8002602:	789b      	ldrb	r3, [r3, #2]
 8002604:	461a      	mov	r2, r3
 8002606:	f64e 2360 	movw	r3, #60000	; 0xea60
 800260a:	fb93 f3f2 	sdiv	r3, r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
	BACKUP_PC_CMV.INSPIRATION_TIME       = ( ( Receive_Graph_Packet->T_high) * 100 );
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7a9b      	ldrb	r3, [r3, #10]
 8002614:	461a      	mov	r2, r3
 8002616:	2364      	movs	r3, #100	; 0x64
 8002618:	fb03 f302 	mul.w	r3, r3, r2
 800261c:	461a      	mov	r2, r3
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 8002620:	609a      	str	r2, [r3, #8]
	BACKUP_PC_CMV.EXPIRATION_TIME        = (One_Breathe_time - BACKUP_PC_CMV.INSPIRATION_TIME);
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 800262c:	60d3      	str	r3, [r2, #12]


	BACKUP_PC_CMV.Rise_Time              = Receive_Graph_Packet->Rise_Time;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7b1a      	ldrb	r2, [r3, #12]
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 8002634:	749a      	strb	r2, [r3, #18]
	BACKUP_PC_CMV.RISE_TIME_MS_Val       = (BACKUP_PC_CMV.Rise_Time *100);
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 8002638:	7c9b      	ldrb	r3, [r3, #18]
 800263a:	461a      	mov	r2, r3
 800263c:	2364      	movs	r3, #100	; 0x64
 800263e:	fb03 f302 	mul.w	r3, r3, r2
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <Backup_Pc_Cmv_Mode_Packet_Data+0x90>)
 800264c:	edc3 7a01 	vstr	s15, [r3, #4]


	Back_Up_Mode_Initial_Flag_Set        = OPEN;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <Backup_Pc_Cmv_Mode_Packet_Data+0x94>)
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <Backup_Pc_Cmv_Mode_Packet_Data+0x98>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f01c fede 	bl	801f41c <vTaskResume>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20013930 	.word	0x20013930
 800266c:	20013f5d 	.word	0x20013f5d
 8002670:	2001406c 	.word	0x2001406c

08002674 <BACKUP_PC_CMV_Task>:



void BACKUP_PC_CMV_Task(void *argument)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <BACKUP_PC_CMV_Task+0x5c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d00b      	beq.n	800269c <BACKUP_PC_CMV_Task+0x28>
 8002684:	2b02      	cmp	r3, #2
 8002686:	dc1c      	bgt.n	80026c2 <BACKUP_PC_CMV_Task+0x4e>
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01c      	beq.n	80026c6 <BACKUP_PC_CMV_Task+0x52>
 800268c:	2b01      	cmp	r3, #1
 800268e:	d118      	bne.n	80026c2 <BACKUP_PC_CMV_Task+0x4e>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_BACKUP_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <BACKUP_PC_CMV_Task+0x60>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f823 	bl	80026e0 <Inspiration_Time_Blower_Control_BACKUP_PC_CMV>
			break;
 800269a:	e015      	b.n	80026c8 <BACKUP_PC_CMV_Task+0x54>
			case Run_Expiration_Cycle:
				Pressure_Mode_blower_control.BLOWER_DAC_VAL=0;
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <BACKUP_PC_CMV_Task+0x60>)
 800269e:	2200      	movs	r2, #0
 80026a0:	801a      	strh	r2, [r3, #0]
				Expiration_Time_Blower_Control_BACKUP_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <BACKUP_PC_CMV_Task+0x60>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <BACKUP_PC_CMV_Task+0x64>)
 80026a8:	edd2 7a00 	vldr	s15, [r2]
											   PEEP_Maintain_Parameter.PEEP_Temp,
											   PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 80026ac:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <BACKUP_PC_CMV_Task+0x64>)
 80026ae:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_BACKUP_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 80026b2:	b292      	uxth	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f844 	bl	8002748 <Expiration_Time_Blower_Control_BACKUP_PC_CMV>
			break;
 80026c0:	e002      	b.n	80026c8 <BACKUP_PC_CMV_Task+0x54>
			case No_Run_State:
			break;
			default:
			break;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <BACKUP_PC_CMV_Task+0x54>
			break;
 80026c6:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 80026c8:	2002      	movs	r0, #2
 80026ca:	f01c fdaf 	bl	801f22c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 80026ce:	e7d5      	b.n	800267c <BACKUP_PC_CMV_Task+0x8>
 80026d0:	20013f7c 	.word	0x20013f7c
 80026d4:	20014030 	.word	0x20014030
 80026d8:	20014300 	.word	0x20014300
 80026dc:	00000000 	.word	0x00000000

080026e0 <Inspiration_Time_Blower_Control_BACKUP_PC_CMV>:




static void Inspiration_Time_Blower_Control_BACKUP_PC_CMV(uint16_t Blower_Signal)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
	Pressure_Mode_blower_control.Blower_Signal_Voltage = ( (Blower_Signal*3.3) /4095);
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd fec1 	bl	8000474 <__aeabi_i2d>
 80026f2:	a311      	add	r3, pc, #68	; (adr r3, 8002738 <Inspiration_Time_Blower_Control_BACKUP_PC_CMV+0x58>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd ff26 	bl	8000548 <__aeabi_dmul>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	a30e      	add	r3, pc, #56	; (adr r3, 8002740 <Inspiration_Time_Blower_Control_BACKUP_PC_CMV+0x60>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f7fe f847 	bl	800079c <__aeabi_ddiv>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f7fe f9f9 	bl	8000b0c <__aeabi_d2f>
 800271a:	4603      	mov	r3, r0
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <Inspiration_Time_Blower_Control_BACKUP_PC_CMV+0x50>)
 800271e:	60d3      	str	r3, [r2, #12]
	Blower_Signal(Blower_Signal);
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <Inspiration_Time_Blower_Control_BACKUP_PC_CMV+0x54>)
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	6093      	str	r3, [r2, #8]
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20014030 	.word	0x20014030
 8002734:	40007400 	.word	0x40007400
 8002738:	66666666 	.word	0x66666666
 800273c:	400a6666 	.word	0x400a6666
 8002740:	00000000 	.word	0x00000000
 8002744:	40affe00 	.word	0x40affe00

08002748 <Expiration_Time_Blower_Control_BACKUP_PC_CMV>:

static void Expiration_Time_Blower_Control_BACKUP_PC_CMV(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	ed87 0a00 	vstr	s0, [r7]
 8002754:	460a      	mov	r2, r1
 8002756:	80fb      	strh	r3, [r7, #6]
 8002758:	4613      	mov	r3, r2
 800275a:	80bb      	strh	r3, [r7, #4]
	Blower_Signal( Blower_Signal);
 800275c:	4a27      	ldr	r2, [pc, #156]	; (80027fc <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xb4>)
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	6093      	str	r3, [r2, #8]
		if(Peep_Status==PEEP_ACHEIVED)
 8002762:	4b27      	ldr	r3, [pc, #156]	; (8002800 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xb8>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d113      	bne.n	8002792 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x4a>
		{
				if(Pressure_sensor.Pressure_Val < PEEP)
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xbc>)
 800276c:	789b      	ldrb	r3, [r3, #2]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002776:	ed97 7a00 	vldr	s14, [r7]
 800277a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800277e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002782:	dd03      	ble.n	800278c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x44>
				{
					Blower_Signal( Blower_Signal);
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xb4>)
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	6093      	str	r3, [r2, #8]
 800278a:	e002      	b.n	8002792 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x4a>
				}
				else
				{
					Blower_Signal( Blower_Signal);
 800278c:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xb4>)
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	6093      	str	r3, [r2, #8]
				}
		 }
		if(Pressure_sensor.Pressure_Val<= PEEP)
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xbc>)
 8002794:	789b      	ldrb	r3, [r3, #2]
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279e:	ed97 7a00 	vldr	s14, [r7]
 80027a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027aa:	db14      	blt.n	80027d6 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x8e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xc0>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x7a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xc0>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Expiratory_Valve_Open_Time);
 80027ba:	88bb      	ldrh	r3, [r7, #4]
 80027bc:	4618      	mov	r0, r3
 80027be:	f01c fd35 	bl	801f22c <vTaskDelay>
			}
			Peep_Status=PEEP_ACHEIVED;
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xb8>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xc4>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	4a0f      	ldr	r2, [pc, #60]	; (800280c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xc4>)
 80027ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027d2:	6153      	str	r3, [r2, #20]
 80027d4:	e009      	b.n	80027ea <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xa2>
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xb8>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xa2>
		{
			ExpValve_OPEN();
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xc4>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xc4>)
 80027e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e8:	6153      	str	r3, [r2, #20]
		}

		CHECK_TRIGGER_BACKUP_PC_CMV(Common_Mode_Parameter.TRIG_WINDOW );
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xc8>)
 80027ec:	895b      	ldrh	r3, [r3, #10]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f810 	bl	8002814 <CHECK_TRIGGER_BACKUP_PC_CMV>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40007400 	.word	0x40007400
 8002800:	200140f5 	.word	0x200140f5
 8002804:	2001405c 	.word	0x2001405c
 8002808:	200140f4 	.word	0x200140f4
 800280c:	40020400 	.word	0x40020400
 8002810:	20013ba4 	.word	0x20013ba4

08002814 <CHECK_TRIGGER_BACKUP_PC_CMV>:



static void CHECK_TRIGGER_BACKUP_PC_CMV(uint16_t Trigger_Check_Time)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <CHECK_TRIGGER_BACKUP_PC_CMV+0x48>)
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	429a      	cmp	r2, r3
 8002826:	dc11      	bgt.n	800284c <CHECK_TRIGGER_BACKUP_PC_CMV+0x38>
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <CHECK_TRIGGER_BACKUP_PC_CMV+0x48>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <CHECK_TRIGGER_BACKUP_PC_CMV+0x38>
	{
		if (Trigger_Type == Pressure_Trigger)
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <CHECK_TRIGGER_BACKUP_PC_CMV+0x4c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <CHECK_TRIGGER_BACKUP_PC_CMV+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 8002838:	f000 f814 	bl	8002864 <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800283c:	e009      	b.n	8002852 <CHECK_TRIGGER_BACKUP_PC_CMV+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <CHECK_TRIGGER_BACKUP_PC_CMV+0x4c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <CHECK_TRIGGER_BACKUP_PC_CMV+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 8002846:	f000 f83d 	bl	80028c4 <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800284a:	e002      	b.n	8002852 <CHECK_TRIGGER_BACKUP_PC_CMV+0x3e>
		}
	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 800284c:	f000 f870 	bl	8002930 <CHECK_TRIGGER_OFFSET>
	}
}
 8002850:	e000      	b.n	8002854 <CHECK_TRIGGER_BACKUP_PC_CMV+0x40>
		if (Trigger_Type == Pressure_Trigger)
 8002852:	bf00      	nop
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200141fc 	.word	0x200141fc
 8002860:	2001398c 	.word	0x2001398c

08002864 <CHECK_PRESSURE_TRIGGER>:



static void CHECK_PRESSURE_TRIGGER()
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	if (( Pressure_sensor.Pressure_Val < (Pressure_Trigger_Offset - Common_Mode_Parameter.TRIG_LMT  )))
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <CHECK_PRESSURE_TRIGGER+0x4c>)
 800286a:	789b      	ldrb	r3, [r3, #2]
 800286c:	4619      	mov	r1, r3
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <CHECK_PRESSURE_TRIGGER+0x50>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <CHECK_PRESSURE_TRIGGER+0x54>)
 8002874:	8992      	ldrh	r2, [r2, #12]
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	4299      	cmp	r1, r3
 800287a:	da16      	bge.n	80028aa <CHECK_PRESSURE_TRIGGER+0x46>
	{
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <CHECK_PRESSURE_TRIGGER+0x58>)
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
				if(Running_Mode == Psv)
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <CHECK_PRESSURE_TRIGGER+0x5c>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b07      	cmp	r3, #7
 8002888:	d102      	bne.n	8002890 <CHECK_PRESSURE_TRIGGER+0x2c>
				{
					START_PSV();
 800288a:	f000 f9b3 	bl	8002bf4 <START_PSV>
				else if(Running_Mode == Cpap)
				{
					START_CPAP();
				}
	}
}
 800288e:	e00c      	b.n	80028aa <CHECK_PRESSURE_TRIGGER+0x46>
				else if(Running_Mode == BiPap)
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <CHECK_PRESSURE_TRIGGER+0x5c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d102      	bne.n	800289e <CHECK_PRESSURE_TRIGGER+0x3a>
					START_BIPAP();
 8002898:	f000 fa6e 	bl	8002d78 <START_BIPAP>
}
 800289c:	e005      	b.n	80028aa <CHECK_PRESSURE_TRIGGER+0x46>
				else if(Running_Mode == Cpap)
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <CHECK_PRESSURE_TRIGGER+0x5c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b0b      	cmp	r3, #11
 80028a4:	d101      	bne.n	80028aa <CHECK_PRESSURE_TRIGGER+0x46>
					START_CPAP();
 80028a6:	f000 fb17 	bl	8002ed8 <START_CPAP>
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2001405c 	.word	0x2001405c
 80028b4:	20014024 	.word	0x20014024
 80028b8:	20013ba4 	.word	0x20013ba4
 80028bc:	20013ca9 	.word	0x20013ca9
 80028c0:	20014238 	.word	0x20014238

080028c4 <CHECK_FLOW_TRIGGER>:


static void CHECK_FLOW_TRIGGER()
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+Common_Mode_Parameter.TRIG_LMT  )))
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <CHECK_FLOW_TRIGGER+0x54>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <CHECK_FLOW_TRIGGER+0x58>)
 80028d0:	899b      	ldrh	r3, [r3, #12]
 80028d2:	4619      	mov	r1, r3
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <CHECK_FLOW_TRIGGER+0x5c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	440b      	add	r3, r1
 80028da:	429a      	cmp	r2, r3
 80028dc:	dd1a      	ble.n	8002914 <CHECK_FLOW_TRIGGER+0x50>
	{
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <CHECK_FLOW_TRIGGER+0x54>)
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <CHECK_FLOW_TRIGGER+0x60>)
 80028e4:	701a      	strb	r2, [r3, #0]
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <CHECK_FLOW_TRIGGER+0x64>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
	        	if(Running_Mode == Psv)
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <CHECK_FLOW_TRIGGER+0x68>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d102      	bne.n	80028fa <CHECK_FLOW_TRIGGER+0x36>
				{
					START_PSV();
 80028f4:	f000 f97e 	bl	8002bf4 <START_PSV>
				else if(Running_Mode == Cpap)
				{
					START_CPAP();
				}
	}
}
 80028f8:	e00c      	b.n	8002914 <CHECK_FLOW_TRIGGER+0x50>
				else if(Running_Mode == BiPap)
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <CHECK_FLOW_TRIGGER+0x68>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d102      	bne.n	8002908 <CHECK_FLOW_TRIGGER+0x44>
					START_BIPAP();
 8002902:	f000 fa39 	bl	8002d78 <START_BIPAP>
}
 8002906:	e005      	b.n	8002914 <CHECK_FLOW_TRIGGER+0x50>
				else if(Running_Mode == Cpap)
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <CHECK_FLOW_TRIGGER+0x68>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b0b      	cmp	r3, #11
 800290e:	d101      	bne.n	8002914 <CHECK_FLOW_TRIGGER+0x50>
					START_CPAP();
 8002910:	f000 fae2 	bl	8002ed8 <START_CPAP>
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20014068 	.word	0x20014068
 800291c:	20013ba4 	.word	0x20013ba4
 8002920:	20014018 	.word	0x20014018
 8002924:	20014240 	.word	0x20014240
 8002928:	20013ca9 	.word	0x20013ca9
 800292c:	20014238 	.word	0x20014238

08002930 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
	if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <CHECK_TRIGGER_OFFSET+0x40>)
 8002936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <CHECK_TRIGGER_OFFSET+0x1e>
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <CHECK_TRIGGER_OFFSET+0x40>)
 800293e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002940:	f113 0f08 	cmn.w	r3, #8
 8002944:	db0f      	blt.n	8002966 <CHECK_TRIGGER_OFFSET+0x36>
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <CHECK_TRIGGER_OFFSET+0x40>)
 8002948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294a:	2b00      	cmp	r3, #0
 800294c:	da0b      	bge.n	8002966 <CHECK_TRIGGER_OFFSET+0x36>
	{
		Pressure_Trigger_Offset  =  Pressure_sensor.Pressure_Val;
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <CHECK_TRIGGER_OFFSET+0x44>)
 8002950:	789b      	ldrb	r3, [r3, #2]
 8002952:	461a      	mov	r2, r3
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <CHECK_TRIGGER_OFFSET+0x48>)
 8002956:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  Flow_Sensor_cal._Flow_Val;
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <CHECK_TRIGGER_OFFSET+0x40>)
 800295a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <CHECK_TRIGGER_OFFSET+0x4c>)
 800295e:	6013      	str	r3, [r2, #0]
		FLOW_TRIGGER             =  0;
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <CHECK_TRIGGER_OFFSET+0x50>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
	}
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	20013fb0 	.word	0x20013fb0
 8002974:	2001405c 	.word	0x2001405c
 8002978:	20014024 	.word	0x20014024
 800297c:	20014018 	.word	0x20014018
 8002980:	20014068 	.word	0x20014068

08002984 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset>:




void BACKUP_PC_CMV_Inspiration_Time_Variables_Reset()
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b083      	sub	sp, #12
 8002988:	af02      	add	r7, sp, #8
	Breath_Count         = Count_The_Breath;
 800298a:	4b54      	ldr	r3, [pc, #336]	; (8002adc <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x158>)
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
	Smooth_Ramp_Pressure();
 8002990:	f000 fb5a 	bl	8003048 <Smooth_Ramp_Pressure>
    PIP_Not_Acheieved();
 8002994:	f00a ffaa 	bl	800d8ec <PIP_Not_Acheieved>
	ExpValve_CLOSE();
 8002998:	4b51      	ldr	r3, [pc, #324]	; (8002ae0 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x15c>)
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	4a50      	ldr	r2, [pc, #320]	; (8002ae0 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x15c>)
 800299e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029a2:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 80029a4:	f006 fb3a 	bl	800901c <PIP_AVERAGE>
	PEEP_AVERAGE();
 80029a8:	f006 fb5e 	bl	8009068 <PEEP_AVERAGE>
	Set_Blower_Val();
 80029ac:	f000 fb34 	bl	8003018 <Set_Blower_Val>
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 80029b0:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x160>)
 80029b2:	78db      	ldrb	r3, [r3, #3]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f009 f8a7 	bl	800bb08 <O2_DAC_Control>
	Check_Alert();
 80029ba:	f7fe fb9d 	bl	80010f8 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 80029be:	f7fe fc45 	bl	800124c <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 80029c2:	f7fe fff5 	bl	80019b0 <LED_Alert>
	Alert_Status = NO_ALERT;
 80029c6:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x164>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
	Sampled_Parameter_Inspiration_time();
 80029cc:	f00d ff8c 	bl	80108e8 <Sampled_Parameter_Inspiration_time>
	if( (BACKUP_PC_CMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 80029d0:	4b46      	ldr	r3, [pc, #280]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 80029d2:	785a      	ldrb	r2, [r3, #1]
 80029d4:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 80029d6:	7c1b      	ldrb	r3, [r3, #16]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d013      	beq.n	8002a04 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x80>
	{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 80029dc:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 80029de:	7c18      	ldrb	r0, [r3, #16]
 80029e0:	4b42      	ldr	r3, [pc, #264]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 80029e2:	7899      	ldrb	r1, [r3, #2]
 80029e4:	4b41      	ldr	r3, [pc, #260]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	4b40      	ldr	r3, [pc, #256]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 80029ea:	785c      	ldrb	r4, [r3, #1]
																															 BACKUP_PC_CMV.RESPIRATORY_RATE_Val,
																															 BACKUP_PC_CMV.INSPIRATION_TIME,
																															 BACKUP_PC_CMV.PEEP_Val,
																											                 PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 80029ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4623      	mov	r3, r4
 80029f8:	f003 f90c 	bl	8005c14 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>
 80029fc:	4603      	mov	r3, r0
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 8002a02:	809a      	strh	r2, [r3, #4]

	}
	INCREASE_EACH_DAC_SET_CONST(Common_Mode_Parameter._PIP_Val,BACKUP_PC_CMV.RISE_TIME_MS_Val);
 8002a04:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x160>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4a38      	ldr	r2, [pc, #224]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 8002a0a:	edd2 7a01 	vldr	s15, [r2, #4]
 8002a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a12:	ee17 2a90 	vmov	r2, s15
 8002a16:	b292      	uxth	r2, r2
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00b f820 	bl	800da60 <INCREASE_EACH_DAC_SET_CONST>
	BLOWER_ENDING_DAC_SIGNAL_TUNE(BACKUP_PC_CMV.PIP_Val,
 8002a20:	4b32      	ldr	r3, [pc, #200]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 8002a22:	7818      	ldrb	r0, [r3, #0]
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 8002a26:	7899      	ldrb	r1, [r3, #2]
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 8002a2a:	7c5a      	ldrb	r2, [r3, #17]
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 8002a2e:	7c9b      	ldrb	r3, [r3, #18]
 8002a30:	f00b fa0a 	bl	800de48 <BLOWER_ENDING_DAC_SIGNAL_TUNE>
								  BACKUP_PC_CMV.RESPIRATORY_RATE_Val,
								  BACKUP_PC_CMV.Expiration_Time_Ratio,
								  BACKUP_PC_CMV.Rise_Time);
	BREATH_STATE                                               = INSPIRATION_CYCLE;
 8002a34:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x170>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x174>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 8002a40:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x178>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
	PIP_Status                    				               = PIP_NOT_ACHEIVED;
 8002a46:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x17c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
	Set_PIP_Status                                             = SET_PIP_VALUE_NOT_ACHEIVED;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
	Read_Time_vs_Pressure                                      = READ_TIME_OPEN;
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x184>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.PIP_Control_Event_Occured                 = RESET;
 8002a58:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x188>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	805a      	strh	r2, [r3, #2]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 8002a5e:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x18c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_DAC_VAL                = DAC_VAL(BACKUP_PC_CMV.PEEP_Val );
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f006 fc49 	bl	8009300 <DAC_VAL>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 8002a74:	801a      	strh	r2, [r3, #0]
	Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL           = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 8002a78:	881a      	ldrh	r2, [r3, #0]
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 8002a7c:	805a      	strh	r2, [r3, #2]
	TIME_Base_parameter._INSPIRATION_TIME                      = BACKUP_PC_CMV.INSPIRATION_TIME;
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 8002a86:	601a      	str	r2, [r3, #0]

	Led_Delay                                                  = (PC_CMV.RISE_TIME_MS_Val  /46);
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 8002a8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a8e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002b20 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x19c>
 8002a92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a96:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a0>)
 8002a98:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                                   = 1;
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]

	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
	PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = PIP_control_Task.Early_Acheived_Ramp_Time_Percentage;
 8002aa8:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x188>)
 8002aaa:	7a1a      	ldrb	r2, [r3, #8]
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x188>)
 8002aae:	725a      	strb	r2, [r3, #9]
	vol.Volume                                                 = RESET;
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
	vol.Volume_max                                             = RESET;
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 8002abe:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1ac>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1b0>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
	vTaskDelay(BACKUP_PC_CMV.INSPIRATION_TIME);
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f01c fbac 	bl	801f22c <vTaskDelay>
}
 8002ad4:	bf00      	nop
 8002ad6:	3704      	adds	r7, #4
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	200139a6 	.word	0x200139a6
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	20013ba4 	.word	0x20013ba4
 8002ae8:	20013f88 	.word	0x20013f88
 8002aec:	20013930 	.word	0x20013930
 8002af0:	20014300 	.word	0x20014300
 8002af4:	200140fd 	.word	0x200140fd
 8002af8:	200140f5 	.word	0x200140f5
 8002afc:	200140f4 	.word	0x200140f4
 8002b00:	200140c2 	.word	0x200140c2
 8002b04:	200141f8 	.word	0x200141f8
 8002b08:	20014371 	.word	0x20014371
 8002b0c:	20013b04 	.word	0x20013b04
 8002b10:	20013b70 	.word	0x20013b70
 8002b14:	20014030 	.word	0x20014030
 8002b18:	200141fc 	.word	0x200141fc
 8002b1c:	200141e4 	.word	0x200141e4
 8002b20:	42380000 	.word	0x42380000
 8002b24:	20014078 	.word	0x20014078
 8002b28:	20013f3c 	.word	0x20013f3c
 8002b2c:	200140c8 	.word	0x200140c8
 8002b30:	20013d20 	.word	0x20013d20
 8002b34:	20013f7c 	.word	0x20013f7c

08002b38 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset>:

void BACKUP_PC_CMV_Expiration_Time_Variables_Reset()
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	BREATH_STATE                                        = EXPIRATION_CYCLE;
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x90>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x94>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 8002b48:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x94>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x94>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x94>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]

	Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x98>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]

	Trigger_Time_Monitor();
 8002b60:	f000 fab0 	bl	80030c4 <Trigger_Time_Monitor>

	Adjust_Servo_And_Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x9c>)
 8002b66:	78db      	ldrb	r3, [r3, #3]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f008 fe07 	bl	800b77c <Adjust_Servo_And_Calculate_O2>
	Alert_Expiration_Time_Parameter();
 8002b6e:	f7fe fbdd 	bl	800132c <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = BACKUP_PC_CMV.EXPIRATION_TIME;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa0>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa4>)
 8002b7a:	605a      	str	r2, [r3, #4]

	Led_Delay                                           = ( (PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time + 500)  /46);
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x94>)
 8002b7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b82:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002b86:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 8002b88:	fb82 1203 	smull	r1, r2, r2, r3
 8002b8c:	441a      	add	r2, r3
 8002b8e:	1152      	asrs	r2, r2, #5
 8002b90:	17db      	asrs	r3, r3, #31
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xac>)
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                            = 45;
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xb0>)
 8002ba4:	222d      	movs	r2, #45	; 0x2d
 8002ba6:	701a      	strb	r2, [r3, #0]

	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa4>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xb4>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xb8>)
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	701a      	strb	r2, [r3, #0]
	vTaskDelay(BACKUP_PC_CMV.EXPIRATION_TIME);
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa0>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f01c fb34 	bl	801f22c <vTaskDelay>
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200140fd 	.word	0x200140fd
 8002bcc:	20014300 	.word	0x20014300
 8002bd0:	20013ca9 	.word	0x20013ca9
 8002bd4:	20013ba4 	.word	0x20013ba4
 8002bd8:	20013930 	.word	0x20013930
 8002bdc:	200141fc 	.word	0x200141fc
 8002be0:	b21642c9 	.word	0xb21642c9
 8002be4:	20014078 	.word	0x20014078
 8002be8:	20013f3c 	.word	0x20013f3c
 8002bec:	20013d20 	.word	0x20013d20
 8002bf0:	20013f7c 	.word	0x20013f7c

08002bf4 <START_PSV>:




void START_PSV()
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	     if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8002bf8:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <START_PSV+0x120>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d11a      	bne.n	8002c36 <START_PSV+0x42>
		 {
	    	 OLD.LAST_BLOWER_ENDING_DAC_SIGNAL        =	DAC_VAL(BACKUP_PC_CMV.PIP_Val);;
 8002c00:	4b45      	ldr	r3, [pc, #276]	; (8002d18 <START_PSV+0x124>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f006 fb7b 	bl	8009300 <DAC_VAL>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <START_PSV+0x128>)
 8002c10:	829a      	strh	r2, [r3, #20]
	    	 OLD.LAST_PIP_Control_Task_Delay          =	PIP_control_Task.PIP_Control_Task_Delay ;
 8002c12:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <START_PSV+0x12c>)
 8002c14:	881a      	ldrh	r2, [r3, #0]
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <START_PSV+0x128>)
 8002c18:	82da      	strh	r2, [r3, #22]
	    	 OLD.LAST_Increase_Each_DAC_SET_CONST     = PIP_control_Task.Increase_Each_DAC_SET_CONST ;
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <START_PSV+0x12c>)
 8002c1c:	88da      	ldrh	r2, [r3, #6]
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <START_PSV+0x128>)
 8002c20:	831a      	strh	r2, [r3, #24]
	 	     vTaskSuspend(PIP_Control_Task_Handler);
 8002c22:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <START_PSV+0x130>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f01c fb34 	bl	801f294 <vTaskSuspend>
	 	     PSV_Control._INSPIRATION_TIME            = BACKUP_PC_CMV.INSPIRATION_TIME;
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <START_PSV+0x124>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <START_PSV+0x134>)
 8002c34:	60da      	str	r2, [r3, #12]

		 }



	    Parkar_valve_Signal(0);
 8002c36:	4b3d      	ldr	r3, [pc, #244]	; (8002d2c <START_PSV+0x138>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
		Oxygen_Parameter.Servo_Position=45;
 8002c3c:	4b3c      	ldr	r3, [pc, #240]	; (8002d30 <START_PSV+0x13c>)
 8002c3e:	222d      	movs	r2, #45	; 0x2d
 8002c40:	73da      	strb	r2, [r3, #15]
		Servo_Info(Oxygen_Parameter.Servo_Position);
 8002c42:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <START_PSV+0x13c>)
 8002c44:	7bdb      	ldrb	r3, [r3, #15]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f008 ff0a 	bl	800ba60 <Servo_Info>
		Servo_Position_Feedback = SERVO_FULL_OPEND;
 8002c4c:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <START_PSV+0x140>)
 8002c4e:	222d      	movs	r2, #45	; 0x2d
 8002c50:	701a      	strb	r2, [r3, #0]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <START_PSV+0x13c>)
 8002c54:	7bda      	ldrb	r2, [r3, #15]
 8002c56:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <START_PSV+0x144>)
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34
	    vTaskSuspend(Oxygen_Blending_Handler);
 8002c5a:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <START_PSV+0x148>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f01c fb18 	bl	801f294 <vTaskSuspend>
	    vTaskSuspend(Alert_Handler);
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <START_PSV+0x14c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f01c fb13 	bl	801f294 <vTaskSuspend>
	    vTaskSuspend(One_Time_Handler);
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <START_PSV+0x150>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f01c fb0e 	bl	801f294 <vTaskSuspend>
	    vTaskSuspend(PSV_Handler);
 8002c78:	4b33      	ldr	r3, [pc, #204]	; (8002d48 <START_PSV+0x154>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f01c fb09 	bl	801f294 <vTaskSuspend>
		PIP_control_Task.PIP_Control_Task_Delay               = 2;
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <START_PSV+0x12c>)
 8002c84:	2202      	movs	r2, #2
 8002c86:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = 140;
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <START_PSV+0x12c>)
 8002c8a:	228c      	movs	r2, #140	; 0x8c
 8002c8c:	80da      	strh	r2, [r3, #6]
		PIP_Status                    				          = PIP_NOT_ACHEIVED;
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <START_PSV+0x158>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_DAC_VAL           = DAC_VAL(PSV.PEEP_Val);
 8002c94:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <START_PSV+0x15c>)
 8002c96:	789b      	ldrb	r3, [r3, #2]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f006 fb31 	bl	8009300 <DAC_VAL>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <START_PSV+0x160>)
 8002ca4:	801a      	strh	r2, [r3, #0]
		Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL      = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <START_PSV+0x160>)
 8002ca8:	881a      	ldrh	r2, [r3, #0]
 8002caa:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <START_PSV+0x160>)
 8002cac:	805a      	strh	r2, [r3, #2]
		Set_PIP_Status                                        = SET_PIP_VALUE_NOT_ACHEIVED;
 8002cae:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <START_PSV+0x164>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
		Read_Time_vs_Pressure                                 = READ_TIME_OPEN;
 8002cb4:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <START_PSV+0x168>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
		PIP_control_Task.PIP_Control_Event_Occured            = RESET;
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <START_PSV+0x12c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	805a      	strh	r2, [r3, #2]
		PIP_Average_Parameter.Maximum_PIP_Acheived            = RESET;
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <START_PSV+0x16c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(PSV.PRESSURE_SUPPORT_Val);
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <START_PSV+0x15c>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f006 fb17 	bl	8009300 <DAC_VAL>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <START_PSV+0x160>)
 8002cd8:	811a      	strh	r2, [r3, #8]
		BREATH_STATE                                          = INSPIRATION_CYCLE;
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <START_PSV+0x170>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
		vol.Volume                                            = RESET;
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <START_PSV+0x174>)
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
		vol.Volume_max                                        = RESET;
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <START_PSV+0x174>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
		PSV_Peep_Average.PEEP_AVG_VAL                         = 0;
 8002cee:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <START_PSV+0x178>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	721a      	strb	r2, [r3, #8]
		vTaskResume(PSV_PID_Handler);
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <START_PSV+0x17c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f01c fb8f 	bl	801f41c <vTaskResume>
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <START_PSV+0x120>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d104      	bne.n	8002d10 <START_PSV+0x11c>
		{
		   vTaskSuspend(BACKUP_PC_Handler);
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <START_PSV+0x180>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f01c fac2 	bl	801f294 <vTaskSuspend>
		}

}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20013f74 	.word	0x20013f74
 8002d18:	20013930 	.word	0x20013930
 8002d1c:	20014298 	.word	0x20014298
 8002d20:	20013b04 	.word	0x20013b04
 8002d24:	20013ba0 	.word	0x20013ba0
 8002d28:	20014248 	.word	0x20014248
 8002d2c:	40007400 	.word	0x40007400
 8002d30:	2001409c 	.word	0x2001409c
 8002d34:	20014074 	.word	0x20014074
 8002d38:	40001800 	.word	0x40001800
 8002d3c:	20013f24 	.word	0x20013f24
 8002d40:	20014020 	.word	0x20014020
 8002d44:	20014094 	.word	0x20014094
 8002d48:	20013fa8 	.word	0x20013fa8
 8002d4c:	200140c2 	.word	0x200140c2
 8002d50:	20013da4 	.word	0x20013da4
 8002d54:	20014030 	.word	0x20014030
 8002d58:	200141f8 	.word	0x200141f8
 8002d5c:	20014371 	.word	0x20014371
 8002d60:	20013b70 	.word	0x20013b70
 8002d64:	200140fd 	.word	0x200140fd
 8002d68:	200140c8 	.word	0x200140c8
 8002d6c:	20014258 	.word	0x20014258
 8002d70:	20013f20 	.word	0x20013f20
 8002d74:	20013bb4 	.word	0x20013bb4

08002d78 <START_BIPAP>:



void START_BIPAP()
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <START_BIPAP+0x108>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d113      	bne.n	8002dac <START_BIPAP+0x34>
		{
			 OLD.LAST_BLOWER_ENDING_DAC_SIGNAL     =  DAC_VAL(BACKUP_PC_CMV.PIP_Val);;
 8002d84:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <START_BIPAP+0x10c>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f006 fab9 	bl	8009300 <DAC_VAL>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <START_BIPAP+0x110>)
 8002d94:	829a      	strh	r2, [r3, #20]
			 OLD.LAST_PIP_Control_Task_Delay       =  10;
 8002d96:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <START_BIPAP+0x110>)
 8002d98:	220a      	movs	r2, #10
 8002d9a:	82da      	strh	r2, [r3, #22]
			 OLD.LAST_Increase_Each_DAC_SET_CONST  =  70;
 8002d9c:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <START_BIPAP+0x110>)
 8002d9e:	2246      	movs	r2, #70	; 0x46
 8002da0:	831a      	strh	r2, [r3, #24]
			 vTaskSuspend(PIP_Control_Task_Handler);
 8002da2:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <START_BIPAP+0x114>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f01c fa74 	bl	801f294 <vTaskSuspend>
		}

		Parkar_valve_Signal(0);
 8002dac:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <START_BIPAP+0x118>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
		Oxygen_Parameter.Servo_Position=45;
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <START_BIPAP+0x11c>)
 8002db4:	222d      	movs	r2, #45	; 0x2d
 8002db6:	73da      	strb	r2, [r3, #15]
		Servo_Info(Oxygen_Parameter.Servo_Position);
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <START_BIPAP+0x11c>)
 8002dba:	7bdb      	ldrb	r3, [r3, #15]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f008 fe4f 	bl	800ba60 <Servo_Info>
		Servo_Position_Feedback = SERVO_FULL_OPEND;
 8002dc2:	4b35      	ldr	r3, [pc, #212]	; (8002e98 <START_BIPAP+0x120>)
 8002dc4:	222d      	movs	r2, #45	; 0x2d
 8002dc6:	701a      	strb	r2, [r3, #0]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <START_BIPAP+0x11c>)
 8002dca:	7bda      	ldrb	r2, [r3, #15]
 8002dcc:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <START_BIPAP+0x124>)
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34
		BIPAP_Peep_Average.EPAP_AVG_VAL = 0;
 8002dd0:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <START_BIPAP+0x128>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	721a      	strb	r2, [r3, #8]
		vTaskSuspend(Oxygen_Blending_Handler);
 8002dd6:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <START_BIPAP+0x12c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f01c fa5a 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Alert_Handler);
 8002de0:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <START_BIPAP+0x130>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f01c fa55 	bl	801f294 <vTaskSuspend>
	    vTaskSuspend(One_Time_Handler);
 8002dea:	4b30      	ldr	r3, [pc, #192]	; (8002eac <START_BIPAP+0x134>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f01c fa50 	bl	801f294 <vTaskSuspend>
		Blower_Signal(0);
 8002df4:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <START_BIPAP+0x118>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
		vol.Volume                                            =  RESET;
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <START_BIPAP+0x138>)
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
		vol.Volume_max                                        =  RESET;
 8002e02:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <START_BIPAP+0x138>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
		BIPAP.APNEA_COUNTER                                   = (1000*BIPAP.APNEA_TIME) ;
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <START_BIPAP+0x13c>)
 8002e0a:	8a9b      	ldrh	r3, [r3, #20]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e12:	fb03 f302 	mul.w	r3, r3, r2
 8002e16:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <START_BIPAP+0x13c>)
 8002e18:	6193      	str	r3, [r2, #24]
		BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL         = DAC_VAL(BIPAP.EPAP_Val );
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <START_BIPAP+0x13c>)
 8002e1c:	789b      	ldrb	r3, [r3, #2]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f006 fa6e 	bl	8009300 <DAC_VAL>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <START_BIPAP+0x140>)
 8002e2a:	80da      	strh	r2, [r3, #6]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(BIPAP.IPAP_Val);
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <START_BIPAP+0x13c>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f006 fa64 	bl	8009300 <DAC_VAL>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <START_BIPAP+0x144>)
 8002e3e:	811a      	strh	r2, [r3, #8]
		BREATH_STATE                                          = EXPIRATION_CYCLE;
 8002e40:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <START_BIPAP+0x148>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                                       = NO_PATIENT_TRIGGER;
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <START_BIPAP+0x14c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
		BIPAP_Control.BIPAP_EPAP_Settle_Time                  = 2000;
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <START_BIPAP+0x150>)
 8002e4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002e52:	601a      	str	r2, [r3, #0]
		vTaskSuspend(BIPAP_PID_Handler);
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <START_BIPAP+0x154>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f01c fa1b 	bl	801f294 <vTaskSuspend>
		vTaskResume(BIPAP_Handler);
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <START_BIPAP+0x158>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f01c fada 	bl	801f41c <vTaskResume>
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <START_BIPAP+0x108>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d104      	bne.n	8002e7a <START_BIPAP+0x102>
		{
			vTaskSuspend(BACKUP_PC_Handler);
 8002e70:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <START_BIPAP+0x15c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f01c fa0d 	bl	801f294 <vTaskSuspend>
		}

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20013f74 	.word	0x20013f74
 8002e84:	20013930 	.word	0x20013930
 8002e88:	20014298 	.word	0x20014298
 8002e8c:	20013ba0 	.word	0x20013ba0
 8002e90:	40007400 	.word	0x40007400
 8002e94:	2001409c 	.word	0x2001409c
 8002e98:	20014074 	.word	0x20014074
 8002e9c:	40001800 	.word	0x40001800
 8002ea0:	200139cc 	.word	0x200139cc
 8002ea4:	20013f24 	.word	0x20013f24
 8002ea8:	20014020 	.word	0x20014020
 8002eac:	20014094 	.word	0x20014094
 8002eb0:	200140c8 	.word	0x200140c8
 8002eb4:	20013b50 	.word	0x20013b50
 8002eb8:	20013d28 	.word	0x20013d28
 8002ebc:	20014030 	.word	0x20014030
 8002ec0:	200140fd 	.word	0x200140fd
 8002ec4:	20013ca9 	.word	0x20013ca9
 8002ec8:	20014048 	.word	0x20014048
 8002ecc:	200141cc 	.word	0x200141cc
 8002ed0:	20013af0 	.word	0x20013af0
 8002ed4:	20013bb4 	.word	0x20013bb4

08002ed8 <START_CPAP>:



void START_CPAP()
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
	   BREATH_STATE                                          = PATIENT_TRIGGER_INSPIRATION;
 8002edc:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <START_CPAP+0xf0>)
 8002ede:	2202      	movs	r2, #2
 8002ee0:	701a      	strb	r2, [r3, #0]
		 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <START_CPAP+0xf4>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d113      	bne.n	8002f12 <START_CPAP+0x3a>
		 {
			 OLD.LAST_BLOWER_ENDING_DAC_SIGNAL     =	 DAC_VAL(BACKUP_PC_CMV.PIP_Val);;
 8002eea:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <START_CPAP+0xf8>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f006 fa06 	bl	8009300 <DAC_VAL>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <START_CPAP+0xfc>)
 8002efa:	829a      	strh	r2, [r3, #20]
			 OLD.LAST_PIP_Control_Task_Delay       =	 10;
 8002efc:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <START_CPAP+0xfc>)
 8002efe:	220a      	movs	r2, #10
 8002f00:	82da      	strh	r2, [r3, #22]
			 OLD.LAST_Increase_Each_DAC_SET_CONST  =     70;
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <START_CPAP+0xfc>)
 8002f04:	2246      	movs	r2, #70	; 0x46
 8002f06:	831a      	strh	r2, [r3, #24]
			 vTaskSuspend(PIP_Control_Task_Handler);
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <START_CPAP+0x100>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f01c f9c1 	bl	801f294 <vTaskSuspend>
		 }

		Parkar_valve_Signal(0);
 8002f12:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <START_CPAP+0x104>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	615a      	str	r2, [r3, #20]
		Oxygen_Parameter.Servo_Position=45;
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <START_CPAP+0x108>)
 8002f1a:	222d      	movs	r2, #45	; 0x2d
 8002f1c:	73da      	strb	r2, [r3, #15]
		Servo_Info(Oxygen_Parameter.Servo_Position);
 8002f1e:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <START_CPAP+0x108>)
 8002f20:	7bdb      	ldrb	r3, [r3, #15]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f008 fd9c 	bl	800ba60 <Servo_Info>
		Servo_Position_Feedback = SERVO_FULL_OPEND;
 8002f28:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <START_CPAP+0x10c>)
 8002f2a:	222d      	movs	r2, #45	; 0x2d
 8002f2c:	701a      	strb	r2, [r3, #0]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <START_CPAP+0x108>)
 8002f30:	7bda      	ldrb	r2, [r3, #15]
 8002f32:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <START_CPAP+0x110>)
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskSuspend(Oxygen_Blending_Handler);
 8002f36:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <START_CPAP+0x114>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f01c f9aa 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Alert_Handler);
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <START_CPAP+0x118>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f01c f9a5 	bl	801f294 <vTaskSuspend>
	    vTaskSuspend(One_Time_Handler);
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <START_CPAP+0x11c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f01c f9a0 	bl	801f294 <vTaskSuspend>
		Blower_Signal(0);
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <START_CPAP+0x104>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
		vol.Volume                                        =  RESET;
 8002f5a:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <START_CPAP+0x120>)
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
		vol.Volume_max                                    =  RESET;
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <START_CPAP+0x120>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
		CPAP.APNEA_COUNTER                                = (1000*CPAP.APNEA_TIME) ;
 8002f68:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <START_CPAP+0x124>)
 8002f6a:	8a1b      	ldrh	r3, [r3, #16]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f72:	fb03 f302 	mul.w	r3, r3, r2
 8002f76:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <START_CPAP+0x124>)
 8002f78:	6153      	str	r3, [r2, #20]
		CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL      = DAC_VAL(CPAP.CPAP_Val );
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <START_CPAP+0x124>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f006 f9be 	bl	8009300 <DAC_VAL>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <START_CPAP+0x128>)
 8002f8a:	805a      	strh	r2, [r3, #2]
		BREATH_STATE                                      = EXPIRATION_CYCLE;
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <START_CPAP+0xf0>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                                   = NO_PATIENT_TRIGGER;
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <START_CPAP+0x12c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
		CPAP_Control.CPAP_Settle_Time                     = 2000;
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <START_CPAP+0x130>)
 8002f9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002f9e:	601a      	str	r2, [r3, #0]
		CPAP_Average.CPAP_AVG_VAL                         = 0;
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <START_CPAP+0x134>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	721a      	strb	r2, [r3, #8]
		vTaskResume(CPAP_Handler);
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <START_CPAP+0x138>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f01c fa36 	bl	801f41c <vTaskResume>
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <START_CPAP+0xf4>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d104      	bne.n	8002fc2 <START_CPAP+0xea>
		{
		   vTaskSuspend(BACKUP_PC_Handler);
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <START_CPAP+0x13c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f01c f969 	bl	801f294 <vTaskSuspend>
		}
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200140fd 	.word	0x200140fd
 8002fcc:	20013f74 	.word	0x20013f74
 8002fd0:	20013930 	.word	0x20013930
 8002fd4:	20014298 	.word	0x20014298
 8002fd8:	20013ba0 	.word	0x20013ba0
 8002fdc:	40007400 	.word	0x40007400
 8002fe0:	2001409c 	.word	0x2001409c
 8002fe4:	20014074 	.word	0x20014074
 8002fe8:	40001800 	.word	0x40001800
 8002fec:	20013f24 	.word	0x20013f24
 8002ff0:	20014020 	.word	0x20014020
 8002ff4:	20014094 	.word	0x20014094
 8002ff8:	200140c8 	.word	0x200140c8
 8002ffc:	20013b14 	.word	0x20013b14
 8003000:	20013adc 	.word	0x20013adc
 8003004:	20013ca9 	.word	0x20013ca9
 8003008:	20013c90 	.word	0x20013c90
 800300c:	20013f8c 	.word	0x20013f8c
 8003010:	20014374 	.word	0x20014374
 8003014:	20013bb4 	.word	0x20013bb4

08003018 <Set_Blower_Val>:

static void Set_Blower_Val()
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	if(PIP_Average_Parameter.PIP_AVG_VAL  == BACKUP_PC_CMV.PIP_Val  )
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <Set_Blower_Val+0x24>)
 800301e:	7b1a      	ldrb	r2, [r3, #12]
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <Set_Blower_Val+0x28>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <Set_Blower_Val+0x20>
	{
		Change_DAC_Values(BACKUP_PC_CMV.PIP_Val ,Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL);
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <Set_Blower_Val+0x28>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4a05      	ldr	r2, [pc, #20]	; (8003044 <Set_Blower_Val+0x2c>)
 800302e:	8912      	ldrh	r2, [r2, #8]
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f006 fb22 	bl	800967c <Change_DAC_Values>
	}
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20013b70 	.word	0x20013b70
 8003040:	20013930 	.word	0x20013930
 8003044:	20014030 	.word	0x20014030

08003048 <Smooth_Ramp_Pressure>:



static void Smooth_Ramp_Pressure()
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
	if(Smooth_Ramp_Time   == Smooth_Ramp_Time_Val_Pending)
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <Smooth_Ramp_Pressure+0x68>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d128      	bne.n	80030a6 <Smooth_Ramp_Pressure+0x5e>
	{
		if( (BACKUP_PC_CMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL)  && (BACKUP_PC_CMV.PEEP_Val >= 9) && (BACKUP_PC_CMV.PEEP_Val <= 14) && (BACKUP_PC_CMV.PIP_Val >=30) )
 8003054:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <Smooth_Ramp_Pressure+0x6c>)
 8003056:	785a      	ldrb	r2, [r3, #1]
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <Smooth_Ramp_Pressure+0x70>)
 800305a:	7c1b      	ldrb	r3, [r3, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d122      	bne.n	80030a6 <Smooth_Ramp_Pressure+0x5e>
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <Smooth_Ramp_Pressure+0x6c>)
 8003062:	785b      	ldrb	r3, [r3, #1]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d91e      	bls.n	80030a6 <Smooth_Ramp_Pressure+0x5e>
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <Smooth_Ramp_Pressure+0x6c>)
 800306a:	785b      	ldrb	r3, [r3, #1]
 800306c:	2b0e      	cmp	r3, #14
 800306e:	d81a      	bhi.n	80030a6 <Smooth_Ramp_Pressure+0x5e>
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <Smooth_Ramp_Pressure+0x6c>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b1d      	cmp	r3, #29
 8003076:	d916      	bls.n	80030a6 <Smooth_Ramp_Pressure+0x5e>
		{
			if(PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  < 2)
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <Smooth_Ramp_Pressure+0x70>)
 800307a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800307e:	2b01      	cmp	r3, #1
 8003080:	dc11      	bgt.n	80030a6 <Smooth_Ramp_Pressure+0x5e>
			{
				if(Smooth_Ramp_Time_Val_Count > 2 )
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <Smooth_Ramp_Pressure+0x74>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d907      	bls.n	800309a <Smooth_Ramp_Pressure+0x52>
				{
					Smooth_Ramp_Time_Val = BACKUP_PC_CMV.PEEP_Val;
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <Smooth_Ramp_Pressure+0x6c>)
 800308c:	785a      	ldrb	r2, [r3, #1]
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <Smooth_Ramp_Pressure+0x78>)
 8003090:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time     = Smooth_Ramp_Time_Val_Finished;
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <Smooth_Ramp_Pressure+0x68>)
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time_Val_Count++;
				}
			}
		}
    }
}
 8003098:	e005      	b.n	80030a6 <Smooth_Ramp_Pressure+0x5e>
					Smooth_Ramp_Time_Val_Count++;
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <Smooth_Ramp_Pressure+0x74>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <Smooth_Ramp_Pressure+0x74>)
 80030a4:	701a      	strb	r2, [r3, #0]
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	20013b82 	.word	0x20013b82
 80030b4:	20013930 	.word	0x20013930
 80030b8:	20014300 	.word	0x20014300
 80030bc:	200140c1 	.word	0x200140c1
 80030c0:	20014058 	.word	0x20014058

080030c4 <Trigger_Time_Monitor>:




static void Trigger_Time_Monitor()
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
	uint16_t CALC_TRIG_VAL;
	CALC_TRIG_VAL 	    =  (BACKUP_PC_CMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <Trigger_Time_Monitor+0x4c>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <Trigger_Time_Monitor+0x50>)
 80030d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	80fb      	strh	r3, [r7, #6]
	if(CALC_TRIG_VAL <0)
	{
		CALC_TRIG_VAL = (CALC_TRIG_VAL * (-1));
	}

	Common_Mode_Parameter.TOLERANCE_EWAVE =  Common_Mode_Parameter.TRIG_TIME;
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <Trigger_Time_Monitor+0x54>)
 80030de:	89da      	ldrh	r2, [r3, #14]
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <Trigger_Time_Monitor+0x54>)
 80030e2:	811a      	strh	r2, [r3, #8]
	if(CALC_TRIG_VAL < Common_Mode_Parameter.TRIG_TIME )
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <Trigger_Time_Monitor+0x54>)
 80030e6:	89db      	ldrh	r3, [r3, #14]
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d205      	bcs.n	80030fa <Trigger_Time_Monitor+0x36>
	{
		Common_Mode_Parameter.TOLERANCE_EWAVE =  (Common_Mode_Parameter.TRIG_TIME - 200) ;
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <Trigger_Time_Monitor+0x54>)
 80030f0:	89db      	ldrh	r3, [r3, #14]
 80030f2:	3bc8      	subs	r3, #200	; 0xc8
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <Trigger_Time_Monitor+0x54>)
 80030f8:	811a      	strh	r2, [r3, #8]
	}
	Common_Mode_Parameter.TRIG_WINDOW        = Common_Mode_Parameter.TOLERANCE_EWAVE;
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <Trigger_Time_Monitor+0x54>)
 80030fc:	891a      	ldrh	r2, [r3, #8]
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <Trigger_Time_Monitor+0x54>)
 8003100:	815a      	strh	r2, [r3, #10]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20013930 	.word	0x20013930
 8003114:	20014300 	.word	0x20014300
 8003118:	20013ba4 	.word	0x20013ba4

0800311c <BIPAP_Mode_Packet_Data>:
static void Patient_Circuit_Disconnected_Alert_BIBAP();



void BIPAP_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	 BIPAP.IPAP_Val                         = Receive_Graph_Packet->PIP_PS_Phigh;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	791b      	ldrb	r3, [r3, #4]
 8003128:	b29a      	uxth	r2, r3
 800312a:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 800312c:	801a      	strh	r2, [r3, #0]
	 BIPAP.EPAP_Val                         = Receive_Graph_Packet->PEEP_CPAP_Plow;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	795a      	ldrb	r2, [r3, #5]
 8003132:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 8003134:	709a      	strb	r2, [r3, #2]

	 BIPAP.TRIG_TYPE                        = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	78db      	ldrb	r3, [r3, #3]
 800313a:	099b      	lsrs	r3, r3, #6
 800313c:	b2db      	uxtb	r3, r3
 800313e:	b29b      	uxth	r3, r3
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 8003148:	809a      	strh	r2, [r3, #4]
	 BIPAP.TRIG_LMT                         = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7c1b      	ldrb	r3, [r3, #16]
 800314e:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <BIPAP_Mode_Packet_Data+0xd8>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 8003162:	edc3 7a02 	vstr	s15, [r3, #8]
	 BIPAP.TRIG_TIME                        = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7bdb      	ldrb	r3, [r3, #15]
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4413      	add	r3, r2
 8003172:	461a      	mov	r2, r3
 8003174:	0091      	lsls	r1, r2, #2
 8003176:	461a      	mov	r2, r3
 8003178:	460b      	mov	r3, r1
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	b29a      	uxth	r2, r3
 8003180:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 8003182:	819a      	strh	r2, [r3, #12]


	 BIPAP.APNEA_TIME                       = Receive_Graph_Packet->Apnea_Time;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7b9b      	ldrb	r3, [r3, #14]
 8003188:	b29a      	uxth	r2, r3
 800318a:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 800318c:	829a      	strh	r2, [r3, #20]
	 BIPAP.APNEA_COUNTER                    = (1000*BIPAP.APNEA_TIME) ;
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 8003190:	8a9b      	ldrh	r3, [r3, #20]
 8003192:	461a      	mov	r2, r3
 8003194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003198:	fb03 f302 	mul.w	r3, r3, r2
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 800319e:	6193      	str	r3, [r2, #24]

	 BIPAP._IPAP_TIME                       = ((Receive_Graph_Packet->T_high));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7a9a      	ldrb	r2, [r3, #10]
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 80031a6:	759a      	strb	r2, [r3, #22]
	 BIPAP.IPAP_TIME                        = (BIPAP._IPAP_TIME*100);
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 80031aa:	7d9b      	ldrb	r3, [r3, #22]
 80031ac:	461a      	mov	r2, r3
 80031ae:	2364      	movs	r3, #100	; 0x64
 80031b0:	fb03 f302 	mul.w	r3, r3, r2
 80031b4:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 80031b6:	61d3      	str	r3, [r2, #28]

	 if(BIPAP.TRIG_TYPE == 0)
 80031b8:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 80031ba:	889b      	ldrh	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d103      	bne.n	80031c8 <BIPAP_Mode_Packet_Data+0xac>
		Trigger_Type = Pressure_Trigger;
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <BIPAP_Mode_Packet_Data+0xdc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e006      	b.n	80031d6 <BIPAP_Mode_Packet_Data+0xba>
	else if(BIPAP.TRIG_TYPE == 1)
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <BIPAP_Mode_Packet_Data+0xd4>)
 80031ca:	889b      	ldrh	r3, [r3, #4]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <BIPAP_Mode_Packet_Data+0xba>
		Trigger_Type = Flow_Trigger;
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <BIPAP_Mode_Packet_Data+0xdc>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
	 Mode_Initial_Flag_Set                  = OPEN;
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <BIPAP_Mode_Packet_Data+0xe0>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
	 vTaskResume(Mode_initial_Flag_Set_Handler);
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <BIPAP_Mode_Packet_Data+0xe4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f01c f91b 	bl	801f41c <vTaskResume>

}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20013b50 	.word	0x20013b50
 80031f4:	cccccccd 	.word	0xcccccccd
 80031f8:	2001398c 	.word	0x2001398c
 80031fc:	20014338 	.word	0x20014338
 8003200:	2001406c 	.word	0x2001406c

08003204 <BIPAP_Task>:




void BIPAP_Task(void *argument)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(BIPAP.APNEA_COUNTER > 0)
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <BIPAP_Task+0x34>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	dd02      	ble.n	800321a <BIPAP_Task+0x16>
		{
			BIBAP_CONTROL();
 8003214:	f000 f8bc 	bl	8003390 <BIBAP_CONTROL>
 8003218:	e00a      	b.n	8003230 <BIPAP_Task+0x2c>
		}
		else
		{
			LED_STATUS = Idle_LED;
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <BIPAP_Task+0x38>)
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
			RESET_FLAGS();
 8003220:	f000 fb5e 	bl	80038e0 <RESET_FLAGS>
			 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <BIPAP_Task+0x3c>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <BIPAP_Task+0x2c>
			 {
				 BACKUP_PC_CMV_START();
 800322c:	f000 fbf6 	bl	8003a1c <BACKUP_PC_CMV_START>
			 }

		}
		vTaskDelay(Two_Millisecond_Delay);
 8003230:	2002      	movs	r0, #2
 8003232:	f01b fffb 	bl	801f22c <vTaskDelay>
		if(BIPAP.APNEA_COUNTER > 0)
 8003236:	e7e9      	b.n	800320c <BIPAP_Task+0x8>
 8003238:	20013b50 	.word	0x20013b50
 800323c:	20013aed 	.word	0x20013aed
 8003240:	20013f74 	.word	0x20013f74
 8003244:	00000000 	.word	0x00000000

08003248 <BIPAP_PID_Task>:




void BIPAP_PID_Task(void *argument)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(BIPAP_Control._INSPIRATION_TIME > 0)
 8003250:	4b43      	ldr	r3, [pc, #268]	; (8003360 <BIPAP_PID_Task+0x118>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	dd39      	ble.n	80032cc <BIPAP_PID_Task+0x84>
		{
			BREATH_STATE                                          = PATIENT_TRIGGER_INSPIRATION;
 8003258:	4b42      	ldr	r3, [pc, #264]	; (8003364 <BIPAP_PID_Task+0x11c>)
 800325a:	2202      	movs	r2, #2
 800325c:	701a      	strb	r2, [r3, #0]
			PIP_Control(BIPAP.IPAP_Val );
 800325e:	4b42      	ldr	r3, [pc, #264]	; (8003368 <BIPAP_PID_Task+0x120>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4618      	mov	r0, r3
 8003266:	f00a fb73 	bl	800d950 <PIP_Control>
			Blower_Signal(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800326a:	4b40      	ldr	r3, [pc, #256]	; (800336c <BIPAP_PID_Task+0x124>)
 800326c:	881a      	ldrh	r2, [r3, #0]
 800326e:	4b40      	ldr	r3, [pc, #256]	; (8003370 <BIPAP_PID_Task+0x128>)
 8003270:	609a      	str	r2, [r3, #8]
			Pressure_Mode_blower_control.Blower_Signal_Voltage = ( (Pressure_Mode_blower_control.BLOWER_DAC_VAL*3.3) /4095);
 8003272:	4b3e      	ldr	r3, [pc, #248]	; (800336c <BIPAP_PID_Task+0x124>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd f8fc 	bl	8000474 <__aeabi_i2d>
 800327c:	a334      	add	r3, pc, #208	; (adr r3, 8003350 <BIPAP_PID_Task+0x108>)
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f7fd f961 	bl	8000548 <__aeabi_dmul>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4610      	mov	r0, r2
 800328c:	4619      	mov	r1, r3
 800328e:	a332      	add	r3, pc, #200	; (adr r3, 8003358 <BIPAP_PID_Task+0x110>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7fd fa82 	bl	800079c <__aeabi_ddiv>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	f7fd fc34 	bl	8000b0c <__aeabi_d2f>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4a31      	ldr	r2, [pc, #196]	; (800336c <BIPAP_PID_Task+0x124>)
 80032a8:	60d3      	str	r3, [r2, #12]
			   if(BIPAP_Control._INSPIRATION_TIME < 100)
 80032aa:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <BIPAP_PID_Task+0x118>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b63      	cmp	r3, #99	; 0x63
 80032b0:	dc48      	bgt.n	8003344 <BIPAP_PID_Task+0xfc>
			   {
				   BIPAP_Pip_average.IPAP_Cumulative_Val += Pressure_sensor.Pressure_Val;
 80032b2:	4b30      	ldr	r3, [pc, #192]	; (8003374 <BIPAP_PID_Task+0x12c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4a30      	ldr	r2, [pc, #192]	; (8003378 <BIPAP_PID_Task+0x130>)
 80032b8:	7892      	ldrb	r2, [r2, #2]
 80032ba:	4413      	add	r3, r2
 80032bc:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <BIPAP_PID_Task+0x12c>)
 80032be:	6053      	str	r3, [r2, #4]
				   BIPAP_Pip_average.IPAP_Event_Count++;
 80032c0:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <BIPAP_PID_Task+0x12c>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <BIPAP_PID_Task+0x12c>)
 80032c8:	6093      	str	r3, [r2, #8]
 80032ca:	e03b      	b.n	8003344 <BIPAP_PID_Task+0xfc>
			   }
		}
		else if(BIPAP_Control._INSPIRATION_TIME == 0)
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <BIPAP_PID_Task+0x118>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d137      	bne.n	8003344 <BIPAP_PID_Task+0xfc>
		{
			Blower_Signal(0);
 80032d4:	4b26      	ldr	r3, [pc, #152]	; (8003370 <BIPAP_PID_Task+0x128>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
			ExpValve_OPEN();
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <BIPAP_PID_Task+0x134>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4a27      	ldr	r2, [pc, #156]	; (800337c <BIPAP_PID_Task+0x134>)
 80032e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e4:	6153      	str	r3, [r2, #20]
			vTaskDelay(700);
 80032e6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80032ea:	f01b ff9f 	bl	801f22c <vTaskDelay>
			BIPAP.APNEA_COUNTER                                = (1000*BIPAP.APNEA_TIME) ;
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <BIPAP_PID_Task+0x120>)
 80032f0:	8a9b      	ldrh	r3, [r3, #20]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f8:	fb03 f302 	mul.w	r3, r3, r2
 80032fc:	4a1a      	ldr	r2, [pc, #104]	; (8003368 <BIPAP_PID_Task+0x120>)
 80032fe:	6193      	str	r3, [r2, #24]
			BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL      = DAC_VAL(BIPAP.EPAP_Val );
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <BIPAP_PID_Task+0x120>)
 8003302:	789b      	ldrb	r3, [r3, #2]
 8003304:	4618      	mov	r0, r3
 8003306:	f005 fffb 	bl	8009300 <DAC_VAL>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <BIPAP_PID_Task+0x138>)
 8003310:	80da      	strh	r2, [r3, #6]
			BREATH_STATE                                       = EXPIRATION_CYCLE;
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <BIPAP_PID_Task+0x11c>)
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]
			Patient_Trigger                                    = NO_PATIENT_TRIGGER;
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <BIPAP_PID_Task+0x13c>)
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
			BREATH_STATE                                       = PATIENT_TRIGGER_EXPIRATION;
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <BIPAP_PID_Task+0x11c>)
 8003320:	2203      	movs	r2, #3
 8003322:	701a      	strb	r2, [r3, #0]
			BIBAP_IPAP_AVERAGE();
 8003324:	f000 fc32 	bl	8003b8c <BIBAP_IPAP_AVERAGE>
			BIPAP_Control.BIPAP_EPAP_Settle_Time               = 2000;
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <BIPAP_PID_Task+0x118>)
 800332a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800332e:	601a      	str	r2, [r3, #0]
			vTaskResume(BIPAP_Handler);
 8003330:	4b15      	ldr	r3, [pc, #84]	; (8003388 <BIPAP_PID_Task+0x140>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f01c f871 	bl	801f41c <vTaskResume>
			vTaskSuspend(BIPAP_PID_Handler);
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <BIPAP_PID_Task+0x144>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f01b ffa8 	bl	801f294 <vTaskSuspend>
		}
		vTaskDelay(Ten_Millisecond_Delay);
 8003344:	200a      	movs	r0, #10
 8003346:	f01b ff71 	bl	801f22c <vTaskDelay>
		if(BIPAP_Control._INSPIRATION_TIME > 0)
 800334a:	e781      	b.n	8003250 <BIPAP_PID_Task+0x8>
 800334c:	f3af 8000 	nop.w
 8003350:	66666666 	.word	0x66666666
 8003354:	400a6666 	.word	0x400a6666
 8003358:	00000000 	.word	0x00000000
 800335c:	40affe00 	.word	0x40affe00
 8003360:	20014048 	.word	0x20014048
 8003364:	200140fd 	.word	0x200140fd
 8003368:	20013b50 	.word	0x20013b50
 800336c:	20014030 	.word	0x20014030
 8003370:	40007400 	.word	0x40007400
 8003374:	200141d0 	.word	0x200141d0
 8003378:	2001405c 	.word	0x2001405c
 800337c:	40020400 	.word	0x40020400
 8003380:	20013d28 	.word	0x20013d28
 8003384:	20013ca9 	.word	0x20013ca9
 8003388:	20013af0 	.word	0x20013af0
 800338c:	200141cc 	.word	0x200141cc

08003390 <BIBAP_CONTROL>:
	}
}


static void BIBAP_CONTROL()
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
	    BREATH_STATE                                     = EXPIRATION_CYCLE;
 8003394:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <BIBAP_CONTROL+0x100>)
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
	    if(Pressure_sensor.Pressure_Val >= (BIPAP.EPAP_Val + 5) )
 800339a:	4b3e      	ldr	r3, [pc, #248]	; (8003494 <BIBAP_CONTROL+0x104>)
 800339c:	789b      	ldrb	r3, [r3, #2]
 800339e:	3304      	adds	r3, #4
 80033a0:	4a3d      	ldr	r2, [pc, #244]	; (8003498 <BIBAP_CONTROL+0x108>)
 80033a2:	7892      	ldrb	r2, [r2, #2]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	da1e      	bge.n	80033e6 <BIBAP_CONTROL+0x56>
	    {
	    	Blower_Signal(0);
 80033a8:	4b3c      	ldr	r3, [pc, #240]	; (800349c <BIBAP_CONTROL+0x10c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
	    	Pressure_Mode_blower_control.Blower_Signal_Voltage = 0;
 80033ae:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <BIBAP_CONTROL+0x110>)
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
	    	Pressure_Status                                    = OVER_PRESSURE;
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <BIBAP_CONTROL+0x114>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
	    	ExpValve_OPEN();
 80033bc:	4b3a      	ldr	r3, [pc, #232]	; (80034a8 <BIBAP_CONTROL+0x118>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	4a39      	ldr	r2, [pc, #228]	; (80034a8 <BIBAP_CONTROL+0x118>)
 80033c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033c6:	6153      	str	r3, [r2, #20]
	    	BREATH_STATE                                       = PATIENT_TRIGGER_EXPIRATION;
 80033c8:	4b31      	ldr	r3, [pc, #196]	; (8003490 <BIBAP_CONTROL+0x100>)
 80033ca:	2203      	movs	r2, #3
 80033cc:	701a      	strb	r2, [r3, #0]
	    	vTaskDelay(700);
 80033ce:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80033d2:	f01b ff2b 	bl	801f22c <vTaskDelay>
	    	BIPAP_Control.BIPAP_EPAP_Settle_Time   = 2000;
 80033d6:	4b35      	ldr	r3, [pc, #212]	; (80034ac <BIBAP_CONTROL+0x11c>)
 80033d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033dc:	601a      	str	r2, [r3, #0]
	    	Pressure_Status                        = NORMAL_PRESSURE;
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <BIBAP_CONTROL+0x114>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
				else
				{
					CHECK_TRIGGER_OFFSET();
				}
	    }
}
 80033e4:	e052      	b.n	800348c <BIBAP_CONTROL+0xfc>
	    	    LED_STATUS      = EXPIRATION_LED;
 80033e6:	4b32      	ldr	r3, [pc, #200]	; (80034b0 <BIBAP_CONTROL+0x120>)
 80033e8:	2202      	movs	r2, #2
 80033ea:	701a      	strb	r2, [r3, #0]
				if(BIPAP_Control.Blower_Wait_Time_Milli_Second == 0)
 80033ec:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <BIBAP_CONTROL+0x11c>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <BIBAP_CONTROL+0x68>
					RUN_BIPAP_EPAP_MAINTAIN_BLOWER();
 80033f4:	f000 f868 	bl	80034c8 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER>
				if(BIPAP_Control.BIPAP_EPAP_Settle_Time == 0 )
 80033f8:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <BIBAP_CONTROL+0x11c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d141      	bne.n	8003484 <BIBAP_CONTROL+0xf4>
					Patient_Circuit_Disconnected_Alert_BIBAP();
 8003400:	f000 fbfc 	bl	8003bfc <Patient_Circuit_Disconnected_Alert_BIBAP>
					if( (Flow_Sensor_cal._Flow_Val > 0) && (BIPAP_Control.Trigger_Check_Wait_Time == 0))
 8003404:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <BIBAP_CONTROL+0x124>)
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	2b00      	cmp	r3, #0
 800340a:	dd13      	ble.n	8003434 <BIBAP_CONTROL+0xa4>
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <BIBAP_CONTROL+0x11c>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10f      	bne.n	8003434 <BIBAP_CONTROL+0xa4>
						STOP_BLOWER_IF_FLOW_SENSE();
 8003414:	f000 f894 	bl	8003540 <STOP_BLOWER_IF_FLOW_SENSE>
							if (Trigger_Type == Pressure_Trigger)
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <BIBAP_CONTROL+0x128>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <BIBAP_CONTROL+0x96>
								CHECK_PRESSURE_TRIGGER();
 8003420:	f000 f8a0 	bl	8003564 <CHECK_PRESSURE_TRIGGER>
							if (Trigger_Type == Pressure_Trigger)
 8003424:	e031      	b.n	800348a <BIBAP_CONTROL+0xfa>
							else if (Trigger_Type == Flow_Trigger)
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <BIBAP_CONTROL+0x128>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d12d      	bne.n	800348a <BIBAP_CONTROL+0xfa>
								CHECK_FLOW_TRIGGER();
 800342e:	f000 f8cd 	bl	80035cc <CHECK_FLOW_TRIGGER>
							if (Trigger_Type == Pressure_Trigger)
 8003432:	e02a      	b.n	800348a <BIBAP_CONTROL+0xfa>
						BIPAP_Peep_Average.EPAP_Cumulative_Val += Pressure_sensor.Pressure_Val;
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <BIBAP_CONTROL+0x12c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a17      	ldr	r2, [pc, #92]	; (8003498 <BIBAP_CONTROL+0x108>)
 800343a:	7892      	ldrb	r2, [r2, #2]
 800343c:	4413      	add	r3, r2
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <BIBAP_CONTROL+0x12c>)
 8003440:	6013      	str	r3, [r2, #0]
						BIPAP_Peep_Average.EPAP_Event_Count++;
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <BIBAP_CONTROL+0x12c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	3301      	adds	r3, #1
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <BIBAP_CONTROL+0x12c>)
 800344a:	6053      	str	r3, [r2, #4]
						if(BIPAP_Peep_Average.EPAP_Event_Count >1000)
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <BIBAP_CONTROL+0x12c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003454:	d91a      	bls.n	800348c <BIBAP_CONTROL+0xfc>
							Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 8003456:	f007 fde7 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
							BIPAP_EPAP_AVERAGE();
 800345a:	f000 f91b 	bl	8003694 <BIPAP_EPAP_AVERAGE>
							BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL    = BIPAP_TUNE_EPAP_BLOWER(&BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL,
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <BIBAP_CONTROL+0x104>)
 8003460:	789b      	ldrb	r3, [r3, #2]
 8003462:	4619      	mov	r1, r3
 8003464:	4816      	ldr	r0, [pc, #88]	; (80034c0 <BIBAP_CONTROL+0x130>)
 8003466:	f000 f94b 	bl	8003700 <BIPAP_TUNE_EPAP_BLOWER>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <BIBAP_CONTROL+0x134>)
 8003470:	811a      	strh	r2, [r3, #8]
							BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL         = BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL;
 8003472:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <BIBAP_CONTROL+0x134>)
 8003474:	891a      	ldrh	r2, [r3, #8]
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <BIBAP_CONTROL+0x134>)
 8003478:	80da      	strh	r2, [r3, #6]
							BIPAP_Control.BIPAP_EPAP_Settle_Time                  = 1000;
 800347a:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <BIBAP_CONTROL+0x11c>)
 800347c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003480:	601a      	str	r2, [r3, #0]
}
 8003482:	e003      	b.n	800348c <BIBAP_CONTROL+0xfc>
					CHECK_TRIGGER_OFFSET();
 8003484:	f000 f8dc 	bl	8003640 <CHECK_TRIGGER_OFFSET>
}
 8003488:	e000      	b.n	800348c <BIBAP_CONTROL+0xfc>
							if (Trigger_Type == Pressure_Trigger)
 800348a:	bf00      	nop
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	200140fd 	.word	0x200140fd
 8003494:	20013b50 	.word	0x20013b50
 8003498:	2001405c 	.word	0x2001405c
 800349c:	40007400 	.word	0x40007400
 80034a0:	20014030 	.word	0x20014030
 80034a4:	20013f29 	.word	0x20013f29
 80034a8:	40020400 	.word	0x40020400
 80034ac:	20014048 	.word	0x20014048
 80034b0:	20013aed 	.word	0x20013aed
 80034b4:	20013fb0 	.word	0x20013fb0
 80034b8:	2001398c 	.word	0x2001398c
 80034bc:	200139cc 	.word	0x200139cc
 80034c0:	20013d30 	.word	0x20013d30
 80034c4:	20013d28 	.word	0x20013d28

080034c8 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER>:



static void RUN_BIPAP_EPAP_MAINTAIN_BLOWER()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
	ExpValve_CLOSE();
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x68>)
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x68>)
 80034d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034d6:	6153      	str	r3, [r2, #20]
	Blower_Signal( BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL);
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x6c>)
 80034da:	88da      	ldrh	r2, [r3, #6]
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x70>)
 80034de:	609a      	str	r2, [r3, #8]
	Pressure_Mode_blower_control.Blower_Signal_Voltage = ( (BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL*3.3) /4095);
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x6c>)
 80034e2:	88db      	ldrh	r3, [r3, #6]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fc ffc5 	bl	8000474 <__aeabi_i2d>
 80034ea:	a30d      	add	r3, pc, #52	; (adr r3, 8003520 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x58>)
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f7fd f82a 	bl	8000548 <__aeabi_dmul>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	a30a      	add	r3, pc, #40	; (adr r3, 8003528 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x60>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fd f94b 	bl	800079c <__aeabi_ddiv>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4610      	mov	r0, r2
 800350c:	4619      	mov	r1, r3
 800350e:	f7fd fafd 	bl	8000b0c <__aeabi_d2f>
 8003512:	4603      	mov	r3, r0
 8003514:	4a09      	ldr	r2, [pc, #36]	; (800353c <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x74>)
 8003516:	60d3      	str	r3, [r2, #12]
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	f3af 8000 	nop.w
 8003520:	66666666 	.word	0x66666666
 8003524:	400a6666 	.word	0x400a6666
 8003528:	00000000 	.word	0x00000000
 800352c:	40affe00 	.word	0x40affe00
 8003530:	40020400 	.word	0x40020400
 8003534:	20013d28 	.word	0x20013d28
 8003538:	40007400 	.word	0x40007400
 800353c:	20014030 	.word	0x20014030

08003540 <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <STOP_BLOWER_IF_FLOW_SENSE+0x1c>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
	BIPAP_Control.Blower_Wait_Time_Milli_Second = 2000;
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <STOP_BLOWER_IF_FLOW_SENSE+0x20>)
 800354c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003550:	605a      	str	r2, [r3, #4]
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40007400 	.word	0x40007400
 8003560:	20014048 	.word	0x20014048

08003564 <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
	if (( Pressure_sensor.Pressure_Val < (Pressure_Trigger_Offset - BIPAP.TRIG_LMT )))
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <CHECK_PRESSURE_TRIGGER+0x50>)
 800356a:	789b      	ldrb	r3, [r3, #2]
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <CHECK_PRESSURE_TRIGGER+0x54>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <CHECK_PRESSURE_TRIGGER+0x58>)
 8003582:	edd3 7a02 	vldr	s15, [r3, #8]
 8003586:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800358a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003592:	d400      	bmi.n	8003596 <CHECK_PRESSURE_TRIGGER+0x32>
		BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL = 0;
		Blower_Signal( BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL);
		INSPIRATION_PROCESS_BIPAP();

	}
}
 8003594:	e00b      	b.n	80035ae <CHECK_PRESSURE_TRIGGER+0x4a>
		Patient_Trigger                               = PATIENT_TRIGGER_HAPPEN;
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <CHECK_PRESSURE_TRIGGER+0x5c>)
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
		BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL = 0;
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <CHECK_PRESSURE_TRIGGER+0x60>)
 800359e:	2200      	movs	r2, #0
 80035a0:	80da      	strh	r2, [r3, #6]
		Blower_Signal( BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL);
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <CHECK_PRESSURE_TRIGGER+0x60>)
 80035a4:	88da      	ldrh	r2, [r3, #6]
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <CHECK_PRESSURE_TRIGGER+0x64>)
 80035a8:	609a      	str	r2, [r3, #8]
		INSPIRATION_PROCESS_BIPAP();
 80035aa:	f000 f9c7 	bl	800393c <INSPIRATION_PROCESS_BIPAP>
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2001405c 	.word	0x2001405c
 80035b8:	20014024 	.word	0x20014024
 80035bc:	20013b50 	.word	0x20013b50
 80035c0:	20013ca9 	.word	0x20013ca9
 80035c4:	20013d28 	.word	0x20013d28
 80035c8:	40007400 	.word	0x40007400

080035cc <CHECK_FLOW_TRIGGER>:

static void CHECK_FLOW_TRIGGER()
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+BIPAP.TRIG_LMT )))
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <CHECK_FLOW_TRIGGER+0x58>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <CHECK_FLOW_TRIGGER+0x5c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <CHECK_FLOW_TRIGGER+0x60>)
 80035ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80035ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fa:	dc00      	bgt.n	80035fe <CHECK_FLOW_TRIGGER+0x32>
		BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL = 0;
		Blower_Signal( BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL);
		INSPIRATION_PROCESS_BIPAP();

	}
}
 80035fc:	e00f      	b.n	800361e <CHECK_FLOW_TRIGGER+0x52>
		LAST_FLOW_TRIGGER 							= FLOW_TRIGGER;
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <CHECK_FLOW_TRIGGER+0x58>)
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <CHECK_FLOW_TRIGGER+0x64>)
 8003604:	701a      	strb	r2, [r3, #0]
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <CHECK_FLOW_TRIGGER+0x68>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
		BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL = 0;
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <CHECK_FLOW_TRIGGER+0x6c>)
 800360e:	2200      	movs	r2, #0
 8003610:	80da      	strh	r2, [r3, #6]
		Blower_Signal( BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL);
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <CHECK_FLOW_TRIGGER+0x6c>)
 8003614:	88da      	ldrh	r2, [r3, #6]
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <CHECK_FLOW_TRIGGER+0x70>)
 8003618:	609a      	str	r2, [r3, #8]
		INSPIRATION_PROCESS_BIPAP();
 800361a:	f000 f98f 	bl	800393c <INSPIRATION_PROCESS_BIPAP>
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20014068 	.word	0x20014068
 8003628:	20014018 	.word	0x20014018
 800362c:	20013b50 	.word	0x20013b50
 8003630:	20014240 	.word	0x20014240
 8003634:	20013ca9 	.word	0x20013ca9
 8003638:	20013d28 	.word	0x20013d28
 800363c:	40007400 	.word	0x40007400

08003640 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
	if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <CHECK_TRIGGER_OFFSET+0x40>)
 8003646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <CHECK_TRIGGER_OFFSET+0x1e>
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <CHECK_TRIGGER_OFFSET+0x40>)
 800364e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003650:	f113 0f08 	cmn.w	r3, #8
 8003654:	db0f      	blt.n	8003676 <CHECK_TRIGGER_OFFSET+0x36>
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <CHECK_TRIGGER_OFFSET+0x40>)
 8003658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365a:	2b00      	cmp	r3, #0
 800365c:	da0b      	bge.n	8003676 <CHECK_TRIGGER_OFFSET+0x36>
	{
		FLOW_TRIGGER             = 0;
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <CHECK_TRIGGER_OFFSET+0x44>)
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
		Pressure_Trigger_Offset  =  Pressure_sensor.Pressure_Val;
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <CHECK_TRIGGER_OFFSET+0x48>)
 8003666:	789b      	ldrb	r3, [r3, #2]
 8003668:	461a      	mov	r2, r3
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <CHECK_TRIGGER_OFFSET+0x4c>)
 800366c:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  Flow_Sensor_cal._Flow_Val;
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <CHECK_TRIGGER_OFFSET+0x40>)
 8003670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003672:	4a07      	ldr	r2, [pc, #28]	; (8003690 <CHECK_TRIGGER_OFFSET+0x50>)
 8003674:	6013      	str	r3, [r2, #0]
	}
}
 8003676:	bf00      	nop
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	20013fb0 	.word	0x20013fb0
 8003684:	20014068 	.word	0x20014068
 8003688:	2001405c 	.word	0x2001405c
 800368c:	20014024 	.word	0x20014024
 8003690:	20014018 	.word	0x20014018

08003694 <BIPAP_EPAP_AVERAGE>:




static void BIPAP_EPAP_AVERAGE()
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
	if((BIPAP_Peep_Average.EPAP_Cumulative_Val == 0) || (BIPAP_Peep_Average.EPAP_Event_Count == 0))
 8003698:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <BIPAP_EPAP_AVERAGE+0x14>
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <BIPAP_EPAP_AVERAGE+0x20>
	{
		BIPAP_Peep_Average.EPAP_Cumulative_Val = 1;
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
		BIPAP_Peep_Average.EPAP_Event_Count    = 1;
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	605a      	str	r2, [r3, #4]
	}
	BIPAP_Peep_Average.EPAP_AVG_VAL        = (uint32_t)(BIPAP_Peep_Average.EPAP_Cumulative_Val/ BIPAP_Peep_Average.EPAP_Event_Count);
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 80036c4:	721a      	strb	r2, [r3, #8]
	BIPAP_Peep_Average.EPAP_Cumulative_Val = RESET;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
	BIPAP_Peep_Average.EPAP_Event_Count    = RESET;
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	605a      	str	r2, [r3, #4]

	if(BIPAP_Peep_Average.EPAP_AVG_VAL  == BIPAP.EPAP_Val)
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <BIPAP_EPAP_AVERAGE+0x60>)
 80036d4:	7a1a      	ldrb	r2, [r3, #8]
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <BIPAP_EPAP_AVERAGE+0x64>)
 80036d8:	789b      	ldrb	r3, [r3, #2]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d107      	bne.n	80036ee <BIPAP_EPAP_AVERAGE+0x5a>
	{
		Change_DAC_Values(BIPAP.EPAP_Val,BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL);
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <BIPAP_EPAP_AVERAGE+0x64>)
 80036e0:	789b      	ldrb	r3, [r3, #2]
 80036e2:	4a06      	ldr	r2, [pc, #24]	; (80036fc <BIPAP_EPAP_AVERAGE+0x68>)
 80036e4:	8912      	ldrh	r2, [r2, #8]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f005 ffc7 	bl	800967c <Change_DAC_Values>
	}
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200139cc 	.word	0x200139cc
 80036f8:	20013b50 	.word	0x20013b50
 80036fc:	20013d28 	.word	0x20013d28

08003700 <BIPAP_TUNE_EPAP_BLOWER>:



static uint16_t BIPAP_TUNE_EPAP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PEEP)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
	if(  ( BIPAP_Peep_Average.EPAP_AVG_VAL)  > ( Set_PEEP ) && (BIPAP_Peep_Average.EPAP_AVG_VAL  < (Set_PEEP + 2) ) )
 800370c:	4b37      	ldr	r3, [pc, #220]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 800370e:	7a1b      	ldrb	r3, [r3, #8]
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	429a      	cmp	r2, r3
 8003714:	d20c      	bcs.n	8003730 <BIPAP_TUNE_EPAP_BLOWER+0x30>
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	3301      	adds	r3, #1
 800371a:	4a34      	ldr	r2, [pc, #208]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 800371c:	7a12      	ldrb	r2, [r2, #8]
 800371e:	4293      	cmp	r3, r2
 8003720:	db06      	blt.n	8003730 <BIPAP_TUNE_EPAP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	3b0a      	subs	r3, #10
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	801a      	strh	r2, [r3, #0]
 800372e:	e055      	b.n	80037dc <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if(  ( BIPAP_Peep_Average.EPAP_AVG_VAL)  >= ( Set_PEEP + 2 ) && (BIPAP_Peep_Average.EPAP_AVG_VAL  < (Set_PEEP + 4) ) )
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	3301      	adds	r3, #1
 8003734:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 8003736:	7a12      	ldrb	r2, [r2, #8]
 8003738:	4293      	cmp	r3, r2
 800373a:	da0c      	bge.n	8003756 <BIPAP_TUNE_EPAP_BLOWER+0x56>
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	3303      	adds	r3, #3
 8003740:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 8003742:	7a12      	ldrb	r2, [r2, #8]
 8003744:	4293      	cmp	r3, r2
 8003746:	db06      	blt.n	8003756 <BIPAP_TUNE_EPAP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	3b14      	subs	r3, #20
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	801a      	strh	r2, [r3, #0]
 8003754:	e042      	b.n	80037dc <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if(  ( BIPAP_Peep_Average.EPAP_AVG_VAL)  >= ( Set_PEEP + 4 )  )
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	3303      	adds	r3, #3
 800375a:	4a24      	ldr	r2, [pc, #144]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 800375c:	7a12      	ldrb	r2, [r2, #8]
 800375e:	4293      	cmp	r3, r2
 8003760:	da06      	bge.n	8003770 <BIPAP_TUNE_EPAP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	3b28      	subs	r3, #40	; 0x28
 8003768:	b29a      	uxth	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	e035      	b.n	80037dc <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if( (BIPAP_Peep_Average.EPAP_AVG_VAL  < Set_PEEP) && (BIPAP_Peep_Average.EPAP_AVG_VAL  > (Set_PEEP -2) ) )
 8003770:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 8003772:	7a1b      	ldrb	r3, [r3, #8]
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	429a      	cmp	r2, r3
 8003778:	d90c      	bls.n	8003794 <BIPAP_TUNE_EPAP_BLOWER+0x94>
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	3b01      	subs	r3, #1
 800377e:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 8003780:	7a12      	ldrb	r2, [r2, #8]
 8003782:	4293      	cmp	r3, r2
 8003784:	dc06      	bgt.n	8003794 <BIPAP_TUNE_EPAP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	330a      	adds	r3, #10
 800378c:	b29a      	uxth	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	801a      	strh	r2, [r3, #0]
 8003792:	e023      	b.n	80037dc <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if(  (BIPAP_Peep_Average.EPAP_AVG_VAL  <= (Set_PEEP-2) ) && (BIPAP_Peep_Average.EPAP_AVG_VAL  >  (Set_PEEP-4) ) )
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	3b01      	subs	r3, #1
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 800379a:	7a12      	ldrb	r2, [r2, #8]
 800379c:	4293      	cmp	r3, r2
 800379e:	dd0c      	ble.n	80037ba <BIPAP_TUNE_EPAP_BLOWER+0xba>
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	3b03      	subs	r3, #3
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 80037a6:	7a12      	ldrb	r2, [r2, #8]
 80037a8:	4293      	cmp	r3, r2
 80037aa:	dc06      	bgt.n	80037ba <BIPAP_TUNE_EPAP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	3314      	adds	r3, #20
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	e010      	b.n	80037dc <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if(  (BIPAP_Peep_Average.EPAP_AVG_VAL  <= (Set_PEEP-4) )  )
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	3b03      	subs	r3, #3
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 80037c0:	7a12      	ldrb	r2, [r2, #8]
 80037c2:	4293      	cmp	r3, r2
 80037c4:	dd06      	ble.n	80037d4 <BIPAP_TUNE_EPAP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	3328      	adds	r3, #40	; 0x28
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	801a      	strh	r2, [r3, #0]
 80037d2:	e003      	b.n	80037dc <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	881a      	ldrh	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	881b      	ldrh	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	200139cc 	.word	0x200139cc

080037f0 <BIBAP_TUNE_IPAP_BLOWER>:



static uint16_t BIBAP_TUNE_IPAP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PIP)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	70fb      	strb	r3, [r7, #3]
	if(  ( BIPAP_Pip_average.IPAP_AVG_VAL)  > ( Set_PIP ) && (BIPAP_Pip_average.IPAP_AVG_VAL  < (Set_PIP + 2) ) )
 80037fc:	4b37      	ldr	r3, [pc, #220]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 80037fe:	7b1b      	ldrb	r3, [r3, #12]
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	429a      	cmp	r2, r3
 8003804:	d20c      	bcs.n	8003820 <BIBAP_TUNE_IPAP_BLOWER+0x30>
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	3301      	adds	r3, #1
 800380a:	4a34      	ldr	r2, [pc, #208]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 800380c:	7b12      	ldrb	r2, [r2, #12]
 800380e:	4293      	cmp	r3, r2
 8003810:	db06      	blt.n	8003820 <BIBAP_TUNE_IPAP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	3b0a      	subs	r3, #10
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	801a      	strh	r2, [r3, #0]
 800381e:	e055      	b.n	80038cc <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if(  ( BIPAP_Pip_average.IPAP_AVG_VAL)  >= ( Set_PIP + 2 ) && (BIPAP_Pip_average.IPAP_AVG_VAL  < (Set_PIP + 4) ) )
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	3301      	adds	r3, #1
 8003824:	4a2d      	ldr	r2, [pc, #180]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 8003826:	7b12      	ldrb	r2, [r2, #12]
 8003828:	4293      	cmp	r3, r2
 800382a:	da0c      	bge.n	8003846 <BIBAP_TUNE_IPAP_BLOWER+0x56>
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	3303      	adds	r3, #3
 8003830:	4a2a      	ldr	r2, [pc, #168]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 8003832:	7b12      	ldrb	r2, [r2, #12]
 8003834:	4293      	cmp	r3, r2
 8003836:	db06      	blt.n	8003846 <BIBAP_TUNE_IPAP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	3b14      	subs	r3, #20
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	801a      	strh	r2, [r3, #0]
 8003844:	e042      	b.n	80038cc <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if(  ( BIPAP_Pip_average.IPAP_AVG_VAL)  >= ( Set_PIP + 4 )  )
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	3303      	adds	r3, #3
 800384a:	4a24      	ldr	r2, [pc, #144]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 800384c:	7b12      	ldrb	r2, [r2, #12]
 800384e:	4293      	cmp	r3, r2
 8003850:	da06      	bge.n	8003860 <BIBAP_TUNE_IPAP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	3b28      	subs	r3, #40	; 0x28
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	e035      	b.n	80038cc <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if( (BIPAP_Pip_average.IPAP_AVG_VAL  < Set_PIP) && (BIPAP_Pip_average.IPAP_AVG_VAL  > (Set_PIP -2) ) )
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 8003862:	7b1b      	ldrb	r3, [r3, #12]
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	429a      	cmp	r2, r3
 8003868:	d90c      	bls.n	8003884 <BIBAP_TUNE_IPAP_BLOWER+0x94>
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	3b01      	subs	r3, #1
 800386e:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 8003870:	7b12      	ldrb	r2, [r2, #12]
 8003872:	4293      	cmp	r3, r2
 8003874:	dc06      	bgt.n	8003884 <BIBAP_TUNE_IPAP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	330a      	adds	r3, #10
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	e023      	b.n	80038cc <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if(  (BIPAP_Pip_average.IPAP_AVG_VAL  <= (Set_PIP-2) ) && (BIPAP_Pip_average.IPAP_AVG_VAL  >  (Set_PIP-4) ) )
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	3b01      	subs	r3, #1
 8003888:	4a14      	ldr	r2, [pc, #80]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 800388a:	7b12      	ldrb	r2, [r2, #12]
 800388c:	4293      	cmp	r3, r2
 800388e:	dd0c      	ble.n	80038aa <BIBAP_TUNE_IPAP_BLOWER+0xba>
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	3b03      	subs	r3, #3
 8003894:	4a11      	ldr	r2, [pc, #68]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 8003896:	7b12      	ldrb	r2, [r2, #12]
 8003898:	4293      	cmp	r3, r2
 800389a:	dc06      	bgt.n	80038aa <BIBAP_TUNE_IPAP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	3314      	adds	r3, #20
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	801a      	strh	r2, [r3, #0]
 80038a8:	e010      	b.n	80038cc <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if(  (BIPAP_Pip_average.IPAP_AVG_VAL  <= (Set_PIP-4) )  )
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	3b03      	subs	r3, #3
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 80038b0:	7b12      	ldrb	r2, [r2, #12]
 80038b2:	4293      	cmp	r3, r2
 80038b4:	dd06      	ble.n	80038c4 <BIBAP_TUNE_IPAP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	3328      	adds	r3, #40	; 0x28
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	e003      	b.n	80038cc <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	881a      	ldrh	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	881b      	ldrh	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	200141d0 	.word	0x200141d0

080038e0 <RESET_FLAGS>:



static void RESET_FLAGS()
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <RESET_FLAGS+0x40>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
	Peep_Status                   				= PEEP_NOT_ACHEIVED;
 80038ea:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <RESET_FLAGS+0x44>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			    = OPENED;
 80038f0:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <RESET_FLAGS+0x48>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
	Clear_All_Alert_Bits();
 80038f6:	f7fd fb3b 	bl	8000f70 <Clear_All_Alert_Bits>
	Send_Bluetooth_Data_Farme                   = SEND_ALERT_FRAME;
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <RESET_FLAGS+0x4c>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
	Apnea_Alert                                 = APNEA_ALERT_HAPPEN;
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <RESET_FLAGS+0x50>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
	Alert_Status                                = ALERT_HAPPEN;
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <RESET_FLAGS+0x54>)
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
	SET_ALERT_BIT(SECOND_FRAME_UN,_ALERT_APNEA);
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <RESET_FLAGS+0x58>)
 800390e:	7913      	ldrb	r3, [r2, #4]
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	7113      	strb	r3, [r2, #4]
	LED_Alert();
 8003916:	f7fe f84b 	bl	80019b0 <LED_Alert>
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40007400 	.word	0x40007400
 8003924:	200140f5 	.word	0x200140f5
 8003928:	200140f4 	.word	0x200140f4
 800392c:	20013d10 	.word	0x20013d10
 8003930:	200140c0 	.word	0x200140c0
 8003934:	20013f88 	.word	0x20013f88
 8003938:	20013b34 	.word	0x20013b34

0800393c <INSPIRATION_PROCESS_BIPAP>:


static void INSPIRATION_PROCESS_BIPAP()
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
	Breath_Count                                          = Count_The_Breath;
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <INSPIRATION_PROCESS_BIPAP+0xa4>)
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
	BIPAP_Control._INSPIRATION_TIME                       = BIPAP.IPAP_TIME;
 8003946:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <INSPIRATION_PROCESS_BIPAP+0xa8>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	4a27      	ldr	r2, [pc, #156]	; (80039e8 <INSPIRATION_PROCESS_BIPAP+0xac>)
 800394c:	60d3      	str	r3, [r2, #12]
	PIP_control_Task.PIP_Control_Task_Delay               = 10;
 800394e:	4b27      	ldr	r3, [pc, #156]	; (80039ec <INSPIRATION_PROCESS_BIPAP+0xb0>)
 8003950:	220a      	movs	r2, #10
 8003952:	801a      	strh	r2, [r3, #0]
	PIP_control_Task.Increase_Each_DAC_SET_CONST          = 70;
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <INSPIRATION_PROCESS_BIPAP+0xb0>)
 8003956:	2246      	movs	r2, #70	; 0x46
 8003958:	80da      	strh	r2, [r3, #6]
	PIP_Status                    				          = PIP_NOT_ACHEIVED;
 800395a:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <INSPIRATION_PROCESS_BIPAP+0xb4>)
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_DAC_VAL           = DAC_VAL(BIPAP.EPAP_Val);;
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <INSPIRATION_PROCESS_BIPAP+0xa8>)
 8003962:	789b      	ldrb	r3, [r3, #2]
 8003964:	4618      	mov	r0, r3
 8003966:	f005 fccb 	bl	8009300 <DAC_VAL>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <INSPIRATION_PROCESS_BIPAP+0xb8>)
 8003970:	801a      	strh	r2, [r3, #0]
	Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL      = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <INSPIRATION_PROCESS_BIPAP+0xb8>)
 8003974:	881a      	ldrh	r2, [r3, #0]
 8003976:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <INSPIRATION_PROCESS_BIPAP+0xb8>)
 8003978:	805a      	strh	r2, [r3, #2]
	Set_PIP_Status                                        = SET_PIP_VALUE_NOT_ACHEIVED;
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <INSPIRATION_PROCESS_BIPAP+0xbc>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
	Read_Time_vs_Pressure                                 = READ_TIME_OPEN;
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <INSPIRATION_PROCESS_BIPAP+0xc0>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.PIP_Control_Event_Occured            = RESET;
 8003986:	4b19      	ldr	r3, [pc, #100]	; (80039ec <INSPIRATION_PROCESS_BIPAP+0xb0>)
 8003988:	2200      	movs	r2, #0
 800398a:	805a      	strh	r2, [r3, #2]
	PIP_Average_Parameter.Maximum_PIP_Acheived            = RESET;
 800398c:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <INSPIRATION_PROCESS_BIPAP+0xc4>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = BIBAP_TUNE_IPAP_BLOWER(&Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL,
			                                                                      BIPAP.IPAP_Val );
 8003992:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <INSPIRATION_PROCESS_BIPAP+0xa8>)
 8003994:	881b      	ldrh	r3, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = BIBAP_TUNE_IPAP_BLOWER(&Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL,
 8003996:	b2db      	uxtb	r3, r3
 8003998:	4619      	mov	r1, r3
 800399a:	481a      	ldr	r0, [pc, #104]	; (8003a04 <INSPIRATION_PROCESS_BIPAP+0xc8>)
 800399c:	f7ff ff28 	bl	80037f0 <BIBAP_TUNE_IPAP_BLOWER>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <INSPIRATION_PROCESS_BIPAP+0xb8>)
 80039a6:	811a      	strh	r2, [r3, #8]
	BREATH_STATE                                          = INSPIRATION_CYCLE;
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <INSPIRATION_PROCESS_BIPAP+0xcc>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
	vol.Volume                                            = RESET;
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <INSPIRATION_PROCESS_BIPAP+0xd0>)
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
	vol.Volume_max                                        = RESET;
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <INSPIRATION_PROCESS_BIPAP+0xd0>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
	BIPAP_EPAP_AVERAGE();
 80039bc:	f7ff fe6a 	bl	8003694 <BIPAP_EPAP_AVERAGE>
	LED_STATUS = INSPIRATION_lED;
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <INSPIRATION_PROCESS_BIPAP+0xd4>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
	vTaskResume(BIPAP_PID_Handler);
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <INSPIRATION_PROCESS_BIPAP+0xd8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f01b fd26 	bl	801f41c <vTaskResume>
	vTaskSuspend(BIPAP_Handler);
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <INSPIRATION_PROCESS_BIPAP+0xdc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f01b fc5d 	bl	801f294 <vTaskSuspend>

}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200139a6 	.word	0x200139a6
 80039e4:	20013b50 	.word	0x20013b50
 80039e8:	20014048 	.word	0x20014048
 80039ec:	20013b04 	.word	0x20013b04
 80039f0:	200140c2 	.word	0x200140c2
 80039f4:	20014030 	.word	0x20014030
 80039f8:	200141f8 	.word	0x200141f8
 80039fc:	20014371 	.word	0x20014371
 8003a00:	20013b70 	.word	0x20013b70
 8003a04:	20014038 	.word	0x20014038
 8003a08:	200140fd 	.word	0x200140fd
 8003a0c:	200140c8 	.word	0x200140c8
 8003a10:	20013aed 	.word	0x20013aed
 8003a14:	200141cc 	.word	0x200141cc
 8003a18:	20013af0 	.word	0x20013af0

08003a1c <BACKUP_PC_CMV_START>:




static void BACKUP_PC_CMV_START()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	if(Backup_PC_CMV_SET_VALUE == CHANGE_HAPPEN)
 8003a20:	4b45      	ldr	r3, [pc, #276]	; (8003b38 <BACKUP_PC_CMV_START+0x11c>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d133      	bne.n	8003a90 <BACKUP_PC_CMV_START+0x74>
	{
			Mode                                                  = Backup_Pccmv;
 8003a28:	4b44      	ldr	r3, [pc, #272]	; (8003b3c <BACKUP_PC_CMV_START+0x120>)
 8003a2a:	2215      	movs	r2, #21
 8003a2c:	701a      	strb	r2, [r3, #0]
			Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 8003a2e:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <BACKUP_PC_CMV_START+0x124>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
			Expiratory_Valve_Lock_Delay   			              = OPENED;
 8003a34:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <BACKUP_PC_CMV_START+0x128>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 8003a3a:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <BACKUP_PC_CMV_START+0x12c>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f005 fc5e 	bl	8009300 <DAC_VAL>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	4b40      	ldr	r3, [pc, #256]	; (8003b4c <BACKUP_PC_CMV_START+0x130>)
 8003a4a:	811a      	strh	r2, [r3, #8]
			PIP_control_Task.PIP_Control_Task_Delay               = 10;
 8003a4c:	4b40      	ldr	r3, [pc, #256]	; (8003b50 <BACKUP_PC_CMV_START+0x134>)
 8003a4e:	220a      	movs	r2, #10
 8003a50:	801a      	strh	r2, [r3, #0]
			PIP_control_Task.Increase_Each_DAC_SET_CONST          = 70;
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <BACKUP_PC_CMV_START+0x134>)
 8003a54:	2246      	movs	r2, #70	; 0x46
 8003a56:	80da      	strh	r2, [r3, #6]
			PIP_Average_Parameter.PIP_Cumulative_Val              = 1;
 8003a58:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <BACKUP_PC_CMV_START+0x138>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	605a      	str	r2, [r3, #4]
			PIP_Average_Parameter.PIP_Event_Count                 = 1;
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <BACKUP_PC_CMV_START+0x138>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	609a      	str	r2, [r3, #8]
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 8003a64:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <BACKUP_PC_CMV_START+0x13c>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	609a      	str	r2, [r3, #8]
			PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <BACKUP_PC_CMV_START+0x13c>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	60da      	str	r2, [r3, #12]
			Need_PID_Task_Delay                                   = NO;
 8003a70:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <BACKUP_PC_CMV_START+0x140>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
			Tune_PID_Task_Delay                                   = T_OPEN;
 8003a76:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <BACKUP_PC_CMV_START+0x144>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
			PIP_control_Task.Low_PIP_Count                        = RESET;
 8003a7c:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <BACKUP_PC_CMV_START+0x134>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	729a      	strb	r2, [r3, #10]
			PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 8003a82:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <BACKUP_PC_CMV_START+0x134>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	725a      	strb	r2, [r3, #9]
			Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <BACKUP_PC_CMV_START+0x148>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e023      	b.n	8003ad8 <BACKUP_PC_CMV_START+0xbc>
	}
	else if(Backup_PC_CMV_SET_VALUE == NO_CHANGES)
 8003a90:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <BACKUP_PC_CMV_START+0x11c>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d11f      	bne.n	8003ad8 <BACKUP_PC_CMV_START+0xbc>
	{
		Mode                                                  = Backup_Pccmv;
 8003a98:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <BACKUP_PC_CMV_START+0x120>)
 8003a9a:	2215      	movs	r2, #21
 8003a9c:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 8003a9e:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <BACKUP_PC_CMV_START+0x124>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <BACKUP_PC_CMV_START+0x128>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = OLD.LAST_BLOWER_ENDING_DAC_SIGNAL;;
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <BACKUP_PC_CMV_START+0x14c>)
 8003aac:	8a9a      	ldrh	r2, [r3, #20]
 8003aae:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <BACKUP_PC_CMV_START+0x130>)
 8003ab0:	811a      	strh	r2, [r3, #8]
		PIP_control_Task.PIP_Control_Task_Delay               = OLD.LAST_PIP_Control_Task_Delay;
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <BACKUP_PC_CMV_START+0x14c>)
 8003ab4:	8ada      	ldrh	r2, [r3, #22]
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <BACKUP_PC_CMV_START+0x134>)
 8003ab8:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = OLD.LAST_Increase_Each_DAC_SET_CONST;
 8003aba:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <BACKUP_PC_CMV_START+0x14c>)
 8003abc:	8b1a      	ldrh	r2, [r3, #24]
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <BACKUP_PC_CMV_START+0x134>)
 8003ac0:	80da      	strh	r2, [r3, #6]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = PEEP_Maintain_Parameter.PEEP_AVG_VAL;
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <BACKUP_PC_CMV_START+0x13c>)
 8003ac4:	7c1b      	ldrb	r3, [r3, #16]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <BACKUP_PC_CMV_START+0x13c>)
 8003aca:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8003acc:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <BACKUP_PC_CMV_START+0x13c>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <BACKUP_PC_CMV_START+0x148>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]

	}
	vTaskResume(One_Time_Handler);
 8003ad8:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <BACKUP_PC_CMV_START+0x150>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f01b fc9d 	bl	801f41c <vTaskResume>
	vTaskResume(BACKUP_PC_Handler);
 8003ae2:	4b23      	ldr	r3, [pc, #140]	; (8003b70 <BACKUP_PC_CMV_START+0x154>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f01b fc98 	bl	801f41c <vTaskResume>
	vTaskResume(PIP_Control_Task_Handler);
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <BACKUP_PC_CMV_START+0x158>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f01b fc93 	bl	801f41c <vTaskResume>
	vTaskResume(Alert_Handler);
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <BACKUP_PC_CMV_START+0x15c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f01b fc8e 	bl	801f41c <vTaskResume>
	if(Common_Mode_Parameter._FIO2_Val > 21)
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <BACKUP_PC_CMV_START+0x160>)
 8003b02:	78db      	ldrb	r3, [r3, #3]
 8003b04:	2b15      	cmp	r3, #21
 8003b06:	d905      	bls.n	8003b14 <BACKUP_PC_CMV_START+0xf8>
	{
		vTaskResume(Oxygen_Blending_Handler);
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <BACKUP_PC_CMV_START+0x164>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f01b fc85 	bl	801f41c <vTaskResume>
 8003b12:	e004      	b.n	8003b1e <BACKUP_PC_CMV_START+0x102>
	}
	else
	{
		vTaskSuspend(Oxygen_Blending_Handler);
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <BACKUP_PC_CMV_START+0x164>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f01b fbbb 	bl	801f294 <vTaskSuspend>
	}


	//vTaskResume(LED_Strip_Task_Handler);

	vTaskSuspend(BIPAP_PID_Handler);
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <BACKUP_PC_CMV_START+0x168>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f01b fbb6 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 8003b28:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <BACKUP_PC_CMV_START+0x16c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f01b fbb1 	bl	801f294 <vTaskSuspend>
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20013c44 	.word	0x20013c44
 8003b3c:	20013d48 	.word	0x20013d48
 8003b40:	200140f5 	.word	0x200140f5
 8003b44:	200140f4 	.word	0x200140f4
 8003b48:	20013930 	.word	0x20013930
 8003b4c:	20014030 	.word	0x20014030
 8003b50:	20013b04 	.word	0x20013b04
 8003b54:	20013b70 	.word	0x20013b70
 8003b58:	20014300 	.word	0x20014300
 8003b5c:	200140f6 	.word	0x200140f6
 8003b60:	20013c88 	.word	0x20013c88
 8003b64:	20013d20 	.word	0x20013d20
 8003b68:	20014298 	.word	0x20014298
 8003b6c:	20014094 	.word	0x20014094
 8003b70:	20013bb4 	.word	0x20013bb4
 8003b74:	20013ba0 	.word	0x20013ba0
 8003b78:	20014020 	.word	0x20014020
 8003b7c:	20013ba4 	.word	0x20013ba4
 8003b80:	20013f24 	.word	0x20013f24
 8003b84:	200141cc 	.word	0x200141cc
 8003b88:	20013af0 	.word	0x20013af0

08003b8c <BIBAP_IPAP_AVERAGE>:




static void BIBAP_IPAP_AVERAGE()
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	if((BIPAP_Pip_average.IPAP_Cumulative_Val == 0) || (BIPAP_Pip_average.IPAP_Event_Count == 0))
 8003b90:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <BIBAP_IPAP_AVERAGE+0x14>
 8003b98:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <BIBAP_IPAP_AVERAGE+0x20>
	{
		BIPAP_Pip_average.IPAP_Cumulative_Val = 1;
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	605a      	str	r2, [r3, #4]
		BIPAP_Pip_average.IPAP_Event_Count    = 1;
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	609a      	str	r2, [r3, #8]
	}
	BIPAP_Pip_average.IPAP_AVG_VAL        = (uint32_t)(BIPAP_Pip_average.IPAP_Cumulative_Val/ BIPAP_Pip_average.IPAP_Event_Count);
 8003bac:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003bbc:	731a      	strb	r2, [r3, #12]
	BIPAP_Pip_average.IPAP_Cumulative_Val = RESET;
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	605a      	str	r2, [r3, #4]
	BIPAP_Pip_average.IPAP_Event_Count    = RESET;
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
	if(BIPAP_Pip_average.IPAP_AVG_VAL == BIPAP.IPAP_Val)
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <BIBAP_IPAP_AVERAGE+0x64>)
 8003bcc:	7b1b      	ldrb	r3, [r3, #12]
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <BIBAP_IPAP_AVERAGE+0x68>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d108      	bne.n	8003bea <BIBAP_IPAP_AVERAGE+0x5e>
	{
		Change_DAC_Values(BIPAP.IPAP_Val,Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL);
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <BIBAP_IPAP_AVERAGE+0x68>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	4a06      	ldr	r2, [pc, #24]	; (8003bf8 <BIBAP_IPAP_AVERAGE+0x6c>)
 8003be0:	8912      	ldrh	r2, [r2, #8]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f005 fd49 	bl	800967c <Change_DAC_Values>
	}
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200141d0 	.word	0x200141d0
 8003bf4:	20013b50 	.word	0x20013b50
 8003bf8:	20014030 	.word	0x20014030

08003bfc <Patient_Circuit_Disconnected_Alert_BIBAP>:



static void Patient_Circuit_Disconnected_Alert_BIBAP()
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	if(  (Pressure_sensor.Pressure_Val==0) && (Flow_Sensor_cal._Flow_Val==0 || Flow_Sensor_cal._Flow_Val==-1 || Flow_Sensor_cal._Flow_Val==-2))
 8003c00:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <Patient_Circuit_Disconnected_Alert_BIBAP+0xa0>)
 8003c02:	789b      	ldrb	r3, [r3, #2]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d146      	bne.n	8003c96 <Patient_Circuit_Disconnected_Alert_BIBAP+0x9a>
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <Patient_Circuit_Disconnected_Alert_BIBAP+0xa4>)
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <Patient_Circuit_Disconnected_Alert_BIBAP+0x28>
 8003c10:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <Patient_Circuit_Disconnected_Alert_BIBAP+0xa4>)
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d004      	beq.n	8003c24 <Patient_Circuit_Disconnected_Alert_BIBAP+0x28>
 8003c1a:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <Patient_Circuit_Disconnected_Alert_BIBAP+0xa4>)
 8003c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1e:	f113 0f02 	cmn.w	r3, #2
 8003c22:	d138      	bne.n	8003c96 <Patient_Circuit_Disconnected_Alert_BIBAP+0x9a>
	{
			if((DAC1->DHR12R1)>=400)
 8003c24:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <Patient_Circuit_Disconnected_Alert_BIBAP+0xa8>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003c2c:	d333      	bcc.n	8003c96 <Patient_Circuit_Disconnected_Alert_BIBAP+0x9a>
			{
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <Patient_Circuit_Disconnected_Alert_BIBAP+0xac>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d12f      	bne.n	8003c96 <Patient_Circuit_Disconnected_Alert_BIBAP+0x9a>
				{
					Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <Patient_Circuit_Disconnected_Alert_BIBAP+0xb0>)
 8003c38:	88db      	ldrh	r3, [r3, #6]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <Patient_Circuit_Disconnected_Alert_BIBAP+0xb0>)
 8003c40:	80da      	strh	r2, [r3, #6]
						if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 500)
 8003c42:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <Patient_Circuit_Disconnected_Alert_BIBAP+0xb0>)
 8003c44:	88db      	ldrh	r3, [r3, #6]
 8003c46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c4a:	d324      	bcc.n	8003c96 <Patient_Circuit_Disconnected_Alert_BIBAP+0x9a>
						{
							Clear_All_Alert_Bits();
 8003c4c:	f7fd f990 	bl	8000f70 <Clear_All_Alert_Bits>
							Alert_Status = ALERT_HAPPEN;
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <Patient_Circuit_Disconnected_Alert_BIBAP+0xb4>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
							SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8003c56:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <Patient_Circuit_Disconnected_Alert_BIBAP+0xb8>)
 8003c58:	78d3      	ldrb	r3, [r2, #3]
 8003c5a:	f043 0310 	orr.w	r3, r3, #16
 8003c5e:	70d3      	strb	r3, [r2, #3]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <Patient_Circuit_Disconnected_Alert_BIBAP+0xac>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	701a      	strb	r2, [r3, #0]

							Send_Bluetooth_Data_Farme                = SEND_ALERT_FRAME;
 8003c66:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <Patient_Circuit_Disconnected_Alert_BIBAP+0xbc>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
							Apnea_Alert                              = APNEA_ALERT_HAPPEN;
 8003c6c:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <Patient_Circuit_Disconnected_Alert_BIBAP+0xc0>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <Patient_Circuit_Disconnected_Alert_BIBAP+0xac>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
							LED_Alert();
 8003c78:	f7fd fe9a 	bl	80019b0 <LED_Alert>

							BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL           = DAC_VAL(BIPAP.EPAP_Val );
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <Patient_Circuit_Disconnected_Alert_BIBAP+0xc4>)
 8003c7e:	789b      	ldrb	r3, [r3, #2]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f005 fb3d 	bl	8009300 <DAC_VAL>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <Patient_Circuit_Disconnected_Alert_BIBAP+0xc8>)
 8003c8c:	80da      	strh	r2, [r3, #6]
							BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL      = BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL;
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <Patient_Circuit_Disconnected_Alert_BIBAP+0xc8>)
 8003c90:	88da      	ldrh	r2, [r3, #6]
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <Patient_Circuit_Disconnected_Alert_BIBAP+0xc8>)
 8003c94:	811a      	strh	r2, [r3, #8]

						}
				}
			}
	}
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2001405c 	.word	0x2001405c
 8003ca0:	20013fb0 	.word	0x20013fb0
 8003ca4:	40007400 	.word	0x40007400
 8003ca8:	20013ac9 	.word	0x20013ac9
 8003cac:	20014274 	.word	0x20014274
 8003cb0:	20013f88 	.word	0x20013f88
 8003cb4:	20013b34 	.word	0x20013b34
 8003cb8:	20013d10 	.word	0x20013d10
 8003cbc:	200140c0 	.word	0x200140c0
 8003cc0:	20013b50 	.word	0x20013b50
 8003cc4:	20013d28 	.word	0x20013d28

08003cc8 <Split_Mode_Parameter_Packets>:




void Split_Mode_Parameter_Packets(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	    uint8_t Mode_Val;
	    uint8_t BackupMode;
	    Mode_Val         =  ( 0x0F & (Receive_Graph_Packet->Control_Byte) ) ;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	73fb      	strb	r3, [r7, #15]
	    BackupMode       =  ( 0x20 & (Receive_Graph_Packet->Control_Byte) ) >>5;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	78db      	ldrb	r3, [r3, #3]
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	73bb      	strb	r3, [r7, #14]

	    if(BackupMode == Backup_PCCMV_Mode)
 8003ce8:	7bbb      	ldrb	r3, [r7, #14]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d103      	bne.n	8003cf6 <Split_Mode_Parameter_Packets+0x2e>
	    {
	    	Mode = Backup_Pccmv;
 8003cee:	4baa      	ldr	r3, [pc, #680]	; (8003f98 <Split_Mode_Parameter_Packets+0x2d0>)
 8003cf0:	2215      	movs	r2, #21
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e002      	b.n	8003cfc <Split_Mode_Parameter_Packets+0x34>
	    }
	    else
	    {
	    	Mode= Mode_Val;
 8003cf6:	4aa8      	ldr	r2, [pc, #672]	; (8003f98 <Split_Mode_Parameter_Packets+0x2d0>)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	7013      	strb	r3, [r2, #0]
	    }

	    Device_Control   =  (0x10 & (Receive_Graph_Packet->Control_Byte))>>4;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	78db      	ldrb	r3, [r3, #3]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4ba4      	ldr	r3, [pc, #656]	; (8003f9c <Split_Mode_Parameter_Packets+0x2d4>)
 8003d0c:	701a      	strb	r2, [r3, #0]
	    if(Device_Control == PAUSE)
 8003d0e:	4ba3      	ldr	r3, [pc, #652]	; (8003f9c <Split_Mode_Parameter_Packets+0x2d4>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	f040 80a1 	bne.w	8003e5a <Split_Mode_Parameter_Packets+0x192>
	    {

	    	Running_Mode   = Idle;
 8003d18:	4ba1      	ldr	r3, [pc, #644]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
	    	Run_Current_Breathe_State = No_Run_State;
 8003d1e:	4ba1      	ldr	r3, [pc, #644]	; (8003fa4 <Split_Mode_Parameter_Packets+0x2dc>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
	    	vTaskSuspend(Vc_Cmv_Handler);
 8003d24:	4ba0      	ldr	r3, [pc, #640]	; (8003fa8 <Split_Mode_Parameter_Packets+0x2e0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f01b fab3 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(Volume_Control_Task_Handler);
 8003d2e:	4b9f      	ldr	r3, [pc, #636]	; (8003fac <Split_Mode_Parameter_Packets+0x2e4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f01b faae 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(One_Time_Handler);
 8003d38:	4b9d      	ldr	r3, [pc, #628]	; (8003fb0 <Split_Mode_Parameter_Packets+0x2e8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f01b faa9 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(Oxygen_Blending_Handler);
 8003d42:	4b9c      	ldr	r3, [pc, #624]	; (8003fb4 <Split_Mode_Parameter_Packets+0x2ec>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f01b faa4 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(Pc_Cmv_Handler);
 8003d4c:	4b9a      	ldr	r3, [pc, #616]	; (8003fb8 <Split_Mode_Parameter_Packets+0x2f0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f01b fa9f 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(PIP_Control_Task_Handler);
 8003d56:	4b99      	ldr	r3, [pc, #612]	; (8003fbc <Split_Mode_Parameter_Packets+0x2f4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f01b fa9a 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 8003d60:	4b97      	ldr	r3, [pc, #604]	; (8003fc0 <Split_Mode_Parameter_Packets+0x2f8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f01b fa95 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 8003d6a:	4b96      	ldr	r3, [pc, #600]	; (8003fc4 <Split_Mode_Parameter_Packets+0x2fc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f01b fa90 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 8003d74:	4b94      	ldr	r3, [pc, #592]	; (8003fc8 <Split_Mode_Parameter_Packets+0x300>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f01b fa8b 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 8003d7e:	4b93      	ldr	r3, [pc, #588]	; (8003fcc <Split_Mode_Parameter_Packets+0x304>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f01b fa86 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(BACKUP_PC_Handler);
 8003d88:	4b91      	ldr	r3, [pc, #580]	; (8003fd0 <Split_Mode_Parameter_Packets+0x308>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f01b fa81 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(PSV_Handler);
 8003d92:	4b90      	ldr	r3, [pc, #576]	; (8003fd4 <Split_Mode_Parameter_Packets+0x30c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f01b fa7c 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(PSV_PID_Handler);
 8003d9c:	4b8e      	ldr	r3, [pc, #568]	; (8003fd8 <Split_Mode_Parameter_Packets+0x310>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f01b fa77 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(CPAP_Handler);
 8003da6:	4b8d      	ldr	r3, [pc, #564]	; (8003fdc <Split_Mode_Parameter_Packets+0x314>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f01b fa72 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(BIPAP_Handler);
 8003db0:	4b8b      	ldr	r3, [pc, #556]	; (8003fe0 <Split_Mode_Parameter_Packets+0x318>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f01b fa6d 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(BIPAP_PID_Handler);
 8003dba:	4b8a      	ldr	r3, [pc, #552]	; (8003fe4 <Split_Mode_Parameter_Packets+0x31c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f01b fa68 	bl	801f294 <vTaskSuspend>
			vTaskSuspend(APRV_Handler);
 8003dc4:	4b88      	ldr	r3, [pc, #544]	; (8003fe8 <Split_Mode_Parameter_Packets+0x320>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f01b fa63 	bl	801f294 <vTaskSuspend>
		    vTaskSuspend(APRV_ONE_TIME_Handler);
 8003dce:	4b87      	ldr	r3, [pc, #540]	; (8003fec <Split_Mode_Parameter_Packets+0x324>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f01b fa5e 	bl	801f294 <vTaskSuspend>
		    vTaskSuspend(Nebuliser_Handler);
 8003dd8:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <Split_Mode_Parameter_Packets+0x328>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f01b fa59 	bl	801f294 <vTaskSuspend>
		    vTaskSuspend(Suction_Handler);
 8003de2:	4b84      	ldr	r3, [pc, #528]	; (8003ff4 <Split_Mode_Parameter_Packets+0x32c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f01b fa54 	bl	801f294 <vTaskSuspend>
		    vTaskSuspend(HFNC_Handler);
 8003dec:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <Split_Mode_Parameter_Packets+0x330>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f01b fa4f 	bl	801f294 <vTaskSuspend>
			ExpValve_OPEN();
 8003df6:	4b81      	ldr	r3, [pc, #516]	; (8003ffc <Split_Mode_Parameter_Packets+0x334>)
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4a80      	ldr	r2, [pc, #512]	; (8003ffc <Split_Mode_Parameter_Packets+0x334>)
 8003dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e00:	6153      	str	r3, [r2, #20]
			Blower_Signal( 0);
 8003e02:	4b7f      	ldr	r3, [pc, #508]	; (8004000 <Split_Mode_Parameter_Packets+0x338>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
			Parkar_valve_Signal(0);
 8003e08:	4b7d      	ldr	r3, [pc, #500]	; (8004000 <Split_Mode_Parameter_Packets+0x338>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	615a      	str	r2, [r3, #20]
			Nebuliser_OFF();
 8003e0e:	4b7b      	ldr	r3, [pc, #492]	; (8003ffc <Split_Mode_Parameter_Packets+0x334>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4a7a      	ldr	r2, [pc, #488]	; (8003ffc <Split_Mode_Parameter_Packets+0x334>)
 8003e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e18:	6153      	str	r3, [r2, #20]
			vol.Volume       = RESET;
 8003e1a:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <Split_Mode_Parameter_Packets+0x33c>)
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
			vol.Volume_max   = RESET;
 8003e22:	4b78      	ldr	r3, [pc, #480]	; (8004004 <Split_Mode_Parameter_Packets+0x33c>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
			vol.Volume_Val   = RESET;
 8003e28:	4b76      	ldr	r3, [pc, #472]	; (8004004 <Split_Mode_Parameter_Packets+0x33c>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	605a      	str	r2, [r3, #4]
		    Blue_Led_ON();
 8003e2e:	4b76      	ldr	r3, [pc, #472]	; (8004008 <Split_Mode_Parameter_Packets+0x340>)
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	4a75      	ldr	r2, [pc, #468]	; (8004008 <Split_Mode_Parameter_Packets+0x340>)
 8003e34:	f043 0308 	orr.w	r3, r3, #8
 8003e38:	6153      	str	r3, [r2, #20]
		    Red_Led_OFF();
 8003e3a:	4b73      	ldr	r3, [pc, #460]	; (8004008 <Split_Mode_Parameter_Packets+0x340>)
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	4a72      	ldr	r2, [pc, #456]	; (8004008 <Split_Mode_Parameter_Packets+0x340>)
 8003e40:	f023 0310 	bic.w	r3, r3, #16
 8003e44:	6153      	str	r3, [r2, #20]
		    Green_Led_OFF();
 8003e46:	4b70      	ldr	r3, [pc, #448]	; (8004008 <Split_Mode_Parameter_Packets+0x340>)
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	4a6f      	ldr	r2, [pc, #444]	; (8004008 <Split_Mode_Parameter_Packets+0x340>)
 8003e4c:	f023 0320 	bic.w	r3, r3, #32
 8003e50:	6153      	str	r3, [r2, #20]
		    Led_Pause_Status = 1;
 8003e52:	4b6e      	ldr	r3, [pc, #440]	; (800400c <Split_Mode_Parameter_Packets+0x344>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
					default:
				    break;
				}
	    }

}
 8003e58:	e099      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
	    else if(Device_Control == RESUME)
 8003e5a:	4b50      	ldr	r3, [pc, #320]	; (8003f9c <Split_Mode_Parameter_Packets+0x2d4>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8092 	bne.w	8003f88 <Split_Mode_Parameter_Packets+0x2c0>
				switch(Mode)
 8003e64:	4b4c      	ldr	r3, [pc, #304]	; (8003f98 <Split_Mode_Parameter_Packets+0x2d0>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	2b14      	cmp	r3, #20
 8003e6c:	f200 808e 	bhi.w	8003f8c <Split_Mode_Parameter_Packets+0x2c4>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <Split_Mode_Parameter_Packets+0x1b0>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003ecd 	.word	0x08003ecd
 8003e7c:	08003ee1 	.word	0x08003ee1
 8003e80:	08003f8d 	.word	0x08003f8d
 8003e84:	08003f47 	.word	0x08003f47
 8003e88:	08003ef5 	.word	0x08003ef5
 8003e8c:	08003f09 	.word	0x08003f09
 8003e90:	08003f1d 	.word	0x08003f1d
 8003e94:	08003f8d 	.word	0x08003f8d
 8003e98:	08003f8d 	.word	0x08003f8d
 8003e9c:	08003f8d 	.word	0x08003f8d
 8003ea0:	08003f2b 	.word	0x08003f2b
 8003ea4:	08003f39 	.word	0x08003f39
 8003ea8:	08003f63 	.word	0x08003f63
 8003eac:	08003f8d 	.word	0x08003f8d
 8003eb0:	08003f77 	.word	0x08003f77
 8003eb4:	08003f8d 	.word	0x08003f8d
 8003eb8:	08003f8d 	.word	0x08003f8d
 8003ebc:	08003f8d 	.word	0x08003f8d
 8003ec0:	08003f8d 	.word	0x08003f8d
 8003ec4:	08003f8d 	.word	0x08003f8d
 8003ec8:	08003f55 	.word	0x08003f55
						Pc_Cmv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f009 fa4d 	bl	800d36c <Pc_Cmv_Mode_Packet_Data>
						Running_Mode        = Pccmv;
 8003ed2:	4b33      	ldr	r3, [pc, #204]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
						Current_Backup_Mode = No_Backup_Mode;
 8003ed8:	4b4d      	ldr	r3, [pc, #308]	; (8004010 <Split_Mode_Parameter_Packets+0x348>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
					break;
 8003ede:	e056      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						Vc_Cmv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f00e f805 	bl	8011ef0 <Vc_Cmv_Mode_Packet_Data>
						Running_Mode        = Vccmv;
 8003ee6:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003ee8:	2202      	movs	r2, #2
 8003eea:	701a      	strb	r2, [r3, #0]
						Current_Backup_Mode = No_Backup_Mode;
 8003eec:	4b48      	ldr	r3, [pc, #288]	; (8004010 <Split_Mode_Parameter_Packets+0x348>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
					break;
 8003ef2:	e04c      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						Pc_Simv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f008 fdb9 	bl	800ca6c <Pc_Simv_Mode_Packet_Data>
						Running_Mode        = Pcsimv;
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003efc:	2205      	movs	r2, #5
 8003efe:	701a      	strb	r2, [r3, #0]
						Current_Backup_Mode = No_Backup_Mode;
 8003f00:	4b43      	ldr	r3, [pc, #268]	; (8004010 <Split_Mode_Parameter_Packets+0x348>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
					break;
 8003f06:	e042      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						Vc_Simv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f00d fb4b 	bl	80115a4 <Vc_Simv_Mode_Packet_Data>
						Running_Mode        = Vcsimv;
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003f10:	2206      	movs	r2, #6
 8003f12:	701a      	strb	r2, [r3, #0]
						Current_Backup_Mode = No_Backup_Mode;
 8003f14:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <Split_Mode_Parameter_Packets+0x348>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
					break;
 8003f1a:	e038      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						PSV_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f00a f841 	bl	800dfa4 <PSV_Mode_Packet_Data>
						Running_Mode        = Psv;
 8003f22:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003f24:	2207      	movs	r2, #7
 8003f26:	701a      	strb	r2, [r3, #0]
					break;
 8003f28:	e031      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						CPAP_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f001 fa3e 	bl	80053ac <CPAP_Mode_Packet_Data>
						Running_Mode        = Cpap;
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003f32:	220b      	movs	r2, #11
 8003f34:	701a      	strb	r2, [r3, #0]
					break;
 8003f36:	e02a      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						BIPAP_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff f8ef 	bl	800311c <BIPAP_Mode_Packet_Data>
						Running_Mode        = BiPap;
 8003f3e:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003f40:	220c      	movs	r2, #12
 8003f42:	701a      	strb	r2, [r3, #0]
					break;
 8003f44:	e023      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						APRV_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fd fe4c 	bl	8001be4 <APRV_Mode_Packet_Data>
						Running_Mode        = Aprv;
 8003f4c:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003f4e:	2204      	movs	r2, #4
 8003f50:	701a      	strb	r2, [r3, #0]
					break;
 8003f52:	e01c      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						Backup_Pc_Cmv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7fe fb3f 	bl	80025d8 <Backup_Pc_Cmv_Mode_Packet_Data>
						Current_Backup_Mode  = Backup_PCCMV_Mode;
 8003f5a:	4b2d      	ldr	r3, [pc, #180]	; (8004010 <Split_Mode_Parameter_Packets+0x348>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
					break;
 8003f60:	e015      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						Running_Mode        = Hfnc;
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003f64:	220d      	movs	r2, #13
 8003f66:	701a      	strb	r2, [r3, #0]
						 HFNC_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f003 fac1 	bl	80074f0 <HFNC_Packet_Data>
					     Current_Backup_Mode = No_Backup_Mode;
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <Split_Mode_Parameter_Packets+0x348>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
					break;
 8003f74:	e00b      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
						 Running_Mode        = Suction;
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <Split_Mode_Parameter_Packets+0x2d8>)
 8003f78:	220f      	movs	r2, #15
 8003f7a:	701a      	strb	r2, [r3, #0]
						 SUCTION_Packet_Data();
 8003f7c:	f00b fd6c 	bl	800fa58 <SUCTION_Packet_Data>
					     Current_Backup_Mode = No_Backup_Mode;
 8003f80:	4b23      	ldr	r3, [pc, #140]	; (8004010 <Split_Mode_Parameter_Packets+0x348>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
					break;
 8003f86:	e002      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
	    }
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <Split_Mode_Parameter_Packets+0x2c6>
				    break;
 8003f8c:	bf00      	nop
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20013d48 	.word	0x20013d48
 8003f9c:	20013d94 	.word	0x20013d94
 8003fa0:	20014238 	.word	0x20014238
 8003fa4:	20013f7c 	.word	0x20013f7c
 8003fa8:	200142f8 	.word	0x200142f8
 8003fac:	20013998 	.word	0x20013998
 8003fb0:	20014094 	.word	0x20014094
 8003fb4:	20013f24 	.word	0x20013f24
 8003fb8:	20013f80 	.word	0x20013f80
 8003fbc:	20013ba0 	.word	0x20013ba0
 8003fc0:	20013ca0 	.word	0x20013ca0
 8003fc4:	20014348 	.word	0x20014348
 8003fc8:	20013f58 	.word	0x20013f58
 8003fcc:	200142e0 	.word	0x200142e0
 8003fd0:	20013bb4 	.word	0x20013bb4
 8003fd4:	20013fa8 	.word	0x20013fa8
 8003fd8:	20013f20 	.word	0x20013f20
 8003fdc:	20014374 	.word	0x20014374
 8003fe0:	20013af0 	.word	0x20013af0
 8003fe4:	200141cc 	.word	0x200141cc
 8003fe8:	20013f38 	.word	0x20013f38
 8003fec:	20014148 	.word	0x20014148
 8003ff0:	20013bb8 	.word	0x20013bb8
 8003ff4:	2001423c 	.word	0x2001423c
 8003ff8:	20013ad8 	.word	0x20013ad8
 8003ffc:	40020400 	.word	0x40020400
 8004000:	40007400 	.word	0x40007400
 8004004:	200140c8 	.word	0x200140c8
 8004008:	40020c00 	.word	0x40020c00
 800400c:	200141c8 	.word	0x200141c8
 8004010:	20013f74 	.word	0x20013f74

08004014 <chksum8_2>:


uint8_t chksum8_2(const unsigned char *buff, size_t len)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	e00a      	b.n	800403a <chksum8_2+0x26>
        sum += *(buff++);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	3b01      	subs	r3, #1
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f1      	bne.n	8004024 <chksum8_2+0x10>
    return (uint8_t)sum;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	b2db      	uxtb	r3, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <Bluetooth_Packet_Data_Split>:


void Bluetooth_Packet_Data_Split(RECEIVE_GRAPH_PACKET  *Receive_Graph_Packet)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

	uint8_t RX_CRC8;
	RX_CRC8 = chksum8_2(&(Receive_Graph_Packet-> Control_Byte),( 16 ));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3303      	adds	r3, #3
 800405c:	2110      	movs	r1, #16
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ffd8 	bl	8004014 <chksum8_2>
 8004064:	4603      	mov	r3, r0
 8004066:	73fb      	strb	r3, [r7, #15]
	if(RX_CRC8 == (Receive_Graph_Packet ->CRC8) )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	7cdb      	ldrb	r3, [r3, #19]
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	429a      	cmp	r2, r3
 8004070:	d12b      	bne.n	80040ca <Bluetooth_Packet_Data_Split+0x7a>
	{
		switch(Receive_Graph_Packet->header)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	f245 422c 	movw	r2, #21548	; 0x542c
 800407c:	4293      	cmp	r3, r2
 800407e:	d020      	beq.n	80040c2 <Bluetooth_Packet_Data_Split+0x72>
 8004080:	f245 422c 	movw	r2, #21548	; 0x542c
 8004084:	4293      	cmp	r3, r2
 8004086:	dc4e      	bgt.n	8004126 <Bluetooth_Packet_Data_Split+0xd6>
 8004088:	f644 522b 	movw	r2, #19755	; 0x4d2b
 800408c:	4293      	cmp	r3, r2
 800408e:	d00c      	beq.n	80040aa <Bluetooth_Packet_Data_Split+0x5a>
 8004090:	f644 522b 	movw	r2, #19755	; 0x4d2b
 8004094:	4293      	cmp	r3, r2
 8004096:	dc46      	bgt.n	8004126 <Bluetooth_Packet_Data_Split+0xd6>
 8004098:	f244 122b 	movw	r2, #16683	; 0x412b
 800409c:	4293      	cmp	r3, r2
 800409e:	d008      	beq.n	80040b2 <Bluetooth_Packet_Data_Split+0x62>
 80040a0:	f244 622b 	movw	r2, #17963	; 0x462b
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d008      	beq.n	80040ba <Bluetooth_Packet_Data_Split+0x6a>
			break;
			case Receive_Calibration_Header:
				Split_Calibration_Packets((CALIBRATION_PACKET*) (Receive_Graph_Packet));
			break;
			default:
			break;
 80040a8:	e03d      	b.n	8004126 <Bluetooth_Packet_Data_Split+0xd6>
				Split_Mode_Parameter_Packets((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fe0c 	bl	8003cc8 <Split_Mode_Parameter_Packets>
			break;
 80040b0:	e03c      	b.n	800412c <Bluetooth_Packet_Data_Split+0xdc>
				Split_Alert_Parameter_Packets((ALERT_RANGE_PACKET*) (Receive_Graph_Packet));
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fc fef6 	bl	8000ea4 <Split_Alert_Parameter_Packets>
			break;
 80040b8:	e038      	b.n	800412c <Bluetooth_Packet_Data_Split+0xdc>
				Split_Nebuliser_Packets((NEBULISER_PACKET*) (Receive_Graph_Packet));
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f004 fe56 	bl	8008d6c <Split_Nebuliser_Packets>
			break;
 80040c0:	e034      	b.n	800412c <Bluetooth_Packet_Data_Split+0xdc>
				Split_Calibration_Packets((CALIBRATION_PACKET*) (Receive_Graph_Packet));
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fb1e 	bl	8004704 <Split_Calibration_Packets>
			break;
 80040c8:	e030      	b.n	800412c <Bluetooth_Packet_Data_Split+0xdc>
		}
	}
	else
	{

		Rearrange_Bluetooth_Data();
 80040ca:	f000 f835 	bl	8004138 <Rearrange_Bluetooth_Data>

		switch(Receive_Graph_Packet->header)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f245 422c 	movw	r2, #21548	; 0x542c
 80040d8:	4293      	cmp	r3, r2
 80040da:	d020      	beq.n	800411e <Bluetooth_Packet_Data_Split+0xce>
 80040dc:	f245 422c 	movw	r2, #21548	; 0x542c
 80040e0:	4293      	cmp	r3, r2
 80040e2:	dc22      	bgt.n	800412a <Bluetooth_Packet_Data_Split+0xda>
 80040e4:	f644 522b 	movw	r2, #19755	; 0x4d2b
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00c      	beq.n	8004106 <Bluetooth_Packet_Data_Split+0xb6>
 80040ec:	f644 522b 	movw	r2, #19755	; 0x4d2b
 80040f0:	4293      	cmp	r3, r2
 80040f2:	dc1a      	bgt.n	800412a <Bluetooth_Packet_Data_Split+0xda>
 80040f4:	f244 122b 	movw	r2, #16683	; 0x412b
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d008      	beq.n	800410e <Bluetooth_Packet_Data_Split+0xbe>
 80040fc:	f244 622b 	movw	r2, #17963	; 0x462b
 8004100:	4293      	cmp	r3, r2
 8004102:	d008      	beq.n	8004116 <Bluetooth_Packet_Data_Split+0xc6>
			break;
			case Receive_Calibration_Header:
				Split_Calibration_Packets((CALIBRATION_PACKET*) (Bluetooth_Parameter.UART_RX_BUF_CURR));
			break;
			default:
			break;
 8004104:	e011      	b.n	800412a <Bluetooth_Packet_Data_Split+0xda>
				Split_Mode_Parameter_Packets((RECEIVE_GRAPH_PACKET*) (Bluetooth_Parameter.UART_RX_BUF_CURR));
 8004106:	480b      	ldr	r0, [pc, #44]	; (8004134 <Bluetooth_Packet_Data_Split+0xe4>)
 8004108:	f7ff fdde 	bl	8003cc8 <Split_Mode_Parameter_Packets>
			break;
 800410c:	e00e      	b.n	800412c <Bluetooth_Packet_Data_Split+0xdc>
				Split_Alert_Parameter_Packets((ALERT_RANGE_PACKET*) (Bluetooth_Parameter.UART_RX_BUF_CURR));
 800410e:	4809      	ldr	r0, [pc, #36]	; (8004134 <Bluetooth_Packet_Data_Split+0xe4>)
 8004110:	f7fc fec8 	bl	8000ea4 <Split_Alert_Parameter_Packets>
			break;
 8004114:	e00a      	b.n	800412c <Bluetooth_Packet_Data_Split+0xdc>
				Split_Nebuliser_Packets((NEBULISER_PACKET*) (Bluetooth_Parameter.UART_RX_BUF_CURR));
 8004116:	4807      	ldr	r0, [pc, #28]	; (8004134 <Bluetooth_Packet_Data_Split+0xe4>)
 8004118:	f004 fe28 	bl	8008d6c <Split_Nebuliser_Packets>
			break;
 800411c:	e006      	b.n	800412c <Bluetooth_Packet_Data_Split+0xdc>
				Split_Calibration_Packets((CALIBRATION_PACKET*) (Bluetooth_Parameter.UART_RX_BUF_CURR));
 800411e:	4805      	ldr	r0, [pc, #20]	; (8004134 <Bluetooth_Packet_Data_Split+0xe4>)
 8004120:	f000 faf0 	bl	8004704 <Split_Calibration_Packets>
			break;
 8004124:	e002      	b.n	800412c <Bluetooth_Packet_Data_Split+0xdc>
			break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <Bluetooth_Packet_Data_Split+0xdc>
			break;
 800412a:	bf00      	nop
		}
	}


}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	2001396e 	.word	0x2001396e

08004138 <Rearrange_Bluetooth_Data>:



void Rearrange_Bluetooth_Data()
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0

	Received_APP_data_found=0;
 800413c:	4b60      	ldr	r3, [pc, #384]	; (80042c0 <Rearrange_Bluetooth_Data+0x188>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
	Received_index_Number=0;
 8004142:	4b60      	ldr	r3, [pc, #384]	; (80042c4 <Rearrange_Bluetooth_Data+0x18c>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]


	for(arrangecount=0;arrangecount<=19;arrangecount++)
 8004148:	4b5f      	ldr	r3, [pc, #380]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e060      	b.n	8004212 <Rearrange_Bluetooth_Data+0xda>
	{
		if(Bluetooth_Parameter.Bluetooth_RX_BUF[arrangecount]==83)
 8004150:	4b5d      	ldr	r3, [pc, #372]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a5d      	ldr	r2, [pc, #372]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 8004156:	4413      	add	r3, r2
 8004158:	789b      	ldrb	r3, [r3, #2]
 800415a:	2b53      	cmp	r3, #83	; 0x53
 800415c:	d10f      	bne.n	800417e <Rearrange_Bluetooth_Data+0x46>
		{
			if(Bluetooth_Parameter.Bluetooth_RX_BUF[arrangecount+1]==80)
 800415e:	4b5a      	ldr	r3, [pc, #360]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	4a59      	ldr	r2, [pc, #356]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 8004166:	4413      	add	r3, r2
 8004168:	789b      	ldrb	r3, [r3, #2]
 800416a:	2b50      	cmp	r3, #80	; 0x50
 800416c:	d14c      	bne.n	8004208 <Rearrange_Bluetooth_Data+0xd0>
			{
				Received_index_Number=arrangecount;
 800416e:	4b56      	ldr	r3, [pc, #344]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a54      	ldr	r2, [pc, #336]	; (80042c4 <Rearrange_Bluetooth_Data+0x18c>)
 8004174:	6013      	str	r3, [r2, #0]
				Received_APP_data_found=1;
 8004176:	4b52      	ldr	r3, [pc, #328]	; (80042c0 <Rearrange_Bluetooth_Data+0x188>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]
				break;
 800417c:	e04d      	b.n	800421a <Rearrange_Bluetooth_Data+0xe2>
			}
		}
		else if(Bluetooth_Parameter.Bluetooth_RX_BUF[arrangecount]==84)
 800417e:	4b52      	ldr	r3, [pc, #328]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a52      	ldr	r2, [pc, #328]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 8004184:	4413      	add	r3, r2
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	2b54      	cmp	r3, #84	; 0x54
 800418a:	d10f      	bne.n	80041ac <Rearrange_Bluetooth_Data+0x74>
		{
			if(Bluetooth_Parameter.Bluetooth_RX_BUF[arrangecount+1]==80)
 800418c:	4b4e      	ldr	r3, [pc, #312]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 8004194:	4413      	add	r3, r2
 8004196:	789b      	ldrb	r3, [r3, #2]
 8004198:	2b50      	cmp	r3, #80	; 0x50
 800419a:	d135      	bne.n	8004208 <Rearrange_Bluetooth_Data+0xd0>
			{
				Received_index_Number=arrangecount;
 800419c:	4b4a      	ldr	r3, [pc, #296]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a48      	ldr	r2, [pc, #288]	; (80042c4 <Rearrange_Bluetooth_Data+0x18c>)
 80041a2:	6013      	str	r3, [r2, #0]
				Received_APP_data_found=1;
 80041a4:	4b46      	ldr	r3, [pc, #280]	; (80042c0 <Rearrange_Bluetooth_Data+0x188>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
				break;
 80041aa:	e036      	b.n	800421a <Rearrange_Bluetooth_Data+0xe2>
			}
		}
		else if(Bluetooth_Parameter.Bluetooth_RX_BUF[arrangecount]==82)
 80041ac:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a46      	ldr	r2, [pc, #280]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 80041b2:	4413      	add	r3, r2
 80041b4:	789b      	ldrb	r3, [r3, #2]
 80041b6:	2b52      	cmp	r3, #82	; 0x52
 80041b8:	d10f      	bne.n	80041da <Rearrange_Bluetooth_Data+0xa2>
		{
			if(Bluetooth_Parameter.Bluetooth_RX_BUF[arrangecount+1]==80)
 80041ba:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3301      	adds	r3, #1
 80041c0:	4a42      	ldr	r2, [pc, #264]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 80041c2:	4413      	add	r3, r2
 80041c4:	789b      	ldrb	r3, [r3, #2]
 80041c6:	2b50      	cmp	r3, #80	; 0x50
 80041c8:	d11e      	bne.n	8004208 <Rearrange_Bluetooth_Data+0xd0>
			{
				Received_index_Number=arrangecount;
 80041ca:	4b3f      	ldr	r3, [pc, #252]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a3d      	ldr	r2, [pc, #244]	; (80042c4 <Rearrange_Bluetooth_Data+0x18c>)
 80041d0:	6013      	str	r3, [r2, #0]
				Received_APP_data_found=1;
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <Rearrange_Bluetooth_Data+0x188>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
				break;
 80041d8:	e01f      	b.n	800421a <Rearrange_Bluetooth_Data+0xe2>
			}
		}
		else if(Bluetooth_Parameter.Bluetooth_RX_BUF[arrangecount]==87)
 80041da:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3b      	ldr	r2, [pc, #236]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 80041e0:	4413      	add	r3, r2
 80041e2:	789b      	ldrb	r3, [r3, #2]
 80041e4:	2b57      	cmp	r3, #87	; 0x57
 80041e6:	d10f      	bne.n	8004208 <Rearrange_Bluetooth_Data+0xd0>
		{
			if(Bluetooth_Parameter.Bluetooth_RX_BUF[arrangecount+1]==80)
 80041e8:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	4a37      	ldr	r2, [pc, #220]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 80041f0:	4413      	add	r3, r2
 80041f2:	789b      	ldrb	r3, [r3, #2]
 80041f4:	2b50      	cmp	r3, #80	; 0x50
 80041f6:	d107      	bne.n	8004208 <Rearrange_Bluetooth_Data+0xd0>
			{
				Received_index_Number=arrangecount;
 80041f8:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a31      	ldr	r2, [pc, #196]	; (80042c4 <Rearrange_Bluetooth_Data+0x18c>)
 80041fe:	6013      	str	r3, [r2, #0]
				Received_APP_data_found=1;
 8004200:	4b2f      	ldr	r3, [pc, #188]	; (80042c0 <Rearrange_Bluetooth_Data+0x188>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
				break;
 8004206:	e008      	b.n	800421a <Rearrange_Bluetooth_Data+0xe2>
	for(arrangecount=0;arrangecount<=19;arrangecount++)
 8004208:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	4a2e      	ldr	r2, [pc, #184]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b13      	cmp	r3, #19
 8004218:	dd9a      	ble.n	8004150 <Rearrange_Bluetooth_Data+0x18>
			}
		}
	}

	if(Received_APP_data_found==1)
 800421a:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <Rearrange_Bluetooth_Data+0x188>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d130      	bne.n	8004284 <Rearrange_Bluetooth_Data+0x14c>
	{
		for(arrangecount=0;arrangecount<=19;arrangecount++)
 8004222:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e028      	b.n	800427c <Rearrange_Bluetooth_Data+0x144>
		{
			Received_index_number2  = Received_index_Number + arrangecount;
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <Rearrange_Bluetooth_Data+0x18c>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4413      	add	r3, r2
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <Rearrange_Bluetooth_Data+0x198>)
 8004236:	6013      	str	r3, [r2, #0]

			if(Received_index_number2>19)
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <Rearrange_Bluetooth_Data+0x198>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b13      	cmp	r3, #19
 800423e:	dd0d      	ble.n	800425c <Rearrange_Bluetooth_Data+0x124>
			{
				Bluetooth_Parameter.UART_RX_BUF_CURR[arrangecount]=Bluetooth_Parameter.Bluetooth_RX_BUF[Received_index_number2-20];
 8004240:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <Rearrange_Bluetooth_Data+0x198>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f1a3 0214 	sub.w	r2, r3, #20
 8004248:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	491f      	ldr	r1, [pc, #124]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 800424e:	440a      	add	r2, r1
 8004250:	7891      	ldrb	r1, [r2, #2]
 8004252:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 8004254:	4413      	add	r3, r2
 8004256:	460a      	mov	r2, r1
 8004258:	759a      	strb	r2, [r3, #22]
 800425a:	e00a      	b.n	8004272 <Rearrange_Bluetooth_Data+0x13a>
			}
			else
			{
				Bluetooth_Parameter.UART_RX_BUF_CURR[arrangecount]=Bluetooth_Parameter.Bluetooth_RX_BUF[Received_index_number2];
 800425c:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <Rearrange_Bluetooth_Data+0x198>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4919      	ldr	r1, [pc, #100]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 8004266:	440a      	add	r2, r1
 8004268:	7891      	ldrb	r1, [r2, #2]
 800426a:	4a18      	ldr	r2, [pc, #96]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 800426c:	4413      	add	r3, r2
 800426e:	460a      	mov	r2, r1
 8004270:	759a      	strb	r2, [r3, #22]
		for(arrangecount=0;arrangecount<=19;arrangecount++)
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b13      	cmp	r3, #19
 8004282:	ddd2      	ble.n	800422a <Rearrange_Bluetooth_Data+0xf2>

		}

	}

	for(arrangecount=0;arrangecount<=19;arrangecount++)
 8004284:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e00f      	b.n	80042ac <Rearrange_Bluetooth_Data+0x174>
	{
		Bluetooth_Parameter.Bluetooth_RX_BUF[arrangecount]  =  Bluetooth_Parameter.UART_RX_BUF_CURR[arrangecount];
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	490d      	ldr	r1, [pc, #52]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 8004296:	440a      	add	r2, r1
 8004298:	7d91      	ldrb	r1, [r2, #22]
 800429a:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <Rearrange_Bluetooth_Data+0x194>)
 800429c:	4413      	add	r3, r2
 800429e:	460a      	mov	r2, r1
 80042a0:	709a      	strb	r2, [r3, #2]
	for(arrangecount=0;arrangecount<=19;arrangecount++)
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <Rearrange_Bluetooth_Data+0x190>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b13      	cmp	r3, #19
 80042b2:	ddeb      	ble.n	800428c <Rearrange_Bluetooth_Data+0x154>
	}

}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	200142fc 	.word	0x200142fc
 80042c4:	20013f48 	.word	0x20013f48
 80042c8:	20014098 	.word	0x20014098
 80042cc:	20013958 	.word	0x20013958
 80042d0:	20014270 	.word	0x20014270

080042d4 <Bluetooth_Task>:

#include "Bluetooth_Graph.h"


void Bluetooth_Task(void *argument)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 switch(Bluetooth_Status)
 80042dc:	4b17      	ldr	r3, [pc, #92]	; (800433c <Bluetooth_Task+0x68>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d020      	beq.n	8004326 <Bluetooth_Task+0x52>
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	dc21      	bgt.n	800432c <Bluetooth_Task+0x58>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <Bluetooth_Task+0x1e>
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d008      	beq.n	8004302 <Bluetooth_Task+0x2e>
			  break;
		      case Bluetooth_Status_Send_Data:
		    	  Bluetooth_Data_Send();
			  break;
		      default:
		      break;
 80042f0:	e01c      	b.n	800432c <Bluetooth_Task+0x58>
		    	  Bluetooth_Status=Bluetooth_Status_Init;
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <Bluetooth_Task+0x68>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
		    	  Bluetooth_Parameter.Bluetooth_Transmit_Delay=Four_Second_Delay;
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <Bluetooth_Task+0x6c>)
 80042fa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80042fe:	801a      	strh	r2, [r3, #0]
		      break;
 8004300:	e015      	b.n	800432e <Bluetooth_Task+0x5a>
		    	  MX_USB_DEVICE_Init();
 8004302:	f01c febf 	bl	8021084 <MX_USB_DEVICE_Init>
		    	  UART6_Init();
 8004306:	f000 f821 	bl	800434c <UART6_Init>
		    	  UART5_Init();
 800430a:	f000 f849 	bl	80043a0 <UART5_Init>
		    	  HAL_UART_Receive_IT(&huart6,(uint8_t *) Bluetooth_Parameter.Bluetooth_RX_BUF, sizeof( Bluetooth_Parameter.Bluetooth_RX_BUF));
 800430e:	2214      	movs	r2, #20
 8004310:	490c      	ldr	r1, [pc, #48]	; (8004344 <Bluetooth_Task+0x70>)
 8004312:	480d      	ldr	r0, [pc, #52]	; (8004348 <Bluetooth_Task+0x74>)
 8004314:	f015 ff7a 	bl	801a20c <HAL_UART_Receive_IT>
		    	  Bluetooth_Status                             = Bluetooth_Status_Send_Data;
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <Bluetooth_Task+0x68>)
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]
		    	  Bluetooth_Parameter.Bluetooth_Transmit_Delay = Twenty_MilliSecond_Delay;
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <Bluetooth_Task+0x6c>)
 8004320:	2214      	movs	r2, #20
 8004322:	801a      	strh	r2, [r3, #0]
			  break;
 8004324:	e003      	b.n	800432e <Bluetooth_Task+0x5a>
		    	  Bluetooth_Data_Send();
 8004326:	f000 f8f1 	bl	800450c <Bluetooth_Data_Send>
			  break;
 800432a:	e000      	b.n	800432e <Bluetooth_Task+0x5a>
		      break;
 800432c:	bf00      	nop
		 }

		 vTaskDelay(Bluetooth_Parameter.Bluetooth_Transmit_Delay);
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <Bluetooth_Task+0x6c>)
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f01a ff7a 	bl	801f22c <vTaskDelay>
		 switch(Bluetooth_Status)
 8004338:	e7d0      	b.n	80042dc <Bluetooth_Task+0x8>
 800433a:	bf00      	nop
 800433c:	20013f28 	.word	0x20013f28
 8004340:	20013958 	.word	0x20013958
 8004344:	2001395a 	.word	0x2001395a
 8004348:	20014104 	.word	0x20014104

0800434c <UART6_Init>:
	}
}


void UART6_Init()
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
	huart6.Instance             = USART6;
 8004350:	4b11      	ldr	r3, [pc, #68]	; (8004398 <UART6_Init+0x4c>)
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <UART6_Init+0x50>)
 8004354:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate        = 57600;
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <UART6_Init+0x4c>)
 8004358:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800435c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength      = UART_WORDLENGTH_8B;
 800435e:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <UART6_Init+0x4c>)
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits        = UART_STOPBITS_1;
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <UART6_Init+0x4c>)
 8004366:	2200      	movs	r2, #0
 8004368:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity          = UART_PARITY_NONE;
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <UART6_Init+0x4c>)
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode            = UART_MODE_TX_RX;
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <UART6_Init+0x4c>)
 8004372:	220c      	movs	r2, #12
 8004374:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <UART6_Init+0x4c>)
 8004378:	2200      	movs	r2, #0
 800437a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling    = UART_OVERSAMPLING_16;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <UART6_Init+0x4c>)
 800437e:	2200      	movs	r2, #0
 8004380:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8004382:	4805      	ldr	r0, [pc, #20]	; (8004398 <UART6_Init+0x4c>)
 8004384:	f015 fe1e 	bl	8019fc4 <HAL_UART_Init>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <UART6_Init+0x46>
	{
		Error_Handler();
 800438e:	f00e ff81 	bl	8013294 <Error_Handler>
	}
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20014104 	.word	0x20014104
 800439c:	40011400 	.word	0x40011400

080043a0 <UART5_Init>:


void UART5_Init()
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
	huart5.Instance             = UART5;
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <UART5_Init+0x4c>)
 80043a6:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <UART5_Init+0x50>)
 80043a8:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate        = 57600;
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <UART5_Init+0x4c>)
 80043ac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80043b0:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength      = UART_WORDLENGTH_8B;
 80043b2:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <UART5_Init+0x4c>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits        = UART_STOPBITS_1;
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <UART5_Init+0x4c>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity          = UART_PARITY_NONE;
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <UART5_Init+0x4c>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode            = UART_MODE_TX_RX;
 80043c4:	4b09      	ldr	r3, [pc, #36]	; (80043ec <UART5_Init+0x4c>)
 80043c6:	220c      	movs	r2, #12
 80043c8:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 80043ca:	4b08      	ldr	r3, [pc, #32]	; (80043ec <UART5_Init+0x4c>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling    = UART_OVERSAMPLING_16;
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <UART5_Init+0x4c>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80043d6:	4805      	ldr	r0, [pc, #20]	; (80043ec <UART5_Init+0x4c>)
 80043d8:	f015 fdf4 	bl	8019fc4 <HAL_UART_Init>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <UART5_Init+0x46>
	{
	   Error_Handler();
 80043e2:	f00e ff57 	bl	8013294 <Error_Handler>
	 }
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20013d4c 	.word	0x20013d4c
 80043f0:	40005000 	.word	0x40005000

080043f4 <chksum8>:

uint8_t chksum8(const unsigned char *buff, size_t len)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e00a      	b.n	800441a <chksum8+0x26>
        sum += *(buff++);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	3b01      	subs	r3, #1
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f1      	bne.n	8004404 <chksum8+0x10>
    return (uint8_t)sum;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	b2db      	uxtb	r3, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <Bluetooth_Graph_Data_Send>:

void Bluetooth_Graph_Data_Send()
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
	if( ( !(Device_Control == RESUME))   )
 8004434:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <Bluetooth_Graph_Data_Send+0xb8>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <Bluetooth_Graph_Data_Send+0x20>
	{
		vol.Volume       = RESET;
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <Bluetooth_Graph_Data_Send+0xbc>)
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
		vol.Volume_max   = RESET;
 8004444:	4b29      	ldr	r3, [pc, #164]	; (80044ec <Bluetooth_Graph_Data_Send+0xbc>)
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
		vol.Volume_Val   = RESET;
 800444a:	4b28      	ldr	r3, [pc, #160]	; (80044ec <Bluetooth_Graph_Data_Send+0xbc>)
 800444c:	2200      	movs	r2, #0
 800444e:	605a      	str	r2, [r3, #4]
	}
	if(LAST_FLOW_TRIGGER != 0)
 8004450:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <Bluetooth_Graph_Data_Send+0xc0>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <Bluetooth_Graph_Data_Send+0x34>
	{
		Flow_Sensor_cal._Flow_Val=(int)LAST_FLOW_TRIGGER;
 8004458:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <Bluetooth_Graph_Data_Send+0xc0>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <Bluetooth_Graph_Data_Send+0xc4>)
 8004460:	661a      	str	r2, [r3, #96]	; 0x60
 8004462:	e009      	b.n	8004478 <Bluetooth_Graph_Data_Send+0x48>
	}
	else
	{
		Flow_Sensor_cal._Flow_Val=(int)Flow_Sensor_cal.Flow1;
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <Bluetooth_Graph_Data_Send+0xc4>)
 8004466:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	f7fc fb05 	bl	8000a7c <__aeabi_d2iz>
 8004472:	4603      	mov	r3, r0
 8004474:	4a1f      	ldr	r2, [pc, #124]	; (80044f4 <Bluetooth_Graph_Data_Send+0xc4>)
 8004476:	6613      	str	r3, [r2, #96]	; 0x60
	}
	Graph_Data._header          = Send_BlueTooth_Graph_Header;
 8004478:	4b1f      	ldr	r3, [pc, #124]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 800447a:	2200      	movs	r2, #0
 800447c:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	2200      	movs	r2, #0
 8004484:	f042 024c 	orr.w	r2, r2, #76	; 0x4c
 8004488:	705a      	strb	r2, [r3, #1]
	Graph_Data._length          = sizeof(Graph_Data)-3 ;
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 800448c:	2207      	movs	r2, #7
 800448e:	709a      	strb	r2, [r3, #2]
	Graph_Data._Pressure_Val    = Pressure_sensor.Pressure_Val;
 8004490:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <Bluetooth_Graph_Data_Send+0xcc>)
 8004492:	789a      	ldrb	r2, [r3, #2]
 8004494:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 8004496:	70da      	strb	r2, [r3, #3]
	Graph_Data._Flow_Val        = Flow_Sensor_cal._Flow_Val;
 8004498:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <Bluetooth_Graph_Data_Send+0xc4>)
 800449a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449c:	b21a      	sxth	r2, r3
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 80044a0:	809a      	strh	r2, [r3, #4]
	Graph_Data._Volume_Val      = vol.Volume_Val;
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <Bluetooth_Graph_Data_Send+0xbc>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	b21a      	sxth	r2, r3
 80044a8:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 80044aa:	80da      	strh	r2, [r3, #6]
	Graph_Data._Status          = BREATH_STATE;
 80044ac:	4b14      	ldr	r3, [pc, #80]	; (8004500 <Bluetooth_Graph_Data_Send+0xd0>)
 80044ae:	781a      	ldrb	r2, [r3, #0]
 80044b0:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 80044b2:	721a      	strb	r2, [r3, #8]
	Graph_Data._CRC8            = chksum8(&Graph_Data._Pressure_Val,(Graph_Data._length - 1));
 80044b4:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 80044b6:	789b      	ldrb	r3, [r3, #2]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	4619      	mov	r1, r3
 80044bc:	4811      	ldr	r0, [pc, #68]	; (8004504 <Bluetooth_Graph_Data_Send+0xd4>)
 80044be:	f7ff ff99 	bl	80043f4 <chksum8>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 80044c8:	725a      	strb	r2, [r3, #9]
	LAST_FLOW_TRIGGER           = 0;
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <Bluetooth_Graph_Data_Send+0xc0>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]

#ifdef	UART_COMMUNICATION_1
    HAL_UART_Transmit_IT(&huart6,(uint8_t*)&Graph_Data,sizeof(Graph_Data));
 80044d0:	220a      	movs	r2, #10
 80044d2:	4909      	ldr	r1, [pc, #36]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 80044d4:	480c      	ldr	r0, [pc, #48]	; (8004508 <Bluetooth_Graph_Data_Send+0xd8>)
 80044d6:	f015 fe54 	bl	801a182 <HAL_UART_Transmit_IT>
#endif
#ifdef	USB_COMMUNICATION_1
    CDC_Transmit_FS((uint8_t*)&Graph_Data,sizeof(Graph_Data));
 80044da:	210a      	movs	r1, #10
 80044dc:	4806      	ldr	r0, [pc, #24]	; (80044f8 <Bluetooth_Graph_Data_Send+0xc8>)
 80044de:	f01c fec1 	bl	8021264 <CDC_Transmit_FS>
		UART5_GRAPH_DATA_DEBUG();
#endif
#ifdef USB_GRAPH_DATA_DEBUG_1
		USB_GRAPH_DATA_DEBUG();
#endif
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20013d94 	.word	0x20013d94
 80044ec:	200140c8 	.word	0x200140c8
 80044f0:	20014240 	.word	0x20014240
 80044f4:	20013fb0 	.word	0x20013fb0
 80044f8:	20013b44 	.word	0x20013b44
 80044fc:	2001405c 	.word	0x2001405c
 8004500:	200140fd 	.word	0x200140fd
 8004504:	20013b47 	.word	0x20013b47
 8004508:	20014104 	.word	0x20014104

0800450c <Bluetooth_Data_Send>:
}



void Bluetooth_Data_Send()
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0


	switch (Send_Bluetooth_Data_Farme)
 8004510:	4b44      	ldr	r3, [pc, #272]	; (8004624 <Bluetooth_Data_Send+0x118>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b04      	cmp	r3, #4
 8004516:	f200 8083 	bhi.w	8004620 <Bluetooth_Data_Send+0x114>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <Bluetooth_Data_Send+0x14>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004619 	.word	0x08004619
 8004524:	080045bf 	.word	0x080045bf
 8004528:	080045b9 	.word	0x080045b9
 800452c:	0800455d 	.word	0x0800455d
 8004530:	08004535 	.word	0x08004535
	{

	    case SEND_FUELGAUGE_PARAMETER_FRAME:
	    	switch (Send_Frame_Fuel_Gauge)
 8004534:	4b3c      	ldr	r3, [pc, #240]	; (8004628 <Bluetooth_Data_Send+0x11c>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d002      	beq.n	8004542 <Bluetooth_Data_Send+0x36>
 800453c:	2b02      	cmp	r3, #2
 800453e:	d004      	beq.n	800454a <Bluetooth_Data_Send+0x3e>
 8004540:	e007      	b.n	8004552 <Bluetooth_Data_Send+0x46>
	    	{
	    	    case  First_Frame:
	    	    	Send_Frame_Fuel_Gauge = Second_Frame;
 8004542:	4b39      	ldr	r3, [pc, #228]	; (8004628 <Bluetooth_Data_Send+0x11c>)
 8004544:	2202      	movs	r2, #2
 8004546:	701a      	strb	r2, [r3, #0]
	    	    	//Fuel_Gauge_Parameter_List_1_Transmit();
	    	    break;
 8004548:	e007      	b.n	800455a <Bluetooth_Data_Send+0x4e>

	    	    case  Second_Frame:
	    	    	//Fuel_Gauge_Parameter_List_2_Transmit();
	    	    	Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 800454a:	4b36      	ldr	r3, [pc, #216]	; (8004624 <Bluetooth_Data_Send+0x118>)
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
	    	    break;
 8004550:	e003      	b.n	800455a <Bluetooth_Data_Send+0x4e>

     		    default:
     		    	Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 8004552:	4b34      	ldr	r3, [pc, #208]	; (8004624 <Bluetooth_Data_Send+0x118>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
     		    break;
 8004558:	bf00      	nop

	    	}
	    break;
 800455a:	e061      	b.n	8004620 <Bluetooth_Data_Send+0x114>
        case SEND_SAMPLED_PARAMETER_FRAME:
        		switch (Send_Frame)
 800455c:	4b33      	ldr	r3, [pc, #204]	; (800462c <Bluetooth_Data_Send+0x120>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	3b01      	subs	r3, #1
 8004562:	2b04      	cmp	r3, #4
 8004564:	d826      	bhi.n	80045b4 <Bluetooth_Data_Send+0xa8>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <Bluetooth_Data_Send+0x60>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	08004581 	.word	0x08004581
 8004570:	0800458d 	.word	0x0800458d
 8004574:	08004599 	.word	0x08004599
 8004578:	080045a5 	.word	0x080045a5
 800457c:	080045b1 	.word	0x080045b1
			    {
        		    case First_Frame:
        		    	Sampled_Parameter_List_1_Transmit();
 8004580:	f00b fb30 	bl	800fbe4 <Sampled_Parameter_List_1_Transmit>
        		    	//Send_Frame = Second_Frame;
        		    	Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 8004584:	4b27      	ldr	r3, [pc, #156]	; (8004624 <Bluetooth_Data_Send+0x118>)
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]
        		    break;
 800458a:	e014      	b.n	80045b6 <Bluetooth_Data_Send+0xaa>
        		    case Second_Frame:
        		    	Sampled_Parameter_List_2_Transmit();
 800458c:	f00b fb76 	bl	800fc7c <Sampled_Parameter_List_2_Transmit>
        		    	Send_Frame = Third_Frame;
 8004590:	4b26      	ldr	r3, [pc, #152]	; (800462c <Bluetooth_Data_Send+0x120>)
 8004592:	2203      	movs	r2, #3
 8004594:	701a      	strb	r2, [r3, #0]
        		    break;
 8004596:	e00e      	b.n	80045b6 <Bluetooth_Data_Send+0xaa>
        		    case Third_Frame:
        		    	Sampled_Parameter_List_3_Transmit();
 8004598:	f00b fbb8 	bl	800fd0c <Sampled_Parameter_List_3_Transmit>
        		    	Send_Frame = Fourth_Frame;
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <Bluetooth_Data_Send+0x120>)
 800459e:	2204      	movs	r2, #4
 80045a0:	701a      	strb	r2, [r3, #0]
        		    break;
 80045a2:	e008      	b.n	80045b6 <Bluetooth_Data_Send+0xaa>
        		    case Fourth_Frame:
        		    	Sampled_Parameter_List_4_Transmit();
 80045a4:	f00b fbfc 	bl	800fda0 <Sampled_Parameter_List_4_Transmit>
        		    	Send_Frame = Fifth_Frame;
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <Bluetooth_Data_Send+0x120>)
 80045aa:	2205      	movs	r2, #5
 80045ac:	701a      	strb	r2, [r3, #0]

        		    break;
 80045ae:	e002      	b.n	80045b6 <Bluetooth_Data_Send+0xaa>
        		    case Fifth_Frame:
        		    	Sampled_Parameter_List_5_Transmit();
 80045b0:	f00b fc3a 	bl	800fe28 <Sampled_Parameter_List_5_Transmit>
        		    	//Send_Bluetooth_Data_Farme = SEND_FUELGAUGE_PARAMETER_FRAME;

        		    default:
        		    	//Send_Bluetooth_Data_Farme = SEND_FUELGAUGE_PARAMETER_FRAME;
        		    break;
 80045b4:	bf00      	nop

			    }

        break;
 80045b6:	e033      	b.n	8004620 <Bluetooth_Data_Send+0x114>
	    case SEND_CALIBRATION_FRAME:
	    	Send_Calibrated_Packet();
 80045b8:	f000 f902 	bl	80047c0 <Send_Calibrated_Packet>
	    break;
 80045bc:	e030      	b.n	8004620 <Bluetooth_Data_Send+0x114>
		case SEND_ALERT_FRAME:
			switch (Apnea_Alert)
 80045be:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <Bluetooth_Data_Send+0x124>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d014      	beq.n	80045f0 <Bluetooth_Data_Send+0xe4>
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d129      	bne.n	800461e <Bluetooth_Data_Send+0x112>
			{

				  case APNEA_ALERT_HAPPEN:
					  SEND_ALERT_PACKET();
 80045ca:	f7fc fca7 	bl	8000f1c <SEND_ALERT_PACKET>
					  CLEAR_ALERT_BIT(SECOND_FRAME_UN,_ALERT_APNEA);
 80045ce:	4a19      	ldr	r2, [pc, #100]	; (8004634 <Bluetooth_Data_Send+0x128>)
 80045d0:	7913      	ldrb	r3, [r2, #4]
 80045d2:	f36f 0300 	bfc	r3, #0, #1
 80045d6:	7113      	strb	r3, [r2, #4]
					  CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 80045d8:	4a16      	ldr	r2, [pc, #88]	; (8004634 <Bluetooth_Data_Send+0x128>)
 80045da:	78d3      	ldrb	r3, [r2, #3]
 80045dc:	f36f 1304 	bfc	r3, #4, #1
 80045e0:	70d3      	strb	r3, [r2, #3]
					  Apnea_Alert=NO_APNEA_ALERT_HAPPEN;
 80045e2:	4b13      	ldr	r3, [pc, #76]	; (8004630 <Bluetooth_Data_Send+0x124>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
					  Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <Bluetooth_Data_Send+0x118>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
				  break;
 80045ee:	e012      	b.n	8004616 <Bluetooth_Data_Send+0x10a>
				  case NO_APNEA_ALERT_HAPPEN:
					switch (Mode)
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <Bluetooth_Data_Send+0x12c>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d105      	bne.n	8004604 <Bluetooth_Data_Send+0xf8>
					{
						case Idle:
							SEND_ALERT_PACKET();
 80045f8:	f7fc fc90 	bl	8000f1c <SEND_ALERT_PACKET>
							Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <Bluetooth_Data_Send+0x118>)
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
						break;
 8004602:	e007      	b.n	8004614 <Bluetooth_Data_Send+0x108>
						default:
							SEND_ALERT_PACKET();
 8004604:	f7fc fc8a 	bl	8000f1c <SEND_ALERT_PACKET>
							Clear_All_Alert_Bits();
 8004608:	f7fc fcb2 	bl	8000f70 <Clear_All_Alert_Bits>
							Send_Bluetooth_Data_Farme = SEND_SAMPLED_PARAMETER_FRAME;
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <Bluetooth_Data_Send+0x118>)
 800460e:	2203      	movs	r2, #3
 8004610:	701a      	strb	r2, [r3, #0]
						break;
 8004612:	bf00      	nop

					}
				  break;
 8004614:	bf00      	nop
			 }


		break;
 8004616:	e002      	b.n	800461e <Bluetooth_Data_Send+0x112>
		case SEND_GRAPH_FRAME:
			Bluetooth_Graph_Data_Send();
 8004618:	f7ff ff0a 	bl	8004430 <Bluetooth_Graph_Data_Send>
		break;
 800461c:	e000      	b.n	8004620 <Bluetooth_Data_Send+0x114>
		break;
 800461e:	bf00      	nop
	}
}
 8004620:	bf00      	nop
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20013d10 	.word	0x20013d10
 8004628:	200139a5 	.word	0x200139a5
 800462c:	20013eec 	.word	0x20013eec
 8004630:	200140c0 	.word	0x200140c0
 8004634:	20013b34 	.word	0x20013b34
 8004638:	20013d48 	.word	0x20013d48

0800463c <BlueTooth_Receiver_Task>:




void BlueTooth_Receiver_Task(void *argument)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xQueueReceive(Bluetooth_Receive, &(Bluetooth_Parameter.Bluetooth_RX_BUF), portMAX_DELAY) == pdTRUE)
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <BlueTooth_Receiver_Task+0x38>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	490a      	ldr	r1, [pc, #40]	; (8004678 <BlueTooth_Receiver_Task+0x3c>)
 800464e:	4618      	mov	r0, r3
 8004650:	f01a f856 	bl	801e700 <xQueueReceive>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d1f4      	bne.n	8004644 <BlueTooth_Receiver_Task+0x8>
		{
			Uart_Receive_Debug_Toggle_Led();
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <BlueTooth_Receiver_Task+0x40>)
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <BlueTooth_Receiver_Task+0x40>)
 8004660:	f083 0302 	eor.w	r3, r3, #2
 8004664:	6153      	str	r3, [r2, #20]
			vTaskResume(Bluetooth_data_Split_Handler);
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <BlueTooth_Receiver_Task+0x44>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f01a fed6 	bl	801f41c <vTaskResume>
		if (xQueueReceive(Bluetooth_Receive, &(Bluetooth_Parameter.Bluetooth_RX_BUF), portMAX_DELAY) == pdTRUE)
 8004670:	e7e8      	b.n	8004644 <BlueTooth_Receiver_Task+0x8>
 8004672:	bf00      	nop
 8004674:	20013af4 	.word	0x20013af4
 8004678:	2001395a 	.word	0x2001395a
 800467c:	40020c00 	.word	0x40020c00
 8004680:	20013f78 	.word	0x20013f78

08004684 <Bluetooth_data_split_Task>:
}



void Bluetooth_data_split_Task (void *argument)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Bluetooth_Packet_Data_Split((RECEIVE_GRAPH_PACKET*) (Bluetooth_Parameter.Bluetooth_RX_BUF));
 800468c:	4805      	ldr	r0, [pc, #20]	; (80046a4 <Bluetooth_data_split_Task+0x20>)
 800468e:	f7ff fcdf 	bl	8004050 <Bluetooth_Packet_Data_Split>
		Receive_Led_Signal = 1;
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <Bluetooth_data_split_Task+0x24>)
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
		vTaskSuspend(Bluetooth_data_Split_Handler);
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <Bluetooth_data_split_Task+0x28>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f01a fdf9 	bl	801f294 <vTaskSuspend>
		Bluetooth_Packet_Data_Split((RECEIVE_GRAPH_PACKET*) (Bluetooth_Parameter.Bluetooth_RX_BUF));
 80046a2:	e7f3      	b.n	800468c <Bluetooth_data_split_Task+0x8>
 80046a4:	2001395a 	.word	0x2001395a
 80046a8:	2001401c 	.word	0x2001401c
 80046ac:	20013f78 	.word	0x20013f78

080046b0 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart6,(uint8_t *) (Bluetooth_Parameter.Bluetooth_RX_BUF), sizeof( Bluetooth_Parameter.Bluetooth_RX_BUF));
 80046b8:	2214      	movs	r2, #20
 80046ba:	490e      	ldr	r1, [pc, #56]	; (80046f4 <HAL_UART_RxCpltCallback+0x44>)
 80046bc:	480e      	ldr	r0, [pc, #56]	; (80046f8 <HAL_UART_RxCpltCallback+0x48>)
 80046be:	f015 fda5 	bl	801a20c <HAL_UART_Receive_IT>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
	xQueueSendToFrontFromISR(Bluetooth_Receive, &(Bluetooth_Parameter.Bluetooth_RX_BUF), &xHigherPriorityTaskWoken);
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_UART_RxCpltCallback+0x4c>)
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f107 020c 	add.w	r2, r7, #12
 80046ce:	2301      	movs	r3, #1
 80046d0:	4908      	ldr	r1, [pc, #32]	; (80046f4 <HAL_UART_RxCpltCallback+0x44>)
 80046d2:	f019 ff79 	bl	801e5c8 <xQueueGenericSendFromISR>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_UART_RxCpltCallback+0x3c>
 80046dc:	4b08      	ldr	r3, [pc, #32]	; (8004700 <HAL_UART_RxCpltCallback+0x50>)
 80046de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	f3bf 8f6f 	isb	sy
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2001395a 	.word	0x2001395a
 80046f8:	20014104 	.word	0x20014104
 80046fc:	20013af4 	.word	0x20013af4
 8004700:	e000ed04 	.word	0xe000ed04

08004704 <Split_Calibration_Packets>:
int O2_calib_Count=0;
float O2_Sensor_Maximum_mv_Temp=9.2;
uint8_t Loop;

void Split_Calibration_Packets(CALIBRATION_PACKET * Receive_Graph_Packet)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	CALIBRARTION.BLOWER                  =  (Receive_Graph_Packet->BLOWER_CALIBRATION);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	78da      	ldrb	r2, [r3, #3]
 8004710:	4b18      	ldr	r3, [pc, #96]	; (8004774 <Split_Calibration_Packets+0x70>)
 8004712:	701a      	strb	r2, [r3, #0]
	CALIBRARTION.PRESSURE_SENSOR         =  (Receive_Graph_Packet->PRESSURE_SENSOR_CALIBRATION);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	791a      	ldrb	r2, [r3, #4]
 8004718:	4b16      	ldr	r3, [pc, #88]	; (8004774 <Split_Calibration_Packets+0x70>)
 800471a:	705a      	strb	r2, [r3, #1]
	CALIBRARTION.FLOW_SENSOR_7002        =  (Receive_Graph_Packet->FLOW_SENSOR_7002_CALIBRATION);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	795a      	ldrb	r2, [r3, #5]
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <Split_Calibration_Packets+0x70>)
 8004722:	709a      	strb	r2, [r3, #2]
	CALIBRARTION.VALVE_LEAK_TEST         =  (Receive_Graph_Packet->VALVE_LEAK_TEST_CALIBRATION);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	799a      	ldrb	r2, [r3, #6]
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <Split_Calibration_Packets+0x70>)
 800472a:	70da      	strb	r2, [r3, #3]
	CALIBRARTION.O2_CHECK                =  (Receive_Graph_Packet->O2_CHECK_CALIBRATION);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	79da      	ldrb	r2, [r3, #7]
 8004730:	4b10      	ldr	r3, [pc, #64]	; (8004774 <Split_Calibration_Packets+0x70>)
 8004732:	711a      	strb	r2, [r3, #4]
	CALIBRARTION.ALARAM_TEST             =  (Receive_Graph_Packet->LED_ALARAM_CALIBRATION);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	7a1a      	ldrb	r2, [r3, #8]
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <Split_Calibration_Packets+0x70>)
 800473a:	715a      	strb	r2, [r3, #5]
	CALIBRARTION.BATTERY_TEST            =  (Receive_Graph_Packet->BATTERY_CALIBRATION);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7a5a      	ldrb	r2, [r3, #9]
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <Split_Calibration_Packets+0x70>)
 8004742:	719a      	strb	r2, [r3, #6]
	CALIBRARTION.SENSOR_OFFSET_TEST      =  (Receive_Graph_Packet->SENSOR_OFFSET_CALIBRATION);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7a9a      	ldrb	r2, [r3, #10]
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <Split_Calibration_Packets+0x70>)
 800474a:	71da      	strb	r2, [r3, #7]
	CALIBRARTION.O2_SENSOR_100_PER_TEST  =  (Receive_Graph_Packet->O2_SENSOR_100_PER_CALIBRATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7ada      	ldrb	r2, [r3, #11]
 8004750:	4b08      	ldr	r3, [pc, #32]	; (8004774 <Split_Calibration_Packets+0x70>)
 8004752:	721a      	strb	r2, [r3, #8]


	Max_Flow = 0;
 8004754:	4b08      	ldr	r3, [pc, #32]	; (8004778 <Split_Calibration_Packets+0x74>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
	Min_Flow = 0;
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <Split_Calibration_Packets+0x78>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

	vTaskResume(Calibration_Handler);
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <Split_Calibration_Packets+0x7c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f01a fe59 	bl	801f41c <vTaskResume>
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20013d98 	.word	0x20013d98
 8004778:	20014064 	.word	0x20014064
 800477c:	20014090 	.word	0x20014090
 8004780:	20014044 	.word	0x20014044

08004784 <chksum8_cal>:



uint8_t chksum8_cal(const unsigned char *buff, size_t len)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	e00a      	b.n	80047aa <chksum8_cal+0x26>
        sum += *(buff++);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f1      	bne.n	8004794 <chksum8_cal+0x10>
    return (uint8_t)sum;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	b2db      	uxtb	r3, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <Send_Calibrated_Packet>:


void Send_Calibrated_Packet()
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0

	SEND_CALIBRATION_PACKET._header = Send_BlueTooth_Calibration_Header;
 80047c4:	4b12      	ldr	r3, [pc, #72]	; (8004810 <Send_Calibrated_Packet+0x50>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 80047d4:	705a      	strb	r2, [r3, #1]
	SEND_CALIBRATION_PACKET._length = 7;
 80047d6:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <Send_Calibrated_Packet+0x50>)
 80047d8:	2207      	movs	r2, #7
 80047da:	709a      	strb	r2, [r3, #2]
	SEND_CALIBRATION_PACKET._CRC8   = chksum8_cal((unsigned char*)&SEND_CALIBRATION_PACKET.PASS_FAIL,(SEND_CALIBRATION_PACKET._length-1));
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <Send_Calibrated_Packet+0x50>)
 80047de:	789b      	ldrb	r3, [r3, #2]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	4619      	mov	r1, r3
 80047e4:	480b      	ldr	r0, [pc, #44]	; (8004814 <Send_Calibrated_Packet+0x54>)
 80047e6:	f7ff ffcd 	bl	8004784 <chksum8_cal>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <Send_Calibrated_Packet+0x50>)
 80047f0:	725a      	strb	r2, [r3, #9]
#ifdef	UART_COMMUNICATION_1
	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&SEND_CALIBRATION_PACKET,sizeof(SEND_CALIBRATION_PACKET));
 80047f2:	220a      	movs	r2, #10
 80047f4:	4906      	ldr	r1, [pc, #24]	; (8004810 <Send_Calibrated_Packet+0x50>)
 80047f6:	4808      	ldr	r0, [pc, #32]	; (8004818 <Send_Calibrated_Packet+0x58>)
 80047f8:	f015 fcc3 	bl	801a182 <HAL_UART_Transmit_IT>
#endif
#ifdef	USB_COMMUNICATION_1
	CDC_Transmit_FS((uint8_t*)&SEND_CALIBRATION_PACKET,sizeof(SEND_CALIBRATION_PACKET));
 80047fc:	210a      	movs	r1, #10
 80047fe:	4804      	ldr	r0, [pc, #16]	; (8004810 <Send_Calibrated_Packet+0x50>)
 8004800:	f01c fd30 	bl	8021264 <CDC_Transmit_FS>
#endif
	Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <Send_Calibrated_Packet+0x5c>)
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]

}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	200139ac 	.word	0x200139ac
 8004814:	200139af 	.word	0x200139af
 8004818:	20014104 	.word	0x20014104
 800481c:	20013d10 	.word	0x20013d10

08004820 <CALIBRATION_Task>:

void CALIBRATION_Task(void *argument)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

	while(1)
	{

		if(CALIBRARTION.BLOWER  == START )
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <CALIBRATION_Task+0xa0>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d102      	bne.n	8004836 <CALIBRATION_Task+0x16>
		{
			Blower_Calibration();
 8004830:	f000 f84c 	bl	80048cc <Blower_Calibration>
 8004834:	e03f      	b.n	80048b6 <CALIBRATION_Task+0x96>
		}
		else if(CALIBRARTION.PRESSURE_SENSOR == START)
 8004836:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <CALIBRATION_Task+0xa0>)
 8004838:	785b      	ldrb	r3, [r3, #1]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d102      	bne.n	8004844 <CALIBRATION_Task+0x24>
		{
			Pressure_Sensor_Calibration();
 800483e:	f000 f8d3 	bl	80049e8 <Pressure_Sensor_Calibration>
 8004842:	e038      	b.n	80048b6 <CALIBRATION_Task+0x96>
		}
		else if(CALIBRARTION.FLOW_SENSOR_7002 == START)
 8004844:	4b1e      	ldr	r3, [pc, #120]	; (80048c0 <CALIBRATION_Task+0xa0>)
 8004846:	789b      	ldrb	r3, [r3, #2]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d102      	bne.n	8004852 <CALIBRATION_Task+0x32>
		{
			Flow_Sensor_7002_Calibration();
 800484c:	f000 f962 	bl	8004b14 <Flow_Sensor_7002_Calibration>
 8004850:	e031      	b.n	80048b6 <CALIBRATION_Task+0x96>
		}
		else if(CALIBRARTION.VALVE_LEAK_TEST == START)
 8004852:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <CALIBRATION_Task+0xa0>)
 8004854:	78db      	ldrb	r3, [r3, #3]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d102      	bne.n	8004860 <CALIBRATION_Task+0x40>
		{
			Expiratory_Valve_Leak_Calibration();
 800485a:	f000 f9e1 	bl	8004c20 <Expiratory_Valve_Leak_Calibration>
 800485e:	e02a      	b.n	80048b6 <CALIBRATION_Task+0x96>
		}
		else if(CALIBRARTION.O2_CHECK == START)
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <CALIBRATION_Task+0xa0>)
 8004862:	791b      	ldrb	r3, [r3, #4]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d102      	bne.n	800486e <CALIBRATION_Task+0x4e>
		{
			Oxygen_blending_Calibration();
 8004868:	f000 fac8 	bl	8004dfc <Oxygen_blending_Calibration>
 800486c:	e023      	b.n	80048b6 <CALIBRATION_Task+0x96>
		}
		else if(CALIBRARTION.ALARAM_TEST == START)
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <CALIBRATION_Task+0xa0>)
 8004870:	795b      	ldrb	r3, [r3, #5]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d102      	bne.n	800487c <CALIBRATION_Task+0x5c>
		{
			Led_Buzzer_Calibration();
 8004876:	f000 fbd1 	bl	800501c <Led_Buzzer_Calibration>
 800487a:	e01c      	b.n	80048b6 <CALIBRATION_Task+0x96>
		}
		else if(CALIBRARTION.BATTERY_TEST == START)
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <CALIBRATION_Task+0xa0>)
 800487e:	799b      	ldrb	r3, [r3, #6]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d102      	bne.n	800488a <CALIBRATION_Task+0x6a>
		{
			Battery_Calibration();
 8004884:	f000 fc66 	bl	8005154 <Battery_Calibration>
 8004888:	e015      	b.n	80048b6 <CALIBRATION_Task+0x96>
		}
		else if(CALIBRARTION.SENSOR_OFFSET_TEST == START)
 800488a:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <CALIBRATION_Task+0xa0>)
 800488c:	79db      	ldrb	r3, [r3, #7]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d102      	bne.n	8004898 <CALIBRATION_Task+0x78>
		{
			Sensor_Voltage_Transmit();
 8004892:	f000 fcb3 	bl	80051fc <Sensor_Voltage_Transmit>
 8004896:	e00e      	b.n	80048b6 <CALIBRATION_Task+0x96>
		}
		else if(CALIBRARTION.O2_SENSOR_100_PER_TEST == START)
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <CALIBRATION_Task+0xa0>)
 800489a:	7a1b      	ldrb	r3, [r3, #8]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10a      	bne.n	80048b6 <CALIBRATION_Task+0x96>
		{
			 Oxygen_Parameter.OXYGEN_Event_Count     = 1;
 80048a0:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <CALIBRATION_Task+0xa4>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
			 Oxygen_Parameter.OXYGEN_Cumulative_Val  = 1;
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <CALIBRATION_Task+0xa4>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	605a      	str	r2, [r3, #4]
			 vTaskResume(O2_Calibration_Handler);
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <CALIBRATION_Task+0xa8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f01a fdb3 	bl	801f41c <vTaskResume>
		}


		vTaskDelay(2);
 80048b6:	2002      	movs	r0, #2
 80048b8:	f01a fcb8 	bl	801f22c <vTaskDelay>
		if(CALIBRARTION.BLOWER  == START )
 80048bc:	e7b4      	b.n	8004828 <CALIBRATION_Task+0x8>
 80048be:	bf00      	nop
 80048c0:	20013d98 	.word	0x20013d98
 80048c4:	2001409c 	.word	0x2001409c
 80048c8:	20013ef0 	.word	0x20013ef0

080048cc <Blower_Calibration>:
}



void Blower_Calibration()
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0

	Count++;
 80048d0:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <Blower_Calibration+0xf4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	4a3a      	ldr	r2, [pc, #232]	; (80049c0 <Blower_Calibration+0xf4>)
 80048d8:	6013      	str	r3, [r2, #0]
    Blower_ON();
 80048da:	4b3a      	ldr	r3, [pc, #232]	; (80049c4 <Blower_Calibration+0xf8>)
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	4a39      	ldr	r2, [pc, #228]	; (80049c4 <Blower_Calibration+0xf8>)
 80048e0:	f043 0320 	orr.w	r3, r3, #32
 80048e4:	6153      	str	r3, [r2, #20]
    ExpValve_CLOSE();
 80048e6:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <Blower_Calibration+0xfc>)
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4a37      	ldr	r2, [pc, #220]	; (80049c8 <Blower_Calibration+0xfc>)
 80048ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048f0:	6153      	str	r3, [r2, #20]
	Blower_Signal(4095);
 80048f2:	4b36      	ldr	r3, [pc, #216]	; (80049cc <Blower_Calibration+0x100>)
 80048f4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80048f8:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);             // start blower Rpm
 80048fa:	2100      	movs	r1, #0
 80048fc:	4834      	ldr	r0, [pc, #208]	; (80049d0 <Blower_Calibration+0x104>)
 80048fe:	f014 f855 	bl	80189ac <HAL_TIM_IC_Start_IT>
	SEND_CALIBRATION_PACKET.RESULT              = Pressure_sensor.Pressure_Val;
 8004902:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <Blower_Calibration+0x108>)
 8004904:	789b      	ldrb	r3, [r3, #2]
 8004906:	b29a      	uxth	r2, r3
 8004908:	4b33      	ldr	r3, [pc, #204]	; (80049d8 <Blower_Calibration+0x10c>)
 800490a:	80da      	strh	r2, [r3, #6]
	 if(Count > 1500)
 800490c:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <Blower_Calibration+0xf4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004914:	4293      	cmp	r3, r2
 8004916:	dd50      	ble.n	80049ba <Blower_Calibration+0xee>
				vTaskDelay(Twenty_MilliSecond_Delay);
				Count                                       = RESET;
				CALIBRARTION.BLOWER                         = STOP;
				vTaskSuspend(Calibration_Handler);
		 }*/
		 if ((Pressure_sensor.Pressure_Val >=60)  )
 8004918:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <Blower_Calibration+0x108>)
 800491a:	789b      	ldrb	r3, [r3, #2]
 800491c:	2b3b      	cmp	r3, #59	; 0x3b
 800491e:	d926      	bls.n	800496e <Blower_Calibration+0xa2>
		 {
				SEND_CALIBRATION_PACKET.RESULT              = Pressure_sensor.Pressure_Val ;
 8004920:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <Blower_Calibration+0x108>)
 8004922:	789b      	ldrb	r3, [r3, #2]
 8004924:	b29a      	uxth	r2, r3
 8004926:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <Blower_Calibration+0x10c>)
 8004928:	80da      	strh	r2, [r3, #6]
				Blower_Signal(0);
 800492a:	4b28      	ldr	r3, [pc, #160]	; (80049cc <Blower_Calibration+0x100>)
 800492c:	2200      	movs	r2, #0
 800492e:	609a      	str	r2, [r3, #8]
				ExpValve_OPEN();
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <Blower_Calibration+0xfc>)
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <Blower_Calibration+0xfc>)
 8004936:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800493a:	6153      	str	r3, [r2, #20]
				vTaskDelay(2000);
 800493c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004940:	f01a fc74 	bl	801f22c <vTaskDelay>
				SEND_CALIBRATION_PACKET.PASS_FAIL              = CALIBRATION_PASS ;
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <Blower_Calibration+0x10c>)
 8004946:	22ff      	movs	r2, #255	; 0xff
 8004948:	70da      	strb	r2, [r3, #3]
				Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <Blower_Calibration+0x110>)
 800494c:	2202      	movs	r2, #2
 800494e:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Twenty_MilliSecond_Delay);
 8004950:	2014      	movs	r0, #20
 8004952:	f01a fc6b 	bl	801f22c <vTaskDelay>
				Count                                       = RESET;
 8004956:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <Blower_Calibration+0xf4>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
				CALIBRARTION.BLOWER                         = STOP;
 800495c:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <Blower_Calibration+0x114>)
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
				vTaskSuspend(Calibration_Handler);
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <Blower_Calibration+0x118>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f01a fc94 	bl	801f294 <vTaskSuspend>
				CALIBRARTION.BLOWER                         = STOP;
				vTaskSuspend(Calibration_Handler);
		 }

	  }
}
 800496c:	e025      	b.n	80049ba <Blower_Calibration+0xee>
				SEND_CALIBRATION_PACKET.RESULT              = Pressure_sensor.Pressure_Val ;
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <Blower_Calibration+0x108>)
 8004970:	789b      	ldrb	r3, [r3, #2]
 8004972:	b29a      	uxth	r2, r3
 8004974:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <Blower_Calibration+0x10c>)
 8004976:	80da      	strh	r2, [r3, #6]
				Blower_Signal(0);
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <Blower_Calibration+0x100>)
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
				ExpValve_OPEN();
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <Blower_Calibration+0xfc>)
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <Blower_Calibration+0xfc>)
 8004984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004988:	6153      	str	r3, [r2, #20]
				vTaskDelay(2000);
 800498a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800498e:	f01a fc4d 	bl	801f22c <vTaskDelay>
				SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <Blower_Calibration+0x10c>)
 8004994:	2200      	movs	r2, #0
 8004996:	70da      	strb	r2, [r3, #3]
				Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <Blower_Calibration+0x110>)
 800499a:	2202      	movs	r2, #2
 800499c:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Twenty_MilliSecond_Delay);
 800499e:	2014      	movs	r0, #20
 80049a0:	f01a fc44 	bl	801f22c <vTaskDelay>
				Count                                       = RESET;
 80049a4:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <Blower_Calibration+0xf4>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
				CALIBRARTION.BLOWER                         = STOP;
 80049aa:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <Blower_Calibration+0x114>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
				vTaskSuspend(Calibration_Handler);
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <Blower_Calibration+0x118>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f01a fc6d 	bl	801f294 <vTaskSuspend>
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200001d4 	.word	0x200001d4
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40020400 	.word	0x40020400
 80049cc:	40007400 	.word	0x40007400
 80049d0:	20013cac 	.word	0x20013cac
 80049d4:	2001405c 	.word	0x2001405c
 80049d8:	200139ac 	.word	0x200139ac
 80049dc:	20013d10 	.word	0x20013d10
 80049e0:	20013d98 	.word	0x20013d98
 80049e4:	20014044 	.word	0x20014044

080049e8 <Pressure_Sensor_Calibration>:



void Pressure_Sensor_Calibration()
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
	if(Pressure_sensor.Pressure_Val<60)
 80049ec:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <Pressure_Sensor_Calibration+0x104>)
 80049ee:	789b      	ldrb	r3, [r3, #2]
 80049f0:	2b3b      	cmp	r3, #59	; 0x3b
 80049f2:	d81a      	bhi.n	8004a2a <Pressure_Sensor_Calibration+0x42>
	{
		Count++;
 80049f4:	4b3e      	ldr	r3, [pc, #248]	; (8004af0 <Pressure_Sensor_Calibration+0x108>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	4a3d      	ldr	r2, [pc, #244]	; (8004af0 <Pressure_Sensor_Calibration+0x108>)
 80049fc:	6013      	str	r3, [r2, #0]
		Blower_ON();
 80049fe:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <Pressure_Sensor_Calibration+0x10c>)
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <Pressure_Sensor_Calibration+0x10c>)
 8004a04:	f043 0320 	orr.w	r3, r3, #32
 8004a08:	6153      	str	r3, [r2, #20]
		ExpValve_CLOSE();
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <Pressure_Sensor_Calibration+0x110>)
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <Pressure_Sensor_Calibration+0x110>)
 8004a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a14:	6153      	str	r3, [r2, #20]
		Blower_Signal(4095);
 8004a16:	4b39      	ldr	r3, [pc, #228]	; (8004afc <Pressure_Sensor_Calibration+0x114>)
 8004a18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004a1c:	609a      	str	r2, [r3, #8]
		SEND_CALIBRATION_PACKET.RESULT              = Pressure_sensor.Pressure_Val;
 8004a1e:	4b33      	ldr	r3, [pc, #204]	; (8004aec <Pressure_Sensor_Calibration+0x104>)
 8004a20:	789b      	ldrb	r3, [r3, #2]
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <Pressure_Sensor_Calibration+0x118>)
 8004a26:	80da      	strh	r2, [r3, #6]
 8004a28:	e02d      	b.n	8004a86 <Pressure_Sensor_Calibration+0x9e>
	}
	else
	{
		if ((Pressure_sensor.Pressure_Val >=60) )
 8004a2a:	4b30      	ldr	r3, [pc, #192]	; (8004aec <Pressure_Sensor_Calibration+0x104>)
 8004a2c:	789b      	ldrb	r3, [r3, #2]
 8004a2e:	2b3b      	cmp	r3, #59	; 0x3b
 8004a30:	d929      	bls.n	8004a86 <Pressure_Sensor_Calibration+0x9e>
		{
		       HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);             // stop blower Rpm
 8004a32:	2100      	movs	r1, #0
 8004a34:	4833      	ldr	r0, [pc, #204]	; (8004b04 <Pressure_Sensor_Calibration+0x11c>)
 8004a36:	f014 f8e1 	bl	8018bfc <HAL_TIM_IC_Stop_IT>
				SEND_CALIBRATION_PACKET.RESULT              = Pressure_sensor.Pressure_Val ;
 8004a3a:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <Pressure_Sensor_Calibration+0x104>)
 8004a3c:	789b      	ldrb	r3, [r3, #2]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <Pressure_Sensor_Calibration+0x118>)
 8004a42:	80da      	strh	r2, [r3, #6]
				Blower_Signal(0);
 8004a44:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <Pressure_Sensor_Calibration+0x114>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
				ExpValve_OPEN();
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <Pressure_Sensor_Calibration+0x110>)
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <Pressure_Sensor_Calibration+0x110>)
 8004a50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a54:	6153      	str	r3, [r2, #20]
				vTaskDelay(2000);
 8004a56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004a5a:	f01a fbe7 	bl	801f22c <vTaskDelay>
				SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <Pressure_Sensor_Calibration+0x118>)
 8004a60:	22ff      	movs	r2, #255	; 0xff
 8004a62:	70da      	strb	r2, [r3, #3]
				Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8004a64:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <Pressure_Sensor_Calibration+0x120>)
 8004a66:	2202      	movs	r2, #2
 8004a68:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Twenty_MilliSecond_Delay);
 8004a6a:	2014      	movs	r0, #20
 8004a6c:	f01a fbde 	bl	801f22c <vTaskDelay>
				Count                                       = RESET;
 8004a70:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <Pressure_Sensor_Calibration+0x108>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
				CALIBRARTION.PRESSURE_SENSOR                = STOP;
 8004a76:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <Pressure_Sensor_Calibration+0x124>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	705a      	strb	r2, [r3, #1]
				vTaskSuspend(Calibration_Handler);
 8004a7c:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <Pressure_Sensor_Calibration+0x128>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f01a fc07 	bl	801f294 <vTaskSuspend>
			Count                                       = RESET;
			CALIBRARTION.PRESSURE_SENSOR                = STOP;
			vTaskSuspend(Calibration_Handler);
		}*/
	 }
	 if(Count > 1500)
 8004a86:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <Pressure_Sensor_Calibration+0x108>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	dd29      	ble.n	8004ae6 <Pressure_Sensor_Calibration+0xfe>
	 {
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);             // stop blower Rpm
 8004a92:	2100      	movs	r1, #0
 8004a94:	481b      	ldr	r0, [pc, #108]	; (8004b04 <Pressure_Sensor_Calibration+0x11c>)
 8004a96:	f014 f8b1 	bl	8018bfc <HAL_TIM_IC_Stop_IT>
		SEND_CALIBRATION_PACKET.RESULT              = Pressure_sensor.Pressure_Val ;
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <Pressure_Sensor_Calibration+0x104>)
 8004a9c:	789b      	ldrb	r3, [r3, #2]
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <Pressure_Sensor_Calibration+0x118>)
 8004aa2:	80da      	strh	r2, [r3, #6]
		Blower_Signal(0);
 8004aa4:	4b15      	ldr	r3, [pc, #84]	; (8004afc <Pressure_Sensor_Calibration+0x114>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	609a      	str	r2, [r3, #8]
		ExpValve_OPEN();
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <Pressure_Sensor_Calibration+0x110>)
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <Pressure_Sensor_Calibration+0x110>)
 8004ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab4:	6153      	str	r3, [r2, #20]
		vTaskDelay(2000);
 8004ab6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004aba:	f01a fbb7 	bl	801f22c <vTaskDelay>
		SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <Pressure_Sensor_Calibration+0x118>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	70da      	strb	r2, [r3, #3]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8004ac4:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <Pressure_Sensor_Calibration+0x120>)
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 8004aca:	2014      	movs	r0, #20
 8004acc:	f01a fbae 	bl	801f22c <vTaskDelay>
		Count                                       = RESET;
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <Pressure_Sensor_Calibration+0x108>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
		CALIBRARTION.PRESSURE_SENSOR                = STOP;
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <Pressure_Sensor_Calibration+0x124>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	705a      	strb	r2, [r3, #1]
		vTaskSuspend(Calibration_Handler);
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <Pressure_Sensor_Calibration+0x128>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f01a fbd7 	bl	801f294 <vTaskSuspend>
	  }
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	2001405c 	.word	0x2001405c
 8004af0:	200001d4 	.word	0x200001d4
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40020400 	.word	0x40020400
 8004afc:	40007400 	.word	0x40007400
 8004b00:	200139ac 	.word	0x200139ac
 8004b04:	20013cac 	.word	0x20013cac
 8004b08:	20013d10 	.word	0x20013d10
 8004b0c:	20013d98 	.word	0x20013d98
 8004b10:	20014044 	.word	0x20014044

08004b14 <Flow_Sensor_7002_Calibration>:


void Flow_Sensor_7002_Calibration()
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	  if (Flow_Sensor_cal._Flow_Val < 20  )
 8004b18:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <Flow_Sensor_7002_Calibration+0xe8>)
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	2b13      	cmp	r3, #19
 8004b1e:	dc1a      	bgt.n	8004b56 <Flow_Sensor_7002_Calibration+0x42>
	  {
		  Count++;
 8004b20:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <Flow_Sensor_7002_Calibration+0xec>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3301      	adds	r3, #1
 8004b26:	4a36      	ldr	r2, [pc, #216]	; (8004c00 <Flow_Sensor_7002_Calibration+0xec>)
 8004b28:	6013      	str	r3, [r2, #0]
		  Blower_ON();
 8004b2a:	4b36      	ldr	r3, [pc, #216]	; (8004c04 <Flow_Sensor_7002_Calibration+0xf0>)
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	4a35      	ldr	r2, [pc, #212]	; (8004c04 <Flow_Sensor_7002_Calibration+0xf0>)
 8004b30:	f043 0320 	orr.w	r3, r3, #32
 8004b34:	6153      	str	r3, [r2, #20]
		  ExpValve_OPEN();
 8004b36:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <Flow_Sensor_7002_Calibration+0xf4>)
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	4a33      	ldr	r2, [pc, #204]	; (8004c08 <Flow_Sensor_7002_Calibration+0xf4>)
 8004b3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b40:	6153      	str	r3, [r2, #20]
		  Blower_Signal(2000);
 8004b42:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <Flow_Sensor_7002_Calibration+0xf8>)
 8004b44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b48:	609a      	str	r2, [r3, #8]
		  SEND_CALIBRATION_PACKET.RESULT              = Flow_Sensor_cal._Flow_Val ;
 8004b4a:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <Flow_Sensor_7002_Calibration+0xe8>)
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <Flow_Sensor_7002_Calibration+0xfc>)
 8004b52:	80da      	strh	r2, [r3, #6]
 8004b54:	e025      	b.n	8004ba2 <Flow_Sensor_7002_Calibration+0x8e>
	  }
	  else
	  {
		   SEND_CALIBRATION_PACKET.RESULT              = Flow_Sensor_cal._Flow_Val ;
 8004b56:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <Flow_Sensor_7002_Calibration+0xe8>)
 8004b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <Flow_Sensor_7002_Calibration+0xfc>)
 8004b5e:	80da      	strh	r2, [r3, #6]
		   Blower_Signal(0);
 8004b60:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <Flow_Sensor_7002_Calibration+0xf8>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
		   ExpValve_OPEN();
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <Flow_Sensor_7002_Calibration+0xf4>)
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	4a27      	ldr	r2, [pc, #156]	; (8004c08 <Flow_Sensor_7002_Calibration+0xf4>)
 8004b6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b70:	6153      	str	r3, [r2, #20]
		   vTaskDelay(2000);
 8004b72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004b76:	f01a fb59 	bl	801f22c <vTaskDelay>
		   SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8004b7a:	4b25      	ldr	r3, [pc, #148]	; (8004c10 <Flow_Sensor_7002_Calibration+0xfc>)
 8004b7c:	22ff      	movs	r2, #255	; 0xff
 8004b7e:	70da      	strb	r2, [r3, #3]
		   Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8004b80:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <Flow_Sensor_7002_Calibration+0x100>)
 8004b82:	2202      	movs	r2, #2
 8004b84:	701a      	strb	r2, [r3, #0]
		   vTaskDelay(Twenty_MilliSecond_Delay);
 8004b86:	2014      	movs	r0, #20
 8004b88:	f01a fb50 	bl	801f22c <vTaskDelay>
		   Count                                       = RESET;
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <Flow_Sensor_7002_Calibration+0xec>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
		   CALIBRARTION.FLOW_SENSOR_7002               = STOP;
 8004b92:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <Flow_Sensor_7002_Calibration+0x104>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	709a      	strb	r2, [r3, #2]
		   vTaskSuspend(Calibration_Handler);
 8004b98:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <Flow_Sensor_7002_Calibration+0x108>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f01a fb79 	bl	801f294 <vTaskSuspend>
	   }
	   if (Count > 4000)
 8004ba2:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <Flow_Sensor_7002_Calibration+0xec>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004baa:	dd25      	ble.n	8004bf8 <Flow_Sensor_7002_Calibration+0xe4>
	   {
			SEND_CALIBRATION_PACKET.RESULT                = Flow_Sensor_cal._Flow_Val ;
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <Flow_Sensor_7002_Calibration+0xe8>)
 8004bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <Flow_Sensor_7002_Calibration+0xfc>)
 8004bb4:	80da      	strh	r2, [r3, #6]
			Blower_Signal(0);
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <Flow_Sensor_7002_Calibration+0xf8>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	609a      	str	r2, [r3, #8]
			ExpValve_OPEN();
 8004bbc:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <Flow_Sensor_7002_Calibration+0xf4>)
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	4a11      	ldr	r2, [pc, #68]	; (8004c08 <Flow_Sensor_7002_Calibration+0xf4>)
 8004bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bc6:	6153      	str	r3, [r2, #20]
			vTaskDelay(2000);
 8004bc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004bcc:	f01a fb2e 	bl	801f22c <vTaskDelay>
			SEND_CALIBRATION_PACKET.PASS_FAIL  = CALIBRATION_FAIL ;
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <Flow_Sensor_7002_Calibration+0xfc>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	70da      	strb	r2, [r3, #3]
			Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <Flow_Sensor_7002_Calibration+0x100>)
 8004bd8:	2202      	movs	r2, #2
 8004bda:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Twenty_MilliSecond_Delay);
 8004bdc:	2014      	movs	r0, #20
 8004bde:	f01a fb25 	bl	801f22c <vTaskDelay>
			Count                                       = RESET;
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <Flow_Sensor_7002_Calibration+0xec>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
			CALIBRARTION.FLOW_SENSOR_7002               = STOP;
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <Flow_Sensor_7002_Calibration+0x104>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	709a      	strb	r2, [r3, #2]
			vTaskSuspend(Calibration_Handler);
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <Flow_Sensor_7002_Calibration+0x108>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f01a fb4e 	bl	801f294 <vTaskSuspend>
		}
}
 8004bf8:	bf00      	nop
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20013fb0 	.word	0x20013fb0
 8004c00:	200001d4 	.word	0x200001d4
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40020400 	.word	0x40020400
 8004c0c:	40007400 	.word	0x40007400
 8004c10:	200139ac 	.word	0x200139ac
 8004c14:	20013d10 	.word	0x20013d10
 8004c18:	20013d98 	.word	0x20013d98
 8004c1c:	20014044 	.word	0x20014044

08004c20 <Expiratory_Valve_Leak_Calibration>:



void Expiratory_Valve_Leak_Calibration()
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0

	Blower_ON();
 8004c24:	4b69      	ldr	r3, [pc, #420]	; (8004dcc <Expiratory_Valve_Leak_Calibration+0x1ac>)
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	4a68      	ldr	r2, [pc, #416]	; (8004dcc <Expiratory_Valve_Leak_Calibration+0x1ac>)
 8004c2a:	f043 0320 	orr.w	r3, r3, #32
 8004c2e:	6153      	str	r3, [r2, #20]
	ExpValve_CLOSE();
 8004c30:	4b67      	ldr	r3, [pc, #412]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	4a66      	ldr	r2, [pc, #408]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004c36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c3a:	6153      	str	r3, [r2, #20]
	Blower_Signal(DAC_SIGNALS.DAC_VALUE_20 );
 8004c3c:	4b65      	ldr	r3, [pc, #404]	; (8004dd4 <Expiratory_Valve_Leak_Calibration+0x1b4>)
 8004c3e:	8bda      	ldrh	r2, [r3, #30]
 8004c40:	4b65      	ldr	r3, [pc, #404]	; (8004dd8 <Expiratory_Valve_Leak_Calibration+0x1b8>)
 8004c42:	609a      	str	r2, [r3, #8]

	vTaskDelay(4000);
 8004c44:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004c48:	f01a faf0 	bl	801f22c <vTaskDelay>
	Blower_Signal(0);
 8004c4c:	4b62      	ldr	r3, [pc, #392]	; (8004dd8 <Expiratory_Valve_Leak_Calibration+0x1b8>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	609a      	str	r2, [r3, #8]
	vTaskDelay(2000);
 8004c52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c56:	f01a fae9 	bl	801f22c <vTaskDelay>
	Temp_Pressure_Val_1 =  Pressure_sensor.Pressure_Val;
 8004c5a:	4b60      	ldr	r3, [pc, #384]	; (8004ddc <Expiratory_Valve_Leak_Calibration+0x1bc>)
 8004c5c:	789b      	ldrb	r3, [r3, #2]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	4b5e      	ldr	r3, [pc, #376]	; (8004de0 <Expiratory_Valve_Leak_Calibration+0x1c0>)
 8004c68:	edc3 7a00 	vstr	s15, [r3]

	Blower_Signal(0);
 8004c6c:	4b5a      	ldr	r3, [pc, #360]	; (8004dd8 <Expiratory_Valve_Leak_Calibration+0x1b8>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
	vTaskDelay(8000);
 8004c72:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004c76:	f01a fad9 	bl	801f22c <vTaskDelay>
	Temp_Pressure_Val_2 =Pressure_sensor.Pressure_Val;
 8004c7a:	4b58      	ldr	r3, [pc, #352]	; (8004ddc <Expiratory_Valve_Leak_Calibration+0x1bc>)
 8004c7c:	789b      	ldrb	r3, [r3, #2]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	4b57      	ldr	r3, [pc, #348]	; (8004de4 <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8004c88:	edc3 7a00 	vstr	s15, [r3]
	ExpValve_OPEN();
 8004c8c:	4b50      	ldr	r3, [pc, #320]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	4a4f      	ldr	r2, [pc, #316]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c96:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 8004c98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c9c:	f01a fac6 	bl	801f22c <vTaskDelay>

	if(Temp_Pressure_Val_1 < Temp_Pressure_Val_2)
 8004ca0:	4b4f      	ldr	r3, [pc, #316]	; (8004de0 <Expiratory_Valve_Leak_Calibration+0x1c0>)
 8004ca2:	ed93 7a00 	vldr	s14, [r3]
 8004ca6:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8004ca8:	edd3 7a00 	vldr	s15, [r3]
 8004cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb4:	d504      	bpl.n	8004cc0 <Expiratory_Valve_Leak_Calibration+0xa0>
	{
		Temp_Pressure_Val_2=Temp_Pressure_Val_1;
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <Expiratory_Valve_Leak_Calibration+0x1c0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a4a      	ldr	r2, [pc, #296]	; (8004de4 <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e00a      	b.n	8004cd6 <Expiratory_Valve_Leak_Calibration+0xb6>

	}
	else
	{
		Total_temp_Pressure_Val = (Temp_Pressure_Val_1-Temp_Pressure_Val_2);
 8004cc0:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <Expiratory_Valve_Leak_Calibration+0x1c0>)
 8004cc2:	ed93 7a00 	vldr	s14, [r3]
 8004cc6:	4b47      	ldr	r3, [pc, #284]	; (8004de4 <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8004cc8:	edd3 7a00 	vldr	s15, [r3]
 8004ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <Expiratory_Valve_Leak_Calibration+0x1c8>)
 8004cd2:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Total_temp_Pressure_Val<=5)
 8004cd6:	4b44      	ldr	r3, [pc, #272]	; (8004de8 <Expiratory_Valve_Leak_Calibration+0x1c8>)
 8004cd8:	edd3 7a00 	vldr	s15, [r3]
 8004cdc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce8:	d84d      	bhi.n	8004d86 <Expiratory_Valve_Leak_Calibration+0x166>
	{
		if(Temp_Pressure_Val_1 > 5)
 8004cea:	4b3d      	ldr	r3, [pc, #244]	; (8004de0 <Expiratory_Valve_Leak_Calibration+0x1c0>)
 8004cec:	edd3 7a00 	vldr	s15, [r3]
 8004cf0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfc:	dd21      	ble.n	8004d42 <Expiratory_Valve_Leak_Calibration+0x122>
		{
			SEND_CALIBRATION_PACKET.PASS_FAIL          = CALIBRATION_PASS ;
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <Expiratory_Valve_Leak_Calibration+0x1cc>)
 8004d00:	22ff      	movs	r2, #255	; 0xff
 8004d02:	70da      	strb	r2, [r3, #3]
			SEND_CALIBRATION_PACKET.RESULT             = Total_temp_Pressure_Val ;
 8004d04:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <Expiratory_Valve_Leak_Calibration+0x1c8>)
 8004d06:	edd3 7a00 	vldr	s15, [r3]
 8004d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0e:	ee17 3a90 	vmov	r3, s15
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	4b35      	ldr	r3, [pc, #212]	; (8004dec <Expiratory_Valve_Leak_Calibration+0x1cc>)
 8004d16:	80da      	strh	r2, [r3, #6]
			Send_Bluetooth_Data_Farme                  = SEND_CALIBRATION_FRAME;
 8004d18:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <Expiratory_Valve_Leak_Calibration+0x1d0>)
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Twenty_MilliSecond_Delay);
 8004d1e:	2014      	movs	r0, #20
 8004d20:	f01a fa84 	bl	801f22c <vTaskDelay>
			CALIBRARTION.VALVE_LEAK_TEST               = STOP;
 8004d24:	4b33      	ldr	r3, [pc, #204]	; (8004df4 <Expiratory_Valve_Leak_Calibration+0x1d4>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	70da      	strb	r2, [r3, #3]
			ExpValve_OPEN();
 8004d2a:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d34:	6153      	str	r3, [r2, #20]
			vTaskSuspend(Calibration_Handler);
 8004d36:	4b30      	ldr	r3, [pc, #192]	; (8004df8 <Expiratory_Valve_Leak_Calibration+0x1d8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f01a faaa 	bl	801f294 <vTaskSuspend>
		vTaskDelay(Twenty_MilliSecond_Delay);
		CALIBRARTION.VALVE_LEAK_TEST                = STOP;
		ExpValve_OPEN();
		vTaskSuspend(Calibration_Handler);
	}
}
 8004d40:	e042      	b.n	8004dc8 <Expiratory_Valve_Leak_Calibration+0x1a8>
			SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 8004d42:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <Expiratory_Valve_Leak_Calibration+0x1cc>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	70da      	strb	r2, [r3, #3]
			SEND_CALIBRATION_PACKET.RESULT              = Total_temp_Pressure_Val ;
 8004d48:	4b27      	ldr	r3, [pc, #156]	; (8004de8 <Expiratory_Valve_Leak_Calibration+0x1c8>)
 8004d4a:	edd3 7a00 	vldr	s15, [r3]
 8004d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d52:	ee17 3a90 	vmov	r3, s15
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	4b24      	ldr	r3, [pc, #144]	; (8004dec <Expiratory_Valve_Leak_Calibration+0x1cc>)
 8004d5a:	80da      	strh	r2, [r3, #6]
			Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8004d5c:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <Expiratory_Valve_Leak_Calibration+0x1d0>)
 8004d5e:	2202      	movs	r2, #2
 8004d60:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Twenty_MilliSecond_Delay);
 8004d62:	2014      	movs	r0, #20
 8004d64:	f01a fa62 	bl	801f22c <vTaskDelay>
			CALIBRARTION.VALVE_LEAK_TEST                = STOP;
 8004d68:	4b22      	ldr	r3, [pc, #136]	; (8004df4 <Expiratory_Valve_Leak_Calibration+0x1d4>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	70da      	strb	r2, [r3, #3]
			ExpValve_OPEN();
 8004d6e:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d78:	6153      	str	r3, [r2, #20]
			vTaskSuspend(Calibration_Handler);
 8004d7a:	4b1f      	ldr	r3, [pc, #124]	; (8004df8 <Expiratory_Valve_Leak_Calibration+0x1d8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f01a fa88 	bl	801f294 <vTaskSuspend>
}
 8004d84:	e020      	b.n	8004dc8 <Expiratory_Valve_Leak_Calibration+0x1a8>
		SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 8004d86:	4b19      	ldr	r3, [pc, #100]	; (8004dec <Expiratory_Valve_Leak_Calibration+0x1cc>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	70da      	strb	r2, [r3, #3]
		SEND_CALIBRATION_PACKET.RESULT              = Total_temp_Pressure_Val ;
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <Expiratory_Valve_Leak_Calibration+0x1c8>)
 8004d8e:	edd3 7a00 	vldr	s15, [r3]
 8004d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d96:	ee17 3a90 	vmov	r3, s15
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	4b13      	ldr	r3, [pc, #76]	; (8004dec <Expiratory_Valve_Leak_Calibration+0x1cc>)
 8004d9e:	80da      	strh	r2, [r3, #6]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <Expiratory_Valve_Leak_Calibration+0x1d0>)
 8004da2:	2202      	movs	r2, #2
 8004da4:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 8004da6:	2014      	movs	r0, #20
 8004da8:	f01a fa40 	bl	801f22c <vTaskDelay>
		CALIBRARTION.VALVE_LEAK_TEST                = STOP;
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <Expiratory_Valve_Leak_Calibration+0x1d4>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	70da      	strb	r2, [r3, #3]
		ExpValve_OPEN();
 8004db2:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	4a06      	ldr	r2, [pc, #24]	; (8004dd0 <Expiratory_Valve_Leak_Calibration+0x1b0>)
 8004db8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dbc:	6153      	str	r3, [r2, #20]
		vTaskSuspend(Calibration_Handler);
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <Expiratory_Valve_Leak_Calibration+0x1d8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f01a fa66 	bl	801f294 <vTaskSuspend>
}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40020400 	.word	0x40020400
 8004dd4:	20013bd4 	.word	0x20013bd4
 8004dd8:	40007400 	.word	0x40007400
 8004ddc:	2001405c 	.word	0x2001405c
 8004de0:	20014380 	.word	0x20014380
 8004de4:	2001437c 	.word	0x2001437c
 8004de8:	20014384 	.word	0x20014384
 8004dec:	200139ac 	.word	0x200139ac
 8004df0:	20013d10 	.word	0x20013d10
 8004df4:	20013d98 	.word	0x20013d98
 8004df8:	20014044 	.word	0x20014044

08004dfc <Oxygen_blending_Calibration>:


void Oxygen_blending_Calibration()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
	if(Count  <= 7000)
 8004e02:	4b77      	ldr	r3, [pc, #476]	; (8004fe0 <Oxygen_blending_Calibration+0x1e4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f641 3258 	movw	r2, #7000	; 0x1b58
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	dc33      	bgt.n	8004e76 <Oxygen_blending_Calibration+0x7a>
	{
		Count++;
 8004e0e:	4b74      	ldr	r3, [pc, #464]	; (8004fe0 <Oxygen_blending_Calibration+0x1e4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3301      	adds	r3, #1
 8004e14:	4a72      	ldr	r2, [pc, #456]	; (8004fe0 <Oxygen_blending_Calibration+0x1e4>)
 8004e16:	6013      	str	r3, [r2, #0]

		Oxygen_Parameter.Servo_Position=110;
 8004e18:	4b72      	ldr	r3, [pc, #456]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004e1a:	226e      	movs	r2, #110	; 0x6e
 8004e1c:	73da      	strb	r2, [r3, #15]
		Servo_Info(Oxygen_Parameter.Servo_Position);
 8004e1e:	4b71      	ldr	r3, [pc, #452]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004e20:	7bdb      	ldrb	r3, [r3, #15]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f006 fe1c 	bl	800ba60 <Servo_Info>
		Servo_Position_Feedback = SERVO_FULL_CLOSED;
 8004e28:	4b6f      	ldr	r3, [pc, #444]	; (8004fe8 <Oxygen_blending_Calibration+0x1ec>)
 8004e2a:	225a      	movs	r2, #90	; 0x5a
 8004e2c:	701a      	strb	r2, [r3, #0]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 8004e2e:	4b6d      	ldr	r3, [pc, #436]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004e30:	7bda      	ldrb	r2, [r3, #15]
 8004e32:	4b6e      	ldr	r3, [pc, #440]	; (8004fec <Oxygen_blending_Calibration+0x1f0>)
 8004e34:	635a      	str	r2, [r3, #52]	; 0x34

		O2_Sensor_Voltage = ( (O2_Sensor_Pin_Voltage * 3300) / 4095);
 8004e36:	4b6e      	ldr	r3, [pc, #440]	; (8004ff0 <Oxygen_blending_Calibration+0x1f4>)
 8004e38:	885b      	ldrh	r3, [r3, #2]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8004e40:	fb03 f302 	mul.w	r3, r3, r2
 8004e44:	4a6b      	ldr	r2, [pc, #428]	; (8004ff4 <Oxygen_blending_Calibration+0x1f8>)
 8004e46:	fb82 1203 	smull	r1, r2, r2, r3
 8004e4a:	441a      	add	r2, r3
 8004e4c:	12d2      	asrs	r2, r2, #11
 8004e4e:	17db      	asrs	r3, r3, #31
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e5a:	4b67      	ldr	r3, [pc, #412]	; (8004ff8 <Oxygen_blending_Calibration+0x1fc>)
 8004e5c:	edc3 7a00 	vstr	s15, [r3]


		Parkar_valve_Signal(3100);
 8004e60:	4b66      	ldr	r3, [pc, #408]	; (8004ffc <Oxygen_blending_Calibration+0x200>)
 8004e62:	f640 421c 	movw	r2, #3100	; 0xc1c
 8004e66:	615a      	str	r2, [r3, #20]
		ExpValve_OPEN();
 8004e68:	4b65      	ldr	r3, [pc, #404]	; (8005000 <Oxygen_blending_Calibration+0x204>)
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	4a64      	ldr	r2, [pc, #400]	; (8005000 <Oxygen_blending_Calibration+0x204>)
 8004e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e72:	6153      	str	r3, [r2, #20]
 8004e74:	e057      	b.n	8004f26 <Oxygen_blending_Calibration+0x12a>

	}
	else if( (Count >= 7000) && (O2_Sensor_Voltage > 500) )
 8004e76:	4b5a      	ldr	r3, [pc, #360]	; (8004fe0 <Oxygen_blending_Calibration+0x1e4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f641 3257 	movw	r2, #6999	; 0x1b57
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	dd51      	ble.n	8004f26 <Oxygen_blending_Calibration+0x12a>
 8004e82:	4b5d      	ldr	r3, [pc, #372]	; (8004ff8 <Oxygen_blending_Calibration+0x1fc>)
 8004e84:	edd3 7a00 	vldr	s15, [r3]
 8004e88:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005004 <Oxygen_blending_Calibration+0x208>
 8004e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	dd47      	ble.n	8004f26 <Oxygen_blending_Calibration+0x12a>
	{
		Parkar_valve_Signal(0);
 8004e96:	4b59      	ldr	r3, [pc, #356]	; (8004ffc <Oxygen_blending_Calibration+0x200>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	615a      	str	r2, [r3, #20]
		ExpValve_OPEN();
 8004e9c:	4b58      	ldr	r3, [pc, #352]	; (8005000 <Oxygen_blending_Calibration+0x204>)
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	4a57      	ldr	r2, [pc, #348]	; (8005000 <Oxygen_blending_Calibration+0x204>)
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea6:	6153      	str	r3, [r2, #20]

		Oxygen_Parameter.Achieved_Oxygen= (uint8_t)(O2_Sensor_Voltage / O2_Sensor_Maximum_mv);
 8004ea8:	4b53      	ldr	r3, [pc, #332]	; (8004ff8 <Oxygen_blending_Calibration+0x1fc>)
 8004eaa:	edd3 6a00 	vldr	s13, [r3]
 8004eae:	4b56      	ldr	r3, [pc, #344]	; (8005008 <Oxygen_blending_Calibration+0x20c>)
 8004eb0:	ed93 7a00 	vldr	s14, [r3]
 8004eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ebc:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ec0:	793b      	ldrb	r3, [r7, #4]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	4b47      	ldr	r3, [pc, #284]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004ec6:	731a      	strb	r2, [r3, #12]
		if(Oxygen_Parameter.Achieved_Oxygen>100)
 8004ec8:	4b46      	ldr	r3, [pc, #280]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004eca:	7b1b      	ldrb	r3, [r3, #12]
 8004ecc:	2b64      	cmp	r3, #100	; 0x64
 8004ece:	d902      	bls.n	8004ed6 <Oxygen_blending_Calibration+0xda>
			Oxygen_Parameter.Achieved_Oxygen=100;
 8004ed0:	4b44      	ldr	r3, [pc, #272]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004ed2:	2264      	movs	r2, #100	; 0x64
 8004ed4:	731a      	strb	r2, [r3, #12]

		Oxygen_Parameter.Servo_Position=45;
 8004ed6:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004ed8:	222d      	movs	r2, #45	; 0x2d
 8004eda:	73da      	strb	r2, [r3, #15]
		Servo_Info(Oxygen_Parameter.Servo_Position);
 8004edc:	4b41      	ldr	r3, [pc, #260]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004ede:	7bdb      	ldrb	r3, [r3, #15]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f006 fdbd 	bl	800ba60 <Servo_Info>
		Servo_Position_Feedback = SERVO_FULL_OPEND;
 8004ee6:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <Oxygen_blending_Calibration+0x1ec>)
 8004ee8:	222d      	movs	r2, #45	; 0x2d
 8004eea:	701a      	strb	r2, [r3, #0]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 8004eec:	4b3d      	ldr	r3, [pc, #244]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004eee:	7bda      	ldrb	r2, [r3, #15]
 8004ef0:	4b3e      	ldr	r3, [pc, #248]	; (8004fec <Oxygen_blending_Calibration+0x1f0>)
 8004ef2:	635a      	str	r2, [r3, #52]	; 0x34




		SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8004ef4:	4b45      	ldr	r3, [pc, #276]	; (800500c <Oxygen_blending_Calibration+0x210>)
 8004ef6:	22ff      	movs	r2, #255	; 0xff
 8004ef8:	70da      	strb	r2, [r3, #3]
		SEND_CALIBRATION_PACKET.RESULT              = Oxygen_Parameter.Achieved_Oxygen ;
 8004efa:	4b3a      	ldr	r3, [pc, #232]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004efc:	7b1b      	ldrb	r3, [r3, #12]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	4b42      	ldr	r3, [pc, #264]	; (800500c <Oxygen_blending_Calibration+0x210>)
 8004f02:	80da      	strh	r2, [r3, #6]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8004f04:	4b42      	ldr	r3, [pc, #264]	; (8005010 <Oxygen_blending_Calibration+0x214>)
 8004f06:	2202      	movs	r2, #2
 8004f08:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 8004f0a:	2014      	movs	r0, #20
 8004f0c:	f01a f98e 	bl	801f22c <vTaskDelay>
		Count                                       = RESET;
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <Oxygen_blending_Calibration+0x1e4>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
		CALIBRARTION.O2_CHECK                       = STOP;
 8004f16:	4b3f      	ldr	r3, [pc, #252]	; (8005014 <Oxygen_blending_Calibration+0x218>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	711a      	strb	r2, [r3, #4]
		vTaskSuspend(Calibration_Handler);
 8004f1c:	4b3e      	ldr	r3, [pc, #248]	; (8005018 <Oxygen_blending_Calibration+0x21c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f01a f9b7 	bl	801f294 <vTaskSuspend>
	 }
	 if( (Count >= 7000) && (O2_Sensor_Voltage < 500) )
 8004f26:	4b2e      	ldr	r3, [pc, #184]	; (8004fe0 <Oxygen_blending_Calibration+0x1e4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f641 3257 	movw	r2, #6999	; 0x1b57
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	dd51      	ble.n	8004fd6 <Oxygen_blending_Calibration+0x1da>
 8004f32:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <Oxygen_blending_Calibration+0x1fc>)
 8004f34:	edd3 7a00 	vldr	s15, [r3]
 8004f38:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005004 <Oxygen_blending_Calibration+0x208>
 8004f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f44:	d400      	bmi.n	8004f48 <Oxygen_blending_Calibration+0x14c>
		vTaskDelay(Twenty_MilliSecond_Delay);
		Count                                       = RESET;
		CALIBRARTION.O2_CHECK                       = STOP;
		vTaskSuspend(Calibration_Handler);
	  }
}
 8004f46:	e046      	b.n	8004fd6 <Oxygen_blending_Calibration+0x1da>
		Parkar_valve_Signal(0);
 8004f48:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <Oxygen_blending_Calibration+0x200>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	615a      	str	r2, [r3, #20]
		ExpValve_OPEN();
 8004f4e:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <Oxygen_blending_Calibration+0x204>)
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	4a2b      	ldr	r2, [pc, #172]	; (8005000 <Oxygen_blending_Calibration+0x204>)
 8004f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f58:	6153      	str	r3, [r2, #20]
		Oxygen_Parameter.Achieved_Oxygen= (uint8_t)(O2_Sensor_Voltage / O2_Sensor_Maximum_mv);
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <Oxygen_blending_Calibration+0x1fc>)
 8004f5c:	edd3 6a00 	vldr	s13, [r3]
 8004f60:	4b29      	ldr	r3, [pc, #164]	; (8005008 <Oxygen_blending_Calibration+0x20c>)
 8004f62:	ed93 7a00 	vldr	s14, [r3]
 8004f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f6e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004f72:	793b      	ldrb	r3, [r7, #4]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004f78:	731a      	strb	r2, [r3, #12]
		Oxygen_Parameter.Servo_Position=45;
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004f7c:	222d      	movs	r2, #45	; 0x2d
 8004f7e:	73da      	strb	r2, [r3, #15]
		Servo_Info(Oxygen_Parameter.Servo_Position);
 8004f80:	4b18      	ldr	r3, [pc, #96]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004f82:	7bdb      	ldrb	r3, [r3, #15]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f006 fd6b 	bl	800ba60 <Servo_Info>
		Servo_Position_Feedback = SERVO_FULL_OPEND;
 8004f8a:	4b17      	ldr	r3, [pc, #92]	; (8004fe8 <Oxygen_blending_Calibration+0x1ec>)
 8004f8c:	222d      	movs	r2, #45	; 0x2d
 8004f8e:	701a      	strb	r2, [r3, #0]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004f92:	7bda      	ldrb	r2, [r3, #15]
 8004f94:	4b15      	ldr	r3, [pc, #84]	; (8004fec <Oxygen_blending_Calibration+0x1f0>)
 8004f96:	635a      	str	r2, [r3, #52]	; 0x34
	     Oxygen_Parameter.OXYGEN_Event_Count     = 1;
 8004f98:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
		 Oxygen_Parameter.OXYGEN_Cumulative_Val  = 1;
 8004f9e:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	605a      	str	r2, [r3, #4]
		SEND_CALIBRATION_PACKET.PASS_FAIL  = CALIBRATION_FAIL ;
 8004fa4:	4b19      	ldr	r3, [pc, #100]	; (800500c <Oxygen_blending_Calibration+0x210>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	70da      	strb	r2, [r3, #3]
		SEND_CALIBRATION_PACKET.RESULT              = Oxygen_Parameter.Achieved_Oxygen ;
 8004faa:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <Oxygen_blending_Calibration+0x1e8>)
 8004fac:	7b1b      	ldrb	r3, [r3, #12]
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	4b16      	ldr	r3, [pc, #88]	; (800500c <Oxygen_blending_Calibration+0x210>)
 8004fb2:	80da      	strh	r2, [r3, #6]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8004fb4:	4b16      	ldr	r3, [pc, #88]	; (8005010 <Oxygen_blending_Calibration+0x214>)
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 8004fba:	2014      	movs	r0, #20
 8004fbc:	f01a f936 	bl	801f22c <vTaskDelay>
		Count                                       = RESET;
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <Oxygen_blending_Calibration+0x1e4>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
		CALIBRARTION.O2_CHECK                       = STOP;
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <Oxygen_blending_Calibration+0x218>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	711a      	strb	r2, [r3, #4]
		vTaskSuspend(Calibration_Handler);
 8004fcc:	4b12      	ldr	r3, [pc, #72]	; (8005018 <Oxygen_blending_Calibration+0x21c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f01a f95f 	bl	801f294 <vTaskSuspend>
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200001d4 	.word	0x200001d4
 8004fe4:	2001409c 	.word	0x2001409c
 8004fe8:	20014074 	.word	0x20014074
 8004fec:	40001800 	.word	0x40001800
 8004ff0:	20013d04 	.word	0x20013d04
 8004ff4:	80080081 	.word	0x80080081
 8004ff8:	20014848 	.word	0x20014848
 8004ffc:	40007400 	.word	0x40007400
 8005000:	40020400 	.word	0x40020400
 8005004:	43fa0000 	.word	0x43fa0000
 8005008:	20000004 	.word	0x20000004
 800500c:	200139ac 	.word	0x200139ac
 8005010:	20013d10 	.word	0x20013d10
 8005014:	20013d98 	.word	0x20013d98
 8005018:	20014044 	.word	0x20014044

0800501c <Led_Buzzer_Calibration>:



void Led_Buzzer_Calibration()
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0

	Oxygen_Parameter.Achieved_Oxygen = 21;
 8005020:	4b46      	ldr	r3, [pc, #280]	; (800513c <Led_Buzzer_Calibration+0x120>)
 8005022:	2215      	movs	r2, #21
 8005024:	731a      	strb	r2, [r3, #12]
		Red_Led_ON();
 8005026:	4b46      	ldr	r3, [pc, #280]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	4a45      	ldr	r2, [pc, #276]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 800502c:	f043 0310 	orr.w	r3, r3, #16
 8005030:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 8005032:	4b43      	ldr	r3, [pc, #268]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4a42      	ldr	r2, [pc, #264]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005038:	f023 0308 	bic.w	r3, r3, #8
 800503c:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 800503e:	4b40      	ldr	r3, [pc, #256]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	4a3f      	ldr	r2, [pc, #252]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005044:	f023 0320 	bic.w	r3, r3, #32
 8005048:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 800504a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800504e:	f01a f8ed 	bl	801f22c <vTaskDelay>
	    Red_Led_OFF();
 8005052:	4b3b      	ldr	r3, [pc, #236]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4a3a      	ldr	r2, [pc, #232]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005058:	f023 0310 	bic.w	r3, r3, #16
 800505c:	6153      	str	r3, [r2, #20]
		Blue_Led_ON();
 800505e:	4b38      	ldr	r3, [pc, #224]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	4a37      	ldr	r2, [pc, #220]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 800506a:	4b35      	ldr	r3, [pc, #212]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	4a34      	ldr	r2, [pc, #208]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005070:	f023 0320 	bic.w	r3, r3, #32
 8005074:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 8005076:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800507a:	f01a f8d7 	bl	801f22c <vTaskDelay>
	    Red_Led_OFF();
 800507e:	4b30      	ldr	r3, [pc, #192]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	4a2f      	ldr	r2, [pc, #188]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005084:	f023 0310 	bic.w	r3, r3, #16
 8005088:	6153      	str	r3, [r2, #20]
	 	Blue_Led_OFF();
 800508a:	4b2d      	ldr	r3, [pc, #180]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005090:	f023 0308 	bic.w	r3, r3, #8
 8005094:	6153      	str	r3, [r2, #20]
	 	Green_Led_ON();
 8005096:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	4a29      	ldr	r2, [pc, #164]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 800509c:	f043 0320 	orr.w	r3, r3, #32
 80050a0:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 80050a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80050a6:	f01a f8c1 	bl	801f22c <vTaskDelay>
	    Buzzer1_ON();
 80050aa:	4b25      	ldr	r3, [pc, #148]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	4a24      	ldr	r2, [pc, #144]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b4:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 80050b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80050ba:	f01a f8b7 	bl	801f22c <vTaskDelay>
	    Buzzer1_ON();
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c8:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 80050ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80050ce:	f01a f8ad 	bl	801f22c <vTaskDelay>
	    Red_Led_OFF();
 80050d2:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4a1a      	ldr	r2, [pc, #104]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050d8:	f023 0310 	bic.w	r3, r3, #16
 80050dc:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 80050de:	4b18      	ldr	r3, [pc, #96]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	4a17      	ldr	r2, [pc, #92]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050e4:	f023 0308 	bic.w	r3, r3, #8
 80050e8:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	4a14      	ldr	r2, [pc, #80]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050f0:	f023 0320 	bic.w	r3, r3, #32
 80050f4:	6153      	str	r3, [r2, #20]
		Buzzer1_OFF();
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4a11      	ldr	r2, [pc, #68]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 80050fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005100:	6153      	str	r3, [r2, #20]
		Buzzer2_OFF();
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <Led_Buzzer_Calibration+0x124>)
 8005108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800510c:	6153      	str	r3, [r2, #20]
	vTaskDelay(400);
 800510e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005112:	f01a f88b 	bl	801f22c <vTaskDelay>

    	SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <Led_Buzzer_Calibration+0x128>)
 8005118:	22ff      	movs	r2, #255	; 0xff
 800511a:	70da      	strb	r2, [r3, #3]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <Led_Buzzer_Calibration+0x12c>)
 800511e:	2202      	movs	r2, #2
 8005120:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 8005122:	2014      	movs	r0, #20
 8005124:	f01a f882 	bl	801f22c <vTaskDelay>
		CALIBRARTION.ALARAM_TEST                    = STOP;
 8005128:	4b08      	ldr	r3, [pc, #32]	; (800514c <Led_Buzzer_Calibration+0x130>)
 800512a:	2200      	movs	r2, #0
 800512c:	715a      	strb	r2, [r3, #5]
	    vTaskSuspend(Calibration_Handler);
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <Led_Buzzer_Calibration+0x134>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f01a f8ae 	bl	801f294 <vTaskSuspend>

}
 8005138:	bf00      	nop
 800513a:	bd80      	pop	{r7, pc}
 800513c:	2001409c 	.word	0x2001409c
 8005140:	40020c00 	.word	0x40020c00
 8005144:	200139ac 	.word	0x200139ac
 8005148:	20013d10 	.word	0x20013d10
 800514c:	20013d98 	.word	0x20013d98
 8005150:	20014044 	.word	0x20014044

08005154 <Battery_Calibration>:



void Battery_Calibration()
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
	if(Battery_Voltage > 50)
 8005158:	4b22      	ldr	r3, [pc, #136]	; (80051e4 <Battery_Calibration+0x90>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b32      	cmp	r3, #50	; 0x32
 800515e:	d91a      	bls.n	8005196 <Battery_Calibration+0x42>
	{
		vTaskDelay(2000);
 8005160:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005164:	f01a f862 	bl	801f22c <vTaskDelay>
		SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8005168:	4b1f      	ldr	r3, [pc, #124]	; (80051e8 <Battery_Calibration+0x94>)
 800516a:	22ff      	movs	r2, #255	; 0xff
 800516c:	70da      	strb	r2, [r3, #3]
		SEND_CALIBRATION_PACKET.RESULT              = Battery_Voltage;
 800516e:	4b1d      	ldr	r3, [pc, #116]	; (80051e4 <Battery_Calibration+0x90>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b29a      	uxth	r2, r3
 8005174:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <Battery_Calibration+0x94>)
 8005176:	80da      	strh	r2, [r3, #6]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005178:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <Battery_Calibration+0x98>)
 800517a:	2202      	movs	r2, #2
 800517c:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 800517e:	2014      	movs	r0, #20
 8005180:	f01a f854 	bl	801f22c <vTaskDelay>
		CALIBRARTION.BATTERY_TEST                   = STOP;
 8005184:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <Battery_Calibration+0x9c>)
 8005186:	2200      	movs	r2, #0
 8005188:	719a      	strb	r2, [r3, #6]
		vTaskSuspend(Calibration_Handler);
 800518a:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <Battery_Calibration+0xa0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f01a f880 	bl	801f294 <vTaskSuspend>
			CALIBRARTION.BATTERY_TEST                   = STOP;
			vTaskSuspend(Calibration_Handler);

		}
	}
}
 8005194:	e023      	b.n	80051de <Battery_Calibration+0x8a>
		Count++;
 8005196:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <Battery_Calibration+0xa4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <Battery_Calibration+0xa4>)
 800519e:	6013      	str	r3, [r2, #0]
		if(Count>2500)
 80051a0:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <Battery_Calibration+0xa4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80051a8:	4293      	cmp	r3, r2
 80051aa:	dd18      	ble.n	80051de <Battery_Calibration+0x8a>
			Count=0;
 80051ac:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <Battery_Calibration+0xa4>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
			SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 80051b2:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <Battery_Calibration+0x94>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	70da      	strb	r2, [r3, #3]
			SEND_CALIBRATION_PACKET.RESULT              = Battery_Voltage;
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <Battery_Calibration+0x90>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	b29a      	uxth	r2, r3
 80051be:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <Battery_Calibration+0x94>)
 80051c0:	80da      	strh	r2, [r3, #6]
			Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <Battery_Calibration+0x98>)
 80051c4:	2202      	movs	r2, #2
 80051c6:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Twenty_MilliSecond_Delay);
 80051c8:	2014      	movs	r0, #20
 80051ca:	f01a f82f 	bl	801f22c <vTaskDelay>
			CALIBRARTION.BATTERY_TEST                   = STOP;
 80051ce:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <Battery_Calibration+0x9c>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	719a      	strb	r2, [r3, #6]
			vTaskSuspend(Calibration_Handler);
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <Battery_Calibration+0xa0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f01a f85b 	bl	801f294 <vTaskSuspend>
}
 80051de:	bf00      	nop
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20013c89 	.word	0x20013c89
 80051e8:	200139ac 	.word	0x200139ac
 80051ec:	20013d10 	.word	0x20013d10
 80051f0:	20013d98 	.word	0x20013d98
 80051f4:	20014044 	.word	0x20014044
 80051f8:	200001d4 	.word	0x200001d4

080051fc <Sensor_Voltage_Transmit>:


void Sensor_Voltage_Transmit()
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0

	    Pressure_sensor.Pressure_Sensor_Offset_Val   = Runtime_Pressure_Val_filterd;
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <Sensor_Voltage_Transmit+0x4c>)
 8005202:	881a      	ldrh	r2, [r3, #0]
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <Sensor_Voltage_Transmit+0x50>)
 8005206:	801a      	strh	r2, [r3, #0]
	    Flow_sensor.AW_Flow_Offset                   = Flow_sensor.AW_flow_milli_volt;
 8005208:	4b11      	ldr	r3, [pc, #68]	; (8005250 <Sensor_Voltage_Transmit+0x54>)
 800520a:	88da      	ldrh	r2, [r3, #6]
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <Sensor_Voltage_Transmit+0x54>)
 800520e:	801a      	strh	r2, [r3, #0]

	    SEND_CALIBRATION_PACKET.ERROR_CODE           = Pressure_sensor.Pressure_Sensor_Offset_Val;
 8005210:	4b0e      	ldr	r3, [pc, #56]	; (800524c <Sensor_Voltage_Transmit+0x50>)
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <Sensor_Voltage_Transmit+0x58>)
 8005218:	711a      	strb	r2, [r3, #4]
	    SEND_CALIBRATION_PACKET.RESULT               = Flow_sensor.AW_Flow_Offset;
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <Sensor_Voltage_Transmit+0x54>)
 800521c:	881a      	ldrh	r2, [r3, #0]
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <Sensor_Voltage_Transmit+0x58>)
 8005220:	80da      	strh	r2, [r3, #6]

    	SEND_CALIBRATION_PACKET.PASS_FAIL            = CALIBRATION_PASS ;
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <Sensor_Voltage_Transmit+0x58>)
 8005224:	22ff      	movs	r2, #255	; 0xff
 8005226:	70da      	strb	r2, [r3, #3]
		Send_Bluetooth_Data_Farme                    = SEND_CALIBRATION_FRAME;
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <Sensor_Voltage_Transmit+0x5c>)
 800522a:	2202      	movs	r2, #2
 800522c:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 800522e:	2014      	movs	r0, #20
 8005230:	f019 fffc 	bl	801f22c <vTaskDelay>
		CALIBRARTION.SENSOR_OFFSET_TEST              = STOP;
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <Sensor_Voltage_Transmit+0x60>)
 8005236:	2200      	movs	r2, #0
 8005238:	71da      	strb	r2, [r3, #7]
	    vTaskSuspend(Calibration_Handler);
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <Sensor_Voltage_Transmit+0x64>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f01a f828 	bl	801f294 <vTaskSuspend>

}
 8005244:	bf00      	nop
 8005246:	bd80      	pop	{r7, pc}
 8005248:	2001485c 	.word	0x2001485c
 800524c:	2001405c 	.word	0x2001405c
 8005250:	200139b8 	.word	0x200139b8
 8005254:	200139ac 	.word	0x200139ac
 8005258:	20013d10 	.word	0x20013d10
 800525c:	20013d98 	.word	0x20013d98
 8005260:	20014044 	.word	0x20014044

08005264 <O2_Calibration_Task>:




void O2_Calibration_Task(void *argument)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Parkar_valve_Signal(1500);
 800526c:	4b41      	ldr	r3, [pc, #260]	; (8005374 <O2_Calibration_Task+0x110>)
 800526e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005272:	615a      	str	r2, [r3, #20]
		Oxygen_Parameter.Servo_Position=110;
 8005274:	4b40      	ldr	r3, [pc, #256]	; (8005378 <O2_Calibration_Task+0x114>)
 8005276:	226e      	movs	r2, #110	; 0x6e
 8005278:	73da      	strb	r2, [r3, #15]
		Servo_Info(Oxygen_Parameter.Servo_Position);
 800527a:	4b3f      	ldr	r3, [pc, #252]	; (8005378 <O2_Calibration_Task+0x114>)
 800527c:	7bdb      	ldrb	r3, [r3, #15]
 800527e:	4618      	mov	r0, r3
 8005280:	f006 fbee 	bl	800ba60 <Servo_Info>
		Servo_Position_Feedback = SERVO_FULL_CLOSED;
 8005284:	4b3d      	ldr	r3, [pc, #244]	; (800537c <O2_Calibration_Task+0x118>)
 8005286:	225a      	movs	r2, #90	; 0x5a
 8005288:	701a      	strb	r2, [r3, #0]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 800528a:	4b3b      	ldr	r3, [pc, #236]	; (8005378 <O2_Calibration_Task+0x114>)
 800528c:	7bda      	ldrb	r2, [r3, #15]
 800528e:	4b3c      	ldr	r3, [pc, #240]	; (8005380 <O2_Calibration_Task+0x11c>)
 8005290:	635a      	str	r2, [r3, #52]	; 0x34
		O2_calib_Count++;
 8005292:	4b3c      	ldr	r3, [pc, #240]	; (8005384 <O2_Calibration_Task+0x120>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3301      	adds	r3, #1
 8005298:	4a3a      	ldr	r2, [pc, #232]	; (8005384 <O2_Calibration_Task+0x120>)
 800529a:	6013      	str	r3, [r2, #0]

		if(O2_calib_Count >5000)
 800529c:	4b39      	ldr	r3, [pc, #228]	; (8005384 <O2_Calibration_Task+0x120>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a4:	4293      	cmp	r3, r2
 80052a6:	dd60      	ble.n	800536a <O2_Calibration_Task+0x106>
		{
			O2_calib_Count  = 0;
 80052a8:	4b36      	ldr	r3, [pc, #216]	; (8005384 <O2_Calibration_Task+0x120>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
			Loop++;
 80052ae:	4b36      	ldr	r3, [pc, #216]	; (8005388 <O2_Calibration_Task+0x124>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	4b34      	ldr	r3, [pc, #208]	; (8005388 <O2_Calibration_Task+0x124>)
 80052b8:	701a      	strb	r2, [r3, #0]

				O2_Sensor_Voltage = ( (O2_Sensor_Pin_Voltage * 3300) / 4095);
 80052ba:	4b34      	ldr	r3, [pc, #208]	; (800538c <O2_Calibration_Task+0x128>)
 80052bc:	885b      	ldrh	r3, [r3, #2]
 80052be:	461a      	mov	r2, r3
 80052c0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80052c4:	fb03 f302 	mul.w	r3, r3, r2
 80052c8:	4a31      	ldr	r2, [pc, #196]	; (8005390 <O2_Calibration_Task+0x12c>)
 80052ca:	fb82 1203 	smull	r1, r2, r2, r3
 80052ce:	441a      	add	r2, r3
 80052d0:	12d2      	asrs	r2, r2, #11
 80052d2:	17db      	asrs	r3, r3, #31
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052de:	4b2d      	ldr	r3, [pc, #180]	; (8005394 <O2_Calibration_Task+0x130>)
 80052e0:	edc3 7a00 	vstr	s15, [r3]
				Oxygen_Parameter.OXYGEN_Event_Count ++;
 80052e4:	4b24      	ldr	r3, [pc, #144]	; (8005378 <O2_Calibration_Task+0x114>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3301      	adds	r3, #1
 80052ea:	4a23      	ldr	r2, [pc, #140]	; (8005378 <O2_Calibration_Task+0x114>)
 80052ec:	6013      	str	r3, [r2, #0]
				Oxygen_Parameter.OXYGEN_Cumulative_Val =( Oxygen_Parameter.OXYGEN_Cumulative_Val +((int) O2_Sensor_Voltage) );
 80052ee:	4b22      	ldr	r3, [pc, #136]	; (8005378 <O2_Calibration_Task+0x114>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4a28      	ldr	r2, [pc, #160]	; (8005394 <O2_Calibration_Task+0x130>)
 80052f4:	edd2 7a00 	vldr	s15, [r2]
 80052f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052fc:	ee17 2a90 	vmov	r2, s15
 8005300:	4413      	add	r3, r2
 8005302:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <O2_Calibration_Task+0x114>)
 8005304:	6053      	str	r3, [r2, #4]

				if(Loop >5)
 8005306:	4b20      	ldr	r3, [pc, #128]	; (8005388 <O2_Calibration_Task+0x124>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b05      	cmp	r3, #5
 800530c:	d92d      	bls.n	800536a <O2_Calibration_Task+0x106>
				{
					Loop=0;
 800530e:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <O2_Calibration_Task+0x124>)
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
					Parkar_valve_Signal(0);
 8005314:	4b17      	ldr	r3, [pc, #92]	; (8005374 <O2_Calibration_Task+0x110>)
 8005316:	2200      	movs	r2, #0
 8005318:	615a      	str	r2, [r3, #20]
					Oxygen_Parameter.Servo_Position=45;
 800531a:	4b17      	ldr	r3, [pc, #92]	; (8005378 <O2_Calibration_Task+0x114>)
 800531c:	222d      	movs	r2, #45	; 0x2d
 800531e:	73da      	strb	r2, [r3, #15]
					Servo_Info(Oxygen_Parameter.Servo_Position);
 8005320:	4b15      	ldr	r3, [pc, #84]	; (8005378 <O2_Calibration_Task+0x114>)
 8005322:	7bdb      	ldrb	r3, [r3, #15]
 8005324:	4618      	mov	r0, r3
 8005326:	f006 fb9b 	bl	800ba60 <Servo_Info>
					Servo_Position_Feedback = SERVO_FULL_OPEND;
 800532a:	4b14      	ldr	r3, [pc, #80]	; (800537c <O2_Calibration_Task+0x118>)
 800532c:	222d      	movs	r2, #45	; 0x2d
 800532e:	701a      	strb	r2, [r3, #0]
					Servo_Angle(Oxygen_Parameter.Servo_Position);
 8005330:	4b11      	ldr	r3, [pc, #68]	; (8005378 <O2_Calibration_Task+0x114>)
 8005332:	7bda      	ldrb	r2, [r3, #15]
 8005334:	4b12      	ldr	r3, [pc, #72]	; (8005380 <O2_Calibration_Task+0x11c>)
 8005336:	635a      	str	r2, [r3, #52]	; 0x34

					CALIBRARTION.O2_SENSOR_100_PER_TEST         = 0;
 8005338:	4b17      	ldr	r3, [pc, #92]	; (8005398 <O2_Calibration_Task+0x134>)
 800533a:	2200      	movs	r2, #0
 800533c:	721a      	strb	r2, [r3, #8]
					SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 800533e:	4b17      	ldr	r3, [pc, #92]	; (800539c <O2_Calibration_Task+0x138>)
 8005340:	22ff      	movs	r2, #255	; 0xff
 8005342:	70da      	strb	r2, [r3, #3]
					Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005344:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <O2_Calibration_Task+0x13c>)
 8005346:	2202      	movs	r2, #2
 8005348:	701a      	strb	r2, [r3, #0]
					vTaskDelay(Twenty_MilliSecond_Delay);
 800534a:	2014      	movs	r0, #20
 800534c:	f019 ff6e 	bl	801f22c <vTaskDelay>
					CALIBRARTION.O2_SENSOR_100_PER_TEST         = STOP;
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <O2_Calibration_Task+0x134>)
 8005352:	2200      	movs	r2, #0
 8005354:	721a      	strb	r2, [r3, #8]
					vTaskSuspend(Calibration_Handler);
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <O2_Calibration_Task+0x140>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f019 ff9a 	bl	801f294 <vTaskSuspend>
					vTaskSuspend(O2_Calibration_Handler);
 8005360:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <O2_Calibration_Task+0x144>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f019 ff95 	bl	801f294 <vTaskSuspend>
				}
		}
		vTaskDelay(Two_Millisecond_Delay);
 800536a:	2002      	movs	r0, #2
 800536c:	f019 ff5e 	bl	801f22c <vTaskDelay>
		Parkar_valve_Signal(1500);
 8005370:	e77c      	b.n	800526c <O2_Calibration_Task+0x8>
 8005372:	bf00      	nop
 8005374:	40007400 	.word	0x40007400
 8005378:	2001409c 	.word	0x2001409c
 800537c:	20014074 	.word	0x20014074
 8005380:	40001800 	.word	0x40001800
 8005384:	200001d8 	.word	0x200001d8
 8005388:	20014388 	.word	0x20014388
 800538c:	20013d04 	.word	0x20013d04
 8005390:	80080081 	.word	0x80080081
 8005394:	20014848 	.word	0x20014848
 8005398:	20013d98 	.word	0x20013d98
 800539c:	200139ac 	.word	0x200139ac
 80053a0:	20013d10 	.word	0x20013d10
 80053a4:	20014044 	.word	0x20014044
 80053a8:	20013ef0 	.word	0x20013ef0

080053ac <CPAP_Mode_Packet_Data>:
static void Patient_Circuit_Disconnected_Alert_CPAP();



void CPAP_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	 CPAP.CPAP_Val                         = Receive_Graph_Packet->PEEP_CPAP_Plow;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	795a      	ldrb	r2, [r3, #5]
 80053b8:	4b28      	ldr	r3, [pc, #160]	; (800545c <CPAP_Mode_Packet_Data+0xb0>)
 80053ba:	701a      	strb	r2, [r3, #0]

	 CPAP.TRIG_TYPE                        = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	78db      	ldrb	r3, [r3, #3]
 80053c0:	099b      	lsrs	r3, r3, #6
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	4b23      	ldr	r3, [pc, #140]	; (800545c <CPAP_Mode_Packet_Data+0xb0>)
 80053ce:	805a      	strh	r2, [r3, #2]
	 CPAP.TRIG_LMT                         = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	7c1b      	ldrb	r3, [r3, #16]
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <CPAP_Mode_Packet_Data+0xb4>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	08db      	lsrs	r3, r3, #3
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <CPAP_Mode_Packet_Data+0xb0>)
 80053e8:	edc3 7a01 	vstr	s15, [r3, #4]
	 CPAP.TRIG_TIME                        = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7bdb      	ldrb	r3, [r3, #15]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	0092      	lsls	r2, r2, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	0091      	lsls	r1, r2, #2
 80053fc:	461a      	mov	r2, r3
 80053fe:	460b      	mov	r3, r1
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	b29a      	uxth	r2, r3
 8005406:	4b15      	ldr	r3, [pc, #84]	; (800545c <CPAP_Mode_Packet_Data+0xb0>)
 8005408:	811a      	strh	r2, [r3, #8]

	 CPAP.APNEA_TIME                       = Receive_Graph_Packet->Apnea_Time;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	7b9b      	ldrb	r3, [r3, #14]
 800540e:	b29a      	uxth	r2, r3
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <CPAP_Mode_Packet_Data+0xb0>)
 8005412:	821a      	strh	r2, [r3, #16]
	 CPAP.APNEA_COUNTER                    = (1000*CPAP.APNEA_TIME) ;
 8005414:	4b11      	ldr	r3, [pc, #68]	; (800545c <CPAP_Mode_Packet_Data+0xb0>)
 8005416:	8a1b      	ldrh	r3, [r3, #16]
 8005418:	461a      	mov	r2, r3
 800541a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800541e:	fb03 f302 	mul.w	r3, r3, r2
 8005422:	4a0e      	ldr	r2, [pc, #56]	; (800545c <CPAP_Mode_Packet_Data+0xb0>)
 8005424:	6153      	str	r3, [r2, #20]
	 if(CPAP.TRIG_TYPE == 0)
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <CPAP_Mode_Packet_Data+0xb0>)
 8005428:	885b      	ldrh	r3, [r3, #2]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <CPAP_Mode_Packet_Data+0x8a>
		Trigger_Type = Pressure_Trigger;
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <CPAP_Mode_Packet_Data+0xb8>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	e006      	b.n	8005444 <CPAP_Mode_Packet_Data+0x98>
	else if(CPAP.TRIG_TYPE == 1)
 8005436:	4b09      	ldr	r3, [pc, #36]	; (800545c <CPAP_Mode_Packet_Data+0xb0>)
 8005438:	885b      	ldrh	r3, [r3, #2]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d102      	bne.n	8005444 <CPAP_Mode_Packet_Data+0x98>
		Trigger_Type = Flow_Trigger;
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <CPAP_Mode_Packet_Data+0xb8>)
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]

	 Mode_Initial_Flag_Set                  = OPEN;
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <CPAP_Mode_Packet_Data+0xbc>)
 8005446:	2201      	movs	r2, #1
 8005448:	701a      	strb	r2, [r3, #0]
	 vTaskResume(Mode_initial_Flag_Set_Handler);
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <CPAP_Mode_Packet_Data+0xc0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f019 ffe4 	bl	801f41c <vTaskResume>

}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20013b14 	.word	0x20013b14
 8005460:	cccccccd 	.word	0xcccccccd
 8005464:	2001398c 	.word	0x2001398c
 8005468:	20014338 	.word	0x20014338
 800546c:	2001406c 	.word	0x2001406c

08005470 <CPAP_Task>:


void CPAP_Task(void *argument)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(CPAP.APNEA_COUNTER > 0)
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <CPAP_Task+0x34>)
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	dd02      	ble.n	8005486 <CPAP_Task+0x16>
		{
			//Green_Led();
			CPAP_CONTROL();
 8005480:	f000 f816 	bl	80054b0 <CPAP_CONTROL>
 8005484:	e00a      	b.n	800549c <CPAP_Task+0x2c>
		}
		else
		{
			LED_STATUS = Idle_LED;
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <CPAP_Task+0x38>)
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
			RESET_FLAGS();
 800548c:	f000 fa7a 	bl	8005984 <RESET_FLAGS>
			 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <CPAP_Task+0x3c>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <CPAP_Task+0x2c>
			 {
				 BACKUP_PC_CMV_START();
 8005498:	f000 faa6 	bl	80059e8 <BACKUP_PC_CMV_START>
			 }

		}
		vTaskDelay(Two_Millisecond_Delay);
 800549c:	2002      	movs	r0, #2
 800549e:	f019 fec5 	bl	801f22c <vTaskDelay>
		if(CPAP.APNEA_COUNTER > 0)
 80054a2:	e7e9      	b.n	8005478 <CPAP_Task+0x8>
 80054a4:	20013b14 	.word	0x20013b14
 80054a8:	20013aed 	.word	0x20013aed
 80054ac:	20013f74 	.word	0x20013f74

080054b0 <CPAP_CONTROL>:
}



static void CPAP_CONTROL()
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0

	    if(Pressure_sensor.Pressure_Val >= (CPAP.CPAP_Val + 5) )
 80054b4:	4b3e      	ldr	r3, [pc, #248]	; (80055b0 <CPAP_CONTROL+0x100>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4a3e      	ldr	r2, [pc, #248]	; (80055b4 <CPAP_CONTROL+0x104>)
 80054bc:	7892      	ldrb	r2, [r2, #2]
 80054be:	4293      	cmp	r3, r2
 80054c0:	da1e      	bge.n	8005500 <CPAP_CONTROL+0x50>
	    {
	    	Blower_Signal(0);
 80054c2:	4b3d      	ldr	r3, [pc, #244]	; (80055b8 <CPAP_CONTROL+0x108>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	609a      	str	r2, [r3, #8]
	    	Pressure_Mode_blower_control.Blower_Signal_Voltage = 0;
 80054c8:	4b3c      	ldr	r3, [pc, #240]	; (80055bc <CPAP_CONTROL+0x10c>)
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	60da      	str	r2, [r3, #12]
	    	Pressure_Status = OVER_PRESSURE;
 80054d0:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <CPAP_CONTROL+0x110>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	701a      	strb	r2, [r3, #0]
	    	ExpValve_OPEN();
 80054d6:	4b3b      	ldr	r3, [pc, #236]	; (80055c4 <CPAP_CONTROL+0x114>)
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	4a3a      	ldr	r2, [pc, #232]	; (80055c4 <CPAP_CONTROL+0x114>)
 80054dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e0:	6153      	str	r3, [r2, #20]
	    	BREATH_STATE    = PATIENT_TRIGGER_EXPIRATION;
 80054e2:	4b39      	ldr	r3, [pc, #228]	; (80055c8 <CPAP_CONTROL+0x118>)
 80054e4:	2203      	movs	r2, #3
 80054e6:	701a      	strb	r2, [r3, #0]
	    	vTaskDelay(700);
 80054e8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80054ec:	f019 fe9e 	bl	801f22c <vTaskDelay>
	    	CPAP_Control.CPAP_Settle_Time   = 2000;
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <CPAP_CONTROL+0x11c>)
 80054f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80054f6:	601a      	str	r2, [r3, #0]
	    	Pressure_Status = NORMAL_PRESSURE;
 80054f8:	4b31      	ldr	r3, [pc, #196]	; (80055c0 <CPAP_CONTROL+0x110>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
				else
				{
					CHECK_TRIGGER_OFFSET();
				}
	    }
}
 80054fe:	e055      	b.n	80055ac <CPAP_CONTROL+0xfc>
	    	BREATH_STATE    = EXPIRATION_CYCLE;
 8005500:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <CPAP_CONTROL+0x118>)
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
	    	LED_STATUS      = EXPIRATION_LED;
 8005506:	4b32      	ldr	r3, [pc, #200]	; (80055d0 <CPAP_CONTROL+0x120>)
 8005508:	2202      	movs	r2, #2
 800550a:	701a      	strb	r2, [r3, #0]
				if(CPAP_Control.Blower_Wait_Time_Milli_Second == 0)
 800550c:	4b2f      	ldr	r3, [pc, #188]	; (80055cc <CPAP_CONTROL+0x11c>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <CPAP_CONTROL+0x68>
					RUN_CPAP_MAINTAIN_BLOWER();
 8005514:	f000 f868 	bl	80055e8 <RUN_CPAP_MAINTAIN_BLOWER>
				if(CPAP_Control.CPAP_Settle_Time == 0 )
 8005518:	4b2c      	ldr	r3, [pc, #176]	; (80055cc <CPAP_CONTROL+0x11c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d141      	bne.n	80055a4 <CPAP_CONTROL+0xf4>
					Patient_Circuit_Disconnected_Alert_CPAP();
 8005520:	f000 fb12 	bl	8005b48 <Patient_Circuit_Disconnected_Alert_CPAP>
					if( (Flow_Sensor_cal._Flow_Val > 0) && (CPAP_Control.Trigger_Check_Wait_Time == 0))
 8005524:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <CPAP_CONTROL+0x124>)
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	2b00      	cmp	r3, #0
 800552a:	dd13      	ble.n	8005554 <CPAP_CONTROL+0xa4>
 800552c:	4b27      	ldr	r3, [pc, #156]	; (80055cc <CPAP_CONTROL+0x11c>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10f      	bne.n	8005554 <CPAP_CONTROL+0xa4>
						STOP_BLOWER_IF_FLOW_SENSE();
 8005534:	f000 f894 	bl	8005660 <STOP_BLOWER_IF_FLOW_SENSE>
							if (Trigger_Type == Pressure_Trigger)
 8005538:	4b27      	ldr	r3, [pc, #156]	; (80055d8 <CPAP_CONTROL+0x128>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <CPAP_CONTROL+0x96>
								CHECK_PRESSURE_TRIGGER();
 8005540:	f000 f8a0 	bl	8005684 <CHECK_PRESSURE_TRIGGER>
							if (Trigger_Type == Pressure_Trigger)
 8005544:	e031      	b.n	80055aa <CPAP_CONTROL+0xfa>
							else if (Trigger_Type == Flow_Trigger)
 8005546:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <CPAP_CONTROL+0x128>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d12d      	bne.n	80055aa <CPAP_CONTROL+0xfa>
								CHECK_FLOW_TRIGGER();
 800554e:	f000 f8ed 	bl	800572c <CHECK_FLOW_TRIGGER>
							if (Trigger_Type == Pressure_Trigger)
 8005552:	e02a      	b.n	80055aa <CPAP_CONTROL+0xfa>
						CPAP_Average.CPAP_Cumulative_Val += Pressure_sensor.Pressure_Val;
 8005554:	4b21      	ldr	r3, [pc, #132]	; (80055dc <CPAP_CONTROL+0x12c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <CPAP_CONTROL+0x104>)
 800555a:	7892      	ldrb	r2, [r2, #2]
 800555c:	4413      	add	r3, r2
 800555e:	4a1f      	ldr	r2, [pc, #124]	; (80055dc <CPAP_CONTROL+0x12c>)
 8005560:	6013      	str	r3, [r2, #0]
						CPAP_Average.CPAP_Event_Count++;
 8005562:	4b1e      	ldr	r3, [pc, #120]	; (80055dc <CPAP_CONTROL+0x12c>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	3301      	adds	r3, #1
 8005568:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <CPAP_CONTROL+0x12c>)
 800556a:	6053      	str	r3, [r2, #4]
						if(CPAP_Average.CPAP_Event_Count >1000)
 800556c:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <CPAP_CONTROL+0x12c>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005574:	d91a      	bls.n	80055ac <CPAP_CONTROL+0xfc>
							Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 8005576:	f005 fd57 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
							CPAP_AVERAGE();
 800557a:	f000 f955 	bl	8005828 <CPAP_AVERAGE>
							CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL    = TUNE_CPAP_BLOWER(&CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL ,
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <CPAP_CONTROL+0x100>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	4816      	ldr	r0, [pc, #88]	; (80055e0 <CPAP_CONTROL+0x130>)
 8005586:	f000 f985 	bl	8005894 <TUNE_CPAP_BLOWER>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <CPAP_CONTROL+0x134>)
 8005590:	809a      	strh	r2, [r3, #4]
							CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL         = CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL;
 8005592:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <CPAP_CONTROL+0x134>)
 8005594:	889a      	ldrh	r2, [r3, #4]
 8005596:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <CPAP_CONTROL+0x134>)
 8005598:	805a      	strh	r2, [r3, #2]
							CPAP_Control.CPAP_Settle_Time                    = 1000;
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <CPAP_CONTROL+0x11c>)
 800559c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a0:	601a      	str	r2, [r3, #0]
}
 80055a2:	e003      	b.n	80055ac <CPAP_CONTROL+0xfc>
					CHECK_TRIGGER_OFFSET();
 80055a4:	f000 f916 	bl	80057d4 <CHECK_TRIGGER_OFFSET>
}
 80055a8:	e000      	b.n	80055ac <CPAP_CONTROL+0xfc>
							if (Trigger_Type == Pressure_Trigger)
 80055aa:	bf00      	nop
}
 80055ac:	bf00      	nop
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20013b14 	.word	0x20013b14
 80055b4:	2001405c 	.word	0x2001405c
 80055b8:	40007400 	.word	0x40007400
 80055bc:	20014030 	.word	0x20014030
 80055c0:	20013f29 	.word	0x20013f29
 80055c4:	40020400 	.word	0x40020400
 80055c8:	200140fd 	.word	0x200140fd
 80055cc:	20013c90 	.word	0x20013c90
 80055d0:	20013aed 	.word	0x20013aed
 80055d4:	20013fb0 	.word	0x20013fb0
 80055d8:	2001398c 	.word	0x2001398c
 80055dc:	20013f8c 	.word	0x20013f8c
 80055e0:	20013ae0 	.word	0x20013ae0
 80055e4:	20013adc 	.word	0x20013adc

080055e8 <RUN_CPAP_MAINTAIN_BLOWER>:



static void RUN_CPAP_MAINTAIN_BLOWER()
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
	ExpValve_CLOSE();
 80055ec:	4b18      	ldr	r3, [pc, #96]	; (8005650 <RUN_CPAP_MAINTAIN_BLOWER+0x68>)
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	4a17      	ldr	r2, [pc, #92]	; (8005650 <RUN_CPAP_MAINTAIN_BLOWER+0x68>)
 80055f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055f6:	6153      	str	r3, [r2, #20]
	Blower_Signal( CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL);
 80055f8:	4b16      	ldr	r3, [pc, #88]	; (8005654 <RUN_CPAP_MAINTAIN_BLOWER+0x6c>)
 80055fa:	885a      	ldrh	r2, [r3, #2]
 80055fc:	4b16      	ldr	r3, [pc, #88]	; (8005658 <RUN_CPAP_MAINTAIN_BLOWER+0x70>)
 80055fe:	609a      	str	r2, [r3, #8]
	Pressure_Mode_blower_control.Blower_Signal_Voltage = ( (CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL*3.3) /4095);
 8005600:	4b14      	ldr	r3, [pc, #80]	; (8005654 <RUN_CPAP_MAINTAIN_BLOWER+0x6c>)
 8005602:	885b      	ldrh	r3, [r3, #2]
 8005604:	4618      	mov	r0, r3
 8005606:	f7fa ff35 	bl	8000474 <__aeabi_i2d>
 800560a:	a30d      	add	r3, pc, #52	; (adr r3, 8005640 <RUN_CPAP_MAINTAIN_BLOWER+0x58>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fa ff9a 	bl	8000548 <__aeabi_dmul>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4610      	mov	r0, r2
 800561a:	4619      	mov	r1, r3
 800561c:	a30a      	add	r3, pc, #40	; (adr r3, 8005648 <RUN_CPAP_MAINTAIN_BLOWER+0x60>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fb f8bb 	bl	800079c <__aeabi_ddiv>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	f7fb fa6d 	bl	8000b0c <__aeabi_d2f>
 8005632:	4603      	mov	r3, r0
 8005634:	4a09      	ldr	r2, [pc, #36]	; (800565c <RUN_CPAP_MAINTAIN_BLOWER+0x74>)
 8005636:	60d3      	str	r3, [r2, #12]
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}
 800563c:	f3af 8000 	nop.w
 8005640:	66666666 	.word	0x66666666
 8005644:	400a6666 	.word	0x400a6666
 8005648:	00000000 	.word	0x00000000
 800564c:	40affe00 	.word	0x40affe00
 8005650:	40020400 	.word	0x40020400
 8005654:	20013adc 	.word	0x20013adc
 8005658:	40007400 	.word	0x40007400
 800565c:	20014030 	.word	0x20014030

08005660 <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <STOP_BLOWER_IF_FLOW_SENSE+0x1c>)
 8005666:	2200      	movs	r2, #0
 8005668:	609a      	str	r2, [r3, #8]
	CPAP_Control.Blower_Wait_Time_Milli_Second = 2000;
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <STOP_BLOWER_IF_FLOW_SENSE+0x20>)
 800566c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005670:	605a      	str	r2, [r3, #4]
}
 8005672:	bf00      	nop
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40007400 	.word	0x40007400
 8005680:	20013c90 	.word	0x20013c90

08005684 <CHECK_PRESSURE_TRIGGER>:




static void CHECK_PRESSURE_TRIGGER()
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
	if (( Pressure_sensor.Pressure_Val < (Pressure_Trigger_Offset - CPAP.TRIG_LMT )))
 8005688:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <CHECK_PRESSURE_TRIGGER+0x80>)
 800568a:	789b      	ldrb	r3, [r3, #2]
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005694:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <CHECK_PRESSURE_TRIGGER+0x84>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <CHECK_PRESSURE_TRIGGER+0x88>)
 80056a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80056a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80056aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b2:	d400      	bmi.n	80056b6 <CHECK_PRESSURE_TRIGGER+0x32>
		Blower_Signal( CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL);
		CPAP_Control.CPAP_Settle_Time                = 1000;
		CPAP.APNEA_COUNTER                           = (1000*CPAP.APNEA_TIME) ;

	}
}
 80056b4:	e023      	b.n	80056fe <CHECK_PRESSURE_TRIGGER+0x7a>
		Breath_Count                                 = Count_The_Breath;
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <CHECK_PRESSURE_TRIGGER+0x8c>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
		Alert_Status                                 = ALERT_HAPPEN;
 80056bc:	4b15      	ldr	r3, [pc, #84]	; (8005714 <CHECK_PRESSURE_TRIGGER+0x90>)
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]
		LED_Alert();
 80056c2:	f7fc f975 	bl	80019b0 <LED_Alert>
		Patient_Trigger                              = PATIENT_TRIGGER_HAPPEN;
 80056c6:	4b14      	ldr	r3, [pc, #80]	; (8005718 <CHECK_PRESSURE_TRIGGER+0x94>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
		Patient_Trigger_Count++;
 80056cc:	4b13      	ldr	r3, [pc, #76]	; (800571c <CHECK_PRESSURE_TRIGGER+0x98>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3301      	adds	r3, #1
 80056d2:	4a12      	ldr	r2, [pc, #72]	; (800571c <CHECK_PRESSURE_TRIGGER+0x98>)
 80056d4:	6013      	str	r3, [r2, #0]
		CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL = 0;
 80056d6:	4b12      	ldr	r3, [pc, #72]	; (8005720 <CHECK_PRESSURE_TRIGGER+0x9c>)
 80056d8:	2200      	movs	r2, #0
 80056da:	805a      	strh	r2, [r3, #2]
		Blower_Signal( CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL);
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <CHECK_PRESSURE_TRIGGER+0x9c>)
 80056de:	885a      	ldrh	r2, [r3, #2]
 80056e0:	4b10      	ldr	r3, [pc, #64]	; (8005724 <CHECK_PRESSURE_TRIGGER+0xa0>)
 80056e2:	609a      	str	r2, [r3, #8]
		CPAP_Control.CPAP_Settle_Time                = 1000;
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <CHECK_PRESSURE_TRIGGER+0xa4>)
 80056e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056ea:	601a      	str	r2, [r3, #0]
		CPAP.APNEA_COUNTER                           = (1000*CPAP.APNEA_TIME) ;
 80056ec:	4b07      	ldr	r3, [pc, #28]	; (800570c <CHECK_PRESSURE_TRIGGER+0x88>)
 80056ee:	8a1b      	ldrh	r3, [r3, #16]
 80056f0:	461a      	mov	r2, r3
 80056f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056f6:	fb03 f302 	mul.w	r3, r3, r2
 80056fa:	4a04      	ldr	r2, [pc, #16]	; (800570c <CHECK_PRESSURE_TRIGGER+0x88>)
 80056fc:	6153      	str	r3, [r2, #20]
}
 80056fe:	bf00      	nop
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	2001405c 	.word	0x2001405c
 8005708:	20014024 	.word	0x20014024
 800570c:	20013b14 	.word	0x20013b14
 8005710:	200139a6 	.word	0x200139a6
 8005714:	20013f88 	.word	0x20013f88
 8005718:	20013ca9 	.word	0x20013ca9
 800571c:	200140d4 	.word	0x200140d4
 8005720:	20013adc 	.word	0x20013adc
 8005724:	40007400 	.word	0x40007400
 8005728:	20013c90 	.word	0x20013c90

0800572c <CHECK_FLOW_TRIGGER>:

static void CHECK_FLOW_TRIGGER()
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+CPAP.TRIG_LMT )))
 8005730:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <CHECK_FLOW_TRIGGER+0x80>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800573c:	4b1c      	ldr	r3, [pc, #112]	; (80057b0 <CHECK_FLOW_TRIGGER+0x84>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005748:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <CHECK_FLOW_TRIGGER+0x88>)
 800574a:	edd3 7a01 	vldr	s15, [r3, #4]
 800574e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575a:	dc00      	bgt.n	800575e <CHECK_FLOW_TRIGGER+0x32>
		Blower_Signal( CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL);
		CPAP.APNEA_COUNTER                    = (1000*CPAP.APNEA_TIME) ;


	}
}
 800575c:	e023      	b.n	80057a6 <CHECK_FLOW_TRIGGER+0x7a>
		Breath_Count                                = Count_The_Breath;
 800575e:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <CHECK_FLOW_TRIGGER+0x8c>)
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
		Alert_Status                                = ALERT_HAPPEN;
 8005764:	4b15      	ldr	r3, [pc, #84]	; (80057bc <CHECK_FLOW_TRIGGER+0x90>)
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
		LED_Alert();
 800576a:	f7fc f921 	bl	80019b0 <LED_Alert>
		LAST_FLOW_TRIGGER 							= FLOW_TRIGGER;
 800576e:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <CHECK_FLOW_TRIGGER+0x80>)
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <CHECK_FLOW_TRIGGER+0x94>)
 8005774:	701a      	strb	r2, [r3, #0]
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
 8005776:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <CHECK_FLOW_TRIGGER+0x98>)
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
		Patient_Trigger_Count++;
 800577c:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <CHECK_FLOW_TRIGGER+0x9c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3301      	adds	r3, #1
 8005782:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <CHECK_FLOW_TRIGGER+0x9c>)
 8005784:	6013      	str	r3, [r2, #0]
		CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL = 0;
 8005786:	4b11      	ldr	r3, [pc, #68]	; (80057cc <CHECK_FLOW_TRIGGER+0xa0>)
 8005788:	2200      	movs	r2, #0
 800578a:	805a      	strh	r2, [r3, #2]
		Blower_Signal( CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL);
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <CHECK_FLOW_TRIGGER+0xa0>)
 800578e:	885a      	ldrh	r2, [r3, #2]
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <CHECK_FLOW_TRIGGER+0xa4>)
 8005792:	609a      	str	r2, [r3, #8]
		CPAP.APNEA_COUNTER                    = (1000*CPAP.APNEA_TIME) ;
 8005794:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <CHECK_FLOW_TRIGGER+0x88>)
 8005796:	8a1b      	ldrh	r3, [r3, #16]
 8005798:	461a      	mov	r2, r3
 800579a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800579e:	fb03 f302 	mul.w	r3, r3, r2
 80057a2:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <CHECK_FLOW_TRIGGER+0x88>)
 80057a4:	6153      	str	r3, [r2, #20]
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20014068 	.word	0x20014068
 80057b0:	20014018 	.word	0x20014018
 80057b4:	20013b14 	.word	0x20013b14
 80057b8:	200139a6 	.word	0x200139a6
 80057bc:	20013f88 	.word	0x20013f88
 80057c0:	20014240 	.word	0x20014240
 80057c4:	20013ca9 	.word	0x20013ca9
 80057c8:	200140d4 	.word	0x200140d4
 80057cc:	20013adc 	.word	0x20013adc
 80057d0:	40007400 	.word	0x40007400

080057d4 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
	if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 80057d8:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <CHECK_TRIGGER_OFFSET+0x40>)
 80057da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <CHECK_TRIGGER_OFFSET+0x1e>
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <CHECK_TRIGGER_OFFSET+0x40>)
 80057e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e4:	f113 0f08 	cmn.w	r3, #8
 80057e8:	db0f      	blt.n	800580a <CHECK_TRIGGER_OFFSET+0x36>
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <CHECK_TRIGGER_OFFSET+0x40>)
 80057ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da0b      	bge.n	800580a <CHECK_TRIGGER_OFFSET+0x36>
	{
		FLOW_TRIGGER             = 0;
 80057f2:	4b09      	ldr	r3, [pc, #36]	; (8005818 <CHECK_TRIGGER_OFFSET+0x44>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
		Pressure_Trigger_Offset  =  Pressure_sensor.Pressure_Val;
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <CHECK_TRIGGER_OFFSET+0x48>)
 80057fa:	789b      	ldrb	r3, [r3, #2]
 80057fc:	461a      	mov	r2, r3
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <CHECK_TRIGGER_OFFSET+0x4c>)
 8005800:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  Flow_Sensor_cal._Flow_Val;
 8005802:	4b04      	ldr	r3, [pc, #16]	; (8005814 <CHECK_TRIGGER_OFFSET+0x40>)
 8005804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <CHECK_TRIGGER_OFFSET+0x50>)
 8005808:	6013      	str	r3, [r2, #0]
	}
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	20013fb0 	.word	0x20013fb0
 8005818:	20014068 	.word	0x20014068
 800581c:	2001405c 	.word	0x2001405c
 8005820:	20014024 	.word	0x20014024
 8005824:	20014018 	.word	0x20014018

08005828 <CPAP_AVERAGE>:


static void CPAP_AVERAGE()
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
	if((CPAP_Average.CPAP_Cumulative_Val == 0) || (CPAP_Average.CPAP_Event_Count == 0))
 800582c:	4b16      	ldr	r3, [pc, #88]	; (8005888 <CPAP_AVERAGE+0x60>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <CPAP_AVERAGE+0x14>
 8005834:	4b14      	ldr	r3, [pc, #80]	; (8005888 <CPAP_AVERAGE+0x60>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <CPAP_AVERAGE+0x20>
	{
		CPAP_Average.CPAP_Cumulative_Val = 1;
 800583c:	4b12      	ldr	r3, [pc, #72]	; (8005888 <CPAP_AVERAGE+0x60>)
 800583e:	2201      	movs	r2, #1
 8005840:	601a      	str	r2, [r3, #0]
		CPAP_Average.CPAP_Event_Count    = 1;
 8005842:	4b11      	ldr	r3, [pc, #68]	; (8005888 <CPAP_AVERAGE+0x60>)
 8005844:	2201      	movs	r2, #1
 8005846:	605a      	str	r2, [r3, #4]
	}
	CPAP_Average.CPAP_AVG_VAL        = (uint32_t)(CPAP_Average.CPAP_Cumulative_Val/ CPAP_Average.CPAP_Event_Count);
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <CPAP_AVERAGE+0x60>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <CPAP_AVERAGE+0x60>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	fbb2 f3f3 	udiv	r3, r2, r3
 8005854:	b2da      	uxtb	r2, r3
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <CPAP_AVERAGE+0x60>)
 8005858:	721a      	strb	r2, [r3, #8]
	CPAP_Average.CPAP_Cumulative_Val = RESET;
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <CPAP_AVERAGE+0x60>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
	CPAP_Average.CPAP_Event_Count    = RESET;
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <CPAP_AVERAGE+0x60>)
 8005862:	2200      	movs	r2, #0
 8005864:	605a      	str	r2, [r3, #4]

	if(CPAP_Average.CPAP_AVG_VAL   == CPAP.CPAP_Val)
 8005866:	4b08      	ldr	r3, [pc, #32]	; (8005888 <CPAP_AVERAGE+0x60>)
 8005868:	7a1a      	ldrb	r2, [r3, #8]
 800586a:	4b08      	ldr	r3, [pc, #32]	; (800588c <CPAP_AVERAGE+0x64>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d107      	bne.n	8005882 <CPAP_AVERAGE+0x5a>
	{
		Change_DAC_Values(CPAP.CPAP_Val,CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL );
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <CPAP_AVERAGE+0x64>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	4a06      	ldr	r2, [pc, #24]	; (8005890 <CPAP_AVERAGE+0x68>)
 8005878:	8892      	ldrh	r2, [r2, #4]
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f003 fefd 	bl	800967c <Change_DAC_Values>
	}
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20013f8c 	.word	0x20013f8c
 800588c:	20013b14 	.word	0x20013b14
 8005890:	20013adc 	.word	0x20013adc

08005894 <TUNE_CPAP_BLOWER>:



static uint16_t TUNE_CPAP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PEEP)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
	if(  ( CPAP_Average.CPAP_AVG_VAL)  > ( Set_PEEP ) && (CPAP_Average.CPAP_AVG_VAL  < (Set_PEEP + 2) ) )
 80058a0:	4b37      	ldr	r3, [pc, #220]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 80058a2:	7a1b      	ldrb	r3, [r3, #8]
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d20c      	bcs.n	80058c4 <TUNE_CPAP_BLOWER+0x30>
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	3301      	adds	r3, #1
 80058ae:	4a34      	ldr	r2, [pc, #208]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 80058b0:	7a12      	ldrb	r2, [r2, #8]
 80058b2:	4293      	cmp	r3, r2
 80058b4:	db06      	blt.n	80058c4 <TUNE_CPAP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	3b0a      	subs	r3, #10
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	e055      	b.n	8005970 <TUNE_CPAP_BLOWER+0xdc>
	}
	else if(  ( CPAP_Average.CPAP_AVG_VAL)  >= ( Set_PEEP + 2 ) && (CPAP_Average.CPAP_AVG_VAL  < (Set_PEEP + 4) ) )
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	3301      	adds	r3, #1
 80058c8:	4a2d      	ldr	r2, [pc, #180]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 80058ca:	7a12      	ldrb	r2, [r2, #8]
 80058cc:	4293      	cmp	r3, r2
 80058ce:	da0c      	bge.n	80058ea <TUNE_CPAP_BLOWER+0x56>
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	3303      	adds	r3, #3
 80058d4:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 80058d6:	7a12      	ldrb	r2, [r2, #8]
 80058d8:	4293      	cmp	r3, r2
 80058da:	db06      	blt.n	80058ea <TUNE_CPAP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	3b14      	subs	r3, #20
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	e042      	b.n	8005970 <TUNE_CPAP_BLOWER+0xdc>
	}
	else if(  ( CPAP_Average.CPAP_AVG_VAL)  >= ( Set_PEEP + 4 )  )
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	3303      	adds	r3, #3
 80058ee:	4a24      	ldr	r2, [pc, #144]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 80058f0:	7a12      	ldrb	r2, [r2, #8]
 80058f2:	4293      	cmp	r3, r2
 80058f4:	da06      	bge.n	8005904 <TUNE_CPAP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	3b28      	subs	r3, #40	; 0x28
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e035      	b.n	8005970 <TUNE_CPAP_BLOWER+0xdc>
	}
	else if( (CPAP_Average.CPAP_AVG_VAL  < Set_PEEP) && (CPAP_Average.CPAP_AVG_VAL  > (Set_PEEP -2) ) )
 8005904:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 8005906:	7a1b      	ldrb	r3, [r3, #8]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	429a      	cmp	r2, r3
 800590c:	d90c      	bls.n	8005928 <TUNE_CPAP_BLOWER+0x94>
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	3b01      	subs	r3, #1
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 8005914:	7a12      	ldrb	r2, [r2, #8]
 8005916:	4293      	cmp	r3, r2
 8005918:	dc06      	bgt.n	8005928 <TUNE_CPAP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	330a      	adds	r3, #10
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	801a      	strh	r2, [r3, #0]
 8005926:	e023      	b.n	8005970 <TUNE_CPAP_BLOWER+0xdc>
	}
	else if(  (CPAP_Average.CPAP_AVG_VAL  <= (Set_PEEP-2) ) && (CPAP_Average.CPAP_AVG_VAL  >  (Set_PEEP-4) ) )
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	3b01      	subs	r3, #1
 800592c:	4a14      	ldr	r2, [pc, #80]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 800592e:	7a12      	ldrb	r2, [r2, #8]
 8005930:	4293      	cmp	r3, r2
 8005932:	dd0c      	ble.n	800594e <TUNE_CPAP_BLOWER+0xba>
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	3b03      	subs	r3, #3
 8005938:	4a11      	ldr	r2, [pc, #68]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 800593a:	7a12      	ldrb	r2, [r2, #8]
 800593c:	4293      	cmp	r3, r2
 800593e:	dc06      	bgt.n	800594e <TUNE_CPAP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	b29a      	uxth	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	e010      	b.n	8005970 <TUNE_CPAP_BLOWER+0xdc>
	}
	else if(  (CPAP_Average.CPAP_AVG_VAL  <= (Set_PEEP-4) )  )
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	3b03      	subs	r3, #3
 8005952:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <TUNE_CPAP_BLOWER+0xec>)
 8005954:	7a12      	ldrb	r2, [r2, #8]
 8005956:	4293      	cmp	r3, r2
 8005958:	dd06      	ble.n	8005968 <TUNE_CPAP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	3328      	adds	r3, #40	; 0x28
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	e003      	b.n	8005970 <TUNE_CPAP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	881a      	ldrh	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	881b      	ldrh	r3, [r3, #0]
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20013f8c 	.word	0x20013f8c

08005984 <RESET_FLAGS>:



static void RESET_FLAGS()
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <RESET_FLAGS+0x44>)
 800598a:	2200      	movs	r2, #0
 800598c:	609a      	str	r2, [r3, #8]
	Peep_Status                   				= PEEP_NOT_ACHEIVED;
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <RESET_FLAGS+0x48>)
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			    = OPENED;
 8005994:	4b0e      	ldr	r3, [pc, #56]	; (80059d0 <RESET_FLAGS+0x4c>)
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
	Patient_Trigger_Count                       = 0;
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <RESET_FLAGS+0x50>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
	Clear_All_Alert_Bits();
 80059a0:	f7fb fae6 	bl	8000f70 <Clear_All_Alert_Bits>
	Send_Bluetooth_Data_Farme                   = SEND_ALERT_FRAME;
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <RESET_FLAGS+0x54>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	701a      	strb	r2, [r3, #0]
	Apnea_Alert                                 = APNEA_ALERT_HAPPEN;
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <RESET_FLAGS+0x58>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	701a      	strb	r2, [r3, #0]
	Alert_Status                                = ALERT_HAPPEN;
 80059b0:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <RESET_FLAGS+0x5c>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
	SET_ALERT_BIT(SECOND_FRAME_UN,_ALERT_APNEA);
 80059b6:	4a0b      	ldr	r2, [pc, #44]	; (80059e4 <RESET_FLAGS+0x60>)
 80059b8:	7913      	ldrb	r3, [r2, #4]
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	7113      	strb	r3, [r2, #4]
	LED_Alert();
 80059c0:	f7fb fff6 	bl	80019b0 <LED_Alert>
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40007400 	.word	0x40007400
 80059cc:	200140f5 	.word	0x200140f5
 80059d0:	200140f4 	.word	0x200140f4
 80059d4:	200140d4 	.word	0x200140d4
 80059d8:	20013d10 	.word	0x20013d10
 80059dc:	200140c0 	.word	0x200140c0
 80059e0:	20013f88 	.word	0x20013f88
 80059e4:	20013b34 	.word	0x20013b34

080059e8 <BACKUP_PC_CMV_START>:



static void BACKUP_PC_CMV_START()
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
	if(Backup_PC_CMV_SET_VALUE == CHANGE_HAPPEN)
 80059ec:	4b42      	ldr	r3, [pc, #264]	; (8005af8 <BACKUP_PC_CMV_START+0x110>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d133      	bne.n	8005a5c <BACKUP_PC_CMV_START+0x74>
	{
		Mode                                                  = Backup_Pccmv;
 80059f4:	4b41      	ldr	r3, [pc, #260]	; (8005afc <BACKUP_PC_CMV_START+0x114>)
 80059f6:	2215      	movs	r2, #21
 80059f8:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 80059fa:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <BACKUP_PC_CMV_START+0x118>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 8005a00:	4b40      	ldr	r3, [pc, #256]	; (8005b04 <BACKUP_PC_CMV_START+0x11c>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 8005a06:	4b40      	ldr	r3, [pc, #256]	; (8005b08 <BACKUP_PC_CMV_START+0x120>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f003 fc78 	bl	8009300 <DAC_VAL>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b3d      	ldr	r3, [pc, #244]	; (8005b0c <BACKUP_PC_CMV_START+0x124>)
 8005a16:	811a      	strh	r2, [r3, #8]
		PIP_control_Task.PIP_Control_Task_Delay               = 10;
 8005a18:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <BACKUP_PC_CMV_START+0x128>)
 8005a1a:	220a      	movs	r2, #10
 8005a1c:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = 70;
 8005a1e:	4b3c      	ldr	r3, [pc, #240]	; (8005b10 <BACKUP_PC_CMV_START+0x128>)
 8005a20:	2246      	movs	r2, #70	; 0x46
 8005a22:	80da      	strh	r2, [r3, #6]
		PIP_Average_Parameter.PIP_Cumulative_Val              = 1;
 8005a24:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <BACKUP_PC_CMV_START+0x12c>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	605a      	str	r2, [r3, #4]
		PIP_Average_Parameter.PIP_Event_Count                 = 1;
 8005a2a:	4b3a      	ldr	r3, [pc, #232]	; (8005b14 <BACKUP_PC_CMV_START+0x12c>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 8005a30:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <BACKUP_PC_CMV_START+0x130>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8005a36:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <BACKUP_PC_CMV_START+0x130>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	60da      	str	r2, [r3, #12]
		Need_PID_Task_Delay                                   = NO;
 8005a3c:	4b37      	ldr	r3, [pc, #220]	; (8005b1c <BACKUP_PC_CMV_START+0x134>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
		Tune_PID_Task_Delay                                   = T_OPEN;
 8005a42:	4b37      	ldr	r3, [pc, #220]	; (8005b20 <BACKUP_PC_CMV_START+0x138>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
		PIP_control_Task.Low_PIP_Count                        = RESET;
 8005a48:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <BACKUP_PC_CMV_START+0x128>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	729a      	strb	r2, [r3, #10]
		PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 8005a4e:	4b30      	ldr	r3, [pc, #192]	; (8005b10 <BACKUP_PC_CMV_START+0x128>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	725a      	strb	r2, [r3, #9]
		Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 8005a54:	4b33      	ldr	r3, [pc, #204]	; (8005b24 <BACKUP_PC_CMV_START+0x13c>)
 8005a56:	2201      	movs	r2, #1
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	e023      	b.n	8005aa4 <BACKUP_PC_CMV_START+0xbc>
	}
	else if(Backup_PC_CMV_SET_VALUE == NO_CHANGES)
 8005a5c:	4b26      	ldr	r3, [pc, #152]	; (8005af8 <BACKUP_PC_CMV_START+0x110>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d11f      	bne.n	8005aa4 <BACKUP_PC_CMV_START+0xbc>
	{
		Mode                                                  = Backup_Pccmv;
 8005a64:	4b25      	ldr	r3, [pc, #148]	; (8005afc <BACKUP_PC_CMV_START+0x114>)
 8005a66:	2215      	movs	r2, #21
 8005a68:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 8005a6a:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <BACKUP_PC_CMV_START+0x118>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 8005a70:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <BACKUP_PC_CMV_START+0x11c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = OLD.LAST_BLOWER_ENDING_DAC_SIGNAL;;
 8005a76:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <BACKUP_PC_CMV_START+0x140>)
 8005a78:	8a9a      	ldrh	r2, [r3, #20]
 8005a7a:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <BACKUP_PC_CMV_START+0x124>)
 8005a7c:	811a      	strh	r2, [r3, #8]
		PIP_control_Task.PIP_Control_Task_Delay               = OLD.LAST_PIP_Control_Task_Delay;
 8005a7e:	4b2a      	ldr	r3, [pc, #168]	; (8005b28 <BACKUP_PC_CMV_START+0x140>)
 8005a80:	8ada      	ldrh	r2, [r3, #22]
 8005a82:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <BACKUP_PC_CMV_START+0x128>)
 8005a84:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = OLD.LAST_Increase_Each_DAC_SET_CONST;
 8005a86:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <BACKUP_PC_CMV_START+0x140>)
 8005a88:	8b1a      	ldrh	r2, [r3, #24]
 8005a8a:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <BACKUP_PC_CMV_START+0x128>)
 8005a8c:	80da      	strh	r2, [r3, #6]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = PEEP_Maintain_Parameter.PEEP_AVG_VAL;
 8005a8e:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <BACKUP_PC_CMV_START+0x130>)
 8005a90:	7c1b      	ldrb	r3, [r3, #16]
 8005a92:	461a      	mov	r2, r3
 8005a94:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <BACKUP_PC_CMV_START+0x130>)
 8005a96:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8005a98:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <BACKUP_PC_CMV_START+0x130>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 8005a9e:	4b21      	ldr	r3, [pc, #132]	; (8005b24 <BACKUP_PC_CMV_START+0x13c>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
	}

	vTaskResume(One_Time_Handler);
 8005aa4:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <BACKUP_PC_CMV_START+0x144>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f019 fcb7 	bl	801f41c <vTaskResume>
	vTaskResume(BACKUP_PC_Handler);
 8005aae:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <BACKUP_PC_CMV_START+0x148>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f019 fcb2 	bl	801f41c <vTaskResume>
	vTaskResume(PIP_Control_Task_Handler);
 8005ab8:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <BACKUP_PC_CMV_START+0x14c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f019 fcad 	bl	801f41c <vTaskResume>
	vTaskResume(Alert_Handler);
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <BACKUP_PC_CMV_START+0x150>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f019 fca8 	bl	801f41c <vTaskResume>
	if(Common_Mode_Parameter._FIO2_Val > 21)
 8005acc:	4b1b      	ldr	r3, [pc, #108]	; (8005b3c <BACKUP_PC_CMV_START+0x154>)
 8005ace:	78db      	ldrb	r3, [r3, #3]
 8005ad0:	2b15      	cmp	r3, #21
 8005ad2:	d905      	bls.n	8005ae0 <BACKUP_PC_CMV_START+0xf8>
	{
		vTaskResume(Oxygen_Blending_Handler);
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <BACKUP_PC_CMV_START+0x158>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f019 fc9f 	bl	801f41c <vTaskResume>
 8005ade:	e004      	b.n	8005aea <BACKUP_PC_CMV_START+0x102>
	}
	else
	{
		vTaskSuspend(Oxygen_Blending_Handler);
 8005ae0:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <BACKUP_PC_CMV_START+0x158>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f019 fbd5 	bl	801f294 <vTaskSuspend>
	}
	//vTaskResume(LED_Strip_Task_Handler);
	vTaskSuspend(CPAP_Handler);
 8005aea:	4b16      	ldr	r3, [pc, #88]	; (8005b44 <BACKUP_PC_CMV_START+0x15c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f019 fbd0 	bl	801f294 <vTaskSuspend>
}
 8005af4:	bf00      	nop
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20013c44 	.word	0x20013c44
 8005afc:	20013d48 	.word	0x20013d48
 8005b00:	200140f5 	.word	0x200140f5
 8005b04:	200140f4 	.word	0x200140f4
 8005b08:	20013930 	.word	0x20013930
 8005b0c:	20014030 	.word	0x20014030
 8005b10:	20013b04 	.word	0x20013b04
 8005b14:	20013b70 	.word	0x20013b70
 8005b18:	20014300 	.word	0x20014300
 8005b1c:	200140f6 	.word	0x200140f6
 8005b20:	20013c88 	.word	0x20013c88
 8005b24:	20013d20 	.word	0x20013d20
 8005b28:	20014298 	.word	0x20014298
 8005b2c:	20014094 	.word	0x20014094
 8005b30:	20013bb4 	.word	0x20013bb4
 8005b34:	20013ba0 	.word	0x20013ba0
 8005b38:	20014020 	.word	0x20014020
 8005b3c:	20013ba4 	.word	0x20013ba4
 8005b40:	20013f24 	.word	0x20013f24
 8005b44:	20014374 	.word	0x20014374

08005b48 <Patient_Circuit_Disconnected_Alert_CPAP>:




static void Patient_Circuit_Disconnected_Alert_CPAP()
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
	if(  (Pressure_sensor.Pressure_Val==0) && (Flow_Sensor_cal._Flow_Val==0 || Flow_Sensor_cal._Flow_Val==-1 || Flow_Sensor_cal._Flow_Val==-2))
 8005b4c:	4b26      	ldr	r3, [pc, #152]	; (8005be8 <Patient_Circuit_Disconnected_Alert_CPAP+0xa0>)
 8005b4e:	789b      	ldrb	r3, [r3, #2]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d146      	bne.n	8005be2 <Patient_Circuit_Disconnected_Alert_CPAP+0x9a>
 8005b54:	4b25      	ldr	r3, [pc, #148]	; (8005bec <Patient_Circuit_Disconnected_Alert_CPAP+0xa4>)
 8005b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <Patient_Circuit_Disconnected_Alert_CPAP+0x28>
 8005b5c:	4b23      	ldr	r3, [pc, #140]	; (8005bec <Patient_Circuit_Disconnected_Alert_CPAP+0xa4>)
 8005b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d004      	beq.n	8005b70 <Patient_Circuit_Disconnected_Alert_CPAP+0x28>
 8005b66:	4b21      	ldr	r3, [pc, #132]	; (8005bec <Patient_Circuit_Disconnected_Alert_CPAP+0xa4>)
 8005b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6a:	f113 0f02 	cmn.w	r3, #2
 8005b6e:	d138      	bne.n	8005be2 <Patient_Circuit_Disconnected_Alert_CPAP+0x9a>
	{
			if((DAC1->DHR12R1)>=400)
 8005b70:	4b1f      	ldr	r3, [pc, #124]	; (8005bf0 <Patient_Circuit_Disconnected_Alert_CPAP+0xa8>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005b78:	d333      	bcc.n	8005be2 <Patient_Circuit_Disconnected_Alert_CPAP+0x9a>
			{
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8005b7a:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <Patient_Circuit_Disconnected_Alert_CPAP+0xac>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d12f      	bne.n	8005be2 <Patient_Circuit_Disconnected_Alert_CPAP+0x9a>
				{
					Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 8005b82:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <Patient_Circuit_Disconnected_Alert_CPAP+0xb0>)
 8005b84:	88db      	ldrh	r3, [r3, #6]
 8005b86:	3301      	adds	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <Patient_Circuit_Disconnected_Alert_CPAP+0xb0>)
 8005b8c:	80da      	strh	r2, [r3, #6]
						if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 500)
 8005b8e:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <Patient_Circuit_Disconnected_Alert_CPAP+0xb0>)
 8005b90:	88db      	ldrh	r3, [r3, #6]
 8005b92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005b96:	d324      	bcc.n	8005be2 <Patient_Circuit_Disconnected_Alert_CPAP+0x9a>
						{
							Clear_All_Alert_Bits();
 8005b98:	f7fb f9ea 	bl	8000f70 <Clear_All_Alert_Bits>
							Alert_Status = ALERT_HAPPEN;
 8005b9c:	4b17      	ldr	r3, [pc, #92]	; (8005bfc <Patient_Circuit_Disconnected_Alert_CPAP+0xb4>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
							SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8005ba2:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <Patient_Circuit_Disconnected_Alert_CPAP+0xb8>)
 8005ba4:	78d3      	ldrb	r3, [r2, #3]
 8005ba6:	f043 0310 	orr.w	r3, r3, #16
 8005baa:	70d3      	strb	r3, [r2, #3]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8005bac:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <Patient_Circuit_Disconnected_Alert_CPAP+0xac>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]

							Send_Bluetooth_Data_Farme                = SEND_ALERT_FRAME;
 8005bb2:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <Patient_Circuit_Disconnected_Alert_CPAP+0xbc>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]
							Apnea_Alert                              = APNEA_ALERT_HAPPEN;
 8005bb8:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <Patient_Circuit_Disconnected_Alert_CPAP+0xc0>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	701a      	strb	r2, [r3, #0]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <Patient_Circuit_Disconnected_Alert_CPAP+0xac>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	701a      	strb	r2, [r3, #0]
							LED_Alert();
 8005bc4:	f7fb fef4 	bl	80019b0 <LED_Alert>
							CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL           = DAC_VAL(CPAP.CPAP_Val );
 8005bc8:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <Patient_Circuit_Disconnected_Alert_CPAP+0xc4>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f003 fb97 	bl	8009300 <DAC_VAL>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <Patient_Circuit_Disconnected_Alert_CPAP+0xc8>)
 8005bd8:	805a      	strh	r2, [r3, #2]
							CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL      = CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL;
 8005bda:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <Patient_Circuit_Disconnected_Alert_CPAP+0xc8>)
 8005bdc:	885a      	ldrh	r2, [r3, #2]
 8005bde:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <Patient_Circuit_Disconnected_Alert_CPAP+0xc8>)
 8005be0:	809a      	strh	r2, [r3, #4]

						}
				}
			}
	}
}
 8005be2:	bf00      	nop
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	2001405c 	.word	0x2001405c
 8005bec:	20013fb0 	.word	0x20013fb0
 8005bf0:	40007400 	.word	0x40007400
 8005bf4:	20013ac9 	.word	0x20013ac9
 8005bf8:	20014274 	.word	0x20014274
 8005bfc:	20013f88 	.word	0x20013f88
 8005c00:	20013b34 	.word	0x20013b34
 8005c04:	20013d10 	.word	0x20013d10
 8005c08:	200140c0 	.word	0x200140c0
 8005c0c:	20013b14 	.word	0x20013b14
 8005c10:	20013adc 	.word	0x20013adc

08005c14 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>:
static uint16_t Below_30_RR_Control(uint8_t,uint8_t,uint32_t,uint8_t,uint16_t);
static uint16_t Above_30_RR_Control(uint8_t,uint8_t,uint32_t,uint8_t,uint16_t);


uint16_t PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	603a      	str	r2, [r7, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	71fb      	strb	r3, [r7, #7]
 8005c22:	460b      	mov	r3, r1
 8005c24:	71bb      	strb	r3, [r7, #6]
 8005c26:	4613      	mov	r3, r2
 8005c28:	717b      	strb	r3, [r7, #5]
	uint16_t Time;
	if(Set_Respiratory_Rate < 30)
 8005c2a:	79bb      	ldrb	r3, [r7, #6]
 8005c2c:	2b1d      	cmp	r3, #29
 8005c2e:	d80b      	bhi.n	8005c48 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode+0x34>
	{
		Time = Below_30_RR_Control(Achieved_PEEP,Set_Respiratory_Rate,Inspiration_Time_in_MS,Set_PEEP,Valve_Open_Time);
 8005c30:	797a      	ldrb	r2, [r7, #5]
 8005c32:	79b9      	ldrb	r1, [r7, #6]
 8005c34:	79f8      	ldrb	r0, [r7, #7]
 8005c36:	8b3b      	ldrh	r3, [r7, #24]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	f000 f813 	bl	8005c68 <Below_30_RR_Control>
 8005c42:	4603      	mov	r3, r0
 8005c44:	81fb      	strh	r3, [r7, #14]
 8005c46:	e00a      	b.n	8005c5e <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode+0x4a>
	}
	else
	{
		Time = Above_30_RR_Control(Achieved_PEEP,Set_Respiratory_Rate,Inspiration_Time_in_MS,Set_PEEP,Valve_Open_Time);
 8005c48:	797a      	ldrb	r2, [r7, #5]
 8005c4a:	79b9      	ldrb	r1, [r7, #6]
 8005c4c:	79f8      	ldrb	r0, [r7, #7]
 8005c4e:	8b3b      	ldrh	r3, [r7, #24]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	4613      	mov	r3, r2
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	f000 f9c7 	bl	8005fe8 <Above_30_RR_Control>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	81fb      	strh	r3, [r7, #14]
	}
	return Time;
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <Below_30_RR_Control>:


static uint16_t Below_30_RR_Control(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	603a      	str	r2, [r7, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	4603      	mov	r3, r0
 8005c74:	71fb      	strb	r3, [r7, #7]
 8005c76:	460b      	mov	r3, r1
 8005c78:	71bb      	strb	r3, [r7, #6]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	717b      	strb	r3, [r7, #5]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if (Achieved_PEEP >  (Set_PEEP+8) )
 8005c7e:	79fa      	ldrb	r2, [r7, #7]
 8005c80:	797b      	ldrb	r3, [r7, #5]
 8005c82:	3308      	adds	r3, #8
 8005c84:	429a      	cmp	r2, r3
 8005c86:	dd2f      	ble.n	8005ce8 <Below_30_RR_Control+0x80>
	{
		Wait_Count_1++;
 8005c88:	4bac      	ldr	r3, [pc, #688]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	4baa      	ldr	r3, [pc, #680]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005c92:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8005c94:	4ba9      	ldr	r3, [pc, #676]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d016      	beq.n	8005cca <Below_30_RR_Control+0x62>
		{
			Valve_Open_Time = (Valve_Open_Time + 100);
 8005c9c:	8a3b      	ldrh	r3, [r7, #16]
 8005c9e:	3364      	adds	r3, #100	; 0x64
 8005ca0:	823b      	strh	r3, [r7, #16]
			Wait_Count_1    = RESET;
 8005ca2:	4ba6      	ldr	r3, [pc, #664]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 8005ca8:	8a3b      	ldrh	r3, [r7, #16]
 8005caa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005cae:	d30c      	bcc.n	8005cca <Below_30_RR_Control+0x62>
				{
					Valve_Open_Time                   = 700;
 8005cb0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8005cb4:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8005cb6:	4ba2      	ldr	r3, [pc, #648]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005cb8:	edd3 7a00 	vldr	s15, [r3]
 8005cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cc4:	4b9e      	ldr	r3, [pc, #632]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005cc6:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8005cca:	4b9d      	ldr	r3, [pc, #628]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005ccc:	edd3 7a00 	vldr	s15, [r3]
 8005cd0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cdc:	f200 8179 	bhi.w	8005fd2 <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8005ce0:	4b97      	ldr	r3, [pc, #604]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005ce2:	4a98      	ldr	r2, [pc, #608]	; (8005f44 <Below_30_RR_Control+0x2dc>)
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e174      	b.n	8005fd2 <Below_30_RR_Control+0x36a>

	}
	else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 8005ce8:	79fa      	ldrb	r2, [r7, #7]
 8005cea:	797b      	ldrb	r3, [r7, #5]
 8005cec:	3302      	adds	r3, #2
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	dd34      	ble.n	8005d5c <Below_30_RR_Control+0xf4>
 8005cf2:	79fa      	ldrb	r2, [r7, #7]
 8005cf4:	797b      	ldrb	r3, [r7, #5]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	dc2f      	bgt.n	8005d5c <Below_30_RR_Control+0xf4>
	{
		Wait_Count_1++;
 8005cfc:	4b8f      	ldr	r3, [pc, #572]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	4b8d      	ldr	r3, [pc, #564]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005d06:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8005d08:	4b8c      	ldr	r3, [pc, #560]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d016      	beq.n	8005d3e <Below_30_RR_Control+0xd6>
		{
			Valve_Open_Time = Valve_Open_Time + 40;
 8005d10:	8a3b      	ldrh	r3, [r7, #16]
 8005d12:	3328      	adds	r3, #40	; 0x28
 8005d14:	823b      	strh	r3, [r7, #16]
			Wait_Count_1    = RESET;
 8005d16:	4b89      	ldr	r3, [pc, #548]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 8005d1c:	8a3b      	ldrh	r3, [r7, #16]
 8005d1e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005d22:	d30c      	bcc.n	8005d3e <Below_30_RR_Control+0xd6>
				{
					Valve_Open_Time                   = 700;
 8005d24:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8005d28:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8005d2a:	4b85      	ldr	r3, [pc, #532]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005d2c:	edd3 7a00 	vldr	s15, [r3]
 8005d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d38:	4b81      	ldr	r3, [pc, #516]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005d3a:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8005d3e:	4b80      	ldr	r3, [pc, #512]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005d40:	edd3 7a00 	vldr	s15, [r3]
 8005d44:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d50:	f200 813f 	bhi.w	8005fd2 <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8005d54:	4b7a      	ldr	r3, [pc, #488]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005d56:	4a7b      	ldr	r2, [pc, #492]	; (8005f44 <Below_30_RR_Control+0x2dc>)
 8005d58:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8005d5a:	e13a      	b.n	8005fd2 <Below_30_RR_Control+0x36a>
	}
	else if( (Achieved_PEEP> Set_PEEP)  && (Achieved_PEEP <= (Set_PEEP+2)) )
 8005d5c:	79fa      	ldrb	r2, [r7, #7]
 8005d5e:	797b      	ldrb	r3, [r7, #5]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d934      	bls.n	8005dce <Below_30_RR_Control+0x166>
 8005d64:	79fa      	ldrb	r2, [r7, #7]
 8005d66:	797b      	ldrb	r3, [r7, #5]
 8005d68:	3302      	adds	r3, #2
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	dc2f      	bgt.n	8005dce <Below_30_RR_Control+0x166>
	{
		Wait_Count_1++;
 8005d6e:	4b73      	ldr	r3, [pc, #460]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4b71      	ldr	r3, [pc, #452]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005d78:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8005d7a:	4b70      	ldr	r3, [pc, #448]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d016      	beq.n	8005db0 <Below_30_RR_Control+0x148>
		{
			Valve_Open_Time = Valve_Open_Time + 10;
 8005d82:	8a3b      	ldrh	r3, [r7, #16]
 8005d84:	330a      	adds	r3, #10
 8005d86:	823b      	strh	r3, [r7, #16]
			Wait_Count_1    = RESET;
 8005d88:	4b6c      	ldr	r3, [pc, #432]	; (8005f3c <Below_30_RR_Control+0x2d4>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 8005d8e:	8a3b      	ldrh	r3, [r7, #16]
 8005d90:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005d94:	d30c      	bcc.n	8005db0 <Below_30_RR_Control+0x148>
				{
					Valve_Open_Time                   = 700;
 8005d96:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8005d9a:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8005d9c:	4b68      	ldr	r3, [pc, #416]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005d9e:	edd3 7a00 	vldr	s15, [r3]
 8005da2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005daa:	4b65      	ldr	r3, [pc, #404]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005dac:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8005db0:	4b63      	ldr	r3, [pc, #396]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005db2:	edd3 7a00 	vldr	s15, [r3]
 8005db6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc2:	f200 8106 	bhi.w	8005fd2 <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8005dc6:	4b5e      	ldr	r3, [pc, #376]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005dc8:	4a5e      	ldr	r2, [pc, #376]	; (8005f44 <Below_30_RR_Control+0x2dc>)
 8005dca:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8005dcc:	e101      	b.n	8005fd2 <Below_30_RR_Control+0x36a>
	}
	else if ((Achieved_PEEP == 0 ) )
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d136      	bne.n	8005e42 <Below_30_RR_Control+0x1da>
	{
		Wait_Count_2++;
 8005dd4:	4b5c      	ldr	r3, [pc, #368]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	4b5a      	ldr	r3, [pc, #360]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005dde:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8005de0:	4b59      	ldr	r3, [pc, #356]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d018      	beq.n	8005e1a <Below_30_RR_Control+0x1b2>
		{
			PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8005de8:	4b55      	ldr	r3, [pc, #340]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005dea:	edd3 7a00 	vldr	s15, [r3]
 8005dee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005df6:	4b52      	ldr	r3, [pc, #328]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005df8:	edc3 7a00 	vstr	s15, [r3]
			Valve_Open_Time                   = (Valve_Open_Time - 10);
 8005dfc:	8a3b      	ldrh	r3, [r7, #16]
 8005dfe:	3b0a      	subs	r3, #10
 8005e00:	823b      	strh	r3, [r7, #16]
			Wait_Count_2                      = RESET;
 8005e02:	4b51      	ldr	r3, [pc, #324]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time > 700) )
 8005e08:	8a3b      	ldrh	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <Below_30_RR_Control+0x1ae>
 8005e0e:	8a3b      	ldrh	r3, [r7, #16]
 8005e10:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005e14:	d901      	bls.n	8005e1a <Below_30_RR_Control+0x1b2>
				{
					Valve_Open_Time = 1;
 8005e16:	2301      	movs	r3, #1
 8005e18:	823b      	strh	r3, [r7, #16]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp  > (Set_PEEP + 10) )
 8005e1a:	4b49      	ldr	r3, [pc, #292]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005e1c:	ed93 7a00 	vldr	s14, [r3]
 8005e20:	797b      	ldrb	r3, [r7, #5]
 8005e22:	330a      	adds	r3, #10
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e34:	f340 80cd 	ble.w	8005fd2 <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp  = PEEP_Maintain_Parameter.PEEP_Temp ;
 8005e38:	4b41      	ldr	r3, [pc, #260]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a40      	ldr	r2, [pc, #256]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	e0c7      	b.n	8005fd2 <Below_30_RR_Control+0x36a>

	}
	else if (Achieved_PEEP< (Set_PEEP -8))
 8005e42:	79fa      	ldrb	r2, [r7, #7]
 8005e44:	797b      	ldrb	r3, [r7, #5]
 8005e46:	3b08      	subs	r3, #8
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	da36      	bge.n	8005eba <Below_30_RR_Control+0x252>
	{
		Wait_Count_2++;
 8005e4c:	4b3e      	ldr	r3, [pc, #248]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	4b3c      	ldr	r3, [pc, #240]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005e56:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8005e58:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d018      	beq.n	8005e92 <Below_30_RR_Control+0x22a>
		{
			Valve_Open_Time = ( Valve_Open_Time - 50);
 8005e60:	8a3b      	ldrh	r3, [r7, #16]
 8005e62:	3b32      	subs	r3, #50	; 0x32
 8005e64:	823b      	strh	r3, [r7, #16]
			Wait_Count_2    = RESET;
 8005e66:	4b38      	ldr	r3, [pc, #224]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
				if ((Valve_Open_Time < 1) || (Valve_Open_Time > 700) )
 8005e6c:	8a3b      	ldrh	r3, [r7, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <Below_30_RR_Control+0x212>
 8005e72:	8a3b      	ldrh	r3, [r7, #16]
 8005e74:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005e78:	d90b      	bls.n	8005e92 <Below_30_RR_Control+0x22a>
				{
					Valve_Open_Time                   = 1;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8005e7e:	4b30      	ldr	r3, [pc, #192]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005e80:	edd3 7a00 	vldr	s15, [r3]
 8005e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e8c:	4b2c      	ldr	r3, [pc, #176]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005e8e:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp> (Set_PEEP + 10) )
 8005e92:	4b2b      	ldr	r3, [pc, #172]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005e94:	ed93 7a00 	vldr	s14, [r3]
 8005e98:	797b      	ldrb	r3, [r7, #5]
 8005e9a:	330a      	adds	r3, #10
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eac:	f340 8091 	ble.w	8005fd2 <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp =PEEP_Maintain_Parameter.PEEP_Temp;
 8005eb0:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a22      	ldr	r2, [pc, #136]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	e08b      	b.n	8005fd2 <Below_30_RR_Control+0x36a>
	}
	else if (( Achieved_PEEP >= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 8005eba:	79fa      	ldrb	r2, [r7, #7]
 8005ebc:	797b      	ldrb	r3, [r7, #5]
 8005ebe:	3b08      	subs	r3, #8
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	db43      	blt.n	8005f4c <Below_30_RR_Control+0x2e4>
 8005ec4:	79fa      	ldrb	r2, [r7, #7]
 8005ec6:	797b      	ldrb	r3, [r7, #5]
 8005ec8:	3b02      	subs	r3, #2
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	da3e      	bge.n	8005f4c <Below_30_RR_Control+0x2e4>
	{
		Wait_Count_2++;
 8005ece:	4b1e      	ldr	r3, [pc, #120]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005ed8:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d018      	beq.n	8005f14 <Below_30_RR_Control+0x2ac>
		{
			Valve_Open_Time = (Valve_Open_Time - 30);
 8005ee2:	8a3b      	ldrh	r3, [r7, #16]
 8005ee4:	3b1e      	subs	r3, #30
 8005ee6:	823b      	strh	r3, [r7, #16]
			Wait_Count_2    = RESET;
 8005ee8:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <Below_30_RR_Control+0x2e0>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time< 1 || Valve_Open_Time > 700)
 8005eee:	8a3b      	ldrh	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <Below_30_RR_Control+0x294>
 8005ef4:	8a3b      	ldrh	r3, [r7, #16]
 8005ef6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005efa:	d90b      	bls.n	8005f14 <Below_30_RR_Control+0x2ac>
				{
					Valve_Open_Time                   = 1;
 8005efc:	2301      	movs	r3, #1
 8005efe:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005f02:	edd3 7a00 	vldr	s15, [r3]
 8005f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005f10:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005f16:	ed93 7a00 	vldr	s14, [r3]
 8005f1a:	797b      	ldrb	r3, [r7, #5]
 8005f1c:	330a      	adds	r3, #10
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2e:	dd50      	ble.n	8005fd2 <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8005f30:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a02      	ldr	r2, [pc, #8]	; (8005f40 <Below_30_RR_Control+0x2d8>)
 8005f36:	6013      	str	r3, [r2, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8005f38:	e04b      	b.n	8005fd2 <Below_30_RR_Control+0x36a>
 8005f3a:	bf00      	nop
 8005f3c:	200001dc 	.word	0x200001dc
 8005f40:	20014300 	.word	0x20014300
 8005f44:	40400000 	.word	0x40400000
 8005f48:	200001dd 	.word	0x200001dd

	}
	else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 8005f4c:	79fa      	ldrb	r2, [r7, #7]
 8005f4e:	797b      	ldrb	r3, [r7, #5]
 8005f50:	3b02      	subs	r3, #2
 8005f52:	429a      	cmp	r2, r3
 8005f54:	db39      	blt.n	8005fca <Below_30_RR_Control+0x362>
 8005f56:	79fa      	ldrb	r2, [r7, #7]
 8005f58:	797b      	ldrb	r3, [r7, #5]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d235      	bcs.n	8005fca <Below_30_RR_Control+0x362>
	{
		Wait_Count_2++;
 8005f5e:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <Below_30_RR_Control+0x378>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <Below_30_RR_Control+0x378>)
 8005f68:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <Below_30_RR_Control+0x378>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d018      	beq.n	8005fa4 <Below_30_RR_Control+0x33c>
		{

			Valve_Open_Time = (Valve_Open_Time - 10);
 8005f72:	8a3b      	ldrh	r3, [r7, #16]
 8005f74:	3b0a      	subs	r3, #10
 8005f76:	823b      	strh	r3, [r7, #16]
			Wait_Count_2    = RESET;
 8005f78:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <Below_30_RR_Control+0x378>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time> 700) )
 8005f7e:	8a3b      	ldrh	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <Below_30_RR_Control+0x324>
 8005f84:	8a3b      	ldrh	r3, [r7, #16]
 8005f86:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005f8a:	d90b      	bls.n	8005fa4 <Below_30_RR_Control+0x33c>
				{
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8005f8c:	4b15      	ldr	r3, [pc, #84]	; (8005fe4 <Below_30_RR_Control+0x37c>)
 8005f8e:	edd3 7a00 	vldr	s15, [r3]
 8005f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f9a:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <Below_30_RR_Control+0x37c>)
 8005f9c:	edc3 7a00 	vstr	s15, [r3]
					Valve_Open_Time                   = 1;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	823b      	strh	r3, [r7, #16]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <Below_30_RR_Control+0x37c>)
 8005fa6:	ed93 7a00 	vldr	s14, [r3]
 8005faa:	797b      	ldrb	r3, [r7, #5]
 8005fac:	330a      	adds	r3, #10
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fbe:	dd08      	ble.n	8005fd2 <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8005fc0:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <Below_30_RR_Control+0x37c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a07      	ldr	r2, [pc, #28]	; (8005fe4 <Below_30_RR_Control+0x37c>)
 8005fc6:	6013      	str	r3, [r2, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8005fc8:	e003      	b.n	8005fd2 <Below_30_RR_Control+0x36a>
	}
	else
		PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <Below_30_RR_Control+0x37c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a05      	ldr	r2, [pc, #20]	; (8005fe4 <Below_30_RR_Control+0x37c>)
 8005fd0:	6013      	str	r3, [r2, #0]

	return Valve_Open_Time;
 8005fd2:	8a3b      	ldrh	r3, [r7, #16]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	200001dd 	.word	0x200001dd
 8005fe4:	20014300 	.word	0x20014300

08005fe8 <Above_30_RR_Control>:



static uint16_t  Above_30_RR_Control(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	603a      	str	r2, [r7, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	71bb      	strb	r3, [r7, #6]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	717b      	strb	r3, [r7, #5]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if ( (Inspiration_Time_in_MS <= 700))
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006004:	d802      	bhi.n	800600c <Above_30_RR_Control+0x24>
		Achieved_PEEP = PEEP_Maintain_Parameter.Maximum_PEEP_Acheived;
 8006006:	4b92      	ldr	r3, [pc, #584]	; (8006250 <Above_30_RR_Control+0x268>)
 8006008:	799b      	ldrb	r3, [r3, #6]
 800600a:	71fb      	strb	r3, [r7, #7]
	PEEP_Maintain_Parameter.Maximum_PEEP_Acheived =0;
 800600c:	4b90      	ldr	r3, [pc, #576]	; (8006250 <Above_30_RR_Control+0x268>)
 800600e:	2200      	movs	r2, #0
 8006010:	719a      	strb	r2, [r3, #6]

		if (Achieved_PEEP> (Set_PEEP +8) )
 8006012:	79fa      	ldrb	r2, [r7, #7]
 8006014:	797b      	ldrb	r3, [r7, #5]
 8006016:	3308      	adds	r3, #8
 8006018:	429a      	cmp	r2, r3
 800601a:	dd2f      	ble.n	800607c <Above_30_RR_Control+0x94>
		{
			Wait_Count_1++;
 800601c:	4b8d      	ldr	r3, [pc, #564]	; (8006254 <Above_30_RR_Control+0x26c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	3301      	adds	r3, #1
 8006022:	b2da      	uxtb	r2, r3
 8006024:	4b8b      	ldr	r3, [pc, #556]	; (8006254 <Above_30_RR_Control+0x26c>)
 8006026:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 8006028:	4b8a      	ldr	r3, [pc, #552]	; (8006254 <Above_30_RR_Control+0x26c>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d916      	bls.n	800605e <Above_30_RR_Control+0x76>
			{
				Valve_Open_Time = (Valve_Open_Time + 100);
 8006030:	8a3b      	ldrh	r3, [r7, #16]
 8006032:	3364      	adds	r3, #100	; 0x64
 8006034:	823b      	strh	r3, [r7, #16]
				Wait_Count_1    = RESET;
 8006036:	4b87      	ldr	r3, [pc, #540]	; (8006254 <Above_30_RR_Control+0x26c>)
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 800603c:	8a3b      	ldrh	r3, [r7, #16]
 800603e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006042:	d90c      	bls.n	800605e <Above_30_RR_Control+0x76>
					{
						Valve_Open_Time                   = 700;
 8006044:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8006048:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 800604a:	4b81      	ldr	r3, [pc, #516]	; (8006250 <Above_30_RR_Control+0x268>)
 800604c:	edd3 7a00 	vldr	s15, [r3]
 8006050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006054:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006058:	4b7d      	ldr	r3, [pc, #500]	; (8006250 <Above_30_RR_Control+0x268>)
 800605a:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800605e:	4b7c      	ldr	r3, [pc, #496]	; (8006250 <Above_30_RR_Control+0x268>)
 8006060:	edd3 7a00 	vldr	s15, [r3]
 8006064:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800606c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006070:	f200 8179 	bhi.w	8006366 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8006074:	4b76      	ldr	r3, [pc, #472]	; (8006250 <Above_30_RR_Control+0x268>)
 8006076:	4a78      	ldr	r2, [pc, #480]	; (8006258 <Above_30_RR_Control+0x270>)
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e174      	b.n	8006366 <Above_30_RR_Control+0x37e>
		}
		else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 800607c:	79fa      	ldrb	r2, [r7, #7]
 800607e:	797b      	ldrb	r3, [r7, #5]
 8006080:	3302      	adds	r3, #2
 8006082:	429a      	cmp	r2, r3
 8006084:	dd34      	ble.n	80060f0 <Above_30_RR_Control+0x108>
 8006086:	79fa      	ldrb	r2, [r7, #7]
 8006088:	797b      	ldrb	r3, [r7, #5]
 800608a:	3308      	adds	r3, #8
 800608c:	429a      	cmp	r2, r3
 800608e:	dc2f      	bgt.n	80060f0 <Above_30_RR_Control+0x108>
		{
			Wait_Count_1++;
 8006090:	4b70      	ldr	r3, [pc, #448]	; (8006254 <Above_30_RR_Control+0x26c>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	4b6e      	ldr	r3, [pc, #440]	; (8006254 <Above_30_RR_Control+0x26c>)
 800609a:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 800609c:	4b6d      	ldr	r3, [pc, #436]	; (8006254 <Above_30_RR_Control+0x26c>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d916      	bls.n	80060d2 <Above_30_RR_Control+0xea>
			{
				Valve_Open_Time = (Valve_Open_Time + 40);
 80060a4:	8a3b      	ldrh	r3, [r7, #16]
 80060a6:	3328      	adds	r3, #40	; 0x28
 80060a8:	823b      	strh	r3, [r7, #16]
				Wait_Count_1    = RESET;
 80060aa:	4b6a      	ldr	r3, [pc, #424]	; (8006254 <Above_30_RR_Control+0x26c>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 80060b0:	8a3b      	ldrh	r3, [r7, #16]
 80060b2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80060b6:	d90c      	bls.n	80060d2 <Above_30_RR_Control+0xea>
					{
						Valve_Open_Time                   = 700;
 80060b8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80060bc:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 80060be:	4b64      	ldr	r3, [pc, #400]	; (8006250 <Above_30_RR_Control+0x268>)
 80060c0:	edd3 7a00 	vldr	s15, [r3]
 80060c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060cc:	4b60      	ldr	r3, [pc, #384]	; (8006250 <Above_30_RR_Control+0x268>)
 80060ce:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80060d2:	4b5f      	ldr	r3, [pc, #380]	; (8006250 <Above_30_RR_Control+0x268>)
 80060d4:	edd3 7a00 	vldr	s15, [r3]
 80060d8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80060dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e4:	f200 813f 	bhi.w	8006366 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 80060e8:	4b59      	ldr	r3, [pc, #356]	; (8006250 <Above_30_RR_Control+0x268>)
 80060ea:	4a5b      	ldr	r2, [pc, #364]	; (8006258 <Above_30_RR_Control+0x270>)
 80060ec:	601a      	str	r2, [r3, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80060ee:	e13a      	b.n	8006366 <Above_30_RR_Control+0x37e>
		}


		else if( (Achieved_PEEP> (Set_PEEP))  && (Achieved_PEEP<= (Set_PEEP+2)) )
 80060f0:	79fa      	ldrb	r2, [r7, #7]
 80060f2:	797b      	ldrb	r3, [r7, #5]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d934      	bls.n	8006162 <Above_30_RR_Control+0x17a>
 80060f8:	79fa      	ldrb	r2, [r7, #7]
 80060fa:	797b      	ldrb	r3, [r7, #5]
 80060fc:	3302      	adds	r3, #2
 80060fe:	429a      	cmp	r2, r3
 8006100:	dc2f      	bgt.n	8006162 <Above_30_RR_Control+0x17a>
		{
			Wait_Count_1++;
 8006102:	4b54      	ldr	r3, [pc, #336]	; (8006254 <Above_30_RR_Control+0x26c>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	3301      	adds	r3, #1
 8006108:	b2da      	uxtb	r2, r3
 800610a:	4b52      	ldr	r3, [pc, #328]	; (8006254 <Above_30_RR_Control+0x26c>)
 800610c:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 800610e:	4b51      	ldr	r3, [pc, #324]	; (8006254 <Above_30_RR_Control+0x26c>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d916      	bls.n	8006144 <Above_30_RR_Control+0x15c>
			{

				Valve_Open_Time = (Valve_Open_Time + 10);
 8006116:	8a3b      	ldrh	r3, [r7, #16]
 8006118:	330a      	adds	r3, #10
 800611a:	823b      	strh	r3, [r7, #16]
				Wait_Count_1    = RESET;
 800611c:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <Above_30_RR_Control+0x26c>)
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 8006122:	8a3b      	ldrh	r3, [r7, #16]
 8006124:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006128:	d90c      	bls.n	8006144 <Above_30_RR_Control+0x15c>
					{
						Valve_Open_Time                   = 700;
 800612a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800612e:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8006130:	4b47      	ldr	r3, [pc, #284]	; (8006250 <Above_30_RR_Control+0x268>)
 8006132:	edd3 7a00 	vldr	s15, [r3]
 8006136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800613a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800613e:	4b44      	ldr	r3, [pc, #272]	; (8006250 <Above_30_RR_Control+0x268>)
 8006140:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8006144:	4b42      	ldr	r3, [pc, #264]	; (8006250 <Above_30_RR_Control+0x268>)
 8006146:	edd3 7a00 	vldr	s15, [r3]
 800614a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800614e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006156:	f200 8106 	bhi.w	8006366 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 800615a:	4b3d      	ldr	r3, [pc, #244]	; (8006250 <Above_30_RR_Control+0x268>)
 800615c:	4a3e      	ldr	r2, [pc, #248]	; (8006258 <Above_30_RR_Control+0x270>)
 800615e:	601a      	str	r2, [r3, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8006160:	e101      	b.n	8006366 <Above_30_RR_Control+0x37e>
		}
		else if ((Achieved_PEEP== 0 ) )
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d136      	bne.n	80061d6 <Above_30_RR_Control+0x1ee>
		{
			Wait_Count_2++;
 8006168:	4b3c      	ldr	r3, [pc, #240]	; (800625c <Above_30_RR_Control+0x274>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	3301      	adds	r3, #1
 800616e:	b2da      	uxtb	r2, r3
 8006170:	4b3a      	ldr	r3, [pc, #232]	; (800625c <Above_30_RR_Control+0x274>)
 8006172:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8006174:	4b39      	ldr	r3, [pc, #228]	; (800625c <Above_30_RR_Control+0x274>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d918      	bls.n	80061ae <Above_30_RR_Control+0x1c6>
			{
				PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 800617c:	4b34      	ldr	r3, [pc, #208]	; (8006250 <Above_30_RR_Control+0x268>)
 800617e:	edd3 7a00 	vldr	s15, [r3]
 8006182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006186:	ee77 7a87 	vadd.f32	s15, s15, s14
 800618a:	4b31      	ldr	r3, [pc, #196]	; (8006250 <Above_30_RR_Control+0x268>)
 800618c:	edc3 7a00 	vstr	s15, [r3]
				Valve_Open_Time                   =( Valve_Open_Time - 10);
 8006190:	8a3b      	ldrh	r3, [r7, #16]
 8006192:	3b0a      	subs	r3, #10
 8006194:	823b      	strh	r3, [r7, #16]
				Wait_Count_2 = RESET;
 8006196:	4b31      	ldr	r3, [pc, #196]	; (800625c <Above_30_RR_Control+0x274>)
 8006198:	2200      	movs	r2, #0
 800619a:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 800619c:	8a3b      	ldrh	r3, [r7, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <Above_30_RR_Control+0x1c2>
 80061a2:	8a3b      	ldrh	r3, [r7, #16]
 80061a4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80061a8:	d901      	bls.n	80061ae <Above_30_RR_Control+0x1c6>
					{
						Valve_Open_Time = 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	823b      	strh	r3, [r7, #16]

					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 80061ae:	4b28      	ldr	r3, [pc, #160]	; (8006250 <Above_30_RR_Control+0x268>)
 80061b0:	ed93 7a00 	vldr	s14, [r3]
 80061b4:	797b      	ldrb	r3, [r7, #5]
 80061b6:	330a      	adds	r3, #10
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c8:	f340 80cd 	ble.w	8006366 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 80061cc:	4b20      	ldr	r3, [pc, #128]	; (8006250 <Above_30_RR_Control+0x268>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <Above_30_RR_Control+0x268>)
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e0c7      	b.n	8006366 <Above_30_RR_Control+0x37e>
		}
		else if ((Achieved_PEEP< (Set_PEEP -8)))
 80061d6:	79fa      	ldrb	r2, [r7, #7]
 80061d8:	797b      	ldrb	r3, [r7, #5]
 80061da:	3b08      	subs	r3, #8
 80061dc:	429a      	cmp	r2, r3
 80061de:	da3f      	bge.n	8006260 <Above_30_RR_Control+0x278>
		{
			Wait_Count_2++;
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <Above_30_RR_Control+0x274>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	3301      	adds	r3, #1
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	4b1c      	ldr	r3, [pc, #112]	; (800625c <Above_30_RR_Control+0x274>)
 80061ea:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <Above_30_RR_Control+0x274>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d918      	bls.n	8006226 <Above_30_RR_Control+0x23e>
			{
				Valve_Open_Time = (Valve_Open_Time - 50);
 80061f4:	8a3b      	ldrh	r3, [r7, #16]
 80061f6:	3b32      	subs	r3, #50	; 0x32
 80061f8:	823b      	strh	r3, [r7, #16]
				Wait_Count_2    = RESET;
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <Above_30_RR_Control+0x274>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8006200:	8a3b      	ldrh	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <Above_30_RR_Control+0x226>
 8006206:	8a3b      	ldrh	r3, [r7, #16]
 8006208:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800620c:	d90b      	bls.n	8006226 <Above_30_RR_Control+0x23e>
					{
						Valve_Open_Time                   = 1;
 800620e:	2301      	movs	r3, #1
 8006210:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8006212:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <Above_30_RR_Control+0x268>)
 8006214:	edd3 7a00 	vldr	s15, [r3]
 8006218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800621c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <Above_30_RR_Control+0x268>)
 8006222:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > Set_PEEP + 10)
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <Above_30_RR_Control+0x268>)
 8006228:	ed93 7a00 	vldr	s14, [r3]
 800622c:	797b      	ldrb	r3, [r7, #5]
 800622e:	330a      	adds	r3, #10
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006240:	f340 8091 	ble.w	8006366 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8006244:	4b02      	ldr	r3, [pc, #8]	; (8006250 <Above_30_RR_Control+0x268>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a01      	ldr	r2, [pc, #4]	; (8006250 <Above_30_RR_Control+0x268>)
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	e08b      	b.n	8006366 <Above_30_RR_Control+0x37e>
 800624e:	bf00      	nop
 8006250:	20014300 	.word	0x20014300
 8006254:	200001de 	.word	0x200001de
 8006258:	40400000 	.word	0x40400000
 800625c:	200001df 	.word	0x200001df
		}
		else if ((Achieved_PEEP>= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 8006260:	79fa      	ldrb	r2, [r7, #7]
 8006262:	797b      	ldrb	r3, [r7, #5]
 8006264:	3b08      	subs	r3, #8
 8006266:	429a      	cmp	r2, r3
 8006268:	db3a      	blt.n	80062e0 <Above_30_RR_Control+0x2f8>
 800626a:	79fa      	ldrb	r2, [r7, #7]
 800626c:	797b      	ldrb	r3, [r7, #5]
 800626e:	3b02      	subs	r3, #2
 8006270:	429a      	cmp	r2, r3
 8006272:	da35      	bge.n	80062e0 <Above_30_RR_Control+0x2f8>
		{
			Wait_Count_2++;
 8006274:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <Above_30_RR_Control+0x38c>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	3301      	adds	r3, #1
 800627a:	b2da      	uxtb	r2, r3
 800627c:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <Above_30_RR_Control+0x38c>)
 800627e:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8006280:	4b3c      	ldr	r3, [pc, #240]	; (8006374 <Above_30_RR_Control+0x38c>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d918      	bls.n	80062ba <Above_30_RR_Control+0x2d2>
			{
				Valve_Open_Time = (Valve_Open_Time - 30);
 8006288:	8a3b      	ldrh	r3, [r7, #16]
 800628a:	3b1e      	subs	r3, #30
 800628c:	823b      	strh	r3, [r7, #16]
				Wait_Count_2    = RESET;
 800628e:	4b39      	ldr	r3, [pc, #228]	; (8006374 <Above_30_RR_Control+0x38c>)
 8006290:	2200      	movs	r2, #0
 8006292:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8006294:	8a3b      	ldrh	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <Above_30_RR_Control+0x2ba>
 800629a:	8a3b      	ldrh	r3, [r7, #16]
 800629c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80062a0:	d90b      	bls.n	80062ba <Above_30_RR_Control+0x2d2>
					{
						Valve_Open_Time                   = 1;
 80062a2:	2301      	movs	r3, #1
 80062a4:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 80062a6:	4b34      	ldr	r3, [pc, #208]	; (8006378 <Above_30_RR_Control+0x390>)
 80062a8:	edd3 7a00 	vldr	s15, [r3]
 80062ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062b4:	4b30      	ldr	r3, [pc, #192]	; (8006378 <Above_30_RR_Control+0x390>)
 80062b6:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 80062ba:	4b2f      	ldr	r3, [pc, #188]	; (8006378 <Above_30_RR_Control+0x390>)
 80062bc:	ed93 7a00 	vldr	s14, [r3]
 80062c0:	797b      	ldrb	r3, [r7, #5]
 80062c2:	330a      	adds	r3, #10
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d4:	dd47      	ble.n	8006366 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 80062d6:	4b28      	ldr	r3, [pc, #160]	; (8006378 <Above_30_RR_Control+0x390>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a27      	ldr	r2, [pc, #156]	; (8006378 <Above_30_RR_Control+0x390>)
 80062dc:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 80062de:	e042      	b.n	8006366 <Above_30_RR_Control+0x37e>
		}
		else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 80062e0:	79fa      	ldrb	r2, [r7, #7]
 80062e2:	797b      	ldrb	r3, [r7, #5]
 80062e4:	3b02      	subs	r3, #2
 80062e6:	429a      	cmp	r2, r3
 80062e8:	db39      	blt.n	800635e <Above_30_RR_Control+0x376>
 80062ea:	79fa      	ldrb	r2, [r7, #7]
 80062ec:	797b      	ldrb	r3, [r7, #5]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d235      	bcs.n	800635e <Above_30_RR_Control+0x376>
		{
			Wait_Count_2++;
 80062f2:	4b20      	ldr	r3, [pc, #128]	; (8006374 <Above_30_RR_Control+0x38c>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	3301      	adds	r3, #1
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <Above_30_RR_Control+0x38c>)
 80062fc:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 80062fe:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <Above_30_RR_Control+0x38c>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d918      	bls.n	8006338 <Above_30_RR_Control+0x350>
			{
				Valve_Open_Time = Valve_Open_Time - 10;
 8006306:	8a3b      	ldrh	r3, [r7, #16]
 8006308:	3b0a      	subs	r3, #10
 800630a:	823b      	strh	r3, [r7, #16]
				Wait_Count_2    = RESET;
 800630c:	4b19      	ldr	r3, [pc, #100]	; (8006374 <Above_30_RR_Control+0x38c>)
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8006312:	8a3b      	ldrh	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <Above_30_RR_Control+0x338>
 8006318:	8a3b      	ldrh	r3, [r7, #16]
 800631a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800631e:	d90b      	bls.n	8006338 <Above_30_RR_Control+0x350>
					{
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8006320:	4b15      	ldr	r3, [pc, #84]	; (8006378 <Above_30_RR_Control+0x390>)
 8006322:	edd3 7a00 	vldr	s15, [r3]
 8006326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800632a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800632e:	4b12      	ldr	r3, [pc, #72]	; (8006378 <Above_30_RR_Control+0x390>)
 8006330:	edc3 7a00 	vstr	s15, [r3]
						Valve_Open_Time                   = 1;
 8006334:	2301      	movs	r3, #1
 8006336:	823b      	strh	r3, [r7, #16]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8006338:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <Above_30_RR_Control+0x390>)
 800633a:	ed93 7a00 	vldr	s14, [r3]
 800633e:	797b      	ldrb	r3, [r7, #5]
 8006340:	330a      	adds	r3, #10
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800634a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800634e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006352:	dd08      	ble.n	8006366 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8006354:	4b08      	ldr	r3, [pc, #32]	; (8006378 <Above_30_RR_Control+0x390>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a07      	ldr	r2, [pc, #28]	; (8006378 <Above_30_RR_Control+0x390>)
 800635a:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 800635c:	e003      	b.n	8006366 <Above_30_RR_Control+0x37e>
		}

		else
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 800635e:	4b06      	ldr	r3, [pc, #24]	; (8006378 <Above_30_RR_Control+0x390>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a05      	ldr	r2, [pc, #20]	; (8006378 <Above_30_RR_Control+0x390>)
 8006364:	6013      	str	r3, [r2, #0]


		return Valve_Open_Time;
 8006366:	8a3b      	ldrh	r3, [r7, #16]
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	200001df 	.word	0x200001df
 8006378:	20014300 	.word	0x20014300

0800637c <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode>:
static uint16_t Above_30_RR_Control(uint8_t,uint8_t,uint32_t,float,uint16_t);



uint16_t PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	603a      	str	r2, [r7, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	4603      	mov	r3, r0
 8006388:	71fb      	strb	r3, [r7, #7]
 800638a:	460b      	mov	r3, r1
 800638c:	71bb      	strb	r3, [r7, #6]
 800638e:	4613      	mov	r3, r2
 8006390:	717b      	strb	r3, [r7, #5]
	uint16_t Time;

	if(Set_Respiratory_Rate < 30)
 8006392:	79bb      	ldrb	r3, [r7, #6]
 8006394:	2b1d      	cmp	r3, #29
 8006396:	d80f      	bhi.n	80063b8 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode+0x3c>
	{
		Time = Below_30_RR_Control(Achieved_PEEP,Set_Respiratory_Rate,Inspiration_Time_in_MS,Set_PEEP,Valve_Open_Time);
 8006398:	797b      	ldrb	r3, [r7, #5]
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a2:	8b3b      	ldrh	r3, [r7, #24]
 80063a4:	79b9      	ldrb	r1, [r7, #6]
 80063a6:	79f8      	ldrb	r0, [r7, #7]
 80063a8:	eeb0 0a67 	vmov.f32	s0, s15
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	f000 f817 	bl	80063e0 <Below_30_RR_Control>
 80063b2:	4603      	mov	r3, r0
 80063b4:	81fb      	strh	r3, [r7, #14]
 80063b6:	e00e      	b.n	80063d6 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode+0x5a>
	}
	else
	{
		Time = Above_30_RR_Control(Achieved_PEEP,Set_Respiratory_Rate,Inspiration_Time_in_MS,Set_PEEP,Valve_Open_Time);
 80063b8:	797b      	ldrb	r3, [r7, #5]
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c2:	8b3b      	ldrh	r3, [r7, #24]
 80063c4:	79b9      	ldrb	r1, [r7, #6]
 80063c6:	79f8      	ldrb	r0, [r7, #7]
 80063c8:	eeb0 0a67 	vmov.f32	s0, s15
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	f000 fa31 	bl	8006834 <Above_30_RR_Control>
 80063d2:	4603      	mov	r3, r0
 80063d4:	81fb      	strh	r3, [r7, #14]
	}

	return Time;
 80063d6:	89fb      	ldrh	r3, [r7, #14]


}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <Below_30_RR_Control>:

static uint16_t Below_30_RR_Control(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,float Set_PEEP,uint16_t Valve_Open_Time)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60ba      	str	r2, [r7, #8]
 80063e8:	ed87 0a01 	vstr	s0, [r7, #4]
 80063ec:	461a      	mov	r2, r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	73fb      	strb	r3, [r7, #15]
 80063f2:	460b      	mov	r3, r1
 80063f4:	73bb      	strb	r3, [r7, #14]
 80063f6:	4613      	mov	r3, r2
 80063f8:	81bb      	strh	r3, [r7, #12]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if (Achieved_PEEP >  (Set_PEEP+8) )
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006404:	edd7 7a01 	vldr	s15, [r7, #4]
 8006408:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800640c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006418:	dd2f      	ble.n	800647a <Below_30_RR_Control+0x9a>
	{
		Wait_Count_1++;
 800641a:	4ba6      	ldr	r3, [pc, #664]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	b2da      	uxtb	r2, r3
 8006422:	4ba4      	ldr	r3, [pc, #656]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 8006424:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8006426:	4ba3      	ldr	r3, [pc, #652]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d016      	beq.n	800645c <Below_30_RR_Control+0x7c>
		{
			Valve_Open_Time = (Valve_Open_Time + 100);
 800642e:	89bb      	ldrh	r3, [r7, #12]
 8006430:	3364      	adds	r3, #100	; 0x64
 8006432:	81bb      	strh	r3, [r7, #12]
			Wait_Count_1    = RESET;
 8006434:	4b9f      	ldr	r3, [pc, #636]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 8006436:	2200      	movs	r2, #0
 8006438:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 800643a:	89bb      	ldrh	r3, [r7, #12]
 800643c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006440:	d30c      	bcc.n	800645c <Below_30_RR_Control+0x7c>
				{
					Valve_Open_Time                   = 700;
 8006442:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8006446:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8006448:	4b9b      	ldr	r3, [pc, #620]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 800644a:	edd3 7a00 	vldr	s15, [r3]
 800644e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006456:	4b98      	ldr	r3, [pc, #608]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 8006458:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800645c:	4b96      	ldr	r3, [pc, #600]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 800645e:	edd3 7a00 	vldr	s15, [r3]
 8006462:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646e:	f200 81d5 	bhi.w	800681c <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8006472:	4b91      	ldr	r3, [pc, #580]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 8006474:	4a91      	ldr	r2, [pc, #580]	; (80066bc <Below_30_RR_Control+0x2dc>)
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	e1d0      	b.n	800681c <Below_30_RR_Control+0x43c>

	}
	else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006484:	edd7 7a01 	vldr	s15, [r7, #4]
 8006488:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800648c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006498:	dd3f      	ble.n	800651a <Below_30_RR_Control+0x13a>
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	ee07 3a90 	vmov	s15, r3
 80064a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80064a8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80064ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b8:	d82f      	bhi.n	800651a <Below_30_RR_Control+0x13a>
	{
		Wait_Count_1++;
 80064ba:	4b7e      	ldr	r3, [pc, #504]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	3301      	adds	r3, #1
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	4b7c      	ldr	r3, [pc, #496]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 80064c4:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 80064c6:	4b7b      	ldr	r3, [pc, #492]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d016      	beq.n	80064fc <Below_30_RR_Control+0x11c>
		{
			Valve_Open_Time = Valve_Open_Time + 40;
 80064ce:	89bb      	ldrh	r3, [r7, #12]
 80064d0:	3328      	adds	r3, #40	; 0x28
 80064d2:	81bb      	strh	r3, [r7, #12]
			Wait_Count_1    = RESET;
 80064d4:	4b77      	ldr	r3, [pc, #476]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 80064da:	89bb      	ldrh	r3, [r7, #12]
 80064dc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80064e0:	d30c      	bcc.n	80064fc <Below_30_RR_Control+0x11c>
				{
					Valve_Open_Time                   = 700;
 80064e2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80064e6:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 80064e8:	4b73      	ldr	r3, [pc, #460]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 80064ea:	edd3 7a00 	vldr	s15, [r3]
 80064ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064f6:	4b70      	ldr	r3, [pc, #448]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 80064f8:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80064fc:	4b6e      	ldr	r3, [pc, #440]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 80064fe:	edd3 7a00 	vldr	s15, [r3]
 8006502:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800650a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800650e:	f200 8185 	bhi.w	800681c <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8006512:	4b69      	ldr	r3, [pc, #420]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 8006514:	4a69      	ldr	r2, [pc, #420]	; (80066bc <Below_30_RR_Control+0x2dc>)
 8006516:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8006518:	e180      	b.n	800681c <Below_30_RR_Control+0x43c>
	}
	else if( (Achieved_PEEP> Set_PEEP)  && (Achieved_PEEP <= (Set_PEEP+2)) )
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	ee07 3a90 	vmov	s15, r3
 8006520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006524:	ed97 7a01 	vldr	s14, [r7, #4]
 8006528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800652c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006530:	d53f      	bpl.n	80065b2 <Below_30_RR_Control+0x1d2>
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	ee07 3a90 	vmov	s15, r3
 8006538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800653c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006540:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006550:	d82f      	bhi.n	80065b2 <Below_30_RR_Control+0x1d2>
	{
		Wait_Count_1++;
 8006552:	4b58      	ldr	r3, [pc, #352]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	b2da      	uxtb	r2, r3
 800655a:	4b56      	ldr	r3, [pc, #344]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 800655c:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 800655e:	4b55      	ldr	r3, [pc, #340]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d016      	beq.n	8006594 <Below_30_RR_Control+0x1b4>
		{
			Valve_Open_Time = Valve_Open_Time + 10;
 8006566:	89bb      	ldrh	r3, [r7, #12]
 8006568:	330a      	adds	r3, #10
 800656a:	81bb      	strh	r3, [r7, #12]
			Wait_Count_1    = RESET;
 800656c:	4b51      	ldr	r3, [pc, #324]	; (80066b4 <Below_30_RR_Control+0x2d4>)
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 8006572:	89bb      	ldrh	r3, [r7, #12]
 8006574:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006578:	d30c      	bcc.n	8006594 <Below_30_RR_Control+0x1b4>
				{
					Valve_Open_Time                   = 700;
 800657a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800657e:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8006580:	4b4d      	ldr	r3, [pc, #308]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 8006582:	edd3 7a00 	vldr	s15, [r3]
 8006586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800658a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800658e:	4b4a      	ldr	r3, [pc, #296]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 8006590:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8006594:	4b48      	ldr	r3, [pc, #288]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 8006596:	edd3 7a00 	vldr	s15, [r3]
 800659a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800659e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	f200 8139 	bhi.w	800681c <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 80065aa:	4b43      	ldr	r3, [pc, #268]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 80065ac:	4a43      	ldr	r2, [pc, #268]	; (80066bc <Below_30_RR_Control+0x2dc>)
 80065ae:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80065b0:	e134      	b.n	800681c <Below_30_RR_Control+0x43c>
	}
	else if ((Achieved_PEEP == 0 ) )
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d136      	bne.n	8006626 <Below_30_RR_Control+0x246>
	{
		Wait_Count_2++;
 80065b8:	4b41      	ldr	r3, [pc, #260]	; (80066c0 <Below_30_RR_Control+0x2e0>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	3301      	adds	r3, #1
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <Below_30_RR_Control+0x2e0>)
 80065c2:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 1)
 80065c4:	4b3e      	ldr	r3, [pc, #248]	; (80066c0 <Below_30_RR_Control+0x2e0>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d918      	bls.n	80065fe <Below_30_RR_Control+0x21e>
		{
			PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 80065cc:	4b3a      	ldr	r3, [pc, #232]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 80065ce:	edd3 7a00 	vldr	s15, [r3]
 80065d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065da:	4b37      	ldr	r3, [pc, #220]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 80065dc:	edc3 7a00 	vstr	s15, [r3]
			Valve_Open_Time                   = (Valve_Open_Time - 10);
 80065e0:	89bb      	ldrh	r3, [r7, #12]
 80065e2:	3b0a      	subs	r3, #10
 80065e4:	81bb      	strh	r3, [r7, #12]
			Wait_Count_2                      = RESET;
 80065e6:	4b36      	ldr	r3, [pc, #216]	; (80066c0 <Below_30_RR_Control+0x2e0>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time > 700) )
 80065ec:	89bb      	ldrh	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <Below_30_RR_Control+0x21a>
 80065f2:	89bb      	ldrh	r3, [r7, #12]
 80065f4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80065f8:	d901      	bls.n	80065fe <Below_30_RR_Control+0x21e>
				{
					Valve_Open_Time = 1;
 80065fa:	2301      	movs	r3, #1
 80065fc:	81bb      	strh	r3, [r7, #12]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp  > (Set_PEEP + 10) )
 80065fe:	4b2e      	ldr	r3, [pc, #184]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 8006600:	ed93 7a00 	vldr	s14, [r3]
 8006604:	edd7 7a01 	vldr	s15, [r7, #4]
 8006608:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800660c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006618:	f340 8100 	ble.w	800681c <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp  = PEEP_Maintain_Parameter.PEEP_Temp ;
 800661c:	4b26      	ldr	r3, [pc, #152]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a25      	ldr	r2, [pc, #148]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e0fa      	b.n	800681c <Below_30_RR_Control+0x43c>

	}
	else if (Achieved_PEEP< (Set_PEEP -8))
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006630:	edd7 7a01 	vldr	s15, [r7, #4]
 8006634:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006638:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800663c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006644:	d53e      	bpl.n	80066c4 <Below_30_RR_Control+0x2e4>
	{
		Wait_Count_2++;
 8006646:	4b1e      	ldr	r3, [pc, #120]	; (80066c0 <Below_30_RR_Control+0x2e0>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <Below_30_RR_Control+0x2e0>)
 8006650:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8006652:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <Below_30_RR_Control+0x2e0>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d018      	beq.n	800668c <Below_30_RR_Control+0x2ac>
		{
			Valve_Open_Time = ( Valve_Open_Time - 50);
 800665a:	89bb      	ldrh	r3, [r7, #12]
 800665c:	3b32      	subs	r3, #50	; 0x32
 800665e:	81bb      	strh	r3, [r7, #12]
			Wait_Count_2    = RESET;
 8006660:	4b17      	ldr	r3, [pc, #92]	; (80066c0 <Below_30_RR_Control+0x2e0>)
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
				if ((Valve_Open_Time < 1) || (Valve_Open_Time > 700) )
 8006666:	89bb      	ldrh	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <Below_30_RR_Control+0x294>
 800666c:	89bb      	ldrh	r3, [r7, #12]
 800666e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006672:	d90b      	bls.n	800668c <Below_30_RR_Control+0x2ac>
				{
					Valve_Open_Time                   = 1;
 8006674:	2301      	movs	r3, #1
 8006676:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8006678:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 800667a:	edd3 7a00 	vldr	s15, [r3]
 800667e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006682:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006686:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 8006688:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp> (Set_PEEP + 10) )
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 800668e:	ed93 7a00 	vldr	s14, [r3]
 8006692:	edd7 7a01 	vldr	s15, [r7, #4]
 8006696:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800669a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a6:	f340 80b9 	ble.w	800681c <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp =PEEP_Maintain_Parameter.PEEP_Temp;
 80066aa:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a02      	ldr	r2, [pc, #8]	; (80066b8 <Below_30_RR_Control+0x2d8>)
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	e0b3      	b.n	800681c <Below_30_RR_Control+0x43c>
 80066b4:	200001e0 	.word	0x200001e0
 80066b8:	20014300 	.word	0x20014300
 80066bc:	40400000 	.word	0x40400000
 80066c0:	200001e1 	.word	0x200001e1
	}
	else if (( Achieved_PEEP >= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80066d2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80066d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80066da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e2:	db45      	blt.n	8006770 <Below_30_RR_Control+0x390>
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80066f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80066fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006702:	d535      	bpl.n	8006770 <Below_30_RR_Control+0x390>
	{
		Wait_Count_2++;
 8006704:	4b49      	ldr	r3, [pc, #292]	; (800682c <Below_30_RR_Control+0x44c>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	4b47      	ldr	r3, [pc, #284]	; (800682c <Below_30_RR_Control+0x44c>)
 800670e:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8006710:	4b46      	ldr	r3, [pc, #280]	; (800682c <Below_30_RR_Control+0x44c>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d018      	beq.n	800674a <Below_30_RR_Control+0x36a>
		{
			Valve_Open_Time = (Valve_Open_Time - 30);
 8006718:	89bb      	ldrh	r3, [r7, #12]
 800671a:	3b1e      	subs	r3, #30
 800671c:	81bb      	strh	r3, [r7, #12]
			Wait_Count_2    = RESET;
 800671e:	4b43      	ldr	r3, [pc, #268]	; (800682c <Below_30_RR_Control+0x44c>)
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time< 1 || Valve_Open_Time > 700)
 8006724:	89bb      	ldrh	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <Below_30_RR_Control+0x352>
 800672a:	89bb      	ldrh	r3, [r7, #12]
 800672c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006730:	d90b      	bls.n	800674a <Below_30_RR_Control+0x36a>
				{
					Valve_Open_Time                   = 1;
 8006732:	2301      	movs	r3, #1
 8006734:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8006736:	4b3e      	ldr	r3, [pc, #248]	; (8006830 <Below_30_RR_Control+0x450>)
 8006738:	edd3 7a00 	vldr	s15, [r3]
 800673c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006744:	4b3a      	ldr	r3, [pc, #232]	; (8006830 <Below_30_RR_Control+0x450>)
 8006746:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 800674a:	4b39      	ldr	r3, [pc, #228]	; (8006830 <Below_30_RR_Control+0x450>)
 800674c:	ed93 7a00 	vldr	s14, [r3]
 8006750:	edd7 7a01 	vldr	s15, [r7, #4]
 8006754:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006764:	dd5a      	ble.n	800681c <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8006766:	4b32      	ldr	r3, [pc, #200]	; (8006830 <Below_30_RR_Control+0x450>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a31      	ldr	r2, [pc, #196]	; (8006830 <Below_30_RR_Control+0x450>)
 800676c:	6013      	str	r3, [r2, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 800676e:	e055      	b.n	800681c <Below_30_RR_Control+0x43c>

	}
	else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800677a:	edd7 7a01 	vldr	s15, [r7, #4]
 800677e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006782:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800678a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678e:	db41      	blt.n	8006814 <Below_30_RR_Control+0x434>
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800679a:	ed97 7a01 	vldr	s14, [r7, #4]
 800679e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a6:	dd35      	ble.n	8006814 <Below_30_RR_Control+0x434>
	{
		Wait_Count_2++;
 80067a8:	4b20      	ldr	r3, [pc, #128]	; (800682c <Below_30_RR_Control+0x44c>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	3301      	adds	r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	4b1e      	ldr	r3, [pc, #120]	; (800682c <Below_30_RR_Control+0x44c>)
 80067b2:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 80067b4:	4b1d      	ldr	r3, [pc, #116]	; (800682c <Below_30_RR_Control+0x44c>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d018      	beq.n	80067ee <Below_30_RR_Control+0x40e>
		{

			Valve_Open_Time = (Valve_Open_Time - 10);
 80067bc:	89bb      	ldrh	r3, [r7, #12]
 80067be:	3b0a      	subs	r3, #10
 80067c0:	81bb      	strh	r3, [r7, #12]
			Wait_Count_2    = RESET;
 80067c2:	4b1a      	ldr	r3, [pc, #104]	; (800682c <Below_30_RR_Control+0x44c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time> 700) )
 80067c8:	89bb      	ldrh	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <Below_30_RR_Control+0x3f6>
 80067ce:	89bb      	ldrh	r3, [r7, #12]
 80067d0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80067d4:	d90b      	bls.n	80067ee <Below_30_RR_Control+0x40e>
				{
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 80067d6:	4b16      	ldr	r3, [pc, #88]	; (8006830 <Below_30_RR_Control+0x450>)
 80067d8:	edd3 7a00 	vldr	s15, [r3]
 80067dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067e4:	4b12      	ldr	r3, [pc, #72]	; (8006830 <Below_30_RR_Control+0x450>)
 80067e6:	edc3 7a00 	vstr	s15, [r3]
					Valve_Open_Time                   = 1;
 80067ea:	2301      	movs	r3, #1
 80067ec:	81bb      	strh	r3, [r7, #12]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 80067ee:	4b10      	ldr	r3, [pc, #64]	; (8006830 <Below_30_RR_Control+0x450>)
 80067f0:	ed93 7a00 	vldr	s14, [r3]
 80067f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80067f8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80067fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006808:	dd08      	ble.n	800681c <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 800680a:	4b09      	ldr	r3, [pc, #36]	; (8006830 <Below_30_RR_Control+0x450>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a08      	ldr	r2, [pc, #32]	; (8006830 <Below_30_RR_Control+0x450>)
 8006810:	6013      	str	r3, [r2, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8006812:	e003      	b.n	800681c <Below_30_RR_Control+0x43c>
	}
	else
		PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <Below_30_RR_Control+0x450>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a05      	ldr	r2, [pc, #20]	; (8006830 <Below_30_RR_Control+0x450>)
 800681a:	6013      	str	r3, [r2, #0]

	return Valve_Open_Time;
 800681c:	89bb      	ldrh	r3, [r7, #12]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	200001e1 	.word	0x200001e1
 8006830:	20014300 	.word	0x20014300

08006834 <Above_30_RR_Control>:



static uint16_t  Above_30_RR_Control(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,float Set_PEEP,uint16_t Valve_Open_Time)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	60ba      	str	r2, [r7, #8]
 800683c:	ed87 0a01 	vstr	s0, [r7, #4]
 8006840:	461a      	mov	r2, r3
 8006842:	4603      	mov	r3, r0
 8006844:	73fb      	strb	r3, [r7, #15]
 8006846:	460b      	mov	r3, r1
 8006848:	73bb      	strb	r3, [r7, #14]
 800684a:	4613      	mov	r3, r2
 800684c:	81bb      	strh	r3, [r7, #12]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if ( (Inspiration_Time_in_MS <= 700))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006854:	d802      	bhi.n	800685c <Above_30_RR_Control+0x28>
		Achieved_PEEP = PEEP_Maintain_Parameter.Maximum_PEEP_Acheived;
 8006856:	4bb1      	ldr	r3, [pc, #708]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006858:	799b      	ldrb	r3, [r3, #6]
 800685a:	73fb      	strb	r3, [r7, #15]
	PEEP_Maintain_Parameter.Maximum_PEEP_Acheived =0;
 800685c:	4baf      	ldr	r3, [pc, #700]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 800685e:	2200      	movs	r2, #0
 8006860:	719a      	strb	r2, [r3, #6]

		if (Achieved_PEEP> (Set_PEEP +8) )
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	ee07 3a90 	vmov	s15, r3
 8006868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800686c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006870:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006880:	dd2f      	ble.n	80068e2 <Above_30_RR_Control+0xae>
		{
			Wait_Count_1++;
 8006882:	4ba7      	ldr	r3, [pc, #668]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	3301      	adds	r3, #1
 8006888:	b2da      	uxtb	r2, r3
 800688a:	4ba5      	ldr	r3, [pc, #660]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 800688c:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 800688e:	4ba4      	ldr	r3, [pc, #656]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d916      	bls.n	80068c4 <Above_30_RR_Control+0x90>
			{
				Valve_Open_Time = (Valve_Open_Time + 100);
 8006896:	89bb      	ldrh	r3, [r7, #12]
 8006898:	3364      	adds	r3, #100	; 0x64
 800689a:	81bb      	strh	r3, [r7, #12]
				Wait_Count_1    = RESET;
 800689c:	4ba0      	ldr	r3, [pc, #640]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 80068a2:	89bb      	ldrh	r3, [r7, #12]
 80068a4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80068a8:	d90c      	bls.n	80068c4 <Above_30_RR_Control+0x90>
					{
						Valve_Open_Time                   = 700;
 80068aa:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80068ae:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 80068b0:	4b9a      	ldr	r3, [pc, #616]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 80068b2:	edd3 7a00 	vldr	s15, [r3]
 80068b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068be:	4b97      	ldr	r3, [pc, #604]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 80068c0:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80068c4:	4b95      	ldr	r3, [pc, #596]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 80068c6:	edd3 7a00 	vldr	s15, [r3]
 80068ca:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80068ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d6:	f200 81d5 	bhi.w	8006c84 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 80068da:	4b90      	ldr	r3, [pc, #576]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 80068dc:	4a91      	ldr	r2, [pc, #580]	; (8006b24 <Above_30_RR_Control+0x2f0>)
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	e1d0      	b.n	8006c84 <Above_30_RR_Control+0x450>
		}
		else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80068f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80068f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006900:	dd3f      	ble.n	8006982 <Above_30_RR_Control+0x14e>
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	ee07 3a90 	vmov	s15, r3
 8006908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800690c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006910:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800691c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006920:	d82f      	bhi.n	8006982 <Above_30_RR_Control+0x14e>
		{
			Wait_Count_1++;
 8006922:	4b7f      	ldr	r3, [pc, #508]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	3301      	adds	r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	4b7d      	ldr	r3, [pc, #500]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 800692c:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 800692e:	4b7c      	ldr	r3, [pc, #496]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d916      	bls.n	8006964 <Above_30_RR_Control+0x130>
			{
				Valve_Open_Time = (Valve_Open_Time + 40);
 8006936:	89bb      	ldrh	r3, [r7, #12]
 8006938:	3328      	adds	r3, #40	; 0x28
 800693a:	81bb      	strh	r3, [r7, #12]
				Wait_Count_1    = RESET;
 800693c:	4b78      	ldr	r3, [pc, #480]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 800693e:	2200      	movs	r2, #0
 8006940:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 8006942:	89bb      	ldrh	r3, [r7, #12]
 8006944:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006948:	d90c      	bls.n	8006964 <Above_30_RR_Control+0x130>
					{
						Valve_Open_Time                   = 700;
 800694a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800694e:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8006950:	4b72      	ldr	r3, [pc, #456]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006952:	edd3 7a00 	vldr	s15, [r3]
 8006956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800695a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800695e:	4b6f      	ldr	r3, [pc, #444]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006960:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8006964:	4b6d      	ldr	r3, [pc, #436]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006966:	edd3 7a00 	vldr	s15, [r3]
 800696a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800696e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006976:	f200 8185 	bhi.w	8006c84 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 800697a:	4b68      	ldr	r3, [pc, #416]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 800697c:	4a69      	ldr	r2, [pc, #420]	; (8006b24 <Above_30_RR_Control+0x2f0>)
 800697e:	601a      	str	r2, [r3, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8006980:	e180      	b.n	8006c84 <Above_30_RR_Control+0x450>
		}


		else if( (Achieved_PEEP> (Set_PEEP))  && (Achieved_PEEP<= (Set_PEEP+2)) )
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	ee07 3a90 	vmov	s15, r3
 8006988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800698c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006998:	d53f      	bpl.n	8006a1a <Above_30_RR_Control+0x1e6>
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80069a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80069ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b8:	d82f      	bhi.n	8006a1a <Above_30_RR_Control+0x1e6>
		{
			Wait_Count_1++;
 80069ba:	4b59      	ldr	r3, [pc, #356]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	3301      	adds	r3, #1
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4b57      	ldr	r3, [pc, #348]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 80069c4:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 80069c6:	4b56      	ldr	r3, [pc, #344]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d916      	bls.n	80069fc <Above_30_RR_Control+0x1c8>
			{

				Valve_Open_Time = (Valve_Open_Time + 10);
 80069ce:	89bb      	ldrh	r3, [r7, #12]
 80069d0:	330a      	adds	r3, #10
 80069d2:	81bb      	strh	r3, [r7, #12]
				Wait_Count_1    = RESET;
 80069d4:	4b52      	ldr	r3, [pc, #328]	; (8006b20 <Above_30_RR_Control+0x2ec>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 80069da:	89bb      	ldrh	r3, [r7, #12]
 80069dc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80069e0:	d90c      	bls.n	80069fc <Above_30_RR_Control+0x1c8>
					{
						Valve_Open_Time                   = 700;
 80069e2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80069e6:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 80069e8:	4b4c      	ldr	r3, [pc, #304]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 80069ea:	edd3 7a00 	vldr	s15, [r3]
 80069ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069f6:	4b49      	ldr	r3, [pc, #292]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 80069f8:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80069fc:	4b47      	ldr	r3, [pc, #284]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 80069fe:	edd3 7a00 	vldr	s15, [r3]
 8006a02:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0e:	f200 8139 	bhi.w	8006c84 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8006a12:	4b42      	ldr	r3, [pc, #264]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006a14:	4a43      	ldr	r2, [pc, #268]	; (8006b24 <Above_30_RR_Control+0x2f0>)
 8006a16:	601a      	str	r2, [r3, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8006a18:	e134      	b.n	8006c84 <Above_30_RR_Control+0x450>
		}
		else if ((Achieved_PEEP== 0 ) )
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d136      	bne.n	8006a8e <Above_30_RR_Control+0x25a>
		{
			Wait_Count_2++;
 8006a20:	4b41      	ldr	r3, [pc, #260]	; (8006b28 <Above_30_RR_Control+0x2f4>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	3301      	adds	r3, #1
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	4b3f      	ldr	r3, [pc, #252]	; (8006b28 <Above_30_RR_Control+0x2f4>)
 8006a2a:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8006a2c:	4b3e      	ldr	r3, [pc, #248]	; (8006b28 <Above_30_RR_Control+0x2f4>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d918      	bls.n	8006a66 <Above_30_RR_Control+0x232>
			{
				PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8006a34:	4b39      	ldr	r3, [pc, #228]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006a36:	edd3 7a00 	vldr	s15, [r3]
 8006a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a42:	4b36      	ldr	r3, [pc, #216]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006a44:	edc3 7a00 	vstr	s15, [r3]
				Valve_Open_Time                   =( Valve_Open_Time - 10);
 8006a48:	89bb      	ldrh	r3, [r7, #12]
 8006a4a:	3b0a      	subs	r3, #10
 8006a4c:	81bb      	strh	r3, [r7, #12]
				Wait_Count_2 = RESET;
 8006a4e:	4b36      	ldr	r3, [pc, #216]	; (8006b28 <Above_30_RR_Control+0x2f4>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8006a54:	89bb      	ldrh	r3, [r7, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <Above_30_RR_Control+0x22e>
 8006a5a:	89bb      	ldrh	r3, [r7, #12]
 8006a5c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006a60:	d901      	bls.n	8006a66 <Above_30_RR_Control+0x232>
					{
						Valve_Open_Time = 1;
 8006a62:	2301      	movs	r3, #1
 8006a64:	81bb      	strh	r3, [r7, #12]

					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8006a66:	4b2d      	ldr	r3, [pc, #180]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006a68:	ed93 7a00 	vldr	s14, [r3]
 8006a6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a70:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a80:	f340 8100 	ble.w	8006c84 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a24      	ldr	r2, [pc, #144]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	e0fa      	b.n	8006c84 <Above_30_RR_Control+0x450>
		}
		else if ((Achieved_PEEP< (Set_PEEP -8)))
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a98:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a9c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006aa0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aac:	d53e      	bpl.n	8006b2c <Above_30_RR_Control+0x2f8>
		{
			Wait_Count_2++;
 8006aae:	4b1e      	ldr	r3, [pc, #120]	; (8006b28 <Above_30_RR_Control+0x2f4>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <Above_30_RR_Control+0x2f4>)
 8006ab8:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <Above_30_RR_Control+0x2f4>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d918      	bls.n	8006af4 <Above_30_RR_Control+0x2c0>
			{
				Valve_Open_Time = (Valve_Open_Time - 50);
 8006ac2:	89bb      	ldrh	r3, [r7, #12]
 8006ac4:	3b32      	subs	r3, #50	; 0x32
 8006ac6:	81bb      	strh	r3, [r7, #12]
				Wait_Count_2    = RESET;
 8006ac8:	4b17      	ldr	r3, [pc, #92]	; (8006b28 <Above_30_RR_Control+0x2f4>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8006ace:	89bb      	ldrh	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <Above_30_RR_Control+0x2a8>
 8006ad4:	89bb      	ldrh	r3, [r7, #12]
 8006ad6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006ada:	d90b      	bls.n	8006af4 <Above_30_RR_Control+0x2c0>
					{
						Valve_Open_Time                   = 1;
 8006adc:	2301      	movs	r3, #1
 8006ade:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006ae2:	edd3 7a00 	vldr	s15, [r3]
 8006ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006aee:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006af0:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > Set_PEEP + 10)
 8006af4:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006af6:	ed93 7a00 	vldr	s14, [r3]
 8006afa:	edd7 7a01 	vldr	s15, [r7, #4]
 8006afe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b0e:	f340 80b9 	ble.w	8006c84 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8006b12:	4b02      	ldr	r3, [pc, #8]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a01      	ldr	r2, [pc, #4]	; (8006b1c <Above_30_RR_Control+0x2e8>)
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e0b3      	b.n	8006c84 <Above_30_RR_Control+0x450>
 8006b1c:	20014300 	.word	0x20014300
 8006b20:	200001e2 	.word	0x200001e2
 8006b24:	40400000 	.word	0x40400000
 8006b28:	200001e3 	.word	0x200001e3
		}
		else if ((Achieved_PEEP>= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b36:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b3a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006b3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4a:	db45      	blt.n	8006bd8 <Above_30_RR_Control+0x3a4>
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006b5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6a:	d535      	bpl.n	8006bd8 <Above_30_RR_Control+0x3a4>
		{
			Wait_Count_2++;
 8006b6c:	4b49      	ldr	r3, [pc, #292]	; (8006c94 <Above_30_RR_Control+0x460>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	3301      	adds	r3, #1
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <Above_30_RR_Control+0x460>)
 8006b76:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8006b78:	4b46      	ldr	r3, [pc, #280]	; (8006c94 <Above_30_RR_Control+0x460>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d918      	bls.n	8006bb2 <Above_30_RR_Control+0x37e>
			{
				Valve_Open_Time = (Valve_Open_Time - 30);
 8006b80:	89bb      	ldrh	r3, [r7, #12]
 8006b82:	3b1e      	subs	r3, #30
 8006b84:	81bb      	strh	r3, [r7, #12]
				Wait_Count_2    = RESET;
 8006b86:	4b43      	ldr	r3, [pc, #268]	; (8006c94 <Above_30_RR_Control+0x460>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8006b8c:	89bb      	ldrh	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <Above_30_RR_Control+0x366>
 8006b92:	89bb      	ldrh	r3, [r7, #12]
 8006b94:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006b98:	d90b      	bls.n	8006bb2 <Above_30_RR_Control+0x37e>
					{
						Valve_Open_Time                   = 1;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8006b9e:	4b3e      	ldr	r3, [pc, #248]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006ba0:	edd3 7a00 	vldr	s15, [r3]
 8006ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bac:	4b3a      	ldr	r3, [pc, #232]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006bae:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8006bb2:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006bb4:	ed93 7a00 	vldr	s14, [r3]
 8006bb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bbc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bcc:	dd5a      	ble.n	8006c84 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8006bce:	4b32      	ldr	r3, [pc, #200]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a31      	ldr	r2, [pc, #196]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006bd4:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8006bd6:	e055      	b.n	8006c84 <Above_30_RR_Control+0x450>
		}
		else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006be6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006bea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf6:	db41      	blt.n	8006c7c <Above_30_RR_Control+0x448>
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c02:	ed97 7a01 	vldr	s14, [r7, #4]
 8006c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0e:	dd35      	ble.n	8006c7c <Above_30_RR_Control+0x448>
		{
			Wait_Count_2++;
 8006c10:	4b20      	ldr	r3, [pc, #128]	; (8006c94 <Above_30_RR_Control+0x460>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <Above_30_RR_Control+0x460>)
 8006c1a:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8006c1c:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <Above_30_RR_Control+0x460>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d918      	bls.n	8006c56 <Above_30_RR_Control+0x422>
			{
				Valve_Open_Time = Valve_Open_Time - 10;
 8006c24:	89bb      	ldrh	r3, [r7, #12]
 8006c26:	3b0a      	subs	r3, #10
 8006c28:	81bb      	strh	r3, [r7, #12]
				Wait_Count_2    = RESET;
 8006c2a:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <Above_30_RR_Control+0x460>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8006c30:	89bb      	ldrh	r3, [r7, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <Above_30_RR_Control+0x40a>
 8006c36:	89bb      	ldrh	r3, [r7, #12]
 8006c38:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006c3c:	d90b      	bls.n	8006c56 <Above_30_RR_Control+0x422>
					{
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8006c3e:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006c40:	edd3 7a00 	vldr	s15, [r3]
 8006c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c4c:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006c4e:	edc3 7a00 	vstr	s15, [r3]
						Valve_Open_Time                   = 1;
 8006c52:	2301      	movs	r3, #1
 8006c54:	81bb      	strh	r3, [r7, #12]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8006c56:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006c58:	ed93 7a00 	vldr	s14, [r3]
 8006c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c60:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c70:	dd08      	ble.n	8006c84 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8006c72:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a08      	ldr	r2, [pc, #32]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006c78:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8006c7a:	e003      	b.n	8006c84 <Above_30_RR_Control+0x450>
		}

		else
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a05      	ldr	r2, [pc, #20]	; (8006c98 <Above_30_RR_Control+0x464>)
 8006c82:	6013      	str	r3, [r2, #0]


		return Valve_Open_Time;
 8006c84:	89bb      	ldrh	r3, [r7, #12]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	200001e3 	.word	0x200001e3
 8006c98:	20014300 	.word	0x20014300

08006c9c <max17261_i2c_write>:
uint8_t Battery_Voltage_old=100,Battery_Voltage_new=0;

/* ************************************************************************* */

void max17261_i2c_write(uint8_t slave_addr, uint8_t *data, uint8_t data_len, uint8_t restart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	6039      	str	r1, [r7, #0]
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4603      	mov	r3, r0
 8006caa:	71fb      	strb	r3, [r7, #7]
 8006cac:	460b      	mov	r3, r1
 8006cae:	71bb      	strb	r3, [r7, #6]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c3, slave_addr, data, data_len, restart);
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	b299      	uxth	r1, r3
 8006cb8:	79bb      	ldrb	r3, [r7, #6]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	797b      	ldrb	r3, [r7, #5]
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	480c      	ldr	r0, [pc, #48]	; (8006cf8 <max17261_i2c_write+0x5c>)
 8006cc6:	f00e fd23 	bl	8015710 <HAL_I2C_Master_Transmit>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <max17261_i2c_write+0x60>)
 8006cd0:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK)
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <max17261_i2c_write+0x60>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <max17261_i2c_write+0x46>
	{
		FUEL_GAUGE = FUEL_GAUGE_MODULE_FAULT;
 8006cda:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <max17261_i2c_write+0x64>)
 8006cdc:	2201      	movs	r2, #1
 8006cde:	701a      	strb	r2, [r3, #0]
	else if(ret == HAL_OK)
	{
		FUEL_GAUGE = FUEL_GAUGE_MODULE_WORKING;

	}
}
 8006ce0:	e006      	b.n	8006cf0 <max17261_i2c_write+0x54>
	else if(ret == HAL_OK)
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <max17261_i2c_write+0x60>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <max17261_i2c_write+0x54>
		FUEL_GAUGE = FUEL_GAUGE_MODULE_WORKING;
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <max17261_i2c_write+0x64>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20014860 	.word	0x20014860
 8006cfc:	200145a1 	.word	0x200145a1
 8006d00:	20014370 	.word	0x20014370

08006d04 <max17261_i2c_read>:

/* ************************************************************************* */

void max17261_i2c_read(uint8_t slave_addr, uint8_t *data, uint8_t data_len, uint8_t restart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	6039      	str	r1, [r7, #0]
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	461a      	mov	r2, r3
 8006d10:	4603      	mov	r3, r0
 8006d12:	71fb      	strb	r3, [r7, #7]
 8006d14:	460b      	mov	r3, r1
 8006d16:	71bb      	strb	r3, [r7, #6]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Receive(&hi2c3, (slave_addr),data,data_len,restart);
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	b299      	uxth	r1, r3
 8006d20:	79bb      	ldrb	r3, [r7, #6]
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	797b      	ldrb	r3, [r7, #5]
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	4803      	ldr	r0, [pc, #12]	; (8006d3c <max17261_i2c_read+0x38>)
 8006d2e:	f00e fded 	bl	801590c <HAL_I2C_Master_Receive>
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20014860 	.word	0x20014860

08006d40 <maxim_max1726x_check_por>:

/* ************************************************************************* */
uint8_t maxim_max1726x_check_por(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
	maxim_max1726x_read_reg(MAX1726X_STATUS_REG, &max1726x_regs[MAX1726X_STATUS_REG]);
 8006d44:	4907      	ldr	r1, [pc, #28]	; (8006d64 <maxim_max1726x_check_por+0x24>)
 8006d46:	2000      	movs	r0, #0
 8006d48:	f000 f80e 	bl	8006d68 <maxim_max1726x_read_reg>

	if((max1726x_regs[MAX1726X_STATUS_REG] & 0x0002) == 0x0000)
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <maxim_max1726x_check_por+0x24>)
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <maxim_max1726x_check_por+0x1c>
	{
		return 0;	// No power on reset
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <maxim_max1726x_check_por+0x1e>
	}
	else
	{
		return 1;	// Power on reset
 8006d5c:	2301      	movs	r3, #1
	}
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	2001438c 	.word	0x2001438c

08006d68 <maxim_max1726x_read_reg>:

/* ************************************************************************* */

void maxim_max1726x_read_reg(uint8_t reg_addr, uint16_t *reg_data)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	6039      	str	r1, [r7, #0]
 8006d72:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data[2];

	i2c_data[0] = reg_addr;
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	733b      	strb	r3, [r7, #12]
	max17261_i2c_write(MAX1726X_I2C_ADDR, i2c_data, 1, 2);
 8006d78:	f107 010c 	add.w	r1, r7, #12
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	2201      	movs	r2, #1
 8006d80:	206c      	movs	r0, #108	; 0x6c
 8006d82:	f7ff ff8b 	bl	8006c9c <max17261_i2c_write>
	vTaskDelay(1);
 8006d86:	2001      	movs	r0, #1
 8006d88:	f018 fa50 	bl	801f22c <vTaskDelay>
	max17261_i2c_read(MAX1726X_I2C_ADDR, i2c_data, 2, 1);
 8006d8c:	f107 010c 	add.w	r1, r7, #12
 8006d90:	2301      	movs	r3, #1
 8006d92:	2202      	movs	r2, #2
 8006d94:	206c      	movs	r0, #108	; 0x6c
 8006d96:	f7ff ffb5 	bl	8006d04 <max17261_i2c_read>
	vTaskDelay(1);
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	f018 fa46 	bl	801f22c <vTaskDelay>
	*reg_data = i2c_data[1];
 8006da0:	7b7b      	ldrb	r3, [r7, #13]
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	801a      	strh	r2, [r3, #0]
	*reg_data = ((*reg_data)<<8) | i2c_data[0];
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	b21a      	sxth	r2, r3
 8006db0:	7b3b      	ldrb	r3, [r7, #12]
 8006db2:	b21b      	sxth	r3, r3
 8006db4:	4313      	orrs	r3, r2
 8006db6:	b21b      	sxth	r3, r3
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	801a      	strh	r2, [r3, #0]
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <maxim_max1726x_wait_dnr>:

/* ************************************************************************* */

void maxim_max1726x_wait_dnr(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
	maxim_max1726x_read_reg(MAX1726X_FSTAT_REG, &max1726x_regs[MAX1726X_FSTAT_REG]);
 8006dcc:	490d      	ldr	r1, [pc, #52]	; (8006e04 <maxim_max1726x_wait_dnr+0x3c>)
 8006dce:	203d      	movs	r0, #61	; 0x3d
 8006dd0:	f7ff ffca 	bl	8006d68 <maxim_max1726x_read_reg>
	vTaskDelay(10);
 8006dd4:	200a      	movs	r0, #10
 8006dd6:	f018 fa29 	bl	801f22c <vTaskDelay>
	while((max1726x_regs[MAX1726X_FSTAT_REG] & 0x0001) == 0x0001)
 8006dda:	e006      	b.n	8006dea <maxim_max1726x_wait_dnr+0x22>
	{
		vTaskDelay(10);
 8006ddc:	200a      	movs	r0, #10
 8006dde:	f018 fa25 	bl	801f22c <vTaskDelay>
		maxim_max1726x_read_reg(MAX1726X_FSTAT_REG, &max1726x_regs[MAX1726X_FSTAT_REG]);
 8006de2:	4908      	ldr	r1, [pc, #32]	; (8006e04 <maxim_max1726x_wait_dnr+0x3c>)
 8006de4:	203d      	movs	r0, #61	; 0x3d
 8006de6:	f7ff ffbf 	bl	8006d68 <maxim_max1726x_read_reg>
	while((max1726x_regs[MAX1726X_FSTAT_REG] & 0x0001) == 0x0001)
 8006dea:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <maxim_max1726x_wait_dnr+0x40>)
 8006dec:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f1      	bne.n	8006ddc <maxim_max1726x_wait_dnr+0x14>
	}
	vTaskDelay(10);
 8006df8:	200a      	movs	r0, #10
 8006dfa:	f018 fa17 	bl	801f22c <vTaskDelay>
}
 8006dfe:	bf00      	nop
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20014406 	.word	0x20014406
 8006e08:	2001438c 	.word	0x2001438c

08006e0c <maxim_max1726x_initialize_ez_config>:


/* ************************************************************************* */

void maxim_max1726x_initialize_ez_config(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
	uint16_t tempdata;

	/// customer must provide the battery parameters accordingly
	/// here the values are default for two serials of 18650 bat
	max1726x_ez_config.designcap  = 0x27d8;
 8006e12:	4b39      	ldr	r3, [pc, #228]	; (8006ef8 <maxim_max1726x_initialize_ez_config+0xec>)
 8006e14:	f242 72d8 	movw	r2, #10200	; 0x27d8
 8006e18:	801a      	strh	r2, [r3, #0]
	max1726x_ez_config.ichgterm   = 0x0500;
 8006e1a:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <maxim_max1726x_initialize_ez_config+0xec>)
 8006e1c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006e20:	805a      	strh	r2, [r3, #2]
	max1726x_ez_config.modelcfg   = 0x8000;
 8006e22:	4b35      	ldr	r3, [pc, #212]	; (8006ef8 <maxim_max1726x_initialize_ez_config+0xec>)
 8006e24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006e28:	809a      	strh	r2, [r3, #4]
	max1726x_ez_config.vempty     = 0xAA61;
 8006e2a:	4b33      	ldr	r3, [pc, #204]	; (8006ef8 <maxim_max1726x_initialize_ez_config+0xec>)
 8006e2c:	f64a 2261 	movw	r2, #43617	; 0xaa61
 8006e30:	80da      	strh	r2, [r3, #6]
	/// customer must provide the battery parameters accordingly


	/// Store original HibCFG value
	maxim_max1726x_read_reg(MAX1726X_HIBCFG_REG, &max1726x_regs[MAX1726X_HIBCFG_REG]);
 8006e32:	4932      	ldr	r1, [pc, #200]	; (8006efc <maxim_max1726x_initialize_ez_config+0xf0>)
 8006e34:	20ba      	movs	r0, #186	; 0xba
 8006e36:	f7ff ff97 	bl	8006d68 <maxim_max1726x_read_reg>

	/// Exit Hibernate Mode step
	tempdata = 0x0090;
 8006e3a:	2390      	movs	r3, #144	; 0x90
 8006e3c:	80fb      	strh	r3, [r7, #6]
	maxim_max1726x_write_reg(0x60, &tempdata);
 8006e3e:	1dbb      	adds	r3, r7, #6
 8006e40:	4619      	mov	r1, r3
 8006e42:	2060      	movs	r0, #96	; 0x60
 8006e44:	f000 f866 	bl	8006f14 <maxim_max1726x_write_reg>
	tempdata = 0x0000;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	80fb      	strh	r3, [r7, #6]
	maxim_max1726x_write_reg(MAX1726X_HIBCFG_REG, &tempdata);
 8006e4c:	1dbb      	adds	r3, r7, #6
 8006e4e:	4619      	mov	r1, r3
 8006e50:	20ba      	movs	r0, #186	; 0xba
 8006e52:	f000 f85f 	bl	8006f14 <maxim_max1726x_write_reg>
	maxim_max1726x_write_reg(0x60, &tempdata);
 8006e56:	1dbb      	adds	r3, r7, #6
 8006e58:	4619      	mov	r1, r3
 8006e5a:	2060      	movs	r0, #96	; 0x60
 8006e5c:	f000 f85a 	bl	8006f14 <maxim_max1726x_write_reg>

	/// OPTION 1 EZ Config (No INI file is needed)
	max1726x_regs[MAX1726X_DESIGNCAP_REG] = max1726x_ez_config.designcap;
 8006e60:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <maxim_max1726x_initialize_ez_config+0xec>)
 8006e62:	881a      	ldrh	r2, [r3, #0]
 8006e64:	4b26      	ldr	r3, [pc, #152]	; (8006f00 <maxim_max1726x_initialize_ez_config+0xf4>)
 8006e66:	861a      	strh	r2, [r3, #48]	; 0x30
	max1726x_regs[MAX1726X_ICHGTERM_REG]  = max1726x_ez_config.ichgterm;
 8006e68:	4b23      	ldr	r3, [pc, #140]	; (8006ef8 <maxim_max1726x_initialize_ez_config+0xec>)
 8006e6a:	885a      	ldrh	r2, [r3, #2]
 8006e6c:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <maxim_max1726x_initialize_ez_config+0xf4>)
 8006e6e:	879a      	strh	r2, [r3, #60]	; 0x3c
	max1726x_regs[MAX1726X_VEMPTY_REG]    = max1726x_ez_config.vempty;
 8006e70:	4b21      	ldr	r3, [pc, #132]	; (8006ef8 <maxim_max1726x_initialize_ez_config+0xec>)
 8006e72:	88da      	ldrh	r2, [r3, #6]
 8006e74:	4b22      	ldr	r3, [pc, #136]	; (8006f00 <maxim_max1726x_initialize_ez_config+0xf4>)
 8006e76:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	max1726x_regs[MAX1726X_MODELCFG_REG]  = max1726x_ez_config.modelcfg;
 8006e7a:	4b1f      	ldr	r3, [pc, #124]	; (8006ef8 <maxim_max1726x_initialize_ez_config+0xec>)
 8006e7c:	889a      	ldrh	r2, [r3, #4]
 8006e7e:	4b20      	ldr	r3, [pc, #128]	; (8006f00 <maxim_max1726x_initialize_ez_config+0xf4>)
 8006e80:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6

	maxim_max1726x_write_reg(MAX1726X_DESIGNCAP_REG, &max1726x_regs[MAX1726X_DESIGNCAP_REG]);
 8006e84:	491f      	ldr	r1, [pc, #124]	; (8006f04 <maxim_max1726x_initialize_ez_config+0xf8>)
 8006e86:	2018      	movs	r0, #24
 8006e88:	f000 f844 	bl	8006f14 <maxim_max1726x_write_reg>
	vTaskDelay(10);
 8006e8c:	200a      	movs	r0, #10
 8006e8e:	f018 f9cd 	bl	801f22c <vTaskDelay>
	maxim_max1726x_write_reg(MAX1726X_ICHGTERM_REG, &max1726x_regs[MAX1726X_ICHGTERM_REG]);
 8006e92:	491d      	ldr	r1, [pc, #116]	; (8006f08 <maxim_max1726x_initialize_ez_config+0xfc>)
 8006e94:	201e      	movs	r0, #30
 8006e96:	f000 f83d 	bl	8006f14 <maxim_max1726x_write_reg>
	vTaskDelay(10);
 8006e9a:	200a      	movs	r0, #10
 8006e9c:	f018 f9c6 	bl	801f22c <vTaskDelay>
	maxim_max1726x_write_reg(MAX1726X_VEMPTY_REG, &max1726x_regs[MAX1726X_VEMPTY_REG]);
 8006ea0:	491a      	ldr	r1, [pc, #104]	; (8006f0c <maxim_max1726x_initialize_ez_config+0x100>)
 8006ea2:	203a      	movs	r0, #58	; 0x3a
 8006ea4:	f000 f836 	bl	8006f14 <maxim_max1726x_write_reg>
	vTaskDelay(10);
 8006ea8:	200a      	movs	r0, #10
 8006eaa:	f018 f9bf 	bl	801f22c <vTaskDelay>
	maxim_max1726x_write_reg(MAX1726X_MODELCFG_REG, &max1726x_regs[MAX1726X_MODELCFG_REG]);
 8006eae:	4918      	ldr	r1, [pc, #96]	; (8006f10 <maxim_max1726x_initialize_ez_config+0x104>)
 8006eb0:	20db      	movs	r0, #219	; 0xdb
 8006eb2:	f000 f82f 	bl	8006f14 <maxim_max1726x_write_reg>
	vTaskDelay(10);
 8006eb6:	200a      	movs	r0, #10
 8006eb8:	f018 f9b8 	bl	801f22c <vTaskDelay>

	//Poll ModelCFG.Refresh bit, do not continue until ModelCFG.Refresh==0
	maxim_max1726x_read_reg(MAX1726X_MODELCFG_REG, &max1726x_regs[MAX1726X_MODELCFG_REG]);
 8006ebc:	4914      	ldr	r1, [pc, #80]	; (8006f10 <maxim_max1726x_initialize_ez_config+0x104>)
 8006ebe:	20db      	movs	r0, #219	; 0xdb
 8006ec0:	f7ff ff52 	bl	8006d68 <maxim_max1726x_read_reg>

	while( (max1726x_regs[MAX1726X_MODELCFG_REG] & 0x8000)  != 0x8000)
 8006ec4:	e006      	b.n	8006ed4 <maxim_max1726x_initialize_ez_config+0xc8>
	{
		vTaskDelay(10);
 8006ec6:	200a      	movs	r0, #10
 8006ec8:	f018 f9b0 	bl	801f22c <vTaskDelay>
		maxim_max1726x_read_reg(MAX1726X_MODELCFG_REG, &max1726x_regs[MAX1726X_MODELCFG_REG]);
 8006ecc:	4910      	ldr	r1, [pc, #64]	; (8006f10 <maxim_max1726x_initialize_ez_config+0x104>)
 8006ece:	20db      	movs	r0, #219	; 0xdb
 8006ed0:	f7ff ff4a 	bl	8006d68 <maxim_max1726x_read_reg>
	while( (max1726x_regs[MAX1726X_MODELCFG_REG] & 0x8000)  != 0x8000)
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <maxim_max1726x_initialize_ez_config+0xf4>)
 8006ed6:	f8b3 31b6 	ldrh.w	r3, [r3, #438]	; 0x1b6
 8006eda:	b21b      	sxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	daf2      	bge.n	8006ec6 <maxim_max1726x_initialize_ez_config+0xba>
	}

	/// Restore Original HibCFG value
	maxim_max1726x_write_reg(MAX1726X_HIBCFG_REG, &max1726x_regs[MAX1726X_HIBCFG_REG]);
 8006ee0:	4906      	ldr	r1, [pc, #24]	; (8006efc <maxim_max1726x_initialize_ez_config+0xf0>)
 8006ee2:	20ba      	movs	r0, #186	; 0xba
 8006ee4:	f000 f816 	bl	8006f14 <maxim_max1726x_write_reg>
	vTaskDelay(10);
 8006ee8:	200a      	movs	r0, #10
 8006eea:	f018 f99f 	bl	801f22c <vTaskDelay>

}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20013d40 	.word	0x20013d40
 8006efc:	20014500 	.word	0x20014500
 8006f00:	2001438c 	.word	0x2001438c
 8006f04:	200143bc 	.word	0x200143bc
 8006f08:	200143c8 	.word	0x200143c8
 8006f0c:	20014400 	.word	0x20014400
 8006f10:	20014542 	.word	0x20014542

08006f14 <maxim_max1726x_write_reg>:




void maxim_max1726x_write_reg(uint8_t reg_addr, uint16_t *reg_data)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	6039      	str	r1, [r7, #0]
 8006f1e:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data[3];

	i2c_data[0] = reg_addr;
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	733b      	strb	r3, [r7, #12]
	i2c_data[1] = (*reg_data) & 0xFF;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	737b      	strb	r3, [r7, #13]
	i2c_data[2] = (*reg_data) >> 8;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	73bb      	strb	r3, [r7, #14]
	max17261_i2c_write(MAX1726X_I2C_ADDR, i2c_data, 3, 10);
 8006f38:	f107 010c 	add.w	r1, r7, #12
 8006f3c:	230a      	movs	r3, #10
 8006f3e:	2203      	movs	r2, #3
 8006f40:	206c      	movs	r0, #108	; 0x6c
 8006f42:	f7ff feab 	bl	8006c9c <max17261_i2c_write>
	vTaskDelay(1);
 8006f46:	2001      	movs	r0, #1
 8006f48:	f018 f970 	bl	801f22c <vTaskDelay>
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <maxim_max1726x_clear_por>:



/* ************************************************************************* */
uint8_t maxim_max1726x_clear_por(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
	maxim_max1726x_read_reg(MAX1726X_STATUS_REG, &max1726x_regs[MAX1726X_STATUS_REG]);
 8006f58:	4908      	ldr	r1, [pc, #32]	; (8006f7c <maxim_max1726x_clear_por+0x28>)
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	f7ff ff04 	bl	8006d68 <maxim_max1726x_read_reg>

	max1726x_regs[MAX1726X_STATUS_REG] = max1726x_regs[MAX1726X_STATUS_REG] & 0xFFFD;
 8006f60:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <maxim_max1726x_clear_por+0x28>)
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	f023 0302 	bic.w	r3, r3, #2
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <maxim_max1726x_clear_por+0x28>)
 8006f6c:	801a      	strh	r2, [r3, #0]

	return maxim_max1726x_write_and_verify_reg(MAX1726X_STATUS_REG, &max1726x_regs[MAX1726X_STATUS_REG]);
 8006f6e:	4903      	ldr	r1, [pc, #12]	; (8006f7c <maxim_max1726x_clear_por+0x28>)
 8006f70:	2000      	movs	r0, #0
 8006f72:	f000 f805 	bl	8006f80 <maxim_max1726x_write_and_verify_reg>
 8006f76:	4603      	mov	r3, r0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	2001438c 	.word	0x2001438c

08006f80 <maxim_max1726x_write_and_verify_reg>:

/* ************************************************************************* */


uint8_t maxim_max1726x_write_and_verify_reg(uint8_t reg_addr, uint16_t *reg_data)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	6039      	str	r1, [r7, #0]
 8006f8a:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data[3];
	uint16_t readback_data;
	int8_t retry;

	retry = 3;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	73fb      	strb	r3, [r7, #15]

	while(retry>0)
 8006f90:	e043      	b.n	800701a <maxim_max1726x_write_and_verify_reg+0x9a>
	{
		i2c_data[0] = reg_addr;
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	723b      	strb	r3, [r7, #8]
		i2c_data[1] = (*reg_data) & 0xFF;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	727b      	strb	r3, [r7, #9]
		i2c_data[2] = (*reg_data) >> 8;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	0a1b      	lsrs	r3, r3, #8
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	72bb      	strb	r3, [r7, #10]
		max17261_i2c_write(MAX1726X_I2C_ADDR, i2c_data, 3, 2);
 8006faa:	f107 0108 	add.w	r1, r7, #8
 8006fae:	2302      	movs	r3, #2
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	206c      	movs	r0, #108	; 0x6c
 8006fb4:	f7ff fe72 	bl	8006c9c <max17261_i2c_write>

		vTaskDelay(10);
 8006fb8:	200a      	movs	r0, #10
 8006fba:	f018 f937 	bl	801f22c <vTaskDelay>

		i2c_data[0] = reg_addr;
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	723b      	strb	r3, [r7, #8]
		max17261_i2c_write(MAX1726X_I2C_ADDR, i2c_data, 1, 2);
 8006fc2:	f107 0108 	add.w	r1, r7, #8
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	2201      	movs	r2, #1
 8006fca:	206c      	movs	r0, #108	; 0x6c
 8006fcc:	f7ff fe66 	bl	8006c9c <max17261_i2c_write>

		i2c_data[0] = 0x00;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	723b      	strb	r3, [r7, #8]
		i2c_data[1] = 0x00;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	727b      	strb	r3, [r7, #9]
		max17261_i2c_read(MAX1726X_I2C_ADDR, i2c_data, 2, 1);
 8006fd8:	f107 0108 	add.w	r1, r7, #8
 8006fdc:	2301      	movs	r3, #1
 8006fde:	2202      	movs	r2, #2
 8006fe0:	206c      	movs	r0, #108	; 0x6c
 8006fe2:	f7ff fe8f 	bl	8006d04 <max17261_i2c_read>
		vTaskDelay(1);
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	f018 f920 	bl	801f22c <vTaskDelay>
		readback_data = i2c_data[1];
 8006fec:	7a7b      	ldrb	r3, [r7, #9]
 8006fee:	81bb      	strh	r3, [r7, #12]
		readback_data = (readback_data<<8) | i2c_data[0];
 8006ff0:	89bb      	ldrh	r3, [r7, #12]
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	b21a      	sxth	r2, r3
 8006ff6:	7a3b      	ldrb	r3, [r7, #8]
 8006ff8:	b21b      	sxth	r3, r3
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	b21b      	sxth	r3, r3
 8006ffe:	81bb      	strh	r3, [r7, #12]

		if(readback_data == (*reg_data))
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	89ba      	ldrh	r2, [r7, #12]
 8007006:	429a      	cmp	r2, r3
 8007008:	d101      	bne.n	800700e <maxim_max1726x_write_and_verify_reg+0x8e>
		{
			return 0; 	// no error
 800700a:	2300      	movs	r3, #0
 800700c:	e00a      	b.n	8007024 <maxim_max1726x_write_and_verify_reg+0xa4>
		}
		else
		{
			retry--;
 800700e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	73fb      	strb	r3, [r7, #15]
	while(retry>0)
 800701a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800701e:	2b00      	cmp	r3, #0
 8007020:	dcb7      	bgt.n	8006f92 <maxim_max1726x_write_and_verify_reg+0x12>
		}
	}

	return 1;	// error
 8007022:	2301      	movs	r3, #1
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <Fuel_Gauge_Init>:
}

/***************************************************************************/

void Fuel_Gauge_Init()
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
	Rsense=0.01;
 8007030:	4b1a      	ldr	r3, [pc, #104]	; (800709c <Fuel_Gauge_Init+0x70>)
 8007032:	4a1b      	ldr	r2, [pc, #108]	; (80070a0 <Fuel_Gauge_Init+0x74>)
 8007034:	601a      	str	r2, [r3, #0]
	voltage=0;
 8007036:	4b1b      	ldr	r3, [pc, #108]	; (80070a4 <Fuel_Gauge_Init+0x78>)
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	601a      	str	r2, [r3, #0]

	Step._0 = Do_Step_0();
 800703e:	f000 f837 	bl	80070b0 <Do_Step_0>
 8007042:	4603      	mov	r3, r0
 8007044:	b29a      	uxth	r2, r3
 8007046:	4b18      	ldr	r3, [pc, #96]	; (80070a8 <Fuel_Gauge_Init+0x7c>)
 8007048:	801a      	strh	r2, [r3, #0]
	vTaskDelay(100);
 800704a:	2064      	movs	r0, #100	; 0x64
 800704c:	f018 f8ee 	bl	801f22c <vTaskDelay>

	if(Step._0 == ZERO)
 8007050:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <Fuel_Gauge_Init+0x7c>)
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <Fuel_Gauge_Init+0x32>
	{
		Do_Step_3_Point_2();
 8007058:	f000 f848 	bl	80070ec <Do_Step_3_Point_2>
					Do_Step_3_Point_2();
				}

				xSemaphoreGive(binarysem);
	}
}
 800705c:	e01b      	b.n	8007096 <Fuel_Gauge_Init+0x6a>
		Do_Step_1();
 800705e:	f000 f833 	bl	80070c8 <Do_Step_1>
		Do_Step_2_Point_1();
 8007062:	f000 f837 	bl	80070d4 <Do_Step_2_Point_1>
		Do_Step_3();
 8007066:	f000 f83b 	bl	80070e0 <Do_Step_3>
		    Step._0 = Do_Step_0();
 800706a:	f000 f821 	bl	80070b0 <Do_Step_0>
 800706e:	4603      	mov	r3, r0
 8007070:	b29a      	uxth	r2, r3
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <Fuel_Gauge_Init+0x7c>)
 8007074:	801a      	strh	r2, [r3, #0]
			vTaskDelay(100);
 8007076:	2064      	movs	r0, #100	; 0x64
 8007078:	f018 f8d8 	bl	801f22c <vTaskDelay>
				if(Step._0 == ZERO)
 800707c:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <Fuel_Gauge_Init+0x7c>)
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <Fuel_Gauge_Init+0x5c>
					Do_Step_3_Point_2();
 8007084:	f000 f832 	bl	80070ec <Do_Step_3_Point_2>
				xSemaphoreGive(binarysem);
 8007088:	4b08      	ldr	r3, [pc, #32]	; (80070ac <Fuel_Gauge_Init+0x80>)
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	2300      	movs	r3, #0
 800708e:	2200      	movs	r2, #0
 8007090:	2100      	movs	r1, #0
 8007092:	f017 f99b 	bl	801e3cc <xQueueGenericSend>
}
 8007096:	bf00      	nop
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20013f44 	.word	0x20013f44
 80070a0:	3c23d70a 	.word	0x3c23d70a
 80070a4:	20013d24 	.word	0x20013d24
 80070a8:	20013ca4 	.word	0x20013ca4
 80070ac:	20013b40 	.word	0x20013b40

080070b0 <Do_Step_0>:
/************************************************************************** */



int Do_Step_0()
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
	uint8_t Val;
	Val = maxim_max1726x_check_por();
 80070b6:	f7ff fe43 	bl	8006d40 <maxim_max1726x_check_por>
 80070ba:	4603      	mov	r3, r0
 80070bc:	71fb      	strb	r3, [r7, #7]
	return Val;
 80070be:	79fb      	ldrb	r3, [r7, #7]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <Do_Step_1>:

/************************************************************************** */

void Do_Step_1()
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
	maxim_max1726x_wait_dnr();
 80070cc:	f7ff fe7c 	bl	8006dc8 <maxim_max1726x_wait_dnr>
}
 80070d0:	bf00      	nop
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <Do_Step_2_Point_1>:

/************************************************************************** */

void Do_Step_2_Point_1()
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
	maxim_max1726x_initialize_ez_config();
 80070d8:	f7ff fe98 	bl	8006e0c <maxim_max1726x_initialize_ez_config>
}
 80070dc:	bf00      	nop
 80070de:	bd80      	pop	{r7, pc}

080070e0 <Do_Step_3>:

/************************************************************************** */

void Do_Step_3()
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
	maxim_max1726x_clear_por();
 80070e4:	f7ff ff36 	bl	8006f54 <maxim_max1726x_clear_por>
}
 80070e8:	bf00      	nop
 80070ea:	bd80      	pop	{r7, pc}

080070ec <Do_Step_3_Point_2>:

/************************************************************************** */

void Do_Step_3_Point_2()
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
	Step._3_2 = Do_Step_0();
 80070f0:	f7ff ffde 	bl	80070b0 <Do_Step_0>
 80070f4:	4603      	mov	r3, r0
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <Do_Step_3_Point_2+0x38>)
 80070fa:	805a      	strh	r2, [r3, #2]
	vTaskDelay(100);
 80070fc:	2064      	movs	r0, #100	; 0x64
 80070fe:	f018 f895 	bl	801f22c <vTaskDelay>
	if(Step._3_2 == ZERO)
 8007102:	4b08      	ldr	r3, [pc, #32]	; (8007124 <Do_Step_3_Point_2+0x38>)
 8007104:	885b      	ldrh	r3, [r3, #2]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d107      	bne.n	800711a <Do_Step_3_Point_2+0x2e>
	{
		//Do_Step_3_Point_3();
		xSemaphoreGive(binarysem);
 800710a:	4b07      	ldr	r3, [pc, #28]	; (8007128 <Do_Step_3_Point_2+0x3c>)
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	2300      	movs	r3, #0
 8007110:	2200      	movs	r2, #0
 8007112:	2100      	movs	r1, #0
 8007114:	f017 f95a 	bl	801e3cc <xQueueGenericSend>
	}
	else
	{
		Fuel_Gauge_Init();
	}
}
 8007118:	e001      	b.n	800711e <Do_Step_3_Point_2+0x32>
		Fuel_Gauge_Init();
 800711a:	f7ff ff87 	bl	800702c <Fuel_Gauge_Init>
}
 800711e:	bf00      	nop
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20013ca4 	.word	0x20013ca4
 8007128:	20013b40 	.word	0x20013b40

0800712c <FUEL_GAUGE_Task>:




void FUEL_GAUGE_Task(void *argument)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
		  Temperature_Convert();
		  vTaskDelay(10);
		  Age = maxim_max1726x_get_Age(Rsense);*/


        if( (Running_Mode == Aprv)  )
 8007134:	4b69      	ldr	r3, [pc, #420]	; (80072dc <FUEL_GAUGE_Task+0x1b0>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b04      	cmp	r3, #4
 800713a:	d13f      	bne.n	80071bc <FUEL_GAUGE_Task+0x90>
        {
             if((BREATH_STATE == EXPIRATION_CYCLE))
 800713c:	4b68      	ldr	r3, [pc, #416]	; (80072e0 <FUEL_GAUGE_Task+0x1b4>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2b01      	cmp	r3, #1
 8007142:	f040 80c6 	bne.w	80072d2 <FUEL_GAUGE_Task+0x1a6>
             {
				Battery_Raw_Value  = ((Adc.AdcData[3]-2250)*100)/(750.0);
 8007146:	4b67      	ldr	r3, [pc, #412]	; (80072e4 <FUEL_GAUGE_Task+0x1b8>)
 8007148:	88db      	ldrh	r3, [r3, #6]
 800714a:	f6a3 03ca 	subw	r3, r3, #2250	; 0x8ca
 800714e:	2264      	movs	r2, #100	; 0x64
 8007150:	fb02 f303 	mul.w	r3, r2, r3
 8007154:	4618      	mov	r0, r3
 8007156:	f7f9 f98d 	bl	8000474 <__aeabi_i2d>
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	4b62      	ldr	r3, [pc, #392]	; (80072e8 <FUEL_GAUGE_Task+0x1bc>)
 8007160:	f7f9 fb1c 	bl	800079c <__aeabi_ddiv>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4610      	mov	r0, r2
 800716a:	4619      	mov	r1, r3
 800716c:	f7f9 fcce 	bl	8000b0c <__aeabi_d2f>
 8007170:	4603      	mov	r3, r0
 8007172:	4a5e      	ldr	r2, [pc, #376]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 8007174:	6013      	str	r3, [r2, #0]
				if(Battery_Raw_Value>100)
 8007176:	4b5d      	ldr	r3, [pc, #372]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 8007178:	edd3 7a00 	vldr	s15, [r3]
 800717c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80072f0 <FUEL_GAUGE_Task+0x1c4>
 8007180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007188:	dd02      	ble.n	8007190 <FUEL_GAUGE_Task+0x64>
				{
					Battery_Raw_Value=100;
 800718a:	4b58      	ldr	r3, [pc, #352]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 800718c:	4a59      	ldr	r2, [pc, #356]	; (80072f4 <FUEL_GAUGE_Task+0x1c8>)
 800718e:	601a      	str	r2, [r3, #0]
				}
				Bat_Avg += Battery_Raw_Value;
 8007190:	4b59      	ldr	r3, [pc, #356]	; (80072f8 <FUEL_GAUGE_Task+0x1cc>)
 8007192:	ed93 7a00 	vldr	s14, [r3]
 8007196:	4b55      	ldr	r3, [pc, #340]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 8007198:	edd3 7a00 	vldr	s15, [r3]
 800719c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071a0:	4b55      	ldr	r3, [pc, #340]	; (80072f8 <FUEL_GAUGE_Task+0x1cc>)
 80071a2:	edc3 7a00 	vstr	s15, [r3]
				Bat_Avg_count++;
 80071a6:	4b55      	ldr	r3, [pc, #340]	; (80072fc <FUEL_GAUGE_Task+0x1d0>)
 80071a8:	edd3 7a00 	vldr	s15, [r3]
 80071ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071b4:	4b51      	ldr	r3, [pc, #324]	; (80072fc <FUEL_GAUGE_Task+0x1d0>)
 80071b6:	edc3 7a00 	vstr	s15, [r3]
 80071ba:	e08a      	b.n	80072d2 <FUEL_GAUGE_Task+0x1a6>
             }
        }
        else if(Run_Current_Breathe_State == Run_Expiration_Cycle)
 80071bc:	4b50      	ldr	r3, [pc, #320]	; (8007300 <FUEL_GAUGE_Task+0x1d4>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d13a      	bne.n	800723a <FUEL_GAUGE_Task+0x10e>
        {

			Battery_Raw_Value  = ((Adc.AdcData[3]-2250)*100)/(750.0);
 80071c4:	4b47      	ldr	r3, [pc, #284]	; (80072e4 <FUEL_GAUGE_Task+0x1b8>)
 80071c6:	88db      	ldrh	r3, [r3, #6]
 80071c8:	f6a3 03ca 	subw	r3, r3, #2250	; 0x8ca
 80071cc:	2264      	movs	r2, #100	; 0x64
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7f9 f94e 	bl	8000474 <__aeabi_i2d>
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	4b42      	ldr	r3, [pc, #264]	; (80072e8 <FUEL_GAUGE_Task+0x1bc>)
 80071de:	f7f9 fadd 	bl	800079c <__aeabi_ddiv>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4610      	mov	r0, r2
 80071e8:	4619      	mov	r1, r3
 80071ea:	f7f9 fc8f 	bl	8000b0c <__aeabi_d2f>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4a3e      	ldr	r2, [pc, #248]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 80071f2:	6013      	str	r3, [r2, #0]
			if(Battery_Raw_Value>100)
 80071f4:	4b3d      	ldr	r3, [pc, #244]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 80071f6:	edd3 7a00 	vldr	s15, [r3]
 80071fa:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80072f0 <FUEL_GAUGE_Task+0x1c4>
 80071fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007206:	dd02      	ble.n	800720e <FUEL_GAUGE_Task+0xe2>
			{
				Battery_Raw_Value=100;
 8007208:	4b38      	ldr	r3, [pc, #224]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 800720a:	4a3a      	ldr	r2, [pc, #232]	; (80072f4 <FUEL_GAUGE_Task+0x1c8>)
 800720c:	601a      	str	r2, [r3, #0]
			}
			Bat_Avg += Battery_Raw_Value;
 800720e:	4b3a      	ldr	r3, [pc, #232]	; (80072f8 <FUEL_GAUGE_Task+0x1cc>)
 8007210:	ed93 7a00 	vldr	s14, [r3]
 8007214:	4b35      	ldr	r3, [pc, #212]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 8007216:	edd3 7a00 	vldr	s15, [r3]
 800721a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800721e:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <FUEL_GAUGE_Task+0x1cc>)
 8007220:	edc3 7a00 	vstr	s15, [r3]
			Bat_Avg_count++;
 8007224:	4b35      	ldr	r3, [pc, #212]	; (80072fc <FUEL_GAUGE_Task+0x1d0>)
 8007226:	edd3 7a00 	vldr	s15, [r3]
 800722a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800722e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007232:	4b32      	ldr	r3, [pc, #200]	; (80072fc <FUEL_GAUGE_Task+0x1d0>)
 8007234:	edc3 7a00 	vstr	s15, [r3]
 8007238:	e04b      	b.n	80072d2 <FUEL_GAUGE_Task+0x1a6>
        }
        else if(Run_Current_Breathe_State == No_Run_State)
 800723a:	4b31      	ldr	r3, [pc, #196]	; (8007300 <FUEL_GAUGE_Task+0x1d4>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d147      	bne.n	80072d2 <FUEL_GAUGE_Task+0x1a6>
        {

			Battery_Raw_Value  = ((Adc.AdcData[3]-2250)*100)/(750.0);
 8007242:	4b28      	ldr	r3, [pc, #160]	; (80072e4 <FUEL_GAUGE_Task+0x1b8>)
 8007244:	88db      	ldrh	r3, [r3, #6]
 8007246:	f6a3 03ca 	subw	r3, r3, #2250	; 0x8ca
 800724a:	2264      	movs	r2, #100	; 0x64
 800724c:	fb02 f303 	mul.w	r3, r2, r3
 8007250:	4618      	mov	r0, r3
 8007252:	f7f9 f90f 	bl	8000474 <__aeabi_i2d>
 8007256:	f04f 0200 	mov.w	r2, #0
 800725a:	4b23      	ldr	r3, [pc, #140]	; (80072e8 <FUEL_GAUGE_Task+0x1bc>)
 800725c:	f7f9 fa9e 	bl	800079c <__aeabi_ddiv>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	f7f9 fc50 	bl	8000b0c <__aeabi_d2f>
 800726c:	4603      	mov	r3, r0
 800726e:	4a1f      	ldr	r2, [pc, #124]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 8007270:	6013      	str	r3, [r2, #0]
			if(Battery_Raw_Value>100)
 8007272:	4b1e      	ldr	r3, [pc, #120]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 8007274:	edd3 7a00 	vldr	s15, [r3]
 8007278:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80072f0 <FUEL_GAUGE_Task+0x1c4>
 800727c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007284:	dd02      	ble.n	800728c <FUEL_GAUGE_Task+0x160>
			{
				Battery_Raw_Value=100;
 8007286:	4b19      	ldr	r3, [pc, #100]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 8007288:	4a1a      	ldr	r2, [pc, #104]	; (80072f4 <FUEL_GAUGE_Task+0x1c8>)
 800728a:	601a      	str	r2, [r3, #0]
			}
			Bat_Avg += Battery_Raw_Value;
 800728c:	4b1a      	ldr	r3, [pc, #104]	; (80072f8 <FUEL_GAUGE_Task+0x1cc>)
 800728e:	ed93 7a00 	vldr	s14, [r3]
 8007292:	4b16      	ldr	r3, [pc, #88]	; (80072ec <FUEL_GAUGE_Task+0x1c0>)
 8007294:	edd3 7a00 	vldr	s15, [r3]
 8007298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800729c:	4b16      	ldr	r3, [pc, #88]	; (80072f8 <FUEL_GAUGE_Task+0x1cc>)
 800729e:	edc3 7a00 	vstr	s15, [r3]
			Bat_Avg_count++;
 80072a2:	4b16      	ldr	r3, [pc, #88]	; (80072fc <FUEL_GAUGE_Task+0x1d0>)
 80072a4:	edd3 7a00 	vldr	s15, [r3]
 80072a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072b0:	4b12      	ldr	r3, [pc, #72]	; (80072fc <FUEL_GAUGE_Task+0x1d0>)
 80072b2:	edc3 7a00 	vstr	s15, [r3]

			if(Bat_Avg_count > 1000)
 80072b6:	4b11      	ldr	r3, [pc, #68]	; (80072fc <FUEL_GAUGE_Task+0x1d0>)
 80072b8:	edd3 7a00 	vldr	s15, [r3]
 80072bc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007304 <FUEL_GAUGE_Task+0x1d8>
 80072c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c8:	dd03      	ble.n	80072d2 <FUEL_GAUGE_Task+0x1a6>
			{
				AC_Supply_or_Battery_Supply_Indication();
 80072ca:	f7fa f80f 	bl	80012ec <AC_Supply_or_Battery_Supply_Indication>
				Convert_Battery_Percentage();
 80072ce:	f000 f81b 	bl	8007308 <Convert_Battery_Percentage>
			}
        }


		vTaskDelay(10);
 80072d2:	200a      	movs	r0, #10
 80072d4:	f017 ffaa 	bl	801f22c <vTaskDelay>
        if( (Running_Mode == Aprv)  )
 80072d8:	e72c      	b.n	8007134 <FUEL_GAUGE_Task+0x8>
 80072da:	bf00      	nop
 80072dc:	20014238 	.word	0x20014238
 80072e0:	200140fd 	.word	0x200140fd
 80072e4:	20013d04 	.word	0x20013d04
 80072e8:	40877000 	.word	0x40877000
 80072ec:	20014590 	.word	0x20014590
 80072f0:	42c80000 	.word	0x42c80000
 80072f4:	42c80000 	.word	0x42c80000
 80072f8:	20014224 	.word	0x20014224
 80072fc:	20013b30 	.word	0x20013b30
 8007300:	20013f7c 	.word	0x20013f7c
 8007304:	447a0000 	.word	0x447a0000

08007308 <Convert_Battery_Percentage>:
	}
}

void Convert_Battery_Percentage()
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
	if(Toggle == 0)
 800730e:	4b30      	ldr	r3, [pc, #192]	; (80073d0 <Convert_Battery_Percentage+0xc8>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d122      	bne.n	800735c <Convert_Battery_Percentage+0x54>
	{
		Battery_Voltage =  (uint8_t) (Bat_Avg / Bat_Avg_count);
 8007316:	4b2f      	ldr	r3, [pc, #188]	; (80073d4 <Convert_Battery_Percentage+0xcc>)
 8007318:	edd3 6a00 	vldr	s13, [r3]
 800731c:	4b2e      	ldr	r3, [pc, #184]	; (80073d8 <Convert_Battery_Percentage+0xd0>)
 800731e:	ed93 7a00 	vldr	s14, [r3]
 8007322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732a:	edc7 7a01 	vstr	s15, [r7, #4]
 800732e:	793b      	ldrb	r3, [r7, #4]
 8007330:	b2da      	uxtb	r2, r3
 8007332:	4b2a      	ldr	r3, [pc, #168]	; (80073dc <Convert_Battery_Percentage+0xd4>)
 8007334:	701a      	strb	r2, [r3, #0]
		Battery_Voltage_old = Battery_Voltage;
 8007336:	4b29      	ldr	r3, [pc, #164]	; (80073dc <Convert_Battery_Percentage+0xd4>)
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	4b29      	ldr	r3, [pc, #164]	; (80073e0 <Convert_Battery_Percentage+0xd8>)
 800733c:	701a      	strb	r2, [r3, #0]


		if(Battery_Voltage_new > Battery_Voltage)
 800733e:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <Convert_Battery_Percentage+0xdc>)
 8007340:	781a      	ldrb	r2, [r3, #0]
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <Convert_Battery_Percentage+0xd4>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d903      	bls.n	8007352 <Convert_Battery_Percentage+0x4a>
		{
			Battery_Voltage = Battery_Voltage_new;
 800734a:	4b26      	ldr	r3, [pc, #152]	; (80073e4 <Convert_Battery_Percentage+0xdc>)
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	4b23      	ldr	r3, [pc, #140]	; (80073dc <Convert_Battery_Percentage+0xd4>)
 8007350:	701a      	strb	r2, [r3, #0]
		}

		Battery_Voltage_new = Battery_Voltage;
 8007352:	4b22      	ldr	r3, [pc, #136]	; (80073dc <Convert_Battery_Percentage+0xd4>)
 8007354:	781a      	ldrb	r2, [r3, #0]
 8007356:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <Convert_Battery_Percentage+0xdc>)
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e024      	b.n	80073a6 <Convert_Battery_Percentage+0x9e>

	}
	else if(Toggle == 1)
 800735c:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <Convert_Battery_Percentage+0xc8>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d120      	bne.n	80073a6 <Convert_Battery_Percentage+0x9e>
	{
		Battery_Voltage =  (uint8_t) (Bat_Avg / Bat_Avg_count);
 8007364:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <Convert_Battery_Percentage+0xcc>)
 8007366:	edd3 6a00 	vldr	s13, [r3]
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <Convert_Battery_Percentage+0xd0>)
 800736c:	ed93 7a00 	vldr	s14, [r3]
 8007370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007378:	edc7 7a01 	vstr	s15, [r7, #4]
 800737c:	793b      	ldrb	r3, [r7, #4]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	4b16      	ldr	r3, [pc, #88]	; (80073dc <Convert_Battery_Percentage+0xd4>)
 8007382:	701a      	strb	r2, [r3, #0]
		if(Battery_Voltage_old < Battery_Voltage)
 8007384:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <Convert_Battery_Percentage+0xd8>)
 8007386:	781a      	ldrb	r2, [r3, #0]
 8007388:	4b14      	ldr	r3, [pc, #80]	; (80073dc <Convert_Battery_Percentage+0xd4>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d203      	bcs.n	8007398 <Convert_Battery_Percentage+0x90>
		{
			Battery_Voltage = Battery_Voltage_old;
 8007390:	4b13      	ldr	r3, [pc, #76]	; (80073e0 <Convert_Battery_Percentage+0xd8>)
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	4b11      	ldr	r3, [pc, #68]	; (80073dc <Convert_Battery_Percentage+0xd4>)
 8007396:	701a      	strb	r2, [r3, #0]
		}
		Battery_Voltage_old = Battery_Voltage;
 8007398:	4b10      	ldr	r3, [pc, #64]	; (80073dc <Convert_Battery_Percentage+0xd4>)
 800739a:	781a      	ldrb	r2, [r3, #0]
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <Convert_Battery_Percentage+0xd8>)
 800739e:	701a      	strb	r2, [r3, #0]
		Battery_Voltage_new = 0;
 80073a0:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <Convert_Battery_Percentage+0xdc>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]
	}
	Bat_Avg         = 0;
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <Convert_Battery_Percentage+0xcc>)
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
	Bat_Avg_count   = 0;
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <Convert_Battery_Percentage+0xd0>)
 80073b0:	f04f 0200 	mov.w	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
	Send_Bluetooth_Data_Farme = SEND_SAMPLED_PARAMETER_FRAME;
 80073b6:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <Convert_Battery_Percentage+0xe0>)
 80073b8:	2203      	movs	r2, #3
 80073ba:	701a      	strb	r2, [r3, #0]
	Send_Frame                = First_Frame;
 80073bc:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <Convert_Battery_Percentage+0xe4>)
 80073be:	2201      	movs	r2, #1
 80073c0:	701a      	strb	r2, [r3, #0]
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	200001cf 	.word	0x200001cf
 80073d4:	20014224 	.word	0x20014224
 80073d8:	20013b30 	.word	0x20013b30
 80073dc:	20013c89 	.word	0x20013c89
 80073e0:	20000001 	.word	0x20000001
 80073e4:	200001e4 	.word	0x200001e4
 80073e8:	20013d10 	.word	0x20013d10
 80073ec:	20013eec 	.word	0x20013eec

080073f0 <HFNC_Task>:
int Flow_count;
uint16_t LAST_HFNC_DAC_VALUE = 1800;


void HFNC_Task (void *argument)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Parkar_valve_Signal( HFNC_DAC_VALUE);
 80073f8:	4b33      	ldr	r3, [pc, #204]	; (80074c8 <HFNC_Task+0xd8>)
 80073fa:	881a      	ldrh	r2, [r3, #0]
 80073fc:	4b33      	ldr	r3, [pc, #204]	; (80074cc <HFNC_Task+0xdc>)
 80073fe:	615a      	str	r2, [r3, #20]
		ExpValve_CLOSE();
 8007400:	4b33      	ldr	r3, [pc, #204]	; (80074d0 <HFNC_Task+0xe0>)
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	4a32      	ldr	r2, [pc, #200]	; (80074d0 <HFNC_Task+0xe0>)
 8007406:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800740a:	6153      	str	r3, [r2, #20]
		Check_O2_Supply();
 800740c:	f000 f958 	bl	80076c0 <Check_O2_Supply>
		Flow_count++;
 8007410:	4b30      	ldr	r3, [pc, #192]	; (80074d4 <HFNC_Task+0xe4>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3301      	adds	r3, #1
 8007416:	4a2f      	ldr	r2, [pc, #188]	; (80074d4 <HFNC_Task+0xe4>)
 8007418:	6013      	str	r3, [r2, #0]
		Cummulative_Flow_Value += Flow_Sensor_cal._Flow_Val;
 800741a:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <HFNC_Task+0xe8>)
 800741c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007426:	4b2d      	ldr	r3, [pc, #180]	; (80074dc <HFNC_Task+0xec>)
 8007428:	edd3 7a00 	vldr	s15, [r3]
 800742c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007430:	4b2a      	ldr	r3, [pc, #168]	; (80074dc <HFNC_Task+0xec>)
 8007432:	edc3 7a00 	vstr	s15, [r3]

		if(Flow_count >= 3000)
 8007436:	4b27      	ldr	r3, [pc, #156]	; (80074d4 <HFNC_Task+0xe4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800743e:	4293      	cmp	r3, r2
 8007440:	dd3d      	ble.n	80074be <HFNC_Task+0xce>
		{
			FLOW_AVG               = ((float)Cummulative_Flow_Value / (float)Flow_count);
 8007442:	4b26      	ldr	r3, [pc, #152]	; (80074dc <HFNC_Task+0xec>)
 8007444:	edd3 6a00 	vldr	s13, [r3]
 8007448:	4b22      	ldr	r3, [pc, #136]	; (80074d4 <HFNC_Task+0xe4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	ee07 3a90 	vmov	s15, r3
 8007450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800745c:	edc7 7a00 	vstr	s15, [r7]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <HFNC_Task+0xf0>)
 8007466:	701a      	strb	r2, [r3, #0]
			LAST_HFNC_DAC_VALUE    = HFNC_TUNE_DAC_VALUE(&LAST_HFNC_DAC_VALUE, HFNC._Flow_Rate);
 8007468:	4b1e      	ldr	r3, [pc, #120]	; (80074e4 <HFNC_Task+0xf4>)
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	4619      	mov	r1, r3
 8007470:	481d      	ldr	r0, [pc, #116]	; (80074e8 <HFNC_Task+0xf8>)
 8007472:	f000 f967 	bl	8007744 <HFNC_TUNE_DAC_VALUE>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <HFNC_Task+0xf8>)
 800747c:	801a      	strh	r2, [r3, #0]
			HFNC_DAC_VALUE         = LAST_HFNC_DAC_VALUE;
 800747e:	4b1a      	ldr	r3, [pc, #104]	; (80074e8 <HFNC_Task+0xf8>)
 8007480:	881a      	ldrh	r2, [r3, #0]
 8007482:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <HFNC_Task+0xd8>)
 8007484:	801a      	strh	r2, [r3, #0]
			Cummulative_Flow_Value = 0;
 8007486:	4b15      	ldr	r3, [pc, #84]	; (80074dc <HFNC_Task+0xec>)
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
			Flow_count             = 0;
 800748e:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <HFNC_Task+0xe4>)
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]
			Flow_count             = 0;
 8007494:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <HFNC_Task+0xe4>)
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]

			Green_Led_ON();
 800749a:	4b14      	ldr	r3, [pc, #80]	; (80074ec <HFNC_Task+0xfc>)
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <HFNC_Task+0xfc>)
 80074a0:	f043 0320 	orr.w	r3, r3, #32
 80074a4:	6153      	str	r3, [r2, #20]
			Blue_Led_OFF();
 80074a6:	4b11      	ldr	r3, [pc, #68]	; (80074ec <HFNC_Task+0xfc>)
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	4a10      	ldr	r2, [pc, #64]	; (80074ec <HFNC_Task+0xfc>)
 80074ac:	f023 0308 	bic.w	r3, r3, #8
 80074b0:	6153      	str	r3, [r2, #20]
			Red_Led_OFF();
 80074b2:	4b0e      	ldr	r3, [pc, #56]	; (80074ec <HFNC_Task+0xfc>)
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	4a0d      	ldr	r2, [pc, #52]	; (80074ec <HFNC_Task+0xfc>)
 80074b8:	f023 0310 	bic.w	r3, r3, #16
 80074bc:	6153      	str	r3, [r2, #20]
		}

		vTaskDelay(Two_Millisecond_Delay);
 80074be:	2002      	movs	r0, #2
 80074c0:	f017 feb4 	bl	801f22c <vTaskDelay>
		Parkar_valve_Signal( HFNC_DAC_VALUE);
 80074c4:	e798      	b.n	80073f8 <HFNC_Task+0x8>
 80074c6:	bf00      	nop
 80074c8:	2001394a 	.word	0x2001394a
 80074cc:	40007400 	.word	0x40007400
 80074d0:	40020400 	.word	0x40020400
 80074d4:	200145b0 	.word	0x200145b0
 80074d8:	20013fb0 	.word	0x20013fb0
 80074dc:	200145a8 	.word	0x200145a8
 80074e0:	200145ae 	.word	0x200145ae
 80074e4:	200139ec 	.word	0x200139ec
 80074e8:	20000002 	.word	0x20000002
 80074ec:	40020c00 	.word	0x40020c00

080074f0 <HFNC_Packet_Data>:




void HFNC_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	HFNC._Flow_Rate=(Receive_Graph_Packet ->Flow_Limit_FiO2_Flow_Limit);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	7b5b      	ldrb	r3, [r3, #13]
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	4b53      	ldr	r3, [pc, #332]	; (800764c <HFNC_Packet_Data+0x15c>)
 8007500:	801a      	strh	r2, [r3, #0]

	vTaskSuspend(Vc_Cmv_Handler);
 8007502:	4b53      	ldr	r3, [pc, #332]	; (8007650 <HFNC_Packet_Data+0x160>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f017 fec4 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800750c:	4b51      	ldr	r3, [pc, #324]	; (8007654 <HFNC_Packet_Data+0x164>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f017 febf 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(One_Time_Handler);
 8007516:	4b50      	ldr	r3, [pc, #320]	; (8007658 <HFNC_Packet_Data+0x168>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f017 feba 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Cmv_Handler);
 8007520:	4b4e      	ldr	r3, [pc, #312]	; (800765c <HFNC_Packet_Data+0x16c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f017 feb5 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800752a:	4b4d      	ldr	r3, [pc, #308]	; (8007660 <HFNC_Packet_Data+0x170>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f017 feb0 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 8007534:	4b4b      	ldr	r3, [pc, #300]	; (8007664 <HFNC_Packet_Data+0x174>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4618      	mov	r0, r3
 800753a:	f017 feab 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800753e:	4b4a      	ldr	r3, [pc, #296]	; (8007668 <HFNC_Packet_Data+0x178>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f017 fea6 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 8007548:	4b48      	ldr	r3, [pc, #288]	; (800766c <HFNC_Packet_Data+0x17c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f017 fea1 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 8007552:	4b47      	ldr	r3, [pc, #284]	; (8007670 <HFNC_Packet_Data+0x180>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f017 fe9c 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(BACKUP_PC_Handler);
 800755c:	4b45      	ldr	r3, [pc, #276]	; (8007674 <HFNC_Packet_Data+0x184>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	f017 fe97 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 8007566:	4b44      	ldr	r3, [pc, #272]	; (8007678 <HFNC_Packet_Data+0x188>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f017 fe92 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 8007570:	4b42      	ldr	r3, [pc, #264]	; (800767c <HFNC_Packet_Data+0x18c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4618      	mov	r0, r3
 8007576:	f017 fe8d 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(CPAP_Handler);
 800757a:	4b41      	ldr	r3, [pc, #260]	; (8007680 <HFNC_Packet_Data+0x190>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4618      	mov	r0, r3
 8007580:	f017 fe88 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(BIPAP_Handler);
 8007584:	4b3f      	ldr	r3, [pc, #252]	; (8007684 <HFNC_Packet_Data+0x194>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f017 fe83 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800758e:	4b3e      	ldr	r3, [pc, #248]	; (8007688 <HFNC_Packet_Data+0x198>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f017 fe7e 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(APRV_Handler);
 8007598:	4b3c      	ldr	r3, [pc, #240]	; (800768c <HFNC_Packet_Data+0x19c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f017 fe79 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 80075a2:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <HFNC_Packet_Data+0x1a0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f017 fe74 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(Nebuliser_Handler);
 80075ac:	4b39      	ldr	r3, [pc, #228]	; (8007694 <HFNC_Packet_Data+0x1a4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f017 fe6f 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(Suction_Handler);
 80075b6:	4b38      	ldr	r3, [pc, #224]	; (8007698 <HFNC_Packet_Data+0x1a8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f017 fe6a 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(HFNC_Handler);
 80075c0:	4b36      	ldr	r3, [pc, #216]	; (800769c <HFNC_Packet_Data+0x1ac>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f017 fe65 	bl	801f294 <vTaskSuspend>

	ExpValve_OPEN();
 80075ca:	4b35      	ldr	r3, [pc, #212]	; (80076a0 <HFNC_Packet_Data+0x1b0>)
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	4a34      	ldr	r2, [pc, #208]	; (80076a0 <HFNC_Packet_Data+0x1b0>)
 80075d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075d4:	6153      	str	r3, [r2, #20]
	Blower_Signal( 0);
 80075d6:	4b33      	ldr	r3, [pc, #204]	; (80076a4 <HFNC_Packet_Data+0x1b4>)
 80075d8:	2200      	movs	r2, #0
 80075da:	609a      	str	r2, [r3, #8]
	Parkar_valve_Signal(0);
 80075dc:	4b31      	ldr	r3, [pc, #196]	; (80076a4 <HFNC_Packet_Data+0x1b4>)
 80075de:	2200      	movs	r2, #0
 80075e0:	615a      	str	r2, [r3, #20]
	Nebuliser_OFF();
 80075e2:	4b2f      	ldr	r3, [pc, #188]	; (80076a0 <HFNC_Packet_Data+0x1b0>)
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	4a2e      	ldr	r2, [pc, #184]	; (80076a0 <HFNC_Packet_Data+0x1b0>)
 80075e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ec:	6153      	str	r3, [r2, #20]

	HFNC_DAC_VALUE=0;
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <HFNC_Packet_Data+0x1b8>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	801a      	strh	r2, [r3, #0]
	 PID(&TPID, &Temp_Flow, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
	 PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
	 PID_SetSampleTime(&TPID, Time);
	 PID_SetOutputLimits(&TPID, HFNC_Dac1, HFNC_Dac2);
#endif
	Parkar_valve_Signal(0);
 80075f4:	4b2b      	ldr	r3, [pc, #172]	; (80076a4 <HFNC_Packet_Data+0x1b4>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	615a      	str	r2, [r3, #20]
	Oxygen_Parameter.Servo_Position=110;
 80075fa:	4b2c      	ldr	r3, [pc, #176]	; (80076ac <HFNC_Packet_Data+0x1bc>)
 80075fc:	226e      	movs	r2, #110	; 0x6e
 80075fe:	73da      	strb	r2, [r3, #15]
	Servo_Info(Oxygen_Parameter.Servo_Position);
 8007600:	4b2a      	ldr	r3, [pc, #168]	; (80076ac <HFNC_Packet_Data+0x1bc>)
 8007602:	7bdb      	ldrb	r3, [r3, #15]
 8007604:	4618      	mov	r0, r3
 8007606:	f004 fa2b 	bl	800ba60 <Servo_Info>
	Servo_Position_Feedback = SERVO_FULL_CLOSED;
 800760a:	4b29      	ldr	r3, [pc, #164]	; (80076b0 <HFNC_Packet_Data+0x1c0>)
 800760c:	225a      	movs	r2, #90	; 0x5a
 800760e:	701a      	strb	r2, [r3, #0]
	Servo_Angle(Oxygen_Parameter.Servo_Position);
 8007610:	4b26      	ldr	r3, [pc, #152]	; (80076ac <HFNC_Packet_Data+0x1bc>)
 8007612:	7bda      	ldrb	r2, [r3, #15]
 8007614:	4b27      	ldr	r3, [pc, #156]	; (80076b4 <HFNC_Packet_Data+0x1c4>)
 8007616:	635a      	str	r2, [r3, #52]	; 0x34

	Flow_count = 0;
 8007618:	4b27      	ldr	r3, [pc, #156]	; (80076b8 <HFNC_Packet_Data+0x1c8>)
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
	HFNC_DAC_VALUE = HFNC_DAC_Value(HFNC._Flow_Rate);
 800761e:	4b0b      	ldr	r3, [pc, #44]	; (800764c <HFNC_Packet_Data+0x15c>)
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	4618      	mov	r0, r3
 8007626:	f000 f905 	bl	8007834 <HFNC_DAC_Value>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <HFNC_Packet_Data+0x1b8>)
 8007630:	801a      	strh	r2, [r3, #0]
	LAST_HFNC_DAC_VALUE = HFNC_DAC_VALUE;
 8007632:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <HFNC_Packet_Data+0x1b8>)
 8007634:	881a      	ldrh	r2, [r3, #0]
 8007636:	4b21      	ldr	r3, [pc, #132]	; (80076bc <HFNC_Packet_Data+0x1cc>)
 8007638:	801a      	strh	r2, [r3, #0]

	vTaskResume(HFNC_Handler);
 800763a:	4b18      	ldr	r3, [pc, #96]	; (800769c <HFNC_Packet_Data+0x1ac>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f017 feec 	bl	801f41c <vTaskResume>


}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	200139ec 	.word	0x200139ec
 8007650:	200142f8 	.word	0x200142f8
 8007654:	20013998 	.word	0x20013998
 8007658:	20014094 	.word	0x20014094
 800765c:	20013f80 	.word	0x20013f80
 8007660:	20013ba0 	.word	0x20013ba0
 8007664:	20013ca0 	.word	0x20013ca0
 8007668:	20014348 	.word	0x20014348
 800766c:	20013f58 	.word	0x20013f58
 8007670:	200142e0 	.word	0x200142e0
 8007674:	20013bb4 	.word	0x20013bb4
 8007678:	20013fa8 	.word	0x20013fa8
 800767c:	20013f20 	.word	0x20013f20
 8007680:	20014374 	.word	0x20014374
 8007684:	20013af0 	.word	0x20013af0
 8007688:	200141cc 	.word	0x200141cc
 800768c:	20013f38 	.word	0x20013f38
 8007690:	20014148 	.word	0x20014148
 8007694:	20013bb8 	.word	0x20013bb8
 8007698:	2001423c 	.word	0x2001423c
 800769c:	20013ad8 	.word	0x20013ad8
 80076a0:	40020400 	.word	0x40020400
 80076a4:	40007400 	.word	0x40007400
 80076a8:	2001394a 	.word	0x2001394a
 80076ac:	2001409c 	.word	0x2001409c
 80076b0:	20014074 	.word	0x20014074
 80076b4:	40001800 	.word	0x40001800
 80076b8:	200145b0 	.word	0x200145b0
 80076bc:	20000002 	.word	0x20000002

080076c0 <Check_O2_Supply>:



void Check_O2_Supply()
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
		if(Flow_Sensor_cal._Flow_Val == 0)
 80076c4:	4b19      	ldr	r3, [pc, #100]	; (800772c <Check_O2_Supply+0x6c>)
 80076c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d12c      	bne.n	8007726 <Check_O2_Supply+0x66>
		{
			O2_supply_error_count++;
 80076cc:	4b18      	ldr	r3, [pc, #96]	; (8007730 <Check_O2_Supply+0x70>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	4a17      	ldr	r2, [pc, #92]	; (8007730 <Check_O2_Supply+0x70>)
 80076d4:	6013      	str	r3, [r2, #0]

			if(O2_supply_error_count >= 5000)
 80076d6:	4b16      	ldr	r3, [pc, #88]	; (8007730 <Check_O2_Supply+0x70>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f241 3287 	movw	r2, #4999	; 0x1387
 80076de:	4293      	cmp	r3, r2
 80076e0:	dd21      	ble.n	8007726 <Check_O2_Supply+0x66>
			{
				Clear_All_Alert_Bits();
 80076e2:	f7f9 fc45 	bl	8000f70 <Clear_All_Alert_Bits>

				SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 80076e6:	4a13      	ldr	r2, [pc, #76]	; (8007734 <Check_O2_Supply+0x74>)
 80076e8:	78d3      	ldrb	r3, [r2, #3]
 80076ea:	f043 0308 	orr.w	r3, r3, #8
 80076ee:	70d3      	strb	r3, [r2, #3]
				Send_Bluetooth_Data_Farme = SEND_ALERT_FRAME;
 80076f0:	4b11      	ldr	r3, [pc, #68]	; (8007738 <Check_O2_Supply+0x78>)
 80076f2:	2201      	movs	r2, #1
 80076f4:	701a      	strb	r2, [r3, #0]

				Red_Led_ON();
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <Check_O2_Supply+0x7c>)
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	4a10      	ldr	r2, [pc, #64]	; (800773c <Check_O2_Supply+0x7c>)
 80076fc:	f043 0310 	orr.w	r3, r3, #16
 8007700:	6153      	str	r3, [r2, #20]
				Blue_Led_OFF();
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <Check_O2_Supply+0x7c>)
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	4a0d      	ldr	r2, [pc, #52]	; (800773c <Check_O2_Supply+0x7c>)
 8007708:	f023 0308 	bic.w	r3, r3, #8
 800770c:	6153      	str	r3, [r2, #20]
				Green_Led_OFF();
 800770e:	4b0b      	ldr	r3, [pc, #44]	; (800773c <Check_O2_Supply+0x7c>)
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	4a0a      	ldr	r2, [pc, #40]	; (800773c <Check_O2_Supply+0x7c>)
 8007714:	f023 0320 	bic.w	r3, r3, #32
 8007718:	6153      	str	r3, [r2, #20]

				Flow_count            = 0;
 800771a:	4b09      	ldr	r3, [pc, #36]	; (8007740 <Check_O2_Supply+0x80>)
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
				O2_supply_error_count = 0;
 8007720:	4b03      	ldr	r3, [pc, #12]	; (8007730 <Check_O2_Supply+0x70>)
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
			}
		}
}
 8007726:	bf00      	nop
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20013fb0 	.word	0x20013fb0
 8007730:	200145a4 	.word	0x200145a4
 8007734:	20013b34 	.word	0x20013b34
 8007738:	20013d10 	.word	0x20013d10
 800773c:	40020c00 	.word	0x40020c00
 8007740:	200145b0 	.word	0x200145b0

08007744 <HFNC_TUNE_DAC_VALUE>:




static uint16_t HFNC_TUNE_DAC_VALUE(uint16_t *Last_Blower_DAC_Val,uint8_t Set_Flow)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
	if(  ( FLOW_AVG)  > ( Set_Flow ) && (FLOW_AVG  < (Set_Flow + 2) ) )
 8007750:	4b37      	ldr	r3, [pc, #220]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	78fa      	ldrb	r2, [r7, #3]
 8007756:	429a      	cmp	r2, r3
 8007758:	d20c      	bcs.n	8007774 <HFNC_TUNE_DAC_VALUE+0x30>
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	3301      	adds	r3, #1
 800775e:	4a34      	ldr	r2, [pc, #208]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 8007760:	7812      	ldrb	r2, [r2, #0]
 8007762:	4293      	cmp	r3, r2
 8007764:	db06      	blt.n	8007774 <HFNC_TUNE_DAC_VALUE+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-1);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	801a      	strh	r2, [r3, #0]
 8007772:	e055      	b.n	8007820 <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if(  ( FLOW_AVG)  >= ( Set_Flow + 2 ) && (FLOW_AVG  < (Set_Flow + 4) ) )
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	3301      	adds	r3, #1
 8007778:	4a2d      	ldr	r2, [pc, #180]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	4293      	cmp	r3, r2
 800777e:	da0c      	bge.n	800779a <HFNC_TUNE_DAC_VALUE+0x56>
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	3303      	adds	r3, #3
 8007784:	4a2a      	ldr	r2, [pc, #168]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 8007786:	7812      	ldrb	r2, [r2, #0]
 8007788:	4293      	cmp	r3, r2
 800778a:	db06      	blt.n	800779a <HFNC_TUNE_DAC_VALUE+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-2);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	3b02      	subs	r3, #2
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	e042      	b.n	8007820 <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if(  ( FLOW_AVG)  >= ( Set_Flow + 4 )  )
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	3303      	adds	r3, #3
 800779e:	4a24      	ldr	r2, [pc, #144]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 80077a0:	7812      	ldrb	r2, [r2, #0]
 80077a2:	4293      	cmp	r3, r2
 80077a4:	da06      	bge.n	80077b4 <HFNC_TUNE_DAC_VALUE+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-4);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	3b04      	subs	r3, #4
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	e035      	b.n	8007820 <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if( (FLOW_AVG  < Set_Flow) && (FLOW_AVG  > (Set_Flow -2) ) )
 80077b4:	4b1e      	ldr	r3, [pc, #120]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	78fa      	ldrb	r2, [r7, #3]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d90c      	bls.n	80077d8 <HFNC_TUNE_DAC_VALUE+0x94>
 80077be:	78fb      	ldrb	r3, [r7, #3]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 80077c4:	7812      	ldrb	r2, [r2, #0]
 80077c6:	4293      	cmp	r3, r2
 80077c8:	dc06      	bgt.n	80077d8 <HFNC_TUNE_DAC_VALUE+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+1);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	3301      	adds	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	e023      	b.n	8007820 <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if(  (FLOW_AVG  <= (Set_Flow-2) ) && (FLOW_AVG  >  (Set_Flow-4) ) )
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	3b01      	subs	r3, #1
 80077dc:	4a14      	ldr	r2, [pc, #80]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 80077de:	7812      	ldrb	r2, [r2, #0]
 80077e0:	4293      	cmp	r3, r2
 80077e2:	dd0c      	ble.n	80077fe <HFNC_TUNE_DAC_VALUE+0xba>
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	3b03      	subs	r3, #3
 80077e8:	4a11      	ldr	r2, [pc, #68]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 80077ea:	7812      	ldrb	r2, [r2, #0]
 80077ec:	4293      	cmp	r3, r2
 80077ee:	dc06      	bgt.n	80077fe <HFNC_TUNE_DAC_VALUE+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+2);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	3302      	adds	r3, #2
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	801a      	strh	r2, [r3, #0]
 80077fc:	e010      	b.n	8007820 <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if(  (FLOW_AVG  <= (Set_Flow-4) )  )
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	3b03      	subs	r3, #3
 8007802:	4a0b      	ldr	r2, [pc, #44]	; (8007830 <HFNC_TUNE_DAC_VALUE+0xec>)
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	4293      	cmp	r3, r2
 8007808:	dd06      	ble.n	8007818 <HFNC_TUNE_DAC_VALUE+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+4);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	3304      	adds	r3, #4
 8007810:	b29a      	uxth	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	e003      	b.n	8007820 <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	881a      	ldrh	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	881b      	ldrh	r3, [r3, #0]
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	200145ae 	.word	0x200145ae

08007834 <HFNC_DAC_Value>:



uint16_t HFNC_DAC_Value(uint8_t Set_VAL)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	71fb      	strb	r3, [r7, #7]

		switch(Set_VAL)
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	3b05      	subs	r3, #5
 8007842:	2b37      	cmp	r3, #55	; 0x37
 8007844:	f200 818c 	bhi.w	8007b60 <HFNC_DAC_Value+0x32c>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <HFNC_DAC_Value+0x1c>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007931 	.word	0x08007931
 8007854:	0800793b 	.word	0x0800793b
 8007858:	08007945 	.word	0x08007945
 800785c:	0800794f 	.word	0x0800794f
 8007860:	08007959 	.word	0x08007959
 8007864:	08007963 	.word	0x08007963
 8007868:	0800796d 	.word	0x0800796d
 800786c:	08007977 	.word	0x08007977
 8007870:	08007981 	.word	0x08007981
 8007874:	0800798b 	.word	0x0800798b
 8007878:	08007995 	.word	0x08007995
 800787c:	0800799f 	.word	0x0800799f
 8007880:	080079a9 	.word	0x080079a9
 8007884:	080079b3 	.word	0x080079b3
 8007888:	080079bd 	.word	0x080079bd
 800788c:	080079c7 	.word	0x080079c7
 8007890:	080079d1 	.word	0x080079d1
 8007894:	080079db 	.word	0x080079db
 8007898:	080079e5 	.word	0x080079e5
 800789c:	080079ef 	.word	0x080079ef
 80078a0:	080079f9 	.word	0x080079f9
 80078a4:	08007a03 	.word	0x08007a03
 80078a8:	08007a0d 	.word	0x08007a0d
 80078ac:	08007a17 	.word	0x08007a17
 80078b0:	08007a21 	.word	0x08007a21
 80078b4:	08007a2b 	.word	0x08007a2b
 80078b8:	08007a35 	.word	0x08007a35
 80078bc:	08007a3f 	.word	0x08007a3f
 80078c0:	08007a49 	.word	0x08007a49
 80078c4:	08007a53 	.word	0x08007a53
 80078c8:	08007a5d 	.word	0x08007a5d
 80078cc:	08007a67 	.word	0x08007a67
 80078d0:	08007a71 	.word	0x08007a71
 80078d4:	08007a7b 	.word	0x08007a7b
 80078d8:	08007a85 	.word	0x08007a85
 80078dc:	08007a8f 	.word	0x08007a8f
 80078e0:	08007a99 	.word	0x08007a99
 80078e4:	08007aa3 	.word	0x08007aa3
 80078e8:	08007aad 	.word	0x08007aad
 80078ec:	08007ab7 	.word	0x08007ab7
 80078f0:	08007ac1 	.word	0x08007ac1
 80078f4:	08007acb 	.word	0x08007acb
 80078f8:	08007ad5 	.word	0x08007ad5
 80078fc:	08007adf 	.word	0x08007adf
 8007900:	08007ae9 	.word	0x08007ae9
 8007904:	08007af3 	.word	0x08007af3
 8007908:	08007afd 	.word	0x08007afd
 800790c:	08007b07 	.word	0x08007b07
 8007910:	08007b11 	.word	0x08007b11
 8007914:	08007b1b 	.word	0x08007b1b
 8007918:	08007b25 	.word	0x08007b25
 800791c:	08007b2f 	.word	0x08007b2f
 8007920:	08007b39 	.word	0x08007b39
 8007924:	08007b43 	.word	0x08007b43
 8007928:	08007b4d 	.word	0x08007b4d
 800792c:	08007b57 	.word	0x08007b57
		{
		    case 5:
		    	HFNC_DAC_VALUE_TEMP  =  1850;
 8007930:	4b8f      	ldr	r3, [pc, #572]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007932:	f240 723a 	movw	r2, #1850	; 0x73a
 8007936:	801a      	strh	r2, [r3, #0]
		    break;
 8007938:	e112      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
		    case 6:
		    	 HFNC_DAC_VALUE_TEMP  = 1860;
 800793a:	4b8d      	ldr	r3, [pc, #564]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 800793c:	f240 7244 	movw	r2, #1860	; 0x744
 8007940:	801a      	strh	r2, [r3, #0]
		    break;
 8007942:	e10d      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
		    case 7:
				 HFNC_DAC_VALUE_TEMP  = 1870;
 8007944:	4b8a      	ldr	r3, [pc, #552]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007946:	f240 724e 	movw	r2, #1870	; 0x74e
 800794a:	801a      	strh	r2, [r3, #0]
			break;
 800794c:	e108      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
		    case 8:
				 HFNC_DAC_VALUE_TEMP  = 1880;
 800794e:	4b88      	ldr	r3, [pc, #544]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007950:	f44f 62eb 	mov.w	r2, #1880	; 0x758
 8007954:	801a      	strh	r2, [r3, #0]
			break;
 8007956:	e103      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
		    case 9:
				 HFNC_DAC_VALUE_TEMP  = 1890;
 8007958:	4b85      	ldr	r3, [pc, #532]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 800795a:	f240 7262 	movw	r2, #1890	; 0x762
 800795e:	801a      	strh	r2, [r3, #0]
			break;
 8007960:	e0fe      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
		    case 10:
				 HFNC_DAC_VALUE_TEMP  = 1900;
 8007962:	4b83      	ldr	r3, [pc, #524]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007964:	f240 726c 	movw	r2, #1900	; 0x76c
 8007968:	801a      	strh	r2, [r3, #0]
			break;
 800796a:	e0f9      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 11:
				 HFNC_DAC_VALUE_TEMP   = 1905;
 800796c:	4b80      	ldr	r3, [pc, #512]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 800796e:	f240 7271 	movw	r2, #1905	; 0x771
 8007972:	801a      	strh	r2, [r3, #0]
			break;
 8007974:	e0f4      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 12:
				 HFNC_DAC_VALUE_TEMP  = 1910;
 8007976:	4b7e      	ldr	r3, [pc, #504]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007978:	f240 7276 	movw	r2, #1910	; 0x776
 800797c:	801a      	strh	r2, [r3, #0]
			break;
 800797e:	e0ef      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 13:
				 HFNC_DAC_VALUE_TEMP  = 1915;
 8007980:	4b7b      	ldr	r3, [pc, #492]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007982:	f240 727b 	movw	r2, #1915	; 0x77b
 8007986:	801a      	strh	r2, [r3, #0]
			break;
 8007988:	e0ea      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 14:
				 HFNC_DAC_VALUE_TEMP  = 1920;
 800798a:	4b79      	ldr	r3, [pc, #484]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 800798c:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8007990:	801a      	strh	r2, [r3, #0]
			break;
 8007992:	e0e5      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 15:
				 HFNC_DAC_VALUE_TEMP  = 1920;
 8007994:	4b76      	ldr	r3, [pc, #472]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007996:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800799a:	801a      	strh	r2, [r3, #0]
			break;
 800799c:	e0e0      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 16:
				 HFNC_DAC_VALUE_TEMP  = 1925;
 800799e:	4b74      	ldr	r3, [pc, #464]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079a0:	f240 7285 	movw	r2, #1925	; 0x785
 80079a4:	801a      	strh	r2, [r3, #0]
			break;
 80079a6:	e0db      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 17:
				 HFNC_DAC_VALUE_TEMP   = 1925;
 80079a8:	4b71      	ldr	r3, [pc, #452]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079aa:	f240 7285 	movw	r2, #1925	; 0x785
 80079ae:	801a      	strh	r2, [r3, #0]
			break;
 80079b0:	e0d6      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 18:
				 HFNC_DAC_VALUE_TEMP  = 1925;
 80079b2:	4b6f      	ldr	r3, [pc, #444]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079b4:	f240 7285 	movw	r2, #1925	; 0x785
 80079b8:	801a      	strh	r2, [r3, #0]
			break;
 80079ba:	e0d1      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 19:
				 HFNC_DAC_VALUE_TEMP  = 1925;
 80079bc:	4b6c      	ldr	r3, [pc, #432]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079be:	f240 7285 	movw	r2, #1925	; 0x785
 80079c2:	801a      	strh	r2, [r3, #0]
			break;
 80079c4:	e0cc      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 20:
				 HFNC_DAC_VALUE_TEMP  = 1930;
 80079c6:	4b6a      	ldr	r3, [pc, #424]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079c8:	f240 728a 	movw	r2, #1930	; 0x78a
 80079cc:	801a      	strh	r2, [r3, #0]
			break;
 80079ce:	e0c7      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 21:
				 HFNC_DAC_VALUE_TEMP  = 1935;
 80079d0:	4b67      	ldr	r3, [pc, #412]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079d2:	f240 728f 	movw	r2, #1935	; 0x78f
 80079d6:	801a      	strh	r2, [r3, #0]
			break;
 80079d8:	e0c2      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 22:
				 HFNC_DAC_VALUE_TEMP  = 1940;
 80079da:	4b65      	ldr	r3, [pc, #404]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079dc:	f240 7294 	movw	r2, #1940	; 0x794
 80079e0:	801a      	strh	r2, [r3, #0]
			break;
 80079e2:	e0bd      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 23:
				 HFNC_DAC_VALUE_TEMP   = 1945;
 80079e4:	4b62      	ldr	r3, [pc, #392]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079e6:	f240 7299 	movw	r2, #1945	; 0x799
 80079ea:	801a      	strh	r2, [r3, #0]
			break;
 80079ec:	e0b8      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 24:
				 HFNC_DAC_VALUE_TEMP  = 1950;
 80079ee:	4b60      	ldr	r3, [pc, #384]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079f0:	f240 729e 	movw	r2, #1950	; 0x79e
 80079f4:	801a      	strh	r2, [r3, #0]
			break;
 80079f6:	e0b3      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 25:
				 HFNC_DAC_VALUE_TEMP  = 1955;
 80079f8:	4b5d      	ldr	r3, [pc, #372]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 80079fa:	f240 72a3 	movw	r2, #1955	; 0x7a3
 80079fe:	801a      	strh	r2, [r3, #0]
			break;
 8007a00:	e0ae      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 26:
				 HFNC_DAC_VALUE_TEMP  = 1955;
 8007a02:	4b5b      	ldr	r3, [pc, #364]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a04:	f240 72a3 	movw	r2, #1955	; 0x7a3
 8007a08:	801a      	strh	r2, [r3, #0]
			break;
 8007a0a:	e0a9      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 27:
				 HFNC_DAC_VALUE_TEMP  = 1955;
 8007a0c:	4b58      	ldr	r3, [pc, #352]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a0e:	f240 72a3 	movw	r2, #1955	; 0x7a3
 8007a12:	801a      	strh	r2, [r3, #0]
			break;
 8007a14:	e0a4      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 28:
				 HFNC_DAC_VALUE_TEMP  = 1955;
 8007a16:	4b56      	ldr	r3, [pc, #344]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a18:	f240 72a3 	movw	r2, #1955	; 0x7a3
 8007a1c:	801a      	strh	r2, [r3, #0]
			break;
 8007a1e:	e09f      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
		    case 29:
				 HFNC_DAC_VALUE_TEMP   = 1955;
 8007a20:	4b53      	ldr	r3, [pc, #332]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a22:	f240 72a3 	movw	r2, #1955	; 0x7a3
 8007a26:	801a      	strh	r2, [r3, #0]
			break;
 8007a28:	e09a      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 30:
				 HFNC_DAC_VALUE_TEMP  = 1960;
 8007a2a:	4b51      	ldr	r3, [pc, #324]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a2c:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
 8007a30:	801a      	strh	r2, [r3, #0]
			break;
 8007a32:	e095      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 31:
				 HFNC_DAC_VALUE_TEMP  = 1965;
 8007a34:	4b4e      	ldr	r3, [pc, #312]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a36:	f240 72ad 	movw	r2, #1965	; 0x7ad
 8007a3a:	801a      	strh	r2, [r3, #0]
			break;
 8007a3c:	e090      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 32:
				 HFNC_DAC_VALUE_TEMP  = 1970;
 8007a3e:	4b4c      	ldr	r3, [pc, #304]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a40:	f240 72b2 	movw	r2, #1970	; 0x7b2
 8007a44:	801a      	strh	r2, [r3, #0]
			break;
 8007a46:	e08b      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 33:
				 HFNC_DAC_VALUE_TEMP  = 1975;
 8007a48:	4b49      	ldr	r3, [pc, #292]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a4a:	f240 72b7 	movw	r2, #1975	; 0x7b7
 8007a4e:	801a      	strh	r2, [r3, #0]
			break;
 8007a50:	e086      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 34:
				 HFNC_DAC_VALUE_TEMP  = 1980;
 8007a52:	4b47      	ldr	r3, [pc, #284]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a54:	f240 72bc 	movw	r2, #1980	; 0x7bc
 8007a58:	801a      	strh	r2, [r3, #0]
			break;
 8007a5a:	e081      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 35:
				 HFNC_DAC_VALUE_TEMP   = 1985;
 8007a5c:	4b44      	ldr	r3, [pc, #272]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a5e:	f240 72c1 	movw	r2, #1985	; 0x7c1
 8007a62:	801a      	strh	r2, [r3, #0]
			break;
 8007a64:	e07c      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 36:
				 HFNC_DAC_VALUE_TEMP  = 1985;
 8007a66:	4b42      	ldr	r3, [pc, #264]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a68:	f240 72c1 	movw	r2, #1985	; 0x7c1
 8007a6c:	801a      	strh	r2, [r3, #0]
			break;
 8007a6e:	e077      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 37:
				 HFNC_DAC_VALUE_TEMP  = 1985;
 8007a70:	4b3f      	ldr	r3, [pc, #252]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a72:	f240 72c1 	movw	r2, #1985	; 0x7c1
 8007a76:	801a      	strh	r2, [r3, #0]
			break;
 8007a78:	e072      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 38:
				 HFNC_DAC_VALUE_TEMP  = 1985;
 8007a7a:	4b3d      	ldr	r3, [pc, #244]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a7c:	f240 72c1 	movw	r2, #1985	; 0x7c1
 8007a80:	801a      	strh	r2, [r3, #0]
			break;
 8007a82:	e06d      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 39:
				 HFNC_DAC_VALUE_TEMP  = 1985;
 8007a84:	4b3a      	ldr	r3, [pc, #232]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a86:	f240 72c1 	movw	r2, #1985	; 0x7c1
 8007a8a:	801a      	strh	r2, [r3, #0]
			break;
 8007a8c:	e068      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 40:
				 HFNC_DAC_VALUE_TEMP  = 2000;
 8007a8e:	4b38      	ldr	r3, [pc, #224]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007a94:	801a      	strh	r2, [r3, #0]
			break;
 8007a96:	e063      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 41:
				 HFNC_DAC_VALUE_TEMP   = 2005;
 8007a98:	4b35      	ldr	r3, [pc, #212]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007a9a:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8007a9e:	801a      	strh	r2, [r3, #0]
			break;
 8007aa0:	e05e      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 42:
				 HFNC_DAC_VALUE_TEMP  = 2010;
 8007aa2:	4b33      	ldr	r3, [pc, #204]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007aa4:	f240 72da 	movw	r2, #2010	; 0x7da
 8007aa8:	801a      	strh	r2, [r3, #0]
			break;
 8007aaa:	e059      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 43:
				 HFNC_DAC_VALUE_TEMP  = 2015;
 8007aac:	4b30      	ldr	r3, [pc, #192]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007aae:	f240 72df 	movw	r2, #2015	; 0x7df
 8007ab2:	801a      	strh	r2, [r3, #0]
			break;
 8007ab4:	e054      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 44:
				 HFNC_DAC_VALUE_TEMP  = 2020;
 8007ab6:	4b2e      	ldr	r3, [pc, #184]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007ab8:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8007abc:	801a      	strh	r2, [r3, #0]
			break;
 8007abe:	e04f      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 45:
				 HFNC_DAC_VALUE_TEMP  = 2025;
 8007ac0:	4b2b      	ldr	r3, [pc, #172]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007ac2:	f240 72e9 	movw	r2, #2025	; 0x7e9
 8007ac6:	801a      	strh	r2, [r3, #0]
			break;
 8007ac8:	e04a      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 46:
				 HFNC_DAC_VALUE_TEMP  = 2025;
 8007aca:	4b29      	ldr	r3, [pc, #164]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007acc:	f240 72e9 	movw	r2, #2025	; 0x7e9
 8007ad0:	801a      	strh	r2, [r3, #0]
			break;
 8007ad2:	e045      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 47:
				 HFNC_DAC_VALUE_TEMP   = 2025;
 8007ad4:	4b26      	ldr	r3, [pc, #152]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007ad6:	f240 72e9 	movw	r2, #2025	; 0x7e9
 8007ada:	801a      	strh	r2, [r3, #0]
			break;
 8007adc:	e040      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 48:
				 HFNC_DAC_VALUE_TEMP  = 2025;
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007ae0:	f240 72e9 	movw	r2, #2025	; 0x7e9
 8007ae4:	801a      	strh	r2, [r3, #0]
			break;
 8007ae6:	e03b      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 49:
				 HFNC_DAC_VALUE_TEMP  = 2025;
 8007ae8:	4b21      	ldr	r3, [pc, #132]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007aea:	f240 72e9 	movw	r2, #2025	; 0x7e9
 8007aee:	801a      	strh	r2, [r3, #0]
			break;
 8007af0:	e036      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 50:
				 HFNC_DAC_VALUE_TEMP  = 2030;
 8007af2:	4b1f      	ldr	r3, [pc, #124]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007af4:	f240 72ee 	movw	r2, #2030	; 0x7ee
 8007af8:	801a      	strh	r2, [r3, #0]
			break;
 8007afa:	e031      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 51:
				 HFNC_DAC_VALUE_TEMP  = 2035;
 8007afc:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007afe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007b02:	801a      	strh	r2, [r3, #0]
			break;
 8007b04:	e02c      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 52:
				 HFNC_DAC_VALUE_TEMP  = 2040;
 8007b06:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b08:	f44f 62ff 	mov.w	r2, #2040	; 0x7f8
 8007b0c:	801a      	strh	r2, [r3, #0]
			break;
 8007b0e:	e027      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
		    case 53:
				 HFNC_DAC_VALUE_TEMP   = 2045;
 8007b10:	4b17      	ldr	r3, [pc, #92]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b12:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8007b16:	801a      	strh	r2, [r3, #0]
			break;
 8007b18:	e022      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 54:
				 HFNC_DAC_VALUE_TEMP  = 2050;
 8007b1a:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b1c:	f640 0202 	movw	r2, #2050	; 0x802
 8007b20:	801a      	strh	r2, [r3, #0]
			break;
 8007b22:	e01d      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 55:
				 HFNC_DAC_VALUE_TEMP  = 2055;
 8007b24:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b26:	f640 0207 	movw	r2, #2055	; 0x807
 8007b2a:	801a      	strh	r2, [r3, #0]
			break;
 8007b2c:	e018      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 56:
				 HFNC_DAC_VALUE_TEMP  = 2055;
 8007b2e:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b30:	f640 0207 	movw	r2, #2055	; 0x807
 8007b34:	801a      	strh	r2, [r3, #0]
			break;
 8007b36:	e013      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 57:
				 HFNC_DAC_VALUE_TEMP  = 2055;
 8007b38:	4b0d      	ldr	r3, [pc, #52]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b3a:	f640 0207 	movw	r2, #2055	; 0x807
 8007b3e:	801a      	strh	r2, [r3, #0]
			break;
 8007b40:	e00e      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 58:
				 HFNC_DAC_VALUE_TEMP  = 2055;
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b44:	f640 0207 	movw	r2, #2055	; 0x807
 8007b48:	801a      	strh	r2, [r3, #0]
			break;
 8007b4a:	e009      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 59:
				 HFNC_DAC_VALUE_TEMP  = 2055;
 8007b4c:	4b08      	ldr	r3, [pc, #32]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b4e:	f640 0207 	movw	r2, #2055	; 0x807
 8007b52:	801a      	strh	r2, [r3, #0]
			break;
 8007b54:	e004      	b.n	8007b60 <HFNC_DAC_Value+0x32c>
			case 60:
				 HFNC_DAC_VALUE_TEMP  = 2060;
 8007b56:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b58:	f640 020c 	movw	r2, #2060	; 0x80c
 8007b5c:	801a      	strh	r2, [r3, #0]
			break;
 8007b5e:	bf00      	nop
		}

		return HFNC_DAC_VALUE_TEMP;
 8007b60:	4b03      	ldr	r3, [pc, #12]	; (8007b70 <HFNC_DAC_Value+0x33c>)
 8007b62:	881b      	ldrh	r3, [r3, #0]
	}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	200145ac 	.word	0x200145ac

08007b74 <LED_Strip_Task>:

uint16_t pwmData[(24*MAX_LED)+50];


void LED_Strip_Task(void *argument)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Receive_Led_Signal==1)
 8007b7c:	4b21      	ldr	r3, [pc, #132]	; (8007c04 <LED_Strip_Task+0x90>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d102      	bne.n	8007b8a <LED_Strip_Task+0x16>
		{
			Toggle_Led();
 8007b84:	f000 fdfa 	bl	800877c <Toggle_Led>
 8007b88:	e037      	b.n	8007bfa <LED_Strip_Task+0x86>
		}
		else if( (LED_STATUS == INSPIRATION_lED) || (LED_STATUS == EXPIRATION_LED) )
 8007b8a:	4b1f      	ldr	r3, [pc, #124]	; (8007c08 <LED_Strip_Task+0x94>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d003      	beq.n	8007b9a <LED_Strip_Task+0x26>
 8007b92:	4b1d      	ldr	r3, [pc, #116]	; (8007c08 <LED_Strip_Task+0x94>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d111      	bne.n	8007bbe <LED_Strip_Task+0x4a>
		{
			switch (LED_STATUS)
 8007b9a:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <LED_Strip_Task+0x94>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d008      	beq.n	8007bb4 <LED_Strip_Task+0x40>
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	dc29      	bgt.n	8007bfa <LED_Strip_Task+0x86>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d007      	beq.n	8007bba <LED_Strip_Task+0x46>
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d125      	bne.n	8007bfa <LED_Strip_Task+0x86>
			{
				case INSPIRATION_lED:
					Green_Led();
 8007bae:	f001 f853 	bl	8008c58 <Green_Led>
				break;
 8007bb2:	e003      	b.n	8007bbc <LED_Strip_Task+0x48>
				case EXPIRATION_LED:
					Pink_Led();
 8007bb4:	f001 f895 	bl	8008ce2 <Pink_Led>
				break;
 8007bb8:	e000      	b.n	8007bbc <LED_Strip_Task+0x48>
				case Idle_LED:

				break;
 8007bba:	bf00      	nop
			switch (LED_STATUS)
 8007bbc:	e01d      	b.n	8007bfa <LED_Strip_Task+0x86>
			}

		}
		else
		{
			switch (Run_Current_Breathe_State)
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <LED_Strip_Task+0x98>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d00d      	beq.n	8007be2 <LED_Strip_Task+0x6e>
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	dc16      	bgt.n	8007bf8 <LED_Strip_Task+0x84>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d011      	beq.n	8007bf2 <LED_Strip_Task+0x7e>
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d112      	bne.n	8007bf8 <LED_Strip_Task+0x84>
			{
				case Run_Inspiration_Cycle:
					PC_CMV_Inspiration_Time_LED_Function(Led_Delay);
 8007bd2:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <LED_Strip_Task+0x9c>)
 8007bd4:	edd3 7a00 	vldr	s15, [r3]
 8007bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8007bdc:	f000 fc64 	bl	80084a8 <PC_CMV_Inspiration_Time_LED_Function>
				break;
 8007be0:	e00b      	b.n	8007bfa <LED_Strip_Task+0x86>
				case Run_Expiration_Cycle:
					PC_CMV_Expiration_Time_LED_Function(Led_Delay);
 8007be2:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <LED_Strip_Task+0x9c>)
 8007be4:	edd3 7a00 	vldr	s15, [r3]
 8007be8:	eeb0 0a67 	vmov.f32	s0, s15
 8007bec:	f000 fd5c 	bl	80086a8 <PC_CMV_Expiration_Time_LED_Function>
				break;
 8007bf0:	e003      	b.n	8007bfa <LED_Strip_Task+0x86>
				case No_Run_State:
					Initial_Led();
 8007bf2:	f000 f937 	bl	8007e64 <Initial_Led>
				break;
 8007bf6:	e000      	b.n	8007bfa <LED_Strip_Task+0x86>
				default:
				break;
 8007bf8:	bf00      	nop
			}
		}
		vTaskDelay(Two_Millisecond_Delay);
 8007bfa:	2002      	movs	r0, #2
 8007bfc:	f017 fb16 	bl	801f22c <vTaskDelay>
		if(Receive_Led_Signal==1)
 8007c00:	e7bc      	b.n	8007b7c <LED_Strip_Task+0x8>
 8007c02:	bf00      	nop
 8007c04:	2001401c 	.word	0x2001401c
 8007c08:	20013aed 	.word	0x20013aed
 8007c0c:	20013f7c 	.word	0x20013f7c
 8007c10:	20014078 	.word	0x20014078

08007c14 <HAL_TIM_PWM_PulseFinishedCallback>:
	}

}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_3);
 8007c1c:	2108      	movs	r1, #8
 8007c1e:	4805      	ldr	r0, [pc, #20]	; (8007c34 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8007c20:	f010 fd98 	bl	8018754 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8007c24:	4b04      	ldr	r3, [pc, #16]	; (8007c38 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8007c26:	2201      	movs	r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20013a04 	.word	0x20013a04
 8007c38:	200001e8 	.word	0x200001e8

08007c3c <Set_LED>:


void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	b2d9      	uxtb	r1, r3
 8007c4e:	4a11      	ldr	r2, [pc, #68]	; (8007c94 <Set_LED+0x58>)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	b2d9      	uxtb	r1, r3
 8007c5a:	4a0e      	ldr	r2, [pc, #56]	; (8007c94 <Set_LED+0x58>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	460a      	mov	r2, r1
 8007c64:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	b2d9      	uxtb	r1, r3
 8007c6a:	4a0a      	ldr	r2, [pc, #40]	; (8007c94 <Set_LED+0x58>)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	460a      	mov	r2, r1
 8007c74:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	b2d9      	uxtb	r1, r3
 8007c7a:	4a06      	ldr	r2, [pc, #24]	; (8007c94 <Set_LED+0x58>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	460a      	mov	r2, r1
 8007c84:	70da      	strb	r2, [r3, #3]
}
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	200145b4 	.word	0x200145b4

08007c98 <Set_Brightness>:



void Set_Brightness (int brightness)  // 0-45
{
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]


	if (brightness > 45) brightness = 45;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b2d      	cmp	r3, #45	; 0x2d
 8007ca4:	dd01      	ble.n	8007caa <Set_Brightness+0x12>
 8007ca6:	232d      	movs	r3, #45	; 0x2d
 8007ca8:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	e060      	b.n	8007d72 <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8007cb0:	4a37      	ldr	r2, [pc, #220]	; (8007d90 <Set_Brightness+0xf8>)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8007cb8:	4a36      	ldr	r2, [pc, #216]	; (8007d94 <Set_Brightness+0xfc>)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	613b      	str	r3, [r7, #16]
 8007cc4:	e04f      	b.n	8007d66 <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8007ccc:	ee07 3a90 	vmov	s15, r3
 8007cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cd4:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7f8 fbdd 	bl	8000498 <__aeabi_f2d>
 8007cde:	a32a      	add	r3, pc, #168	; (adr r3, 8007d88 <Set_Brightness+0xf0>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f7f8 fc30 	bl	8000548 <__aeabi_dmul>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4610      	mov	r0, r2
 8007cee:	4619      	mov	r1, r3
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	4b28      	ldr	r3, [pc, #160]	; (8007d98 <Set_Brightness+0x100>)
 8007cf6:	f7f8 fd51 	bl	800079c <__aeabi_ddiv>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4619      	mov	r1, r3
 8007d02:	f7f8 ff03 	bl	8000b0c <__aeabi_d2f>
 8007d06:	4603      	mov	r3, r0
 8007d08:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8007d0a:	4a21      	ldr	r2, [pc, #132]	; (8007d90 <Set_Brightness+0xf8>)
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	441a      	add	r2, r3
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	4413      	add	r3, r2
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7f8 fbab 	bl	8000474 <__aeabi_i2d>
 8007d1e:	4604      	mov	r4, r0
 8007d20:	460d      	mov	r5, r1
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7f8 fbb8 	bl	8000498 <__aeabi_f2d>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	ec43 2b10 	vmov	d0, r2, r3
 8007d30:	f019 ff7a 	bl	8021c28 <tan>
 8007d34:	ec53 2b10 	vmov	r2, r3, d0
 8007d38:	4620      	mov	r0, r4
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	f7f8 fd2e 	bl	800079c <__aeabi_ddiv>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4610      	mov	r0, r2
 8007d46:	4619      	mov	r1, r3
 8007d48:	f7f8 fec0 	bl	8000acc <__aeabi_d2uiz>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	b2d9      	uxtb	r1, r3
 8007d50:	4a10      	ldr	r2, [pc, #64]	; (8007d94 <Set_Brightness+0xfc>)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	441a      	add	r2, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	460a      	mov	r2, r1
 8007d5e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	3301      	adds	r3, #1
 8007d64:	613b      	str	r3, [r7, #16]
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	ddac      	ble.n	8007cc6 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b09      	cmp	r3, #9
 8007d76:	dd9b      	ble.n	8007cb0 <Set_Brightness+0x18>
		}
	}



}
 8007d78:	bf00      	nop
 8007d7a:	bf00      	nop
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bdb0      	pop	{r4, r5, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	f3af 8000 	nop.w
 8007d88:	53c8d4f1 	.word	0x53c8d4f1
 8007d8c:	400921fb 	.word	0x400921fb
 8007d90:	200145b4 	.word	0x200145b4
 8007d94:	200145dc 	.word	0x200145dc
 8007d98:	40668000 	.word	0x40668000

08007d9c <WS2812_Send>:


void WS2812_Send (void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	e036      	b.n	8007e1a <WS2812_Send+0x7e>
	{
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8007dac:	4a2a      	ldr	r2, [pc, #168]	; (8007e58 <WS2812_Send+0xbc>)
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	785b      	ldrb	r3, [r3, #1]
 8007db6:	041a      	lsls	r2, r3, #16
 8007db8:	4927      	ldr	r1, [pc, #156]	; (8007e58 <WS2812_Send+0xbc>)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	789b      	ldrb	r3, [r3, #2]
 8007dc2:	021b      	lsls	r3, r3, #8
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	4924      	ldr	r1, [pc, #144]	; (8007e58 <WS2812_Send+0xbc>)
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	78db      	ldrb	r3, [r3, #3]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	607b      	str	r3, [r7, #4]
		for (int i=23; i>=0; i--)
 8007dd4:	2317      	movs	r3, #23
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e019      	b.n	8007e0e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8007dda:	2201      	movs	r2, #1
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4013      	ands	r3, r2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 70;  // 2/3 of 90
 8007dec:	4a1b      	ldr	r2, [pc, #108]	; (8007e5c <WS2812_Send+0xc0>)
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2146      	movs	r1, #70	; 0x46
 8007df2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007df6:	e004      	b.n	8007e02 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 35;  // 1/3 of 90
 8007df8:	4a18      	ldr	r2, [pc, #96]	; (8007e5c <WS2812_Send+0xc0>)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2123      	movs	r1, #35	; 0x23
 8007dfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	3301      	adds	r3, #1
 8007e06:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dae2      	bge.n	8007dda <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	3301      	adds	r3, #1
 8007e18:	613b      	str	r3, [r7, #16]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2b09      	cmp	r3, #9
 8007e1e:	ddc5      	ble.n	8007dac <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8007e20:	2300      	movs	r3, #0
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	e00a      	b.n	8007e3c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8007e26:	4a0d      	ldr	r2, [pc, #52]	; (8007e5c <WS2812_Send+0xc0>)
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	3301      	adds	r3, #1
 8007e34:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	60bb      	str	r3, [r7, #8]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b31      	cmp	r3, #49	; 0x31
 8007e40:	ddf1      	ble.n	8007e26 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	4a05      	ldr	r2, [pc, #20]	; (8007e5c <WS2812_Send+0xc0>)
 8007e48:	2108      	movs	r1, #8
 8007e4a:	4805      	ldr	r0, [pc, #20]	; (8007e60 <WS2812_Send+0xc4>)
 8007e4c:	f010 faba 	bl	80183c4 <HAL_TIM_PWM_Start_DMA>
	}
	else
	{
		datasentflag = 0;
	}*/
}
 8007e50:	bf00      	nop
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	200145dc 	.word	0x200145dc
 8007e5c:	20014604 	.word	0x20014604
 8007e60:	20013a04 	.word	0x20013a04

08007e64 <Initial_Led>:



void Initial_Led()
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
	 switch(Bluetooth_Status)
 8007e68:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <Initial_Led+0x4c>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d00c      	beq.n	8007e8a <Initial_Led+0x26>
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	dc0c      	bgt.n	8007e8e <Initial_Led+0x2a>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <Initial_Led+0x1a>
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d003      	beq.n	8007e84 <Initial_Led+0x20>
		  break;
	      case Bluetooth_Status_Send_Data:

		  break;
	      default:
	      break;
 8007e7c:	e007      	b.n	8007e8e <Initial_Led+0x2a>
	    	  Loading_Led();
 8007e7e:	f000 f8aa 	bl	8007fd6 <Loading_Led>
	      break;
 8007e82:	e005      	b.n	8007e90 <Initial_Led+0x2c>
	    	  Blue_Led();
 8007e84:	f000 f85f 	bl	8007f46 <Blue_Led>
		  break;
 8007e88:	e002      	b.n	8007e90 <Initial_Led+0x2c>
		  break;
 8007e8a:	bf00      	nop
 8007e8c:	e000      	b.n	8007e90 <Initial_Led+0x2c>
	      break;
 8007e8e:	bf00      	nop
	 }

	 if(Device_Control == PAUSE)
 8007e90:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <Initial_Led+0x50>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d108      	bne.n	8007eaa <Initial_Led+0x46>
	 {
		 if(Led_Pause_Status == 1)
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <Initial_Led+0x54>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d104      	bne.n	8007eaa <Initial_Led+0x46>
		 {
			 Blue_Led_Resume();
 8007ea0:	f000 f80c 	bl	8007ebc <Blue_Led_Resume>
			 Led_Pause_Status = 0;
 8007ea4:	4b04      	ldr	r3, [pc, #16]	; (8007eb8 <Initial_Led+0x54>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	701a      	strb	r2, [r3, #0]
		 }
	 }
}
 8007eaa:	bf00      	nop
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20013f28 	.word	0x20013f28
 8007eb4:	20013d94 	.word	0x20013d94
 8007eb8:	200141c8 	.word	0x200141c8

08007ebc <Blue_Led_Resume>:


void Blue_Led_Resume()
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
	  Set_LED(0, 0, 0, 255);
 8007ec0:	23ff      	movs	r3, #255	; 0xff
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	f7ff feb8 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 255);
 8007ecc:	23ff      	movs	r3, #255	; 0xff
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	f7ff feb2 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 255);
 8007ed8:	23ff      	movs	r3, #255	; 0xff
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	2002      	movs	r0, #2
 8007ee0:	f7ff feac 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 255);
 8007ee4:	23ff      	movs	r3, #255	; 0xff
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2100      	movs	r1, #0
 8007eea:	2003      	movs	r0, #3
 8007eec:	f7ff fea6 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 255);
 8007ef0:	23ff      	movs	r3, #255	; 0xff
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	2004      	movs	r0, #4
 8007ef8:	f7ff fea0 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 255);
 8007efc:	23ff      	movs	r3, #255	; 0xff
 8007efe:	2200      	movs	r2, #0
 8007f00:	2100      	movs	r1, #0
 8007f02:	2005      	movs	r0, #5
 8007f04:	f7ff fe9a 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 255);
 8007f08:	23ff      	movs	r3, #255	; 0xff
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	2006      	movs	r0, #6
 8007f10:	f7ff fe94 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 255);
 8007f14:	23ff      	movs	r3, #255	; 0xff
 8007f16:	2200      	movs	r2, #0
 8007f18:	2100      	movs	r1, #0
 8007f1a:	2007      	movs	r0, #7
 8007f1c:	f7ff fe8e 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 255);
 8007f20:	23ff      	movs	r3, #255	; 0xff
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	2008      	movs	r0, #8
 8007f28:	f7ff fe88 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 255);
 8007f2c:	23ff      	movs	r3, #255	; 0xff
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2100      	movs	r1, #0
 8007f32:	2009      	movs	r0, #9
 8007f34:	f7ff fe82 	bl	8007c3c <Set_LED>

	  Set_Brightness(45);
 8007f38:	202d      	movs	r0, #45	; 0x2d
 8007f3a:	f7ff fead 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8007f3e:	f7ff ff2d 	bl	8007d9c <WS2812_Send>
}
 8007f42:	bf00      	nop
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <Blue_Led>:

void Blue_Led()
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	af00      	add	r7, sp, #0
	  Set_LED(0, 0, 0, 255);
 8007f4a:	23ff      	movs	r3, #255	; 0xff
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2100      	movs	r1, #0
 8007f50:	2000      	movs	r0, #0
 8007f52:	f7ff fe73 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 255);
 8007f56:	23ff      	movs	r3, #255	; 0xff
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	f7ff fe6d 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 255);
 8007f62:	23ff      	movs	r3, #255	; 0xff
 8007f64:	2200      	movs	r2, #0
 8007f66:	2100      	movs	r1, #0
 8007f68:	2002      	movs	r0, #2
 8007f6a:	f7ff fe67 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 255);
 8007f6e:	23ff      	movs	r3, #255	; 0xff
 8007f70:	2200      	movs	r2, #0
 8007f72:	2100      	movs	r1, #0
 8007f74:	2003      	movs	r0, #3
 8007f76:	f7ff fe61 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 255);
 8007f7a:	23ff      	movs	r3, #255	; 0xff
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2100      	movs	r1, #0
 8007f80:	2004      	movs	r0, #4
 8007f82:	f7ff fe5b 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 255);
 8007f86:	23ff      	movs	r3, #255	; 0xff
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	2005      	movs	r0, #5
 8007f8e:	f7ff fe55 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 255);
 8007f92:	23ff      	movs	r3, #255	; 0xff
 8007f94:	2200      	movs	r2, #0
 8007f96:	2100      	movs	r1, #0
 8007f98:	2006      	movs	r0, #6
 8007f9a:	f7ff fe4f 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 255);
 8007f9e:	23ff      	movs	r3, #255	; 0xff
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	2007      	movs	r0, #7
 8007fa6:	f7ff fe49 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 255);
 8007faa:	23ff      	movs	r3, #255	; 0xff
 8007fac:	2200      	movs	r2, #0
 8007fae:	2100      	movs	r1, #0
 8007fb0:	2008      	movs	r0, #8
 8007fb2:	f7ff fe43 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 255);
 8007fb6:	23ff      	movs	r3, #255	; 0xff
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2100      	movs	r1, #0
 8007fbc:	2009      	movs	r0, #9
 8007fbe:	f7ff fe3d 	bl	8007c3c <Set_LED>

	  Set_Brightness(45);
 8007fc2:	202d      	movs	r0, #45	; 0x2d
 8007fc4:	f7ff fe68 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8007fc8:	f7ff fee8 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 8007fcc:	2064      	movs	r0, #100	; 0x64
 8007fce:	f017 f92d 	bl	801f22c <vTaskDelay>
}
 8007fd2:	bf00      	nop
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <Loading_Led>:

void Loading_Led()
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	af00      	add	r7, sp, #0
	  Set_LED(0, 0, 0, 255);
 8007fda:	23ff      	movs	r3, #255	; 0xff
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2100      	movs	r1, #0
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	f7ff fe2b 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2100      	movs	r1, #0
 8007fec:	2001      	movs	r0, #1
 8007fee:	f7ff fe25 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	2002      	movs	r0, #2
 8007ffa:	f7ff fe1f 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 8007ffe:	2300      	movs	r3, #0
 8008000:	2200      	movs	r2, #0
 8008002:	2100      	movs	r1, #0
 8008004:	2003      	movs	r0, #3
 8008006:	f7ff fe19 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 800800a:	2300      	movs	r3, #0
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	2004      	movs	r0, #4
 8008012:	f7ff fe13 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008016:	2300      	movs	r3, #0
 8008018:	2200      	movs	r2, #0
 800801a:	2100      	movs	r1, #0
 800801c:	2005      	movs	r0, #5
 800801e:	f7ff fe0d 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008022:	2300      	movs	r3, #0
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	2006      	movs	r0, #6
 800802a:	f7ff fe07 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 800802e:	2300      	movs	r3, #0
 8008030:	2200      	movs	r2, #0
 8008032:	2100      	movs	r1, #0
 8008034:	2007      	movs	r0, #7
 8008036:	f7ff fe01 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 800803a:	2300      	movs	r3, #0
 800803c:	2200      	movs	r2, #0
 800803e:	2100      	movs	r1, #0
 8008040:	2008      	movs	r0, #8
 8008042:	f7ff fdfb 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008046:	2300      	movs	r3, #0
 8008048:	2200      	movs	r2, #0
 800804a:	2100      	movs	r1, #0
 800804c:	2009      	movs	r0, #9
 800804e:	f7ff fdf5 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008052:	200f      	movs	r0, #15
 8008054:	f7ff fe20 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008058:	f7ff fea0 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 800805c:	2064      	movs	r0, #100	; 0x64
 800805e:	f017 f8e5 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 8008062:	2300      	movs	r3, #0
 8008064:	2200      	movs	r2, #0
 8008066:	2100      	movs	r1, #0
 8008068:	2000      	movs	r0, #0
 800806a:	f7ff fde7 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 255);
 800806e:	23ff      	movs	r3, #255	; 0xff
 8008070:	2200      	movs	r2, #0
 8008072:	2100      	movs	r1, #0
 8008074:	2001      	movs	r0, #1
 8008076:	f7ff fde1 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 800807a:	2300      	movs	r3, #0
 800807c:	2200      	movs	r2, #0
 800807e:	2100      	movs	r1, #0
 8008080:	2002      	movs	r0, #2
 8008082:	f7ff fddb 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 8008086:	2300      	movs	r3, #0
 8008088:	2200      	movs	r2, #0
 800808a:	2100      	movs	r1, #0
 800808c:	2003      	movs	r0, #3
 800808e:	f7ff fdd5 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 8008092:	2300      	movs	r3, #0
 8008094:	2200      	movs	r2, #0
 8008096:	2100      	movs	r1, #0
 8008098:	2004      	movs	r0, #4
 800809a:	f7ff fdcf 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 800809e:	2300      	movs	r3, #0
 80080a0:	2200      	movs	r2, #0
 80080a2:	2100      	movs	r1, #0
 80080a4:	2005      	movs	r0, #5
 80080a6:	f7ff fdc9 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 80080aa:	2300      	movs	r3, #0
 80080ac:	2200      	movs	r2, #0
 80080ae:	2100      	movs	r1, #0
 80080b0:	2006      	movs	r0, #6
 80080b2:	f7ff fdc3 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 80080b6:	2300      	movs	r3, #0
 80080b8:	2200      	movs	r2, #0
 80080ba:	2100      	movs	r1, #0
 80080bc:	2007      	movs	r0, #7
 80080be:	f7ff fdbd 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 80080c2:	2300      	movs	r3, #0
 80080c4:	2200      	movs	r2, #0
 80080c6:	2100      	movs	r1, #0
 80080c8:	2008      	movs	r0, #8
 80080ca:	f7ff fdb7 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 80080ce:	2300      	movs	r3, #0
 80080d0:	2200      	movs	r2, #0
 80080d2:	2100      	movs	r1, #0
 80080d4:	2009      	movs	r0, #9
 80080d6:	f7ff fdb1 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 80080da:	200f      	movs	r0, #15
 80080dc:	f7ff fddc 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 80080e0:	f7ff fe5c 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 80080e4:	2064      	movs	r0, #100	; 0x64
 80080e6:	f017 f8a1 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 80080ea:	2300      	movs	r3, #0
 80080ec:	2200      	movs	r2, #0
 80080ee:	2100      	movs	r1, #0
 80080f0:	2000      	movs	r0, #0
 80080f2:	f7ff fda3 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 80080f6:	2300      	movs	r3, #0
 80080f8:	2200      	movs	r2, #0
 80080fa:	2100      	movs	r1, #0
 80080fc:	2001      	movs	r0, #1
 80080fe:	f7ff fd9d 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 255);
 8008102:	23ff      	movs	r3, #255	; 0xff
 8008104:	2200      	movs	r2, #0
 8008106:	2100      	movs	r1, #0
 8008108:	2002      	movs	r0, #2
 800810a:	f7ff fd97 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 800810e:	2300      	movs	r3, #0
 8008110:	2200      	movs	r2, #0
 8008112:	2100      	movs	r1, #0
 8008114:	2003      	movs	r0, #3
 8008116:	f7ff fd91 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 800811a:	2300      	movs	r3, #0
 800811c:	2200      	movs	r2, #0
 800811e:	2100      	movs	r1, #0
 8008120:	2004      	movs	r0, #4
 8008122:	f7ff fd8b 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008126:	2300      	movs	r3, #0
 8008128:	2200      	movs	r2, #0
 800812a:	2100      	movs	r1, #0
 800812c:	2005      	movs	r0, #5
 800812e:	f7ff fd85 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008132:	2300      	movs	r3, #0
 8008134:	2200      	movs	r2, #0
 8008136:	2100      	movs	r1, #0
 8008138:	2006      	movs	r0, #6
 800813a:	f7ff fd7f 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 800813e:	2300      	movs	r3, #0
 8008140:	2200      	movs	r2, #0
 8008142:	2100      	movs	r1, #0
 8008144:	2007      	movs	r0, #7
 8008146:	f7ff fd79 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 800814a:	2300      	movs	r3, #0
 800814c:	2200      	movs	r2, #0
 800814e:	2100      	movs	r1, #0
 8008150:	2008      	movs	r0, #8
 8008152:	f7ff fd73 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008156:	2300      	movs	r3, #0
 8008158:	2200      	movs	r2, #0
 800815a:	2100      	movs	r1, #0
 800815c:	2009      	movs	r0, #9
 800815e:	f7ff fd6d 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008162:	200f      	movs	r0, #15
 8008164:	f7ff fd98 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008168:	f7ff fe18 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 800816c:	2064      	movs	r0, #100	; 0x64
 800816e:	f017 f85d 	bl	801f22c <vTaskDelay>


	  Set_LED(0, 0, 0, 0);
 8008172:	2300      	movs	r3, #0
 8008174:	2200      	movs	r2, #0
 8008176:	2100      	movs	r1, #0
 8008178:	2000      	movs	r0, #0
 800817a:	f7ff fd5f 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 800817e:	2300      	movs	r3, #0
 8008180:	2200      	movs	r2, #0
 8008182:	2100      	movs	r1, #0
 8008184:	2001      	movs	r0, #1
 8008186:	f7ff fd59 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 800818a:	2300      	movs	r3, #0
 800818c:	2200      	movs	r2, #0
 800818e:	2100      	movs	r1, #0
 8008190:	2002      	movs	r0, #2
 8008192:	f7ff fd53 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 255);
 8008196:	23ff      	movs	r3, #255	; 0xff
 8008198:	2200      	movs	r2, #0
 800819a:	2100      	movs	r1, #0
 800819c:	2003      	movs	r0, #3
 800819e:	f7ff fd4d 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 80081a2:	2300      	movs	r3, #0
 80081a4:	2200      	movs	r2, #0
 80081a6:	2100      	movs	r1, #0
 80081a8:	2004      	movs	r0, #4
 80081aa:	f7ff fd47 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 80081ae:	2300      	movs	r3, #0
 80081b0:	2200      	movs	r2, #0
 80081b2:	2100      	movs	r1, #0
 80081b4:	2005      	movs	r0, #5
 80081b6:	f7ff fd41 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 80081ba:	2300      	movs	r3, #0
 80081bc:	2200      	movs	r2, #0
 80081be:	2100      	movs	r1, #0
 80081c0:	2006      	movs	r0, #6
 80081c2:	f7ff fd3b 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 80081c6:	2300      	movs	r3, #0
 80081c8:	2200      	movs	r2, #0
 80081ca:	2100      	movs	r1, #0
 80081cc:	2007      	movs	r0, #7
 80081ce:	f7ff fd35 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 80081d2:	2300      	movs	r3, #0
 80081d4:	2200      	movs	r2, #0
 80081d6:	2100      	movs	r1, #0
 80081d8:	2008      	movs	r0, #8
 80081da:	f7ff fd2f 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 80081de:	2300      	movs	r3, #0
 80081e0:	2200      	movs	r2, #0
 80081e2:	2100      	movs	r1, #0
 80081e4:	2009      	movs	r0, #9
 80081e6:	f7ff fd29 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 80081ea:	200f      	movs	r0, #15
 80081ec:	f7ff fd54 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 80081f0:	f7ff fdd4 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 80081f4:	2064      	movs	r0, #100	; 0x64
 80081f6:	f017 f819 	bl	801f22c <vTaskDelay>


	  Set_LED(0, 0, 0, 0);
 80081fa:	2300      	movs	r3, #0
 80081fc:	2200      	movs	r2, #0
 80081fe:	2100      	movs	r1, #0
 8008200:	2000      	movs	r0, #0
 8008202:	f7ff fd1b 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 8008206:	2300      	movs	r3, #0
 8008208:	2200      	movs	r2, #0
 800820a:	2100      	movs	r1, #0
 800820c:	2001      	movs	r0, #1
 800820e:	f7ff fd15 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008212:	2300      	movs	r3, #0
 8008214:	2200      	movs	r2, #0
 8008216:	2100      	movs	r1, #0
 8008218:	2002      	movs	r0, #2
 800821a:	f7ff fd0f 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 800821e:	2300      	movs	r3, #0
 8008220:	2200      	movs	r2, #0
 8008222:	2100      	movs	r1, #0
 8008224:	2003      	movs	r0, #3
 8008226:	f7ff fd09 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 255);
 800822a:	23ff      	movs	r3, #255	; 0xff
 800822c:	2200      	movs	r2, #0
 800822e:	2100      	movs	r1, #0
 8008230:	2004      	movs	r0, #4
 8008232:	f7ff fd03 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008236:	2300      	movs	r3, #0
 8008238:	2200      	movs	r2, #0
 800823a:	2100      	movs	r1, #0
 800823c:	2005      	movs	r0, #5
 800823e:	f7ff fcfd 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008242:	2300      	movs	r3, #0
 8008244:	2200      	movs	r2, #0
 8008246:	2100      	movs	r1, #0
 8008248:	2006      	movs	r0, #6
 800824a:	f7ff fcf7 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 800824e:	2300      	movs	r3, #0
 8008250:	2200      	movs	r2, #0
 8008252:	2100      	movs	r1, #0
 8008254:	2007      	movs	r0, #7
 8008256:	f7ff fcf1 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 800825a:	2300      	movs	r3, #0
 800825c:	2200      	movs	r2, #0
 800825e:	2100      	movs	r1, #0
 8008260:	2008      	movs	r0, #8
 8008262:	f7ff fceb 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008266:	2300      	movs	r3, #0
 8008268:	2200      	movs	r2, #0
 800826a:	2100      	movs	r1, #0
 800826c:	2009      	movs	r0, #9
 800826e:	f7ff fce5 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008272:	200f      	movs	r0, #15
 8008274:	f7ff fd10 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008278:	f7ff fd90 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 800827c:	2064      	movs	r0, #100	; 0x64
 800827e:	f016 ffd5 	bl	801f22c <vTaskDelay>


	  Set_LED(0, 0, 0, 0);
 8008282:	2300      	movs	r3, #0
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	2000      	movs	r0, #0
 800828a:	f7ff fcd7 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 800828e:	2300      	movs	r3, #0
 8008290:	2200      	movs	r2, #0
 8008292:	2100      	movs	r1, #0
 8008294:	2001      	movs	r0, #1
 8008296:	f7ff fcd1 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 800829a:	2300      	movs	r3, #0
 800829c:	2200      	movs	r2, #0
 800829e:	2100      	movs	r1, #0
 80082a0:	2002      	movs	r0, #2
 80082a2:	f7ff fccb 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 80082a6:	2300      	movs	r3, #0
 80082a8:	2200      	movs	r2, #0
 80082aa:	2100      	movs	r1, #0
 80082ac:	2003      	movs	r0, #3
 80082ae:	f7ff fcc5 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 80082b2:	2300      	movs	r3, #0
 80082b4:	2200      	movs	r2, #0
 80082b6:	2100      	movs	r1, #0
 80082b8:	2004      	movs	r0, #4
 80082ba:	f7ff fcbf 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 80082be:	2300      	movs	r3, #0
 80082c0:	2200      	movs	r2, #0
 80082c2:	2100      	movs	r1, #0
 80082c4:	2005      	movs	r0, #5
 80082c6:	f7ff fcb9 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 255);
 80082ca:	23ff      	movs	r3, #255	; 0xff
 80082cc:	2200      	movs	r2, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	2006      	movs	r0, #6
 80082d2:	f7ff fcb3 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 80082d6:	2300      	movs	r3, #0
 80082d8:	2200      	movs	r2, #0
 80082da:	2100      	movs	r1, #0
 80082dc:	2007      	movs	r0, #7
 80082de:	f7ff fcad 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 80082e2:	2300      	movs	r3, #0
 80082e4:	2200      	movs	r2, #0
 80082e6:	2100      	movs	r1, #0
 80082e8:	2008      	movs	r0, #8
 80082ea:	f7ff fca7 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 80082ee:	2300      	movs	r3, #0
 80082f0:	2200      	movs	r2, #0
 80082f2:	2100      	movs	r1, #0
 80082f4:	2009      	movs	r0, #9
 80082f6:	f7ff fca1 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 80082fa:	200f      	movs	r0, #15
 80082fc:	f7ff fccc 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008300:	f7ff fd4c 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 8008304:	2064      	movs	r0, #100	; 0x64
 8008306:	f016 ff91 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 800830a:	2300      	movs	r3, #0
 800830c:	2200      	movs	r2, #0
 800830e:	2100      	movs	r1, #0
 8008310:	2000      	movs	r0, #0
 8008312:	f7ff fc93 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 8008316:	2300      	movs	r3, #0
 8008318:	2200      	movs	r2, #0
 800831a:	2100      	movs	r1, #0
 800831c:	2001      	movs	r0, #1
 800831e:	f7ff fc8d 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008322:	2300      	movs	r3, #0
 8008324:	2200      	movs	r2, #0
 8008326:	2100      	movs	r1, #0
 8008328:	2002      	movs	r0, #2
 800832a:	f7ff fc87 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 800832e:	2300      	movs	r3, #0
 8008330:	2200      	movs	r2, #0
 8008332:	2100      	movs	r1, #0
 8008334:	2003      	movs	r0, #3
 8008336:	f7ff fc81 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 800833a:	2300      	movs	r3, #0
 800833c:	2200      	movs	r2, #0
 800833e:	2100      	movs	r1, #0
 8008340:	2004      	movs	r0, #4
 8008342:	f7ff fc7b 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008346:	2300      	movs	r3, #0
 8008348:	2200      	movs	r2, #0
 800834a:	2100      	movs	r1, #0
 800834c:	2005      	movs	r0, #5
 800834e:	f7ff fc75 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008352:	2300      	movs	r3, #0
 8008354:	2200      	movs	r2, #0
 8008356:	2100      	movs	r1, #0
 8008358:	2006      	movs	r0, #6
 800835a:	f7ff fc6f 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 255);
 800835e:	23ff      	movs	r3, #255	; 0xff
 8008360:	2200      	movs	r2, #0
 8008362:	2100      	movs	r1, #0
 8008364:	2007      	movs	r0, #7
 8008366:	f7ff fc69 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 800836a:	2300      	movs	r3, #0
 800836c:	2200      	movs	r2, #0
 800836e:	2100      	movs	r1, #0
 8008370:	2008      	movs	r0, #8
 8008372:	f7ff fc63 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008376:	2300      	movs	r3, #0
 8008378:	2200      	movs	r2, #0
 800837a:	2100      	movs	r1, #0
 800837c:	2009      	movs	r0, #9
 800837e:	f7ff fc5d 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008382:	200f      	movs	r0, #15
 8008384:	f7ff fc88 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008388:	f7ff fd08 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 800838c:	2064      	movs	r0, #100	; 0x64
 800838e:	f016 ff4d 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 8008392:	2300      	movs	r3, #0
 8008394:	2200      	movs	r2, #0
 8008396:	2100      	movs	r1, #0
 8008398:	2000      	movs	r0, #0
 800839a:	f7ff fc4f 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 800839e:	2300      	movs	r3, #0
 80083a0:	2200      	movs	r2, #0
 80083a2:	2100      	movs	r1, #0
 80083a4:	2001      	movs	r0, #1
 80083a6:	f7ff fc49 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 80083aa:	2300      	movs	r3, #0
 80083ac:	2200      	movs	r2, #0
 80083ae:	2100      	movs	r1, #0
 80083b0:	2002      	movs	r0, #2
 80083b2:	f7ff fc43 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	2003      	movs	r0, #3
 80083be:	f7ff fc3d 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 80083c2:	2300      	movs	r3, #0
 80083c4:	2200      	movs	r2, #0
 80083c6:	2100      	movs	r1, #0
 80083c8:	2004      	movs	r0, #4
 80083ca:	f7ff fc37 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 80083ce:	2300      	movs	r3, #0
 80083d0:	2200      	movs	r2, #0
 80083d2:	2100      	movs	r1, #0
 80083d4:	2005      	movs	r0, #5
 80083d6:	f7ff fc31 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 80083da:	2300      	movs	r3, #0
 80083dc:	2200      	movs	r2, #0
 80083de:	2100      	movs	r1, #0
 80083e0:	2006      	movs	r0, #6
 80083e2:	f7ff fc2b 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 80083e6:	2300      	movs	r3, #0
 80083e8:	2200      	movs	r2, #0
 80083ea:	2100      	movs	r1, #0
 80083ec:	2007      	movs	r0, #7
 80083ee:	f7ff fc25 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 255);
 80083f2:	23ff      	movs	r3, #255	; 0xff
 80083f4:	2200      	movs	r2, #0
 80083f6:	2100      	movs	r1, #0
 80083f8:	2008      	movs	r0, #8
 80083fa:	f7ff fc1f 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 80083fe:	2300      	movs	r3, #0
 8008400:	2200      	movs	r2, #0
 8008402:	2100      	movs	r1, #0
 8008404:	2009      	movs	r0, #9
 8008406:	f7ff fc19 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 800840a:	200f      	movs	r0, #15
 800840c:	f7ff fc44 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008410:	f7ff fcc4 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 8008414:	2064      	movs	r0, #100	; 0x64
 8008416:	f016 ff09 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 800841a:	2300      	movs	r3, #0
 800841c:	2200      	movs	r2, #0
 800841e:	2100      	movs	r1, #0
 8008420:	2000      	movs	r0, #0
 8008422:	f7ff fc0b 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 8008426:	2300      	movs	r3, #0
 8008428:	2200      	movs	r2, #0
 800842a:	2100      	movs	r1, #0
 800842c:	2001      	movs	r0, #1
 800842e:	f7ff fc05 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008432:	2300      	movs	r3, #0
 8008434:	2200      	movs	r2, #0
 8008436:	2100      	movs	r1, #0
 8008438:	2002      	movs	r0, #2
 800843a:	f7ff fbff 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 800843e:	2300      	movs	r3, #0
 8008440:	2200      	movs	r2, #0
 8008442:	2100      	movs	r1, #0
 8008444:	2003      	movs	r0, #3
 8008446:	f7ff fbf9 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 800844a:	2300      	movs	r3, #0
 800844c:	2200      	movs	r2, #0
 800844e:	2100      	movs	r1, #0
 8008450:	2004      	movs	r0, #4
 8008452:	f7ff fbf3 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008456:	2300      	movs	r3, #0
 8008458:	2200      	movs	r2, #0
 800845a:	2100      	movs	r1, #0
 800845c:	2005      	movs	r0, #5
 800845e:	f7ff fbed 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008462:	2300      	movs	r3, #0
 8008464:	2200      	movs	r2, #0
 8008466:	2100      	movs	r1, #0
 8008468:	2006      	movs	r0, #6
 800846a:	f7ff fbe7 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 800846e:	2300      	movs	r3, #0
 8008470:	2200      	movs	r2, #0
 8008472:	2100      	movs	r1, #0
 8008474:	2007      	movs	r0, #7
 8008476:	f7ff fbe1 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 800847a:	2300      	movs	r3, #0
 800847c:	2200      	movs	r2, #0
 800847e:	2100      	movs	r1, #0
 8008480:	2008      	movs	r0, #8
 8008482:	f7ff fbdb 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 255);
 8008486:	23ff      	movs	r3, #255	; 0xff
 8008488:	2200      	movs	r2, #0
 800848a:	2100      	movs	r1, #0
 800848c:	2009      	movs	r0, #9
 800848e:	f7ff fbd5 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008492:	200f      	movs	r0, #15
 8008494:	f7ff fc00 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008498:	f7ff fc80 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 800849c:	2064      	movs	r0, #100	; 0x64
 800849e:	f016 fec5 	bl	801f22c <vTaskDelay>
}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <PC_CMV_Inspiration_Time_LED_Function>:



void PC_CMV_Inspiration_Time_LED_Function(float Delay)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	ed87 0a01 	vstr	s0, [r7, #4]

	if(Alert_Status_Led_Strip == ALERT_HAPPEN)
 80084b2:	4b7b      	ldr	r3, [pc, #492]	; (80086a0 <PC_CMV_Inspiration_Time_LED_Function+0x1f8>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	f040 8090 	bne.w	80085dc <PC_CMV_Inspiration_Time_LED_Function+0x134>
	{
		  Set_LED(0, 255, 0, 0);
 80084bc:	2300      	movs	r3, #0
 80084be:	2200      	movs	r2, #0
 80084c0:	21ff      	movs	r1, #255	; 0xff
 80084c2:	2000      	movs	r0, #0
 80084c4:	f7ff fbba 	bl	8007c3c <Set_LED>
		  Set_LED(1, 255, 0, 0);
 80084c8:	2300      	movs	r3, #0
 80084ca:	2200      	movs	r2, #0
 80084cc:	21ff      	movs	r1, #255	; 0xff
 80084ce:	2001      	movs	r0, #1
 80084d0:	f7ff fbb4 	bl	8007c3c <Set_LED>
		  Set_LED(2, 255, 0, 0);
 80084d4:	2300      	movs	r3, #0
 80084d6:	2200      	movs	r2, #0
 80084d8:	21ff      	movs	r1, #255	; 0xff
 80084da:	2002      	movs	r0, #2
 80084dc:	f7ff fbae 	bl	8007c3c <Set_LED>
		  Set_LED(3, 255, 0, 0);
 80084e0:	2300      	movs	r3, #0
 80084e2:	2200      	movs	r2, #0
 80084e4:	21ff      	movs	r1, #255	; 0xff
 80084e6:	2003      	movs	r0, #3
 80084e8:	f7ff fba8 	bl	8007c3c <Set_LED>
		  Set_LED(4, 255, 0, 0);
 80084ec:	2300      	movs	r3, #0
 80084ee:	2200      	movs	r2, #0
 80084f0:	21ff      	movs	r1, #255	; 0xff
 80084f2:	2004      	movs	r0, #4
 80084f4:	f7ff fba2 	bl	8007c3c <Set_LED>
		  Set_LED(5, 255, 0, 0);
 80084f8:	2300      	movs	r3, #0
 80084fa:	2200      	movs	r2, #0
 80084fc:	21ff      	movs	r1, #255	; 0xff
 80084fe:	2005      	movs	r0, #5
 8008500:	f7ff fb9c 	bl	8007c3c <Set_LED>
		  Set_LED(6, 255, 0, 0);
 8008504:	2300      	movs	r3, #0
 8008506:	2200      	movs	r2, #0
 8008508:	21ff      	movs	r1, #255	; 0xff
 800850a:	2006      	movs	r0, #6
 800850c:	f7ff fb96 	bl	8007c3c <Set_LED>
		  Set_LED(7, 255, 0, 0);
 8008510:	2300      	movs	r3, #0
 8008512:	2200      	movs	r2, #0
 8008514:	21ff      	movs	r1, #255	; 0xff
 8008516:	2007      	movs	r0, #7
 8008518:	f7ff fb90 	bl	8007c3c <Set_LED>
		  Set_LED(8, 255, 0, 0);
 800851c:	2300      	movs	r3, #0
 800851e:	2200      	movs	r2, #0
 8008520:	21ff      	movs	r1, #255	; 0xff
 8008522:	2008      	movs	r0, #8
 8008524:	f7ff fb8a 	bl	8007c3c <Set_LED>
		  Set_LED(9, 255, 0, 0);
 8008528:	2300      	movs	r3, #0
 800852a:	2200      	movs	r2, #0
 800852c:	21ff      	movs	r1, #255	; 0xff
 800852e:	2009      	movs	r0, #9
 8008530:	f7ff fb84 	bl	8007c3c <Set_LED>
		  Set_Brightness(20);
 8008534:	2014      	movs	r0, #20
 8008536:	f7ff fbaf 	bl	8007c98 <Set_Brightness>
		  WS2812_Send();
 800853a:	f7ff fc2f 	bl	8007d9c <WS2812_Send>
		  vTaskDelay (300);
 800853e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008542:	f016 fe73 	bl	801f22c <vTaskDelay>

		  Set_LED(0, 255, 0, 0);
 8008546:	2300      	movs	r3, #0
 8008548:	2200      	movs	r2, #0
 800854a:	21ff      	movs	r1, #255	; 0xff
 800854c:	2000      	movs	r0, #0
 800854e:	f7ff fb75 	bl	8007c3c <Set_LED>
		  Set_LED(1, 255, 0, 0);
 8008552:	2300      	movs	r3, #0
 8008554:	2200      	movs	r2, #0
 8008556:	21ff      	movs	r1, #255	; 0xff
 8008558:	2001      	movs	r0, #1
 800855a:	f7ff fb6f 	bl	8007c3c <Set_LED>
		  Set_LED(2, 255, 0, 0);
 800855e:	2300      	movs	r3, #0
 8008560:	2200      	movs	r2, #0
 8008562:	21ff      	movs	r1, #255	; 0xff
 8008564:	2002      	movs	r0, #2
 8008566:	f7ff fb69 	bl	8007c3c <Set_LED>
		  Set_LED(3, 255, 0, 0);
 800856a:	2300      	movs	r3, #0
 800856c:	2200      	movs	r2, #0
 800856e:	21ff      	movs	r1, #255	; 0xff
 8008570:	2003      	movs	r0, #3
 8008572:	f7ff fb63 	bl	8007c3c <Set_LED>
		  Set_LED(4, 255, 0, 0);
 8008576:	2300      	movs	r3, #0
 8008578:	2200      	movs	r2, #0
 800857a:	21ff      	movs	r1, #255	; 0xff
 800857c:	2004      	movs	r0, #4
 800857e:	f7ff fb5d 	bl	8007c3c <Set_LED>
		  Set_LED(5, 255, 0, 0);
 8008582:	2300      	movs	r3, #0
 8008584:	2200      	movs	r2, #0
 8008586:	21ff      	movs	r1, #255	; 0xff
 8008588:	2005      	movs	r0, #5
 800858a:	f7ff fb57 	bl	8007c3c <Set_LED>
		  Set_LED(6, 255, 0, 0);
 800858e:	2300      	movs	r3, #0
 8008590:	2200      	movs	r2, #0
 8008592:	21ff      	movs	r1, #255	; 0xff
 8008594:	2006      	movs	r0, #6
 8008596:	f7ff fb51 	bl	8007c3c <Set_LED>
		  Set_LED(7, 255, 0, 0);
 800859a:	2300      	movs	r3, #0
 800859c:	2200      	movs	r2, #0
 800859e:	21ff      	movs	r1, #255	; 0xff
 80085a0:	2007      	movs	r0, #7
 80085a2:	f7ff fb4b 	bl	8007c3c <Set_LED>
		  Set_LED(8, 255, 0, 0);
 80085a6:	2300      	movs	r3, #0
 80085a8:	2200      	movs	r2, #0
 80085aa:	21ff      	movs	r1, #255	; 0xff
 80085ac:	2008      	movs	r0, #8
 80085ae:	f7ff fb45 	bl	8007c3c <Set_LED>
		  Set_LED(9, 255, 0, 0);
 80085b2:	2300      	movs	r3, #0
 80085b4:	2200      	movs	r2, #0
 80085b6:	21ff      	movs	r1, #255	; 0xff
 80085b8:	2009      	movs	r0, #9
 80085ba:	f7ff fb3f 	bl	8007c3c <Set_LED>
		  Set_Brightness(20);
 80085be:	2014      	movs	r0, #20
 80085c0:	f7ff fb6a 	bl	8007c98 <Set_Brightness>
		  WS2812_Send();
 80085c4:	f7ff fbea 	bl	8007d9c <WS2812_Send>
		  vTaskDelay (300);
 80085c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085cc:	f016 fe2e 	bl	801f22c <vTaskDelay>

		  Alert_Status_Led_Strip = NO_ALERT;
 80085d0:	4b33      	ldr	r3, [pc, #204]	; (80086a0 <PC_CMV_Inspiration_Time_LED_Function+0x1f8>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
		  vTaskDelay (100);
 80085d6:	2064      	movs	r0, #100	; 0x64
 80085d8:	f016 fe28 	bl	801f22c <vTaskDelay>
	}


	  Set_LED(0, 0, 255, 0);
 80085dc:	2300      	movs	r3, #0
 80085de:	22ff      	movs	r2, #255	; 0xff
 80085e0:	2100      	movs	r1, #0
 80085e2:	2000      	movs	r0, #0
 80085e4:	f7ff fb2a 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 255, 0);
 80085e8:	2300      	movs	r3, #0
 80085ea:	22ff      	movs	r2, #255	; 0xff
 80085ec:	2100      	movs	r1, #0
 80085ee:	2001      	movs	r0, #1
 80085f0:	f7ff fb24 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 255, 0);
 80085f4:	2300      	movs	r3, #0
 80085f6:	22ff      	movs	r2, #255	; 0xff
 80085f8:	2100      	movs	r1, #0
 80085fa:	2002      	movs	r0, #2
 80085fc:	f7ff fb1e 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 255, 0);
 8008600:	2300      	movs	r3, #0
 8008602:	22ff      	movs	r2, #255	; 0xff
 8008604:	2100      	movs	r1, #0
 8008606:	2003      	movs	r0, #3
 8008608:	f7ff fb18 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 255, 0);
 800860c:	2300      	movs	r3, #0
 800860e:	22ff      	movs	r2, #255	; 0xff
 8008610:	2100      	movs	r1, #0
 8008612:	2004      	movs	r0, #4
 8008614:	f7ff fb12 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 255, 0);
 8008618:	2300      	movs	r3, #0
 800861a:	22ff      	movs	r2, #255	; 0xff
 800861c:	2100      	movs	r1, #0
 800861e:	2005      	movs	r0, #5
 8008620:	f7ff fb0c 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 255, 0);
 8008624:	2300      	movs	r3, #0
 8008626:	22ff      	movs	r2, #255	; 0xff
 8008628:	2100      	movs	r1, #0
 800862a:	2006      	movs	r0, #6
 800862c:	f7ff fb06 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 255, 0);
 8008630:	2300      	movs	r3, #0
 8008632:	22ff      	movs	r2, #255	; 0xff
 8008634:	2100      	movs	r1, #0
 8008636:	2007      	movs	r0, #7
 8008638:	f7ff fb00 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 255, 0);
 800863c:	2300      	movs	r3, #0
 800863e:	22ff      	movs	r2, #255	; 0xff
 8008640:	2100      	movs	r1, #0
 8008642:	2008      	movs	r0, #8
 8008644:	f7ff fafa 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 255, 0);
 8008648:	2300      	movs	r3, #0
 800864a:	22ff      	movs	r2, #255	; 0xff
 800864c:	2100      	movs	r1, #0
 800864e:	2009      	movs	r0, #9
 8008650:	f7ff faf4 	bl	8007c3c <Set_LED>
	  WS2812_Send();
 8008654:	f7ff fba2 	bl	8007d9c <WS2812_Send>


		  if(LED_ITER<45)
 8008658:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <PC_CMV_Inspiration_Time_LED_Function+0x1fc>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	2b2c      	cmp	r3, #44	; 0x2c
 800865e:	d81b      	bhi.n	8008698 <PC_CMV_Inspiration_Time_LED_Function+0x1f0>
		  {
			  LED_ITER++;
 8008660:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <PC_CMV_Inspiration_Time_LED_Function+0x1fc>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	3301      	adds	r3, #1
 8008666:	b2da      	uxtb	r2, r3
 8008668:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <PC_CMV_Inspiration_Time_LED_Function+0x1fc>)
 800866a:	701a      	strb	r2, [r3, #0]
			  Set_Brightness(LED_ITER);
 800866c:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <PC_CMV_Inspiration_Time_LED_Function+0x1fc>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff fb11 	bl	8007c98 <Set_Brightness>
			  WS2812_Send();
 8008676:	f7ff fb91 	bl	8007d9c <WS2812_Send>
			  vTaskDelay (Delay);
 800867a:	edd7 7a01 	vldr	s15, [r7, #4]
 800867e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008682:	ee17 0a90 	vmov	r0, s15
 8008686:	f016 fdd1 	bl	801f22c <vTaskDelay>
			  if(LED_ITER>=45)
 800868a:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <PC_CMV_Inspiration_Time_LED_Function+0x1fc>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b2c      	cmp	r3, #44	; 0x2c
 8008690:	d902      	bls.n	8008698 <PC_CMV_Inspiration_Time_LED_Function+0x1f0>
			  {
				  LED_ITER=45;
 8008692:	4b04      	ldr	r3, [pc, #16]	; (80086a4 <PC_CMV_Inspiration_Time_LED_Function+0x1fc>)
 8008694:	222d      	movs	r2, #45	; 0x2d
 8008696:	701a      	strb	r2, [r3, #0]
			  }
		  }


}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20014188 	.word	0x20014188
 80086a4:	20013f3c 	.word	0x20013f3c

080086a8 <PC_CMV_Expiration_Time_LED_Function>:


void PC_CMV_Expiration_Time_LED_Function(float Delay)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	ed87 0a01 	vstr	s0, [r7, #4]
	  Set_LED(0, 0, 255, 0);
 80086b2:	2300      	movs	r3, #0
 80086b4:	22ff      	movs	r2, #255	; 0xff
 80086b6:	2100      	movs	r1, #0
 80086b8:	2000      	movs	r0, #0
 80086ba:	f7ff fabf 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 255, 0);
 80086be:	2300      	movs	r3, #0
 80086c0:	22ff      	movs	r2, #255	; 0xff
 80086c2:	2100      	movs	r1, #0
 80086c4:	2001      	movs	r0, #1
 80086c6:	f7ff fab9 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 255, 0);
 80086ca:	2300      	movs	r3, #0
 80086cc:	22ff      	movs	r2, #255	; 0xff
 80086ce:	2100      	movs	r1, #0
 80086d0:	2002      	movs	r0, #2
 80086d2:	f7ff fab3 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 255, 0);
 80086d6:	2300      	movs	r3, #0
 80086d8:	22ff      	movs	r2, #255	; 0xff
 80086da:	2100      	movs	r1, #0
 80086dc:	2003      	movs	r0, #3
 80086de:	f7ff faad 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 255, 0);
 80086e2:	2300      	movs	r3, #0
 80086e4:	22ff      	movs	r2, #255	; 0xff
 80086e6:	2100      	movs	r1, #0
 80086e8:	2004      	movs	r0, #4
 80086ea:	f7ff faa7 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 255, 0);
 80086ee:	2300      	movs	r3, #0
 80086f0:	22ff      	movs	r2, #255	; 0xff
 80086f2:	2100      	movs	r1, #0
 80086f4:	2005      	movs	r0, #5
 80086f6:	f7ff faa1 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 255, 0);
 80086fa:	2300      	movs	r3, #0
 80086fc:	22ff      	movs	r2, #255	; 0xff
 80086fe:	2100      	movs	r1, #0
 8008700:	2006      	movs	r0, #6
 8008702:	f7ff fa9b 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 255, 0);
 8008706:	2300      	movs	r3, #0
 8008708:	22ff      	movs	r2, #255	; 0xff
 800870a:	2100      	movs	r1, #0
 800870c:	2007      	movs	r0, #7
 800870e:	f7ff fa95 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 255, 0);
 8008712:	2300      	movs	r3, #0
 8008714:	22ff      	movs	r2, #255	; 0xff
 8008716:	2100      	movs	r1, #0
 8008718:	2008      	movs	r0, #8
 800871a:	f7ff fa8f 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 255, 0);
 800871e:	2300      	movs	r3, #0
 8008720:	22ff      	movs	r2, #255	; 0xff
 8008722:	2100      	movs	r1, #0
 8008724:	2009      	movs	r0, #9
 8008726:	f7ff fa89 	bl	8007c3c <Set_LED>

	  WS2812_Send();
 800872a:	f7ff fb37 	bl	8007d9c <WS2812_Send>

	  if(LED_ITER>1)
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <PC_CMV_Expiration_Time_LED_Function+0xd0>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d91b      	bls.n	800876e <PC_CMV_Expiration_Time_LED_Function+0xc6>
	  {
		  LED_ITER--;
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <PC_CMV_Expiration_Time_LED_Function+0xd0>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	3b01      	subs	r3, #1
 800873c:	b2da      	uxtb	r2, r3
 800873e:	4b0e      	ldr	r3, [pc, #56]	; (8008778 <PC_CMV_Expiration_Time_LED_Function+0xd0>)
 8008740:	701a      	strb	r2, [r3, #0]
		  Set_Brightness(LED_ITER);
 8008742:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <PC_CMV_Expiration_Time_LED_Function+0xd0>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff faa6 	bl	8007c98 <Set_Brightness>
		  WS2812_Send();
 800874c:	f7ff fb26 	bl	8007d9c <WS2812_Send>
		  vTaskDelay (Delay);
 8008750:	edd7 7a01 	vldr	s15, [r7, #4]
 8008754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008758:	ee17 0a90 	vmov	r0, s15
 800875c:	f016 fd66 	bl	801f22c <vTaskDelay>
		  if(LED_ITER<=1)
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <PC_CMV_Expiration_Time_LED_Function+0xd0>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d802      	bhi.n	800876e <PC_CMV_Expiration_Time_LED_Function+0xc6>
		  {
			  LED_ITER=1;
 8008768:	4b03      	ldr	r3, [pc, #12]	; (8008778 <PC_CMV_Expiration_Time_LED_Function+0xd0>)
 800876a:	2201      	movs	r2, #1
 800876c:	701a      	strb	r2, [r3, #0]
		  }
	  }
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20013f3c 	.word	0x20013f3c

0800877c <Toggle_Led>:


void Toggle_Led()
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
	  Set_LED(0, 0, 0, 255);
 8008780:	23ff      	movs	r3, #255	; 0xff
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	2000      	movs	r0, #0
 8008788:	f7ff fa58 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 800878c:	2300      	movs	r3, #0
 800878e:	2200      	movs	r2, #0
 8008790:	2100      	movs	r1, #0
 8008792:	2001      	movs	r0, #1
 8008794:	f7ff fa52 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008798:	2300      	movs	r3, #0
 800879a:	2200      	movs	r2, #0
 800879c:	2100      	movs	r1, #0
 800879e:	2002      	movs	r0, #2
 80087a0:	f7ff fa4c 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 80087a4:	2300      	movs	r3, #0
 80087a6:	2200      	movs	r2, #0
 80087a8:	2100      	movs	r1, #0
 80087aa:	2003      	movs	r0, #3
 80087ac:	f7ff fa46 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 80087b0:	2300      	movs	r3, #0
 80087b2:	2200      	movs	r2, #0
 80087b4:	2100      	movs	r1, #0
 80087b6:	2004      	movs	r0, #4
 80087b8:	f7ff fa40 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 80087bc:	2300      	movs	r3, #0
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	2005      	movs	r0, #5
 80087c4:	f7ff fa3a 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 80087c8:	2300      	movs	r3, #0
 80087ca:	2200      	movs	r2, #0
 80087cc:	2100      	movs	r1, #0
 80087ce:	2006      	movs	r0, #6
 80087d0:	f7ff fa34 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 80087d4:	2300      	movs	r3, #0
 80087d6:	2200      	movs	r2, #0
 80087d8:	2100      	movs	r1, #0
 80087da:	2007      	movs	r0, #7
 80087dc:	f7ff fa2e 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 80087e0:	2300      	movs	r3, #0
 80087e2:	2200      	movs	r2, #0
 80087e4:	2100      	movs	r1, #0
 80087e6:	2008      	movs	r0, #8
 80087e8:	f7ff fa28 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 80087ec:	2300      	movs	r3, #0
 80087ee:	2200      	movs	r2, #0
 80087f0:	2100      	movs	r1, #0
 80087f2:	2009      	movs	r0, #9
 80087f4:	f7ff fa22 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 80087f8:	200f      	movs	r0, #15
 80087fa:	f7ff fa4d 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 80087fe:	f7ff facd 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(10);
 8008802:	200a      	movs	r0, #10
 8008804:	f016 fd12 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 8008808:	2300      	movs	r3, #0
 800880a:	2200      	movs	r2, #0
 800880c:	2100      	movs	r1, #0
 800880e:	2000      	movs	r0, #0
 8008810:	f7ff fa14 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 255);
 8008814:	23ff      	movs	r3, #255	; 0xff
 8008816:	2200      	movs	r2, #0
 8008818:	2100      	movs	r1, #0
 800881a:	2001      	movs	r0, #1
 800881c:	f7ff fa0e 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008820:	2300      	movs	r3, #0
 8008822:	2200      	movs	r2, #0
 8008824:	2100      	movs	r1, #0
 8008826:	2002      	movs	r0, #2
 8008828:	f7ff fa08 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 800882c:	2300      	movs	r3, #0
 800882e:	2200      	movs	r2, #0
 8008830:	2100      	movs	r1, #0
 8008832:	2003      	movs	r0, #3
 8008834:	f7ff fa02 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 8008838:	2300      	movs	r3, #0
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	2004      	movs	r0, #4
 8008840:	f7ff f9fc 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008844:	2300      	movs	r3, #0
 8008846:	2200      	movs	r2, #0
 8008848:	2100      	movs	r1, #0
 800884a:	2005      	movs	r0, #5
 800884c:	f7ff f9f6 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008850:	2300      	movs	r3, #0
 8008852:	2200      	movs	r2, #0
 8008854:	2100      	movs	r1, #0
 8008856:	2006      	movs	r0, #6
 8008858:	f7ff f9f0 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 800885c:	2300      	movs	r3, #0
 800885e:	2200      	movs	r2, #0
 8008860:	2100      	movs	r1, #0
 8008862:	2007      	movs	r0, #7
 8008864:	f7ff f9ea 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 8008868:	2300      	movs	r3, #0
 800886a:	2200      	movs	r2, #0
 800886c:	2100      	movs	r1, #0
 800886e:	2008      	movs	r0, #8
 8008870:	f7ff f9e4 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008874:	2300      	movs	r3, #0
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	2009      	movs	r0, #9
 800887c:	f7ff f9de 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008880:	200f      	movs	r0, #15
 8008882:	f7ff fa09 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008886:	f7ff fa89 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(10);
 800888a:	200a      	movs	r0, #10
 800888c:	f016 fcce 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 8008890:	2300      	movs	r3, #0
 8008892:	2200      	movs	r2, #0
 8008894:	2100      	movs	r1, #0
 8008896:	2000      	movs	r0, #0
 8008898:	f7ff f9d0 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 800889c:	2300      	movs	r3, #0
 800889e:	2200      	movs	r2, #0
 80088a0:	2100      	movs	r1, #0
 80088a2:	2001      	movs	r0, #1
 80088a4:	f7ff f9ca 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 255);
 80088a8:	23ff      	movs	r3, #255	; 0xff
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	2002      	movs	r0, #2
 80088b0:	f7ff f9c4 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 80088b4:	2300      	movs	r3, #0
 80088b6:	2200      	movs	r2, #0
 80088b8:	2100      	movs	r1, #0
 80088ba:	2003      	movs	r0, #3
 80088bc:	f7ff f9be 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 80088c0:	2300      	movs	r3, #0
 80088c2:	2200      	movs	r2, #0
 80088c4:	2100      	movs	r1, #0
 80088c6:	2004      	movs	r0, #4
 80088c8:	f7ff f9b8 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 80088cc:	2300      	movs	r3, #0
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	2005      	movs	r0, #5
 80088d4:	f7ff f9b2 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 80088d8:	2300      	movs	r3, #0
 80088da:	2200      	movs	r2, #0
 80088dc:	2100      	movs	r1, #0
 80088de:	2006      	movs	r0, #6
 80088e0:	f7ff f9ac 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 80088e4:	2300      	movs	r3, #0
 80088e6:	2200      	movs	r2, #0
 80088e8:	2100      	movs	r1, #0
 80088ea:	2007      	movs	r0, #7
 80088ec:	f7ff f9a6 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 80088f0:	2300      	movs	r3, #0
 80088f2:	2200      	movs	r2, #0
 80088f4:	2100      	movs	r1, #0
 80088f6:	2008      	movs	r0, #8
 80088f8:	f7ff f9a0 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 80088fc:	2300      	movs	r3, #0
 80088fe:	2200      	movs	r2, #0
 8008900:	2100      	movs	r1, #0
 8008902:	2009      	movs	r0, #9
 8008904:	f7ff f99a 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008908:	200f      	movs	r0, #15
 800890a:	f7ff f9c5 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 800890e:	f7ff fa45 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(10);
 8008912:	200a      	movs	r0, #10
 8008914:	f016 fc8a 	bl	801f22c <vTaskDelay>


	  Set_LED(0, 0, 0, 0);
 8008918:	2300      	movs	r3, #0
 800891a:	2200      	movs	r2, #0
 800891c:	2100      	movs	r1, #0
 800891e:	2000      	movs	r0, #0
 8008920:	f7ff f98c 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 8008924:	2300      	movs	r3, #0
 8008926:	2200      	movs	r2, #0
 8008928:	2100      	movs	r1, #0
 800892a:	2001      	movs	r0, #1
 800892c:	f7ff f986 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008930:	2300      	movs	r3, #0
 8008932:	2200      	movs	r2, #0
 8008934:	2100      	movs	r1, #0
 8008936:	2002      	movs	r0, #2
 8008938:	f7ff f980 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 255);
 800893c:	23ff      	movs	r3, #255	; 0xff
 800893e:	2200      	movs	r2, #0
 8008940:	2100      	movs	r1, #0
 8008942:	2003      	movs	r0, #3
 8008944:	f7ff f97a 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 8008948:	2300      	movs	r3, #0
 800894a:	2200      	movs	r2, #0
 800894c:	2100      	movs	r1, #0
 800894e:	2004      	movs	r0, #4
 8008950:	f7ff f974 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008954:	2300      	movs	r3, #0
 8008956:	2200      	movs	r2, #0
 8008958:	2100      	movs	r1, #0
 800895a:	2005      	movs	r0, #5
 800895c:	f7ff f96e 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008960:	2300      	movs	r3, #0
 8008962:	2200      	movs	r2, #0
 8008964:	2100      	movs	r1, #0
 8008966:	2006      	movs	r0, #6
 8008968:	f7ff f968 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 800896c:	2300      	movs	r3, #0
 800896e:	2200      	movs	r2, #0
 8008970:	2100      	movs	r1, #0
 8008972:	2007      	movs	r0, #7
 8008974:	f7ff f962 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 8008978:	2300      	movs	r3, #0
 800897a:	2200      	movs	r2, #0
 800897c:	2100      	movs	r1, #0
 800897e:	2008      	movs	r0, #8
 8008980:	f7ff f95c 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008984:	2300      	movs	r3, #0
 8008986:	2200      	movs	r2, #0
 8008988:	2100      	movs	r1, #0
 800898a:	2009      	movs	r0, #9
 800898c:	f7ff f956 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008990:	200f      	movs	r0, #15
 8008992:	f7ff f981 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008996:	f7ff fa01 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(10);
 800899a:	200a      	movs	r0, #10
 800899c:	f016 fc46 	bl	801f22c <vTaskDelay>


	  Set_LED(0, 0, 0, 0);
 80089a0:	2300      	movs	r3, #0
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	2000      	movs	r0, #0
 80089a8:	f7ff f948 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 80089ac:	2300      	movs	r3, #0
 80089ae:	2200      	movs	r2, #0
 80089b0:	2100      	movs	r1, #0
 80089b2:	2001      	movs	r0, #1
 80089b4:	f7ff f942 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 80089b8:	2300      	movs	r3, #0
 80089ba:	2200      	movs	r2, #0
 80089bc:	2100      	movs	r1, #0
 80089be:	2002      	movs	r0, #2
 80089c0:	f7ff f93c 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 80089c4:	2300      	movs	r3, #0
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	2003      	movs	r0, #3
 80089cc:	f7ff f936 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 255);
 80089d0:	23ff      	movs	r3, #255	; 0xff
 80089d2:	2200      	movs	r2, #0
 80089d4:	2100      	movs	r1, #0
 80089d6:	2004      	movs	r0, #4
 80089d8:	f7ff f930 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 80089dc:	2300      	movs	r3, #0
 80089de:	2200      	movs	r2, #0
 80089e0:	2100      	movs	r1, #0
 80089e2:	2005      	movs	r0, #5
 80089e4:	f7ff f92a 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 80089e8:	2300      	movs	r3, #0
 80089ea:	2200      	movs	r2, #0
 80089ec:	2100      	movs	r1, #0
 80089ee:	2006      	movs	r0, #6
 80089f0:	f7ff f924 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 80089f4:	2300      	movs	r3, #0
 80089f6:	2200      	movs	r2, #0
 80089f8:	2100      	movs	r1, #0
 80089fa:	2007      	movs	r0, #7
 80089fc:	f7ff f91e 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 8008a00:	2300      	movs	r3, #0
 8008a02:	2200      	movs	r2, #0
 8008a04:	2100      	movs	r1, #0
 8008a06:	2008      	movs	r0, #8
 8008a08:	f7ff f918 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2100      	movs	r1, #0
 8008a12:	2009      	movs	r0, #9
 8008a14:	f7ff f912 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008a18:	200f      	movs	r0, #15
 8008a1a:	f7ff f93d 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008a1e:	f7ff f9bd 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(10);
 8008a22:	200a      	movs	r0, #10
 8008a24:	f016 fc02 	bl	801f22c <vTaskDelay>


	  Set_LED(0, 0, 0, 0);
 8008a28:	2300      	movs	r3, #0
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	2000      	movs	r0, #0
 8008a30:	f7ff f904 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 8008a34:	2300      	movs	r3, #0
 8008a36:	2200      	movs	r2, #0
 8008a38:	2100      	movs	r1, #0
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	f7ff f8fe 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008a40:	2300      	movs	r3, #0
 8008a42:	2200      	movs	r2, #0
 8008a44:	2100      	movs	r1, #0
 8008a46:	2002      	movs	r0, #2
 8008a48:	f7ff f8f8 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2100      	movs	r1, #0
 8008a52:	2003      	movs	r0, #3
 8008a54:	f7ff f8f2 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 8008a58:	2300      	movs	r3, #0
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	2004      	movs	r0, #4
 8008a60:	f7ff f8ec 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008a64:	2300      	movs	r3, #0
 8008a66:	2200      	movs	r2, #0
 8008a68:	2100      	movs	r1, #0
 8008a6a:	2005      	movs	r0, #5
 8008a6c:	f7ff f8e6 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 255);
 8008a70:	23ff      	movs	r3, #255	; 0xff
 8008a72:	2200      	movs	r2, #0
 8008a74:	2100      	movs	r1, #0
 8008a76:	2006      	movs	r0, #6
 8008a78:	f7ff f8e0 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	2007      	movs	r0, #7
 8008a84:	f7ff f8da 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 8008a88:	2300      	movs	r3, #0
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	2008      	movs	r0, #8
 8008a90:	f7ff f8d4 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008a94:	2300      	movs	r3, #0
 8008a96:	2200      	movs	r2, #0
 8008a98:	2100      	movs	r1, #0
 8008a9a:	2009      	movs	r0, #9
 8008a9c:	f7ff f8ce 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008aa0:	200f      	movs	r0, #15
 8008aa2:	f7ff f8f9 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008aa6:	f7ff f979 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(10);
 8008aaa:	200a      	movs	r0, #10
 8008aac:	f016 fbbe 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f7ff f8c0 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 8008abc:	2300      	movs	r3, #0
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	f7ff f8ba 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008ac8:	2300      	movs	r3, #0
 8008aca:	2200      	movs	r2, #0
 8008acc:	2100      	movs	r1, #0
 8008ace:	2002      	movs	r0, #2
 8008ad0:	f7ff f8b4 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2100      	movs	r1, #0
 8008ada:	2003      	movs	r0, #3
 8008adc:	f7ff f8ae 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	2004      	movs	r0, #4
 8008ae8:	f7ff f8a8 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008aec:	2300      	movs	r3, #0
 8008aee:	2200      	movs	r2, #0
 8008af0:	2100      	movs	r1, #0
 8008af2:	2005      	movs	r0, #5
 8008af4:	f7ff f8a2 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008af8:	2300      	movs	r3, #0
 8008afa:	2200      	movs	r2, #0
 8008afc:	2100      	movs	r1, #0
 8008afe:	2006      	movs	r0, #6
 8008b00:	f7ff f89c 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 255);
 8008b04:	23ff      	movs	r3, #255	; 0xff
 8008b06:	2200      	movs	r2, #0
 8008b08:	2100      	movs	r1, #0
 8008b0a:	2007      	movs	r0, #7
 8008b0c:	f7ff f896 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 8008b10:	2300      	movs	r3, #0
 8008b12:	2200      	movs	r2, #0
 8008b14:	2100      	movs	r1, #0
 8008b16:	2008      	movs	r0, #8
 8008b18:	f7ff f890 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2100      	movs	r1, #0
 8008b22:	2009      	movs	r0, #9
 8008b24:	f7ff f88a 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008b28:	200f      	movs	r0, #15
 8008b2a:	f7ff f8b5 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008b2e:	f7ff f935 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(100);
 8008b32:	2064      	movs	r0, #100	; 0x64
 8008b34:	f016 fb7a 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 8008b38:	2300      	movs	r3, #0
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f7ff f87c 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 8008b44:	2300      	movs	r3, #0
 8008b46:	2200      	movs	r2, #0
 8008b48:	2100      	movs	r1, #0
 8008b4a:	2001      	movs	r0, #1
 8008b4c:	f7ff f876 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008b50:	2300      	movs	r3, #0
 8008b52:	2200      	movs	r2, #0
 8008b54:	2100      	movs	r1, #0
 8008b56:	2002      	movs	r0, #2
 8008b58:	f7ff f870 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	2003      	movs	r0, #3
 8008b64:	f7ff f86a 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	2004      	movs	r0, #4
 8008b70:	f7ff f864 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008b74:	2300      	movs	r3, #0
 8008b76:	2200      	movs	r2, #0
 8008b78:	2100      	movs	r1, #0
 8008b7a:	2005      	movs	r0, #5
 8008b7c:	f7ff f85e 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008b80:	2300      	movs	r3, #0
 8008b82:	2200      	movs	r2, #0
 8008b84:	2100      	movs	r1, #0
 8008b86:	2006      	movs	r0, #6
 8008b88:	f7ff f858 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2100      	movs	r1, #0
 8008b92:	2007      	movs	r0, #7
 8008b94:	f7ff f852 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 255);
 8008b98:	23ff      	movs	r3, #255	; 0xff
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	2008      	movs	r0, #8
 8008ba0:	f7ff f84c 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 0);
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2100      	movs	r1, #0
 8008baa:	2009      	movs	r0, #9
 8008bac:	f7ff f846 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008bb0:	200f      	movs	r0, #15
 8008bb2:	f7ff f871 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008bb6:	f7ff f8f1 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(10);
 8008bba:	200a      	movs	r0, #10
 8008bbc:	f016 fb36 	bl	801f22c <vTaskDelay>

	  Set_LED(0, 0, 0, 0);
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	f7ff f838 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 0, 0);
 8008bcc:	2300      	movs	r3, #0
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	f7ff f832 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 0, 0);
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2100      	movs	r1, #0
 8008bde:	2002      	movs	r0, #2
 8008be0:	f7ff f82c 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 0, 0);
 8008be4:	2300      	movs	r3, #0
 8008be6:	2200      	movs	r2, #0
 8008be8:	2100      	movs	r1, #0
 8008bea:	2003      	movs	r0, #3
 8008bec:	f7ff f826 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 0, 0);
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	2004      	movs	r0, #4
 8008bf8:	f7ff f820 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 0, 0);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2100      	movs	r1, #0
 8008c02:	2005      	movs	r0, #5
 8008c04:	f7ff f81a 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 0, 0);
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	2006      	movs	r0, #6
 8008c10:	f7ff f814 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 0, 0);
 8008c14:	2300      	movs	r3, #0
 8008c16:	2200      	movs	r2, #0
 8008c18:	2100      	movs	r1, #0
 8008c1a:	2007      	movs	r0, #7
 8008c1c:	f7ff f80e 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 0, 0);
 8008c20:	2300      	movs	r3, #0
 8008c22:	2200      	movs	r2, #0
 8008c24:	2100      	movs	r1, #0
 8008c26:	2008      	movs	r0, #8
 8008c28:	f7ff f808 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 0, 255);
 8008c2c:	23ff      	movs	r3, #255	; 0xff
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2100      	movs	r1, #0
 8008c32:	2009      	movs	r0, #9
 8008c34:	f7ff f802 	bl	8007c3c <Set_LED>
	  Set_Brightness(15);
 8008c38:	200f      	movs	r0, #15
 8008c3a:	f7ff f82d 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008c3e:	f7ff f8ad 	bl	8007d9c <WS2812_Send>
	  vTaskDelay(10);
 8008c42:	200a      	movs	r0, #10
 8008c44:	f016 faf2 	bl	801f22c <vTaskDelay>

	  Receive_Led_Signal=0;
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <Toggle_Led+0x4d8>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	701a      	strb	r2, [r3, #0]
}
 8008c4e:	bf00      	nop
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	2001401c 	.word	0x2001401c

08008c58 <Green_Led>:



void Green_Led()
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0


	  Set_LED(0, 0, 255, 0);
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	22ff      	movs	r2, #255	; 0xff
 8008c60:	2100      	movs	r1, #0
 8008c62:	2000      	movs	r0, #0
 8008c64:	f7fe ffea 	bl	8007c3c <Set_LED>
	  Set_LED(1, 0, 255, 0);
 8008c68:	2300      	movs	r3, #0
 8008c6a:	22ff      	movs	r2, #255	; 0xff
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	2001      	movs	r0, #1
 8008c70:	f7fe ffe4 	bl	8007c3c <Set_LED>
	  Set_LED(2, 0, 255, 0);
 8008c74:	2300      	movs	r3, #0
 8008c76:	22ff      	movs	r2, #255	; 0xff
 8008c78:	2100      	movs	r1, #0
 8008c7a:	2002      	movs	r0, #2
 8008c7c:	f7fe ffde 	bl	8007c3c <Set_LED>
	  Set_LED(3, 0, 255, 0);
 8008c80:	2300      	movs	r3, #0
 8008c82:	22ff      	movs	r2, #255	; 0xff
 8008c84:	2100      	movs	r1, #0
 8008c86:	2003      	movs	r0, #3
 8008c88:	f7fe ffd8 	bl	8007c3c <Set_LED>
	  Set_LED(4, 0, 255, 0);
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	22ff      	movs	r2, #255	; 0xff
 8008c90:	2100      	movs	r1, #0
 8008c92:	2004      	movs	r0, #4
 8008c94:	f7fe ffd2 	bl	8007c3c <Set_LED>
	  Set_LED(5, 0, 255, 0);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	22ff      	movs	r2, #255	; 0xff
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	2005      	movs	r0, #5
 8008ca0:	f7fe ffcc 	bl	8007c3c <Set_LED>
	  Set_LED(6, 0, 255, 0);
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	22ff      	movs	r2, #255	; 0xff
 8008ca8:	2100      	movs	r1, #0
 8008caa:	2006      	movs	r0, #6
 8008cac:	f7fe ffc6 	bl	8007c3c <Set_LED>
	  Set_LED(7, 0, 255, 0);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	22ff      	movs	r2, #255	; 0xff
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	2007      	movs	r0, #7
 8008cb8:	f7fe ffc0 	bl	8007c3c <Set_LED>
	  Set_LED(8, 0, 255, 0);
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	22ff      	movs	r2, #255	; 0xff
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	2008      	movs	r0, #8
 8008cc4:	f7fe ffba 	bl	8007c3c <Set_LED>
	  Set_LED(9, 0, 255, 0);
 8008cc8:	2300      	movs	r3, #0
 8008cca:	22ff      	movs	r2, #255	; 0xff
 8008ccc:	2100      	movs	r1, #0
 8008cce:	2009      	movs	r0, #9
 8008cd0:	f7fe ffb4 	bl	8007c3c <Set_LED>

	  Set_Brightness(15);
 8008cd4:	200f      	movs	r0, #15
 8008cd6:	f7fe ffdf 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008cda:	f7ff f85f 	bl	8007d9c <WS2812_Send>

}
 8008cde:	bf00      	nop
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <Pink_Led>:



void Pink_Led()
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	af00      	add	r7, sp, #0
	  Set_LED(0, 255, 51, 221);
 8008ce6:	23dd      	movs	r3, #221	; 0xdd
 8008ce8:	2233      	movs	r2, #51	; 0x33
 8008cea:	21ff      	movs	r1, #255	; 0xff
 8008cec:	2000      	movs	r0, #0
 8008cee:	f7fe ffa5 	bl	8007c3c <Set_LED>
	  Set_LED(1, 255, 51, 221);
 8008cf2:	23dd      	movs	r3, #221	; 0xdd
 8008cf4:	2233      	movs	r2, #51	; 0x33
 8008cf6:	21ff      	movs	r1, #255	; 0xff
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	f7fe ff9f 	bl	8007c3c <Set_LED>
	  Set_LED(2, 255, 51, 221);
 8008cfe:	23dd      	movs	r3, #221	; 0xdd
 8008d00:	2233      	movs	r2, #51	; 0x33
 8008d02:	21ff      	movs	r1, #255	; 0xff
 8008d04:	2002      	movs	r0, #2
 8008d06:	f7fe ff99 	bl	8007c3c <Set_LED>
	  Set_LED(3, 255, 51, 221);
 8008d0a:	23dd      	movs	r3, #221	; 0xdd
 8008d0c:	2233      	movs	r2, #51	; 0x33
 8008d0e:	21ff      	movs	r1, #255	; 0xff
 8008d10:	2003      	movs	r0, #3
 8008d12:	f7fe ff93 	bl	8007c3c <Set_LED>
	  Set_LED(4, 255, 51, 221);
 8008d16:	23dd      	movs	r3, #221	; 0xdd
 8008d18:	2233      	movs	r2, #51	; 0x33
 8008d1a:	21ff      	movs	r1, #255	; 0xff
 8008d1c:	2004      	movs	r0, #4
 8008d1e:	f7fe ff8d 	bl	8007c3c <Set_LED>
	  Set_LED(5, 255, 51, 221);
 8008d22:	23dd      	movs	r3, #221	; 0xdd
 8008d24:	2233      	movs	r2, #51	; 0x33
 8008d26:	21ff      	movs	r1, #255	; 0xff
 8008d28:	2005      	movs	r0, #5
 8008d2a:	f7fe ff87 	bl	8007c3c <Set_LED>
	  Set_LED(6, 255, 51, 221);
 8008d2e:	23dd      	movs	r3, #221	; 0xdd
 8008d30:	2233      	movs	r2, #51	; 0x33
 8008d32:	21ff      	movs	r1, #255	; 0xff
 8008d34:	2006      	movs	r0, #6
 8008d36:	f7fe ff81 	bl	8007c3c <Set_LED>
	  Set_LED(7, 255, 51, 221);
 8008d3a:	23dd      	movs	r3, #221	; 0xdd
 8008d3c:	2233      	movs	r2, #51	; 0x33
 8008d3e:	21ff      	movs	r1, #255	; 0xff
 8008d40:	2007      	movs	r0, #7
 8008d42:	f7fe ff7b 	bl	8007c3c <Set_LED>
	  Set_LED(8, 255, 51, 221);
 8008d46:	23dd      	movs	r3, #221	; 0xdd
 8008d48:	2233      	movs	r2, #51	; 0x33
 8008d4a:	21ff      	movs	r1, #255	; 0xff
 8008d4c:	2008      	movs	r0, #8
 8008d4e:	f7fe ff75 	bl	8007c3c <Set_LED>
	  Set_LED(9, 255, 51, 221);
 8008d52:	23dd      	movs	r3, #221	; 0xdd
 8008d54:	2233      	movs	r2, #51	; 0x33
 8008d56:	21ff      	movs	r1, #255	; 0xff
 8008d58:	2009      	movs	r0, #9
 8008d5a:	f7fe ff6f 	bl	8007c3c <Set_LED>

	  Set_Brightness(15);
 8008d5e:	200f      	movs	r0, #15
 8008d60:	f7fe ff9a 	bl	8007c98 <Set_Brightness>
	  WS2812_Send();
 8008d64:	f7ff f81a 	bl	8007d9c <WS2812_Send>
}
 8008d68:	bf00      	nop
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <Split_Nebuliser_Packets>:

uint8_t Suction_Started = 0;


void Split_Nebuliser_Packets(NEBULISER_PACKET * Receive_Graph_Packet)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	Nebuliser.NEBULISER_ON_Val           = (0X80 & (Receive_Graph_Packet->NEBULISER)) >>7;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	78db      	ldrb	r3, [r3, #3]
 8008d78:	09db      	lsrs	r3, r3, #7
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	4b39      	ldr	r3, [pc, #228]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008d7e:	701a      	strb	r2, [r3, #0]
	Nebuliser.NEBULISER_SYNC_ON_Val      = (0X40 & ( Receive_Graph_Packet->NEBULISER)) >>6;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	78db      	ldrb	r3, [r3, #3]
 8008d84:	099b      	lsrs	r3, r3, #6
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	4b35      	ldr	r3, [pc, #212]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008d90:	705a      	strb	r2, [r3, #1]
	Nebuliser.NEBULISER_TIME             = (0X3F & (Receive_Graph_Packet->NEBULISER)) * 60000;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	78db      	ldrb	r3, [r3, #3]
 8008d96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d9a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008d9e:	fb02 f303 	mul.w	r3, r2, r3
 8008da2:	4a30      	ldr	r2, [pc, #192]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008da4:	6053      	str	r3, [r2, #4]
	Nebuliser.NEBULISER_TIMER            = Nebuliser.NEBULISER_TIME;
 8008da6:	4b2f      	ldr	r3, [pc, #188]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	4a2e      	ldr	r2, [pc, #184]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008dac:	6093      	str	r3, [r2, #8]

	Nebuliser.SUCTION                    = (0X08 & ( Receive_Graph_Packet->MANUOVER)) >> 3;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	791b      	ldrb	r3, [r3, #4]
 8008db2:	08db      	lsrs	r3, r3, #3
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	4b29      	ldr	r3, [pc, #164]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008dbe:	731a      	strb	r2, [r3, #12]


	 if(Nebuliser.NEBULISER_ON_Val==1)
 8008dc0:	4b28      	ldr	r3, [pc, #160]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d10f      	bne.n	8008de8 <Split_Nebuliser_Packets+0x7c>
	 {
		 SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8008dc8:	4a27      	ldr	r2, [pc, #156]	; (8008e68 <Split_Nebuliser_Packets+0xfc>)
 8008dca:	78d3      	ldrb	r3, [r2, #3]
 8008dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd0:	70d3      	strb	r3, [r2, #3]
		 CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8008dd2:	4a25      	ldr	r2, [pc, #148]	; (8008e68 <Split_Nebuliser_Packets+0xfc>)
 8008dd4:	78d3      	ldrb	r3, [r2, #3]
 8008dd6:	f36f 13c7 	bfc	r3, #7, #1
 8008dda:	70d3      	strb	r3, [r2, #3]
		 vTaskResume(Nebuliser_Handler);
 8008ddc:	4b23      	ldr	r3, [pc, #140]	; (8008e6c <Split_Nebuliser_Packets+0x100>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f016 fb1b 	bl	801f41c <vTaskResume>
 8008de6:	e015      	b.n	8008e14 <Split_Nebuliser_Packets+0xa8>
	 }
	 else if(Nebuliser.NEBULISER_ON_Val==0)
 8008de8:	4b1e      	ldr	r3, [pc, #120]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d111      	bne.n	8008e14 <Split_Nebuliser_Packets+0xa8>
	 {
     	 SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8008df0:	4a1d      	ldr	r2, [pc, #116]	; (8008e68 <Split_Nebuliser_Packets+0xfc>)
 8008df2:	78d3      	ldrb	r3, [r2, #3]
 8008df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df8:	70d3      	strb	r3, [r2, #3]
     	 CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8008dfa:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <Split_Nebuliser_Packets+0xfc>)
 8008dfc:	78d3      	ldrb	r3, [r2, #3]
 8008dfe:	f36f 1386 	bfc	r3, #6, #1
 8008e02:	70d3      	strb	r3, [r2, #3]
		 Nebuliser.NEBULISER_TIMER = 0;
 8008e04:	4b17      	ldr	r3, [pc, #92]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	609a      	str	r2, [r3, #8]
		 vTaskResume(Nebuliser_Handler);
 8008e0a:	4b18      	ldr	r3, [pc, #96]	; (8008e6c <Split_Nebuliser_Packets+0x100>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f016 fb04 	bl	801f41c <vTaskResume>
	 }


	 if(Nebuliser.SUCTION  == 1)
 8008e14:	4b13      	ldr	r3, [pc, #76]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008e16:	7b1b      	ldrb	r3, [r3, #12]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d105      	bne.n	8008e28 <Split_Nebuliser_Packets+0xbc>
	 {
		 Suction_Started  = 1;
 8008e1c:	4b14      	ldr	r3, [pc, #80]	; (8008e70 <Split_Nebuliser_Packets+0x104>)
 8008e1e:	2201      	movs	r2, #1
 8008e20:	701a      	strb	r2, [r3, #0]
		 SUCTION_Packet_Data();
 8008e22:	f006 fe19 	bl	800fa58 <SUCTION_Packet_Data>
	 }




}
 8008e26:	e018      	b.n	8008e5a <Split_Nebuliser_Packets+0xee>
	 else if( (Nebuliser.SUCTION  == 0) && (Suction_Started == 1) )
 8008e28:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <Split_Nebuliser_Packets+0xf8>)
 8008e2a:	7b1b      	ldrb	r3, [r3, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d114      	bne.n	8008e5a <Split_Nebuliser_Packets+0xee>
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <Split_Nebuliser_Packets+0x104>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d110      	bne.n	8008e5a <Split_Nebuliser_Packets+0xee>
		 Suction_Started   = 0;
 8008e38:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <Split_Nebuliser_Packets+0x104>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	701a      	strb	r2, [r3, #0]
		 Blower_Signal(0);
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <Split_Nebuliser_Packets+0x108>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	609a      	str	r2, [r3, #8]
		 ExpValve_OPEN();
 8008e44:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <Split_Nebuliser_Packets+0x10c>)
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	4a0b      	ldr	r2, [pc, #44]	; (8008e78 <Split_Nebuliser_Packets+0x10c>)
 8008e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e4e:	6153      	str	r3, [r2, #20]
		 vTaskSuspend(Suction_Handler);
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <Split_Nebuliser_Packets+0x110>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f016 fa1d 	bl	801f294 <vTaskSuspend>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20013f60 	.word	0x20013f60
 8008e68:	20013b34 	.word	0x20013b34
 8008e6c:	20013bb8 	.word	0x20013bb8
 8008e70:	200001ec 	.word	0x200001ec
 8008e74:	40007400 	.word	0x40007400
 8008e78:	40020400 	.word	0x40020400
 8008e7c:	2001423c 	.word	0x2001423c

08008e80 <Nebuliser_Task>:


void Nebuliser_Task (void *argument)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Nebuliser.NEBULISER_TIMER>0)
 8008e88:	4b08      	ldr	r3, [pc, #32]	; (8008eac <Nebuliser_Task+0x2c>)
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	dd02      	ble.n	8008e96 <Nebuliser_Task+0x16>
		{
			Nebuliser_Func();
 8008e90:	f000 f810 	bl	8008eb4 <Nebuliser_Func>
 8008e94:	e005      	b.n	8008ea2 <Nebuliser_Task+0x22>
		}
		else
		{
			Nebuliser_OFF();
 8008e96:	4b06      	ldr	r3, [pc, #24]	; (8008eb0 <Nebuliser_Task+0x30>)
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	4a05      	ldr	r2, [pc, #20]	; (8008eb0 <Nebuliser_Task+0x30>)
 8008e9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ea0:	6153      	str	r3, [r2, #20]
		}
		vTaskDelay(Ten_Millisecond_Delay);
 8008ea2:	200a      	movs	r0, #10
 8008ea4:	f016 f9c2 	bl	801f22c <vTaskDelay>
		if(Nebuliser.NEBULISER_TIMER>0)
 8008ea8:	e7ee      	b.n	8008e88 <Nebuliser_Task+0x8>
 8008eaa:	bf00      	nop
 8008eac:	20013f60 	.word	0x20013f60
 8008eb0:	40020400 	.word	0x40020400

08008eb4 <Nebuliser_Func>:
}



void Nebuliser_Func()
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0

	    if(Running_Mode  == Aprv)
 8008eb8:	4b3b      	ldr	r3, [pc, #236]	; (8008fa8 <Nebuliser_Func+0xf4>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d133      	bne.n	8008f28 <Nebuliser_Func+0x74>
	    {
	        if(Nebuliser.NEBULISER_ON_Val==1)
 8008ec0:	4b3a      	ldr	r3, [pc, #232]	; (8008fac <Nebuliser_Func+0xf8>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d120      	bne.n	8008f0a <Nebuliser_Func+0x56>
	        {
	        	if(Nebuliser.NEBULISER_SYNC_ON_Val==0)
 8008ec8:	4b38      	ldr	r3, [pc, #224]	; (8008fac <Nebuliser_Func+0xf8>)
 8008eca:	785b      	ldrb	r3, [r3, #1]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <Nebuliser_Func+0x2a>
	        	{
	        		Nebuliser_ON();
 8008ed0:	4b37      	ldr	r3, [pc, #220]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	4a36      	ldr	r2, [pc, #216]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eda:	6153      	str	r3, [r2, #20]
	        	Nebuliser_OFF();
	        	vTaskSuspend(Nebuliser_Handler);
	        }
	    }

}
 8008edc:	e061      	b.n	8008fa2 <Nebuliser_Func+0xee>
	        		if(APRV_current_breathe      == APRV_INS)
 8008ede:	4b35      	ldr	r3, [pc, #212]	; (8008fb4 <Nebuliser_Func+0x100>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d106      	bne.n	8008ef4 <Nebuliser_Func+0x40>
	        			Nebuliser_ON();
 8008ee6:	4b32      	ldr	r3, [pc, #200]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	4a31      	ldr	r2, [pc, #196]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef0:	6153      	str	r3, [r2, #20]
}
 8008ef2:	e056      	b.n	8008fa2 <Nebuliser_Func+0xee>
	                else if(APRV_current_breathe == APRV_EXP)
 8008ef4:	4b2f      	ldr	r3, [pc, #188]	; (8008fb4 <Nebuliser_Func+0x100>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d152      	bne.n	8008fa2 <Nebuliser_Func+0xee>
	                	Nebuliser_OFF();
 8008efc:	4b2c      	ldr	r3, [pc, #176]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	4a2b      	ldr	r2, [pc, #172]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f06:	6153      	str	r3, [r2, #20]
}
 8008f08:	e04b      	b.n	8008fa2 <Nebuliser_Func+0xee>
	        	Nebuliser.NEBULISER_TIMER = 0;
 8008f0a:	4b28      	ldr	r3, [pc, #160]	; (8008fac <Nebuliser_Func+0xf8>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	609a      	str	r2, [r3, #8]
	        	Nebuliser_OFF();
 8008f10:	4b27      	ldr	r3, [pc, #156]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	4a26      	ldr	r2, [pc, #152]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f1a:	6153      	str	r3, [r2, #20]
	        	vTaskSuspend(Nebuliser_Handler);
 8008f1c:	4b26      	ldr	r3, [pc, #152]	; (8008fb8 <Nebuliser_Func+0x104>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f016 f9b7 	bl	801f294 <vTaskSuspend>
}
 8008f26:	e03c      	b.n	8008fa2 <Nebuliser_Func+0xee>
	        if(Nebuliser.NEBULISER_ON_Val==1)
 8008f28:	4b20      	ldr	r3, [pc, #128]	; (8008fac <Nebuliser_Func+0xf8>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d120      	bne.n	8008f72 <Nebuliser_Func+0xbe>
	        	if(Nebuliser.NEBULISER_SYNC_ON_Val==0)
 8008f30:	4b1e      	ldr	r3, [pc, #120]	; (8008fac <Nebuliser_Func+0xf8>)
 8008f32:	785b      	ldrb	r3, [r3, #1]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d106      	bne.n	8008f46 <Nebuliser_Func+0x92>
	        		Nebuliser_ON();
 8008f38:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	4a1c      	ldr	r2, [pc, #112]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f42:	6153      	str	r3, [r2, #20]
}
 8008f44:	e02d      	b.n	8008fa2 <Nebuliser_Func+0xee>
	        		if(Run_Current_Breathe_State      == Run_Inspiration_Cycle)
 8008f46:	4b1d      	ldr	r3, [pc, #116]	; (8008fbc <Nebuliser_Func+0x108>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d106      	bne.n	8008f5c <Nebuliser_Func+0xa8>
	        			Nebuliser_ON();
 8008f4e:	4b18      	ldr	r3, [pc, #96]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	4a17      	ldr	r2, [pc, #92]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f58:	6153      	str	r3, [r2, #20]
}
 8008f5a:	e022      	b.n	8008fa2 <Nebuliser_Func+0xee>
	                else if(Run_Current_Breathe_State == Run_Expiration_Cycle)
 8008f5c:	4b17      	ldr	r3, [pc, #92]	; (8008fbc <Nebuliser_Func+0x108>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d11e      	bne.n	8008fa2 <Nebuliser_Func+0xee>
	                	Nebuliser_OFF();
 8008f64:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	4a11      	ldr	r2, [pc, #68]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f6e:	6153      	str	r3, [r2, #20]
}
 8008f70:	e017      	b.n	8008fa2 <Nebuliser_Func+0xee>
	        	SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8008f72:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <Nebuliser_Func+0x10c>)
 8008f74:	78d3      	ldrb	r3, [r2, #3]
 8008f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7a:	70d3      	strb	r3, [r2, #3]
	        	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8008f7c:	4a10      	ldr	r2, [pc, #64]	; (8008fc0 <Nebuliser_Func+0x10c>)
 8008f7e:	78d3      	ldrb	r3, [r2, #3]
 8008f80:	f36f 1386 	bfc	r3, #6, #1
 8008f84:	70d3      	strb	r3, [r2, #3]
	        	Nebuliser.NEBULISER_TIMER = 0;
 8008f86:	4b09      	ldr	r3, [pc, #36]	; (8008fac <Nebuliser_Func+0xf8>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	609a      	str	r2, [r3, #8]
	        	Nebuliser_OFF();
 8008f8c:	4b08      	ldr	r3, [pc, #32]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	4a07      	ldr	r2, [pc, #28]	; (8008fb0 <Nebuliser_Func+0xfc>)
 8008f92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f96:	6153      	str	r3, [r2, #20]
	        	vTaskSuspend(Nebuliser_Handler);
 8008f98:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <Nebuliser_Func+0x104>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f016 f979 	bl	801f294 <vTaskSuspend>
}
 8008fa2:	bf00      	nop
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20014238 	.word	0x20014238
 8008fac:	20013f60 	.word	0x20013f60
 8008fb0:	40020400 	.word	0x40020400
 8008fb4:	20013ca8 	.word	0x20013ca8
 8008fb8:	20013bb8 	.word	0x20013bb8
 8008fbc:	20013f7c 	.word	0x20013f7c
 8008fc0:	20013b34 	.word	0x20013b34

08008fc4 <Find_Max_PIP>:

#include "Common_Parameter.h"


void Find_Max_PIP()
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
	if(Pressure_sensor.Pressure_Val >= PIP_Average_Parameter.Maximum_PIP_Acheived)
 8008fc8:	4b07      	ldr	r3, [pc, #28]	; (8008fe8 <Find_Max_PIP+0x24>)
 8008fca:	789a      	ldrb	r2, [r3, #2]
 8008fcc:	4b07      	ldr	r3, [pc, #28]	; (8008fec <Find_Max_PIP+0x28>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d303      	bcc.n	8008fdc <Find_Max_PIP+0x18>
	{
		PIP_Average_Parameter.Maximum_PIP_Acheived   = Pressure_sensor.Pressure_Val;
 8008fd4:	4b04      	ldr	r3, [pc, #16]	; (8008fe8 <Find_Max_PIP+0x24>)
 8008fd6:	789a      	ldrb	r2, [r3, #2]
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <Find_Max_PIP+0x28>)
 8008fda:	701a      	strb	r2, [r3, #0]
	}
}
 8008fdc:	bf00      	nop
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	2001405c 	.word	0x2001405c
 8008fec:	20013b70 	.word	0x20013b70

08008ff0 <Find_Maximum_PEEP>:

void Find_Maximum_PEEP()
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
	if(PEEP_Maintain_Parameter.Maximum_PEEP_Acheived < Pressure_sensor.Pressure_Val)
 8008ff4:	4b07      	ldr	r3, [pc, #28]	; (8009014 <Find_Maximum_PEEP+0x24>)
 8008ff6:	799a      	ldrb	r2, [r3, #6]
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <Find_Maximum_PEEP+0x28>)
 8008ffa:	789b      	ldrb	r3, [r3, #2]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d203      	bcs.n	8009008 <Find_Maximum_PEEP+0x18>
	{
		PEEP_Maintain_Parameter.Maximum_PEEP_Acheived = Pressure_sensor.Pressure_Val;
 8009000:	4b05      	ldr	r3, [pc, #20]	; (8009018 <Find_Maximum_PEEP+0x28>)
 8009002:	789a      	ldrb	r2, [r3, #2]
 8009004:	4b03      	ldr	r3, [pc, #12]	; (8009014 <Find_Maximum_PEEP+0x24>)
 8009006:	719a      	strb	r2, [r3, #6]
	}
}
 8009008:	bf00      	nop
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20014300 	.word	0x20014300
 8009018:	2001405c 	.word	0x2001405c

0800901c <PIP_AVERAGE>:


void PIP_AVERAGE()
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
	if((PIP_Average_Parameter.PIP_Cumulative_Val == 0) || (PIP_Average_Parameter.PIP_Event_Count == 0))
 8009020:	4b10      	ldr	r3, [pc, #64]	; (8009064 <PIP_AVERAGE+0x48>)
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <PIP_AVERAGE+0x14>
 8009028:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <PIP_AVERAGE+0x48>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d105      	bne.n	800903c <PIP_AVERAGE+0x20>
	{
		PIP_Average_Parameter.PIP_Cumulative_Val = 1;
 8009030:	4b0c      	ldr	r3, [pc, #48]	; (8009064 <PIP_AVERAGE+0x48>)
 8009032:	2201      	movs	r2, #1
 8009034:	605a      	str	r2, [r3, #4]
		PIP_Average_Parameter.PIP_Event_Count    = 1;
 8009036:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <PIP_AVERAGE+0x48>)
 8009038:	2201      	movs	r2, #1
 800903a:	609a      	str	r2, [r3, #8]
	}

	PIP_Average_Parameter.PIP_AVG_VAL        = (uint32_t)(PIP_Average_Parameter.PIP_Cumulative_Val/ PIP_Average_Parameter.PIP_Event_Count);
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <PIP_AVERAGE+0x48>)
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	4b08      	ldr	r3, [pc, #32]	; (8009064 <PIP_AVERAGE+0x48>)
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	fbb2 f3f3 	udiv	r3, r2, r3
 8009048:	b2da      	uxtb	r2, r3
 800904a:	4b06      	ldr	r3, [pc, #24]	; (8009064 <PIP_AVERAGE+0x48>)
 800904c:	731a      	strb	r2, [r3, #12]
	PIP_Average_Parameter.PIP_Cumulative_Val = RESET;
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <PIP_AVERAGE+0x48>)
 8009050:	2200      	movs	r2, #0
 8009052:	605a      	str	r2, [r3, #4]
	PIP_Average_Parameter.PIP_Event_Count    = RESET;
 8009054:	4b03      	ldr	r3, [pc, #12]	; (8009064 <PIP_AVERAGE+0x48>)
 8009056:	2200      	movs	r2, #0
 8009058:	609a      	str	r2, [r3, #8]
}
 800905a:	bf00      	nop
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	20013b70 	.word	0x20013b70

08009068 <PEEP_AVERAGE>:
void PEEP_AVERAGE()
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0

	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 800906c:	4b21      	ldr	r3, [pc, #132]	; (80090f4 <PEEP_AVERAGE+0x8c>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d11d      	bne.n	80090b0 <PEEP_AVERAGE+0x48>
	{
		if((PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger == 0) || (PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger == 0))
 8009074:	4b20      	ldr	r3, [pc, #128]	; (80090f8 <PEEP_AVERAGE+0x90>)
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <PEEP_AVERAGE+0x1c>
 800907c:	4b1e      	ldr	r3, [pc, #120]	; (80090f8 <PEEP_AVERAGE+0x90>)
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d105      	bne.n	8009090 <PEEP_AVERAGE+0x28>
		{
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = 1;
 8009084:	4b1c      	ldr	r3, [pc, #112]	; (80090f8 <PEEP_AVERAGE+0x90>)
 8009086:	2201      	movs	r2, #1
 8009088:	615a      	str	r2, [r3, #20]
			PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = 1;
 800908a:	4b1b      	ldr	r3, [pc, #108]	; (80090f8 <PEEP_AVERAGE+0x90>)
 800908c:	2201      	movs	r2, #1
 800908e:	619a      	str	r2, [r3, #24]
		}
		PEEP_Maintain_Parameter.PEEP_AVG_VAL                = (uint32_t)(PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger/ PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger);
 8009090:	4b19      	ldr	r3, [pc, #100]	; (80090f8 <PEEP_AVERAGE+0x90>)
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	4b18      	ldr	r3, [pc, #96]	; (80090f8 <PEEP_AVERAGE+0x90>)
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	fbb2 f3f3 	udiv	r3, r2, r3
 800909c:	b2da      	uxtb	r2, r3
 800909e:	4b16      	ldr	r3, [pc, #88]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090a0:	741a      	strb	r2, [r3, #16]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	615a      	str	r2, [r3, #20]
		PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 80090a8:	4b13      	ldr	r3, [pc, #76]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	619a      	str	r2, [r3, #24]
		}
		PEEP_Maintain_Parameter.PEEP_AVG_VAL        = (uint32_t)(PEEP_Maintain_Parameter.PEEP_Cumulative_Val/ PEEP_Maintain_Parameter.PEEP_Event_Count);
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val = RESET;
		PEEP_Maintain_Parameter.PEEP_Event_Count    = RESET;
	}
}
 80090ae:	e01c      	b.n	80090ea <PEEP_AVERAGE+0x82>
		if((PEEP_Maintain_Parameter.PEEP_Cumulative_Val == 0) || (PEEP_Maintain_Parameter.PEEP_Event_Count == 0))
 80090b0:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d003      	beq.n	80090c0 <PEEP_AVERAGE+0x58>
 80090b8:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d105      	bne.n	80090cc <PEEP_AVERAGE+0x64>
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val = 1;
 80090c0:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	609a      	str	r2, [r3, #8]
			PEEP_Maintain_Parameter.PEEP_Event_Count    = 1;
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090c8:	2201      	movs	r2, #1
 80090ca:	60da      	str	r2, [r3, #12]
		PEEP_Maintain_Parameter.PEEP_AVG_VAL        = (uint32_t)(PEEP_Maintain_Parameter.PEEP_Cumulative_Val/ PEEP_Maintain_Parameter.PEEP_Event_Count);
 80090cc:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090dc:	741a      	strb	r2, [r3, #16]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val = RESET;
 80090de:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count    = RESET;
 80090e4:	4b04      	ldr	r3, [pc, #16]	; (80090f8 <PEEP_AVERAGE+0x90>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	60da      	str	r2, [r3, #12]
}
 80090ea:	bf00      	nop
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	20013ca9 	.word	0x20013ca9
 80090f8:	20014300 	.word	0x20014300

080090fc <INITIAL_DAC_VALUE>:




void INITIAL_DAC_VALUE()
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0
	DAC_SIGNALS.DAC_VALUE_5       = 450;
 8009100:	4b7e      	ldr	r3, [pc, #504]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009102:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8009106:	801a      	strh	r2, [r3, #0]
	DAC_SIGNALS.DAC_VALUE_6       = 500;
 8009108:	4b7c      	ldr	r3, [pc, #496]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800910a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800910e:	805a      	strh	r2, [r3, #2]
	DAC_SIGNALS.DAC_VALUE_7       = 550;
 8009110:	4b7a      	ldr	r3, [pc, #488]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009112:	f240 2226 	movw	r2, #550	; 0x226
 8009116:	809a      	strh	r2, [r3, #4]
	DAC_SIGNALS.DAC_VALUE_8       = 600;
 8009118:	4b78      	ldr	r3, [pc, #480]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800911a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800911e:	80da      	strh	r2, [r3, #6]
	DAC_SIGNALS.DAC_VALUE_9       = 630;
 8009120:	4b76      	ldr	r3, [pc, #472]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009122:	f240 2276 	movw	r2, #630	; 0x276
 8009126:	811a      	strh	r2, [r3, #8]
	DAC_SIGNALS.DAC_VALUE_10      = 660;
 8009128:	4b74      	ldr	r3, [pc, #464]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800912a:	f44f 7225 	mov.w	r2, #660	; 0x294
 800912e:	815a      	strh	r2, [r3, #10]
	DAC_SIGNALS.DAC_VALUE_11      = 690;
 8009130:	4b72      	ldr	r3, [pc, #456]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009132:	f240 22b2 	movw	r2, #690	; 0x2b2
 8009136:	819a      	strh	r2, [r3, #12]
	DAC_SIGNALS.DAC_VALUE_12      = 720;
 8009138:	4b70      	ldr	r3, [pc, #448]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800913a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800913e:	81da      	strh	r2, [r3, #14]
	DAC_SIGNALS.DAC_VALUE_13      = 750;
 8009140:	4b6e      	ldr	r3, [pc, #440]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009142:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009146:	821a      	strh	r2, [r3, #16]
	DAC_SIGNALS.DAC_VALUE_14      = 780;
 8009148:	4b6c      	ldr	r3, [pc, #432]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800914a:	f44f 7243 	mov.w	r2, #780	; 0x30c
 800914e:	825a      	strh	r2, [r3, #18]
	DAC_SIGNALS.DAC_VALUE_15      = 810;
 8009150:	4b6a      	ldr	r3, [pc, #424]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009152:	f240 322a 	movw	r2, #810	; 0x32a
 8009156:	829a      	strh	r2, [r3, #20]
	DAC_SIGNALS.DAC_VALUE_16      = 840;
 8009158:	4b68      	ldr	r3, [pc, #416]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800915a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800915e:	82da      	strh	r2, [r3, #22]
	DAC_SIGNALS.DAC_VALUE_17      = 870;
 8009160:	4b66      	ldr	r3, [pc, #408]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009162:	f240 3266 	movw	r2, #870	; 0x366
 8009166:	831a      	strh	r2, [r3, #24]
	DAC_SIGNALS.DAC_VALUE_18      = 900;
 8009168:	4b64      	ldr	r3, [pc, #400]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800916a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800916e:	835a      	strh	r2, [r3, #26]
	DAC_SIGNALS.DAC_VALUE_19      = 930;
 8009170:	4b62      	ldr	r3, [pc, #392]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009172:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009176:	839a      	strh	r2, [r3, #28]
	DAC_SIGNALS.DAC_VALUE_20      = 950;
 8009178:	4b60      	ldr	r3, [pc, #384]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800917a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800917e:	83da      	strh	r2, [r3, #30]
	DAC_SIGNALS.DAC_VALUE_21      = 970;
 8009180:	4b5e      	ldr	r3, [pc, #376]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009182:	f240 32ca 	movw	r2, #970	; 0x3ca
 8009186:	841a      	strh	r2, [r3, #32]
	DAC_SIGNALS.DAC_VALUE_22      = 990;
 8009188:	4b5c      	ldr	r3, [pc, #368]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800918a:	f240 32de 	movw	r2, #990	; 0x3de
 800918e:	845a      	strh	r2, [r3, #34]	; 0x22
	DAC_SIGNALS.DAC_VALUE_23      = 1010;
 8009190:	4b5a      	ldr	r3, [pc, #360]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009192:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8009196:	849a      	strh	r2, [r3, #36]	; 0x24
	DAC_SIGNALS.DAC_VALUE_24      = 1030;
 8009198:	4b58      	ldr	r3, [pc, #352]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800919a:	f240 4206 	movw	r2, #1030	; 0x406
 800919e:	84da      	strh	r2, [r3, #38]	; 0x26
	DAC_SIGNALS.DAC_VALUE_25      = 1050;
 80091a0:	4b56      	ldr	r3, [pc, #344]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091a2:	f240 421a 	movw	r2, #1050	; 0x41a
 80091a6:	851a      	strh	r2, [r3, #40]	; 0x28
	DAC_SIGNALS.DAC_VALUE_26      = 1080;
 80091a8:	4b54      	ldr	r3, [pc, #336]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091aa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80091ae:	855a      	strh	r2, [r3, #42]	; 0x2a
	DAC_SIGNALS.DAC_VALUE_27      = 1100;
 80091b0:	4b52      	ldr	r3, [pc, #328]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091b2:	f240 424c 	movw	r2, #1100	; 0x44c
 80091b6:	859a      	strh	r2, [r3, #44]	; 0x2c
	DAC_SIGNALS.DAC_VALUE_28      = 1120;
 80091b8:	4b50      	ldr	r3, [pc, #320]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091ba:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80091be:	85da      	strh	r2, [r3, #46]	; 0x2e
	DAC_SIGNALS.DAC_VALUE_29      = 1140;
 80091c0:	4b4e      	ldr	r3, [pc, #312]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091c2:	f240 4274 	movw	r2, #1140	; 0x474
 80091c6:	861a      	strh	r2, [r3, #48]	; 0x30
	DAC_SIGNALS.DAC_VALUE_30      = 1160;
 80091c8:	4b4c      	ldr	r3, [pc, #304]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091ca:	f44f 6291 	mov.w	r2, #1160	; 0x488
 80091ce:	865a      	strh	r2, [r3, #50]	; 0x32
	DAC_SIGNALS.DAC_VALUE_31      = 1180;
 80091d0:	4b4a      	ldr	r3, [pc, #296]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091d2:	f240 429c 	movw	r2, #1180	; 0x49c
 80091d6:	869a      	strh	r2, [r3, #52]	; 0x34
	DAC_SIGNALS.DAC_VALUE_32      = 1200;
 80091d8:	4b48      	ldr	r3, [pc, #288]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091da:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80091de:	86da      	strh	r2, [r3, #54]	; 0x36
	DAC_SIGNALS.DAC_VALUE_33      = 1220;
 80091e0:	4b46      	ldr	r3, [pc, #280]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091e2:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80091e6:	871a      	strh	r2, [r3, #56]	; 0x38
	DAC_SIGNALS.DAC_VALUE_34      = 1240;
 80091e8:	4b44      	ldr	r3, [pc, #272]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091ea:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80091ee:	875a      	strh	r2, [r3, #58]	; 0x3a
	DAC_SIGNALS.DAC_VALUE_35      = 1260;
 80091f0:	4b42      	ldr	r3, [pc, #264]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091f2:	f240 42ec 	movw	r2, #1260	; 0x4ec
 80091f6:	879a      	strh	r2, [r3, #60]	; 0x3c
	DAC_SIGNALS.DAC_VALUE_36      = 1280;
 80091f8:	4b40      	ldr	r3, [pc, #256]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80091fa:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80091fe:	87da      	strh	r2, [r3, #62]	; 0x3e
	DAC_SIGNALS.DAC_VALUE_37      = 1290;
 8009200:	4b3e      	ldr	r3, [pc, #248]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009202:	f240 520a 	movw	r2, #1290	; 0x50a
 8009206:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DAC_SIGNALS.DAC_VALUE_38      = 1310;
 800920a:	4b3c      	ldr	r3, [pc, #240]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800920c:	f240 521e 	movw	r2, #1310	; 0x51e
 8009210:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DAC_SIGNALS.DAC_VALUE_39      = 1325;
 8009214:	4b39      	ldr	r3, [pc, #228]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009216:	f240 522d 	movw	r2, #1325	; 0x52d
 800921a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	DAC_SIGNALS.DAC_VALUE_40      = 1340;
 800921e:	4b37      	ldr	r3, [pc, #220]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009220:	f240 523c 	movw	r2, #1340	; 0x53c
 8009224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	DAC_SIGNALS.DAC_VALUE_41      = 1360;
 8009228:	4b34      	ldr	r3, [pc, #208]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800922a:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 800922e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	DAC_SIGNALS.DAC_VALUE_42      = 1380;
 8009232:	4b32      	ldr	r3, [pc, #200]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009234:	f240 5264 	movw	r2, #1380	; 0x564
 8009238:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	DAC_SIGNALS.DAC_VALUE_43      = 1400;
 800923c:	4b2f      	ldr	r3, [pc, #188]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800923e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8009242:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	DAC_SIGNALS.DAC_VALUE_44      = 1420;
 8009246:	4b2d      	ldr	r3, [pc, #180]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009248:	f240 528c 	movw	r2, #1420	; 0x58c
 800924c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	DAC_SIGNALS.DAC_VALUE_45      = 1440;
 8009250:	4b2a      	ldr	r3, [pc, #168]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009252:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8009256:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	DAC_SIGNALS.DAC_VALUE_46      = 1460;
 800925a:	4b28      	ldr	r3, [pc, #160]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800925c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8009260:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	DAC_SIGNALS.DAC_VALUE_47      = 1470;
 8009264:	4b25      	ldr	r3, [pc, #148]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009266:	f240 52be 	movw	r2, #1470	; 0x5be
 800926a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	DAC_SIGNALS.DAC_VALUE_48      = 1480;
 800926e:	4b23      	ldr	r3, [pc, #140]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009270:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 8009274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	DAC_SIGNALS.DAC_VALUE_49      = 1500;
 8009278:	4b20      	ldr	r3, [pc, #128]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800927a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800927e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	DAC_SIGNALS.DAC_VALUE_50      = 1520;
 8009282:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009284:	f44f 62be 	mov.w	r2, #1520	; 0x5f0
 8009288:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	DAC_SIGNALS.DAC_VALUE_51      = 1540;
 800928c:	4b1b      	ldr	r3, [pc, #108]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 800928e:	f240 6204 	movw	r2, #1540	; 0x604
 8009292:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	DAC_SIGNALS.DAC_VALUE_52      = 1560;
 8009296:	4b19      	ldr	r3, [pc, #100]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 8009298:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 800929c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	DAC_SIGNALS.DAC_VALUE_53      = 1570;
 80092a0:	4b16      	ldr	r3, [pc, #88]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80092a2:	f240 6222 	movw	r2, #1570	; 0x622
 80092a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DAC_SIGNALS.DAC_VALUE_54      = 1580;
 80092aa:	4b14      	ldr	r3, [pc, #80]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80092ac:	f240 622c 	movw	r2, #1580	; 0x62c
 80092b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	DAC_SIGNALS.DAC_VALUE_55      = 1600;
 80092b4:	4b11      	ldr	r3, [pc, #68]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80092b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80092ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	DAC_SIGNALS.DAC_VALUE_56      = 1610;
 80092be:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80092c0:	f240 624a 	movw	r2, #1610	; 0x64a
 80092c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	DAC_SIGNALS.DAC_VALUE_57      = 1630;
 80092c8:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80092ca:	f240 625e 	movw	r2, #1630	; 0x65e
 80092ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	DAC_SIGNALS.DAC_VALUE_58      = 1650;
 80092d2:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80092d4:	f240 6272 	movw	r2, #1650	; 0x672
 80092d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	DAC_SIGNALS.DAC_VALUE_59      = 1670;
 80092dc:	4b07      	ldr	r3, [pc, #28]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80092de:	f240 6286 	movw	r2, #1670	; 0x686
 80092e2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	DAC_SIGNALS.DAC_VALUE_60      = 1680;
 80092e6:	4b05      	ldr	r3, [pc, #20]	; (80092fc <INITIAL_DAC_VALUE+0x200>)
 80092e8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80092ec:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

}
 80092f0:	bf00      	nop
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	20013bd4 	.word	0x20013bd4

08009300 <DAC_VAL>:




uint16_t DAC_VAL(uint8_t Set_VAL)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	71fb      	strb	r3, [r7, #7]

	switch(Set_VAL)
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	3b05      	subs	r3, #5
 800930e:	2b37      	cmp	r3, #55	; 0x37
 8009310:	f200 81a8 	bhi.w	8009664 <DAC_VAL+0x364>
 8009314:	a201      	add	r2, pc, #4	; (adr r2, 800931c <DAC_VAL+0x1c>)
 8009316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931a:	bf00      	nop
 800931c:	080093fd 	.word	0x080093fd
 8009320:	08009407 	.word	0x08009407
 8009324:	08009411 	.word	0x08009411
 8009328:	0800941b 	.word	0x0800941b
 800932c:	08009425 	.word	0x08009425
 8009330:	0800942f 	.word	0x0800942f
 8009334:	08009439 	.word	0x08009439
 8009338:	08009443 	.word	0x08009443
 800933c:	0800944d 	.word	0x0800944d
 8009340:	08009457 	.word	0x08009457
 8009344:	08009461 	.word	0x08009461
 8009348:	0800946b 	.word	0x0800946b
 800934c:	08009475 	.word	0x08009475
 8009350:	0800947f 	.word	0x0800947f
 8009354:	08009489 	.word	0x08009489
 8009358:	08009493 	.word	0x08009493
 800935c:	0800949d 	.word	0x0800949d
 8009360:	080094a7 	.word	0x080094a7
 8009364:	080094b1 	.word	0x080094b1
 8009368:	080094bb 	.word	0x080094bb
 800936c:	080094c5 	.word	0x080094c5
 8009370:	080094cf 	.word	0x080094cf
 8009374:	080094d9 	.word	0x080094d9
 8009378:	080094e3 	.word	0x080094e3
 800937c:	080094ed 	.word	0x080094ed
 8009380:	080094f7 	.word	0x080094f7
 8009384:	08009501 	.word	0x08009501
 8009388:	0800950b 	.word	0x0800950b
 800938c:	08009515 	.word	0x08009515
 8009390:	0800951f 	.word	0x0800951f
 8009394:	08009529 	.word	0x08009529
 8009398:	08009533 	.word	0x08009533
 800939c:	0800953d 	.word	0x0800953d
 80093a0:	08009549 	.word	0x08009549
 80093a4:	08009555 	.word	0x08009555
 80093a8:	08009561 	.word	0x08009561
 80093ac:	0800956d 	.word	0x0800956d
 80093b0:	08009579 	.word	0x08009579
 80093b4:	08009585 	.word	0x08009585
 80093b8:	08009591 	.word	0x08009591
 80093bc:	0800959d 	.word	0x0800959d
 80093c0:	080095a9 	.word	0x080095a9
 80093c4:	080095b5 	.word	0x080095b5
 80093c8:	080095c1 	.word	0x080095c1
 80093cc:	080095cd 	.word	0x080095cd
 80093d0:	080095d9 	.word	0x080095d9
 80093d4:	080095e5 	.word	0x080095e5
 80093d8:	080095f1 	.word	0x080095f1
 80093dc:	080095fd 	.word	0x080095fd
 80093e0:	08009609 	.word	0x08009609
 80093e4:	0800961d 	.word	0x0800961d
 80093e8:	08009629 	.word	0x08009629
 80093ec:	08009635 	.word	0x08009635
 80093f0:	08009641 	.word	0x08009641
 80093f4:	0800964d 	.word	0x0800964d
 80093f8:	08009659 	.word	0x08009659
	{
	    case 5:
	    	 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_5;
 80093fc:	4b85      	ldr	r3, [pc, #532]	; (8009614 <DAC_VAL+0x314>)
 80093fe:	881a      	ldrh	r2, [r3, #0]
 8009400:	4b85      	ldr	r3, [pc, #532]	; (8009618 <DAC_VAL+0x318>)
 8009402:	801a      	strh	r2, [r3, #0]
	    break;
 8009404:	e12e      	b.n	8009664 <DAC_VAL+0x364>
	    case 6:
	    	 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_6;
 8009406:	4b83      	ldr	r3, [pc, #524]	; (8009614 <DAC_VAL+0x314>)
 8009408:	885a      	ldrh	r2, [r3, #2]
 800940a:	4b83      	ldr	r3, [pc, #524]	; (8009618 <DAC_VAL+0x318>)
 800940c:	801a      	strh	r2, [r3, #0]
	    break;
 800940e:	e129      	b.n	8009664 <DAC_VAL+0x364>
	    case 7:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_7;
 8009410:	4b80      	ldr	r3, [pc, #512]	; (8009614 <DAC_VAL+0x314>)
 8009412:	889a      	ldrh	r2, [r3, #4]
 8009414:	4b80      	ldr	r3, [pc, #512]	; (8009618 <DAC_VAL+0x318>)
 8009416:	801a      	strh	r2, [r3, #0]
		break;
 8009418:	e124      	b.n	8009664 <DAC_VAL+0x364>
	    case 8:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_8;
 800941a:	4b7e      	ldr	r3, [pc, #504]	; (8009614 <DAC_VAL+0x314>)
 800941c:	88da      	ldrh	r2, [r3, #6]
 800941e:	4b7e      	ldr	r3, [pc, #504]	; (8009618 <DAC_VAL+0x318>)
 8009420:	801a      	strh	r2, [r3, #0]
		break;
 8009422:	e11f      	b.n	8009664 <DAC_VAL+0x364>
	    case 9:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_9;
 8009424:	4b7b      	ldr	r3, [pc, #492]	; (8009614 <DAC_VAL+0x314>)
 8009426:	891a      	ldrh	r2, [r3, #8]
 8009428:	4b7b      	ldr	r3, [pc, #492]	; (8009618 <DAC_VAL+0x318>)
 800942a:	801a      	strh	r2, [r3, #0]
		break;
 800942c:	e11a      	b.n	8009664 <DAC_VAL+0x364>
	    case 10:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_10;
 800942e:	4b79      	ldr	r3, [pc, #484]	; (8009614 <DAC_VAL+0x314>)
 8009430:	895a      	ldrh	r2, [r3, #10]
 8009432:	4b79      	ldr	r3, [pc, #484]	; (8009618 <DAC_VAL+0x318>)
 8009434:	801a      	strh	r2, [r3, #0]
		break;
 8009436:	e115      	b.n	8009664 <DAC_VAL+0x364>
		case 11:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_11;
 8009438:	4b76      	ldr	r3, [pc, #472]	; (8009614 <DAC_VAL+0x314>)
 800943a:	899a      	ldrh	r2, [r3, #12]
 800943c:	4b76      	ldr	r3, [pc, #472]	; (8009618 <DAC_VAL+0x318>)
 800943e:	801a      	strh	r2, [r3, #0]
		break;
 8009440:	e110      	b.n	8009664 <DAC_VAL+0x364>
		case 12:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_12;
 8009442:	4b74      	ldr	r3, [pc, #464]	; (8009614 <DAC_VAL+0x314>)
 8009444:	89da      	ldrh	r2, [r3, #14]
 8009446:	4b74      	ldr	r3, [pc, #464]	; (8009618 <DAC_VAL+0x318>)
 8009448:	801a      	strh	r2, [r3, #0]
		break;
 800944a:	e10b      	b.n	8009664 <DAC_VAL+0x364>
		case 13:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_13;
 800944c:	4b71      	ldr	r3, [pc, #452]	; (8009614 <DAC_VAL+0x314>)
 800944e:	8a1a      	ldrh	r2, [r3, #16]
 8009450:	4b71      	ldr	r3, [pc, #452]	; (8009618 <DAC_VAL+0x318>)
 8009452:	801a      	strh	r2, [r3, #0]
		break;
 8009454:	e106      	b.n	8009664 <DAC_VAL+0x364>
		case 14:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_14;
 8009456:	4b6f      	ldr	r3, [pc, #444]	; (8009614 <DAC_VAL+0x314>)
 8009458:	8a5a      	ldrh	r2, [r3, #18]
 800945a:	4b6f      	ldr	r3, [pc, #444]	; (8009618 <DAC_VAL+0x318>)
 800945c:	801a      	strh	r2, [r3, #0]
		break;
 800945e:	e101      	b.n	8009664 <DAC_VAL+0x364>
		case 15:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_15;
 8009460:	4b6c      	ldr	r3, [pc, #432]	; (8009614 <DAC_VAL+0x314>)
 8009462:	8a9a      	ldrh	r2, [r3, #20]
 8009464:	4b6c      	ldr	r3, [pc, #432]	; (8009618 <DAC_VAL+0x318>)
 8009466:	801a      	strh	r2, [r3, #0]
		break;
 8009468:	e0fc      	b.n	8009664 <DAC_VAL+0x364>
		case 16:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_16;
 800946a:	4b6a      	ldr	r3, [pc, #424]	; (8009614 <DAC_VAL+0x314>)
 800946c:	8ada      	ldrh	r2, [r3, #22]
 800946e:	4b6a      	ldr	r3, [pc, #424]	; (8009618 <DAC_VAL+0x318>)
 8009470:	801a      	strh	r2, [r3, #0]
		break;
 8009472:	e0f7      	b.n	8009664 <DAC_VAL+0x364>
		case 17:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_17;
 8009474:	4b67      	ldr	r3, [pc, #412]	; (8009614 <DAC_VAL+0x314>)
 8009476:	8b1a      	ldrh	r2, [r3, #24]
 8009478:	4b67      	ldr	r3, [pc, #412]	; (8009618 <DAC_VAL+0x318>)
 800947a:	801a      	strh	r2, [r3, #0]
		break;
 800947c:	e0f2      	b.n	8009664 <DAC_VAL+0x364>
		case 18:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_18;
 800947e:	4b65      	ldr	r3, [pc, #404]	; (8009614 <DAC_VAL+0x314>)
 8009480:	8b5a      	ldrh	r2, [r3, #26]
 8009482:	4b65      	ldr	r3, [pc, #404]	; (8009618 <DAC_VAL+0x318>)
 8009484:	801a      	strh	r2, [r3, #0]
		break;
 8009486:	e0ed      	b.n	8009664 <DAC_VAL+0x364>
		case 19:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_19;
 8009488:	4b62      	ldr	r3, [pc, #392]	; (8009614 <DAC_VAL+0x314>)
 800948a:	8b9a      	ldrh	r2, [r3, #28]
 800948c:	4b62      	ldr	r3, [pc, #392]	; (8009618 <DAC_VAL+0x318>)
 800948e:	801a      	strh	r2, [r3, #0]
		break;
 8009490:	e0e8      	b.n	8009664 <DAC_VAL+0x364>
		case 20:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_20;
 8009492:	4b60      	ldr	r3, [pc, #384]	; (8009614 <DAC_VAL+0x314>)
 8009494:	8bda      	ldrh	r2, [r3, #30]
 8009496:	4b60      	ldr	r3, [pc, #384]	; (8009618 <DAC_VAL+0x318>)
 8009498:	801a      	strh	r2, [r3, #0]
		break;
 800949a:	e0e3      	b.n	8009664 <DAC_VAL+0x364>
		case 21:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_21;
 800949c:	4b5d      	ldr	r3, [pc, #372]	; (8009614 <DAC_VAL+0x314>)
 800949e:	8c1a      	ldrh	r2, [r3, #32]
 80094a0:	4b5d      	ldr	r3, [pc, #372]	; (8009618 <DAC_VAL+0x318>)
 80094a2:	801a      	strh	r2, [r3, #0]
		break;
 80094a4:	e0de      	b.n	8009664 <DAC_VAL+0x364>
		case 22:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_22;
 80094a6:	4b5b      	ldr	r3, [pc, #364]	; (8009614 <DAC_VAL+0x314>)
 80094a8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80094aa:	4b5b      	ldr	r3, [pc, #364]	; (8009618 <DAC_VAL+0x318>)
 80094ac:	801a      	strh	r2, [r3, #0]
		break;
 80094ae:	e0d9      	b.n	8009664 <DAC_VAL+0x364>
		case 23:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_23;
 80094b0:	4b58      	ldr	r3, [pc, #352]	; (8009614 <DAC_VAL+0x314>)
 80094b2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80094b4:	4b58      	ldr	r3, [pc, #352]	; (8009618 <DAC_VAL+0x318>)
 80094b6:	801a      	strh	r2, [r3, #0]
		break;
 80094b8:	e0d4      	b.n	8009664 <DAC_VAL+0x364>
		case 24:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_24;
 80094ba:	4b56      	ldr	r3, [pc, #344]	; (8009614 <DAC_VAL+0x314>)
 80094bc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80094be:	4b56      	ldr	r3, [pc, #344]	; (8009618 <DAC_VAL+0x318>)
 80094c0:	801a      	strh	r2, [r3, #0]
		break;
 80094c2:	e0cf      	b.n	8009664 <DAC_VAL+0x364>
		case 25:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_25;
 80094c4:	4b53      	ldr	r3, [pc, #332]	; (8009614 <DAC_VAL+0x314>)
 80094c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80094c8:	4b53      	ldr	r3, [pc, #332]	; (8009618 <DAC_VAL+0x318>)
 80094ca:	801a      	strh	r2, [r3, #0]
		break;
 80094cc:	e0ca      	b.n	8009664 <DAC_VAL+0x364>
		case 26:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_26;
 80094ce:	4b51      	ldr	r3, [pc, #324]	; (8009614 <DAC_VAL+0x314>)
 80094d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80094d2:	4b51      	ldr	r3, [pc, #324]	; (8009618 <DAC_VAL+0x318>)
 80094d4:	801a      	strh	r2, [r3, #0]
		break;
 80094d6:	e0c5      	b.n	8009664 <DAC_VAL+0x364>
		case 27:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_27;
 80094d8:	4b4e      	ldr	r3, [pc, #312]	; (8009614 <DAC_VAL+0x314>)
 80094da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80094dc:	4b4e      	ldr	r3, [pc, #312]	; (8009618 <DAC_VAL+0x318>)
 80094de:	801a      	strh	r2, [r3, #0]
		break;
 80094e0:	e0c0      	b.n	8009664 <DAC_VAL+0x364>
		case 28:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_28;
 80094e2:	4b4c      	ldr	r3, [pc, #304]	; (8009614 <DAC_VAL+0x314>)
 80094e4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80094e6:	4b4c      	ldr	r3, [pc, #304]	; (8009618 <DAC_VAL+0x318>)
 80094e8:	801a      	strh	r2, [r3, #0]
		break;
 80094ea:	e0bb      	b.n	8009664 <DAC_VAL+0x364>
	    case 29:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_29;
 80094ec:	4b49      	ldr	r3, [pc, #292]	; (8009614 <DAC_VAL+0x314>)
 80094ee:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80094f0:	4b49      	ldr	r3, [pc, #292]	; (8009618 <DAC_VAL+0x318>)
 80094f2:	801a      	strh	r2, [r3, #0]
		break;
 80094f4:	e0b6      	b.n	8009664 <DAC_VAL+0x364>
		case 30:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_30;
 80094f6:	4b47      	ldr	r3, [pc, #284]	; (8009614 <DAC_VAL+0x314>)
 80094f8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80094fa:	4b47      	ldr	r3, [pc, #284]	; (8009618 <DAC_VAL+0x318>)
 80094fc:	801a      	strh	r2, [r3, #0]
		break;
 80094fe:	e0b1      	b.n	8009664 <DAC_VAL+0x364>
		case 31:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_31;
 8009500:	4b44      	ldr	r3, [pc, #272]	; (8009614 <DAC_VAL+0x314>)
 8009502:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8009504:	4b44      	ldr	r3, [pc, #272]	; (8009618 <DAC_VAL+0x318>)
 8009506:	801a      	strh	r2, [r3, #0]
		break;
 8009508:	e0ac      	b.n	8009664 <DAC_VAL+0x364>
		case 32:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_32;
 800950a:	4b42      	ldr	r3, [pc, #264]	; (8009614 <DAC_VAL+0x314>)
 800950c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800950e:	4b42      	ldr	r3, [pc, #264]	; (8009618 <DAC_VAL+0x318>)
 8009510:	801a      	strh	r2, [r3, #0]
		break;
 8009512:	e0a7      	b.n	8009664 <DAC_VAL+0x364>
		case 33:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_33;
 8009514:	4b3f      	ldr	r3, [pc, #252]	; (8009614 <DAC_VAL+0x314>)
 8009516:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8009518:	4b3f      	ldr	r3, [pc, #252]	; (8009618 <DAC_VAL+0x318>)
 800951a:	801a      	strh	r2, [r3, #0]
		break;
 800951c:	e0a2      	b.n	8009664 <DAC_VAL+0x364>
		case 34:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_34;
 800951e:	4b3d      	ldr	r3, [pc, #244]	; (8009614 <DAC_VAL+0x314>)
 8009520:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8009522:	4b3d      	ldr	r3, [pc, #244]	; (8009618 <DAC_VAL+0x318>)
 8009524:	801a      	strh	r2, [r3, #0]
		break;
 8009526:	e09d      	b.n	8009664 <DAC_VAL+0x364>
		case 35:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_35;
 8009528:	4b3a      	ldr	r3, [pc, #232]	; (8009614 <DAC_VAL+0x314>)
 800952a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800952c:	4b3a      	ldr	r3, [pc, #232]	; (8009618 <DAC_VAL+0x318>)
 800952e:	801a      	strh	r2, [r3, #0]
		break;
 8009530:	e098      	b.n	8009664 <DAC_VAL+0x364>
		case 36:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_36;
 8009532:	4b38      	ldr	r3, [pc, #224]	; (8009614 <DAC_VAL+0x314>)
 8009534:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8009536:	4b38      	ldr	r3, [pc, #224]	; (8009618 <DAC_VAL+0x318>)
 8009538:	801a      	strh	r2, [r3, #0]
		break;
 800953a:	e093      	b.n	8009664 <DAC_VAL+0x364>
		case 37:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_37;
 800953c:	4b35      	ldr	r3, [pc, #212]	; (8009614 <DAC_VAL+0x314>)
 800953e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009542:	4b35      	ldr	r3, [pc, #212]	; (8009618 <DAC_VAL+0x318>)
 8009544:	801a      	strh	r2, [r3, #0]
		break;
 8009546:	e08d      	b.n	8009664 <DAC_VAL+0x364>
		case 38:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_38;
 8009548:	4b32      	ldr	r3, [pc, #200]	; (8009614 <DAC_VAL+0x314>)
 800954a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800954e:	4b32      	ldr	r3, [pc, #200]	; (8009618 <DAC_VAL+0x318>)
 8009550:	801a      	strh	r2, [r3, #0]
		break;
 8009552:	e087      	b.n	8009664 <DAC_VAL+0x364>
		case 39:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_39;
 8009554:	4b2f      	ldr	r3, [pc, #188]	; (8009614 <DAC_VAL+0x314>)
 8009556:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800955a:	4b2f      	ldr	r3, [pc, #188]	; (8009618 <DAC_VAL+0x318>)
 800955c:	801a      	strh	r2, [r3, #0]
		break;
 800955e:	e081      	b.n	8009664 <DAC_VAL+0x364>
		case 40:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_40;
 8009560:	4b2c      	ldr	r3, [pc, #176]	; (8009614 <DAC_VAL+0x314>)
 8009562:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8009566:	4b2c      	ldr	r3, [pc, #176]	; (8009618 <DAC_VAL+0x318>)
 8009568:	801a      	strh	r2, [r3, #0]
		break;
 800956a:	e07b      	b.n	8009664 <DAC_VAL+0x364>
		case 41:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_41;
 800956c:	4b29      	ldr	r3, [pc, #164]	; (8009614 <DAC_VAL+0x314>)
 800956e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009572:	4b29      	ldr	r3, [pc, #164]	; (8009618 <DAC_VAL+0x318>)
 8009574:	801a      	strh	r2, [r3, #0]
		break;
 8009576:	e075      	b.n	8009664 <DAC_VAL+0x364>
		case 42:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_42;
 8009578:	4b26      	ldr	r3, [pc, #152]	; (8009614 <DAC_VAL+0x314>)
 800957a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800957e:	4b26      	ldr	r3, [pc, #152]	; (8009618 <DAC_VAL+0x318>)
 8009580:	801a      	strh	r2, [r3, #0]
		break;
 8009582:	e06f      	b.n	8009664 <DAC_VAL+0x364>
		case 43:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_43;
 8009584:	4b23      	ldr	r3, [pc, #140]	; (8009614 <DAC_VAL+0x314>)
 8009586:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800958a:	4b23      	ldr	r3, [pc, #140]	; (8009618 <DAC_VAL+0x318>)
 800958c:	801a      	strh	r2, [r3, #0]
		break;
 800958e:	e069      	b.n	8009664 <DAC_VAL+0x364>
		case 44:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_44;
 8009590:	4b20      	ldr	r3, [pc, #128]	; (8009614 <DAC_VAL+0x314>)
 8009592:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8009596:	4b20      	ldr	r3, [pc, #128]	; (8009618 <DAC_VAL+0x318>)
 8009598:	801a      	strh	r2, [r3, #0]
		break;
 800959a:	e063      	b.n	8009664 <DAC_VAL+0x364>
		case 45:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_45;
 800959c:	4b1d      	ldr	r3, [pc, #116]	; (8009614 <DAC_VAL+0x314>)
 800959e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80095a2:	4b1d      	ldr	r3, [pc, #116]	; (8009618 <DAC_VAL+0x318>)
 80095a4:	801a      	strh	r2, [r3, #0]
		break;
 80095a6:	e05d      	b.n	8009664 <DAC_VAL+0x364>
		case 46:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_46;
 80095a8:	4b1a      	ldr	r3, [pc, #104]	; (8009614 <DAC_VAL+0x314>)
 80095aa:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80095ae:	4b1a      	ldr	r3, [pc, #104]	; (8009618 <DAC_VAL+0x318>)
 80095b0:	801a      	strh	r2, [r3, #0]
		break;
 80095b2:	e057      	b.n	8009664 <DAC_VAL+0x364>
		case 47:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_47;
 80095b4:	4b17      	ldr	r3, [pc, #92]	; (8009614 <DAC_VAL+0x314>)
 80095b6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80095ba:	4b17      	ldr	r3, [pc, #92]	; (8009618 <DAC_VAL+0x318>)
 80095bc:	801a      	strh	r2, [r3, #0]
		break;
 80095be:	e051      	b.n	8009664 <DAC_VAL+0x364>
		case 48:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_48;
 80095c0:	4b14      	ldr	r3, [pc, #80]	; (8009614 <DAC_VAL+0x314>)
 80095c2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80095c6:	4b14      	ldr	r3, [pc, #80]	; (8009618 <DAC_VAL+0x318>)
 80095c8:	801a      	strh	r2, [r3, #0]
		break;
 80095ca:	e04b      	b.n	8009664 <DAC_VAL+0x364>
		case 49:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_49;
 80095cc:	4b11      	ldr	r3, [pc, #68]	; (8009614 <DAC_VAL+0x314>)
 80095ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095d2:	4b11      	ldr	r3, [pc, #68]	; (8009618 <DAC_VAL+0x318>)
 80095d4:	801a      	strh	r2, [r3, #0]
		break;
 80095d6:	e045      	b.n	8009664 <DAC_VAL+0x364>
		case 50:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_50;
 80095d8:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <DAC_VAL+0x314>)
 80095da:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
 80095de:	4b0e      	ldr	r3, [pc, #56]	; (8009618 <DAC_VAL+0x318>)
 80095e0:	801a      	strh	r2, [r3, #0]
		break;
 80095e2:	e03f      	b.n	8009664 <DAC_VAL+0x364>
		case 51:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_51;
 80095e4:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <DAC_VAL+0x314>)
 80095e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095ea:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <DAC_VAL+0x318>)
 80095ec:	801a      	strh	r2, [r3, #0]
		break;
 80095ee:	e039      	b.n	8009664 <DAC_VAL+0x364>
		case 52:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_52;
 80095f0:	4b08      	ldr	r3, [pc, #32]	; (8009614 <DAC_VAL+0x314>)
 80095f2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80095f6:	4b08      	ldr	r3, [pc, #32]	; (8009618 <DAC_VAL+0x318>)
 80095f8:	801a      	strh	r2, [r3, #0]
		break;
 80095fa:	e033      	b.n	8009664 <DAC_VAL+0x364>
	    case 53:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_53;
 80095fc:	4b05      	ldr	r3, [pc, #20]	; (8009614 <DAC_VAL+0x314>)
 80095fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009602:	4b05      	ldr	r3, [pc, #20]	; (8009618 <DAC_VAL+0x318>)
 8009604:	801a      	strh	r2, [r3, #0]
		break;
 8009606:	e02d      	b.n	8009664 <DAC_VAL+0x364>
		case 54:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_54;
 8009608:	4b02      	ldr	r3, [pc, #8]	; (8009614 <DAC_VAL+0x314>)
 800960a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800960e:	4b02      	ldr	r3, [pc, #8]	; (8009618 <DAC_VAL+0x318>)
 8009610:	801a      	strh	r2, [r3, #0]
		break;
 8009612:	e027      	b.n	8009664 <DAC_VAL+0x364>
 8009614:	20013bd4 	.word	0x20013bd4
 8009618:	200142f4 	.word	0x200142f4
		case 55:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_55;
 800961c:	4b15      	ldr	r3, [pc, #84]	; (8009674 <DAC_VAL+0x374>)
 800961e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009622:	4b15      	ldr	r3, [pc, #84]	; (8009678 <DAC_VAL+0x378>)
 8009624:	801a      	strh	r2, [r3, #0]
		break;
 8009626:	e01d      	b.n	8009664 <DAC_VAL+0x364>
		case 56:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_56;
 8009628:	4b12      	ldr	r3, [pc, #72]	; (8009674 <DAC_VAL+0x374>)
 800962a:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800962e:	4b12      	ldr	r3, [pc, #72]	; (8009678 <DAC_VAL+0x378>)
 8009630:	801a      	strh	r2, [r3, #0]
		break;
 8009632:	e017      	b.n	8009664 <DAC_VAL+0x364>
		case 57:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_57;
 8009634:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <DAC_VAL+0x374>)
 8009636:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800963a:	4b0f      	ldr	r3, [pc, #60]	; (8009678 <DAC_VAL+0x378>)
 800963c:	801a      	strh	r2, [r3, #0]
		break;
 800963e:	e011      	b.n	8009664 <DAC_VAL+0x364>
		case 58:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_58;
 8009640:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <DAC_VAL+0x374>)
 8009642:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009646:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <DAC_VAL+0x378>)
 8009648:	801a      	strh	r2, [r3, #0]
		break;
 800964a:	e00b      	b.n	8009664 <DAC_VAL+0x364>
		case 59:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_59;
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <DAC_VAL+0x374>)
 800964e:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8009652:	4b09      	ldr	r3, [pc, #36]	; (8009678 <DAC_VAL+0x378>)
 8009654:	801a      	strh	r2, [r3, #0]
		break;
 8009656:	e005      	b.n	8009664 <DAC_VAL+0x364>
		case 60:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_60;
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <DAC_VAL+0x374>)
 800965a:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 800965e:	4b06      	ldr	r3, [pc, #24]	; (8009678 <DAC_VAL+0x378>)
 8009660:	801a      	strh	r2, [r3, #0]
		break;
 8009662:	bf00      	nop
	}

	return DAC_VALUE;
 8009664:	4b04      	ldr	r3, [pc, #16]	; (8009678 <DAC_VAL+0x378>)
 8009666:	881b      	ldrh	r3, [r3, #0]
}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	20013bd4 	.word	0x20013bd4
 8009678:	200142f4 	.word	0x200142f4

0800967c <Change_DAC_Values>:




void Change_DAC_Values(uint8_t Set_Value,uint16_t Blower_Value)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	460a      	mov	r2, r1
 8009686:	71fb      	strb	r3, [r7, #7]
 8009688:	4613      	mov	r3, r2
 800968a:	80bb      	strh	r3, [r7, #4]
	switch(Set_Value)
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	3b05      	subs	r3, #5
 8009690:	2b37      	cmp	r3, #55	; 0x37
 8009692:	f200 816b 	bhi.w	800996c <Change_DAC_Values+0x2f0>
 8009696:	a201      	add	r2, pc, #4	; (adr r2, 800969c <Change_DAC_Values+0x20>)
 8009698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969c:	0800977d 	.word	0x0800977d
 80096a0:	08009785 	.word	0x08009785
 80096a4:	0800978d 	.word	0x0800978d
 80096a8:	08009795 	.word	0x08009795
 80096ac:	0800979d 	.word	0x0800979d
 80096b0:	080097a5 	.word	0x080097a5
 80096b4:	080097ad 	.word	0x080097ad
 80096b8:	080097b5 	.word	0x080097b5
 80096bc:	080097bd 	.word	0x080097bd
 80096c0:	080097c5 	.word	0x080097c5
 80096c4:	080097cd 	.word	0x080097cd
 80096c8:	080097d5 	.word	0x080097d5
 80096cc:	080097dd 	.word	0x080097dd
 80096d0:	080097e5 	.word	0x080097e5
 80096d4:	080097ed 	.word	0x080097ed
 80096d8:	080097f5 	.word	0x080097f5
 80096dc:	080097fd 	.word	0x080097fd
 80096e0:	08009805 	.word	0x08009805
 80096e4:	0800980d 	.word	0x0800980d
 80096e8:	08009815 	.word	0x08009815
 80096ec:	0800981d 	.word	0x0800981d
 80096f0:	08009825 	.word	0x08009825
 80096f4:	0800982d 	.word	0x0800982d
 80096f8:	08009835 	.word	0x08009835
 80096fc:	0800983d 	.word	0x0800983d
 8009700:	08009845 	.word	0x08009845
 8009704:	0800984d 	.word	0x0800984d
 8009708:	08009855 	.word	0x08009855
 800970c:	0800985d 	.word	0x0800985d
 8009710:	08009865 	.word	0x08009865
 8009714:	0800986d 	.word	0x0800986d
 8009718:	08009875 	.word	0x08009875
 800971c:	0800987d 	.word	0x0800987d
 8009720:	08009887 	.word	0x08009887
 8009724:	08009891 	.word	0x08009891
 8009728:	0800989b 	.word	0x0800989b
 800972c:	080098a5 	.word	0x080098a5
 8009730:	080098af 	.word	0x080098af
 8009734:	080098b9 	.word	0x080098b9
 8009738:	080098c3 	.word	0x080098c3
 800973c:	080098cd 	.word	0x080098cd
 8009740:	080098d7 	.word	0x080098d7
 8009744:	080098e1 	.word	0x080098e1
 8009748:	080098eb 	.word	0x080098eb
 800974c:	080098f5 	.word	0x080098f5
 8009750:	080098ff 	.word	0x080098ff
 8009754:	08009909 	.word	0x08009909
 8009758:	08009913 	.word	0x08009913
 800975c:	0800991d 	.word	0x0800991d
 8009760:	08009927 	.word	0x08009927
 8009764:	08009931 	.word	0x08009931
 8009768:	0800993b 	.word	0x0800993b
 800976c:	08009945 	.word	0x08009945
 8009770:	0800994f 	.word	0x0800994f
 8009774:	08009959 	.word	0x08009959
 8009778:	08009963 	.word	0x08009963
	{
	    case 5:
	    	 DAC_SIGNALS.DAC_VALUE_5   =Blower_Value;
 800977c:	4a7e      	ldr	r2, [pc, #504]	; (8009978 <Change_DAC_Values+0x2fc>)
 800977e:	88bb      	ldrh	r3, [r7, #4]
 8009780:	8013      	strh	r3, [r2, #0]
	    break;
 8009782:	e0f3      	b.n	800996c <Change_DAC_Values+0x2f0>
	    case 6:
	    	 DAC_SIGNALS.DAC_VALUE_6   =Blower_Value;
 8009784:	4a7c      	ldr	r2, [pc, #496]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009786:	88bb      	ldrh	r3, [r7, #4]
 8009788:	8053      	strh	r3, [r2, #2]
	    break;
 800978a:	e0ef      	b.n	800996c <Change_DAC_Values+0x2f0>
	    case 7:
			 DAC_SIGNALS.DAC_VALUE_7   =Blower_Value;
 800978c:	4a7a      	ldr	r2, [pc, #488]	; (8009978 <Change_DAC_Values+0x2fc>)
 800978e:	88bb      	ldrh	r3, [r7, #4]
 8009790:	8093      	strh	r3, [r2, #4]
		break;
 8009792:	e0eb      	b.n	800996c <Change_DAC_Values+0x2f0>
	    case 8:
			 DAC_SIGNALS.DAC_VALUE_8   =Blower_Value;
 8009794:	4a78      	ldr	r2, [pc, #480]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009796:	88bb      	ldrh	r3, [r7, #4]
 8009798:	80d3      	strh	r3, [r2, #6]
		break;
 800979a:	e0e7      	b.n	800996c <Change_DAC_Values+0x2f0>
	    case 9:
			 DAC_SIGNALS.DAC_VALUE_9   =Blower_Value;
 800979c:	4a76      	ldr	r2, [pc, #472]	; (8009978 <Change_DAC_Values+0x2fc>)
 800979e:	88bb      	ldrh	r3, [r7, #4]
 80097a0:	8113      	strh	r3, [r2, #8]
		break;
 80097a2:	e0e3      	b.n	800996c <Change_DAC_Values+0x2f0>
	    case 10:
			 DAC_SIGNALS.DAC_VALUE_10  =Blower_Value;
 80097a4:	4a74      	ldr	r2, [pc, #464]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097a6:	88bb      	ldrh	r3, [r7, #4]
 80097a8:	8153      	strh	r3, [r2, #10]
		break;
 80097aa:	e0df      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 11:
			 DAC_SIGNALS.DAC_VALUE_11  =Blower_Value;
 80097ac:	4a72      	ldr	r2, [pc, #456]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097ae:	88bb      	ldrh	r3, [r7, #4]
 80097b0:	8193      	strh	r3, [r2, #12]
		break;
 80097b2:	e0db      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 12:
			 DAC_SIGNALS.DAC_VALUE_12  =Blower_Value;
 80097b4:	4a70      	ldr	r2, [pc, #448]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097b6:	88bb      	ldrh	r3, [r7, #4]
 80097b8:	81d3      	strh	r3, [r2, #14]
		break;
 80097ba:	e0d7      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 13:
			 DAC_SIGNALS.DAC_VALUE_13  =Blower_Value;
 80097bc:	4a6e      	ldr	r2, [pc, #440]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097be:	88bb      	ldrh	r3, [r7, #4]
 80097c0:	8213      	strh	r3, [r2, #16]
		break;
 80097c2:	e0d3      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 14:
			 DAC_SIGNALS.DAC_VALUE_14  =Blower_Value;
 80097c4:	4a6c      	ldr	r2, [pc, #432]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097c6:	88bb      	ldrh	r3, [r7, #4]
 80097c8:	8253      	strh	r3, [r2, #18]
		break;
 80097ca:	e0cf      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 15:
			 DAC_SIGNALS.DAC_VALUE_15  =Blower_Value;
 80097cc:	4a6a      	ldr	r2, [pc, #424]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097ce:	88bb      	ldrh	r3, [r7, #4]
 80097d0:	8293      	strh	r3, [r2, #20]
		break;
 80097d2:	e0cb      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 16:
			 DAC_SIGNALS.DAC_VALUE_16  =Blower_Value;
 80097d4:	4a68      	ldr	r2, [pc, #416]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097d6:	88bb      	ldrh	r3, [r7, #4]
 80097d8:	82d3      	strh	r3, [r2, #22]
		break;
 80097da:	e0c7      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 17:
			 DAC_SIGNALS.DAC_VALUE_17  =Blower_Value;
 80097dc:	4a66      	ldr	r2, [pc, #408]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097de:	88bb      	ldrh	r3, [r7, #4]
 80097e0:	8313      	strh	r3, [r2, #24]
		break;
 80097e2:	e0c3      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 18:
			 DAC_SIGNALS.DAC_VALUE_18  =Blower_Value;
 80097e4:	4a64      	ldr	r2, [pc, #400]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097e6:	88bb      	ldrh	r3, [r7, #4]
 80097e8:	8353      	strh	r3, [r2, #26]
		break;
 80097ea:	e0bf      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 19:
			 DAC_SIGNALS.DAC_VALUE_19  =Blower_Value;
 80097ec:	4a62      	ldr	r2, [pc, #392]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097ee:	88bb      	ldrh	r3, [r7, #4]
 80097f0:	8393      	strh	r3, [r2, #28]
		break;
 80097f2:	e0bb      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 20:
			 DAC_SIGNALS.DAC_VALUE_20  =Blower_Value;
 80097f4:	4a60      	ldr	r2, [pc, #384]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097f6:	88bb      	ldrh	r3, [r7, #4]
 80097f8:	83d3      	strh	r3, [r2, #30]
		break;
 80097fa:	e0b7      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 21:
			 DAC_SIGNALS.DAC_VALUE_21  =Blower_Value;
 80097fc:	4a5e      	ldr	r2, [pc, #376]	; (8009978 <Change_DAC_Values+0x2fc>)
 80097fe:	88bb      	ldrh	r3, [r7, #4]
 8009800:	8413      	strh	r3, [r2, #32]
		break;
 8009802:	e0b3      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 22:
			 DAC_SIGNALS.DAC_VALUE_22  =Blower_Value;
 8009804:	4a5c      	ldr	r2, [pc, #368]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009806:	88bb      	ldrh	r3, [r7, #4]
 8009808:	8453      	strh	r3, [r2, #34]	; 0x22
		break;
 800980a:	e0af      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 23:
			 DAC_SIGNALS.DAC_VALUE_23  =Blower_Value;
 800980c:	4a5a      	ldr	r2, [pc, #360]	; (8009978 <Change_DAC_Values+0x2fc>)
 800980e:	88bb      	ldrh	r3, [r7, #4]
 8009810:	8493      	strh	r3, [r2, #36]	; 0x24
		break;
 8009812:	e0ab      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 24:
			 DAC_SIGNALS.DAC_VALUE_24  =Blower_Value;
 8009814:	4a58      	ldr	r2, [pc, #352]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009816:	88bb      	ldrh	r3, [r7, #4]
 8009818:	84d3      	strh	r3, [r2, #38]	; 0x26
		break;
 800981a:	e0a7      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 25:
			 DAC_SIGNALS.DAC_VALUE_25  =Blower_Value;
 800981c:	4a56      	ldr	r2, [pc, #344]	; (8009978 <Change_DAC_Values+0x2fc>)
 800981e:	88bb      	ldrh	r3, [r7, #4]
 8009820:	8513      	strh	r3, [r2, #40]	; 0x28
		break;
 8009822:	e0a3      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 26:
			 DAC_SIGNALS.DAC_VALUE_26  =Blower_Value;
 8009824:	4a54      	ldr	r2, [pc, #336]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009826:	88bb      	ldrh	r3, [r7, #4]
 8009828:	8553      	strh	r3, [r2, #42]	; 0x2a
		break;
 800982a:	e09f      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 27:
			 DAC_SIGNALS.DAC_VALUE_27  =Blower_Value;
 800982c:	4a52      	ldr	r2, [pc, #328]	; (8009978 <Change_DAC_Values+0x2fc>)
 800982e:	88bb      	ldrh	r3, [r7, #4]
 8009830:	8593      	strh	r3, [r2, #44]	; 0x2c
		break;
 8009832:	e09b      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 28:
			 DAC_SIGNALS.DAC_VALUE_28  =Blower_Value;
 8009834:	4a50      	ldr	r2, [pc, #320]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009836:	88bb      	ldrh	r3, [r7, #4]
 8009838:	85d3      	strh	r3, [r2, #46]	; 0x2e
		break;
 800983a:	e097      	b.n	800996c <Change_DAC_Values+0x2f0>
	    case 29:
			 DAC_SIGNALS.DAC_VALUE_29  =Blower_Value;
 800983c:	4a4e      	ldr	r2, [pc, #312]	; (8009978 <Change_DAC_Values+0x2fc>)
 800983e:	88bb      	ldrh	r3, [r7, #4]
 8009840:	8613      	strh	r3, [r2, #48]	; 0x30
		break;
 8009842:	e093      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 30:
			 DAC_SIGNALS.DAC_VALUE_30  =Blower_Value;
 8009844:	4a4c      	ldr	r2, [pc, #304]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009846:	88bb      	ldrh	r3, [r7, #4]
 8009848:	8653      	strh	r3, [r2, #50]	; 0x32
		break;
 800984a:	e08f      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 31:
			 DAC_SIGNALS.DAC_VALUE_31  =Blower_Value;
 800984c:	4a4a      	ldr	r2, [pc, #296]	; (8009978 <Change_DAC_Values+0x2fc>)
 800984e:	88bb      	ldrh	r3, [r7, #4]
 8009850:	8693      	strh	r3, [r2, #52]	; 0x34
		break;
 8009852:	e08b      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 32:
			 DAC_SIGNALS.DAC_VALUE_32  =Blower_Value;
 8009854:	4a48      	ldr	r2, [pc, #288]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009856:	88bb      	ldrh	r3, [r7, #4]
 8009858:	86d3      	strh	r3, [r2, #54]	; 0x36
		break;
 800985a:	e087      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 33:
			 DAC_SIGNALS.DAC_VALUE_33  =Blower_Value;
 800985c:	4a46      	ldr	r2, [pc, #280]	; (8009978 <Change_DAC_Values+0x2fc>)
 800985e:	88bb      	ldrh	r3, [r7, #4]
 8009860:	8713      	strh	r3, [r2, #56]	; 0x38
		break;
 8009862:	e083      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 34:
			 DAC_SIGNALS.DAC_VALUE_34  =Blower_Value;
 8009864:	4a44      	ldr	r2, [pc, #272]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009866:	88bb      	ldrh	r3, [r7, #4]
 8009868:	8753      	strh	r3, [r2, #58]	; 0x3a
		break;
 800986a:	e07f      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 35:
			 DAC_SIGNALS.DAC_VALUE_35  =Blower_Value;
 800986c:	4a42      	ldr	r2, [pc, #264]	; (8009978 <Change_DAC_Values+0x2fc>)
 800986e:	88bb      	ldrh	r3, [r7, #4]
 8009870:	8793      	strh	r3, [r2, #60]	; 0x3c
		break;
 8009872:	e07b      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 36:
			 DAC_SIGNALS.DAC_VALUE_36  =Blower_Value;
 8009874:	4a40      	ldr	r2, [pc, #256]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009876:	88bb      	ldrh	r3, [r7, #4]
 8009878:	87d3      	strh	r3, [r2, #62]	; 0x3e
		break;
 800987a:	e077      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 37:
			 DAC_SIGNALS.DAC_VALUE_37  =Blower_Value;
 800987c:	4a3e      	ldr	r2, [pc, #248]	; (8009978 <Change_DAC_Values+0x2fc>)
 800987e:	88bb      	ldrh	r3, [r7, #4]
 8009880:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		break;
 8009884:	e072      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 38:
			 DAC_SIGNALS.DAC_VALUE_38  =Blower_Value;
 8009886:	4a3c      	ldr	r2, [pc, #240]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009888:	88bb      	ldrh	r3, [r7, #4]
 800988a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
		break;
 800988e:	e06d      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 39:
			 DAC_SIGNALS.DAC_VALUE_39  =Blower_Value;
 8009890:	4a39      	ldr	r2, [pc, #228]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009892:	88bb      	ldrh	r3, [r7, #4]
 8009894:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		break;
 8009898:	e068      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 40:
			 DAC_SIGNALS.DAC_VALUE_40  =Blower_Value;
 800989a:	4a37      	ldr	r2, [pc, #220]	; (8009978 <Change_DAC_Values+0x2fc>)
 800989c:	88bb      	ldrh	r3, [r7, #4]
 800989e:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
		break;
 80098a2:	e063      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 41:
			 DAC_SIGNALS.DAC_VALUE_41  =Blower_Value;
 80098a4:	4a34      	ldr	r2, [pc, #208]	; (8009978 <Change_DAC_Values+0x2fc>)
 80098a6:	88bb      	ldrh	r3, [r7, #4]
 80098a8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
		break;
 80098ac:	e05e      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 42:
			 DAC_SIGNALS.DAC_VALUE_42  =Blower_Value;
 80098ae:	4a32      	ldr	r2, [pc, #200]	; (8009978 <Change_DAC_Values+0x2fc>)
 80098b0:	88bb      	ldrh	r3, [r7, #4]
 80098b2:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
		break;
 80098b6:	e059      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 43:
			 DAC_SIGNALS.DAC_VALUE_43  =Blower_Value;
 80098b8:	4a2f      	ldr	r2, [pc, #188]	; (8009978 <Change_DAC_Values+0x2fc>)
 80098ba:	88bb      	ldrh	r3, [r7, #4]
 80098bc:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
		break;
 80098c0:	e054      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 44:
			 DAC_SIGNALS.DAC_VALUE_44  =Blower_Value;
 80098c2:	4a2d      	ldr	r2, [pc, #180]	; (8009978 <Change_DAC_Values+0x2fc>)
 80098c4:	88bb      	ldrh	r3, [r7, #4]
 80098c6:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
		break;
 80098ca:	e04f      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 45:
			 DAC_SIGNALS.DAC_VALUE_45  =Blower_Value;
 80098cc:	4a2a      	ldr	r2, [pc, #168]	; (8009978 <Change_DAC_Values+0x2fc>)
 80098ce:	88bb      	ldrh	r3, [r7, #4]
 80098d0:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
		break;
 80098d4:	e04a      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 46:
			 DAC_SIGNALS.DAC_VALUE_46  =Blower_Value;
 80098d6:	4a28      	ldr	r2, [pc, #160]	; (8009978 <Change_DAC_Values+0x2fc>)
 80098d8:	88bb      	ldrh	r3, [r7, #4]
 80098da:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
		break;
 80098de:	e045      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 47:
			 DAC_SIGNALS.DAC_VALUE_47  =Blower_Value;
 80098e0:	4a25      	ldr	r2, [pc, #148]	; (8009978 <Change_DAC_Values+0x2fc>)
 80098e2:	88bb      	ldrh	r3, [r7, #4]
 80098e4:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
		break;
 80098e8:	e040      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 48:
			 DAC_SIGNALS.DAC_VALUE_48  =Blower_Value;
 80098ea:	4a23      	ldr	r2, [pc, #140]	; (8009978 <Change_DAC_Values+0x2fc>)
 80098ec:	88bb      	ldrh	r3, [r7, #4]
 80098ee:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
		break;
 80098f2:	e03b      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 49:
			 DAC_SIGNALS.DAC_VALUE_49  =Blower_Value;
 80098f4:	4a20      	ldr	r2, [pc, #128]	; (8009978 <Change_DAC_Values+0x2fc>)
 80098f6:	88bb      	ldrh	r3, [r7, #4]
 80098f8:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
		break;
 80098fc:	e036      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 50:
			 DAC_SIGNALS.DAC_VALUE_50  =Blower_Value;
 80098fe:	4a1e      	ldr	r2, [pc, #120]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009900:	88bb      	ldrh	r3, [r7, #4]
 8009902:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
		break;
 8009906:	e031      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 51:
			 DAC_SIGNALS.DAC_VALUE_51  =Blower_Value;
 8009908:	4a1b      	ldr	r2, [pc, #108]	; (8009978 <Change_DAC_Values+0x2fc>)
 800990a:	88bb      	ldrh	r3, [r7, #4]
 800990c:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
		break;
 8009910:	e02c      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 52:
			 DAC_SIGNALS.DAC_VALUE_52  =Blower_Value;
 8009912:	4a19      	ldr	r2, [pc, #100]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009914:	88bb      	ldrh	r3, [r7, #4]
 8009916:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		break;
 800991a:	e027      	b.n	800996c <Change_DAC_Values+0x2f0>
	    case 53:
			 DAC_SIGNALS.DAC_VALUE_53  =Blower_Value;
 800991c:	4a16      	ldr	r2, [pc, #88]	; (8009978 <Change_DAC_Values+0x2fc>)
 800991e:	88bb      	ldrh	r3, [r7, #4]
 8009920:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
		break;
 8009924:	e022      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 54:
			 DAC_SIGNALS.DAC_VALUE_54  =Blower_Value;
 8009926:	4a14      	ldr	r2, [pc, #80]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009928:	88bb      	ldrh	r3, [r7, #4]
 800992a:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		break;
 800992e:	e01d      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 55:
			 DAC_SIGNALS.DAC_VALUE_55  =Blower_Value;
 8009930:	4a11      	ldr	r2, [pc, #68]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009932:	88bb      	ldrh	r3, [r7, #4]
 8009934:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		break;
 8009938:	e018      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 56:
			 DAC_SIGNALS.DAC_VALUE_56  =Blower_Value;
 800993a:	4a0f      	ldr	r2, [pc, #60]	; (8009978 <Change_DAC_Values+0x2fc>)
 800993c:	88bb      	ldrh	r3, [r7, #4]
 800993e:	f8a2 3066 	strh.w	r3, [r2, #102]	; 0x66
		break;
 8009942:	e013      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 57:
			 DAC_SIGNALS.DAC_VALUE_57  =Blower_Value;
 8009944:	4a0c      	ldr	r2, [pc, #48]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009946:	88bb      	ldrh	r3, [r7, #4]
 8009948:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
		break;
 800994c:	e00e      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 58:
			 DAC_SIGNALS.DAC_VALUE_58  =Blower_Value;
 800994e:	4a0a      	ldr	r2, [pc, #40]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009950:	88bb      	ldrh	r3, [r7, #4]
 8009952:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		break;
 8009956:	e009      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 59:
			 DAC_SIGNALS.DAC_VALUE_59  =Blower_Value;
 8009958:	4a07      	ldr	r2, [pc, #28]	; (8009978 <Change_DAC_Values+0x2fc>)
 800995a:	88bb      	ldrh	r3, [r7, #4]
 800995c:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
		break;
 8009960:	e004      	b.n	800996c <Change_DAC_Values+0x2f0>
		case 60:
			 DAC_SIGNALS.DAC_VALUE_60  =Blower_Value;
 8009962:	4a05      	ldr	r2, [pc, #20]	; (8009978 <Change_DAC_Values+0x2fc>)
 8009964:	88bb      	ldrh	r3, [r7, #4]
 8009966:	f8a2 306e 	strh.w	r3, [r2, #110]	; 0x6e
		break;
 800996a:	bf00      	nop
	}

}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	20013bd4 	.word	0x20013bd4

0800997c <Mode_Initial_Flag_Set_Task>:




void Mode_Initial_Flag_Set_Task (void *argument)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
	while(1)
	{
		One_Minite_Or_60000_Ms  = 60000;
 8009984:	4b2b      	ldr	r3, [pc, #172]	; (8009a34 <Mode_Initial_Flag_Set_Task+0xb8>)
 8009986:	f64e 2260 	movw	r2, #60000	; 0xea60
 800998a:	801a      	strh	r2, [r3, #0]
		Breath                  = 0;
 800998c:	4b2a      	ldr	r3, [pc, #168]	; (8009a38 <Mode_Initial_Flag_Set_Task+0xbc>)
 800998e:	2200      	movs	r2, #0
 8009990:	701a      	strb	r2, [r3, #0]
		Breath_Count            = Leave_Count_The_Breath;
 8009992:	4b2a      	ldr	r3, [pc, #168]	; (8009a3c <Mode_Initial_Flag_Set_Task+0xc0>)
 8009994:	2200      	movs	r2, #0
 8009996:	701a      	strb	r2, [r3, #0]
		switch (Mode_Initial_Flag_Set)
 8009998:	4b29      	ldr	r3, [pc, #164]	; (8009a40 <Mode_Initial_Flag_Set_Task+0xc4>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d139      	bne.n	8009a14 <Mode_Initial_Flag_Set_Task+0x98>
		{
			case OPEN:
				switch(Mode)
 80099a0:	4b28      	ldr	r3, [pc, #160]	; (8009a44 <Mode_Initial_Flag_Set_Task+0xc8>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	2b0b      	cmp	r3, #11
 80099a8:	d832      	bhi.n	8009a10 <Mode_Initial_Flag_Set_Task+0x94>
 80099aa:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <Mode_Initial_Flag_Set_Task+0x34>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	080099e1 	.word	0x080099e1
 80099b4:	080099e7 	.word	0x080099e7
 80099b8:	08009a11 	.word	0x08009a11
 80099bc:	08009a0b 	.word	0x08009a0b
 80099c0:	080099ed 	.word	0x080099ed
 80099c4:	080099f3 	.word	0x080099f3
 80099c8:	080099f9 	.word	0x080099f9
 80099cc:	08009a11 	.word	0x08009a11
 80099d0:	08009a11 	.word	0x08009a11
 80099d4:	08009a11 	.word	0x08009a11
 80099d8:	080099ff 	.word	0x080099ff
 80099dc:	08009a05 	.word	0x08009a05
				{
					case Pccmv:
						PC_CMV_Initial_Flags_SET();
 80099e0:	f000 f836 	bl	8009a50 <PC_CMV_Initial_Flags_SET>
					break;
 80099e4:	e015      	b.n	8009a12 <Mode_Initial_Flag_Set_Task+0x96>
					case Vccmv:
						VC_CMV_Initial_Flags_SET();
 80099e6:	f000 f98d 	bl	8009d04 <VC_CMV_Initial_Flags_SET>
					break;
 80099ea:	e012      	b.n	8009a12 <Mode_Initial_Flag_Set_Task+0x96>
					case Pcsimv:
						PC_SIMV_Initial_Flags_SET();
 80099ec:	f000 fa9a 	bl	8009f24 <PC_SIMV_Initial_Flags_SET>
					break;
 80099f0:	e00f      	b.n	8009a12 <Mode_Initial_Flag_Set_Task+0x96>
					case Vcsimv:
						VC_SIMV_Initial_Flags_SET();
 80099f2:	f000 fc27 	bl	800a244 <VC_SIMV_Initial_Flags_SET>
					break;
 80099f6:	e00c      	b.n	8009a12 <Mode_Initial_Flag_Set_Task+0x96>
					case Psv:
						PSV_Initial_Flags_SET();
 80099f8:	f000 fd6a 	bl	800a4d0 <PSV_Initial_Flags_SET>
					break;
 80099fc:	e009      	b.n	8009a12 <Mode_Initial_Flag_Set_Task+0x96>
					case Cpap:
						CPAP_Initial_Flags_SET();
 80099fe:	f000 fe61 	bl	800a6c4 <CPAP_Initial_Flags_SET>
					break;
 8009a02:	e006      	b.n	8009a12 <Mode_Initial_Flag_Set_Task+0x96>
					case BiPap:
						BIBAP_Initial_Flags_SET();
 8009a04:	f000 ff52 	bl	800a8ac <BIBAP_Initial_Flags_SET>
					break;
 8009a08:	e003      	b.n	8009a12 <Mode_Initial_Flag_Set_Task+0x96>
					case Aprv:
						APRV_Initial_Flags_SET();
 8009a0a:	f001 f849 	bl	800aaa0 <APRV_Initial_Flags_SET>
					break;
 8009a0e:	e000      	b.n	8009a12 <Mode_Initial_Flag_Set_Task+0x96>
					default:
					break;
 8009a10:	bf00      	nop
				}
			break;
 8009a12:	e000      	b.n	8009a16 <Mode_Initial_Flag_Set_Task+0x9a>
			default:
			break;
 8009a14:	bf00      	nop
		}



		switch (Back_Up_Mode_Initial_Flag_Set)
 8009a16:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <Mode_Initial_Flag_Set_Task+0xcc>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d108      	bne.n	8009a30 <Mode_Initial_Flag_Set_Task+0xb4>
		{
			case OPEN:
				switch(Current_Backup_Mode)
 8009a1e:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <Mode_Initial_Flag_Set_Task+0xd0>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d102      	bne.n	8009a2c <Mode_Initial_Flag_Set_Task+0xb0>
				{
					case Backup_PCCMV_Mode:
						Backup_PC_CMV_Initial_Flags_SET();
 8009a26:	f001 f917 	bl	800ac58 <Backup_PC_CMV_Initial_Flags_SET>
					break;
 8009a2a:	e000      	b.n	8009a2e <Mode_Initial_Flag_Set_Task+0xb2>
					default:
					break;
 8009a2c:	bf00      	nop
				}
			break;
 8009a2e:	e000      	b.n	8009a32 <Mode_Initial_Flag_Set_Task+0xb6>
			default:
			break;
 8009a30:	bf00      	nop
		One_Minite_Or_60000_Ms  = 60000;
 8009a32:	e7a7      	b.n	8009984 <Mode_Initial_Flag_Set_Task+0x8>
 8009a34:	20013fa6 	.word	0x20013fa6
 8009a38:	20014069 	.word	0x20014069
 8009a3c:	200139a6 	.word	0x200139a6
 8009a40:	20014338 	.word	0x20014338
 8009a44:	20013d48 	.word	0x20013d48
 8009a48:	20013f5d 	.word	0x20013f5d
 8009a4c:	20013f74 	.word	0x20013f74

08009a50 <PC_CMV_Initial_Flags_SET>:
	}
}


void PC_CMV_Initial_Flags_SET()
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
	LED_STATUS = Idle_LED;
 8009a54:	4b82      	ldr	r3, [pc, #520]	; (8009c60 <PC_CMV_Initial_Flags_SET+0x210>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                                  = APRV_IDLE;
 8009a5a:	4b82      	ldr	r3, [pc, #520]	; (8009c64 <PC_CMV_Initial_Flags_SET+0x214>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                                     = APRV_Idle;
 8009a60:	4b81      	ldr	r3, [pc, #516]	; (8009c68 <PC_CMV_Initial_Flags_SET+0x218>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PIP_Val                        = PC_CMV.PIP_Val;
 8009a66:	4b81      	ldr	r3, [pc, #516]	; (8009c6c <PC_CMV_Initial_Flags_SET+0x21c>)
 8009a68:	781a      	ldrb	r2, [r3, #0]
 8009a6a:	4b81      	ldr	r3, [pc, #516]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009a6c:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = PC_CMV.PEEP_Val;
 8009a6e:	4b7f      	ldr	r3, [pc, #508]	; (8009c6c <PC_CMV_Initial_Flags_SET+0x21c>)
 8009a70:	785a      	ldrb	r2, [r3, #1]
 8009a72:	4b7f      	ldr	r3, [pc, #508]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009a74:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = PC_CMV.RESPIRATORY_RATE_Val;
 8009a76:	4b7d      	ldr	r3, [pc, #500]	; (8009c6c <PC_CMV_Initial_Flags_SET+0x21c>)
 8009a78:	789a      	ldrb	r2, [r3, #2]
 8009a7a:	4b7d      	ldr	r3, [pc, #500]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009a7c:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = PC_CMV.FIO2_Val;
 8009a7e:	4b7b      	ldr	r3, [pc, #492]	; (8009c6c <PC_CMV_Initial_Flags_SET+0x21c>)
 8009a80:	78da      	ldrb	r2, [r3, #3]
 8009a82:	4b7b      	ldr	r3, [pc, #492]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009a84:	70da      	strb	r2, [r3, #3]
	Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 8009a86:	4b7b      	ldr	r3, [pc, #492]	; (8009c74 <PC_CMV_Initial_Flags_SET+0x224>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			              = OPENED;
 8009a8c:	4b7a      	ldr	r3, [pc, #488]	; (8009c78 <PC_CMV_Initial_Flags_SET+0x228>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Temp                     = (PC_CMV.PEEP_Val / 2);
 8009a92:	4b76      	ldr	r3, [pc, #472]	; (8009c6c <PC_CMV_Initial_Flags_SET+0x21c>)
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	085b      	lsrs	r3, r3, #1
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aa2:	4b76      	ldr	r3, [pc, #472]	; (8009c7c <PC_CMV_Initial_Flags_SET+0x22c>)
 8009aa4:	edc3 7a00 	vstr	s15, [r3]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    = 0;
 8009aa8:	4b74      	ldr	r3, [pc, #464]	; (8009c7c <PC_CMV_Initial_Flags_SET+0x22c>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	809a      	strh	r2, [r3, #4]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 8009aae:	4b73      	ldr	r3, [pc, #460]	; (8009c7c <PC_CMV_Initial_Flags_SET+0x22c>)
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8009ab4:	4b71      	ldr	r3, [pc, #452]	; (8009c7c <PC_CMV_Initial_Flags_SET+0x22c>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	60da      	str	r2, [r3, #12]
    Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(PC_CMV.PIP_Val);
 8009aba:	4b6c      	ldr	r3, [pc, #432]	; (8009c6c <PC_CMV_Initial_Flags_SET+0x21c>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fc1e 	bl	8009300 <DAC_VAL>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4b6d      	ldr	r3, [pc, #436]	; (8009c80 <PC_CMV_Initial_Flags_SET+0x230>)
 8009aca:	811a      	strh	r2, [r3, #8]
	if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 8009acc:	4b68      	ldr	r3, [pc, #416]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	2b1d      	cmp	r3, #29
 8009ad2:	d80a      	bhi.n	8009aea <PC_CMV_Initial_Flags_SET+0x9a>
 8009ad4:	4b66      	ldr	r3, [pc, #408]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009ad6:	785b      	ldrb	r3, [r3, #1]
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	d806      	bhi.n	8009aea <PC_CMV_Initial_Flags_SET+0x9a>
	{
		PIP_control_Task.PIP_Control_Task_Delay           = 10;
 8009adc:	4b69      	ldr	r3, [pc, #420]	; (8009c84 <PC_CMV_Initial_Flags_SET+0x234>)
 8009ade:	220a      	movs	r2, #10
 8009ae0:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST      = 50;
 8009ae2:	4b68      	ldr	r3, [pc, #416]	; (8009c84 <PC_CMV_Initial_Flags_SET+0x234>)
 8009ae4:	2232      	movs	r2, #50	; 0x32
 8009ae6:	80da      	strh	r2, [r3, #6]
 8009ae8:	e005      	b.n	8009af6 <PC_CMV_Initial_Flags_SET+0xa6>
	}
	else
	{
		PIP_control_Task.PIP_Control_Task_Delay           = 2;
 8009aea:	4b66      	ldr	r3, [pc, #408]	; (8009c84 <PC_CMV_Initial_Flags_SET+0x234>)
 8009aec:	2202      	movs	r2, #2
 8009aee:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST      = 140;
 8009af0:	4b64      	ldr	r3, [pc, #400]	; (8009c84 <PC_CMV_Initial_Flags_SET+0x234>)
 8009af2:	228c      	movs	r2, #140	; 0x8c
 8009af4:	80da      	strh	r2, [r3, #6]
	}
	if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 8009af6:	4b5e      	ldr	r3, [pc, #376]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	2b1d      	cmp	r3, #29
 8009afc:	d807      	bhi.n	8009b0e <PC_CMV_Initial_Flags_SET+0xbe>
 8009afe:	4b5c      	ldr	r3, [pc, #368]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009b00:	785b      	ldrb	r3, [r3, #1]
 8009b02:	2b08      	cmp	r3, #8
 8009b04:	d803      	bhi.n	8009b0e <PC_CMV_Initial_Flags_SET+0xbe>
	{
	    PC_CMV.RISE_TIME_MS_Val = 800;
 8009b06:	4b59      	ldr	r3, [pc, #356]	; (8009c6c <PC_CMV_Initial_Flags_SET+0x21c>)
 8009b08:	4a5f      	ldr	r2, [pc, #380]	; (8009c88 <PC_CMV_Initial_Flags_SET+0x238>)
 8009b0a:	605a      	str	r2, [r3, #4]
 8009b0c:	e006      	b.n	8009b1c <PC_CMV_Initial_Flags_SET+0xcc>
	}
	else if((Common_Mode_Parameter._PEEP_Val < 9))
 8009b0e:	4b58      	ldr	r3, [pc, #352]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009b10:	785b      	ldrb	r3, [r3, #1]
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	d802      	bhi.n	8009b1c <PC_CMV_Initial_Flags_SET+0xcc>
	{
		PC_CMV.RISE_TIME_MS_Val = 600;
 8009b16:	4b55      	ldr	r3, [pc, #340]	; (8009c6c <PC_CMV_Initial_Flags_SET+0x21c>)
 8009b18:	4a5c      	ldr	r2, [pc, #368]	; (8009c8c <PC_CMV_Initial_Flags_SET+0x23c>)
 8009b1a:	605a      	str	r2, [r3, #4]
	}
	Need_PID_Task_Delay                                   = NO;
 8009b1c:	4b5c      	ldr	r3, [pc, #368]	; (8009c90 <PC_CMV_Initial_Flags_SET+0x240>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	701a      	strb	r2, [r3, #0]
	Tune_PID_Task_Delay                                   = T_OPEN;
 8009b22:	4b5c      	ldr	r3, [pc, #368]	; (8009c94 <PC_CMV_Initial_Flags_SET+0x244>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.Low_PIP_Count                        = RESET;
 8009b28:	4b56      	ldr	r3, [pc, #344]	; (8009c84 <PC_CMV_Initial_Flags_SET+0x234>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	729a      	strb	r2, [r3, #10]
	PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 8009b2e:	4b55      	ldr	r3, [pc, #340]	; (8009c84 <PC_CMV_Initial_Flags_SET+0x234>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	725a      	strb	r2, [r3, #9]
	Smooth_Ramp_Time_Val_Count                            = 0;
 8009b34:	4b58      	ldr	r3, [pc, #352]	; (8009c98 <PC_CMV_Initial_Flags_SET+0x248>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]
	Smooth_Ramp_Time_Val                                  = 15;
 8009b3a:	4b58      	ldr	r3, [pc, #352]	; (8009c9c <PC_CMV_Initial_Flags_SET+0x24c>)
 8009b3c:	220f      	movs	r2, #15
 8009b3e:	701a      	strb	r2, [r3, #0]
	if(Common_Mode_Parameter._PEEP_Val >= 15)
 8009b40:	4b4b      	ldr	r3, [pc, #300]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	2b0e      	cmp	r3, #14
 8009b46:	d903      	bls.n	8009b50 <PC_CMV_Initial_Flags_SET+0x100>
	{
	  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 8009b48:	4b55      	ldr	r3, [pc, #340]	; (8009ca0 <PC_CMV_Initial_Flags_SET+0x250>)
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	e00e      	b.n	8009b6e <PC_CMV_Initial_Flags_SET+0x11e>
	}
	else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 8009b50:	4b47      	ldr	r3, [pc, #284]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	2b0e      	cmp	r3, #14
 8009b56:	d807      	bhi.n	8009b68 <PC_CMV_Initial_Flags_SET+0x118>
 8009b58:	4b45      	ldr	r3, [pc, #276]	; (8009c70 <PC_CMV_Initial_Flags_SET+0x220>)
 8009b5a:	785b      	ldrb	r3, [r3, #1]
 8009b5c:	2b08      	cmp	r3, #8
 8009b5e:	d903      	bls.n	8009b68 <PC_CMV_Initial_Flags_SET+0x118>
	{
	  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 8009b60:	4b4f      	ldr	r3, [pc, #316]	; (8009ca0 <PC_CMV_Initial_Flags_SET+0x250>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	e002      	b.n	8009b6e <PC_CMV_Initial_Flags_SET+0x11e>
	}
	else
	{
		Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 8009b68:	4b4d      	ldr	r3, [pc, #308]	; (8009ca0 <PC_CMV_Initial_Flags_SET+0x250>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	701a      	strb	r2, [r3, #0]
	}
    Fio2_Blending_Method = PRESSURE_CONTROLLED;
 8009b6e:	4b4d      	ldr	r3, [pc, #308]	; (8009ca4 <PC_CMV_Initial_Flags_SET+0x254>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]
    O2_Initial_Parameter(PC_CMV.FIO2_Val);
 8009b74:	4b3d      	ldr	r3, [pc, #244]	; (8009c6c <PC_CMV_Initial_Flags_SET+0x21c>)
 8009b76:	78db      	ldrb	r3, [r3, #3]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f001 ff3d 	bl	800b9f8 <O2_Initial_Parameter>
	Alert_Flags_Reset();
 8009b7e:	f7f7 fa8d 	bl	800109c <Alert_Flags_Reset>
	Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 8009b82:	4b49      	ldr	r3, [pc, #292]	; (8009ca8 <PC_CMV_Initial_Flags_SET+0x258>)
 8009b84:	2201      	movs	r2, #1
 8009b86:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                             = Run_Expiration_Cycle;
 8009b88:	4b48      	ldr	r3, [pc, #288]	; (8009cac <PC_CMV_Initial_Flags_SET+0x25c>)
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	701a      	strb	r2, [r3, #0]
	Back_Up_Mode_Initial_Flag_Set                         = CLOSE;
 8009b8e:	4b48      	ldr	r3, [pc, #288]	; (8009cb0 <PC_CMV_Initial_Flags_SET+0x260>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set                                 = CLOSE;
 8009b94:	4b47      	ldr	r3, [pc, #284]	; (8009cb4 <PC_CMV_Initial_Flags_SET+0x264>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	701a      	strb	r2, [r3, #0]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 8009b9a:	f001 fa45 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskSuspend(Vc_Cmv_Handler);
 8009b9e:	4b46      	ldr	r3, [pc, #280]	; (8009cb8 <PC_CMV_Initial_Flags_SET+0x268>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f015 fb76 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 8009ba8:	4b44      	ldr	r3, [pc, #272]	; (8009cbc <PC_CMV_Initial_Flags_SET+0x26c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f015 fb71 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 8009bb2:	4b43      	ldr	r3, [pc, #268]	; (8009cc0 <PC_CMV_Initial_Flags_SET+0x270>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f015 fb6c 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 8009bbc:	4b41      	ldr	r3, [pc, #260]	; (8009cc4 <PC_CMV_Initial_Flags_SET+0x274>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f015 fb67 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 8009bc6:	4b40      	ldr	r3, [pc, #256]	; (8009cc8 <PC_CMV_Initial_Flags_SET+0x278>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f015 fb62 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 8009bd0:	4b3e      	ldr	r3, [pc, #248]	; (8009ccc <PC_CMV_Initial_Flags_SET+0x27c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f015 fb5d 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 8009bda:	4b3d      	ldr	r3, [pc, #244]	; (8009cd0 <PC_CMV_Initial_Flags_SET+0x280>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f015 fb58 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 8009be4:	4b3b      	ldr	r3, [pc, #236]	; (8009cd4 <PC_CMV_Initial_Flags_SET+0x284>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f015 fb53 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 8009bee:	4b3a      	ldr	r3, [pc, #232]	; (8009cd8 <PC_CMV_Initial_Flags_SET+0x288>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f015 fb4e 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 8009bf8:	4b38      	ldr	r3, [pc, #224]	; (8009cdc <PC_CMV_Initial_Flags_SET+0x28c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f015 fb49 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 8009c02:	4b37      	ldr	r3, [pc, #220]	; (8009ce0 <PC_CMV_Initial_Flags_SET+0x290>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f015 fb44 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 8009c0c:	4b35      	ldr	r3, [pc, #212]	; (8009ce4 <PC_CMV_Initial_Flags_SET+0x294>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f015 fb3f 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 8009c16:	4b34      	ldr	r3, [pc, #208]	; (8009ce8 <PC_CMV_Initial_Flags_SET+0x298>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f015 fb3a 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 8009c20:	4b32      	ldr	r3, [pc, #200]	; (8009cec <PC_CMV_Initial_Flags_SET+0x29c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f015 fb35 	bl	801f294 <vTaskSuspend>
	vTaskResume(Alert_Handler);
 8009c2a:	4b31      	ldr	r3, [pc, #196]	; (8009cf0 <PC_CMV_Initial_Flags_SET+0x2a0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f015 fbf4 	bl	801f41c <vTaskResume>
	vTaskResume(One_Time_Handler);
 8009c34:	4b2f      	ldr	r3, [pc, #188]	; (8009cf4 <PC_CMV_Initial_Flags_SET+0x2a4>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f015 fbef 	bl	801f41c <vTaskResume>
	vTaskResume(Pc_Cmv_Handler);
 8009c3e:	4b2e      	ldr	r3, [pc, #184]	; (8009cf8 <PC_CMV_Initial_Flags_SET+0x2a8>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f015 fbea 	bl	801f41c <vTaskResume>
	vTaskResume(PIP_Control_Task_Handler);
 8009c48:	4b2c      	ldr	r3, [pc, #176]	; (8009cfc <PC_CMV_Initial_Flags_SET+0x2ac>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f015 fbe5 	bl	801f41c <vTaskResume>
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 8009c52:	4b2b      	ldr	r3, [pc, #172]	; (8009d00 <PC_CMV_Initial_Flags_SET+0x2b0>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f015 fb1c 	bl	801f294 <vTaskSuspend>
}
 8009c5c:	bf00      	nop
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20013aed 	.word	0x20013aed
 8009c64:	20013ca8 	.word	0x20013ca8
 8009c68:	200140d8 	.word	0x200140d8
 8009c6c:	200141e4 	.word	0x200141e4
 8009c70:	20013ba4 	.word	0x20013ba4
 8009c74:	200140f5 	.word	0x200140f5
 8009c78:	200140f4 	.word	0x200140f4
 8009c7c:	20014300 	.word	0x20014300
 8009c80:	20014030 	.word	0x20014030
 8009c84:	20013b04 	.word	0x20013b04
 8009c88:	44480000 	.word	0x44480000
 8009c8c:	44160000 	.word	0x44160000
 8009c90:	200140f6 	.word	0x200140f6
 8009c94:	20013c88 	.word	0x20013c88
 8009c98:	200140c1 	.word	0x200140c1
 8009c9c:	20014058 	.word	0x20014058
 8009ca0:	20013b82 	.word	0x20013b82
 8009ca4:	20013aec 	.word	0x20013aec
 8009ca8:	20013d20 	.word	0x20013d20
 8009cac:	20013f7c 	.word	0x20013f7c
 8009cb0:	20013f5d 	.word	0x20013f5d
 8009cb4:	20014338 	.word	0x20014338
 8009cb8:	200142f8 	.word	0x200142f8
 8009cbc:	20013998 	.word	0x20013998
 8009cc0:	20013ca0 	.word	0x20013ca0
 8009cc4:	20014348 	.word	0x20014348
 8009cc8:	200142e0 	.word	0x200142e0
 8009ccc:	20013f58 	.word	0x20013f58
 8009cd0:	20013bb4 	.word	0x20013bb4
 8009cd4:	20013fa8 	.word	0x20013fa8
 8009cd8:	20013f20 	.word	0x20013f20
 8009cdc:	20014374 	.word	0x20014374
 8009ce0:	20013af0 	.word	0x20013af0
 8009ce4:	200141cc 	.word	0x200141cc
 8009ce8:	20013f38 	.word	0x20013f38
 8009cec:	20014148 	.word	0x20014148
 8009cf0:	20014020 	.word	0x20014020
 8009cf4:	20014094 	.word	0x20014094
 8009cf8:	20013f80 	.word	0x20013f80
 8009cfc:	20013ba0 	.word	0x20013ba0
 8009d00:	2001406c 	.word	0x2001406c

08009d04 <VC_CMV_Initial_Flags_SET>:


void VC_CMV_Initial_Flags_SET()
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0
	Reset_Blower_Status();
 8009d08:	f008 fbf4 	bl	80124f4 <Reset_Blower_Status>
	LED_STATUS                                            = Idle_LED;
 8009d0c:	4b5f      	ldr	r3, [pc, #380]	; (8009e8c <VC_CMV_Initial_Flags_SET+0x188>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                                  = APRV_IDLE;
 8009d12:	4b5f      	ldr	r3, [pc, #380]	; (8009e90 <VC_CMV_Initial_Flags_SET+0x18c>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                                     = APRV_Idle;
 8009d18:	4b5e      	ldr	r3, [pc, #376]	; (8009e94 <VC_CMV_Initial_Flags_SET+0x190>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	701a      	strb	r2, [r3, #0]
	Total_Volume_Achieved_Time                            = 500;
 8009d1e:	4b5e      	ldr	r3, [pc, #376]	; (8009e98 <VC_CMV_Initial_Flags_SET+0x194>)
 8009d20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009d24:	801a      	strh	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = VC_CMV.PEEP_Val;
 8009d26:	4b5d      	ldr	r3, [pc, #372]	; (8009e9c <VC_CMV_Initial_Flags_SET+0x198>)
 8009d28:	789a      	ldrb	r2, [r3, #2]
 8009d2a:	4b5d      	ldr	r3, [pc, #372]	; (8009ea0 <VC_CMV_Initial_Flags_SET+0x19c>)
 8009d2c:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = VC_CMV.RESPIRATORY_RATE_Val;
 8009d2e:	4b5b      	ldr	r3, [pc, #364]	; (8009e9c <VC_CMV_Initial_Flags_SET+0x198>)
 8009d30:	78da      	ldrb	r2, [r3, #3]
 8009d32:	4b5b      	ldr	r3, [pc, #364]	; (8009ea0 <VC_CMV_Initial_Flags_SET+0x19c>)
 8009d34:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = VC_CMV.FIO2_Val;
 8009d36:	4b59      	ldr	r3, [pc, #356]	; (8009e9c <VC_CMV_Initial_Flags_SET+0x198>)
 8009d38:	791a      	ldrb	r2, [r3, #4]
 8009d3a:	4b59      	ldr	r3, [pc, #356]	; (8009ea0 <VC_CMV_Initial_Flags_SET+0x19c>)
 8009d3c:	70da      	strb	r2, [r3, #3]
	Common_Mode_Parameter._VOLUME_Val                     = VC_CMV.VOLUME_Val;
 8009d3e:	4b57      	ldr	r3, [pc, #348]	; (8009e9c <VC_CMV_Initial_Flags_SET+0x198>)
 8009d40:	881a      	ldrh	r2, [r3, #0]
 8009d42:	4b57      	ldr	r3, [pc, #348]	; (8009ea0 <VC_CMV_Initial_Flags_SET+0x19c>)
 8009d44:	809a      	strh	r2, [r3, #4]
	Common_Mode_Parameter._FLOW_RATE                      = VC_CMV.FLOW_RATE_Val;
 8009d46:	4b55      	ldr	r3, [pc, #340]	; (8009e9c <VC_CMV_Initial_Flags_SET+0x198>)
 8009d48:	7c9a      	ldrb	r2, [r3, #18]
 8009d4a:	4b55      	ldr	r3, [pc, #340]	; (8009ea0 <VC_CMV_Initial_Flags_SET+0x19c>)
 8009d4c:	719a      	strb	r2, [r3, #6]
	Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 8009d4e:	4b55      	ldr	r3, [pc, #340]	; (8009ea4 <VC_CMV_Initial_Flags_SET+0x1a0>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			              = OPENED;
 8009d54:	4b54      	ldr	r3, [pc, #336]	; (8009ea8 <VC_CMV_Initial_Flags_SET+0x1a4>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	701a      	strb	r2, [r3, #0]
    PEEP_Maintain_Parameter.PEEP_Temp                     = 3;
 8009d5a:	4b54      	ldr	r3, [pc, #336]	; (8009eac <VC_CMV_Initial_Flags_SET+0x1a8>)
 8009d5c:	4a54      	ldr	r2, [pc, #336]	; (8009eb0 <VC_CMV_Initial_Flags_SET+0x1ac>)
 8009d5e:	601a      	str	r2, [r3, #0]
    PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    = 0;
 8009d60:	4b52      	ldr	r3, [pc, #328]	; (8009eac <VC_CMV_Initial_Flags_SET+0x1a8>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	809a      	strh	r2, [r3, #4]
    PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 8009d66:	4b51      	ldr	r3, [pc, #324]	; (8009eac <VC_CMV_Initial_Flags_SET+0x1a8>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	609a      	str	r2, [r3, #8]
    PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8009d6c:	4b4f      	ldr	r3, [pc, #316]	; (8009eac <VC_CMV_Initial_Flags_SET+0x1a8>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	60da      	str	r2, [r3, #12]


	LOW_COMPLIANCE_DAC                                         = LOW_Compliance_DAC_value(Common_Mode_Parameter._FLOW_RATE);
 8009d72:	4b4b      	ldr	r3, [pc, #300]	; (8009ea0 <VC_CMV_Initial_Flags_SET+0x19c>)
 8009d74:	799b      	ldrb	r3, [r3, #6]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f008 fd76 	bl	8012868 <LOW_Compliance_DAC_value>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	461a      	mov	r2, r3
 8009d80:	4b4c      	ldr	r3, [pc, #304]	; (8009eb4 <VC_CMV_Initial_Flags_SET+0x1b0>)
 8009d82:	801a      	strh	r2, [r3, #0]
	Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = LOW_COMPLIANCE_DAC;
 8009d84:	4b4b      	ldr	r3, [pc, #300]	; (8009eb4 <VC_CMV_Initial_Flags_SET+0x1b0>)
 8009d86:	881a      	ldrh	r2, [r3, #0]
 8009d88:	4b4b      	ldr	r3, [pc, #300]	; (8009eb8 <VC_CMV_Initial_Flags_SET+0x1b4>)
 8009d8a:	809a      	strh	r2, [r3, #4]


    Fio2_Blending_Method = VOLUME_CONTROLLED;
 8009d8c:	4b4b      	ldr	r3, [pc, #300]	; (8009ebc <VC_CMV_Initial_Flags_SET+0x1b8>)
 8009d8e:	2201      	movs	r2, #1
 8009d90:	701a      	strb	r2, [r3, #0]
    O2_Initial_Parameter(VC_CMV.FIO2_Val);
 8009d92:	4b42      	ldr	r3, [pc, #264]	; (8009e9c <VC_CMV_Initial_Flags_SET+0x198>)
 8009d94:	791b      	ldrb	r3, [r3, #4]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 fe2e 	bl	800b9f8 <O2_Initial_Parameter>
    INCREMENT_DAC_VAL_PER_ITERATION           = 3;
 8009d9c:	4b48      	ldr	r3, [pc, #288]	; (8009ec0 <VC_CMV_Initial_Flags_SET+0x1bc>)
 8009d9e:	2203      	movs	r2, #3
 8009da0:	701a      	strb	r2, [r3, #0]
	Volume_control_Task.Volume_Stop_Value     = 10;
 8009da2:	4b48      	ldr	r3, [pc, #288]	; (8009ec4 <VC_CMV_Initial_Flags_SET+0x1c0>)
 8009da4:	220a      	movs	r2, #10
 8009da6:	701a      	strb	r2, [r3, #0]
	Alert_Flags_Reset();
 8009da8:	f7f7 f978 	bl	800109c <Alert_Flags_Reset>
	Next_Half_Breath_Cycle                    = Generate_Expiration_Cycle;
 8009dac:	4b46      	ldr	r3, [pc, #280]	; (8009ec8 <VC_CMV_Initial_Flags_SET+0x1c4>)
 8009dae:	2201      	movs	r2, #1
 8009db0:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                 = Run_Expiration_Cycle;
 8009db2:	4b46      	ldr	r3, [pc, #280]	; (8009ecc <VC_CMV_Initial_Flags_SET+0x1c8>)
 8009db4:	2202      	movs	r2, #2
 8009db6:	701a      	strb	r2, [r3, #0]
	Back_Up_Mode_Initial_Flag_Set             = CLOSE;
 8009db8:	4b45      	ldr	r3, [pc, #276]	; (8009ed0 <VC_CMV_Initial_Flags_SET+0x1cc>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set                     = CLOSE;
 8009dbe:	4b45      	ldr	r3, [pc, #276]	; (8009ed4 <VC_CMV_Initial_Flags_SET+0x1d0>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	701a      	strb	r2, [r3, #0]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 8009dc4:	f001 f930 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskSuspend(Pc_Cmv_Handler);
 8009dc8:	4b43      	ldr	r3, [pc, #268]	; (8009ed8 <VC_CMV_Initial_Flags_SET+0x1d4>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f015 fa61 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 8009dd2:	4b42      	ldr	r3, [pc, #264]	; (8009edc <VC_CMV_Initial_Flags_SET+0x1d8>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f015 fa5c 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 8009ddc:	4b40      	ldr	r3, [pc, #256]	; (8009ee0 <VC_CMV_Initial_Flags_SET+0x1dc>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f015 fa57 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 8009de6:	4b3f      	ldr	r3, [pc, #252]	; (8009ee4 <VC_CMV_Initial_Flags_SET+0x1e0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f015 fa52 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 8009df0:	4b3d      	ldr	r3, [pc, #244]	; (8009ee8 <VC_CMV_Initial_Flags_SET+0x1e4>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f015 fa4d 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 8009dfa:	4b3c      	ldr	r3, [pc, #240]	; (8009eec <VC_CMV_Initial_Flags_SET+0x1e8>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f015 fa48 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 8009e04:	4b3a      	ldr	r3, [pc, #232]	; (8009ef0 <VC_CMV_Initial_Flags_SET+0x1ec>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f015 fa43 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 8009e0e:	4b39      	ldr	r3, [pc, #228]	; (8009ef4 <VC_CMV_Initial_Flags_SET+0x1f0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f015 fa3e 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 8009e18:	4b37      	ldr	r3, [pc, #220]	; (8009ef8 <VC_CMV_Initial_Flags_SET+0x1f4>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f015 fa39 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 8009e22:	4b36      	ldr	r3, [pc, #216]	; (8009efc <VC_CMV_Initial_Flags_SET+0x1f8>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f015 fa34 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 8009e2c:	4b34      	ldr	r3, [pc, #208]	; (8009f00 <VC_CMV_Initial_Flags_SET+0x1fc>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f015 fa2f 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 8009e36:	4b33      	ldr	r3, [pc, #204]	; (8009f04 <VC_CMV_Initial_Flags_SET+0x200>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f015 fa2a 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 8009e40:	4b31      	ldr	r3, [pc, #196]	; (8009f08 <VC_CMV_Initial_Flags_SET+0x204>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f015 fa25 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 8009e4a:	4b30      	ldr	r3, [pc, #192]	; (8009f0c <VC_CMV_Initial_Flags_SET+0x208>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f015 fa20 	bl	801f294 <vTaskSuspend>
	vTaskResume(Alert_Handler);
 8009e54:	4b2e      	ldr	r3, [pc, #184]	; (8009f10 <VC_CMV_Initial_Flags_SET+0x20c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f015 fadf 	bl	801f41c <vTaskResume>
	vTaskResume(One_Time_Handler);
 8009e5e:	4b2d      	ldr	r3, [pc, #180]	; (8009f14 <VC_CMV_Initial_Flags_SET+0x210>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f015 fada 	bl	801f41c <vTaskResume>
	vTaskResume(Vc_Cmv_Handler);
 8009e68:	4b2b      	ldr	r3, [pc, #172]	; (8009f18 <VC_CMV_Initial_Flags_SET+0x214>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f015 fad5 	bl	801f41c <vTaskResume>
	vTaskResume(Volume_Control_Task_Handler);
 8009e72:	4b2a      	ldr	r3, [pc, #168]	; (8009f1c <VC_CMV_Initial_Flags_SET+0x218>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f015 fad0 	bl	801f41c <vTaskResume>
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 8009e7c:	4b28      	ldr	r3, [pc, #160]	; (8009f20 <VC_CMV_Initial_Flags_SET+0x21c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f015 fa07 	bl	801f294 <vTaskSuspend>
}
 8009e86:	bf00      	nop
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20013aed 	.word	0x20013aed
 8009e90:	20013ca8 	.word	0x20013ca8
 8009e94:	200140d8 	.word	0x200140d8
 8009e98:	200142b8 	.word	0x200142b8
 8009e9c:	20014324 	.word	0x20014324
 8009ea0:	20013ba4 	.word	0x20013ba4
 8009ea4:	200140f5 	.word	0x200140f5
 8009ea8:	200140f4 	.word	0x200140f4
 8009eac:	20014300 	.word	0x20014300
 8009eb0:	40400000 	.word	0x40400000
 8009eb4:	20013c80 	.word	0x20013c80
 8009eb8:	2001407c 	.word	0x2001407c
 8009ebc:	20013aec 	.word	0x20013aec
 8009ec0:	200140c3 	.word	0x200140c3
 8009ec4:	20013f70 	.word	0x20013f70
 8009ec8:	20013d20 	.word	0x20013d20
 8009ecc:	20013f7c 	.word	0x20013f7c
 8009ed0:	20013f5d 	.word	0x20013f5d
 8009ed4:	20014338 	.word	0x20014338
 8009ed8:	20013f80 	.word	0x20013f80
 8009edc:	20013ba0 	.word	0x20013ba0
 8009ee0:	20013ca0 	.word	0x20013ca0
 8009ee4:	20014348 	.word	0x20014348
 8009ee8:	200142e0 	.word	0x200142e0
 8009eec:	20013f58 	.word	0x20013f58
 8009ef0:	20013bb4 	.word	0x20013bb4
 8009ef4:	20013fa8 	.word	0x20013fa8
 8009ef8:	20013f20 	.word	0x20013f20
 8009efc:	20014374 	.word	0x20014374
 8009f00:	20013af0 	.word	0x20013af0
 8009f04:	200141cc 	.word	0x200141cc
 8009f08:	20013f38 	.word	0x20013f38
 8009f0c:	20014148 	.word	0x20014148
 8009f10:	20014020 	.word	0x20014020
 8009f14:	20014094 	.word	0x20014094
 8009f18:	200142f8 	.word	0x200142f8
 8009f1c:	20013998 	.word	0x20013998
 8009f20:	2001406c 	.word	0x2001406c

08009f24 <PC_SIMV_Initial_Flags_SET>:



void PC_SIMV_Initial_Flags_SET()
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
	TIME_Base_parameter._EXPIRATION_TIME                  = 0;
 8009f28:	4b9a      	ldr	r3, [pc, #616]	; (800a194 <PC_SIMV_Initial_Flags_SET+0x270>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	605a      	str	r2, [r3, #4]
	LED_STATUS = Idle_LED;
 8009f2e:	4b9a      	ldr	r3, [pc, #616]	; (800a198 <PC_SIMV_Initial_Flags_SET+0x274>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                                  = APRV_IDLE;
 8009f34:	4b99      	ldr	r3, [pc, #612]	; (800a19c <PC_SIMV_Initial_Flags_SET+0x278>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                                     = APRV_Idle;
 8009f3a:	4b99      	ldr	r3, [pc, #612]	; (800a1a0 <PC_SIMV_Initial_Flags_SET+0x27c>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PIP_Val                        = PC_SIMV.PIP_Val;
 8009f40:	4b98      	ldr	r3, [pc, #608]	; (800a1a4 <PC_SIMV_Initial_Flags_SET+0x280>)
 8009f42:	781a      	ldrb	r2, [r3, #0]
 8009f44:	4b98      	ldr	r3, [pc, #608]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 8009f46:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = PC_SIMV.PEEP_Val;
 8009f48:	4b96      	ldr	r3, [pc, #600]	; (800a1a4 <PC_SIMV_Initial_Flags_SET+0x280>)
 8009f4a:	785a      	ldrb	r2, [r3, #1]
 8009f4c:	4b96      	ldr	r3, [pc, #600]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 8009f4e:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = PC_SIMV.RESPIRATORY_RATE_Val;
 8009f50:	4b94      	ldr	r3, [pc, #592]	; (800a1a4 <PC_SIMV_Initial_Flags_SET+0x280>)
 8009f52:	789a      	ldrb	r2, [r3, #2]
 8009f54:	4b94      	ldr	r3, [pc, #592]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 8009f56:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = PC_SIMV.FIO2_Val;
 8009f58:	4b92      	ldr	r3, [pc, #584]	; (800a1a4 <PC_SIMV_Initial_Flags_SET+0x280>)
 8009f5a:	78da      	ldrb	r2, [r3, #3]
 8009f5c:	4b92      	ldr	r3, [pc, #584]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 8009f5e:	70da      	strb	r2, [r3, #3]
	Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 8009f60:	4b92      	ldr	r3, [pc, #584]	; (800a1ac <PC_SIMV_Initial_Flags_SET+0x288>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			              = OPENED;
 8009f66:	4b92      	ldr	r3, [pc, #584]	; (800a1b0 <PC_SIMV_Initial_Flags_SET+0x28c>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 8009f6c:	4b91      	ldr	r3, [pc, #580]	; (800a1b4 <PC_SIMV_Initial_Flags_SET+0x290>)
 8009f6e:	2201      	movs	r2, #1
 8009f70:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8009f72:	4b90      	ldr	r3, [pc, #576]	; (800a1b4 <PC_SIMV_Initial_Flags_SET+0x290>)
 8009f74:	2201      	movs	r2, #1
 8009f76:	60da      	str	r2, [r3, #12]
	PEEP_Maintain_Parameter.PEEP_Temp                     = (PC_SIMV.PEEP_Val / 2);
 8009f78:	4b8a      	ldr	r3, [pc, #552]	; (800a1a4 <PC_SIMV_Initial_Flags_SET+0x280>)
 8009f7a:	785b      	ldrb	r3, [r3, #1]
 8009f7c:	085b      	lsrs	r3, r3, #1
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	ee07 3a90 	vmov	s15, r3
 8009f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f88:	4b8a      	ldr	r3, [pc, #552]	; (800a1b4 <PC_SIMV_Initial_Flags_SET+0x290>)
 8009f8a:	edc3 7a00 	vstr	s15, [r3]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    = 0;
 8009f8e:	4b89      	ldr	r3, [pc, #548]	; (800a1b4 <PC_SIMV_Initial_Flags_SET+0x290>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	809a      	strh	r2, [r3, #4]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(PC_SIMV.PIP_Val);
 8009f94:	4b83      	ldr	r3, [pc, #524]	; (800a1a4 <PC_SIMV_Initial_Flags_SET+0x280>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7ff f9b1 	bl	8009300 <DAC_VAL>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4b85      	ldr	r3, [pc, #532]	; (800a1b8 <PC_SIMV_Initial_Flags_SET+0x294>)
 8009fa4:	811a      	strh	r2, [r3, #8]
	if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 8009fa6:	4b80      	ldr	r3, [pc, #512]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b1d      	cmp	r3, #29
 8009fac:	d80a      	bhi.n	8009fc4 <PC_SIMV_Initial_Flags_SET+0xa0>
 8009fae:	4b7e      	ldr	r3, [pc, #504]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 8009fb0:	785b      	ldrb	r3, [r3, #1]
 8009fb2:	2b08      	cmp	r3, #8
 8009fb4:	d806      	bhi.n	8009fc4 <PC_SIMV_Initial_Flags_SET+0xa0>
	{
		PIP_control_Task.PIP_Control_Task_Delay           = 10;
 8009fb6:	4b81      	ldr	r3, [pc, #516]	; (800a1bc <PC_SIMV_Initial_Flags_SET+0x298>)
 8009fb8:	220a      	movs	r2, #10
 8009fba:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST      = 50;
 8009fbc:	4b7f      	ldr	r3, [pc, #508]	; (800a1bc <PC_SIMV_Initial_Flags_SET+0x298>)
 8009fbe:	2232      	movs	r2, #50	; 0x32
 8009fc0:	80da      	strh	r2, [r3, #6]
 8009fc2:	e005      	b.n	8009fd0 <PC_SIMV_Initial_Flags_SET+0xac>
	}
	else
	{
		PIP_control_Task.PIP_Control_Task_Delay           = 2;
 8009fc4:	4b7d      	ldr	r3, [pc, #500]	; (800a1bc <PC_SIMV_Initial_Flags_SET+0x298>)
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST      = 140;
 8009fca:	4b7c      	ldr	r3, [pc, #496]	; (800a1bc <PC_SIMV_Initial_Flags_SET+0x298>)
 8009fcc:	228c      	movs	r2, #140	; 0x8c
 8009fce:	80da      	strh	r2, [r3, #6]
	}
	if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 8009fd0:	4b75      	ldr	r3, [pc, #468]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b1d      	cmp	r3, #29
 8009fd6:	d807      	bhi.n	8009fe8 <PC_SIMV_Initial_Flags_SET+0xc4>
 8009fd8:	4b73      	ldr	r3, [pc, #460]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	d803      	bhi.n	8009fe8 <PC_SIMV_Initial_Flags_SET+0xc4>
	{
		PC_SIMV.RISE_TIME_MS_Val = 800;
 8009fe0:	4b70      	ldr	r3, [pc, #448]	; (800a1a4 <PC_SIMV_Initial_Flags_SET+0x280>)
 8009fe2:	4a77      	ldr	r2, [pc, #476]	; (800a1c0 <PC_SIMV_Initial_Flags_SET+0x29c>)
 8009fe4:	605a      	str	r2, [r3, #4]
 8009fe6:	e006      	b.n	8009ff6 <PC_SIMV_Initial_Flags_SET+0xd2>
	}
	else if((Common_Mode_Parameter._PEEP_Val < 9))
 8009fe8:	4b6f      	ldr	r3, [pc, #444]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d802      	bhi.n	8009ff6 <PC_SIMV_Initial_Flags_SET+0xd2>
	{
		PC_SIMV.RISE_TIME_MS_Val = 600;
 8009ff0:	4b6c      	ldr	r3, [pc, #432]	; (800a1a4 <PC_SIMV_Initial_Flags_SET+0x280>)
 8009ff2:	4a74      	ldr	r2, [pc, #464]	; (800a1c4 <PC_SIMV_Initial_Flags_SET+0x2a0>)
 8009ff4:	605a      	str	r2, [r3, #4]
	}
	Need_PID_Task_Delay                                   = NO;
 8009ff6:	4b74      	ldr	r3, [pc, #464]	; (800a1c8 <PC_SIMV_Initial_Flags_SET+0x2a4>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	701a      	strb	r2, [r3, #0]
	Tune_PID_Task_Delay                                   = T_OPEN;
 8009ffc:	4b73      	ldr	r3, [pc, #460]	; (800a1cc <PC_SIMV_Initial_Flags_SET+0x2a8>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.Low_PIP_Count                        = RESET;
 800a002:	4b6e      	ldr	r3, [pc, #440]	; (800a1bc <PC_SIMV_Initial_Flags_SET+0x298>)
 800a004:	2200      	movs	r2, #0
 800a006:	729a      	strb	r2, [r3, #10]
	PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 800a008:	4b6c      	ldr	r3, [pc, #432]	; (800a1bc <PC_SIMV_Initial_Flags_SET+0x298>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	725a      	strb	r2, [r3, #9]
	Smooth_Ramp_Time_Val_Count = 0;
 800a00e:	4b70      	ldr	r3, [pc, #448]	; (800a1d0 <PC_SIMV_Initial_Flags_SET+0x2ac>)
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]
	Smooth_Ramp_Time_Val       = 15;
 800a014:	4b6f      	ldr	r3, [pc, #444]	; (800a1d4 <PC_SIMV_Initial_Flags_SET+0x2b0>)
 800a016:	220f      	movs	r2, #15
 800a018:	701a      	strb	r2, [r3, #0]
	if(Common_Mode_Parameter._PEEP_Val >= 15)
 800a01a:	4b63      	ldr	r3, [pc, #396]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 800a01c:	785b      	ldrb	r3, [r3, #1]
 800a01e:	2b0e      	cmp	r3, #14
 800a020:	d903      	bls.n	800a02a <PC_SIMV_Initial_Flags_SET+0x106>
	{
	  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800a022:	4b6d      	ldr	r3, [pc, #436]	; (800a1d8 <PC_SIMV_Initial_Flags_SET+0x2b4>)
 800a024:	2201      	movs	r2, #1
 800a026:	701a      	strb	r2, [r3, #0]
 800a028:	e00e      	b.n	800a048 <PC_SIMV_Initial_Flags_SET+0x124>
	}
	else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 800a02a:	4b5f      	ldr	r3, [pc, #380]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 800a02c:	785b      	ldrb	r3, [r3, #1]
 800a02e:	2b0e      	cmp	r3, #14
 800a030:	d807      	bhi.n	800a042 <PC_SIMV_Initial_Flags_SET+0x11e>
 800a032:	4b5d      	ldr	r3, [pc, #372]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 800a034:	785b      	ldrb	r3, [r3, #1]
 800a036:	2b08      	cmp	r3, #8
 800a038:	d903      	bls.n	800a042 <PC_SIMV_Initial_Flags_SET+0x11e>
	{
	  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 800a03a:	4b67      	ldr	r3, [pc, #412]	; (800a1d8 <PC_SIMV_Initial_Flags_SET+0x2b4>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	701a      	strb	r2, [r3, #0]
 800a040:	e002      	b.n	800a048 <PC_SIMV_Initial_Flags_SET+0x124>
	}
	else
	{
		Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800a042:	4b65      	ldr	r3, [pc, #404]	; (800a1d8 <PC_SIMV_Initial_Flags_SET+0x2b4>)
 800a044:	2201      	movs	r2, #1
 800a046:	701a      	strb	r2, [r3, #0]
	}

	Fio2_Blending_Method  = PRESSURE_CONTROLLED;
 800a048:	4b64      	ldr	r3, [pc, #400]	; (800a1dc <PC_SIMV_Initial_Flags_SET+0x2b8>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	701a      	strb	r2, [r3, #0]
	O2_Initial_Parameter(PC_SIMV.FIO2_Val);
 800a04e:	4b55      	ldr	r3, [pc, #340]	; (800a1a4 <PC_SIMV_Initial_Flags_SET+0x280>)
 800a050:	78db      	ldrb	r3, [r3, #3]
 800a052:	4618      	mov	r0, r3
 800a054:	f001 fcd0 	bl	800b9f8 <O2_Initial_Parameter>
	Alert_Flags_Reset();
 800a058:	f7f7 f820 	bl	800109c <Alert_Flags_Reset>
	Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 800a05c:	4b60      	ldr	r3, [pc, #384]	; (800a1e0 <PC_SIMV_Initial_Flags_SET+0x2bc>)
 800a05e:	2201      	movs	r2, #1
 800a060:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                             = Run_Expiration_Cycle;
 800a062:	4b60      	ldr	r3, [pc, #384]	; (800a1e4 <PC_SIMV_Initial_Flags_SET+0x2c0>)
 800a064:	2202      	movs	r2, #2
 800a066:	701a      	strb	r2, [r3, #0]
	Back_Up_Mode_Initial_Flag_Set     = CLOSE;
 800a068:	4b5f      	ldr	r3, [pc, #380]	; (800a1e8 <PC_SIMV_Initial_Flags_SET+0x2c4>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set             = CLOSE;
 800a06e:	4b5f      	ldr	r3, [pc, #380]	; (800a1ec <PC_SIMV_Initial_Flags_SET+0x2c8>)
 800a070:	2200      	movs	r2, #0
 800a072:	701a      	strb	r2, [r3, #0]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800a074:	f000 ffd8 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskSuspend(Pc_Cmv_Handler);
 800a078:	4b5d      	ldr	r3, [pc, #372]	; (800a1f0 <PC_SIMV_Initial_Flags_SET+0x2cc>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f015 f909 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800a082:	4b5c      	ldr	r3, [pc, #368]	; (800a1f4 <PC_SIMV_Initial_Flags_SET+0x2d0>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f015 f904 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800a08c:	4b5a      	ldr	r3, [pc, #360]	; (800a1f8 <PC_SIMV_Initial_Flags_SET+0x2d4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4618      	mov	r0, r3
 800a092:	f015 f8ff 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800a096:	4b59      	ldr	r3, [pc, #356]	; (800a1fc <PC_SIMV_Initial_Flags_SET+0x2d8>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f015 f8fa 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800a0a0:	4b57      	ldr	r3, [pc, #348]	; (800a200 <PC_SIMV_Initial_Flags_SET+0x2dc>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f015 f8f5 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800a0aa:	4b56      	ldr	r3, [pc, #344]	; (800a204 <PC_SIMV_Initial_Flags_SET+0x2e0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f015 f8f0 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800a0b4:	4b54      	ldr	r3, [pc, #336]	; (800a208 <PC_SIMV_Initial_Flags_SET+0x2e4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f015 f8eb 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 800a0be:	4b53      	ldr	r3, [pc, #332]	; (800a20c <PC_SIMV_Initial_Flags_SET+0x2e8>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f015 f8e6 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800a0c8:	4b51      	ldr	r3, [pc, #324]	; (800a210 <PC_SIMV_Initial_Flags_SET+0x2ec>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f015 f8e1 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800a0d2:	4b50      	ldr	r3, [pc, #320]	; (800a214 <PC_SIMV_Initial_Flags_SET+0x2f0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f015 f8dc 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800a0dc:	4b4e      	ldr	r3, [pc, #312]	; (800a218 <PC_SIMV_Initial_Flags_SET+0x2f4>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f015 f8d7 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800a0e6:	4b4d      	ldr	r3, [pc, #308]	; (800a21c <PC_SIMV_Initial_Flags_SET+0x2f8>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f015 f8d2 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800a0f0:	4b4b      	ldr	r3, [pc, #300]	; (800a220 <PC_SIMV_Initial_Flags_SET+0x2fc>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f015 f8cd 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800a0fa:	4b4a      	ldr	r3, [pc, #296]	; (800a224 <PC_SIMV_Initial_Flags_SET+0x300>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f015 f8c8 	bl	801f294 <vTaskSuspend>
	vTaskResume(Alert_Handler);
 800a104:	4b48      	ldr	r3, [pc, #288]	; (800a228 <PC_SIMV_Initial_Flags_SET+0x304>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4618      	mov	r0, r3
 800a10a:	f015 f987 	bl	801f41c <vTaskResume>
	vTaskResume(One_Time_Handler);
 800a10e:	4b47      	ldr	r3, [pc, #284]	; (800a22c <PC_SIMV_Initial_Flags_SET+0x308>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f015 f982 	bl	801f41c <vTaskResume>
	if(Assist_Control == ASSIST_ON)
 800a118:	4b45      	ldr	r3, [pc, #276]	; (800a230 <PC_SIMV_Initial_Flags_SET+0x30c>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10f      	bne.n	800a140 <PC_SIMV_Initial_Flags_SET+0x21c>
	{
		vTaskResume(Pc_Simv_Assist_ON_Handler);
 800a120:	4b44      	ldr	r3, [pc, #272]	; (800a234 <PC_SIMV_Initial_Flags_SET+0x310>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4618      	mov	r0, r3
 800a126:	f015 f979 	bl	801f41c <vTaskResume>
		vTaskResume(PIP_Control_Task_Handler);
 800a12a:	4b32      	ldr	r3, [pc, #200]	; (800a1f4 <PC_SIMV_Initial_Flags_SET+0x2d0>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f015 f974 	bl	801f41c <vTaskResume>
		vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800a134:	4b40      	ldr	r3, [pc, #256]	; (800a238 <PC_SIMV_Initial_Flags_SET+0x314>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4618      	mov	r0, r3
 800a13a:	f015 f8ab 	bl	801f294 <vTaskSuspend>
 800a13e:	e022      	b.n	800a186 <PC_SIMV_Initial_Flags_SET+0x262>
	}
	else if(Assist_Control == ASSIST_OFF)
 800a140:	4b3b      	ldr	r3, [pc, #236]	; (800a230 <PC_SIMV_Initial_Flags_SET+0x30c>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d11e      	bne.n	800a186 <PC_SIMV_Initial_Flags_SET+0x262>
	{
		Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL      = DAC_VAL(Common_Mode_Parameter._PEEP_Val);
 800a148:	4b17      	ldr	r3, [pc, #92]	; (800a1a8 <PC_SIMV_Initial_Flags_SET+0x284>)
 800a14a:	785b      	ldrb	r3, [r3, #1]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff f8d7 	bl	8009300 <DAC_VAL>
 800a152:	4603      	mov	r3, r0
 800a154:	461a      	mov	r2, r3
 800a156:	4b18      	ldr	r3, [pc, #96]	; (800a1b8 <PC_SIMV_Initial_Flags_SET+0x294>)
 800a158:	821a      	strh	r2, [r3, #16]
		Pressure_Mode_blower_control.LAST_PEEP_BLOWER_DAC_VAL = Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL;
 800a15a:	4b17      	ldr	r3, [pc, #92]	; (800a1b8 <PC_SIMV_Initial_Flags_SET+0x294>)
 800a15c:	8a1a      	ldrh	r2, [r3, #16]
 800a15e:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <PC_SIMV_Initial_Flags_SET+0x294>)
 800a160:	825a      	strh	r2, [r3, #18]
		vTaskResume(Pc_Simv_Assist_OFF_Handler);
 800a162:	4b35      	ldr	r3, [pc, #212]	; (800a238 <PC_SIMV_Initial_Flags_SET+0x314>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4618      	mov	r0, r3
 800a168:	f015 f958 	bl	801f41c <vTaskResume>
		vTaskResume(PIP_Control_Task_Handler);
 800a16c:	4b21      	ldr	r3, [pc, #132]	; (800a1f4 <PC_SIMV_Initial_Flags_SET+0x2d0>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	f015 f953 	bl	801f41c <vTaskResume>
		vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800a176:	4b2f      	ldr	r3, [pc, #188]	; (800a234 <PC_SIMV_Initial_Flags_SET+0x310>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f015 f88a 	bl	801f294 <vTaskSuspend>
		Trigger_Process = ONE_TIME_TRIGGER;
 800a180:	4b2e      	ldr	r3, [pc, #184]	; (800a23c <PC_SIMV_Initial_Flags_SET+0x318>)
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
	}
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800a186:	4b2e      	ldr	r3, [pc, #184]	; (800a240 <PC_SIMV_Initial_Flags_SET+0x31c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f015 f882 	bl	801f294 <vTaskSuspend>
}
 800a190:	bf00      	nop
 800a192:	bd80      	pop	{r7, pc}
 800a194:	200141fc 	.word	0x200141fc
 800a198:	20013aed 	.word	0x20013aed
 800a19c:	20013ca8 	.word	0x20013ca8
 800a1a0:	200140d8 	.word	0x200140d8
 800a1a4:	200142bc 	.word	0x200142bc
 800a1a8:	20013ba4 	.word	0x20013ba4
 800a1ac:	200140f5 	.word	0x200140f5
 800a1b0:	200140f4 	.word	0x200140f4
 800a1b4:	20014300 	.word	0x20014300
 800a1b8:	20014030 	.word	0x20014030
 800a1bc:	20013b04 	.word	0x20013b04
 800a1c0:	44480000 	.word	0x44480000
 800a1c4:	44160000 	.word	0x44160000
 800a1c8:	200140f6 	.word	0x200140f6
 800a1cc:	20013c88 	.word	0x20013c88
 800a1d0:	200140c1 	.word	0x200140c1
 800a1d4:	20014058 	.word	0x20014058
 800a1d8:	20013b82 	.word	0x20013b82
 800a1dc:	20013aec 	.word	0x20013aec
 800a1e0:	20013d20 	.word	0x20013d20
 800a1e4:	20013f7c 	.word	0x20013f7c
 800a1e8:	20013f5d 	.word	0x20013f5d
 800a1ec:	20014338 	.word	0x20014338
 800a1f0:	20013f80 	.word	0x20013f80
 800a1f4:	20013ba0 	.word	0x20013ba0
 800a1f8:	200142f8 	.word	0x200142f8
 800a1fc:	20013998 	.word	0x20013998
 800a200:	200142e0 	.word	0x200142e0
 800a204:	20013f58 	.word	0x20013f58
 800a208:	20013bb4 	.word	0x20013bb4
 800a20c:	20013fa8 	.word	0x20013fa8
 800a210:	20013f20 	.word	0x20013f20
 800a214:	20014374 	.word	0x20014374
 800a218:	20013af0 	.word	0x20013af0
 800a21c:	200141cc 	.word	0x200141cc
 800a220:	20013f38 	.word	0x20013f38
 800a224:	20014148 	.word	0x20014148
 800a228:	20014020 	.word	0x20014020
 800a22c:	20014094 	.word	0x20014094
 800a230:	200139e0 	.word	0x200139e0
 800a234:	20014348 	.word	0x20014348
 800a238:	20013ca0 	.word	0x20013ca0
 800a23c:	20013ac8 	.word	0x20013ac8
 800a240:	2001406c 	.word	0x2001406c

0800a244 <VC_SIMV_Initial_Flags_SET>:


void VC_SIMV_Initial_Flags_SET()
{
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
	Reset_Blower_Status();
 800a248:	f008 f954 	bl	80124f4 <Reset_Blower_Status>
	TIME_Base_parameter._EXPIRATION_TIME                  = 0;
 800a24c:	4b77      	ldr	r3, [pc, #476]	; (800a42c <VC_SIMV_Initial_Flags_SET+0x1e8>)
 800a24e:	2200      	movs	r2, #0
 800a250:	605a      	str	r2, [r3, #4]
	LED_STATUS                                            = Idle_LED;
 800a252:	4b77      	ldr	r3, [pc, #476]	; (800a430 <VC_SIMV_Initial_Flags_SET+0x1ec>)
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                                  = APRV_IDLE;
 800a258:	4b76      	ldr	r3, [pc, #472]	; (800a434 <VC_SIMV_Initial_Flags_SET+0x1f0>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                                     = APRV_Idle;
 800a25e:	4b76      	ldr	r3, [pc, #472]	; (800a438 <VC_SIMV_Initial_Flags_SET+0x1f4>)
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
	Total_Volume_Achieved_Time                            = 500;
 800a264:	4b75      	ldr	r3, [pc, #468]	; (800a43c <VC_SIMV_Initial_Flags_SET+0x1f8>)
 800a266:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a26a:	801a      	strh	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = VC_SIMV.PEEP_Val;
 800a26c:	4b74      	ldr	r3, [pc, #464]	; (800a440 <VC_SIMV_Initial_Flags_SET+0x1fc>)
 800a26e:	789a      	ldrb	r2, [r3, #2]
 800a270:	4b74      	ldr	r3, [pc, #464]	; (800a444 <VC_SIMV_Initial_Flags_SET+0x200>)
 800a272:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = VC_SIMV.RESPIRATORY_RATE_Val;
 800a274:	4b72      	ldr	r3, [pc, #456]	; (800a440 <VC_SIMV_Initial_Flags_SET+0x1fc>)
 800a276:	78da      	ldrb	r2, [r3, #3]
 800a278:	4b72      	ldr	r3, [pc, #456]	; (800a444 <VC_SIMV_Initial_Flags_SET+0x200>)
 800a27a:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = VC_SIMV.FIO2_Val;
 800a27c:	4b70      	ldr	r3, [pc, #448]	; (800a440 <VC_SIMV_Initial_Flags_SET+0x1fc>)
 800a27e:	791a      	ldrb	r2, [r3, #4]
 800a280:	4b70      	ldr	r3, [pc, #448]	; (800a444 <VC_SIMV_Initial_Flags_SET+0x200>)
 800a282:	70da      	strb	r2, [r3, #3]
	Common_Mode_Parameter._VOLUME_Val                     = VC_SIMV.VOLUME_Val;
 800a284:	4b6e      	ldr	r3, [pc, #440]	; (800a440 <VC_SIMV_Initial_Flags_SET+0x1fc>)
 800a286:	881a      	ldrh	r2, [r3, #0]
 800a288:	4b6e      	ldr	r3, [pc, #440]	; (800a444 <VC_SIMV_Initial_Flags_SET+0x200>)
 800a28a:	809a      	strh	r2, [r3, #4]
	Common_Mode_Parameter._FLOW_RATE                      = VC_SIMV.FLOW_RATE_Val;
 800a28c:	4b6c      	ldr	r3, [pc, #432]	; (800a440 <VC_SIMV_Initial_Flags_SET+0x1fc>)
 800a28e:	7c9a      	ldrb	r2, [r3, #18]
 800a290:	4b6c      	ldr	r3, [pc, #432]	; (800a444 <VC_SIMV_Initial_Flags_SET+0x200>)
 800a292:	719a      	strb	r2, [r3, #6]
	Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 800a294:	4b6c      	ldr	r3, [pc, #432]	; (800a448 <VC_SIMV_Initial_Flags_SET+0x204>)
 800a296:	2200      	movs	r2, #0
 800a298:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			              = OPENED;
 800a29a:	4b6c      	ldr	r3, [pc, #432]	; (800a44c <VC_SIMV_Initial_Flags_SET+0x208>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 800a2a0:	4b6b      	ldr	r3, [pc, #428]	; (800a450 <VC_SIMV_Initial_Flags_SET+0x20c>)
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 800a2a6:	4b6a      	ldr	r3, [pc, #424]	; (800a450 <VC_SIMV_Initial_Flags_SET+0x20c>)
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	60da      	str	r2, [r3, #12]
	PEEP_Maintain_Parameter.PEEP_Temp                     = 3;
 800a2ac:	4b68      	ldr	r3, [pc, #416]	; (800a450 <VC_SIMV_Initial_Flags_SET+0x20c>)
 800a2ae:	4a69      	ldr	r2, [pc, #420]	; (800a454 <VC_SIMV_Initial_Flags_SET+0x210>)
 800a2b0:	601a      	str	r2, [r3, #0]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    = 0;
 800a2b2:	4b67      	ldr	r3, [pc, #412]	; (800a450 <VC_SIMV_Initial_Flags_SET+0x20c>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	809a      	strh	r2, [r3, #4]

	LOW_COMPLIANCE_DAC                                         = LOW_Compliance_DAC_value(Common_Mode_Parameter._FLOW_RATE);
 800a2b8:	4b62      	ldr	r3, [pc, #392]	; (800a444 <VC_SIMV_Initial_Flags_SET+0x200>)
 800a2ba:	799b      	ldrb	r3, [r3, #6]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f008 fad3 	bl	8012868 <LOW_Compliance_DAC_value>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4b64      	ldr	r3, [pc, #400]	; (800a458 <VC_SIMV_Initial_Flags_SET+0x214>)
 800a2c8:	801a      	strh	r2, [r3, #0]
	Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = LOW_COMPLIANCE_DAC;
 800a2ca:	4b63      	ldr	r3, [pc, #396]	; (800a458 <VC_SIMV_Initial_Flags_SET+0x214>)
 800a2cc:	881a      	ldrh	r2, [r3, #0]
 800a2ce:	4b63      	ldr	r3, [pc, #396]	; (800a45c <VC_SIMV_Initial_Flags_SET+0x218>)
 800a2d0:	809a      	strh	r2, [r3, #4]


	Volume_control_Task.Volume_Stop_Value     = 10;
 800a2d2:	4b63      	ldr	r3, [pc, #396]	; (800a460 <VC_SIMV_Initial_Flags_SET+0x21c>)
 800a2d4:	220a      	movs	r2, #10
 800a2d6:	701a      	strb	r2, [r3, #0]
	INCREMENT_DAC_VAL_PER_ITERATION           = 3;
 800a2d8:	4b62      	ldr	r3, [pc, #392]	; (800a464 <VC_SIMV_Initial_Flags_SET+0x220>)
 800a2da:	2203      	movs	r2, #3
 800a2dc:	701a      	strb	r2, [r3, #0]
	Fio2_Blending_Method = VOLUME_CONTROLLED;
 800a2de:	4b62      	ldr	r3, [pc, #392]	; (800a468 <VC_SIMV_Initial_Flags_SET+0x224>)
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	701a      	strb	r2, [r3, #0]
	O2_Initial_Parameter(VC_SIMV.FIO2_Val);
 800a2e4:	4b56      	ldr	r3, [pc, #344]	; (800a440 <VC_SIMV_Initial_Flags_SET+0x1fc>)
 800a2e6:	791b      	ldrb	r3, [r3, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f001 fb85 	bl	800b9f8 <O2_Initial_Parameter>
	Alert_Flags_Reset();
 800a2ee:	f7f6 fed5 	bl	800109c <Alert_Flags_Reset>
	Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 800a2f2:	4b5e      	ldr	r3, [pc, #376]	; (800a46c <VC_SIMV_Initial_Flags_SET+0x228>)
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                             = Run_Expiration_Cycle;
 800a2f8:	4b5d      	ldr	r3, [pc, #372]	; (800a470 <VC_SIMV_Initial_Flags_SET+0x22c>)
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	701a      	strb	r2, [r3, #0]
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800a2fe:	4b5d      	ldr	r3, [pc, #372]	; (800a474 <VC_SIMV_Initial_Flags_SET+0x230>)
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800a304:	4b5c      	ldr	r3, [pc, #368]	; (800a478 <VC_SIMV_Initial_Flags_SET+0x234>)
 800a306:	2200      	movs	r2, #0
 800a308:	701a      	strb	r2, [r3, #0]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800a30a:	f000 fe8d 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskSuspend(Pc_Cmv_Handler);
 800a30e:	4b5b      	ldr	r3, [pc, #364]	; (800a47c <VC_SIMV_Initial_Flags_SET+0x238>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f014 ffbe 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800a318:	4b59      	ldr	r3, [pc, #356]	; (800a480 <VC_SIMV_Initial_Flags_SET+0x23c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f014 ffb9 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800a322:	4b58      	ldr	r3, [pc, #352]	; (800a484 <VC_SIMV_Initial_Flags_SET+0x240>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4618      	mov	r0, r3
 800a328:	f014 ffb4 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800a32c:	4b56      	ldr	r3, [pc, #344]	; (800a488 <VC_SIMV_Initial_Flags_SET+0x244>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4618      	mov	r0, r3
 800a332:	f014 ffaf 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800a336:	4b55      	ldr	r3, [pc, #340]	; (800a48c <VC_SIMV_Initial_Flags_SET+0x248>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f014 ffaa 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800a340:	4b53      	ldr	r3, [pc, #332]	; (800a490 <VC_SIMV_Initial_Flags_SET+0x24c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4618      	mov	r0, r3
 800a346:	f014 ffa5 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800a34a:	4b52      	ldr	r3, [pc, #328]	; (800a494 <VC_SIMV_Initial_Flags_SET+0x250>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	f014 ffa0 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 800a354:	4b50      	ldr	r3, [pc, #320]	; (800a498 <VC_SIMV_Initial_Flags_SET+0x254>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4618      	mov	r0, r3
 800a35a:	f014 ff9b 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800a35e:	4b4f      	ldr	r3, [pc, #316]	; (800a49c <VC_SIMV_Initial_Flags_SET+0x258>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4618      	mov	r0, r3
 800a364:	f014 ff96 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800a368:	4b4d      	ldr	r3, [pc, #308]	; (800a4a0 <VC_SIMV_Initial_Flags_SET+0x25c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f014 ff91 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800a372:	4b4c      	ldr	r3, [pc, #304]	; (800a4a4 <VC_SIMV_Initial_Flags_SET+0x260>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4618      	mov	r0, r3
 800a378:	f014 ff8c 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800a37c:	4b4a      	ldr	r3, [pc, #296]	; (800a4a8 <VC_SIMV_Initial_Flags_SET+0x264>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4618      	mov	r0, r3
 800a382:	f014 ff87 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800a386:	4b49      	ldr	r3, [pc, #292]	; (800a4ac <VC_SIMV_Initial_Flags_SET+0x268>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f014 ff82 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800a390:	4b47      	ldr	r3, [pc, #284]	; (800a4b0 <VC_SIMV_Initial_Flags_SET+0x26c>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f014 ff7d 	bl	801f294 <vTaskSuspend>
	vTaskResume(Alert_Handler);
 800a39a:	4b46      	ldr	r3, [pc, #280]	; (800a4b4 <VC_SIMV_Initial_Flags_SET+0x270>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f015 f83c 	bl	801f41c <vTaskResume>
	vTaskResume(One_Time_Handler);
 800a3a4:	4b44      	ldr	r3, [pc, #272]	; (800a4b8 <VC_SIMV_Initial_Flags_SET+0x274>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f015 f837 	bl	801f41c <vTaskResume>
	if(Assist_Control == ASSIST_ON)
 800a3ae:	4b43      	ldr	r3, [pc, #268]	; (800a4bc <VC_SIMV_Initial_Flags_SET+0x278>)
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10f      	bne.n	800a3d6 <VC_SIMV_Initial_Flags_SET+0x192>
	{
		vTaskResume(Vc_Simv_Assist_ON_Handler);
 800a3b6:	4b42      	ldr	r3, [pc, #264]	; (800a4c0 <VC_SIMV_Initial_Flags_SET+0x27c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f015 f82e 	bl	801f41c <vTaskResume>
		vTaskResume(Volume_Control_Task_Handler);
 800a3c0:	4b33      	ldr	r3, [pc, #204]	; (800a490 <VC_SIMV_Initial_Flags_SET+0x24c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f015 f829 	bl	801f41c <vTaskResume>
		vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800a3ca:	4b3e      	ldr	r3, [pc, #248]	; (800a4c4 <VC_SIMV_Initial_Flags_SET+0x280>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f014 ff60 	bl	801f294 <vTaskSuspend>
 800a3d4:	e022      	b.n	800a41c <VC_SIMV_Initial_Flags_SET+0x1d8>
	}
	else if(Assist_Control == ASSIST_OFF)
 800a3d6:	4b39      	ldr	r3, [pc, #228]	; (800a4bc <VC_SIMV_Initial_Flags_SET+0x278>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d11e      	bne.n	800a41c <VC_SIMV_Initial_Flags_SET+0x1d8>
	{
		Volume_Mode_Blower_control.PEEP_BLOWER_DAC_VAL      = DAC_VAL(Common_Mode_Parameter._PEEP_Val);
 800a3de:	4b19      	ldr	r3, [pc, #100]	; (800a444 <VC_SIMV_Initial_Flags_SET+0x200>)
 800a3e0:	785b      	ldrb	r3, [r3, #1]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe ff8c 	bl	8009300 <DAC_VAL>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	4b1b      	ldr	r3, [pc, #108]	; (800a45c <VC_SIMV_Initial_Flags_SET+0x218>)
 800a3ee:	819a      	strh	r2, [r3, #12]
		Volume_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL = Volume_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 800a3f0:	4b1a      	ldr	r3, [pc, #104]	; (800a45c <VC_SIMV_Initial_Flags_SET+0x218>)
 800a3f2:	899a      	ldrh	r2, [r3, #12]
 800a3f4:	4b19      	ldr	r3, [pc, #100]	; (800a45c <VC_SIMV_Initial_Flags_SET+0x218>)
 800a3f6:	81da      	strh	r2, [r3, #14]
		vTaskResume(Vc_Simv_Assist_OFF_Handler);
 800a3f8:	4b32      	ldr	r3, [pc, #200]	; (800a4c4 <VC_SIMV_Initial_Flags_SET+0x280>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f015 f80d 	bl	801f41c <vTaskResume>
		vTaskResume(Volume_Control_Task_Handler);
 800a402:	4b23      	ldr	r3, [pc, #140]	; (800a490 <VC_SIMV_Initial_Flags_SET+0x24c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f015 f808 	bl	801f41c <vTaskResume>
		vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800a40c:	4b2c      	ldr	r3, [pc, #176]	; (800a4c0 <VC_SIMV_Initial_Flags_SET+0x27c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4618      	mov	r0, r3
 800a412:	f014 ff3f 	bl	801f294 <vTaskSuspend>
		Trigger_Process = ONE_TIME_TRIGGER;
 800a416:	4b2c      	ldr	r3, [pc, #176]	; (800a4c8 <VC_SIMV_Initial_Flags_SET+0x284>)
 800a418:	2200      	movs	r2, #0
 800a41a:	701a      	strb	r2, [r3, #0]
	}
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800a41c:	4b2b      	ldr	r3, [pc, #172]	; (800a4cc <VC_SIMV_Initial_Flags_SET+0x288>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4618      	mov	r0, r3
 800a422:	f014 ff37 	bl	801f294 <vTaskSuspend>
}
 800a426:	bf00      	nop
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	200141fc 	.word	0x200141fc
 800a430:	20013aed 	.word	0x20013aed
 800a434:	20013ca8 	.word	0x20013ca8
 800a438:	200140d8 	.word	0x200140d8
 800a43c:	200142b8 	.word	0x200142b8
 800a440:	2001434c 	.word	0x2001434c
 800a444:	20013ba4 	.word	0x20013ba4
 800a448:	200140f5 	.word	0x200140f5
 800a44c:	200140f4 	.word	0x200140f4
 800a450:	20014300 	.word	0x20014300
 800a454:	40400000 	.word	0x40400000
 800a458:	20013c80 	.word	0x20013c80
 800a45c:	2001407c 	.word	0x2001407c
 800a460:	20013f70 	.word	0x20013f70
 800a464:	200140c3 	.word	0x200140c3
 800a468:	20013aec 	.word	0x20013aec
 800a46c:	20013d20 	.word	0x20013d20
 800a470:	20013f7c 	.word	0x20013f7c
 800a474:	20013f5d 	.word	0x20013f5d
 800a478:	20014338 	.word	0x20014338
 800a47c:	20013f80 	.word	0x20013f80
 800a480:	20013ba0 	.word	0x20013ba0
 800a484:	20013ca0 	.word	0x20013ca0
 800a488:	20014348 	.word	0x20014348
 800a48c:	200142f8 	.word	0x200142f8
 800a490:	20013998 	.word	0x20013998
 800a494:	20013bb4 	.word	0x20013bb4
 800a498:	20013fa8 	.word	0x20013fa8
 800a49c:	20013f20 	.word	0x20013f20
 800a4a0:	20014374 	.word	0x20014374
 800a4a4:	20013af0 	.word	0x20013af0
 800a4a8:	200141cc 	.word	0x200141cc
 800a4ac:	20013f38 	.word	0x20013f38
 800a4b0:	20014148 	.word	0x20014148
 800a4b4:	20014020 	.word	0x20014020
 800a4b8:	20014094 	.word	0x20014094
 800a4bc:	200139e0 	.word	0x200139e0
 800a4c0:	20013f58 	.word	0x20013f58
 800a4c4:	200142e0 	.word	0x200142e0
 800a4c8:	20013ac8 	.word	0x20013ac8
 800a4cc:	2001406c 	.word	0x2001406c

0800a4d0 <PSV_Initial_Flags_SET>:



void PSV_Initial_Flags_SET()
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0
	APRV_current_breathe                   = APRV_IDLE;
 800a4d4:	4b5a      	ldr	r3, [pc, #360]	; (800a640 <PSV_Initial_Flags_SET+0x170>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                      = APRV_Idle;
 800a4da:	4b5a      	ldr	r3, [pc, #360]	; (800a644 <PSV_Initial_Flags_SET+0x174>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	701a      	strb	r2, [r3, #0]
	PSV_Control.PSV_PEEP_Settle_Time       = 2000;
 800a4e0:	4b59      	ldr	r3, [pc, #356]	; (800a648 <PSV_Initial_Flags_SET+0x178>)
 800a4e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a4e6:	601a      	str	r2, [r3, #0]
	Common_Mode_Parameter.TOLERANCE_EWAVE  = PSV.TOLERANCE_EWAVE ;
 800a4e8:	4b58      	ldr	r3, [pc, #352]	; (800a64c <PSV_Initial_Flags_SET+0x17c>)
 800a4ea:	8a1a      	ldrh	r2, [r3, #16]
 800a4ec:	4b58      	ldr	r3, [pc, #352]	; (800a650 <PSV_Initial_Flags_SET+0x180>)
 800a4ee:	811a      	strh	r2, [r3, #8]
	Common_Mode_Parameter.TRIG_WINDOW      = PSV.TRIG_WINDOW;
 800a4f0:	4b56      	ldr	r3, [pc, #344]	; (800a64c <PSV_Initial_Flags_SET+0x17c>)
 800a4f2:	8a5a      	ldrh	r2, [r3, #18]
 800a4f4:	4b56      	ldr	r3, [pc, #344]	; (800a650 <PSV_Initial_Flags_SET+0x180>)
 800a4f6:	815a      	strh	r2, [r3, #10]
	Common_Mode_Parameter.TRIG_LMT         = PSV.TRIG_LMT;
 800a4f8:	4b54      	ldr	r3, [pc, #336]	; (800a64c <PSV_Initial_Flags_SET+0x17c>)
 800a4fa:	edd3 7a02 	vldr	s15, [r3, #8]
 800a4fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a502:	ee17 3a90 	vmov	r3, s15
 800a506:	b29a      	uxth	r2, r3
 800a508:	4b51      	ldr	r3, [pc, #324]	; (800a650 <PSV_Initial_Flags_SET+0x180>)
 800a50a:	819a      	strh	r2, [r3, #12]
	Common_Mode_Parameter.TRIG_TIME        = PSV.TRIG_TIME;
 800a50c:	4b4f      	ldr	r3, [pc, #316]	; (800a64c <PSV_Initial_Flags_SET+0x17c>)
 800a50e:	899a      	ldrh	r2, [r3, #12]
 800a510:	4b4f      	ldr	r3, [pc, #316]	; (800a650 <PSV_Initial_Flags_SET+0x180>)
 800a512:	81da      	strh	r2, [r3, #14]
	Parkar_valve_Signal(0);
 800a514:	4b4f      	ldr	r3, [pc, #316]	; (800a654 <PSV_Initial_Flags_SET+0x184>)
 800a516:	2200      	movs	r2, #0
 800a518:	615a      	str	r2, [r3, #20]
	Oxygen_Parameter.Servo_Position        =45;
 800a51a:	4b4f      	ldr	r3, [pc, #316]	; (800a658 <PSV_Initial_Flags_SET+0x188>)
 800a51c:	222d      	movs	r2, #45	; 0x2d
 800a51e:	73da      	strb	r2, [r3, #15]
	Servo_Info(Oxygen_Parameter.Servo_Position);
 800a520:	4b4d      	ldr	r3, [pc, #308]	; (800a658 <PSV_Initial_Flags_SET+0x188>)
 800a522:	7bdb      	ldrb	r3, [r3, #15]
 800a524:	4618      	mov	r0, r3
 800a526:	f001 fa9b 	bl	800ba60 <Servo_Info>
	Servo_Position_Feedback                = SERVO_FULL_OPEND;
 800a52a:	4b4c      	ldr	r3, [pc, #304]	; (800a65c <PSV_Initial_Flags_SET+0x18c>)
 800a52c:	222d      	movs	r2, #45	; 0x2d
 800a52e:	701a      	strb	r2, [r3, #0]
	Servo_Angle(Oxygen_Parameter.Servo_Position);
 800a530:	4b49      	ldr	r3, [pc, #292]	; (800a658 <PSV_Initial_Flags_SET+0x188>)
 800a532:	7bda      	ldrb	r2, [r3, #15]
 800a534:	4b4a      	ldr	r3, [pc, #296]	; (800a660 <PSV_Initial_Flags_SET+0x190>)
 800a536:	635a      	str	r2, [r3, #52]	; 0x34
	vTaskSuspend(Pc_Cmv_Handler);
 800a538:	4b4a      	ldr	r3, [pc, #296]	; (800a664 <PSV_Initial_Flags_SET+0x194>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f014 fea9 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800a542:	4b49      	ldr	r3, [pc, #292]	; (800a668 <PSV_Initial_Flags_SET+0x198>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4618      	mov	r0, r3
 800a548:	f014 fea4 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800a54c:	4b47      	ldr	r3, [pc, #284]	; (800a66c <PSV_Initial_Flags_SET+0x19c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4618      	mov	r0, r3
 800a552:	f014 fe9f 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800a556:	4b46      	ldr	r3, [pc, #280]	; (800a670 <PSV_Initial_Flags_SET+0x1a0>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f014 fe9a 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800a560:	4b44      	ldr	r3, [pc, #272]	; (800a674 <PSV_Initial_Flags_SET+0x1a4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4618      	mov	r0, r3
 800a566:	f014 fe95 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800a56a:	4b43      	ldr	r3, [pc, #268]	; (800a678 <PSV_Initial_Flags_SET+0x1a8>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4618      	mov	r0, r3
 800a570:	f014 fe90 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800a574:	4b41      	ldr	r3, [pc, #260]	; (800a67c <PSV_Initial_Flags_SET+0x1ac>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4618      	mov	r0, r3
 800a57a:	f014 fe8b 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800a57e:	4b40      	ldr	r3, [pc, #256]	; (800a680 <PSV_Initial_Flags_SET+0x1b0>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4618      	mov	r0, r3
 800a584:	f014 fe86 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800a588:	4b3e      	ldr	r3, [pc, #248]	; (800a684 <PSV_Initial_Flags_SET+0x1b4>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f014 fe81 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800a592:	4b3d      	ldr	r3, [pc, #244]	; (800a688 <PSV_Initial_Flags_SET+0x1b8>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4618      	mov	r0, r3
 800a598:	f014 fe7c 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800a59c:	4b3b      	ldr	r3, [pc, #236]	; (800a68c <PSV_Initial_Flags_SET+0x1bc>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f014 fe77 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(CPAP_Handler);
 800a5a6:	4b3a      	ldr	r3, [pc, #232]	; (800a690 <PSV_Initial_Flags_SET+0x1c0>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f014 fe72 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800a5b0:	4b38      	ldr	r3, [pc, #224]	; (800a694 <PSV_Initial_Flags_SET+0x1c4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f014 fe6d 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800a5ba:	4b37      	ldr	r3, [pc, #220]	; (800a698 <PSV_Initial_Flags_SET+0x1c8>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f014 fe68 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800a5c4:	4b35      	ldr	r3, [pc, #212]	; (800a69c <PSV_Initial_Flags_SET+0x1cc>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f014 fe63 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800a5ce:	4b34      	ldr	r3, [pc, #208]	; (800a6a0 <PSV_Initial_Flags_SET+0x1d0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f014 fe5e 	bl	801f294 <vTaskSuspend>
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(PSV.PRESSURE_SUPPORT_Val );
 800a5d8:	4b1c      	ldr	r3, [pc, #112]	; (800a64c <PSV_Initial_Flags_SET+0x17c>)
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fe8e 	bl	8009300 <DAC_VAL>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	4b2e      	ldr	r3, [pc, #184]	; (800a6a4 <PSV_Initial_Flags_SET+0x1d4>)
 800a5ea:	811a      	strh	r2, [r3, #8]
	PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL           = DAC_VAL(PSV.PEEP_Val );
 800a5ec:	4b17      	ldr	r3, [pc, #92]	; (800a64c <PSV_Initial_Flags_SET+0x17c>)
 800a5ee:	789b      	ldrb	r3, [r3, #2]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe fe85 	bl	8009300 <DAC_VAL>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4b2b      	ldr	r3, [pc, #172]	; (800a6a8 <PSV_Initial_Flags_SET+0x1d8>)
 800a5fc:	80da      	strh	r2, [r3, #6]
	PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL      = PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 800a5fe:	4b2a      	ldr	r3, [pc, #168]	; (800a6a8 <PSV_Initial_Flags_SET+0x1d8>)
 800a600:	88da      	ldrh	r2, [r3, #6]
 800a602:	4b29      	ldr	r3, [pc, #164]	; (800a6a8 <PSV_Initial_Flags_SET+0x1d8>)
 800a604:	811a      	strh	r2, [r3, #8]
	PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL              = PSV.PRESSURE_SUPPORT_Val;
 800a606:	4b11      	ldr	r3, [pc, #68]	; (800a64c <PSV_Initial_Flags_SET+0x17c>)
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	4b27      	ldr	r3, [pc, #156]	; (800a6ac <PSV_Initial_Flags_SET+0x1dc>)
 800a60e:	731a      	strb	r2, [r3, #12]
	PSV_Peep_Average.PEEP_AVG_VAL                         = PSV.PEEP_Val;
 800a610:	4b0e      	ldr	r3, [pc, #56]	; (800a64c <PSV_Initial_Flags_SET+0x17c>)
 800a612:	789a      	ldrb	r2, [r3, #2]
 800a614:	4b26      	ldr	r3, [pc, #152]	; (800a6b0 <PSV_Initial_Flags_SET+0x1e0>)
 800a616:	721a      	strb	r2, [r3, #8]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800a618:	f000 fd06 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskResume(PSV_Handler);
 800a61c:	4b25      	ldr	r3, [pc, #148]	; (800a6b4 <PSV_Initial_Flags_SET+0x1e4>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4618      	mov	r0, r3
 800a622:	f014 fefb 	bl	801f41c <vTaskResume>
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800a626:	4b24      	ldr	r3, [pc, #144]	; (800a6b8 <PSV_Initial_Flags_SET+0x1e8>)
 800a628:	2200      	movs	r2, #0
 800a62a:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800a62c:	4b23      	ldr	r3, [pc, #140]	; (800a6bc <PSV_Initial_Flags_SET+0x1ec>)
 800a62e:	2200      	movs	r2, #0
 800a630:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800a632:	4b23      	ldr	r3, [pc, #140]	; (800a6c0 <PSV_Initial_Flags_SET+0x1f0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4618      	mov	r0, r3
 800a638:	f014 fe2c 	bl	801f294 <vTaskSuspend>
}
 800a63c:	bf00      	nop
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	20013ca8 	.word	0x20013ca8
 800a644:	200140d8 	.word	0x200140d8
 800a648:	20014248 	.word	0x20014248
 800a64c:	20013da4 	.word	0x20013da4
 800a650:	20013ba4 	.word	0x20013ba4
 800a654:	40007400 	.word	0x40007400
 800a658:	2001409c 	.word	0x2001409c
 800a65c:	20014074 	.word	0x20014074
 800a660:	40001800 	.word	0x40001800
 800a664:	20013f80 	.word	0x20013f80
 800a668:	20013ba0 	.word	0x20013ba0
 800a66c:	200142f8 	.word	0x200142f8
 800a670:	20013998 	.word	0x20013998
 800a674:	20013ca0 	.word	0x20013ca0
 800a678:	20014348 	.word	0x20014348
 800a67c:	200142e0 	.word	0x200142e0
 800a680:	20013f58 	.word	0x20013f58
 800a684:	20014020 	.word	0x20014020
 800a688:	20014094 	.word	0x20014094
 800a68c:	20013bb4 	.word	0x20013bb4
 800a690:	20014374 	.word	0x20014374
 800a694:	20013af0 	.word	0x20013af0
 800a698:	200141cc 	.word	0x200141cc
 800a69c:	20013f38 	.word	0x20013f38
 800a6a0:	20014148 	.word	0x20014148
 800a6a4:	20014030 	.word	0x20014030
 800a6a8:	20014284 	.word	0x20014284
 800a6ac:	20013b84 	.word	0x20013b84
 800a6b0:	20014258 	.word	0x20014258
 800a6b4:	20013fa8 	.word	0x20013fa8
 800a6b8:	20013f5d 	.word	0x20013f5d
 800a6bc:	20014338 	.word	0x20014338
 800a6c0:	2001406c 	.word	0x2001406c

0800a6c4 <CPAP_Initial_Flags_SET>:



void CPAP_Initial_Flags_SET()
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	af00      	add	r7, sp, #0
	APRV_current_breathe                   = APRV_IDLE;
 800a6c8:	4b57      	ldr	r3, [pc, #348]	; (800a828 <CPAP_Initial_Flags_SET+0x164>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                      = APRV_Idle;
 800a6ce:	4b57      	ldr	r3, [pc, #348]	; (800a82c <CPAP_Initial_Flags_SET+0x168>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	701a      	strb	r2, [r3, #0]
	CPAP_Control.CPAP_Settle_Time          = 2000;
 800a6d4:	4b56      	ldr	r3, [pc, #344]	; (800a830 <CPAP_Initial_Flags_SET+0x16c>)
 800a6d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a6da:	601a      	str	r2, [r3, #0]
	Common_Mode_Parameter.TOLERANCE_EWAVE  = CPAP.TOLERANCE_EWAVE ;
 800a6dc:	4b55      	ldr	r3, [pc, #340]	; (800a834 <CPAP_Initial_Flags_SET+0x170>)
 800a6de:	899a      	ldrh	r2, [r3, #12]
 800a6e0:	4b55      	ldr	r3, [pc, #340]	; (800a838 <CPAP_Initial_Flags_SET+0x174>)
 800a6e2:	811a      	strh	r2, [r3, #8]
	Common_Mode_Parameter.TRIG_WINDOW      = CPAP.TRIG_WINDOW;
 800a6e4:	4b53      	ldr	r3, [pc, #332]	; (800a834 <CPAP_Initial_Flags_SET+0x170>)
 800a6e6:	89da      	ldrh	r2, [r3, #14]
 800a6e8:	4b53      	ldr	r3, [pc, #332]	; (800a838 <CPAP_Initial_Flags_SET+0x174>)
 800a6ea:	815a      	strh	r2, [r3, #10]
	Common_Mode_Parameter.TRIG_LMT         = CPAP.TRIG_LMT;
 800a6ec:	4b51      	ldr	r3, [pc, #324]	; (800a834 <CPAP_Initial_Flags_SET+0x170>)
 800a6ee:	edd3 7a01 	vldr	s15, [r3, #4]
 800a6f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6f6:	ee17 3a90 	vmov	r3, s15
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	4b4e      	ldr	r3, [pc, #312]	; (800a838 <CPAP_Initial_Flags_SET+0x174>)
 800a6fe:	819a      	strh	r2, [r3, #12]
	Common_Mode_Parameter.TRIG_TIME        = CPAP.TRIG_TIME;
 800a700:	4b4c      	ldr	r3, [pc, #304]	; (800a834 <CPAP_Initial_Flags_SET+0x170>)
 800a702:	891a      	ldrh	r2, [r3, #8]
 800a704:	4b4c      	ldr	r3, [pc, #304]	; (800a838 <CPAP_Initial_Flags_SET+0x174>)
 800a706:	81da      	strh	r2, [r3, #14]
	Patient_Trigger_Count                  = 0;
 800a708:	4b4c      	ldr	r3, [pc, #304]	; (800a83c <CPAP_Initial_Flags_SET+0x178>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	601a      	str	r2, [r3, #0]
	Parkar_valve_Signal(0);
 800a70e:	4b4c      	ldr	r3, [pc, #304]	; (800a840 <CPAP_Initial_Flags_SET+0x17c>)
 800a710:	2200      	movs	r2, #0
 800a712:	615a      	str	r2, [r3, #20]
	Oxygen_Parameter.Servo_Position=45;
 800a714:	4b4b      	ldr	r3, [pc, #300]	; (800a844 <CPAP_Initial_Flags_SET+0x180>)
 800a716:	222d      	movs	r2, #45	; 0x2d
 800a718:	73da      	strb	r2, [r3, #15]
	Servo_Info(Oxygen_Parameter.Servo_Position);
 800a71a:	4b4a      	ldr	r3, [pc, #296]	; (800a844 <CPAP_Initial_Flags_SET+0x180>)
 800a71c:	7bdb      	ldrb	r3, [r3, #15]
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 f99e 	bl	800ba60 <Servo_Info>
	Servo_Position_Feedback = SERVO_FULL_OPEND;
 800a724:	4b48      	ldr	r3, [pc, #288]	; (800a848 <CPAP_Initial_Flags_SET+0x184>)
 800a726:	222d      	movs	r2, #45	; 0x2d
 800a728:	701a      	strb	r2, [r3, #0]
	Servo_Angle(Oxygen_Parameter.Servo_Position);
 800a72a:	4b46      	ldr	r3, [pc, #280]	; (800a844 <CPAP_Initial_Flags_SET+0x180>)
 800a72c:	7bda      	ldrb	r2, [r3, #15]
 800a72e:	4b47      	ldr	r3, [pc, #284]	; (800a84c <CPAP_Initial_Flags_SET+0x188>)
 800a730:	635a      	str	r2, [r3, #52]	; 0x34
	vTaskSuspend(Pc_Cmv_Handler);
 800a732:	4b47      	ldr	r3, [pc, #284]	; (800a850 <CPAP_Initial_Flags_SET+0x18c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4618      	mov	r0, r3
 800a738:	f014 fdac 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800a73c:	4b45      	ldr	r3, [pc, #276]	; (800a854 <CPAP_Initial_Flags_SET+0x190>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4618      	mov	r0, r3
 800a742:	f014 fda7 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800a746:	4b44      	ldr	r3, [pc, #272]	; (800a858 <CPAP_Initial_Flags_SET+0x194>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f014 fda2 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800a750:	4b42      	ldr	r3, [pc, #264]	; (800a85c <CPAP_Initial_Flags_SET+0x198>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4618      	mov	r0, r3
 800a756:	f014 fd9d 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800a75a:	4b41      	ldr	r3, [pc, #260]	; (800a860 <CPAP_Initial_Flags_SET+0x19c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4618      	mov	r0, r3
 800a760:	f014 fd98 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800a764:	4b3f      	ldr	r3, [pc, #252]	; (800a864 <CPAP_Initial_Flags_SET+0x1a0>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	f014 fd93 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800a76e:	4b3e      	ldr	r3, [pc, #248]	; (800a868 <CPAP_Initial_Flags_SET+0x1a4>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4618      	mov	r0, r3
 800a774:	f014 fd8e 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800a778:	4b3c      	ldr	r3, [pc, #240]	; (800a86c <CPAP_Initial_Flags_SET+0x1a8>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f014 fd89 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800a782:	4b3b      	ldr	r3, [pc, #236]	; (800a870 <CPAP_Initial_Flags_SET+0x1ac>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f014 fd84 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800a78c:	4b39      	ldr	r3, [pc, #228]	; (800a874 <CPAP_Initial_Flags_SET+0x1b0>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4618      	mov	r0, r3
 800a792:	f014 fd7f 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800a796:	4b38      	ldr	r3, [pc, #224]	; (800a878 <CPAP_Initial_Flags_SET+0x1b4>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f014 fd7a 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 800a7a0:	4b36      	ldr	r3, [pc, #216]	; (800a87c <CPAP_Initial_Flags_SET+0x1b8>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f014 fd75 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800a7aa:	4b35      	ldr	r3, [pc, #212]	; (800a880 <CPAP_Initial_Flags_SET+0x1bc>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f014 fd70 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800a7b4:	4b33      	ldr	r3, [pc, #204]	; (800a884 <CPAP_Initial_Flags_SET+0x1c0>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f014 fd6b 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800a7be:	4b32      	ldr	r3, [pc, #200]	; (800a888 <CPAP_Initial_Flags_SET+0x1c4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f014 fd66 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800a7c8:	4b30      	ldr	r3, [pc, #192]	; (800a88c <CPAP_Initial_Flags_SET+0x1c8>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f014 fd61 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800a7d2:	4b2f      	ldr	r3, [pc, #188]	; (800a890 <CPAP_Initial_Flags_SET+0x1cc>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f014 fd5c 	bl	801f294 <vTaskSuspend>
	CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL           = DAC_VAL(CPAP.CPAP_Val );
 800a7dc:	4b15      	ldr	r3, [pc, #84]	; (800a834 <CPAP_Initial_Flags_SET+0x170>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fe fd8d 	bl	8009300 <DAC_VAL>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	4b2a      	ldr	r3, [pc, #168]	; (800a894 <CPAP_Initial_Flags_SET+0x1d0>)
 800a7ec:	805a      	strh	r2, [r3, #2]
	CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL      = CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL;
 800a7ee:	4b29      	ldr	r3, [pc, #164]	; (800a894 <CPAP_Initial_Flags_SET+0x1d0>)
 800a7f0:	885a      	ldrh	r2, [r3, #2]
 800a7f2:	4b28      	ldr	r3, [pc, #160]	; (800a894 <CPAP_Initial_Flags_SET+0x1d0>)
 800a7f4:	809a      	strh	r2, [r3, #4]
	CPAP_Average.CPAP_AVG_VAL                              = CPAP.CPAP_Val;
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <CPAP_Initial_Flags_SET+0x170>)
 800a7f8:	781a      	ldrb	r2, [r3, #0]
 800a7fa:	4b27      	ldr	r3, [pc, #156]	; (800a898 <CPAP_Initial_Flags_SET+0x1d4>)
 800a7fc:	721a      	strb	r2, [r3, #8]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800a7fe:	f000 fc13 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskResume(CPAP_Handler);
 800a802:	4b26      	ldr	r3, [pc, #152]	; (800a89c <CPAP_Initial_Flags_SET+0x1d8>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4618      	mov	r0, r3
 800a808:	f014 fe08 	bl	801f41c <vTaskResume>
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800a80c:	4b24      	ldr	r3, [pc, #144]	; (800a8a0 <CPAP_Initial_Flags_SET+0x1dc>)
 800a80e:	2200      	movs	r2, #0
 800a810:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800a812:	4b24      	ldr	r3, [pc, #144]	; (800a8a4 <CPAP_Initial_Flags_SET+0x1e0>)
 800a814:	2200      	movs	r2, #0
 800a816:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800a818:	4b23      	ldr	r3, [pc, #140]	; (800a8a8 <CPAP_Initial_Flags_SET+0x1e4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f014 fd39 	bl	801f294 <vTaskSuspend>
}
 800a822:	bf00      	nop
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20013ca8 	.word	0x20013ca8
 800a82c:	200140d8 	.word	0x200140d8
 800a830:	20013c90 	.word	0x20013c90
 800a834:	20013b14 	.word	0x20013b14
 800a838:	20013ba4 	.word	0x20013ba4
 800a83c:	200140d4 	.word	0x200140d4
 800a840:	40007400 	.word	0x40007400
 800a844:	2001409c 	.word	0x2001409c
 800a848:	20014074 	.word	0x20014074
 800a84c:	40001800 	.word	0x40001800
 800a850:	20013f80 	.word	0x20013f80
 800a854:	20013ba0 	.word	0x20013ba0
 800a858:	200142f8 	.word	0x200142f8
 800a85c:	20013998 	.word	0x20013998
 800a860:	20013ca0 	.word	0x20013ca0
 800a864:	20014348 	.word	0x20014348
 800a868:	200142e0 	.word	0x200142e0
 800a86c:	20013f58 	.word	0x20013f58
 800a870:	20014020 	.word	0x20014020
 800a874:	20014094 	.word	0x20014094
 800a878:	20013bb4 	.word	0x20013bb4
 800a87c:	20013fa8 	.word	0x20013fa8
 800a880:	20013f20 	.word	0x20013f20
 800a884:	20013af0 	.word	0x20013af0
 800a888:	200141cc 	.word	0x200141cc
 800a88c:	20013f38 	.word	0x20013f38
 800a890:	20014148 	.word	0x20014148
 800a894:	20013adc 	.word	0x20013adc
 800a898:	20013f8c 	.word	0x20013f8c
 800a89c:	20014374 	.word	0x20014374
 800a8a0:	20013f5d 	.word	0x20013f5d
 800a8a4:	20014338 	.word	0x20014338
 800a8a8:	2001406c 	.word	0x2001406c

0800a8ac <BIBAP_Initial_Flags_SET>:



void BIBAP_Initial_Flags_SET()
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	af00      	add	r7, sp, #0
	APRV_current_breathe                   = APRV_IDLE;
 800a8b0:	4b5a      	ldr	r3, [pc, #360]	; (800aa1c <BIBAP_Initial_Flags_SET+0x170>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                      = APRV_Idle;
 800a8b6:	4b5a      	ldr	r3, [pc, #360]	; (800aa20 <BIBAP_Initial_Flags_SET+0x174>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	701a      	strb	r2, [r3, #0]
	BIPAP_Control.BIPAP_EPAP_Settle_Time   = 2000;
 800a8bc:	4b59      	ldr	r3, [pc, #356]	; (800aa24 <BIBAP_Initial_Flags_SET+0x178>)
 800a8be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a8c2:	601a      	str	r2, [r3, #0]
	Common_Mode_Parameter.TOLERANCE_EWAVE  = BIPAP.TOLERANCE_EWAVE ;
 800a8c4:	4b58      	ldr	r3, [pc, #352]	; (800aa28 <BIBAP_Initial_Flags_SET+0x17c>)
 800a8c6:	8a1a      	ldrh	r2, [r3, #16]
 800a8c8:	4b58      	ldr	r3, [pc, #352]	; (800aa2c <BIBAP_Initial_Flags_SET+0x180>)
 800a8ca:	811a      	strh	r2, [r3, #8]
	Common_Mode_Parameter.TRIG_WINDOW      = BIPAP.TRIG_WINDOW;
 800a8cc:	4b56      	ldr	r3, [pc, #344]	; (800aa28 <BIBAP_Initial_Flags_SET+0x17c>)
 800a8ce:	8a5a      	ldrh	r2, [r3, #18]
 800a8d0:	4b56      	ldr	r3, [pc, #344]	; (800aa2c <BIBAP_Initial_Flags_SET+0x180>)
 800a8d2:	815a      	strh	r2, [r3, #10]
	Common_Mode_Parameter.TRIG_LMT         = BIPAP.TRIG_LMT;
 800a8d4:	4b54      	ldr	r3, [pc, #336]	; (800aa28 <BIBAP_Initial_Flags_SET+0x17c>)
 800a8d6:	edd3 7a02 	vldr	s15, [r3, #8]
 800a8da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8de:	ee17 3a90 	vmov	r3, s15
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	4b51      	ldr	r3, [pc, #324]	; (800aa2c <BIBAP_Initial_Flags_SET+0x180>)
 800a8e6:	819a      	strh	r2, [r3, #12]
	Common_Mode_Parameter.TRIG_TIME        = BIPAP.TRIG_TIME;
 800a8e8:	4b4f      	ldr	r3, [pc, #316]	; (800aa28 <BIBAP_Initial_Flags_SET+0x17c>)
 800a8ea:	899a      	ldrh	r2, [r3, #12]
 800a8ec:	4b4f      	ldr	r3, [pc, #316]	; (800aa2c <BIBAP_Initial_Flags_SET+0x180>)
 800a8ee:	81da      	strh	r2, [r3, #14]
	Parkar_valve_Signal(0);
 800a8f0:	4b4f      	ldr	r3, [pc, #316]	; (800aa30 <BIBAP_Initial_Flags_SET+0x184>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	615a      	str	r2, [r3, #20]
	Oxygen_Parameter.Servo_Position=45;
 800a8f6:	4b4f      	ldr	r3, [pc, #316]	; (800aa34 <BIBAP_Initial_Flags_SET+0x188>)
 800a8f8:	222d      	movs	r2, #45	; 0x2d
 800a8fa:	73da      	strb	r2, [r3, #15]
	Servo_Info(Oxygen_Parameter.Servo_Position);
 800a8fc:	4b4d      	ldr	r3, [pc, #308]	; (800aa34 <BIBAP_Initial_Flags_SET+0x188>)
 800a8fe:	7bdb      	ldrb	r3, [r3, #15]
 800a900:	4618      	mov	r0, r3
 800a902:	f001 f8ad 	bl	800ba60 <Servo_Info>
	Servo_Position_Feedback = SERVO_FULL_OPEND;
 800a906:	4b4c      	ldr	r3, [pc, #304]	; (800aa38 <BIBAP_Initial_Flags_SET+0x18c>)
 800a908:	222d      	movs	r2, #45	; 0x2d
 800a90a:	701a      	strb	r2, [r3, #0]
	Servo_Angle(Oxygen_Parameter.Servo_Position);
 800a90c:	4b49      	ldr	r3, [pc, #292]	; (800aa34 <BIBAP_Initial_Flags_SET+0x188>)
 800a90e:	7bda      	ldrb	r2, [r3, #15]
 800a910:	4b4a      	ldr	r3, [pc, #296]	; (800aa3c <BIBAP_Initial_Flags_SET+0x190>)
 800a912:	635a      	str	r2, [r3, #52]	; 0x34
	vTaskSuspend(Pc_Cmv_Handler);
 800a914:	4b4a      	ldr	r3, [pc, #296]	; (800aa40 <BIBAP_Initial_Flags_SET+0x194>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4618      	mov	r0, r3
 800a91a:	f014 fcbb 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800a91e:	4b49      	ldr	r3, [pc, #292]	; (800aa44 <BIBAP_Initial_Flags_SET+0x198>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4618      	mov	r0, r3
 800a924:	f014 fcb6 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800a928:	4b47      	ldr	r3, [pc, #284]	; (800aa48 <BIBAP_Initial_Flags_SET+0x19c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f014 fcb1 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800a932:	4b46      	ldr	r3, [pc, #280]	; (800aa4c <BIBAP_Initial_Flags_SET+0x1a0>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4618      	mov	r0, r3
 800a938:	f014 fcac 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800a93c:	4b44      	ldr	r3, [pc, #272]	; (800aa50 <BIBAP_Initial_Flags_SET+0x1a4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4618      	mov	r0, r3
 800a942:	f014 fca7 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800a946:	4b43      	ldr	r3, [pc, #268]	; (800aa54 <BIBAP_Initial_Flags_SET+0x1a8>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f014 fca2 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800a950:	4b41      	ldr	r3, [pc, #260]	; (800aa58 <BIBAP_Initial_Flags_SET+0x1ac>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4618      	mov	r0, r3
 800a956:	f014 fc9d 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800a95a:	4b40      	ldr	r3, [pc, #256]	; (800aa5c <BIBAP_Initial_Flags_SET+0x1b0>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4618      	mov	r0, r3
 800a960:	f014 fc98 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800a964:	4b3e      	ldr	r3, [pc, #248]	; (800aa60 <BIBAP_Initial_Flags_SET+0x1b4>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f014 fc93 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800a96e:	4b3d      	ldr	r3, [pc, #244]	; (800aa64 <BIBAP_Initial_Flags_SET+0x1b8>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4618      	mov	r0, r3
 800a974:	f014 fc8e 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800a978:	4b3b      	ldr	r3, [pc, #236]	; (800aa68 <BIBAP_Initial_Flags_SET+0x1bc>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f014 fc89 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 800a982:	4b3a      	ldr	r3, [pc, #232]	; (800aa6c <BIBAP_Initial_Flags_SET+0x1c0>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4618      	mov	r0, r3
 800a988:	f014 fc84 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800a98c:	4b38      	ldr	r3, [pc, #224]	; (800aa70 <BIBAP_Initial_Flags_SET+0x1c4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4618      	mov	r0, r3
 800a992:	f014 fc7f 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800a996:	4b37      	ldr	r3, [pc, #220]	; (800aa74 <BIBAP_Initial_Flags_SET+0x1c8>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f014 fc7a 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800a9a0:	4b35      	ldr	r3, [pc, #212]	; (800aa78 <BIBAP_Initial_Flags_SET+0x1cc>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f014 fc75 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800a9aa:	4b34      	ldr	r3, [pc, #208]	; (800aa7c <BIBAP_Initial_Flags_SET+0x1d0>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f014 fc70 	bl	801f294 <vTaskSuspend>
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL   = DAC_VAL(BIPAP.IPAP_Val );
 800a9b4:	4b1c      	ldr	r3, [pc, #112]	; (800aa28 <BIBAP_Initial_Flags_SET+0x17c>)
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe fca0 	bl	8009300 <DAC_VAL>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4b2e      	ldr	r3, [pc, #184]	; (800aa80 <BIBAP_Initial_Flags_SET+0x1d4>)
 800a9c6:	811a      	strh	r2, [r3, #8]
	BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL           = DAC_VAL(BIPAP.EPAP_Val );
 800a9c8:	4b17      	ldr	r3, [pc, #92]	; (800aa28 <BIBAP_Initial_Flags_SET+0x17c>)
 800a9ca:	789b      	ldrb	r3, [r3, #2]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fe fc97 	bl	8009300 <DAC_VAL>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4b2b      	ldr	r3, [pc, #172]	; (800aa84 <BIBAP_Initial_Flags_SET+0x1d8>)
 800a9d8:	80da      	strh	r2, [r3, #6]
	BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL      = BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL;
 800a9da:	4b2a      	ldr	r3, [pc, #168]	; (800aa84 <BIBAP_Initial_Flags_SET+0x1d8>)
 800a9dc:	88da      	ldrh	r2, [r3, #6]
 800a9de:	4b29      	ldr	r3, [pc, #164]	; (800aa84 <BIBAP_Initial_Flags_SET+0x1d8>)
 800a9e0:	811a      	strh	r2, [r3, #8]
	BIPAP_Pip_average.IPAP_AVG_VAL                          = BIPAP.IPAP_Val;
 800a9e2:	4b11      	ldr	r3, [pc, #68]	; (800aa28 <BIBAP_Initial_Flags_SET+0x17c>)
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	4b27      	ldr	r3, [pc, #156]	; (800aa88 <BIBAP_Initial_Flags_SET+0x1dc>)
 800a9ea:	731a      	strb	r2, [r3, #12]
	BIPAP_Peep_Average.EPAP_AVG_VAL                         = BIPAP.EPAP_Val;
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <BIBAP_Initial_Flags_SET+0x17c>)
 800a9ee:	789a      	ldrb	r2, [r3, #2]
 800a9f0:	4b26      	ldr	r3, [pc, #152]	; (800aa8c <BIBAP_Initial_Flags_SET+0x1e0>)
 800a9f2:	721a      	strb	r2, [r3, #8]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800a9f4:	f000 fb18 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskResume(BIPAP_Handler);
 800a9f8:	4b25      	ldr	r3, [pc, #148]	; (800aa90 <BIBAP_Initial_Flags_SET+0x1e4>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f014 fd0d 	bl	801f41c <vTaskResume>
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800aa02:	4b24      	ldr	r3, [pc, #144]	; (800aa94 <BIBAP_Initial_Flags_SET+0x1e8>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800aa08:	4b23      	ldr	r3, [pc, #140]	; (800aa98 <BIBAP_Initial_Flags_SET+0x1ec>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800aa0e:	4b23      	ldr	r3, [pc, #140]	; (800aa9c <BIBAP_Initial_Flags_SET+0x1f0>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f014 fc3e 	bl	801f294 <vTaskSuspend>
}
 800aa18:	bf00      	nop
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20013ca8 	.word	0x20013ca8
 800aa20:	200140d8 	.word	0x200140d8
 800aa24:	20014048 	.word	0x20014048
 800aa28:	20013b50 	.word	0x20013b50
 800aa2c:	20013ba4 	.word	0x20013ba4
 800aa30:	40007400 	.word	0x40007400
 800aa34:	2001409c 	.word	0x2001409c
 800aa38:	20014074 	.word	0x20014074
 800aa3c:	40001800 	.word	0x40001800
 800aa40:	20013f80 	.word	0x20013f80
 800aa44:	20013ba0 	.word	0x20013ba0
 800aa48:	200142f8 	.word	0x200142f8
 800aa4c:	20013998 	.word	0x20013998
 800aa50:	20013ca0 	.word	0x20013ca0
 800aa54:	20014348 	.word	0x20014348
 800aa58:	200142e0 	.word	0x200142e0
 800aa5c:	20013f58 	.word	0x20013f58
 800aa60:	20014020 	.word	0x20014020
 800aa64:	20014094 	.word	0x20014094
 800aa68:	20013bb4 	.word	0x20013bb4
 800aa6c:	20013fa8 	.word	0x20013fa8
 800aa70:	20013f20 	.word	0x20013f20
 800aa74:	20014374 	.word	0x20014374
 800aa78:	20013f38 	.word	0x20013f38
 800aa7c:	20014148 	.word	0x20014148
 800aa80:	20014030 	.word	0x20014030
 800aa84:	20013d28 	.word	0x20013d28
 800aa88:	200141d0 	.word	0x200141d0
 800aa8c:	200139cc 	.word	0x200139cc
 800aa90:	20013af0 	.word	0x20013af0
 800aa94:	20013f5d 	.word	0x20013f5d
 800aa98:	20014338 	.word	0x20014338
 800aa9c:	2001406c 	.word	0x2001406c

0800aaa0 <APRV_Initial_Flags_SET>:



void APRV_Initial_Flags_SET()
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
	LED_STATUS = Idle_LED;
 800aaa4:	4b4f      	ldr	r3, [pc, #316]	; (800abe4 <APRV_Initial_Flags_SET+0x144>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PIP_Val                     = APRV.P_HIGH;
 800aaaa:	4b4f      	ldr	r3, [pc, #316]	; (800abe8 <APRV_Initial_Flags_SET+0x148>)
 800aaac:	781a      	ldrb	r2, [r3, #0]
 800aaae:	4b4f      	ldr	r3, [pc, #316]	; (800abec <APRV_Initial_Flags_SET+0x14c>)
 800aab0:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                    = APRV.P_LOW;
 800aab2:	4b4d      	ldr	r3, [pc, #308]	; (800abe8 <APRV_Initial_Flags_SET+0x148>)
 800aab4:	785a      	ldrb	r2, [r3, #1]
 800aab6:	4b4d      	ldr	r3, [pc, #308]	; (800abec <APRV_Initial_Flags_SET+0x14c>)
 800aab8:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._FIO2_Val                    = APRV.FIO2_VAL;
 800aaba:	4b4b      	ldr	r3, [pc, #300]	; (800abe8 <APRV_Initial_Flags_SET+0x148>)
 800aabc:	7d1a      	ldrb	r2, [r3, #20]
 800aabe:	4b4b      	ldr	r3, [pc, #300]	; (800abec <APRV_Initial_Flags_SET+0x14c>)
 800aac0:	70da      	strb	r2, [r3, #3]
	vTaskSuspend(Pc_Cmv_Handler);
 800aac2:	4b4b      	ldr	r3, [pc, #300]	; (800abf0 <APRV_Initial_Flags_SET+0x150>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f014 fbe4 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800aacc:	4b49      	ldr	r3, [pc, #292]	; (800abf4 <APRV_Initial_Flags_SET+0x154>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f014 fbdf 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800aad6:	4b48      	ldr	r3, [pc, #288]	; (800abf8 <APRV_Initial_Flags_SET+0x158>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	f014 fbda 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800aae0:	4b46      	ldr	r3, [pc, #280]	; (800abfc <APRV_Initial_Flags_SET+0x15c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f014 fbd5 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800aaea:	4b45      	ldr	r3, [pc, #276]	; (800ac00 <APRV_Initial_Flags_SET+0x160>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f014 fbd0 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800aaf4:	4b43      	ldr	r3, [pc, #268]	; (800ac04 <APRV_Initial_Flags_SET+0x164>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f014 fbcb 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800aafe:	4b42      	ldr	r3, [pc, #264]	; (800ac08 <APRV_Initial_Flags_SET+0x168>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f014 fbc6 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800ab08:	4b40      	ldr	r3, [pc, #256]	; (800ac0c <APRV_Initial_Flags_SET+0x16c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f014 fbc1 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800ab12:	4b3f      	ldr	r3, [pc, #252]	; (800ac10 <APRV_Initial_Flags_SET+0x170>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f014 fbbc 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800ab1c:	4b3d      	ldr	r3, [pc, #244]	; (800ac14 <APRV_Initial_Flags_SET+0x174>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f014 fbb7 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800ab26:	4b3c      	ldr	r3, [pc, #240]	; (800ac18 <APRV_Initial_Flags_SET+0x178>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f014 fbb2 	bl	801f294 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 800ab30:	4b3a      	ldr	r3, [pc, #232]	; (800ac1c <APRV_Initial_Flags_SET+0x17c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f014 fbad 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800ab3a:	4b39      	ldr	r3, [pc, #228]	; (800ac20 <APRV_Initial_Flags_SET+0x180>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f014 fba8 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800ab44:	4b37      	ldr	r3, [pc, #220]	; (800ac24 <APRV_Initial_Flags_SET+0x184>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f014 fba3 	bl	801f294 <vTaskSuspend>
	APRV_PIP_average.PIP_Cumulative_Val                 = 1;
 800ab4e:	4b36      	ldr	r3, [pc, #216]	; (800ac28 <APRV_Initial_Flags_SET+0x188>)
 800ab50:	2201      	movs	r2, #1
 800ab52:	601a      	str	r2, [r3, #0]
	APRV_PIP_average.PIP_Event_Count                    = 1;
 800ab54:	4b34      	ldr	r3, [pc, #208]	; (800ac28 <APRV_Initial_Flags_SET+0x188>)
 800ab56:	2201      	movs	r2, #1
 800ab58:	605a      	str	r2, [r3, #4]
	APRV_PEEP_average.PEEP_Cumulative_Val               = 1;
 800ab5a:	4b34      	ldr	r3, [pc, #208]	; (800ac2c <APRV_Initial_Flags_SET+0x18c>)
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	601a      	str	r2, [r3, #0]
	APRV_PEEP_average.PEEP_Event_Count                  = 1;
 800ab60:	4b32      	ldr	r3, [pc, #200]	; (800ac2c <APRV_Initial_Flags_SET+0x18c>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	605a      	str	r2, [r3, #4]

	APRV_Next_Breathe                                   = APRV_EXPIRATION;
 800ab66:	4b32      	ldr	r3, [pc, #200]	; (800ac30 <APRV_Initial_Flags_SET+0x190>)
 800ab68:	2202      	movs	r2, #2
 800ab6a:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                                = APRV_EXP;
 800ab6c:	4b31      	ldr	r3, [pc, #196]	; (800ac34 <APRV_Initial_Flags_SET+0x194>)
 800ab6e:	2202      	movs	r2, #2
 800ab70:	701a      	strb	r2, [r3, #0]

	APRV.T_LOW_VAL_COUNTER                              = APRV.T_LOW_VAL;
 800ab72:	4b1d      	ldr	r3, [pc, #116]	; (800abe8 <APRV_Initial_Flags_SET+0x148>)
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	4a1c      	ldr	r2, [pc, #112]	; (800abe8 <APRV_Initial_Flags_SET+0x148>)
 800ab78:	60d3      	str	r3, [r2, #12]



	PEEP_Maintain_Parameter.PEEP_Temp                   = APRV.P_LOW;
 800ab7a:	4b1b      	ldr	r3, [pc, #108]	; (800abe8 <APRV_Initial_Flags_SET+0x148>)
 800ab7c:	785b      	ldrb	r3, [r3, #1]
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab86:	4b2c      	ldr	r3, [pc, #176]	; (800ac38 <APRV_Initial_Flags_SET+0x198>)
 800ab88:	edc3 7a00 	vstr	s15, [r3]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  =1;
 800ab8c:	4b2a      	ldr	r3, [pc, #168]	; (800ac38 <APRV_Initial_Flags_SET+0x198>)
 800ab8e:	2201      	movs	r2, #1
 800ab90:	809a      	strh	r2, [r3, #4]
	APRV_mode_blower_control.BLOWER_DAC_VAL = DAC_VAL(APRV.P_HIGH );
 800ab92:	4b15      	ldr	r3, [pc, #84]	; (800abe8 <APRV_Initial_Flags_SET+0x148>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe fbb2 	bl	8009300 <DAC_VAL>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	461a      	mov	r2, r3
 800aba0:	4b26      	ldr	r3, [pc, #152]	; (800ac3c <APRV_Initial_Flags_SET+0x19c>)
 800aba2:	801a      	strh	r2, [r3, #0]



	Fio2_Blending_Method  = PRESSURE_CONTROLLED;
 800aba4:	4b26      	ldr	r3, [pc, #152]	; (800ac40 <APRV_Initial_Flags_SET+0x1a0>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	701a      	strb	r2, [r3, #0]
	O2_Initial_Parameter(APRV.FIO2_VAL);
 800abaa:	4b0f      	ldr	r3, [pc, #60]	; (800abe8 <APRV_Initial_Flags_SET+0x148>)
 800abac:	7d1b      	ldrb	r3, [r3, #20]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 ff22 	bl	800b9f8 <O2_Initial_Parameter>

	vTaskResume(APRV_ONE_TIME_Handler);
 800abb4:	4b23      	ldr	r3, [pc, #140]	; (800ac44 <APRV_Initial_Flags_SET+0x1a4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	f014 fc2f 	bl	801f41c <vTaskResume>
	vTaskResume(APRV_Handler);
 800abbe:	4b22      	ldr	r3, [pc, #136]	; (800ac48 <APRV_Initial_Flags_SET+0x1a8>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f014 fc2a 	bl	801f41c <vTaskResume>
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800abc8:	4b20      	ldr	r3, [pc, #128]	; (800ac4c <APRV_Initial_Flags_SET+0x1ac>)
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800abce:	4b20      	ldr	r3, [pc, #128]	; (800ac50 <APRV_Initial_Flags_SET+0x1b0>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800abd4:	4b1f      	ldr	r3, [pc, #124]	; (800ac54 <APRV_Initial_Flags_SET+0x1b4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4618      	mov	r0, r3
 800abda:	f014 fb5b 	bl	801f294 <vTaskSuspend>
}
 800abde:	bf00      	nop
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20013aed 	.word	0x20013aed
 800abe8:	200140dc 	.word	0x200140dc
 800abec:	20013ba4 	.word	0x20013ba4
 800abf0:	20013f80 	.word	0x20013f80
 800abf4:	20013ba0 	.word	0x20013ba0
 800abf8:	200142f8 	.word	0x200142f8
 800abfc:	20013998 	.word	0x20013998
 800ac00:	20013ca0 	.word	0x20013ca0
 800ac04:	20014348 	.word	0x20014348
 800ac08:	200142e0 	.word	0x200142e0
 800ac0c:	20013f58 	.word	0x20013f58
 800ac10:	20014020 	.word	0x20014020
 800ac14:	20014094 	.word	0x20014094
 800ac18:	20013bb4 	.word	0x20013bb4
 800ac1c:	20013fa8 	.word	0x20013fa8
 800ac20:	20013f20 	.word	0x20013f20
 800ac24:	20014374 	.word	0x20014374
 800ac28:	20014160 	.word	0x20014160
 800ac2c:	20013f4c 	.word	0x20013f4c
 800ac30:	200140d8 	.word	0x200140d8
 800ac34:	20013ca8 	.word	0x20013ca8
 800ac38:	20014300 	.word	0x20014300
 800ac3c:	200139f0 	.word	0x200139f0
 800ac40:	20013aec 	.word	0x20013aec
 800ac44:	20014148 	.word	0x20014148
 800ac48:	20013f38 	.word	0x20013f38
 800ac4c:	20013f5d 	.word	0x20013f5d
 800ac50:	20014338 	.word	0x20014338
 800ac54:	2001406c 	.word	0x2001406c

0800ac58 <Backup_PC_CMV_Initial_Flags_SET>:


void Backup_PC_CMV_Initial_Flags_SET()
{
 800ac58:	b5b0      	push	{r4, r5, r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
	Common_Mode_Parameter._PIP_Val                        = BACKUP_PC_CMV.PIP_Val;
 800ac5c:	4b92      	ldr	r3, [pc, #584]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ac5e:	781a      	ldrb	r2, [r3, #0]
 800ac60:	4b92      	ldr	r3, [pc, #584]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800ac62:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = BACKUP_PC_CMV.PEEP_Val;
 800ac64:	4b90      	ldr	r3, [pc, #576]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ac66:	785a      	ldrb	r2, [r3, #1]
 800ac68:	4b90      	ldr	r3, [pc, #576]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800ac6a:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = BACKUP_PC_CMV.RESPIRATORY_RATE_Val;
 800ac6c:	4b8e      	ldr	r3, [pc, #568]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ac6e:	789a      	ldrb	r2, [r3, #2]
 800ac70:	4b8e      	ldr	r3, [pc, #568]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800ac72:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = BACKUP_PC_CMV.FIO2_Val;
 800ac74:	4b8c      	ldr	r3, [pc, #560]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ac76:	78da      	ldrb	r2, [r3, #3]
 800ac78:	4b8c      	ldr	r3, [pc, #560]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800ac7a:	70da      	strb	r2, [r3, #3]
	Reset_PC_CMV_BACKUP_Old_Flags_Reset();
 800ac7c:	f000 f9b6 	bl	800afec <Reset_PC_CMV_BACKUP_Old_Flags_Reset>
    if(  (OLD.Last_RR_Val_PC_CMV_BACKUP != BACKUP_PC_CMV.RESPIRATORY_RATE_Val) || (OLD.Last_PIP_Val_PC_CMV_BACKUP    != BACKUP_PC_CMV.PIP_Val)
 800ac80:	4b8b      	ldr	r3, [pc, #556]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ac82:	791a      	ldrb	r2, [r3, #4]
 800ac84:	4b88      	ldr	r3, [pc, #544]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ac86:	789b      	ldrb	r3, [r3, #2]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d124      	bne.n	800acd6 <Backup_PC_CMV_Initial_Flags_SET+0x7e>
 800ac8c:	4b88      	ldr	r3, [pc, #544]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ac8e:	785a      	ldrb	r2, [r3, #1]
 800ac90:	4b85      	ldr	r3, [pc, #532]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d11e      	bne.n	800acd6 <Backup_PC_CMV_Initial_Flags_SET+0x7e>
    		                                                                   || (OLD.Last_Rise_Time_PC_CMV_BACKUP  != BACKUP_PC_CMV.Rise_Time )
 800ac98:	4b85      	ldr	r3, [pc, #532]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ac9a:	789a      	ldrb	r2, [r3, #2]
 800ac9c:	4b82      	ldr	r3, [pc, #520]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ac9e:	7c9b      	ldrb	r3, [r3, #18]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d118      	bne.n	800acd6 <Backup_PC_CMV_Initial_Flags_SET+0x7e>
																		       || (OLD.Last_I_Val_PC_CMV_BACKUP      != BACKUP_PC_CMV.Inspiration_Time_Ratio)
 800aca4:	4b82      	ldr	r3, [pc, #520]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800aca6:	795a      	ldrb	r2, [r3, #5]
 800aca8:	4b7f      	ldr	r3, [pc, #508]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800acaa:	7c1b      	ldrb	r3, [r3, #16]
 800acac:	429a      	cmp	r2, r3
 800acae:	d112      	bne.n	800acd6 <Backup_PC_CMV_Initial_Flags_SET+0x7e>
																		       || (OLD.Last_E_Val_PC_CMV_BACKUP      != BACKUP_PC_CMV.Expiration_Time_Ratio)
 800acb0:	4b7f      	ldr	r3, [pc, #508]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800acb2:	799a      	ldrb	r2, [r3, #6]
 800acb4:	4b7c      	ldr	r3, [pc, #496]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800acb6:	7c5b      	ldrb	r3, [r3, #17]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d10c      	bne.n	800acd6 <Backup_PC_CMV_Initial_Flags_SET+0x7e>
																			   || (OLD.Last_PEEP_Val_PC_CMV_BACKUP   != BACKUP_PC_CMV.PEEP_Val)
 800acbc:	4b7c      	ldr	r3, [pc, #496]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800acbe:	781a      	ldrb	r2, [r3, #0]
 800acc0:	4b79      	ldr	r3, [pc, #484]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800acc2:	785b      	ldrb	r3, [r3, #1]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d106      	bne.n	800acd6 <Backup_PC_CMV_Initial_Flags_SET+0x7e>
																			   || (OLD.Last_O2_Val_PC_CMV_BACKUP     != BACKUP_PC_CMV.FIO2_Val ))
 800acc8:	4b79      	ldr	r3, [pc, #484]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800acca:	78da      	ldrb	r2, [r3, #3]
 800accc:	4b76      	ldr	r3, [pc, #472]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800acce:	78db      	ldrb	r3, [r3, #3]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	f000 8107 	beq.w	800aee4 <Backup_PC_CMV_Initial_Flags_SET+0x28c>
    {
    	BACKUP_PC_CMV.RISE_TIME_MS_Val       = ((float)BACKUP_PC_CMV.Rise_Time/100.00)*(BACKUP_PC_CMV.INSPIRATION_TIME) ;
 800acd6:	4b74      	ldr	r3, [pc, #464]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800acd8:	7c9b      	ldrb	r3, [r3, #18]
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace2:	ee17 0a90 	vmov	r0, s15
 800ace6:	f7f5 fbd7 	bl	8000498 <__aeabi_f2d>
 800acea:	f04f 0200 	mov.w	r2, #0
 800acee:	4b71      	ldr	r3, [pc, #452]	; (800aeb4 <Backup_PC_CMV_Initial_Flags_SET+0x25c>)
 800acf0:	f7f5 fd54 	bl	800079c <__aeabi_ddiv>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4614      	mov	r4, r2
 800acfa:	461d      	mov	r5, r3
 800acfc:	4b6a      	ldr	r3, [pc, #424]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7f5 fba7 	bl	8000454 <__aeabi_ui2d>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7f5 fc1b 	bl	8000548 <__aeabi_dmul>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	4610      	mov	r0, r2
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f7f5 fef7 	bl	8000b0c <__aeabi_d2f>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	4a61      	ldr	r2, [pc, #388]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad22:	6053      	str	r3, [r2, #4]
    	if(BACKUP_PC_CMV.INSPIRATION_TIME >600)
 800ad24:	4b60      	ldr	r3, [pc, #384]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800ad2c:	d90c      	bls.n	800ad48 <Backup_PC_CMV_Initial_Flags_SET+0xf0>
    	{
    		if(BACKUP_PC_CMV.RISE_TIME_MS_Val < 600)
 800ad2e:	4b5e      	ldr	r3, [pc, #376]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad30:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad34:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800aeb8 <Backup_PC_CMV_Initial_Flags_SET+0x260>
 800ad38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad40:	d502      	bpl.n	800ad48 <Backup_PC_CMV_Initial_Flags_SET+0xf0>
    			BACKUP_PC_CMV.RISE_TIME_MS_Val = 600;
 800ad42:	4b59      	ldr	r3, [pc, #356]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad44:	4a5d      	ldr	r2, [pc, #372]	; (800aebc <Backup_PC_CMV_Initial_Flags_SET+0x264>)
 800ad46:	605a      	str	r2, [r3, #4]
    	}

    	PIP_control_Task.PIP_Acheived_Time_Ms          =  (BACKUP_PC_CMV.RISE_TIME_MS_Val * 2);
 800ad48:	4b57      	ldr	r3, [pc, #348]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad4a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ad52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad56:	ee17 3a90 	vmov	r3, s15
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	4b58      	ldr	r3, [pc, #352]	; (800aec0 <Backup_PC_CMV_Initial_Flags_SET+0x268>)
 800ad5e:	809a      	strh	r2, [r3, #4]
    	OLD.Last_RR_Val_PC_CMV_BACKUP                  = BACKUP_PC_CMV.RESPIRATORY_RATE_Val;
 800ad60:	4b51      	ldr	r3, [pc, #324]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad62:	789a      	ldrb	r2, [r3, #2]
 800ad64:	4b52      	ldr	r3, [pc, #328]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ad66:	711a      	strb	r2, [r3, #4]
    	OLD.Last_PIP_Val_PC_CMV_BACKUP                 = BACKUP_PC_CMV.PIP_Val;
 800ad68:	4b4f      	ldr	r3, [pc, #316]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad6a:	781a      	ldrb	r2, [r3, #0]
 800ad6c:	4b50      	ldr	r3, [pc, #320]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ad6e:	705a      	strb	r2, [r3, #1]
    	OLD.Last_Rise_Time_PC_CMV_BACKUP               = BACKUP_PC_CMV.Rise_Time;
 800ad70:	4b4d      	ldr	r3, [pc, #308]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad72:	7c9a      	ldrb	r2, [r3, #18]
 800ad74:	4b4e      	ldr	r3, [pc, #312]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ad76:	709a      	strb	r2, [r3, #2]
    	OLD.Last_I_Val_PC_CMV_BACKUP                   = BACKUP_PC_CMV.Inspiration_Time_Ratio;
 800ad78:	4b4b      	ldr	r3, [pc, #300]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad7a:	7c1a      	ldrb	r2, [r3, #16]
 800ad7c:	4b4c      	ldr	r3, [pc, #304]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ad7e:	715a      	strb	r2, [r3, #5]
    	OLD.Last_E_Val_PC_CMV_BACKUP                   = BACKUP_PC_CMV.Expiration_Time_Ratio;
 800ad80:	4b49      	ldr	r3, [pc, #292]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad82:	7c5a      	ldrb	r2, [r3, #17]
 800ad84:	4b4a      	ldr	r3, [pc, #296]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ad86:	719a      	strb	r2, [r3, #6]
    	OLD.Last_PEEP_Val_PC_CMV_BACKUP                = BACKUP_PC_CMV.PEEP_Val;
 800ad88:	4b47      	ldr	r3, [pc, #284]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad8a:	785a      	ldrb	r2, [r3, #1]
 800ad8c:	4b48      	ldr	r3, [pc, #288]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ad8e:	701a      	strb	r2, [r3, #0]
    	OLD.Last_O2_Val_PC_CMV_BACKUP                  = BACKUP_PC_CMV.FIO2_Val;
 800ad90:	4b45      	ldr	r3, [pc, #276]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad92:	78da      	ldrb	r2, [r3, #3]
 800ad94:	4b46      	ldr	r3, [pc, #280]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ad96:	70da      	strb	r2, [r3, #3]
    	OLD.LAST_BLOWER_ENDING_DAC_SIGNAL              =  DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 800ad98:	4b43      	ldr	r3, [pc, #268]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7fe faaf 	bl	8009300 <DAC_VAL>
 800ada2:	4603      	mov	r3, r0
 800ada4:	461a      	mov	r2, r3
 800ada6:	4b42      	ldr	r3, [pc, #264]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ada8:	829a      	strh	r2, [r3, #20]
    	if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 800adaa:	4b40      	ldr	r3, [pc, #256]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b1d      	cmp	r3, #29
 800adb0:	d80a      	bhi.n	800adc8 <Backup_PC_CMV_Initial_Flags_SET+0x170>
 800adb2:	4b3e      	ldr	r3, [pc, #248]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800adb4:	785b      	ldrb	r3, [r3, #1]
 800adb6:	2b08      	cmp	r3, #8
 800adb8:	d806      	bhi.n	800adc8 <Backup_PC_CMV_Initial_Flags_SET+0x170>
    	{
    		OLD.LAST_PIP_Control_Task_Delay            = 10;
 800adba:	4b3d      	ldr	r3, [pc, #244]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800adbc:	220a      	movs	r2, #10
 800adbe:	82da      	strh	r2, [r3, #22]
    		OLD.LAST_Increase_Each_DAC_SET_CONST       = 50;
 800adc0:	4b3b      	ldr	r3, [pc, #236]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800adc2:	2232      	movs	r2, #50	; 0x32
 800adc4:	831a      	strh	r2, [r3, #24]
 800adc6:	e005      	b.n	800add4 <Backup_PC_CMV_Initial_Flags_SET+0x17c>
    	}
    	else
    	{
    		OLD.LAST_PIP_Control_Task_Delay           = 2;
 800adc8:	4b39      	ldr	r3, [pc, #228]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800adca:	2202      	movs	r2, #2
 800adcc:	82da      	strh	r2, [r3, #22]
    		OLD.LAST_Increase_Each_DAC_SET_CONST      = 140;
 800adce:	4b38      	ldr	r3, [pc, #224]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800add0:	228c      	movs	r2, #140	; 0x8c
 800add2:	831a      	strh	r2, [r3, #24]
    	}

    	if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 800add4:	4b35      	ldr	r3, [pc, #212]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	2b1d      	cmp	r3, #29
 800adda:	d807      	bhi.n	800adec <Backup_PC_CMV_Initial_Flags_SET+0x194>
 800addc:	4b33      	ldr	r3, [pc, #204]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800adde:	785b      	ldrb	r3, [r3, #1]
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d803      	bhi.n	800adec <Backup_PC_CMV_Initial_Flags_SET+0x194>
    	{
    		BACKUP_PC_CMV.RISE_TIME_MS_Val = 800;
 800ade4:	4b30      	ldr	r3, [pc, #192]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ade6:	4a37      	ldr	r2, [pc, #220]	; (800aec4 <Backup_PC_CMV_Initial_Flags_SET+0x26c>)
 800ade8:	605a      	str	r2, [r3, #4]
 800adea:	e006      	b.n	800adfa <Backup_PC_CMV_Initial_Flags_SET+0x1a2>
    	}
    	else if((Common_Mode_Parameter._PEEP_Val < 9))
 800adec:	4b2f      	ldr	r3, [pc, #188]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800adee:	785b      	ldrb	r3, [r3, #1]
 800adf0:	2b08      	cmp	r3, #8
 800adf2:	d802      	bhi.n	800adfa <Backup_PC_CMV_Initial_Flags_SET+0x1a2>
    	{
    		BACKUP_PC_CMV.RISE_TIME_MS_Val = 600;
 800adf4:	4b2c      	ldr	r3, [pc, #176]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800adf6:	4a31      	ldr	r2, [pc, #196]	; (800aebc <Backup_PC_CMV_Initial_Flags_SET+0x264>)
 800adf8:	605a      	str	r2, [r3, #4]
    	}
    	OLD.LAST_Need_PID_Task_Delay                   =  NO;
 800adfa:	4b2d      	ldr	r3, [pc, #180]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	769a      	strb	r2, [r3, #26]
    	OLD.LAST_Tune_PID_Task_Delay                   =  T_OPEN;
 800ae00:	4b2b      	ldr	r3, [pc, #172]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	76da      	strb	r2, [r3, #27]
    	OLD.LAST_Low_PIP_Count                         =  RESET;
 800ae06:	4b2a      	ldr	r3, [pc, #168]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	771a      	strb	r2, [r3, #28]
    	OLD.LAST_Early_Acheived_Ramp_Time_Percentage   =  RESET;
 800ae0c:	4b28      	ldr	r3, [pc, #160]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	775a      	strb	r2, [r3, #29]
    	OLD.Last_Ramp_Time_PC_CMV_BACKUP               =  BACKUP_PC_CMV.RISE_TIME_MS_Val;
 800ae12:	4b25      	ldr	r3, [pc, #148]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	4a26      	ldr	r2, [pc, #152]	; (800aeb0 <Backup_PC_CMV_Initial_Flags_SET+0x258>)
 800ae18:	6093      	str	r3, [r2, #8]
		PIP_Average_Parameter.PIP_Cumulative_Val       = 1;
 800ae1a:	4b2b      	ldr	r3, [pc, #172]	; (800aec8 <Backup_PC_CMV_Initial_Flags_SET+0x270>)
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	605a      	str	r2, [r3, #4]
		PIP_Average_Parameter.PIP_Event_Count          = 1;
 800ae20:	4b29      	ldr	r3, [pc, #164]	; (800aec8 <Backup_PC_CMV_Initial_Flags_SET+0x270>)
 800ae22:	2201      	movs	r2, #1
 800ae24:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val    = 1;
 800ae26:	4b29      	ldr	r3, [pc, #164]	; (800aecc <Backup_PC_CMV_Initial_Flags_SET+0x274>)
 800ae28:	2201      	movs	r2, #1
 800ae2a:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count       = 1;
 800ae2c:	4b27      	ldr	r3, [pc, #156]	; (800aecc <Backup_PC_CMV_Initial_Flags_SET+0x274>)
 800ae2e:	2201      	movs	r2, #1
 800ae30:	60da      	str	r2, [r3, #12]
	    PEEP_Maintain_Parameter.PEEP_AVG_VAL           = 1;
 800ae32:	4b26      	ldr	r3, [pc, #152]	; (800aecc <Backup_PC_CMV_Initial_Flags_SET+0x274>)
 800ae34:	2201      	movs	r2, #1
 800ae36:	741a      	strb	r2, [r3, #16]
	    PEEP_Maintain_Parameter.PEEP_Temp              = (BACKUP_PC_CMV.PEEP_Val / 2);
 800ae38:	4b1b      	ldr	r3, [pc, #108]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ae3a:	785b      	ldrb	r3, [r3, #1]
 800ae3c:	085b      	lsrs	r3, r3, #1
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	ee07 3a90 	vmov	s15, r3
 800ae44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae48:	4b20      	ldr	r3, [pc, #128]	; (800aecc <Backup_PC_CMV_Initial_Flags_SET+0x274>)
 800ae4a:	edc3 7a00 	vstr	s15, [r3]
	    PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  = 0;
 800ae4e:	4b1f      	ldr	r3, [pc, #124]	; (800aecc <Backup_PC_CMV_Initial_Flags_SET+0x274>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	809a      	strh	r2, [r3, #4]
		Smooth_Ramp_Time_Val_Count                     = 0;
 800ae54:	4b1e      	ldr	r3, [pc, #120]	; (800aed0 <Backup_PC_CMV_Initial_Flags_SET+0x278>)
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
		Smooth_Ramp_Time_Val                           = 15;
 800ae5a:	4b1e      	ldr	r3, [pc, #120]	; (800aed4 <Backup_PC_CMV_Initial_Flags_SET+0x27c>)
 800ae5c:	220f      	movs	r2, #15
 800ae5e:	701a      	strb	r2, [r3, #0]
		if(Common_Mode_Parameter._PEEP_Val >= 15)
 800ae60:	4b12      	ldr	r3, [pc, #72]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800ae62:	785b      	ldrb	r3, [r3, #1]
 800ae64:	2b0e      	cmp	r3, #14
 800ae66:	d903      	bls.n	800ae70 <Backup_PC_CMV_Initial_Flags_SET+0x218>
		{
		  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800ae68:	4b1b      	ldr	r3, [pc, #108]	; (800aed8 <Backup_PC_CMV_Initial_Flags_SET+0x280>)
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	e00e      	b.n	800ae8e <Backup_PC_CMV_Initial_Flags_SET+0x236>
		}
		else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 800ae70:	4b0e      	ldr	r3, [pc, #56]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800ae72:	785b      	ldrb	r3, [r3, #1]
 800ae74:	2b0e      	cmp	r3, #14
 800ae76:	d807      	bhi.n	800ae88 <Backup_PC_CMV_Initial_Flags_SET+0x230>
 800ae78:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <Backup_PC_CMV_Initial_Flags_SET+0x254>)
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d903      	bls.n	800ae88 <Backup_PC_CMV_Initial_Flags_SET+0x230>
		{
		  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 800ae80:	4b15      	ldr	r3, [pc, #84]	; (800aed8 <Backup_PC_CMV_Initial_Flags_SET+0x280>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	e002      	b.n	800ae8e <Backup_PC_CMV_Initial_Flags_SET+0x236>
		}
		else
		{
			Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800ae88:	4b13      	ldr	r3, [pc, #76]	; (800aed8 <Backup_PC_CMV_Initial_Flags_SET+0x280>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	701a      	strb	r2, [r3, #0]
		}
    	Fio2_Blending_Method                           = PRESSURE_CONTROLLED;
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <Backup_PC_CMV_Initial_Flags_SET+0x284>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	701a      	strb	r2, [r3, #0]
    	O2_Initial_Parameter(BACKUP_PC_CMV.FIO2_Val);
 800ae94:	4b04      	ldr	r3, [pc, #16]	; (800aea8 <Backup_PC_CMV_Initial_Flags_SET+0x250>)
 800ae96:	78db      	ldrb	r3, [r3, #3]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 fdad 	bl	800b9f8 <O2_Initial_Parameter>
		Backup_PC_CMV_SET_VALUE = CHANGE_HAPPEN;
 800ae9e:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <Backup_PC_CMV_Initial_Flags_SET+0x288>)
 800aea0:	2201      	movs	r2, #1
 800aea2:	701a      	strb	r2, [r3, #0]
 800aea4:	e041      	b.n	800af2a <Backup_PC_CMV_Initial_Flags_SET+0x2d2>
 800aea6:	bf00      	nop
 800aea8:	20013930 	.word	0x20013930
 800aeac:	20013ba4 	.word	0x20013ba4
 800aeb0:	20014298 	.word	0x20014298
 800aeb4:	40590000 	.word	0x40590000
 800aeb8:	44160000 	.word	0x44160000
 800aebc:	44160000 	.word	0x44160000
 800aec0:	20013b04 	.word	0x20013b04
 800aec4:	44480000 	.word	0x44480000
 800aec8:	20013b70 	.word	0x20013b70
 800aecc:	20014300 	.word	0x20014300
 800aed0:	200140c1 	.word	0x200140c1
 800aed4:	20014058 	.word	0x20014058
 800aed8:	20013b82 	.word	0x20013b82
 800aedc:	20013aec 	.word	0x20013aec
 800aee0:	20013c44 	.word	0x20013c44

    }
    else
    {
    	OLD.LAST_BLOWER_ENDING_DAC_SIGNAL              =  OLD.LAST_BLOWER_ENDING_DAC_SIGNAL;
 800aee4:	4b32      	ldr	r3, [pc, #200]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800aee6:	8a9a      	ldrh	r2, [r3, #20]
 800aee8:	4b31      	ldr	r3, [pc, #196]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800aeea:	829a      	strh	r2, [r3, #20]
    	OLD.LAST_PIP_Control_Task_Delay                =  OLD.LAST_PIP_Control_Task_Delay;
 800aeec:	4b30      	ldr	r3, [pc, #192]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800aeee:	8ada      	ldrh	r2, [r3, #22]
 800aef0:	4b2f      	ldr	r3, [pc, #188]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800aef2:	82da      	strh	r2, [r3, #22]
    	OLD.LAST_Increase_Each_DAC_SET_CONST           =  OLD.LAST_Increase_Each_DAC_SET_CONST;
 800aef4:	4b2e      	ldr	r3, [pc, #184]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800aef6:	8b1a      	ldrh	r2, [r3, #24]
 800aef8:	4b2d      	ldr	r3, [pc, #180]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800aefa:	831a      	strh	r2, [r3, #24]
    	OLD.LAST_Need_PID_Task_Delay                   =  OLD.LAST_Need_PID_Task_Delay;
 800aefc:	4b2c      	ldr	r3, [pc, #176]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800aefe:	7e9a      	ldrb	r2, [r3, #26]
 800af00:	4b2b      	ldr	r3, [pc, #172]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800af02:	769a      	strb	r2, [r3, #26]
    	OLD.LAST_Tune_PID_Task_Delay                   =  OLD.LAST_Tune_PID_Task_Delay;
 800af04:	4b2a      	ldr	r3, [pc, #168]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800af06:	7eda      	ldrb	r2, [r3, #27]
 800af08:	4b29      	ldr	r3, [pc, #164]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800af0a:	76da      	strb	r2, [r3, #27]
    	OLD.LAST_Low_PIP_Count                         =  OLD.LAST_Low_PIP_Count;
 800af0c:	4b28      	ldr	r3, [pc, #160]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800af0e:	7f1a      	ldrb	r2, [r3, #28]
 800af10:	4b27      	ldr	r3, [pc, #156]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800af12:	771a      	strb	r2, [r3, #28]
    	OLD.LAST_Early_Acheived_Ramp_Time_Percentage   =  OLD.LAST_Early_Acheived_Ramp_Time_Percentage;
 800af14:	4b26      	ldr	r3, [pc, #152]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800af16:	7f5a      	ldrb	r2, [r3, #29]
 800af18:	4b25      	ldr	r3, [pc, #148]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800af1a:	775a      	strb	r2, [r3, #29]
    	OLD.Last_Ramp_Time_PC_CMV_BACKUP               =  OLD.Last_Ramp_Time_PC_CMV_BACKUP;
 800af1c:	4b24      	ldr	r3, [pc, #144]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	4a23      	ldr	r2, [pc, #140]	; (800afb0 <Backup_PC_CMV_Initial_Flags_SET+0x358>)
 800af22:	6093      	str	r3, [r2, #8]
    	Backup_PC_CMV_SET_VALUE = NO_CHANGES;
 800af24:	4b23      	ldr	r3, [pc, #140]	; (800afb4 <Backup_PC_CMV_Initial_Flags_SET+0x35c>)
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]
    }
    Alert_Flags_Reset();
 800af2a:	f7f6 f8b7 	bl	800109c <Alert_Flags_Reset>
	vTaskSuspend(Pc_Cmv_Handler);
 800af2e:	4b22      	ldr	r3, [pc, #136]	; (800afb8 <Backup_PC_CMV_Initial_Flags_SET+0x360>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4618      	mov	r0, r3
 800af34:	f014 f9ae 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800af38:	4b20      	ldr	r3, [pc, #128]	; (800afbc <Backup_PC_CMV_Initial_Flags_SET+0x364>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f014 f9a9 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800af42:	4b1f      	ldr	r3, [pc, #124]	; (800afc0 <Backup_PC_CMV_Initial_Flags_SET+0x368>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4618      	mov	r0, r3
 800af48:	f014 f9a4 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800af4c:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <Backup_PC_CMV_Initial_Flags_SET+0x36c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4618      	mov	r0, r3
 800af52:	f014 f99f 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800af56:	4b1c      	ldr	r3, [pc, #112]	; (800afc8 <Backup_PC_CMV_Initial_Flags_SET+0x370>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f014 f99a 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800af60:	4b1a      	ldr	r3, [pc, #104]	; (800afcc <Backup_PC_CMV_Initial_Flags_SET+0x374>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4618      	mov	r0, r3
 800af66:	f014 f995 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800af6a:	4b19      	ldr	r3, [pc, #100]	; (800afd0 <Backup_PC_CMV_Initial_Flags_SET+0x378>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4618      	mov	r0, r3
 800af70:	f014 f990 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800af74:	4b17      	ldr	r3, [pc, #92]	; (800afd4 <Backup_PC_CMV_Initial_Flags_SET+0x37c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4618      	mov	r0, r3
 800af7a:	f014 f98b 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800af7e:	4b16      	ldr	r3, [pc, #88]	; (800afd8 <Backup_PC_CMV_Initial_Flags_SET+0x380>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4618      	mov	r0, r3
 800af84:	f014 f986 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800af88:	4b14      	ldr	r3, [pc, #80]	; (800afdc <Backup_PC_CMV_Initial_Flags_SET+0x384>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f014 f981 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800af92:	4b13      	ldr	r3, [pc, #76]	; (800afe0 <Backup_PC_CMV_Initial_Flags_SET+0x388>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4618      	mov	r0, r3
 800af98:	f014 f97c 	bl	801f294 <vTaskSuspend>

	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800af9c:	4b11      	ldr	r3, [pc, #68]	; (800afe4 <Backup_PC_CMV_Initial_Flags_SET+0x38c>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800afa2:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <Backup_PC_CMV_Initial_Flags_SET+0x390>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f014 f974 	bl	801f294 <vTaskSuspend>
}
 800afac:	bf00      	nop
 800afae:	bdb0      	pop	{r4, r5, r7, pc}
 800afb0:	20014298 	.word	0x20014298
 800afb4:	20013c44 	.word	0x20013c44
 800afb8:	20013f80 	.word	0x20013f80
 800afbc:	20013ba0 	.word	0x20013ba0
 800afc0:	200142f8 	.word	0x200142f8
 800afc4:	20013998 	.word	0x20013998
 800afc8:	20013ca0 	.word	0x20013ca0
 800afcc:	20014348 	.word	0x20014348
 800afd0:	200142e0 	.word	0x200142e0
 800afd4:	20013f58 	.word	0x20013f58
 800afd8:	20014020 	.word	0x20014020
 800afdc:	20014094 	.word	0x20014094
 800afe0:	20013bb4 	.word	0x20013bb4
 800afe4:	20013f5d 	.word	0x20013f5d
 800afe8:	2001406c 	.word	0x2001406c

0800afec <Reset_PC_CMV_BACKUP_Old_Flags_Reset>:
	OLD.Last_Volume_Val_VC_CMV_BACKUP= 0;
}


void Reset_PC_CMV_BACKUP_Old_Flags_Reset()
{
 800afec:	b480      	push	{r7}
 800afee:	af00      	add	r7, sp, #0
	OLD.Last_PEEP_Val_VC_CMV_BACKUP  = 0;
 800aff0:	4b0c      	ldr	r3, [pc, #48]	; (800b024 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800aff2:	2200      	movs	r2, #0
 800aff4:	739a      	strb	r2, [r3, #14]
	OLD.Last_FLOW_Val_VC_CMV_BACKUP  = 0;
 800aff6:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800aff8:	2200      	movs	r2, #0
 800affa:	73da      	strb	r2, [r3, #15]
	OLD.Last_O2_Val_VC_CMV_BACKUP    = 0;
 800affc:	4b09      	ldr	r3, [pc, #36]	; (800b024 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800affe:	2200      	movs	r2, #0
 800b000:	741a      	strb	r2, [r3, #16]
	OLD.Last_RR_Val_VC_CMV_BACKUP    = 0;
 800b002:	4b08      	ldr	r3, [pc, #32]	; (800b024 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b004:	2200      	movs	r2, #0
 800b006:	745a      	strb	r2, [r3, #17]
	OLD.Last_I_Val_VC_CMV_BACKUP     = 0;
 800b008:	4b06      	ldr	r3, [pc, #24]	; (800b024 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	749a      	strb	r2, [r3, #18]
	OLD.Last_E_Val_VC_CMV_BACKUP     = 0;
 800b00e:	4b05      	ldr	r3, [pc, #20]	; (800b024 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b010:	2200      	movs	r2, #0
 800b012:	74da      	strb	r2, [r3, #19]
	OLD.Last_Volume_Val_VC_CMV_BACKUP= 0;
 800b014:	4b03      	ldr	r3, [pc, #12]	; (800b024 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b016:	2200      	movs	r2, #0
 800b018:	819a      	strh	r2, [r3, #12]
}
 800b01a:	bf00      	nop
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr
 800b024:	20014298 	.word	0x20014298

0800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>:



void Reset_Patient_Circuit_Diconnceted_Alert_Flags()
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0
	PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK             = CHECK;
 800b02c:	4b08      	ldr	r3, [pc, #32]	; (800b050 <Reset_Patient_Circuit_Diconnceted_Alert_Flags+0x28>)
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
	Alert_Count.Patient_Circuit_disconnected_Alert_Count = 0;
 800b032:	4b08      	ldr	r3, [pc, #32]	; (800b054 <Reset_Patient_Circuit_Diconnceted_Alert_Flags+0x2c>)
 800b034:	2200      	movs	r2, #0
 800b036:	80da      	strh	r2, [r3, #6]
	Alert_Status                                         = NO_ALERT;
 800b038:	4b07      	ldr	r3, [pc, #28]	; (800b058 <Reset_Patient_Circuit_Diconnceted_Alert_Flags+0x30>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	701a      	strb	r2, [r3, #0]
	LED_Alert();
 800b03e:	f7f6 fcb7 	bl	80019b0 <LED_Alert>
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 800b042:	4a06      	ldr	r2, [pc, #24]	; (800b05c <Reset_Patient_Circuit_Diconnceted_Alert_Flags+0x34>)
 800b044:	78d3      	ldrb	r3, [r2, #3]
 800b046:	f36f 1304 	bfc	r3, #4, #1
 800b04a:	70d3      	strb	r3, [r2, #3]
}
 800b04c:	bf00      	nop
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	20013ac9 	.word	0x20013ac9
 800b054:	20014274 	.word	0x20014274
 800b058:	20013f88 	.word	0x20013f88
 800b05c:	20013b34 	.word	0x20013b34

0800b060 <Time_Trace_Task>:
#include "Two_Milli_Second_Task.h"



void Time_Trace_Task (void *argument)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	while (1)
	{

		INSPIRATION_TIME_TRACE();
 800b068:	f000 f836 	bl	800b0d8 <INSPIRATION_TIME_TRACE>
		EXPIRATION_TIME_TRACE();
 800b06c:	f000 f894 	bl	800b198 <EXPIRATION_TIME_TRACE>
		BREATH_COUNT();
 800b070:	f000 faae 	bl	800b5d0 <BREATH_COUNT>
		Nebuliser_Timing();
 800b074:	f000 fae8 	bl	800b648 <Nebuliser_Timing>


		if(Running_Mode == Pcsimv)
 800b078:	4b16      	ldr	r3, [pc, #88]	; (800b0d4 <Time_Trace_Task+0x74>)
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b05      	cmp	r3, #5
 800b07e:	d102      	bne.n	800b086 <Time_Trace_Task+0x26>
		{
			PC_SIMV_BLOWER_WAIT_TIME_TRACE();
 800b080:	f000 f8dc 	bl	800b23c <PC_SIMV_BLOWER_WAIT_TIME_TRACE>
 800b084:	e021      	b.n	800b0ca <Time_Trace_Task+0x6a>
		}
		else if(Running_Mode == Vcsimv)
 800b086:	4b13      	ldr	r3, [pc, #76]	; (800b0d4 <Time_Trace_Task+0x74>)
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2b06      	cmp	r3, #6
 800b08c:	d102      	bne.n	800b094 <Time_Trace_Task+0x34>
		{
			VC_SIMV_BLOWER_WAIT_TIME_TRACE();
 800b08e:	f000 f907 	bl	800b2a0 <VC_SIMV_BLOWER_WAIT_TIME_TRACE>
 800b092:	e01a      	b.n	800b0ca <Time_Trace_Task+0x6a>
		}
		else if(Running_Mode == Psv)
 800b094:	4b0f      	ldr	r3, [pc, #60]	; (800b0d4 <Time_Trace_Task+0x74>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2b07      	cmp	r3, #7
 800b09a:	d102      	bne.n	800b0a2 <Time_Trace_Task+0x42>
		{
			PSV_APNEA_COUNTER_TRACE();
 800b09c:	f000 f932 	bl	800b304 <PSV_APNEA_COUNTER_TRACE>
 800b0a0:	e013      	b.n	800b0ca <Time_Trace_Task+0x6a>
		}
		else if(Running_Mode == Cpap)
 800b0a2:	4b0c      	ldr	r3, [pc, #48]	; (800b0d4 <Time_Trace_Task+0x74>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b0b      	cmp	r3, #11
 800b0a8:	d102      	bne.n	800b0b0 <Time_Trace_Task+0x50>
		{
			CPAP_APNEA_COUNTER_TRACE();
 800b0aa:	f000 f9f3 	bl	800b494 <CPAP_APNEA_COUNTER_TRACE>
 800b0ae:	e00c      	b.n	800b0ca <Time_Trace_Task+0x6a>
		}
		else if(Running_Mode == BiPap)
 800b0b0:	4b08      	ldr	r3, [pc, #32]	; (800b0d4 <Time_Trace_Task+0x74>)
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	2b0c      	cmp	r3, #12
 800b0b6:	d102      	bne.n	800b0be <Time_Trace_Task+0x5e>
		{
			BIPAP_APNEA_COUNTER_TRACE();
 800b0b8:	f000 f988 	bl	800b3cc <BIPAP_APNEA_COUNTER_TRACE>
 800b0bc:	e005      	b.n	800b0ca <Time_Trace_Task+0x6a>
		}
		else if(Running_Mode == Aprv)
 800b0be:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <Time_Trace_Task+0x74>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	2b04      	cmp	r3, #4
 800b0c4:	d101      	bne.n	800b0ca <Time_Trace_Task+0x6a>
		{
			APRV_APNEA_COUNTER_TRACE();
 800b0c6:	f000 fa41 	bl	800b54c <APRV_APNEA_COUNTER_TRACE>
		}

		vTaskDelay(Two_Millisecond_Delay);
 800b0ca:	2002      	movs	r0, #2
 800b0cc:	f014 f8ae 	bl	801f22c <vTaskDelay>
		INSPIRATION_TIME_TRACE();
 800b0d0:	e7ca      	b.n	800b068 <Time_Trace_Task+0x8>
 800b0d2:	bf00      	nop
 800b0d4:	20014238 	.word	0x20014238

0800b0d8 <INSPIRATION_TIME_TRACE>:
}



void INSPIRATION_TIME_TRACE()
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
	if(TIME_Base_parameter._INSPIRATION_TIME > 0)
 800b0dc:	4b28      	ldr	r3, [pc, #160]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dd4a      	ble.n	800b17a <INSPIRATION_TIME_TRACE+0xa2>
	{
		TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED  = TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED+2;
 800b0e4:	4b26      	ldr	r3, [pc, #152]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	3302      	adds	r3, #2
 800b0ea:	4a25      	ldr	r2, [pc, #148]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b0ec:	6093      	str	r3, [r2, #8]
		TIME_Base_parameter._INSPIRATION_TIME          = TIME_Base_parameter._INSPIRATION_TIME -2;
 800b0ee:	4b24      	ldr	r3, [pc, #144]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3b02      	subs	r3, #2
 800b0f4:	4a22      	ldr	r2, [pc, #136]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b0f6:	6013      	str	r3, [r2, #0]
		if(TIME_Base_parameter._INSPIRATION_TIME<0)
 800b0f8:	4b21      	ldr	r3, [pc, #132]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	da02      	bge.n	800b106 <INSPIRATION_TIME_TRACE+0x2e>
			TIME_Base_parameter._INSPIRATION_TIME=0;
 800b100:	4b1f      	ldr	r3, [pc, #124]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]

		if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED > 100)
 800b106:	4b1e      	ldr	r3, [pc, #120]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	2b64      	cmp	r3, #100	; 0x64
 800b10c:	dd01      	ble.n	800b112 <INSPIRATION_TIME_TRACE+0x3a>
		{
			Find_Max_PIP();
 800b10e:	f7fd ff59 	bl	8008fc4 <Find_Max_PIP>
		}
		if(TIME_Base_parameter._INSPIRATION_TIME <200)
 800b112:	4b1b      	ldr	r3, [pc, #108]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2bc7      	cmp	r3, #199	; 0xc7
 800b118:	dc0b      	bgt.n	800b132 <INSPIRATION_TIME_TRACE+0x5a>
		{
			PIP_Average_Parameter.PIP_Cumulative_Val += Pressure_sensor.Pressure_Val;
 800b11a:	4b1a      	ldr	r3, [pc, #104]	; (800b184 <INSPIRATION_TIME_TRACE+0xac>)
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	4a1a      	ldr	r2, [pc, #104]	; (800b188 <INSPIRATION_TIME_TRACE+0xb0>)
 800b120:	7892      	ldrb	r2, [r2, #2]
 800b122:	4413      	add	r3, r2
 800b124:	4a17      	ldr	r2, [pc, #92]	; (800b184 <INSPIRATION_TIME_TRACE+0xac>)
 800b126:	6053      	str	r3, [r2, #4]
			PIP_Average_Parameter.PIP_Event_Count++;
 800b128:	4b16      	ldr	r3, [pc, #88]	; (800b184 <INSPIRATION_TIME_TRACE+0xac>)
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	3301      	adds	r3, #1
 800b12e:	4a15      	ldr	r2, [pc, #84]	; (800b184 <INSPIRATION_TIME_TRACE+0xac>)
 800b130:	6093      	str	r3, [r2, #8]
		}

		if(TIME_Base_parameter.FLOW_ACHIEVED_TIMER > 0)
 800b132:	4b13      	ldr	r3, [pc, #76]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	dd16      	ble.n	800b168 <INSPIRATION_TIME_TRACE+0x90>
		{
			TIME_Base_parameter.FLOW_ACHIEVED_TIMER = (TIME_Base_parameter.FLOW_ACHIEVED_TIMER -2);
 800b13a:	4b11      	ldr	r3, [pc, #68]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	3b02      	subs	r3, #2
 800b140:	4a0f      	ldr	r2, [pc, #60]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b142:	6113      	str	r3, [r2, #16]
			if(TIME_Base_parameter.FLOW_ACHIEVED_TIMER < 0)
 800b144:	4b0e      	ldr	r3, [pc, #56]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	da02      	bge.n	800b152 <INSPIRATION_TIME_TRACE+0x7a>
				TIME_Base_parameter.FLOW_ACHIEVED_TIMER = 0;
 800b14c:	4b0c      	ldr	r3, [pc, #48]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b14e:	2200      	movs	r2, #0
 800b150:	611a      	str	r2, [r3, #16]

			if(Flow_Sensor_cal._Flow_Val > Volume_control_Task.Flow_Max_Achieved)
 800b152:	4b0e      	ldr	r3, [pc, #56]	; (800b18c <INSPIRATION_TIME_TRACE+0xb4>)
 800b154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b156:	4a0e      	ldr	r2, [pc, #56]	; (800b190 <INSPIRATION_TIME_TRACE+0xb8>)
 800b158:	7852      	ldrb	r2, [r2, #1]
 800b15a:	4293      	cmp	r3, r2
 800b15c:	dd04      	ble.n	800b168 <INSPIRATION_TIME_TRACE+0x90>
		    {
			  Volume_control_Task.Flow_Max_Achieved = Flow_Sensor_cal._Flow_Val;
 800b15e:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <INSPIRATION_TIME_TRACE+0xb4>)
 800b160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b162:	b2da      	uxtb	r2, r3
 800b164:	4b0a      	ldr	r3, [pc, #40]	; (800b190 <INSPIRATION_TIME_TRACE+0xb8>)
 800b166:	705a      	strb	r2, [r3, #1]
		    }
		}
		if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED < 200)
 800b168:	4b05      	ldr	r3, [pc, #20]	; (800b180 <INSPIRATION_TIME_TRACE+0xa8>)
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	2bc7      	cmp	r3, #199	; 0xc7
 800b16e:	dc04      	bgt.n	800b17a <INSPIRATION_TIME_TRACE+0xa2>
		{
			Current_Pressure   = Pressure_sensor.Pressure_Val;
 800b170:	4b05      	ldr	r3, [pc, #20]	; (800b188 <INSPIRATION_TIME_TRACE+0xb0>)
 800b172:	789b      	ldrb	r3, [r3, #2]
 800b174:	461a      	mov	r2, r3
 800b176:	4b07      	ldr	r3, [pc, #28]	; (800b194 <INSPIRATION_TIME_TRACE+0xbc>)
 800b178:	601a      	str	r2, [r3, #0]
		}


	}
}
 800b17a:	bf00      	nop
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	200141fc 	.word	0x200141fc
 800b184:	20013b70 	.word	0x20013b70
 800b188:	2001405c 	.word	0x2001405c
 800b18c:	20013fb0 	.word	0x20013fb0
 800b190:	20013f70 	.word	0x20013f70
 800b194:	20013944 	.word	0x20013944

0800b198 <EXPIRATION_TIME_TRACE>:


void EXPIRATION_TIME_TRACE()
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
	if(TIME_Base_parameter._EXPIRATION_TIME > 0)
 800b19c:	4b24      	ldr	r3, [pc, #144]	; (800b230 <EXPIRATION_TIME_TRACE+0x98>)
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	dd43      	ble.n	800b22c <EXPIRATION_TIME_TRACE+0x94>
	{
		TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED   = TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED+2;
 800b1a4:	4b22      	ldr	r3, [pc, #136]	; (800b230 <EXPIRATION_TIME_TRACE+0x98>)
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	3302      	adds	r3, #2
 800b1aa:	4a21      	ldr	r2, [pc, #132]	; (800b230 <EXPIRATION_TIME_TRACE+0x98>)
 800b1ac:	60d3      	str	r3, [r2, #12]
		TIME_Base_parameter._EXPIRATION_TIME           = TIME_Base_parameter._EXPIRATION_TIME -2;
 800b1ae:	4b20      	ldr	r3, [pc, #128]	; (800b230 <EXPIRATION_TIME_TRACE+0x98>)
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	3b02      	subs	r3, #2
 800b1b4:	4a1e      	ldr	r2, [pc, #120]	; (800b230 <EXPIRATION_TIME_TRACE+0x98>)
 800b1b6:	6053      	str	r3, [r2, #4]
		if(TIME_Base_parameter._EXPIRATION_TIME<0)
 800b1b8:	4b1d      	ldr	r3, [pc, #116]	; (800b230 <EXPIRATION_TIME_TRACE+0x98>)
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	da02      	bge.n	800b1c6 <EXPIRATION_TIME_TRACE+0x2e>
			TIME_Base_parameter._EXPIRATION_TIME=0;
 800b1c0:	4b1b      	ldr	r3, [pc, #108]	; (800b230 <EXPIRATION_TIME_TRACE+0x98>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	605a      	str	r2, [r3, #4]
		if(TIME_Base_parameter._EXPIRATION_TIME <100)
 800b1c6:	4b1a      	ldr	r3, [pc, #104]	; (800b230 <EXPIRATION_TIME_TRACE+0x98>)
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	2b63      	cmp	r3, #99	; 0x63
 800b1cc:	dc0d      	bgt.n	800b1ea <EXPIRATION_TIME_TRACE+0x52>
		{
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val += Pressure_sensor.Pressure_Val;
 800b1ce:	4b19      	ldr	r3, [pc, #100]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	4a19      	ldr	r2, [pc, #100]	; (800b238 <EXPIRATION_TIME_TRACE+0xa0>)
 800b1d4:	7892      	ldrb	r2, [r2, #2]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	4a16      	ldr	r2, [pc, #88]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b1da:	6093      	str	r3, [r2, #8]
			PEEP_Maintain_Parameter.PEEP_Event_Count++;
 800b1dc:	4b15      	ldr	r3, [pc, #84]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	4a14      	ldr	r2, [pc, #80]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b1e4:	60d3      	str	r3, [r2, #12]
			Find_Maximum_PEEP();
 800b1e6:	f7fd ff03 	bl	8008ff0 <Find_Maximum_PEEP>
		}

		if(TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED > 500)
 800b1ea:	4b11      	ldr	r3, [pc, #68]	; (800b230 <EXPIRATION_TIME_TRACE+0x98>)
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b1f2:	dd0b      	ble.n	800b20c <EXPIRATION_TIME_TRACE+0x74>
		{
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger += Pressure_sensor.Pressure_Val;
 800b1f4:	4b0f      	ldr	r3, [pc, #60]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	4a0f      	ldr	r2, [pc, #60]	; (800b238 <EXPIRATION_TIME_TRACE+0xa0>)
 800b1fa:	7892      	ldrb	r2, [r2, #2]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	4a0d      	ldr	r2, [pc, #52]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b200:	6153      	str	r3, [r2, #20]
			PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger++;
 800b202:	4b0c      	ldr	r3, [pc, #48]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	3301      	adds	r3, #1
 800b208:	4a0a      	ldr	r2, [pc, #40]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b20a:	6193      	str	r3, [r2, #24]
		}

		if(PEEP_Maintain_Parameter.CHECK_TRIGGER > 0)
 800b20c:	4b09      	ldr	r3, [pc, #36]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b20e:	69db      	ldr	r3, [r3, #28]
 800b210:	2b00      	cmp	r3, #0
 800b212:	dd0b      	ble.n	800b22c <EXPIRATION_TIME_TRACE+0x94>
		{
			PEEP_Maintain_Parameter.CHECK_TRIGGER = (PEEP_Maintain_Parameter.CHECK_TRIGGER-2);
 800b214:	4b07      	ldr	r3, [pc, #28]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b216:	69db      	ldr	r3, [r3, #28]
 800b218:	3b02      	subs	r3, #2
 800b21a:	4a06      	ldr	r2, [pc, #24]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b21c:	61d3      	str	r3, [r2, #28]
			if(PEEP_Maintain_Parameter.CHECK_TRIGGER<0)
 800b21e:	4b05      	ldr	r3, [pc, #20]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	2b00      	cmp	r3, #0
 800b224:	da02      	bge.n	800b22c <EXPIRATION_TIME_TRACE+0x94>
				PEEP_Maintain_Parameter.CHECK_TRIGGER=0;
 800b226:	4b03      	ldr	r3, [pc, #12]	; (800b234 <EXPIRATION_TIME_TRACE+0x9c>)
 800b228:	2200      	movs	r2, #0
 800b22a:	61da      	str	r2, [r3, #28]
		}
	}
}
 800b22c:	bf00      	nop
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	200141fc 	.word	0x200141fc
 800b234:	20014300 	.word	0x20014300
 800b238:	2001405c 	.word	0x2001405c

0800b23c <PC_SIMV_BLOWER_WAIT_TIME_TRACE>:




void PC_SIMV_BLOWER_WAIT_TIME_TRACE()
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
	if(PCsimv.Blower_Wait_Time_Milli_Second > 0)
 800b240:	4b16      	ldr	r3, [pc, #88]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	dd13      	ble.n	800b270 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x34>
	{
		PCsimv.Blower_Wait_Time_Milli_Second = (PCsimv.Blower_Wait_Time_Milli_Second -2);
 800b248:	4b14      	ldr	r3, [pc, #80]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3b02      	subs	r3, #2
 800b24e:	4a13      	ldr	r2, [pc, #76]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b250:	6013      	str	r3, [r2, #0]
		if(PCsimv.Blower_Wait_Time_Milli_Second < 0)
 800b252:	4b12      	ldr	r3, [pc, #72]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	da02      	bge.n	800b260 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x24>
			PCsimv.Blower_Wait_Time_Milli_Second=0;
 800b25a:	4b10      	ldr	r3, [pc, #64]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
		if(PCsimv.Blower_Wait_Time_Milli_Second < 100)
 800b260:	4b0e      	ldr	r3, [pc, #56]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b63      	cmp	r3, #99	; 0x63
 800b266:	dc03      	bgt.n	800b270 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x34>
			PCsimv.Trigger_Check_Wait_Time = 500;
 800b268:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b26a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b26e:	605a      	str	r2, [r3, #4]
	}

	if(PCsimv.Trigger_Check_Wait_Time > 0 )
 800b270:	4b0a      	ldr	r3, [pc, #40]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	dd0b      	ble.n	800b290 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x54>
	{
		PCsimv.Trigger_Check_Wait_Time = (PCsimv.Trigger_Check_Wait_Time -2);
 800b278:	4b08      	ldr	r3, [pc, #32]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	3b02      	subs	r3, #2
 800b27e:	4a07      	ldr	r2, [pc, #28]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b280:	6053      	str	r3, [r2, #4]
		 if(PCsimv.Trigger_Check_Wait_Time < 0)
 800b282:	4b06      	ldr	r3, [pc, #24]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	da02      	bge.n	800b290 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x54>
			 PCsimv.Trigger_Check_Wait_Time =0;
 800b28a:	4b04      	ldr	r3, [pc, #16]	; (800b29c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	605a      	str	r2, [r3, #4]
	}
}
 800b290:	bf00      	nop
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	20013b98 	.word	0x20013b98

0800b2a0 <VC_SIMV_BLOWER_WAIT_TIME_TRACE>:


void VC_SIMV_BLOWER_WAIT_TIME_TRACE()
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	af00      	add	r7, sp, #0
	if(VCsimv.Blower_Wait_Time_Milli_Second > 0)
 800b2a4:	4b16      	ldr	r3, [pc, #88]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	dd13      	ble.n	800b2d4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x34>
	{
		VCsimv.Blower_Wait_Time_Milli_Second = (VCsimv.Blower_Wait_Time_Milli_Second -2);
 800b2ac:	4b14      	ldr	r3, [pc, #80]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3b02      	subs	r3, #2
 800b2b2:	4a13      	ldr	r2, [pc, #76]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2b4:	6013      	str	r3, [r2, #0]
		if(VCsimv.Blower_Wait_Time_Milli_Second < 0)
 800b2b6:	4b12      	ldr	r3, [pc, #72]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	da02      	bge.n	800b2c4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x24>
			VCsimv.Blower_Wait_Time_Milli_Second=0;
 800b2be:	4b10      	ldr	r3, [pc, #64]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]
		if(VCsimv.Blower_Wait_Time_Milli_Second < 100)
 800b2c4:	4b0e      	ldr	r3, [pc, #56]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b63      	cmp	r3, #99	; 0x63
 800b2ca:	dc03      	bgt.n	800b2d4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x34>
			VCsimv.Trigger_Check_Wait_Time = 500;
 800b2cc:	4b0c      	ldr	r3, [pc, #48]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b2d2:	605a      	str	r2, [r3, #4]
	}

	if(VCsimv.Trigger_Check_Wait_Time > 0 )
 800b2d4:	4b0a      	ldr	r3, [pc, #40]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	dd0b      	ble.n	800b2f4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x54>
	{
		VCsimv.Trigger_Check_Wait_Time = (VCsimv.Trigger_Check_Wait_Time -2);
 800b2dc:	4b08      	ldr	r3, [pc, #32]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	3b02      	subs	r3, #2
 800b2e2:	4a07      	ldr	r2, [pc, #28]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2e4:	6053      	str	r3, [r2, #4]
		 if(VCsimv.Trigger_Check_Wait_Time < 0)
 800b2e6:	4b06      	ldr	r3, [pc, #24]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	da02      	bge.n	800b2f4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x54>
			 VCsimv.Trigger_Check_Wait_Time =0;
 800b2ee:	4b04      	ldr	r3, [pc, #16]	; (800b300 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	605a      	str	r2, [r3, #4]
	}
}
 800b2f4:	bf00      	nop
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	2001416c 	.word	0x2001416c

0800b304 <PSV_APNEA_COUNTER_TRACE>:



void PSV_APNEA_COUNTER_TRACE()
{
 800b304:	b480      	push	{r7}
 800b306:	af00      	add	r7, sp, #0
	if(PSV.APNEA_COUNTER > 0)
 800b308:	4b2e      	ldr	r3, [pc, #184]	; (800b3c4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dd0b      	ble.n	800b328 <PSV_APNEA_COUNTER_TRACE+0x24>
	{
		PSV.APNEA_COUNTER = (PSV.APNEA_COUNTER -2);
 800b310:	4b2c      	ldr	r3, [pc, #176]	; (800b3c4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	3b02      	subs	r3, #2
 800b316:	4a2b      	ldr	r2, [pc, #172]	; (800b3c4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800b318:	6193      	str	r3, [r2, #24]
		if(PSV.APNEA_COUNTER < 0)
 800b31a:	4b2a      	ldr	r3, [pc, #168]	; (800b3c4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	da02      	bge.n	800b328 <PSV_APNEA_COUNTER_TRACE+0x24>
		{
			PSV.APNEA_COUNTER = 0;
 800b322:	4b28      	ldr	r3, [pc, #160]	; (800b3c4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800b324:	2200      	movs	r2, #0
 800b326:	619a      	str	r2, [r3, #24]
		}
	}

	if(PSV_Control.PSV_PEEP_Settle_Time > 0)
 800b328:	4b27      	ldr	r3, [pc, #156]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	dd0b      	ble.n	800b348 <PSV_APNEA_COUNTER_TRACE+0x44>
	{
		PSV_Control.PSV_PEEP_Settle_Time = (PSV_Control.PSV_PEEP_Settle_Time -2);
 800b330:	4b25      	ldr	r3, [pc, #148]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3b02      	subs	r3, #2
 800b336:	4a24      	ldr	r2, [pc, #144]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b338:	6013      	str	r3, [r2, #0]
		if(PSV_Control.PSV_PEEP_Settle_Time < 0)
 800b33a:	4b23      	ldr	r3, [pc, #140]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	da02      	bge.n	800b348 <PSV_APNEA_COUNTER_TRACE+0x44>
		{
			PSV_Control.PSV_PEEP_Settle_Time = 0;
 800b342:	4b21      	ldr	r3, [pc, #132]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]
		}
	}

	if(PSV_Control.Blower_Wait_Time_Milli_Second > 0)
 800b348:	4b1f      	ldr	r3, [pc, #124]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	dd13      	ble.n	800b378 <PSV_APNEA_COUNTER_TRACE+0x74>
	{
		PSV_Control.Blower_Wait_Time_Milli_Second = (PSV_Control.Blower_Wait_Time_Milli_Second -2);
 800b350:	4b1d      	ldr	r3, [pc, #116]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	3b02      	subs	r3, #2
 800b356:	4a1c      	ldr	r2, [pc, #112]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b358:	6053      	str	r3, [r2, #4]
		if(PSV_Control.Blower_Wait_Time_Milli_Second < 0)
 800b35a:	4b1b      	ldr	r3, [pc, #108]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da02      	bge.n	800b368 <PSV_APNEA_COUNTER_TRACE+0x64>
			PSV_Control.Blower_Wait_Time_Milli_Second=0;
 800b362:	4b19      	ldr	r3, [pc, #100]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b364:	2200      	movs	r2, #0
 800b366:	605a      	str	r2, [r3, #4]
		if(PSV_Control.Blower_Wait_Time_Milli_Second < 100)
 800b368:	4b17      	ldr	r3, [pc, #92]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	2b63      	cmp	r3, #99	; 0x63
 800b36e:	dc03      	bgt.n	800b378 <PSV_APNEA_COUNTER_TRACE+0x74>
			PSV_Control.Trigger_Check_Wait_Time = 1000;
 800b370:	4b15      	ldr	r3, [pc, #84]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b376:	609a      	str	r2, [r3, #8]
	}

	if(PSV_Control.Trigger_Check_Wait_Time > 0 )
 800b378:	4b13      	ldr	r3, [pc, #76]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dd0b      	ble.n	800b398 <PSV_APNEA_COUNTER_TRACE+0x94>
	{
		PSV_Control.Trigger_Check_Wait_Time = (PSV_Control.Trigger_Check_Wait_Time -2);
 800b380:	4b11      	ldr	r3, [pc, #68]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	3b02      	subs	r3, #2
 800b386:	4a10      	ldr	r2, [pc, #64]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b388:	6093      	str	r3, [r2, #8]
		 if(PSV_Control.Trigger_Check_Wait_Time < 0)
 800b38a:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	da02      	bge.n	800b398 <PSV_APNEA_COUNTER_TRACE+0x94>
			 PSV_Control.Trigger_Check_Wait_Time =0;
 800b392:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b394:	2200      	movs	r2, #0
 800b396:	609a      	str	r2, [r3, #8]
	}

	if(PSV_Control._INSPIRATION_TIME  > 0)
 800b398:	4b0b      	ldr	r3, [pc, #44]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dd0b      	ble.n	800b3b8 <PSV_APNEA_COUNTER_TRACE+0xb4>
	{
		PSV_Control._INSPIRATION_TIME = (PSV_Control._INSPIRATION_TIME -2);
 800b3a0:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	3b02      	subs	r3, #2
 800b3a6:	4a08      	ldr	r2, [pc, #32]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b3a8:	60d3      	str	r3, [r2, #12]
		if(PSV_Control._INSPIRATION_TIME < 0)
 800b3aa:	4b07      	ldr	r3, [pc, #28]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	da02      	bge.n	800b3b8 <PSV_APNEA_COUNTER_TRACE+0xb4>
			PSV_Control._INSPIRATION_TIME =0;
 800b3b2:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	60da      	str	r2, [r3, #12]
	}

}
 800b3b8:	bf00      	nop
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20013da4 	.word	0x20013da4
 800b3c8:	20014248 	.word	0x20014248

0800b3cc <BIPAP_APNEA_COUNTER_TRACE>:




void BIPAP_APNEA_COUNTER_TRACE()
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
	if(BIPAP.APNEA_COUNTER > 0)
 800b3d0:	4b2e      	ldr	r3, [pc, #184]	; (800b48c <BIPAP_APNEA_COUNTER_TRACE+0xc0>)
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dd0b      	ble.n	800b3f0 <BIPAP_APNEA_COUNTER_TRACE+0x24>
	{
		BIPAP.APNEA_COUNTER = (BIPAP.APNEA_COUNTER -2);
 800b3d8:	4b2c      	ldr	r3, [pc, #176]	; (800b48c <BIPAP_APNEA_COUNTER_TRACE+0xc0>)
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	3b02      	subs	r3, #2
 800b3de:	4a2b      	ldr	r2, [pc, #172]	; (800b48c <BIPAP_APNEA_COUNTER_TRACE+0xc0>)
 800b3e0:	6193      	str	r3, [r2, #24]
		if(BIPAP.APNEA_COUNTER < 0)
 800b3e2:	4b2a      	ldr	r3, [pc, #168]	; (800b48c <BIPAP_APNEA_COUNTER_TRACE+0xc0>)
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	da02      	bge.n	800b3f0 <BIPAP_APNEA_COUNTER_TRACE+0x24>
		{
			BIPAP.APNEA_COUNTER = 0;
 800b3ea:	4b28      	ldr	r3, [pc, #160]	; (800b48c <BIPAP_APNEA_COUNTER_TRACE+0xc0>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	619a      	str	r2, [r3, #24]
		}
	}
	if(BIPAP_Control.BIPAP_EPAP_Settle_Time > 0)
 800b3f0:	4b27      	ldr	r3, [pc, #156]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dd0b      	ble.n	800b410 <BIPAP_APNEA_COUNTER_TRACE+0x44>
	{
		BIPAP_Control.BIPAP_EPAP_Settle_Time = (BIPAP_Control.BIPAP_EPAP_Settle_Time -2);
 800b3f8:	4b25      	ldr	r3, [pc, #148]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3b02      	subs	r3, #2
 800b3fe:	4a24      	ldr	r2, [pc, #144]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b400:	6013      	str	r3, [r2, #0]
		if(BIPAP_Control.BIPAP_EPAP_Settle_Time < 0)
 800b402:	4b23      	ldr	r3, [pc, #140]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	da02      	bge.n	800b410 <BIPAP_APNEA_COUNTER_TRACE+0x44>
		{
			BIPAP_Control.BIPAP_EPAP_Settle_Time = 0;
 800b40a:	4b21      	ldr	r3, [pc, #132]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b40c:	2200      	movs	r2, #0
 800b40e:	601a      	str	r2, [r3, #0]
		}
	}

	if(BIPAP_Control.Blower_Wait_Time_Milli_Second > 0)
 800b410:	4b1f      	ldr	r3, [pc, #124]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	dd13      	ble.n	800b440 <BIPAP_APNEA_COUNTER_TRACE+0x74>
	{
		BIPAP_Control.Blower_Wait_Time_Milli_Second = (BIPAP_Control.Blower_Wait_Time_Milli_Second -2);
 800b418:	4b1d      	ldr	r3, [pc, #116]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	3b02      	subs	r3, #2
 800b41e:	4a1c      	ldr	r2, [pc, #112]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b420:	6053      	str	r3, [r2, #4]
		if(BIPAP_Control.Blower_Wait_Time_Milli_Second < 0)
 800b422:	4b1b      	ldr	r3, [pc, #108]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	da02      	bge.n	800b430 <BIPAP_APNEA_COUNTER_TRACE+0x64>
			BIPAP_Control.Blower_Wait_Time_Milli_Second=0;
 800b42a:	4b19      	ldr	r3, [pc, #100]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	605a      	str	r2, [r3, #4]
		if(BIPAP_Control.Blower_Wait_Time_Milli_Second < 100)
 800b430:	4b17      	ldr	r3, [pc, #92]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	2b63      	cmp	r3, #99	; 0x63
 800b436:	dc03      	bgt.n	800b440 <BIPAP_APNEA_COUNTER_TRACE+0x74>
			BIPAP_Control.Trigger_Check_Wait_Time = 1000;
 800b438:	4b15      	ldr	r3, [pc, #84]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b43a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b43e:	609a      	str	r2, [r3, #8]
	}

	if(BIPAP_Control.Trigger_Check_Wait_Time > 0 )
 800b440:	4b13      	ldr	r3, [pc, #76]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	dd0b      	ble.n	800b460 <BIPAP_APNEA_COUNTER_TRACE+0x94>
	{
		BIPAP_Control.Trigger_Check_Wait_Time = (BIPAP_Control.Trigger_Check_Wait_Time -2);
 800b448:	4b11      	ldr	r3, [pc, #68]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	3b02      	subs	r3, #2
 800b44e:	4a10      	ldr	r2, [pc, #64]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b450:	6093      	str	r3, [r2, #8]
		 if(BIPAP_Control.Trigger_Check_Wait_Time < 0)
 800b452:	4b0f      	ldr	r3, [pc, #60]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	2b00      	cmp	r3, #0
 800b458:	da02      	bge.n	800b460 <BIPAP_APNEA_COUNTER_TRACE+0x94>
			 BIPAP_Control.Trigger_Check_Wait_Time =0;
 800b45a:	4b0d      	ldr	r3, [pc, #52]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	609a      	str	r2, [r3, #8]
	}

	if(BIPAP_Control._INSPIRATION_TIME  > 0)
 800b460:	4b0b      	ldr	r3, [pc, #44]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	dd0b      	ble.n	800b480 <BIPAP_APNEA_COUNTER_TRACE+0xb4>
	{
		BIPAP_Control._INSPIRATION_TIME = (BIPAP_Control._INSPIRATION_TIME -2);
 800b468:	4b09      	ldr	r3, [pc, #36]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	3b02      	subs	r3, #2
 800b46e:	4a08      	ldr	r2, [pc, #32]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b470:	60d3      	str	r3, [r2, #12]
		if(BIPAP_Control._INSPIRATION_TIME < 0)
 800b472:	4b07      	ldr	r3, [pc, #28]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	da02      	bge.n	800b480 <BIPAP_APNEA_COUNTER_TRACE+0xb4>
			BIPAP_Control._INSPIRATION_TIME =0;
 800b47a:	4b05      	ldr	r3, [pc, #20]	; (800b490 <BIPAP_APNEA_COUNTER_TRACE+0xc4>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	60da      	str	r2, [r3, #12]
	}
}
 800b480:	bf00      	nop
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	20013b50 	.word	0x20013b50
 800b490:	20014048 	.word	0x20014048

0800b494 <CPAP_APNEA_COUNTER_TRACE>:



void CPAP_APNEA_COUNTER_TRACE()
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
	if(CPAP.APNEA_COUNTER > 0)
 800b498:	4b28      	ldr	r3, [pc, #160]	; (800b53c <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800b49a:	695b      	ldr	r3, [r3, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	dd0b      	ble.n	800b4b8 <CPAP_APNEA_COUNTER_TRACE+0x24>
	{
		CPAP.APNEA_COUNTER = (CPAP.APNEA_COUNTER -2);
 800b4a0:	4b26      	ldr	r3, [pc, #152]	; (800b53c <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	3b02      	subs	r3, #2
 800b4a6:	4a25      	ldr	r2, [pc, #148]	; (800b53c <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800b4a8:	6153      	str	r3, [r2, #20]
		if(CPAP.APNEA_COUNTER < 0)
 800b4aa:	4b24      	ldr	r3, [pc, #144]	; (800b53c <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	da02      	bge.n	800b4b8 <CPAP_APNEA_COUNTER_TRACE+0x24>
		{
			CPAP.APNEA_COUNTER = 0;
 800b4b2:	4b22      	ldr	r3, [pc, #136]	; (800b53c <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	615a      	str	r2, [r3, #20]
		}
	}
	if(CPAP_Control.CPAP_Settle_Time > 0)
 800b4b8:	4b21      	ldr	r3, [pc, #132]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dd10      	ble.n	800b4e2 <CPAP_APNEA_COUNTER_TRACE+0x4e>
	{

		CPAP_Control.CPAP_Settle_Time = (CPAP_Control.CPAP_Settle_Time -2);
 800b4c0:	4b1f      	ldr	r3, [pc, #124]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3b02      	subs	r3, #2
 800b4c6:	4a1e      	ldr	r2, [pc, #120]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4c8:	6013      	str	r3, [r2, #0]
		if(CPAP_Control.CPAP_Settle_Time < 0)
 800b4ca:	4b1d      	ldr	r3, [pc, #116]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	da07      	bge.n	800b4e2 <CPAP_APNEA_COUNTER_TRACE+0x4e>
		{
			Alert_Status                  = NO_ALERT;
 800b4d2:	4b1c      	ldr	r3, [pc, #112]	; (800b544 <CPAP_APNEA_COUNTER_TRACE+0xb0>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	701a      	strb	r2, [r3, #0]
			LED_Alert();
 800b4d8:	f7f6 fa6a 	bl	80019b0 <LED_Alert>
			CPAP_Control.CPAP_Settle_Time = 0;
 800b4dc:	4b18      	ldr	r3, [pc, #96]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
		}
	}

	if(CPAP_Control.Blower_Wait_Time_Milli_Second > 0)
 800b4e2:	4b17      	ldr	r3, [pc, #92]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	dd16      	ble.n	800b518 <CPAP_APNEA_COUNTER_TRACE+0x84>
	{
		CPAP_Control.Blower_Wait_Time_Milli_Second = (CPAP_Control.Blower_Wait_Time_Milli_Second -2);
 800b4ea:	4b15      	ldr	r3, [pc, #84]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	3b02      	subs	r3, #2
 800b4f0:	4a13      	ldr	r2, [pc, #76]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4f2:	6053      	str	r3, [r2, #4]
		if(CPAP_Control.Blower_Wait_Time_Milli_Second < 0)
 800b4f4:	4b12      	ldr	r3, [pc, #72]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	da02      	bge.n	800b502 <CPAP_APNEA_COUNTER_TRACE+0x6e>
			CPAP_Control.Blower_Wait_Time_Milli_Second=0;
 800b4fc:	4b10      	ldr	r3, [pc, #64]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	605a      	str	r2, [r3, #4]
		if(CPAP_Control.Blower_Wait_Time_Milli_Second < 100)
 800b502:	4b0f      	ldr	r3, [pc, #60]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	2b63      	cmp	r3, #99	; 0x63
 800b508:	dc06      	bgt.n	800b518 <CPAP_APNEA_COUNTER_TRACE+0x84>
		{
			CPAP_Control.Trigger_Check_Wait_Time = 1000;
 800b50a:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b50c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b510:	609a      	str	r2, [r3, #8]
			Patient_Trigger                      = NO_PATIENT_TRIGGER;
 800b512:	4b0d      	ldr	r3, [pc, #52]	; (800b548 <CPAP_APNEA_COUNTER_TRACE+0xb4>)
 800b514:	2200      	movs	r2, #0
 800b516:	701a      	strb	r2, [r3, #0]
		}
	}

	if(CPAP_Control.Trigger_Check_Wait_Time > 0 )
 800b518:	4b09      	ldr	r3, [pc, #36]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	dd0b      	ble.n	800b538 <CPAP_APNEA_COUNTER_TRACE+0xa4>
	{
		CPAP_Control.Trigger_Check_Wait_Time = (CPAP_Control.Trigger_Check_Wait_Time -2);
 800b520:	4b07      	ldr	r3, [pc, #28]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	3b02      	subs	r3, #2
 800b526:	4a06      	ldr	r2, [pc, #24]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b528:	6093      	str	r3, [r2, #8]
		 if(CPAP_Control.Trigger_Check_Wait_Time < 0)
 800b52a:	4b05      	ldr	r3, [pc, #20]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	da02      	bge.n	800b538 <CPAP_APNEA_COUNTER_TRACE+0xa4>
			 CPAP_Control.Trigger_Check_Wait_Time =0;
 800b532:	4b03      	ldr	r3, [pc, #12]	; (800b540 <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800b534:	2200      	movs	r2, #0
 800b536:	609a      	str	r2, [r3, #8]
	}
}
 800b538:	bf00      	nop
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20013b14 	.word	0x20013b14
 800b540:	20013c90 	.word	0x20013c90
 800b544:	20013f88 	.word	0x20013f88
 800b548:	20013ca9 	.word	0x20013ca9

0800b54c <APRV_APNEA_COUNTER_TRACE>:


void APRV_APNEA_COUNTER_TRACE()
{
 800b54c:	b480      	push	{r7}
 800b54e:	af00      	add	r7, sp, #0
	if( APRV.T_HIGH_VAL_COUNTER >0)
 800b550:	4b1b      	ldr	r3, [pc, #108]	; (800b5c0 <APRV_APNEA_COUNTER_TRACE+0x74>)
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d014      	beq.n	800b582 <APRV_APNEA_COUNTER_TRACE+0x36>
	{
		APRV.T_HIGH_VAL_COUNTER = (APRV.T_HIGH_VAL_COUNTER- 2);
 800b558:	4b19      	ldr	r3, [pc, #100]	; (800b5c0 <APRV_APNEA_COUNTER_TRACE+0x74>)
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	3b02      	subs	r3, #2
 800b55e:	4a18      	ldr	r2, [pc, #96]	; (800b5c0 <APRV_APNEA_COUNTER_TRACE+0x74>)
 800b560:	6113      	str	r3, [r2, #16]
		if( APRV.T_HIGH_VAL_COUNTER < 100)
 800b562:	4b17      	ldr	r3, [pc, #92]	; (800b5c0 <APRV_APNEA_COUNTER_TRACE+0x74>)
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	2b63      	cmp	r3, #99	; 0x63
 800b568:	d80b      	bhi.n	800b582 <APRV_APNEA_COUNTER_TRACE+0x36>
		{
			APRV_PIP_average.PIP_Cumulative_Val += Pressure_sensor.Pressure_Val;
 800b56a:	4b16      	ldr	r3, [pc, #88]	; (800b5c4 <APRV_APNEA_COUNTER_TRACE+0x78>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a16      	ldr	r2, [pc, #88]	; (800b5c8 <APRV_APNEA_COUNTER_TRACE+0x7c>)
 800b570:	7892      	ldrb	r2, [r2, #2]
 800b572:	4413      	add	r3, r2
 800b574:	4a13      	ldr	r2, [pc, #76]	; (800b5c4 <APRV_APNEA_COUNTER_TRACE+0x78>)
 800b576:	6013      	str	r3, [r2, #0]
			APRV_PIP_average.PIP_Event_Count++;
 800b578:	4b12      	ldr	r3, [pc, #72]	; (800b5c4 <APRV_APNEA_COUNTER_TRACE+0x78>)
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	3301      	adds	r3, #1
 800b57e:	4a11      	ldr	r2, [pc, #68]	; (800b5c4 <APRV_APNEA_COUNTER_TRACE+0x78>)
 800b580:	6053      	str	r3, [r2, #4]
		}
	}

	if( APRV.T_LOW_VAL_COUNTER >0)
 800b582:	4b0f      	ldr	r3, [pc, #60]	; (800b5c0 <APRV_APNEA_COUNTER_TRACE+0x74>)
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d014      	beq.n	800b5b4 <APRV_APNEA_COUNTER_TRACE+0x68>
	{
		APRV.T_LOW_VAL_COUNTER = (APRV.T_LOW_VAL_COUNTER- 2);
 800b58a:	4b0d      	ldr	r3, [pc, #52]	; (800b5c0 <APRV_APNEA_COUNTER_TRACE+0x74>)
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	3b02      	subs	r3, #2
 800b590:	4a0b      	ldr	r2, [pc, #44]	; (800b5c0 <APRV_APNEA_COUNTER_TRACE+0x74>)
 800b592:	60d3      	str	r3, [r2, #12]
		if( APRV.T_LOW_VAL_COUNTER < 100)
 800b594:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <APRV_APNEA_COUNTER_TRACE+0x74>)
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	2b63      	cmp	r3, #99	; 0x63
 800b59a:	d80b      	bhi.n	800b5b4 <APRV_APNEA_COUNTER_TRACE+0x68>
		{
			APRV_PEEP_average.PEEP_Cumulative_Val += Pressure_sensor.Pressure_Val;
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <APRV_APNEA_COUNTER_TRACE+0x80>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a09      	ldr	r2, [pc, #36]	; (800b5c8 <APRV_APNEA_COUNTER_TRACE+0x7c>)
 800b5a2:	7892      	ldrb	r2, [r2, #2]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	4a09      	ldr	r2, [pc, #36]	; (800b5cc <APRV_APNEA_COUNTER_TRACE+0x80>)
 800b5a8:	6013      	str	r3, [r2, #0]
			APRV_PEEP_average.PEEP_Event_Count++;
 800b5aa:	4b08      	ldr	r3, [pc, #32]	; (800b5cc <APRV_APNEA_COUNTER_TRACE+0x80>)
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	4a06      	ldr	r2, [pc, #24]	; (800b5cc <APRV_APNEA_COUNTER_TRACE+0x80>)
 800b5b2:	6053      	str	r3, [r2, #4]
		}
	}
}
 800b5b4:	bf00      	nop
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	200140dc 	.word	0x200140dc
 800b5c4:	20014160 	.word	0x20014160
 800b5c8:	2001405c 	.word	0x2001405c
 800b5cc:	20013f4c 	.word	0x20013f4c

0800b5d0 <BREATH_COUNT>:


void BREATH_COUNT()
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	af00      	add	r7, sp, #0
	if(One_Minite_Or_60000_Ms>0)
 800b5d4:	4b17      	ldr	r3, [pc, #92]	; (800b634 <BREATH_COUNT+0x64>)
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d026      	beq.n	800b62a <BREATH_COUNT+0x5a>
	{
		One_Minite_Or_60000_Ms=One_Minite_Or_60000_Ms-2;
 800b5dc:	4b15      	ldr	r3, [pc, #84]	; (800b634 <BREATH_COUNT+0x64>)
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	3b02      	subs	r3, #2
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	4b13      	ldr	r3, [pc, #76]	; (800b634 <BREATH_COUNT+0x64>)
 800b5e6:	801a      	strh	r2, [r3, #0]

		if(One_Minite_Or_60000_Ms==0)
 800b5e8:	4b12      	ldr	r3, [pc, #72]	; (800b634 <BREATH_COUNT+0x64>)
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10a      	bne.n	800b606 <BREATH_COUNT+0x36>
		{
			Breath_In_Minite       = Breath;
 800b5f0:	4b11      	ldr	r3, [pc, #68]	; (800b638 <BREATH_COUNT+0x68>)
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	4b11      	ldr	r3, [pc, #68]	; (800b63c <BREATH_COUNT+0x6c>)
 800b5f6:	701a      	strb	r2, [r3, #0]
			One_Minite_Or_60000_Ms = 60000;
 800b5f8:	4b0e      	ldr	r3, [pc, #56]	; (800b634 <BREATH_COUNT+0x64>)
 800b5fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 800b5fe:	801a      	strh	r2, [r3, #0]
			Breath=0;
 800b600:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <BREATH_COUNT+0x68>)
 800b602:	2200      	movs	r2, #0
 800b604:	701a      	strb	r2, [r3, #0]
		}

			if(  ( ! ( BREATH_STATE >> 8) & 1)  )
 800b606:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <BREATH_COUNT+0x70>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	121b      	asrs	r3, r3, #8
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10c      	bne.n	800b62a <BREATH_COUNT+0x5a>
			{
				if(Breath_Count == Count_The_Breath)
 800b610:	4b0c      	ldr	r3, [pc, #48]	; (800b644 <BREATH_COUNT+0x74>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d108      	bne.n	800b62a <BREATH_COUNT+0x5a>
				{
					Breath++;
 800b618:	4b07      	ldr	r3, [pc, #28]	; (800b638 <BREATH_COUNT+0x68>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	3301      	adds	r3, #1
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	4b05      	ldr	r3, [pc, #20]	; (800b638 <BREATH_COUNT+0x68>)
 800b622:	701a      	strb	r2, [r3, #0]
					Breath_Count = Leave_Count_The_Breath;
 800b624:	4b07      	ldr	r3, [pc, #28]	; (800b644 <BREATH_COUNT+0x74>)
 800b626:	2200      	movs	r2, #0
 800b628:	701a      	strb	r2, [r3, #0]
				}
			}
	}
}
 800b62a:	bf00      	nop
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	20013fa6 	.word	0x20013fa6
 800b638:	20014069 	.word	0x20014069
 800b63c:	20013f98 	.word	0x20013f98
 800b640:	200140fd 	.word	0x200140fd
 800b644:	200139a6 	.word	0x200139a6

0800b648 <Nebuliser_Timing>:


void Nebuliser_Timing()
{
 800b648:	b480      	push	{r7}
 800b64a:	af00      	add	r7, sp, #0
	if(Nebuliser.NEBULISER_TIMER>0)
 800b64c:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <Nebuliser_Timing+0x30>)
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dd0b      	ble.n	800b66c <Nebuliser_Timing+0x24>
	{
		Nebuliser.NEBULISER_TIMER = (Nebuliser.NEBULISER_TIMER - 2);
 800b654:	4b08      	ldr	r3, [pc, #32]	; (800b678 <Nebuliser_Timing+0x30>)
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	3b02      	subs	r3, #2
 800b65a:	4a07      	ldr	r2, [pc, #28]	; (800b678 <Nebuliser_Timing+0x30>)
 800b65c:	6093      	str	r3, [r2, #8]

		if(Nebuliser.NEBULISER_TIMER < 0)
 800b65e:	4b06      	ldr	r3, [pc, #24]	; (800b678 <Nebuliser_Timing+0x30>)
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	da02      	bge.n	800b66c <Nebuliser_Timing+0x24>
		{
			Nebuliser.NEBULISER_TIMER = 0;
 800b666:	4b04      	ldr	r3, [pc, #16]	; (800b678 <Nebuliser_Timing+0x30>)
 800b668:	2200      	movs	r2, #0
 800b66a:	609a      	str	r2, [r3, #8]
		}
	}
}
 800b66c:	bf00      	nop
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	20013f60 	.word	0x20013f60

0800b67c <Oxygen_Blending_Task>:




void Oxygen_Blending_Task(void *argument)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
	while(1)
	{
			Oxygen_Blending(Common_Mode_Parameter._FIO2_Val);
 800b684:	4b04      	ldr	r3, [pc, #16]	; (800b698 <Oxygen_Blending_Task+0x1c>)
 800b686:	78db      	ldrb	r3, [r3, #3]
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 f807 	bl	800b69c <Oxygen_Blending>
			vTaskDelay(Two_Millisecond_Delay);
 800b68e:	2002      	movs	r0, #2
 800b690:	f013 fdcc 	bl	801f22c <vTaskDelay>
			Oxygen_Blending(Common_Mode_Parameter._FIO2_Val);
 800b694:	e7f6      	b.n	800b684 <Oxygen_Blending_Task+0x8>
 800b696:	bf00      	nop
 800b698:	20013ba4 	.word	0x20013ba4

0800b69c <Oxygen_Blending>:
	}
}


void Oxygen_Blending(uint8_t FIO2_Val)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	71fb      	strb	r3, [r7, #7]
	if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 800b6a6:	4b2a      	ldr	r3, [pc, #168]	; (800b750 <Oxygen_Blending+0xb4>)
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d12d      	bne.n	800b70a <Oxygen_Blending+0x6e>
	{
		if(Fio2_Blending_Method == PRESSURE_CONTROLLED)
 800b6ae:	4b29      	ldr	r3, [pc, #164]	; (800b754 <Oxygen_Blending+0xb8>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10c      	bne.n	800b6d0 <Oxygen_Blending+0x34>
		{
			if(Pressure_sensor.Pressure_Val >= Common_Mode_Parameter._PIP_Val )
 800b6b6:	4b28      	ldr	r3, [pc, #160]	; (800b758 <Oxygen_Blending+0xbc>)
 800b6b8:	789a      	ldrb	r2, [r3, #2]
 800b6ba:	4b28      	ldr	r3, [pc, #160]	; (800b75c <Oxygen_Blending+0xc0>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d32a      	bcc.n	800b718 <Oxygen_Blending+0x7c>
			{
				Parkar_valve_Signal(0);
 800b6c2:	4b27      	ldr	r3, [pc, #156]	; (800b760 <Oxygen_Blending+0xc4>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	615a      	str	r2, [r3, #20]
				Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800b6c8:	4b26      	ldr	r3, [pc, #152]	; (800b764 <Oxygen_Blending+0xc8>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	701a      	strb	r2, [r3, #0]
 800b6ce:	e023      	b.n	800b718 <Oxygen_Blending+0x7c>
			}

		}
		else if(Fio2_Blending_Method == VOLUME_CONTROLLED)
 800b6d0:	4b20      	ldr	r3, [pc, #128]	; (800b754 <Oxygen_Blending+0xb8>)
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d11f      	bne.n	800b718 <Oxygen_Blending+0x7c>
		{
			if(vol.Volume >= (Common_Mode_Parameter._VOLUME_Val-Volume_control_Task.Volume_Stop_Value))
 800b6d8:	4b23      	ldr	r3, [pc, #140]	; (800b768 <Oxygen_Blending+0xcc>)
 800b6da:	ed93 7a00 	vldr	s14, [r3]
 800b6de:	4b1f      	ldr	r3, [pc, #124]	; (800b75c <Oxygen_Blending+0xc0>)
 800b6e0:	889b      	ldrh	r3, [r3, #4]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	4b21      	ldr	r3, [pc, #132]	; (800b76c <Oxygen_Blending+0xd0>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	ee07 3a90 	vmov	s15, r3
 800b6ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fa:	db0d      	blt.n	800b718 <Oxygen_Blending+0x7c>
			{
				Parkar_valve_Signal(0);
 800b6fc:	4b18      	ldr	r3, [pc, #96]	; (800b760 <Oxygen_Blending+0xc4>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	615a      	str	r2, [r3, #20]
				Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800b702:	4b18      	ldr	r3, [pc, #96]	; (800b764 <Oxygen_Blending+0xc8>)
 800b704:	2200      	movs	r2, #0
 800b706:	701a      	strb	r2, [r3, #0]
 800b708:	e006      	b.n	800b718 <Oxygen_Blending+0x7c>
		}



	}
	else if(Run_Current_Breathe_State == Run_Expiration_Cycle)
 800b70a:	4b11      	ldr	r3, [pc, #68]	; (800b750 <Oxygen_Blending+0xb4>)
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d102      	bne.n	800b718 <Oxygen_Blending+0x7c>
	{
		 Parkar_valve_Signal(0);
 800b712:	4b13      	ldr	r3, [pc, #76]	; (800b760 <Oxygen_Blending+0xc4>)
 800b714:	2200      	movs	r2, #0
 800b716:	615a      	str	r2, [r3, #20]
	}
	if(Oxygen_Blending_Status == OXYGEN_NOT_ACHIEVED)
 800b718:	4b12      	ldr	r3, [pc, #72]	; (800b764 <Oxygen_Blending+0xc8>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d110      	bne.n	800b742 <Oxygen_Blending+0xa6>
	{
		O2_Flow_Event_Count ++;
 800b720:	4b13      	ldr	r3, [pc, #76]	; (800b770 <Oxygen_Blending+0xd4>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	4a12      	ldr	r2, [pc, #72]	; (800b770 <Oxygen_Blending+0xd4>)
 800b728:	6013      	str	r3, [r2, #0]
		O2_Flow_Cumulative_Val =( O2_Flow_Cumulative_Val +((int) O2_Flow_Sensor_Voltage) );
 800b72a:	4b12      	ldr	r3, [pc, #72]	; (800b774 <Oxygen_Blending+0xd8>)
 800b72c:	edd3 7a00 	vldr	s15, [r3]
 800b730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b734:	ee17 2a90 	vmov	r2, s15
 800b738:	4b0f      	ldr	r3, [pc, #60]	; (800b778 <Oxygen_Blending+0xdc>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4413      	add	r3, r2
 800b73e:	4a0e      	ldr	r2, [pc, #56]	; (800b778 <Oxygen_Blending+0xdc>)
 800b740:	6013      	str	r3, [r2, #0]
	}
}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	20013f7c 	.word	0x20013f7c
 800b754:	20013aec 	.word	0x20013aec
 800b758:	2001405c 	.word	0x2001405c
 800b75c:	20013ba4 	.word	0x20013ba4
 800b760:	40007400 	.word	0x40007400
 800b764:	20014241 	.word	0x20014241
 800b768:	200140c8 	.word	0x200140c8
 800b76c:	20013f70 	.word	0x20013f70
 800b770:	2001484c 	.word	0x2001484c
 800b774:	20014100 	.word	0x20014100
 800b778:	20014850 	.word	0x20014850

0800b77c <Adjust_Servo_And_Calculate_O2>:



void Adjust_Servo_And_Calculate_O2(uint8_t FIO2_Val)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	71fb      	strb	r3, [r7, #7]
			if(FIO2_Val > 21)
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	2b15      	cmp	r3, #21
 800b78a:	f240 80b2 	bls.w	800b8f2 <Adjust_Servo_And_Calculate_O2+0x176>
			{

				O2_Flow_Val = ((float)O2_Flow_Cumulative_Val/O2_Flow_Event_Count);
 800b78e:	4b64      	ldr	r3, [pc, #400]	; (800b920 <Adjust_Servo_And_Calculate_O2+0x1a4>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	ee07 3a90 	vmov	s15, r3
 800b796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b79a:	4b62      	ldr	r3, [pc, #392]	; (800b924 <Adjust_Servo_And_Calculate_O2+0x1a8>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7aa:	4b5f      	ldr	r3, [pc, #380]	; (800b928 <Adjust_Servo_And_Calculate_O2+0x1ac>)
 800b7ac:	edc3 7a00 	vstr	s15, [r3]
				O2_Flow_Event_Count =1;
 800b7b0:	4b5c      	ldr	r3, [pc, #368]	; (800b924 <Adjust_Servo_And_Calculate_O2+0x1a8>)
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	601a      	str	r2, [r3, #0]
				O2_Flow_Cumulative_Val=1;
 800b7b6:	4b5a      	ldr	r3, [pc, #360]	; (800b920 <Adjust_Servo_And_Calculate_O2+0x1a4>)
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	601a      	str	r2, [r3, #0]

				Oxygen_Parameter.OXYGEN_AVG_VAL = ((float)Oxygen_Parameter.OXYGEN_Cumulative_Val/(float)Oxygen_Parameter.OXYGEN_Event_Count);
 800b7bc:	4b5b      	ldr	r3, [pc, #364]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	ee07 3a90 	vmov	s15, r3
 800b7c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7c8:	4b58      	ldr	r3, [pc, #352]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	ee07 3a90 	vmov	s15, r3
 800b7d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7d8:	4b54      	ldr	r3, [pc, #336]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b7da:	edc3 7a02 	vstr	s15, [r3, #8]
				Oxygen_Parameter.Achieved_Oxygen= (uint8_t)(Oxygen_Parameter.OXYGEN_AVG_VAL / O2_Sensor_Maximum_mv);
 800b7de:	4b53      	ldr	r3, [pc, #332]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b7e0:	edd3 6a02 	vldr	s13, [r3, #8]
 800b7e4:	4b52      	ldr	r3, [pc, #328]	; (800b930 <Adjust_Servo_And_Calculate_O2+0x1b4>)
 800b7e6:	ed93 7a00 	vldr	s14, [r3]
 800b7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7f2:	edc7 7a00 	vstr	s15, [r7]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	b2da      	uxtb	r2, r3
 800b7fa:	4b4c      	ldr	r3, [pc, #304]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b7fc:	731a      	strb	r2, [r3, #12]

				if(Oxygen_Parameter.Achieved_Oxygen > 100)
 800b7fe:	4b4b      	ldr	r3, [pc, #300]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b800:	7b1b      	ldrb	r3, [r3, #12]
 800b802:	2b64      	cmp	r3, #100	; 0x64
 800b804:	d902      	bls.n	800b80c <Adjust_Servo_And_Calculate_O2+0x90>
					Oxygen_Parameter.Achieved_Oxygen=100;
 800b806:	4b49      	ldr	r3, [pc, #292]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b808:	2264      	movs	r2, #100	; 0x64
 800b80a:	731a      	strb	r2, [r3, #12]

				if(Oxygen_Parameter.Achieved_Oxygen < 21)
 800b80c:	4b47      	ldr	r3, [pc, #284]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b80e:	7b1b      	ldrb	r3, [r3, #12]
 800b810:	2b14      	cmp	r3, #20
 800b812:	d802      	bhi.n	800b81a <Adjust_Servo_And_Calculate_O2+0x9e>
					Oxygen_Parameter.Achieved_Oxygen=21;
 800b814:	4b45      	ldr	r3, [pc, #276]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b816:	2215      	movs	r2, #21
 800b818:	731a      	strb	r2, [r3, #12]

				Oxygen_Parameter.OXYGEN_Event_Count     = 10;
 800b81a:	4b44      	ldr	r3, [pc, #272]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b81c:	220a      	movs	r2, #10
 800b81e:	601a      	str	r2, [r3, #0]
				Oxygen_Parameter.OXYGEN_Cumulative_Val  = 10;
 800b820:	4b42      	ldr	r3, [pc, #264]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b822:	220a      	movs	r2, #10
 800b824:	605a      	str	r2, [r3, #4]

					if(Oxygen_Parameter.Achieved_Oxygen < (FIO2_Val-3))
 800b826:	4b41      	ldr	r3, [pc, #260]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b828:	7b1b      	ldrb	r3, [r3, #12]
 800b82a:	461a      	mov	r2, r3
 800b82c:	79fb      	ldrb	r3, [r7, #7]
 800b82e:	3b03      	subs	r3, #3
 800b830:	429a      	cmp	r2, r3
 800b832:	da2b      	bge.n	800b88c <Adjust_Servo_And_Calculate_O2+0x110>
					{
						Oxygen_Parameter.Servo_Move_Forward++;
 800b834:	4b3d      	ldr	r3, [pc, #244]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b836:	7b5b      	ldrb	r3, [r3, #13]
 800b838:	3301      	adds	r3, #1
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	4b3b      	ldr	r3, [pc, #236]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b83e:	735a      	strb	r2, [r3, #13]
							if(Oxygen_Parameter.Servo_Move_Forward > 3)
 800b840:	4b3a      	ldr	r3, [pc, #232]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b842:	7b5b      	ldrb	r3, [r3, #13]
 800b844:	2b03      	cmp	r3, #3
 800b846:	d90d      	bls.n	800b864 <Adjust_Servo_And_Calculate_O2+0xe8>
							{
								Oxygen_Parameter.Servo_Position=Oxygen_Parameter.Servo_Position+5;
 800b848:	4b38      	ldr	r3, [pc, #224]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b84a:	7bdb      	ldrb	r3, [r3, #15]
 800b84c:	3305      	adds	r3, #5
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	4b36      	ldr	r3, [pc, #216]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b852:	73da      	strb	r2, [r3, #15]
								Servo_Info(Oxygen_Parameter.Servo_Position);
 800b854:	4b35      	ldr	r3, [pc, #212]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b856:	7bdb      	ldrb	r3, [r3, #15]
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 f901 	bl	800ba60 <Servo_Info>


								Oxygen_Parameter.Servo_Move_Forward=0;
 800b85e:	4b33      	ldr	r3, [pc, #204]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b860:	2200      	movs	r2, #0
 800b862:	735a      	strb	r2, [r3, #13]
							}

						if(Common_Mode_Parameter._FIO2_Val != 100)
 800b864:	4b33      	ldr	r3, [pc, #204]	; (800b934 <Adjust_Servo_And_Calculate_O2+0x1b8>)
 800b866:	78db      	ldrb	r3, [r3, #3]
 800b868:	2b64      	cmp	r3, #100	; 0x64
 800b86a:	d050      	beq.n	800b90e <Adjust_Servo_And_Calculate_O2+0x192>
						{
							if(Oxygen_Parameter.Servo_Position >= SERVO_FULL_CLOSED )
 800b86c:	4b2f      	ldr	r3, [pc, #188]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b86e:	7bdb      	ldrb	r3, [r3, #15]
 800b870:	2b59      	cmp	r3, #89	; 0x59
 800b872:	d94c      	bls.n	800b90e <Adjust_Servo_And_Calculate_O2+0x192>
							{
								Oxygen_Parameter.Servo_Position=90;
 800b874:	4b2d      	ldr	r3, [pc, #180]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b876:	225a      	movs	r2, #90	; 0x5a
 800b878:	73da      	strb	r2, [r3, #15]
								Servo_Info(Oxygen_Parameter.Servo_Position);
 800b87a:	4b2c      	ldr	r3, [pc, #176]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b87c:	7bdb      	ldrb	r3, [r3, #15]
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 f8ee 	bl	800ba60 <Servo_Info>
								Servo_Position_Feedback = SERVO_FULL_CLOSED;
 800b884:	4b2c      	ldr	r3, [pc, #176]	; (800b938 <Adjust_Servo_And_Calculate_O2+0x1bc>)
 800b886:	225a      	movs	r2, #90	; 0x5a
 800b888:	701a      	strb	r2, [r3, #0]
 800b88a:	e040      	b.n	800b90e <Adjust_Servo_And_Calculate_O2+0x192>
							}
						}
					}
					else if(Oxygen_Parameter.Achieved_Oxygen>(FIO2_Val+3))
 800b88c:	4b27      	ldr	r3, [pc, #156]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b88e:	7b1b      	ldrb	r3, [r3, #12]
 800b890:	461a      	mov	r2, r3
 800b892:	79fb      	ldrb	r3, [r7, #7]
 800b894:	3303      	adds	r3, #3
 800b896:	429a      	cmp	r2, r3
 800b898:	dd39      	ble.n	800b90e <Adjust_Servo_And_Calculate_O2+0x192>
					{
						Oxygen_Parameter.Servo_Move_Backward++;
 800b89a:	4b24      	ldr	r3, [pc, #144]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b89c:	7b9b      	ldrb	r3, [r3, #14]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	b2da      	uxtb	r2, r3
 800b8a2:	4b22      	ldr	r3, [pc, #136]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8a4:	739a      	strb	r2, [r3, #14]
							if(Oxygen_Parameter.Servo_Move_Backward > 3)
 800b8a6:	4b21      	ldr	r3, [pc, #132]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8a8:	7b9b      	ldrb	r3, [r3, #14]
 800b8aa:	2b03      	cmp	r3, #3
 800b8ac:	d90d      	bls.n	800b8ca <Adjust_Servo_And_Calculate_O2+0x14e>
							{
								Oxygen_Parameter.Servo_Position=Oxygen_Parameter.Servo_Position-5;
 800b8ae:	4b1f      	ldr	r3, [pc, #124]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8b0:	7bdb      	ldrb	r3, [r3, #15]
 800b8b2:	3b05      	subs	r3, #5
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8b8:	73da      	strb	r2, [r3, #15]
								Servo_Info(Oxygen_Parameter.Servo_Position);
 800b8ba:	4b1c      	ldr	r3, [pc, #112]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8bc:	7bdb      	ldrb	r3, [r3, #15]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 f8ce 	bl	800ba60 <Servo_Info>
								Oxygen_Parameter.Servo_Move_Backward=0;
 800b8c4:	4b19      	ldr	r3, [pc, #100]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	739a      	strb	r2, [r3, #14]
							}
							if(Common_Mode_Parameter._FIO2_Val != 100)
 800b8ca:	4b1a      	ldr	r3, [pc, #104]	; (800b934 <Adjust_Servo_And_Calculate_O2+0x1b8>)
 800b8cc:	78db      	ldrb	r3, [r3, #3]
 800b8ce:	2b64      	cmp	r3, #100	; 0x64
 800b8d0:	d01d      	beq.n	800b90e <Adjust_Servo_And_Calculate_O2+0x192>
							{
								if(Oxygen_Parameter.Servo_Position <= SERVO_FULL_OPEND)
 800b8d2:	4b16      	ldr	r3, [pc, #88]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8d4:	7bdb      	ldrb	r3, [r3, #15]
 800b8d6:	2b2d      	cmp	r3, #45	; 0x2d
 800b8d8:	d819      	bhi.n	800b90e <Adjust_Servo_And_Calculate_O2+0x192>
								{
									Oxygen_Parameter.Servo_Position=45;
 800b8da:	4b14      	ldr	r3, [pc, #80]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8dc:	222d      	movs	r2, #45	; 0x2d
 800b8de:	73da      	strb	r2, [r3, #15]
									Servo_Info(Oxygen_Parameter.Servo_Position);
 800b8e0:	4b12      	ldr	r3, [pc, #72]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8e2:	7bdb      	ldrb	r3, [r3, #15]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f000 f8bb 	bl	800ba60 <Servo_Info>
									Servo_Position_Feedback = SERVO_FULL_OPEND;
 800b8ea:	4b13      	ldr	r3, [pc, #76]	; (800b938 <Adjust_Servo_And_Calculate_O2+0x1bc>)
 800b8ec:	222d      	movs	r2, #45	; 0x2d
 800b8ee:	701a      	strb	r2, [r3, #0]
 800b8f0:	e00d      	b.n	800b90e <Adjust_Servo_And_Calculate_O2+0x192>
							}
					}
			}
			else
			{
				Oxygen_Parameter.Servo_Position=45;
 800b8f2:	4b0e      	ldr	r3, [pc, #56]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8f4:	222d      	movs	r2, #45	; 0x2d
 800b8f6:	73da      	strb	r2, [r3, #15]
				Servo_Info(Oxygen_Parameter.Servo_Position);
 800b8f8:	4b0c      	ldr	r3, [pc, #48]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b8fa:	7bdb      	ldrb	r3, [r3, #15]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 f8af 	bl	800ba60 <Servo_Info>
				Oxygen_Parameter.O2_DAC=0;
 800b902:	4b0a      	ldr	r3, [pc, #40]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b904:	2200      	movs	r2, #0
 800b906:	619a      	str	r2, [r3, #24]
				Parkar_valve_Signal(0);
 800b908:	4b0c      	ldr	r3, [pc, #48]	; (800b93c <Adjust_Servo_And_Calculate_O2+0x1c0>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	615a      	str	r2, [r3, #20]
			}
			Servo_Angle(Oxygen_Parameter.Servo_Position);
 800b90e:	4b07      	ldr	r3, [pc, #28]	; (800b92c <Adjust_Servo_And_Calculate_O2+0x1b0>)
 800b910:	7bda      	ldrb	r2, [r3, #15]
 800b912:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <Adjust_Servo_And_Calculate_O2+0x1c4>)
 800b914:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b916:	bf00      	nop
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	20014850 	.word	0x20014850
 800b924:	2001484c 	.word	0x2001484c
 800b928:	20013b94 	.word	0x20013b94
 800b92c:	2001409c 	.word	0x2001409c
 800b930:	20000004 	.word	0x20000004
 800b934:	20013ba4 	.word	0x20013ba4
 800b938:	20014074 	.word	0x20014074
 800b93c:	40007400 	.word	0x40007400
 800b940:	40001800 	.word	0x40001800

0800b944 <Get_Oxygen_Value>:

void Get_Oxygen_Value(uint8_t FIO2_Val)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	4603      	mov	r3, r0
 800b94c:	71fb      	strb	r3, [r7, #7]
	if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 800b94e:	4b24      	ldr	r3, [pc, #144]	; (800b9e0 <Get_Oxygen_Value+0x9c>)
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d128      	bne.n	800b9a8 <Get_Oxygen_Value+0x64>
	{
		if (FIO2_Val > 21)
 800b956:	79fb      	ldrb	r3, [r7, #7]
 800b958:	2b15      	cmp	r3, #21
 800b95a:	d925      	bls.n	800b9a8 <Get_Oxygen_Value+0x64>
		{
			O2_Sensor_Voltage = ( (O2_Sensor_Pin_Voltage * 3300) / 4095);
 800b95c:	4b21      	ldr	r3, [pc, #132]	; (800b9e4 <Get_Oxygen_Value+0xa0>)
 800b95e:	885b      	ldrh	r3, [r3, #2]
 800b960:	461a      	mov	r2, r3
 800b962:	f640 43e4 	movw	r3, #3300	; 0xce4
 800b966:	fb03 f302 	mul.w	r3, r3, r2
 800b96a:	4a1f      	ldr	r2, [pc, #124]	; (800b9e8 <Get_Oxygen_Value+0xa4>)
 800b96c:	fb82 1203 	smull	r1, r2, r2, r3
 800b970:	441a      	add	r2, r3
 800b972:	12d2      	asrs	r2, r2, #11
 800b974:	17db      	asrs	r3, r3, #31
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	ee07 3a90 	vmov	s15, r3
 800b97c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b980:	4b1a      	ldr	r3, [pc, #104]	; (800b9ec <Get_Oxygen_Value+0xa8>)
 800b982:	edc3 7a00 	vstr	s15, [r3]
			Oxygen_Parameter.OXYGEN_Event_Count ++;
 800b986:	4b1a      	ldr	r3, [pc, #104]	; (800b9f0 <Get_Oxygen_Value+0xac>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3301      	adds	r3, #1
 800b98c:	4a18      	ldr	r2, [pc, #96]	; (800b9f0 <Get_Oxygen_Value+0xac>)
 800b98e:	6013      	str	r3, [r2, #0]
			Oxygen_Parameter.OXYGEN_Cumulative_Val =( Oxygen_Parameter.OXYGEN_Cumulative_Val +((int) O2_Sensor_Voltage) );
 800b990:	4b17      	ldr	r3, [pc, #92]	; (800b9f0 <Get_Oxygen_Value+0xac>)
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	4a15      	ldr	r2, [pc, #84]	; (800b9ec <Get_Oxygen_Value+0xa8>)
 800b996:	edd2 7a00 	vldr	s15, [r2]
 800b99a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b99e:	ee17 2a90 	vmov	r2, s15
 800b9a2:	4413      	add	r3, r2
 800b9a4:	4a12      	ldr	r2, [pc, #72]	; (800b9f0 <Get_Oxygen_Value+0xac>)
 800b9a6:	6053      	str	r3, [r2, #4]
		}
	}
	O2_Flow_Sensor_Voltage = ( ((Adc.AdcData[5]) * 3300) / 4095);
 800b9a8:	4b0e      	ldr	r3, [pc, #56]	; (800b9e4 <Get_Oxygen_Value+0xa0>)
 800b9aa:	895b      	ldrh	r3, [r3, #10]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	f640 43e4 	movw	r3, #3300	; 0xce4
 800b9b2:	fb03 f302 	mul.w	r3, r3, r2
 800b9b6:	4a0c      	ldr	r2, [pc, #48]	; (800b9e8 <Get_Oxygen_Value+0xa4>)
 800b9b8:	fb82 1203 	smull	r1, r2, r2, r3
 800b9bc:	441a      	add	r2, r3
 800b9be:	12d2      	asrs	r2, r2, #11
 800b9c0:	17db      	asrs	r3, r3, #31
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	ee07 3a90 	vmov	s15, r3
 800b9c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9cc:	4b09      	ldr	r3, [pc, #36]	; (800b9f4 <Get_Oxygen_Value+0xb0>)
 800b9ce:	edc3 7a00 	vstr	s15, [r3]
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	20013f7c 	.word	0x20013f7c
 800b9e4:	20013d04 	.word	0x20013d04
 800b9e8:	80080081 	.word	0x80080081
 800b9ec:	20014848 	.word	0x20014848
 800b9f0:	2001409c 	.word	0x2001409c
 800b9f4:	20014100 	.word	0x20014100

0800b9f8 <O2_Initial_Parameter>:

void O2_Initial_Parameter(uint8_t FIO2_Val)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	4603      	mov	r3, r0
 800ba00:	71fb      	strb	r3, [r7, #7]
	        Oxygen_Parameter.OXYGEN_Event_Count     = 1;
 800ba02:	4b15      	ldr	r3, [pc, #84]	; (800ba58 <O2_Initial_Parameter+0x60>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	601a      	str	r2, [r3, #0]
			Oxygen_Parameter.OXYGEN_Cumulative_Val  = 1;
 800ba08:	4b13      	ldr	r3, [pc, #76]	; (800ba58 <O2_Initial_Parameter+0x60>)
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	605a      	str	r2, [r3, #4]

			if(Fio2_Blending_Method   == PRESSURE_CONTROLLED)
 800ba0e:	4b13      	ldr	r3, [pc, #76]	; (800ba5c <O2_Initial_Parameter+0x64>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10c      	bne.n	800ba30 <O2_Initial_Parameter+0x38>
			{
			    Oxygen_Parameter.O2_DAC=Set_Initial_O2_DAC_VAL_Pressure_Modes(FIO2_Val);
 800ba16:	79fb      	ldrb	r3, [r7, #7]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 f97b 	bl	800bd14 <Set_Initial_O2_DAC_VAL_Pressure_Modes>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	461a      	mov	r2, r3
 800ba22:	4b0d      	ldr	r3, [pc, #52]	; (800ba58 <O2_Initial_Parameter+0x60>)
 800ba24:	619a      	str	r2, [r3, #24]
			    Servo_Position_Pressure_Controlled_Mode(FIO2_Val);
 800ba26:	79fb      	ldrb	r3, [r7, #7]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 fb73 	bl	800c114 <Servo_Position_Pressure_Controlled_Mode>
			    Oxygen_Parameter.O2_DAC=Set_Initial_O2_DAC_VAL_Volume_Modes(FIO2_Val);
			    Servo_Position_Volume_Controlled_Mode(FIO2_Val);
			}


}
 800ba2e:	e00f      	b.n	800ba50 <O2_Initial_Parameter+0x58>
			else if(Fio2_Blending_Method   == VOLUME_CONTROLLED)
 800ba30:	4b0a      	ldr	r3, [pc, #40]	; (800ba5c <O2_Initial_Parameter+0x64>)
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d10b      	bne.n	800ba50 <O2_Initial_Parameter+0x58>
			    Oxygen_Parameter.O2_DAC=Set_Initial_O2_DAC_VAL_Volume_Modes(FIO2_Val);
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 fa6a 	bl	800bf14 <Set_Initial_O2_DAC_VAL_Volume_Modes>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	4b04      	ldr	r3, [pc, #16]	; (800ba58 <O2_Initial_Parameter+0x60>)
 800ba46:	619a      	str	r2, [r3, #24]
			    Servo_Position_Volume_Controlled_Mode(FIO2_Val);
 800ba48:	79fb      	ldrb	r3, [r7, #7]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 fbd4 	bl	800c1f8 <Servo_Position_Volume_Controlled_Mode>
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	2001409c 	.word	0x2001409c
 800ba5c:	20013aec 	.word	0x20013aec

0800ba60 <Servo_Info>:



void Servo_Info(uint8_t Servo_Position)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4603      	mov	r3, r0
 800ba68:	71fb      	strb	r3, [r7, #7]
	Oxygen_Parameter.Servo_Duty_Cycle  = ( ((Servo_Position-45) * 0.07)  + 5);
 800ba6a:	79fb      	ldrb	r3, [r7, #7]
 800ba6c:	3b2d      	subs	r3, #45	; 0x2d
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7f4 fd00 	bl	8000474 <__aeabi_i2d>
 800ba74:	a321      	add	r3, pc, #132	; (adr r3, 800bafc <Servo_Info+0x9c>)
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f7f4 fd65 	bl	8000548 <__aeabi_dmul>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4610      	mov	r0, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	f04f 0200 	mov.w	r2, #0
 800ba8a:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <Servo_Info+0x90>)
 800ba8c:	f7f4 fba6 	bl	80001dc <__adddf3>
 800ba90:	4602      	mov	r2, r0
 800ba92:	460b      	mov	r3, r1
 800ba94:	4610      	mov	r0, r2
 800ba96:	4619      	mov	r1, r3
 800ba98:	f7f5 f838 	bl	8000b0c <__aeabi_d2f>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	4a15      	ldr	r2, [pc, #84]	; (800baf4 <Servo_Info+0x94>)
 800baa0:	6113      	str	r3, [r2, #16]
	Oxygen_Parameter.Servo_Millisecond = ( ((Servo_Position-45) * 0.015) + 1);
 800baa2:	79fb      	ldrb	r3, [r7, #7]
 800baa4:	3b2d      	subs	r3, #45	; 0x2d
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7f4 fce4 	bl	8000474 <__aeabi_i2d>
 800baac:	a30e      	add	r3, pc, #56	; (adr r3, 800bae8 <Servo_Info+0x88>)
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f7f4 fd49 	bl	8000548 <__aeabi_dmul>
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	4610      	mov	r0, r2
 800babc:	4619      	mov	r1, r3
 800babe:	f04f 0200 	mov.w	r2, #0
 800bac2:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <Servo_Info+0x98>)
 800bac4:	f7f4 fb8a 	bl	80001dc <__adddf3>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	4610      	mov	r0, r2
 800bace:	4619      	mov	r1, r3
 800bad0:	f7f5 f81c 	bl	8000b0c <__aeabi_d2f>
 800bad4:	4603      	mov	r3, r0
 800bad6:	4a07      	ldr	r2, [pc, #28]	; (800baf4 <Servo_Info+0x94>)
 800bad8:	6153      	str	r3, [r2, #20]
}
 800bada:	bf00      	nop
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	f3af 8000 	nop.w
 800bae8:	eb851eb8 	.word	0xeb851eb8
 800baec:	3f8eb851 	.word	0x3f8eb851
 800baf0:	40140000 	.word	0x40140000
 800baf4:	2001409c 	.word	0x2001409c
 800baf8:	3ff00000 	.word	0x3ff00000
 800bafc:	1eb851ec 	.word	0x1eb851ec
 800bb00:	3fb1eb85 	.word	0x3fb1eb85
 800bb04:	00000000 	.word	0x00000000

0800bb08 <O2_DAC_Control>:




void O2_DAC_Control(uint8_t FIO2_Val)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	71fb      	strb	r3, [r7, #7]
	if(FIO2_Val  > 21)
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	2b15      	cmp	r3, #21
 800bb16:	d943      	bls.n	800bba0 <O2_DAC_Control+0x98>
	{
		if(Alert_Check <= 4)
 800bb18:	4b29      	ldr	r3, [pc, #164]	; (800bbc0 <O2_DAC_Control+0xb8>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b04      	cmp	r3, #4
 800bb1e:	d842      	bhi.n	800bba6 <O2_DAC_Control+0x9e>
		{
			   if (Oxygen_Parameter.Achieved_Oxygen < (FIO2_Val  -2 ))
 800bb20:	4b28      	ldr	r3, [pc, #160]	; (800bbc4 <O2_DAC_Control+0xbc>)
 800bb22:	7b1b      	ldrb	r3, [r3, #12]
 800bb24:	461a      	mov	r2, r3
 800bb26:	79fb      	ldrb	r3, [r7, #7]
 800bb28:	3b02      	subs	r3, #2
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	da04      	bge.n	800bb38 <O2_DAC_Control+0x30>
				{
					Low_Oxygen_Achieved(FIO2_Val);
 800bb2e:	79fb      	ldrb	r3, [r7, #7]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 f84d 	bl	800bbd0 <Low_Oxygen_Achieved>
 800bb36:	e00f      	b.n	800bb58 <O2_DAC_Control+0x50>
				}
				else if (Oxygen_Parameter.Achieved_Oxygen > (FIO2_Val+2))
 800bb38:	4b22      	ldr	r3, [pc, #136]	; (800bbc4 <O2_DAC_Control+0xbc>)
 800bb3a:	7b1b      	ldrb	r3, [r3, #12]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	3302      	adds	r3, #2
 800bb42:	429a      	cmp	r2, r3
 800bb44:	dd04      	ble.n	800bb50 <O2_DAC_Control+0x48>
				{
					High_Oxygen_Achieved(FIO2_Val);
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 f893 	bl	800bc74 <High_Oxygen_Achieved>
 800bb4e:	e003      	b.n	800bb58 <O2_DAC_Control+0x50>
				}
				else
					Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800bb50:	4b1c      	ldr	r3, [pc, #112]	; (800bbc4 <O2_DAC_Control+0xbc>)
 800bb52:	699a      	ldr	r2, [r3, #24]
 800bb54:	4b1c      	ldr	r3, [pc, #112]	; (800bbc8 <O2_DAC_Control+0xc0>)
 800bb56:	615a      	str	r2, [r3, #20]
				Oxygen_Parameter.Parker_Signal_Voltage = ( (Oxygen_Parameter.O2_DAC * 3.3) /4095);
 800bb58:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <O2_DAC_Control+0xbc>)
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7f4 fc89 	bl	8000474 <__aeabi_i2d>
 800bb62:	a313      	add	r3, pc, #76	; (adr r3, 800bbb0 <O2_DAC_Control+0xa8>)
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	f7f4 fcee 	bl	8000548 <__aeabi_dmul>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4610      	mov	r0, r2
 800bb72:	4619      	mov	r1, r3
 800bb74:	a310      	add	r3, pc, #64	; (adr r3, 800bbb8 <O2_DAC_Control+0xb0>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 fe0f 	bl	800079c <__aeabi_ddiv>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	460b      	mov	r3, r1
 800bb82:	4610      	mov	r0, r2
 800bb84:	4619      	mov	r1, r3
 800bb86:	f7f4 ffc1 	bl	8000b0c <__aeabi_d2f>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	4a0d      	ldr	r2, [pc, #52]	; (800bbc4 <O2_DAC_Control+0xbc>)
 800bb8e:	61d3      	str	r3, [r2, #28]
				Oxygen_Blending_Status = OXYGEN_NOT_ACHIEVED;
 800bb90:	4b0e      	ldr	r3, [pc, #56]	; (800bbcc <O2_DAC_Control+0xc4>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	701a      	strb	r2, [r3, #0]
				Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800bb96:	4b0b      	ldr	r3, [pc, #44]	; (800bbc4 <O2_DAC_Control+0xbc>)
 800bb98:	699a      	ldr	r2, [r3, #24]
 800bb9a:	4b0b      	ldr	r3, [pc, #44]	; (800bbc8 <O2_DAC_Control+0xc0>)
 800bb9c:	615a      	str	r2, [r3, #20]
	}
	else
	{
		Parkar_valve_Signal(0);
	}
}
 800bb9e:	e002      	b.n	800bba6 <O2_DAC_Control+0x9e>
		Parkar_valve_Signal(0);
 800bba0:	4b09      	ldr	r3, [pc, #36]	; (800bbc8 <O2_DAC_Control+0xc0>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	615a      	str	r2, [r3, #20]
}
 800bba6:	bf00      	nop
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	66666666 	.word	0x66666666
 800bbb4:	400a6666 	.word	0x400a6666
 800bbb8:	00000000 	.word	0x00000000
 800bbbc:	40affe00 	.word	0x40affe00
 800bbc0:	20014174 	.word	0x20014174
 800bbc4:	2001409c 	.word	0x2001409c
 800bbc8:	40007400 	.word	0x40007400
 800bbcc:	20014241 	.word	0x20014241

0800bbd0 <Low_Oxygen_Achieved>:

void Low_Oxygen_Achieved(uint8_t FIO2_Val)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	71fb      	strb	r3, [r7, #7]
	uint8_t Low_Achieved_Oxygen_In_Percentage;
	Low_Achieved_Oxygen_In_Percentage= (uint8_t) ( ( (float)Oxygen_Parameter.Achieved_Oxygen  /(float)FIO2_Val) * 100);
 800bbda:	4b23      	ldr	r3, [pc, #140]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bbdc:	7b1b      	ldrb	r3, [r3, #12]
 800bbde:	ee07 3a90 	vmov	s15, r3
 800bbe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbe6:	79fb      	ldrb	r3, [r7, #7]
 800bbe8:	ee07 3a90 	vmov	s15, r3
 800bbec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bbf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbf4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bc6c <Low_Oxygen_Achieved+0x9c>
 800bbf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc00:	edc7 7a00 	vstr	s15, [r7]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	73fb      	strb	r3, [r7, #15]
	if( (Low_Achieved_Oxygen_In_Percentage <= 70) )
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	2b46      	cmp	r3, #70	; 0x46
 800bc0c:	d804      	bhi.n	800bc18 <Low_Oxygen_Achieved+0x48>
	{
		Oxygen_Parameter.O2_DAC = Oxygen_Parameter.O2_DAC + 60;
 800bc0e:	4b16      	ldr	r3, [pc, #88]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	333c      	adds	r3, #60	; 0x3c
 800bc14:	4a14      	ldr	r2, [pc, #80]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bc16:	6193      	str	r3, [r2, #24]
	}
	if( (Low_Achieved_Oxygen_In_Percentage <= 80) && (Low_Achieved_Oxygen_In_Percentage >70) )
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	2b50      	cmp	r3, #80	; 0x50
 800bc1c:	d808      	bhi.n	800bc30 <Low_Oxygen_Achieved+0x60>
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
 800bc20:	2b46      	cmp	r3, #70	; 0x46
 800bc22:	d905      	bls.n	800bc30 <Low_Oxygen_Achieved+0x60>
	{
		Oxygen_Parameter.O2_DAC = Oxygen_Parameter.O2_DAC + 40;
 800bc24:	4b10      	ldr	r3, [pc, #64]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	3328      	adds	r3, #40	; 0x28
 800bc2a:	4a0f      	ldr	r2, [pc, #60]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bc2c:	6193      	str	r3, [r2, #24]
 800bc2e:	e007      	b.n	800bc40 <Low_Oxygen_Achieved+0x70>
	}
	else if(Low_Achieved_Oxygen_In_Percentage>80)
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	2b50      	cmp	r3, #80	; 0x50
 800bc34:	d904      	bls.n	800bc40 <Low_Oxygen_Achieved+0x70>
	{
		Oxygen_Parameter.O2_DAC = Oxygen_Parameter.O2_DAC + 20;
 800bc36:	4b0c      	ldr	r3, [pc, #48]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	3314      	adds	r3, #20
 800bc3c:	4a0a      	ldr	r2, [pc, #40]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bc3e:	6193      	str	r3, [r2, #24]
	}


	if(Oxygen_Parameter.O2_DAC>=2000)
 800bc40:	4b09      	ldr	r3, [pc, #36]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bc48:	db03      	blt.n	800bc52 <Low_Oxygen_Achieved+0x82>
	{
		Oxygen_Parameter.O2_DAC=2000;
 800bc4a:	4b07      	ldr	r3, [pc, #28]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bc4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bc50:	619a      	str	r2, [r3, #24]
	}
	Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800bc52:	4b05      	ldr	r3, [pc, #20]	; (800bc68 <Low_Oxygen_Achieved+0x98>)
 800bc54:	699a      	ldr	r2, [r3, #24]
 800bc56:	4b06      	ldr	r3, [pc, #24]	; (800bc70 <Low_Oxygen_Achieved+0xa0>)
 800bc58:	615a      	str	r2, [r3, #20]
}
 800bc5a:	bf00      	nop
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	2001409c 	.word	0x2001409c
 800bc6c:	42c80000 	.word	0x42c80000
 800bc70:	40007400 	.word	0x40007400

0800bc74 <High_Oxygen_Achieved>:


void High_Oxygen_Achieved(uint8_t FIO2_Val)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	71fb      	strb	r3, [r7, #7]
	uint8_t High_Achieved_Oxygen_In_Percentage;
	High_Achieved_Oxygen_In_Percentage = (uint8_t) (( (float) Oxygen_Parameter.Achieved_Oxygen  /(float)FIO2_Val) * 100);
 800bc7e:	4b22      	ldr	r3, [pc, #136]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bc80:	7b1b      	ldrb	r3, [r3, #12]
 800bc82:	ee07 3a90 	vmov	s15, r3
 800bc86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc8a:	79fb      	ldrb	r3, [r7, #7]
 800bc8c:	ee07 3a90 	vmov	s15, r3
 800bc90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc98:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800bd0c <High_Oxygen_Achieved+0x98>
 800bc9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca4:	edc7 7a00 	vstr	s15, [r7]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	73fb      	strb	r3, [r7, #15]

	if(High_Achieved_Oxygen_In_Percentage >= 130)
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	2b81      	cmp	r3, #129	; 0x81
 800bcb0:	d904      	bls.n	800bcbc <High_Oxygen_Achieved+0x48>
	{
		Oxygen_Parameter.O2_DAC = Oxygen_Parameter.O2_DAC - 60;
 800bcb2:	4b15      	ldr	r3, [pc, #84]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bcb4:	699b      	ldr	r3, [r3, #24]
 800bcb6:	3b3c      	subs	r3, #60	; 0x3c
 800bcb8:	4a13      	ldr	r2, [pc, #76]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bcba:	6193      	str	r3, [r2, #24]
	}
	if( (High_Achieved_Oxygen_In_Percentage >= 120) && (High_Achieved_Oxygen_In_Percentage < 130) )
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
 800bcbe:	2b77      	cmp	r3, #119	; 0x77
 800bcc0:	d908      	bls.n	800bcd4 <High_Oxygen_Achieved+0x60>
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	2b81      	cmp	r3, #129	; 0x81
 800bcc6:	d805      	bhi.n	800bcd4 <High_Oxygen_Achieved+0x60>
	{
		Oxygen_Parameter.O2_DAC = Oxygen_Parameter.O2_DAC - 40;
 800bcc8:	4b0f      	ldr	r3, [pc, #60]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bcca:	699b      	ldr	r3, [r3, #24]
 800bccc:	3b28      	subs	r3, #40	; 0x28
 800bcce:	4a0e      	ldr	r2, [pc, #56]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bcd0:	6193      	str	r3, [r2, #24]
 800bcd2:	e007      	b.n	800bce4 <High_Oxygen_Achieved+0x70>
	}
	else if(High_Achieved_Oxygen_In_Percentage < 120)
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	2b77      	cmp	r3, #119	; 0x77
 800bcd8:	d804      	bhi.n	800bce4 <High_Oxygen_Achieved+0x70>
	{
		Oxygen_Parameter.O2_DAC = Oxygen_Parameter.O2_DAC - 20;
 800bcda:	4b0b      	ldr	r3, [pc, #44]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bcdc:	699b      	ldr	r3, [r3, #24]
 800bcde:	3b14      	subs	r3, #20
 800bce0:	4a09      	ldr	r2, [pc, #36]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bce2:	6193      	str	r3, [r2, #24]
	}


	if(Oxygen_Parameter.O2_DAC<=200)
 800bce4:	4b08      	ldr	r3, [pc, #32]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	2bc8      	cmp	r3, #200	; 0xc8
 800bcea:	dc02      	bgt.n	800bcf2 <High_Oxygen_Achieved+0x7e>
	{
		Oxygen_Parameter.O2_DAC=200;
 800bcec:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bcee:	22c8      	movs	r2, #200	; 0xc8
 800bcf0:	619a      	str	r2, [r3, #24]
	}
	Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800bcf2:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <High_Oxygen_Achieved+0x94>)
 800bcf4:	699a      	ldr	r2, [r3, #24]
 800bcf6:	4b06      	ldr	r3, [pc, #24]	; (800bd10 <High_Oxygen_Achieved+0x9c>)
 800bcf8:	615a      	str	r2, [r3, #20]
}
 800bcfa:	bf00      	nop
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	2001409c 	.word	0x2001409c
 800bd0c:	42c80000 	.word	0x42c80000
 800bd10:	40007400 	.word	0x40007400

0800bd14 <Set_Initial_O2_DAC_VAL_Pressure_Modes>:




uint16_t Set_Initial_O2_DAC_VAL_Pressure_Modes(uint8_t FIO2_Val)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
		switch(FIO2_Val)
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	3b19      	subs	r3, #25
 800bd22:	2b4b      	cmp	r3, #75	; 0x4b
 800bd24:	f200 80eb 	bhi.w	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
 800bd28:	a201      	add	r2, pc, #4	; (adr r2, 800bd30 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1c>)
 800bd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2e:	bf00      	nop
 800bd30:	0800be61 	.word	0x0800be61
 800bd34:	0800beff 	.word	0x0800beff
 800bd38:	0800beff 	.word	0x0800beff
 800bd3c:	0800beff 	.word	0x0800beff
 800bd40:	0800beff 	.word	0x0800beff
 800bd44:	0800be69 	.word	0x0800be69
 800bd48:	0800beff 	.word	0x0800beff
 800bd4c:	0800beff 	.word	0x0800beff
 800bd50:	0800beff 	.word	0x0800beff
 800bd54:	0800beff 	.word	0x0800beff
 800bd58:	0800be73 	.word	0x0800be73
 800bd5c:	0800beff 	.word	0x0800beff
 800bd60:	0800beff 	.word	0x0800beff
 800bd64:	0800beff 	.word	0x0800beff
 800bd68:	0800beff 	.word	0x0800beff
 800bd6c:	0800be7d 	.word	0x0800be7d
 800bd70:	0800beff 	.word	0x0800beff
 800bd74:	0800beff 	.word	0x0800beff
 800bd78:	0800beff 	.word	0x0800beff
 800bd7c:	0800beff 	.word	0x0800beff
 800bd80:	0800be87 	.word	0x0800be87
 800bd84:	0800beff 	.word	0x0800beff
 800bd88:	0800beff 	.word	0x0800beff
 800bd8c:	0800beff 	.word	0x0800beff
 800bd90:	0800beff 	.word	0x0800beff
 800bd94:	0800be91 	.word	0x0800be91
 800bd98:	0800beff 	.word	0x0800beff
 800bd9c:	0800beff 	.word	0x0800beff
 800bda0:	0800beff 	.word	0x0800beff
 800bda4:	0800beff 	.word	0x0800beff
 800bda8:	0800be9b 	.word	0x0800be9b
 800bdac:	0800beff 	.word	0x0800beff
 800bdb0:	0800beff 	.word	0x0800beff
 800bdb4:	0800beff 	.word	0x0800beff
 800bdb8:	0800beff 	.word	0x0800beff
 800bdbc:	0800bea5 	.word	0x0800bea5
 800bdc0:	0800beff 	.word	0x0800beff
 800bdc4:	0800beff 	.word	0x0800beff
 800bdc8:	0800beff 	.word	0x0800beff
 800bdcc:	0800beff 	.word	0x0800beff
 800bdd0:	0800beaf 	.word	0x0800beaf
 800bdd4:	0800beff 	.word	0x0800beff
 800bdd8:	0800beff 	.word	0x0800beff
 800bddc:	0800beff 	.word	0x0800beff
 800bde0:	0800beff 	.word	0x0800beff
 800bde4:	0800beb9 	.word	0x0800beb9
 800bde8:	0800beff 	.word	0x0800beff
 800bdec:	0800beff 	.word	0x0800beff
 800bdf0:	0800beff 	.word	0x0800beff
 800bdf4:	0800beff 	.word	0x0800beff
 800bdf8:	0800bec3 	.word	0x0800bec3
 800bdfc:	0800beff 	.word	0x0800beff
 800be00:	0800beff 	.word	0x0800beff
 800be04:	0800beff 	.word	0x0800beff
 800be08:	0800beff 	.word	0x0800beff
 800be0c:	0800becd 	.word	0x0800becd
 800be10:	0800beff 	.word	0x0800beff
 800be14:	0800beff 	.word	0x0800beff
 800be18:	0800beff 	.word	0x0800beff
 800be1c:	0800beff 	.word	0x0800beff
 800be20:	0800bed7 	.word	0x0800bed7
 800be24:	0800beff 	.word	0x0800beff
 800be28:	0800beff 	.word	0x0800beff
 800be2c:	0800beff 	.word	0x0800beff
 800be30:	0800beff 	.word	0x0800beff
 800be34:	0800bee1 	.word	0x0800bee1
 800be38:	0800beff 	.word	0x0800beff
 800be3c:	0800beff 	.word	0x0800beff
 800be40:	0800beff 	.word	0x0800beff
 800be44:	0800beff 	.word	0x0800beff
 800be48:	0800beeb 	.word	0x0800beeb
 800be4c:	0800beff 	.word	0x0800beff
 800be50:	0800beff 	.word	0x0800beff
 800be54:	0800beff 	.word	0x0800beff
 800be58:	0800beff 	.word	0x0800beff
 800be5c:	0800bef5 	.word	0x0800bef5
		{
			case 25:
				 O2_DAC_VALUE  = 250;
 800be60:	4b2b      	ldr	r3, [pc, #172]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800be62:	22fa      	movs	r2, #250	; 0xfa
 800be64:	801a      	strh	r2, [r3, #0]
			break;
 800be66:	e04a      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 30:
				 O2_DAC_VALUE  = 280;
 800be68:	4b29      	ldr	r3, [pc, #164]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800be6a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800be6e:	801a      	strh	r2, [r3, #0]
			break;
 800be70:	e045      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 35:
				 O2_DAC_VALUE  = 330;
 800be72:	4b27      	ldr	r3, [pc, #156]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800be74:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800be78:	801a      	strh	r2, [r3, #0]
			break;
 800be7a:	e040      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 40:
				 O2_DAC_VALUE  = 380;
 800be7c:	4b24      	ldr	r3, [pc, #144]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800be7e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800be82:	801a      	strh	r2, [r3, #0]
			break;
 800be84:	e03b      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 45:
				 O2_DAC_VALUE  = 410;
 800be86:	4b22      	ldr	r3, [pc, #136]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800be88:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800be8c:	801a      	strh	r2, [r3, #0]
			break;
 800be8e:	e036      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 50:
				 O2_DAC_VALUE  = 450;
 800be90:	4b1f      	ldr	r3, [pc, #124]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800be92:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800be96:	801a      	strh	r2, [r3, #0]
			break;
 800be98:	e031      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 55:
				 O2_DAC_VALUE  = 500;
 800be9a:	4b1d      	ldr	r3, [pc, #116]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800be9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bea0:	801a      	strh	r2, [r3, #0]
			break;
 800bea2:	e02c      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 60:
				 O2_DAC_VALUE  = 550;
 800bea4:	4b1a      	ldr	r3, [pc, #104]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800bea6:	f240 2226 	movw	r2, #550	; 0x226
 800beaa:	801a      	strh	r2, [r3, #0]
			break;
 800beac:	e027      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 65:
				 O2_DAC_VALUE  = 600;
 800beae:	4b18      	ldr	r3, [pc, #96]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800beb0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800beb4:	801a      	strh	r2, [r3, #0]
			break;
 800beb6:	e022      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 70:
				 O2_DAC_VALUE  = 650;
 800beb8:	4b15      	ldr	r3, [pc, #84]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800beba:	f240 228a 	movw	r2, #650	; 0x28a
 800bebe:	801a      	strh	r2, [r3, #0]
			break;
 800bec0:	e01d      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 75:
				 O2_DAC_VALUE  = 700;
 800bec2:	4b13      	ldr	r3, [pc, #76]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800bec4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800bec8:	801a      	strh	r2, [r3, #0]
			break;
 800beca:	e018      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 80:
				 O2_DAC_VALUE  = 750;
 800becc:	4b10      	ldr	r3, [pc, #64]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800bece:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bed2:	801a      	strh	r2, [r3, #0]
			break;
 800bed4:	e013      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 85:
				 O2_DAC_VALUE  = 800;
 800bed6:	4b0e      	ldr	r3, [pc, #56]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800bed8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800bedc:	801a      	strh	r2, [r3, #0]
			break;
 800bede:	e00e      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 90:
				 O2_DAC_VALUE  = 850;
 800bee0:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800bee2:	f240 3252 	movw	r2, #850	; 0x352
 800bee6:	801a      	strh	r2, [r3, #0]
			break;
 800bee8:	e009      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 95:
				 O2_DAC_VALUE  = 900;
 800beea:	4b09      	ldr	r3, [pc, #36]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800beec:	f44f 7261 	mov.w	r2, #900	; 0x384
 800bef0:	801a      	strh	r2, [r3, #0]
			break;
 800bef2:	e004      	b.n	800befe <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1ea>
			case 100:
				 O2_DAC_VALUE  = 1800;
 800bef4:	4b06      	ldr	r3, [pc, #24]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800bef6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800befa:	801a      	strh	r2, [r3, #0]
			break;
 800befc:	bf00      	nop
		}
		return O2_DAC_VALUE;
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <Set_Initial_O2_DAC_VAL_Pressure_Modes+0x1fc>)
 800bf00:	881b      	ldrh	r3, [r3, #0]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	200001ee 	.word	0x200001ee

0800bf14 <Set_Initial_O2_DAC_VAL_Volume_Modes>:




uint16_t Set_Initial_O2_DAC_VAL_Volume_Modes(uint8_t FIO2_Val)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	71fb      	strb	r3, [r7, #7]
	switch(FIO2_Val)
 800bf1e:	79fb      	ldrb	r3, [r7, #7]
 800bf20:	3b19      	subs	r3, #25
 800bf22:	2b4b      	cmp	r3, #75	; 0x4b
 800bf24:	f200 80ec 	bhi.w	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
 800bf28:	a201      	add	r2, pc, #4	; (adr r2, 800bf30 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1c>)
 800bf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2e:	bf00      	nop
 800bf30:	0800c061 	.word	0x0800c061
 800bf34:	0800c101 	.word	0x0800c101
 800bf38:	0800c101 	.word	0x0800c101
 800bf3c:	0800c101 	.word	0x0800c101
 800bf40:	0800c101 	.word	0x0800c101
 800bf44:	0800c06b 	.word	0x0800c06b
 800bf48:	0800c101 	.word	0x0800c101
 800bf4c:	0800c101 	.word	0x0800c101
 800bf50:	0800c101 	.word	0x0800c101
 800bf54:	0800c101 	.word	0x0800c101
 800bf58:	0800c075 	.word	0x0800c075
 800bf5c:	0800c101 	.word	0x0800c101
 800bf60:	0800c101 	.word	0x0800c101
 800bf64:	0800c101 	.word	0x0800c101
 800bf68:	0800c101 	.word	0x0800c101
 800bf6c:	0800c07f 	.word	0x0800c07f
 800bf70:	0800c101 	.word	0x0800c101
 800bf74:	0800c101 	.word	0x0800c101
 800bf78:	0800c101 	.word	0x0800c101
 800bf7c:	0800c101 	.word	0x0800c101
 800bf80:	0800c089 	.word	0x0800c089
 800bf84:	0800c101 	.word	0x0800c101
 800bf88:	0800c101 	.word	0x0800c101
 800bf8c:	0800c101 	.word	0x0800c101
 800bf90:	0800c101 	.word	0x0800c101
 800bf94:	0800c093 	.word	0x0800c093
 800bf98:	0800c101 	.word	0x0800c101
 800bf9c:	0800c101 	.word	0x0800c101
 800bfa0:	0800c101 	.word	0x0800c101
 800bfa4:	0800c101 	.word	0x0800c101
 800bfa8:	0800c09d 	.word	0x0800c09d
 800bfac:	0800c101 	.word	0x0800c101
 800bfb0:	0800c101 	.word	0x0800c101
 800bfb4:	0800c101 	.word	0x0800c101
 800bfb8:	0800c101 	.word	0x0800c101
 800bfbc:	0800c0a7 	.word	0x0800c0a7
 800bfc0:	0800c101 	.word	0x0800c101
 800bfc4:	0800c101 	.word	0x0800c101
 800bfc8:	0800c101 	.word	0x0800c101
 800bfcc:	0800c101 	.word	0x0800c101
 800bfd0:	0800c0b1 	.word	0x0800c0b1
 800bfd4:	0800c101 	.word	0x0800c101
 800bfd8:	0800c101 	.word	0x0800c101
 800bfdc:	0800c101 	.word	0x0800c101
 800bfe0:	0800c101 	.word	0x0800c101
 800bfe4:	0800c0bb 	.word	0x0800c0bb
 800bfe8:	0800c101 	.word	0x0800c101
 800bfec:	0800c101 	.word	0x0800c101
 800bff0:	0800c101 	.word	0x0800c101
 800bff4:	0800c101 	.word	0x0800c101
 800bff8:	0800c0c5 	.word	0x0800c0c5
 800bffc:	0800c101 	.word	0x0800c101
 800c000:	0800c101 	.word	0x0800c101
 800c004:	0800c101 	.word	0x0800c101
 800c008:	0800c101 	.word	0x0800c101
 800c00c:	0800c0cf 	.word	0x0800c0cf
 800c010:	0800c101 	.word	0x0800c101
 800c014:	0800c101 	.word	0x0800c101
 800c018:	0800c101 	.word	0x0800c101
 800c01c:	0800c101 	.word	0x0800c101
 800c020:	0800c0d9 	.word	0x0800c0d9
 800c024:	0800c101 	.word	0x0800c101
 800c028:	0800c101 	.word	0x0800c101
 800c02c:	0800c101 	.word	0x0800c101
 800c030:	0800c101 	.word	0x0800c101
 800c034:	0800c0e3 	.word	0x0800c0e3
 800c038:	0800c101 	.word	0x0800c101
 800c03c:	0800c101 	.word	0x0800c101
 800c040:	0800c101 	.word	0x0800c101
 800c044:	0800c101 	.word	0x0800c101
 800c048:	0800c0ed 	.word	0x0800c0ed
 800c04c:	0800c101 	.word	0x0800c101
 800c050:	0800c101 	.word	0x0800c101
 800c054:	0800c101 	.word	0x0800c101
 800c058:	0800c101 	.word	0x0800c101
 800c05c:	0800c0f7 	.word	0x0800c0f7
	{
		case 25:
			 O2_DAC_VALUE  = 280;
 800c060:	4b2b      	ldr	r3, [pc, #172]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c062:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c066:	801a      	strh	r2, [r3, #0]
		break;
 800c068:	e04a      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 30:
			 O2_DAC_VALUE  = 300;
 800c06a:	4b29      	ldr	r3, [pc, #164]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c06c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c070:	801a      	strh	r2, [r3, #0]
		break;
 800c072:	e045      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 35:
			 O2_DAC_VALUE  = 400;
 800c074:	4b26      	ldr	r3, [pc, #152]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c076:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c07a:	801a      	strh	r2, [r3, #0]
		break;
 800c07c:	e040      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 40:
			 O2_DAC_VALUE  = 430;
 800c07e:	4b24      	ldr	r3, [pc, #144]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c080:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800c084:	801a      	strh	r2, [r3, #0]
		break;
 800c086:	e03b      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 45:
			 O2_DAC_VALUE  = 450;
 800c088:	4b21      	ldr	r3, [pc, #132]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c08a:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800c08e:	801a      	strh	r2, [r3, #0]
		break;
 800c090:	e036      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 50:
			 O2_DAC_VALUE  = 480;
 800c092:	4b1f      	ldr	r3, [pc, #124]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c094:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c098:	801a      	strh	r2, [r3, #0]
		break;
 800c09a:	e031      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 55:
			 O2_DAC_VALUE  = 510;
 800c09c:	4b1c      	ldr	r3, [pc, #112]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c09e:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800c0a2:	801a      	strh	r2, [r3, #0]
		break;
 800c0a4:	e02c      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 60:
			 O2_DAC_VALUE  = 540;
 800c0a6:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c0a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c0ac:	801a      	strh	r2, [r3, #0]
		break;
 800c0ae:	e027      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 65:
			 O2_DAC_VALUE  = 560;
 800c0b0:	4b17      	ldr	r3, [pc, #92]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c0b2:	f44f 720c 	mov.w	r2, #560	; 0x230
 800c0b6:	801a      	strh	r2, [r3, #0]
		break;
 800c0b8:	e022      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 70:
			 O2_DAC_VALUE  = 590;
 800c0ba:	4b15      	ldr	r3, [pc, #84]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c0bc:	f240 224e 	movw	r2, #590	; 0x24e
 800c0c0:	801a      	strh	r2, [r3, #0]
		break;
 800c0c2:	e01d      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 75:
			 O2_DAC_VALUE  = 620;
 800c0c4:	4b12      	ldr	r3, [pc, #72]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c0c6:	f44f 721b 	mov.w	r2, #620	; 0x26c
 800c0ca:	801a      	strh	r2, [r3, #0]
		break;
 800c0cc:	e018      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 80:
			 O2_DAC_VALUE  = 650;
 800c0ce:	4b10      	ldr	r3, [pc, #64]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c0d0:	f240 228a 	movw	r2, #650	; 0x28a
 800c0d4:	801a      	strh	r2, [r3, #0]
		break;
 800c0d6:	e013      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 85:
			 O2_DAC_VALUE  = 680;
 800c0d8:	4b0d      	ldr	r3, [pc, #52]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c0da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800c0de:	801a      	strh	r2, [r3, #0]
		break;
 800c0e0:	e00e      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 90:
			 O2_DAC_VALUE  = 800;
 800c0e2:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c0e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c0e8:	801a      	strh	r2, [r3, #0]
		break;
 800c0ea:	e009      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 95:
			 O2_DAC_VALUE  = 850;
 800c0ec:	4b08      	ldr	r3, [pc, #32]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c0ee:	f240 3252 	movw	r2, #850	; 0x352
 800c0f2:	801a      	strh	r2, [r3, #0]
		break;
 800c0f4:	e004      	b.n	800c100 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1ec>
		case 100:
			 O2_DAC_VALUE  = 1800;
 800c0f6:	4b06      	ldr	r3, [pc, #24]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c0f8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800c0fc:	801a      	strh	r2, [r3, #0]
		break;
 800c0fe:	bf00      	nop
	}

		return O2_DAC_VALUE;
 800c100:	4b03      	ldr	r3, [pc, #12]	; (800c110 <Set_Initial_O2_DAC_VAL_Volume_Modes+0x1fc>)
 800c102:	881b      	ldrh	r3, [r3, #0]
}
 800c104:	4618      	mov	r0, r3
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	200001ee 	.word	0x200001ee

0800c114 <Servo_Position_Pressure_Controlled_Mode>:



void Servo_Position_Pressure_Controlled_Mode(uint8_t FIO2_Val)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	4603      	mov	r3, r0
 800c11c:	71fb      	strb	r3, [r7, #7]
	if(FIO2_Val==100)
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	2b64      	cmp	r3, #100	; 0x64
 800c122:	d111      	bne.n	800c148 <Servo_Position_Pressure_Controlled_Mode+0x34>
	{
		Oxygen_Parameter.Servo_Position=110;
 800c124:	4b30      	ldr	r3, [pc, #192]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c126:	226e      	movs	r2, #110	; 0x6e
 800c128:	73da      	strb	r2, [r3, #15]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 800c12a:	4b2f      	ldr	r3, [pc, #188]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c12c:	7bda      	ldrb	r2, [r3, #15]
 800c12e:	4b2f      	ldr	r3, [pc, #188]	; (800c1ec <Servo_Position_Pressure_Controlled_Mode+0xd8>)
 800c130:	635a      	str	r2, [r3, #52]	; 0x34
		Servo_Info(Oxygen_Parameter.Servo_Position);
 800c132:	4b2d      	ldr	r3, [pc, #180]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c134:	7bdb      	ldrb	r3, [r3, #15]
 800c136:	4618      	mov	r0, r3
 800c138:	f7ff fc92 	bl	800ba60 <Servo_Info>
		vTaskResume(Oxygen_Blending_Handler);
 800c13c:	4b2c      	ldr	r3, [pc, #176]	; (800c1f0 <Servo_Position_Pressure_Controlled_Mode+0xdc>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4618      	mov	r0, r3
 800c142:	f013 f96b 	bl	801f41c <vTaskResume>
		Servo_Angle(Oxygen_Parameter.Servo_Position);
		Servo_Info(Oxygen_Parameter.Servo_Position);
		Parkar_valve_Signal(0);
		vTaskSuspend(Oxygen_Blending_Handler);
	}
}
 800c146:	e04a      	b.n	800c1de <Servo_Position_Pressure_Controlled_Mode+0xca>
	else if( (FIO2_Val>=70) && (FIO2_Val<95) )
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	2b45      	cmp	r3, #69	; 0x45
 800c14c:	d914      	bls.n	800c178 <Servo_Position_Pressure_Controlled_Mode+0x64>
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	2b5e      	cmp	r3, #94	; 0x5e
 800c152:	d811      	bhi.n	800c178 <Servo_Position_Pressure_Controlled_Mode+0x64>
		Oxygen_Parameter.Servo_Position=75;
 800c154:	4b24      	ldr	r3, [pc, #144]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c156:	224b      	movs	r2, #75	; 0x4b
 800c158:	73da      	strb	r2, [r3, #15]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 800c15a:	4b23      	ldr	r3, [pc, #140]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c15c:	7bda      	ldrb	r2, [r3, #15]
 800c15e:	4b23      	ldr	r3, [pc, #140]	; (800c1ec <Servo_Position_Pressure_Controlled_Mode+0xd8>)
 800c160:	635a      	str	r2, [r3, #52]	; 0x34
		Servo_Info(Oxygen_Parameter.Servo_Position);
 800c162:	4b21      	ldr	r3, [pc, #132]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c164:	7bdb      	ldrb	r3, [r3, #15]
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff fc7a 	bl	800ba60 <Servo_Info>
		vTaskResume(Oxygen_Blending_Handler);
 800c16c:	4b20      	ldr	r3, [pc, #128]	; (800c1f0 <Servo_Position_Pressure_Controlled_Mode+0xdc>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4618      	mov	r0, r3
 800c172:	f013 f953 	bl	801f41c <vTaskResume>
 800c176:	e032      	b.n	800c1de <Servo_Position_Pressure_Controlled_Mode+0xca>
	else if((FIO2_Val>21) && (FIO2_Val<70) )
 800c178:	79fb      	ldrb	r3, [r7, #7]
 800c17a:	2b15      	cmp	r3, #21
 800c17c:	d914      	bls.n	800c1a8 <Servo_Position_Pressure_Controlled_Mode+0x94>
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	2b45      	cmp	r3, #69	; 0x45
 800c182:	d811      	bhi.n	800c1a8 <Servo_Position_Pressure_Controlled_Mode+0x94>
		Oxygen_Parameter.Servo_Position=45;
 800c184:	4b18      	ldr	r3, [pc, #96]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c186:	222d      	movs	r2, #45	; 0x2d
 800c188:	73da      	strb	r2, [r3, #15]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 800c18a:	4b17      	ldr	r3, [pc, #92]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c18c:	7bda      	ldrb	r2, [r3, #15]
 800c18e:	4b17      	ldr	r3, [pc, #92]	; (800c1ec <Servo_Position_Pressure_Controlled_Mode+0xd8>)
 800c190:	635a      	str	r2, [r3, #52]	; 0x34
		Servo_Info(Oxygen_Parameter.Servo_Position);
 800c192:	4b15      	ldr	r3, [pc, #84]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c194:	7bdb      	ldrb	r3, [r3, #15]
 800c196:	4618      	mov	r0, r3
 800c198:	f7ff fc62 	bl	800ba60 <Servo_Info>
		vTaskResume(Oxygen_Blending_Handler);
 800c19c:	4b14      	ldr	r3, [pc, #80]	; (800c1f0 <Servo_Position_Pressure_Controlled_Mode+0xdc>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f013 f93b 	bl	801f41c <vTaskResume>
 800c1a6:	e01a      	b.n	800c1de <Servo_Position_Pressure_Controlled_Mode+0xca>
	else if(FIO2_Val<=21)
 800c1a8:	79fb      	ldrb	r3, [r7, #7]
 800c1aa:	2b15      	cmp	r3, #21
 800c1ac:	d817      	bhi.n	800c1de <Servo_Position_Pressure_Controlled_Mode+0xca>
		Oxygen_Parameter.Servo_Position=45;
 800c1ae:	4b0e      	ldr	r3, [pc, #56]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c1b0:	222d      	movs	r2, #45	; 0x2d
 800c1b2:	73da      	strb	r2, [r3, #15]
		Oxygen_Parameter.Achieved_Oxygen=21;
 800c1b4:	4b0c      	ldr	r3, [pc, #48]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c1b6:	2215      	movs	r2, #21
 800c1b8:	731a      	strb	r2, [r3, #12]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 800c1ba:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c1bc:	7bda      	ldrb	r2, [r3, #15]
 800c1be:	4b0b      	ldr	r3, [pc, #44]	; (800c1ec <Servo_Position_Pressure_Controlled_Mode+0xd8>)
 800c1c0:	635a      	str	r2, [r3, #52]	; 0x34
		Servo_Info(Oxygen_Parameter.Servo_Position);
 800c1c2:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <Servo_Position_Pressure_Controlled_Mode+0xd4>)
 800c1c4:	7bdb      	ldrb	r3, [r3, #15]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff fc4a 	bl	800ba60 <Servo_Info>
		Parkar_valve_Signal(0);
 800c1cc:	4b09      	ldr	r3, [pc, #36]	; (800c1f4 <Servo_Position_Pressure_Controlled_Mode+0xe0>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	615a      	str	r2, [r3, #20]
		vTaskSuspend(Oxygen_Blending_Handler);
 800c1d2:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <Servo_Position_Pressure_Controlled_Mode+0xdc>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f013 f85c 	bl	801f294 <vTaskSuspend>
}
 800c1dc:	e7ff      	b.n	800c1de <Servo_Position_Pressure_Controlled_Mode+0xca>
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	2001409c 	.word	0x2001409c
 800c1ec:	40001800 	.word	0x40001800
 800c1f0:	20013f24 	.word	0x20013f24
 800c1f4:	40007400 	.word	0x40007400

0800c1f8 <Servo_Position_Volume_Controlled_Mode>:


void Servo_Position_Volume_Controlled_Mode(uint8_t FIO2_Val)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	71fb      	strb	r3, [r7, #7]
	if(FIO2_Val==100)
 800c202:	79fb      	ldrb	r3, [r7, #7]
 800c204:	2b64      	cmp	r3, #100	; 0x64
 800c206:	d111      	bne.n	800c22c <Servo_Position_Volume_Controlled_Mode+0x34>
	{
		Oxygen_Parameter.Servo_Position=110;
 800c208:	4b30      	ldr	r3, [pc, #192]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c20a:	226e      	movs	r2, #110	; 0x6e
 800c20c:	73da      	strb	r2, [r3, #15]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 800c20e:	4b2f      	ldr	r3, [pc, #188]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c210:	7bda      	ldrb	r2, [r3, #15]
 800c212:	4b2f      	ldr	r3, [pc, #188]	; (800c2d0 <Servo_Position_Volume_Controlled_Mode+0xd8>)
 800c214:	635a      	str	r2, [r3, #52]	; 0x34
		Servo_Info(Oxygen_Parameter.Servo_Position);
 800c216:	4b2d      	ldr	r3, [pc, #180]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c218:	7bdb      	ldrb	r3, [r3, #15]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7ff fc20 	bl	800ba60 <Servo_Info>
		vTaskResume(Oxygen_Blending_Handler);
 800c220:	4b2c      	ldr	r3, [pc, #176]	; (800c2d4 <Servo_Position_Volume_Controlled_Mode+0xdc>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4618      	mov	r0, r3
 800c226:	f013 f8f9 	bl	801f41c <vTaskResume>
		Servo_Angle(Oxygen_Parameter.Servo_Position);
		Servo_Info(Oxygen_Parameter.Servo_Position);
		Parkar_valve_Signal(0);
		vTaskSuspend(Oxygen_Blending_Handler);
	}
}
 800c22a:	e04a      	b.n	800c2c2 <Servo_Position_Volume_Controlled_Mode+0xca>
	else if( (FIO2_Val>=70) && (FIO2_Val<95) )
 800c22c:	79fb      	ldrb	r3, [r7, #7]
 800c22e:	2b45      	cmp	r3, #69	; 0x45
 800c230:	d914      	bls.n	800c25c <Servo_Position_Volume_Controlled_Mode+0x64>
 800c232:	79fb      	ldrb	r3, [r7, #7]
 800c234:	2b5e      	cmp	r3, #94	; 0x5e
 800c236:	d811      	bhi.n	800c25c <Servo_Position_Volume_Controlled_Mode+0x64>
		Oxygen_Parameter.Servo_Position=75;
 800c238:	4b24      	ldr	r3, [pc, #144]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c23a:	224b      	movs	r2, #75	; 0x4b
 800c23c:	73da      	strb	r2, [r3, #15]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 800c23e:	4b23      	ldr	r3, [pc, #140]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c240:	7bda      	ldrb	r2, [r3, #15]
 800c242:	4b23      	ldr	r3, [pc, #140]	; (800c2d0 <Servo_Position_Volume_Controlled_Mode+0xd8>)
 800c244:	635a      	str	r2, [r3, #52]	; 0x34
		Servo_Info(Oxygen_Parameter.Servo_Position);
 800c246:	4b21      	ldr	r3, [pc, #132]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c248:	7bdb      	ldrb	r3, [r3, #15]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff fc08 	bl	800ba60 <Servo_Info>
		vTaskResume(Oxygen_Blending_Handler);
 800c250:	4b20      	ldr	r3, [pc, #128]	; (800c2d4 <Servo_Position_Volume_Controlled_Mode+0xdc>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4618      	mov	r0, r3
 800c256:	f013 f8e1 	bl	801f41c <vTaskResume>
 800c25a:	e032      	b.n	800c2c2 <Servo_Position_Volume_Controlled_Mode+0xca>
	else if((FIO2_Val>21) && (FIO2_Val<70) )
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	2b15      	cmp	r3, #21
 800c260:	d914      	bls.n	800c28c <Servo_Position_Volume_Controlled_Mode+0x94>
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	2b45      	cmp	r3, #69	; 0x45
 800c266:	d811      	bhi.n	800c28c <Servo_Position_Volume_Controlled_Mode+0x94>
		Oxygen_Parameter.Servo_Position=45;
 800c268:	4b18      	ldr	r3, [pc, #96]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c26a:	222d      	movs	r2, #45	; 0x2d
 800c26c:	73da      	strb	r2, [r3, #15]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 800c26e:	4b17      	ldr	r3, [pc, #92]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c270:	7bda      	ldrb	r2, [r3, #15]
 800c272:	4b17      	ldr	r3, [pc, #92]	; (800c2d0 <Servo_Position_Volume_Controlled_Mode+0xd8>)
 800c274:	635a      	str	r2, [r3, #52]	; 0x34
		Servo_Info(Oxygen_Parameter.Servo_Position);
 800c276:	4b15      	ldr	r3, [pc, #84]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c278:	7bdb      	ldrb	r3, [r3, #15]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff fbf0 	bl	800ba60 <Servo_Info>
		vTaskResume(Oxygen_Blending_Handler);
 800c280:	4b14      	ldr	r3, [pc, #80]	; (800c2d4 <Servo_Position_Volume_Controlled_Mode+0xdc>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4618      	mov	r0, r3
 800c286:	f013 f8c9 	bl	801f41c <vTaskResume>
 800c28a:	e01a      	b.n	800c2c2 <Servo_Position_Volume_Controlled_Mode+0xca>
	else if(FIO2_Val<=21)
 800c28c:	79fb      	ldrb	r3, [r7, #7]
 800c28e:	2b15      	cmp	r3, #21
 800c290:	d817      	bhi.n	800c2c2 <Servo_Position_Volume_Controlled_Mode+0xca>
		Oxygen_Parameter.Servo_Position=45;
 800c292:	4b0e      	ldr	r3, [pc, #56]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c294:	222d      	movs	r2, #45	; 0x2d
 800c296:	73da      	strb	r2, [r3, #15]
		Oxygen_Parameter.Achieved_Oxygen=21;
 800c298:	4b0c      	ldr	r3, [pc, #48]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c29a:	2215      	movs	r2, #21
 800c29c:	731a      	strb	r2, [r3, #12]
		Servo_Angle(Oxygen_Parameter.Servo_Position);
 800c29e:	4b0b      	ldr	r3, [pc, #44]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c2a0:	7bda      	ldrb	r2, [r3, #15]
 800c2a2:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <Servo_Position_Volume_Controlled_Mode+0xd8>)
 800c2a4:	635a      	str	r2, [r3, #52]	; 0x34
		Servo_Info(Oxygen_Parameter.Servo_Position);
 800c2a6:	4b09      	ldr	r3, [pc, #36]	; (800c2cc <Servo_Position_Volume_Controlled_Mode+0xd4>)
 800c2a8:	7bdb      	ldrb	r3, [r3, #15]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff fbd8 	bl	800ba60 <Servo_Info>
		Parkar_valve_Signal(0);
 800c2b0:	4b09      	ldr	r3, [pc, #36]	; (800c2d8 <Servo_Position_Volume_Controlled_Mode+0xe0>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	615a      	str	r2, [r3, #20]
		vTaskSuspend(Oxygen_Blending_Handler);
 800c2b6:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <Servo_Position_Volume_Controlled_Mode+0xdc>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f012 ffea 	bl	801f294 <vTaskSuspend>
}
 800c2c0:	e7ff      	b.n	800c2c2 <Servo_Position_Volume_Controlled_Mode+0xca>
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	2001409c 	.word	0x2001409c
 800c2d0:	40001800 	.word	0x40001800
 800c2d4:	20013f24 	.word	0x20013f24
 800c2d8:	40007400 	.word	0x40007400

0800c2dc <Pc_Simv_Assist_OFF_Task>:
static void CHECK_TRIGGER_OFFSET();
static void Set_Blower_Val();
static void Trigger_Time_Monitor();

void Pc_Simv_Assist_OFF_Task(void *argument)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 800c2e4:	4b13      	ldr	r3, [pc, #76]	; (800c334 <Pc_Simv_Assist_OFF_Task+0x58>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d00b      	beq.n	800c304 <Pc_Simv_Assist_OFF_Task+0x28>
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	dc19      	bgt.n	800c324 <Pc_Simv_Assist_OFF_Task+0x48>
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d019      	beq.n	800c328 <Pc_Simv_Assist_OFF_Task+0x4c>
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d115      	bne.n	800c324 <Pc_Simv_Assist_OFF_Task+0x48>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800c2f8:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <Pc_Simv_Assist_OFF_Task+0x5c>)
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 f81f 	bl	800c340 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF>
			break;
 800c302:	e012      	b.n	800c32a <Pc_Simv_Assist_OFF_Task+0x4e>
			case Run_Expiration_Cycle:
				Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800c304:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <Pc_Simv_Assist_OFF_Task+0x5c>)
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	4a0c      	ldr	r2, [pc, #48]	; (800c33c <Pc_Simv_Assist_OFF_Task+0x60>)
 800c30a:	edd2 7a00 	vldr	s15, [r2]
											   PEEP_Maintain_Parameter.PEEP_Temp,
											   PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800c30e:	4a0b      	ldr	r2, [pc, #44]	; (800c33c <Pc_Simv_Assist_OFF_Task+0x60>)
 800c310:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800c314:	b292      	uxth	r2, r2
 800c316:	4611      	mov	r1, r2
 800c318:	eeb0 0a67 	vmov.f32	s0, s15
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 f843 	bl	800c3a8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF>
			break;
 800c322:	e002      	b.n	800c32a <Pc_Simv_Assist_OFF_Task+0x4e>
			case No_Run_State:
			break;
			default:
			break;
 800c324:	bf00      	nop
 800c326:	e000      	b.n	800c32a <Pc_Simv_Assist_OFF_Task+0x4e>
			break;
 800c328:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 800c32a:	2002      	movs	r0, #2
 800c32c:	f012 ff7e 	bl	801f22c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 800c330:	e7d8      	b.n	800c2e4 <Pc_Simv_Assist_OFF_Task+0x8>
 800c332:	bf00      	nop
 800c334:	20013f7c 	.word	0x20013f7c
 800c338:	20014030 	.word	0x20014030
 800c33c:	20014300 	.word	0x20014300

0800c340 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF>:
	}
}

static void Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(uint16_t Blower_Signal)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	4603      	mov	r3, r0
 800c348:	80fb      	strh	r3, [r7, #6]
	Pressure_Mode_blower_control.Blower_Signal_Voltage = ( (Blower_Signal*3.3) /4095);
 800c34a:	88fb      	ldrh	r3, [r7, #6]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7f4 f891 	bl	8000474 <__aeabi_i2d>
 800c352:	a311      	add	r3, pc, #68	; (adr r3, 800c398 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x58>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f4 f8f6 	bl	8000548 <__aeabi_dmul>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	4610      	mov	r0, r2
 800c362:	4619      	mov	r1, r3
 800c364:	a30e      	add	r3, pc, #56	; (adr r3, 800c3a0 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x60>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	f7f4 fa17 	bl	800079c <__aeabi_ddiv>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4610      	mov	r0, r2
 800c374:	4619      	mov	r1, r3
 800c376:	f7f4 fbc9 	bl	8000b0c <__aeabi_d2f>
 800c37a:	4603      	mov	r3, r0
 800c37c:	4a04      	ldr	r2, [pc, #16]	; (800c390 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x50>)
 800c37e:	60d3      	str	r3, [r2, #12]
	Blower_Signal(Blower_Signal);
 800c380:	4a04      	ldr	r2, [pc, #16]	; (800c394 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x54>)
 800c382:	88fb      	ldrh	r3, [r7, #6]
 800c384:	6093      	str	r3, [r2, #8]
}
 800c386:	bf00      	nop
 800c388:	3708      	adds	r7, #8
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	20014030 	.word	0x20014030
 800c394:	40007400 	.word	0x40007400
 800c398:	66666666 	.word	0x66666666
 800c39c:	400a6666 	.word	0x400a6666
 800c3a0:	00000000 	.word	0x00000000
 800c3a4:	40affe00 	.word	0x40affe00

0800c3a8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF>:

static void Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	ed87 0a00 	vstr	s0, [r7]
 800c3b4:	460a      	mov	r2, r1
 800c3b6:	80fb      	strh	r3, [r7, #6]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	80bb      	strh	r3, [r7, #4]
	if(PCsimv.Blower_Wait_Time_Milli_Second ==0)
 800c3bc:	4b23      	ldr	r3, [pc, #140]	; (800c44c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xa4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d102      	bne.n	800c3ca <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x22>
	{
		Blower_Signal( Blower_Signal);
 800c3c4:	4a22      	ldr	r2, [pc, #136]	; (800c450 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xa8>)
 800c3c6:	88fb      	ldrh	r3, [r7, #6]
 800c3c8:	6093      	str	r3, [r2, #8]
	}
		if(Peep_Status==PEEP_ACHEIVED)
		{

		 }
		if(Pressure_sensor.Pressure_Val<= PEEP)
 800c3ca:	4b22      	ldr	r3, [pc, #136]	; (800c454 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xac>)
 800c3cc:	789b      	ldrb	r3, [r3, #2]
 800c3ce:	ee07 3a90 	vmov	s15, r3
 800c3d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3d6:	ed97 7a00 	vldr	s14, [r7]
 800c3da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e2:	db20      	blt.n	800c426 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x7e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 800c3e4:	4b1c      	ldr	r3, [pc, #112]	; (800c458 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb0>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d112      	bne.n	800c412 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x6a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 800c3ec:	4b1a      	ldr	r3, [pc, #104]	; (800c458 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb0>)
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	701a      	strb	r2, [r3, #0]
				if(Trigger_Process == ONE_TIME_TRIGGER)
 800c3f2:	4b1a      	ldr	r3, [pc, #104]	; (800c45c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb4>)
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d104      	bne.n	800c404 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x5c>
				{
				   vTaskDelay(Expiratory_Valve_Open_Time);
 800c3fa:	88bb      	ldrh	r3, [r7, #4]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f012 ff15 	bl	801f22c <vTaskDelay>
 800c402:	e006      	b.n	800c412 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x6a>
				}
				else if(Trigger_Process == COUNTINOUS_TRIGGER)
 800c404:	4b15      	ldr	r3, [pc, #84]	; (800c45c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb4>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d102      	bne.n	800c412 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x6a>
				{
				   vTaskDelay(0);
 800c40c:	2000      	movs	r0, #0
 800c40e:	f012 ff0d 	bl	801f22c <vTaskDelay>
				}
			}
			Peep_Status=PEEP_ACHEIVED;
 800c412:	4b13      	ldr	r3, [pc, #76]	; (800c460 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb8>)
 800c414:	2201      	movs	r2, #1
 800c416:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 800c418:	4b12      	ldr	r3, [pc, #72]	; (800c464 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xbc>)
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	4a11      	ldr	r2, [pc, #68]	; (800c464 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xbc>)
 800c41e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c422:	6153      	str	r3, [r2, #20]
 800c424:	e009      	b.n	800c43a <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x92>
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 800c426:	4b0e      	ldr	r3, [pc, #56]	; (800c460 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb8>)
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d105      	bne.n	800c43a <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x92>
		{
			ExpValve_OPEN();
 800c42e:	4b0d      	ldr	r3, [pc, #52]	; (800c464 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xbc>)
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	4a0c      	ldr	r2, [pc, #48]	; (800c464 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xbc>)
 800c434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c438:	6153      	str	r3, [r2, #20]
		}

	CHECK_TRIGGER_ASSIST_OFF(PC_SIMV.TRIG_WINDOW);
 800c43a:	4b0b      	ldr	r3, [pc, #44]	; (800c468 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xc0>)
 800c43c:	8bdb      	ldrh	r3, [r3, #30]
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 f814 	bl	800c46c <CHECK_TRIGGER_ASSIST_OFF>
}
 800c444:	bf00      	nop
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	20013b98 	.word	0x20013b98
 800c450:	40007400 	.word	0x40007400
 800c454:	2001405c 	.word	0x2001405c
 800c458:	200140f4 	.word	0x200140f4
 800c45c:	20013ac8 	.word	0x20013ac8
 800c460:	200140f5 	.word	0x200140f5
 800c464:	40020400 	.word	0x40020400
 800c468:	200142bc 	.word	0x200142bc

0800c46c <CHECK_TRIGGER_ASSIST_OFF>:

static void CHECK_TRIGGER_ASSIST_OFF(uint16_t Trigger_Check_Time)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	4603      	mov	r3, r0
 800c474:	80fb      	strh	r3, [r7, #6]
	if(Trigger_Process == ONE_TIME_TRIGGER)
 800c476:	4b0a      	ldr	r3, [pc, #40]	; (800c4a0 <CHECK_TRIGGER_ASSIST_OFF+0x34>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d104      	bne.n	800c488 <CHECK_TRIGGER_ASSIST_OFF+0x1c>
	{
		Before_Trigger(Trigger_Check_Time);
 800c47e:	88fb      	ldrh	r3, [r7, #6]
 800c480:	4618      	mov	r0, r3
 800c482:	f000 f80f 	bl	800c4a4 <Before_Trigger>
	else if(Trigger_Process == COUNTINOUS_TRIGGER)
	{
		After_Trigger(Trigger_Check_Time);
	}

}
 800c486:	e007      	b.n	800c498 <CHECK_TRIGGER_ASSIST_OFF+0x2c>
	else if(Trigger_Process == COUNTINOUS_TRIGGER)
 800c488:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <CHECK_TRIGGER_ASSIST_OFF+0x34>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d103      	bne.n	800c498 <CHECK_TRIGGER_ASSIST_OFF+0x2c>
		After_Trigger(Trigger_Check_Time);
 800c490:	88fb      	ldrh	r3, [r7, #6]
 800c492:	4618      	mov	r0, r3
 800c494:	f000 f82e 	bl	800c4f4 <After_Trigger>
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	20013ac8 	.word	0x20013ac8

0800c4a4 <Before_Trigger>:



static void Before_Trigger(uint16_t Trigger_Check_Time)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 800c4ae:	4b0f      	ldr	r3, [pc, #60]	; (800c4ec <Before_Trigger+0x48>)
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	88fb      	ldrh	r3, [r7, #6]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	dc11      	bgt.n	800c4dc <Before_Trigger+0x38>
 800c4b8:	4b0c      	ldr	r3, [pc, #48]	; (800c4ec <Before_Trigger+0x48>)
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00d      	beq.n	800c4dc <Before_Trigger+0x38>
	{

		if (Trigger_Type == Pressure_Trigger)
 800c4c0:	4b0b      	ldr	r3, [pc, #44]	; (800c4f0 <Before_Trigger+0x4c>)
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <Before_Trigger+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 800c4c8:	f000 f9fc 	bl	800c8c4 <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800c4cc:	e009      	b.n	800c4e2 <Before_Trigger+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 800c4ce:	4b08      	ldr	r3, [pc, #32]	; (800c4f0 <Before_Trigger+0x4c>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d105      	bne.n	800c4e2 <Before_Trigger+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 800c4d6:	f000 fa1d 	bl	800c914 <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800c4da:	e002      	b.n	800c4e2 <Before_Trigger+0x3e>

	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 800c4dc:	f000 fa48 	bl	800c970 <CHECK_TRIGGER_OFFSET>
	}
}
 800c4e0:	e000      	b.n	800c4e4 <Before_Trigger+0x40>
		if (Trigger_Type == Pressure_Trigger)
 800c4e2:	bf00      	nop
}
 800c4e4:	bf00      	nop
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	200141fc 	.word	0x200141fc
 800c4f0:	2001398c 	.word	0x2001398c

0800c4f4 <After_Trigger>:



static void After_Trigger(uint16_t Trigger_Check_Time)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 800c4fe:	4b18      	ldr	r3, [pc, #96]	; (800c560 <After_Trigger+0x6c>)
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	88fb      	ldrh	r3, [r7, #6]
 800c504:	429a      	cmp	r2, r3
 800c506:	dc23      	bgt.n	800c550 <After_Trigger+0x5c>
 800c508:	4b15      	ldr	r3, [pc, #84]	; (800c560 <After_Trigger+0x6c>)
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d01f      	beq.n	800c550 <After_Trigger+0x5c>
	{
		if( (Flow_Sensor_cal._Flow_Val > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (PCsimv.Trigger_Check_Wait_Time == 0))
 800c510:	4b14      	ldr	r3, [pc, #80]	; (800c564 <After_Trigger+0x70>)
 800c512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c514:	2b00      	cmp	r3, #0
 800c516:	dd1e      	ble.n	800c556 <After_Trigger+0x62>
 800c518:	4b13      	ldr	r3, [pc, #76]	; (800c568 <After_Trigger+0x74>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d11a      	bne.n	800c556 <After_Trigger+0x62>
 800c520:	4b12      	ldr	r3, [pc, #72]	; (800c56c <After_Trigger+0x78>)
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d116      	bne.n	800c556 <After_Trigger+0x62>
 800c528:	4b11      	ldr	r3, [pc, #68]	; (800c570 <After_Trigger+0x7c>)
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d112      	bne.n	800c556 <After_Trigger+0x62>
		{
			STOP_BLOWER_IF_FLOW_SENSE();
 800c530:	f000 fa48 	bl	800c9c4 <STOP_BLOWER_IF_FLOW_SENSE>

				if (Trigger_Type == Pressure_Trigger)
 800c534:	4b0f      	ldr	r3, [pc, #60]	; (800c574 <After_Trigger+0x80>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d102      	bne.n	800c542 <After_Trigger+0x4e>
				{
					CHECK_PRESSURE_TRIGGER();
 800c53c:	f000 f9c2 	bl	800c8c4 <CHECK_PRESSURE_TRIGGER>
		if( (Flow_Sensor_cal._Flow_Val > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (PCsimv.Trigger_Check_Wait_Time == 0))
 800c540:	e009      	b.n	800c556 <After_Trigger+0x62>
				}
				else if (Trigger_Type == Flow_Trigger)
 800c542:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <After_Trigger+0x80>)
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d105      	bne.n	800c556 <After_Trigger+0x62>
				{
					CHECK_FLOW_TRIGGER();
 800c54a:	f000 f9e3 	bl	800c914 <CHECK_FLOW_TRIGGER>
		if( (Flow_Sensor_cal._Flow_Val > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (PCsimv.Trigger_Check_Wait_Time == 0))
 800c54e:	e002      	b.n	800c556 <After_Trigger+0x62>
				}
		 }
	}
	else
	{
		CHECK_TRIGGER_OFFSET();
 800c550:	f000 fa0e 	bl	800c970 <CHECK_TRIGGER_OFFSET>
	}
}
 800c554:	e000      	b.n	800c558 <After_Trigger+0x64>
		if( (Flow_Sensor_cal._Flow_Val > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (PCsimv.Trigger_Check_Wait_Time == 0))
 800c556:	bf00      	nop
}
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	200141fc 	.word	0x200141fc
 800c564:	20013fb0 	.word	0x20013fb0
 800c568:	200140f5 	.word	0x200140f5
 800c56c:	20014300 	.word	0x20014300
 800c570:	20013b98 	.word	0x20013b98
 800c574:	2001398c 	.word	0x2001398c

0800c578 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset>:
void PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset()
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 800c57c:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x2c>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d108      	bne.n	800c596 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x1e>
	{
		Trigger_Process = COUNTINOUS_TRIGGER;
 800c584:	4b08      	ldr	r3, [pc, #32]	; (800c5a8 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x30>)
 800c586:	2201      	movs	r2, #1
 800c588:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_DAC_VAL = RESET;
 800c58a:	4b08      	ldr	r3, [pc, #32]	; (800c5ac <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x34>)
 800c58c:	2200      	movs	r2, #0
 800c58e:	801a      	strh	r2, [r3, #0]
		PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset();
 800c590:	f000 f84a 	bl	800c628 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset>
	else
	{
		Trigger_Process = ONE_TIME_TRIGGER;
		PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
	}
}
 800c594:	e004      	b.n	800c5a0 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x28>
		Trigger_Process = ONE_TIME_TRIGGER;
 800c596:	4b04      	ldr	r3, [pc, #16]	; (800c5a8 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x30>)
 800c598:	2200      	movs	r2, #0
 800c59a:	701a      	strb	r2, [r3, #0]
		PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
 800c59c:	f000 fc92 	bl	800cec4 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>
}
 800c5a0:	bf00      	nop
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	20013ca9 	.word	0x20013ca9
 800c5a8:	20013ac8 	.word	0x20013ac8
 800c5ac:	20014030 	.word	0x20014030

0800c5b0 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset>:



void PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset()
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	af00      	add	r7, sp, #0
	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 800c5b4:	4b06      	ldr	r3, [pc, #24]	; (800c5d0 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x20>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d102      	bne.n	800c5c2 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x12>
	{
		PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset();
 800c5bc:	f000 f8d4 	bl	800c768 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset>
	else
	{
		Pressure_Mode_blower_control.BLOWER_DAC_VAL=RESET;
		PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
	}
}
 800c5c0:	e004      	b.n	800c5cc <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x1c>
		Pressure_Mode_blower_control.BLOWER_DAC_VAL=RESET;
 800c5c2:	4b04      	ldr	r3, [pc, #16]	; (800c5d4 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x24>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	801a      	strh	r2, [r3, #0]
		PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
 800c5c8:	f000 fd64 	bl	800d094 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>
}
 800c5cc:	bf00      	nop
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	20013ca9 	.word	0x20013ca9
 800c5d4:	20014030 	.word	0x20014030

0800c5d8 <Switch_TASK_Inspiration_CYCLE>:


static void Switch_TASK_Inspiration_CYCLE()
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af02      	add	r7, sp, #8
	vTaskDelete(One_Time_Handler);
 800c5de:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f012 fd92 	bl	801f10c <vTaskDelete>
	TIME_Base_parameter._INSPIRATION_TIME = 0 ;
 800c5e8:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <Switch_TASK_Inspiration_CYCLE+0x40>)
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter._EXPIRATION_TIME  = 0 ;
 800c5ee:	4b0a      	ldr	r3, [pc, #40]	; (800c618 <Switch_TASK_Inspiration_CYCLE+0x40>)
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	605a      	str	r2, [r3, #4]
	Next_Half_Breath_Cycle                = Generate_Inspiration_Cycle;
 800c5f4:	4b09      	ldr	r3, [pc, #36]	; (800c61c <Switch_TASK_Inspiration_CYCLE+0x44>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
	xTaskCreate(One_Time_Task,"One-Time-Task", 128, NULL,3, &One_Time_Handler);
 800c5fa:	4b06      	ldr	r3, [pc, #24]	; (800c614 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	2303      	movs	r3, #3
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	2300      	movs	r3, #0
 800c604:	2280      	movs	r2, #128	; 0x80
 800c606:	4906      	ldr	r1, [pc, #24]	; (800c620 <Switch_TASK_Inspiration_CYCLE+0x48>)
 800c608:	4806      	ldr	r0, [pc, #24]	; (800c624 <Switch_TASK_Inspiration_CYCLE+0x4c>)
 800c60a:	f012 fc48 	bl	801ee9e <xTaskCreate>
}
 800c60e:	bf00      	nop
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	20014094 	.word	0x20014094
 800c618:	200141fc 	.word	0x200141fc
 800c61c:	20013d20 	.word	0x20013d20
 800c620:	08022d08 	.word	0x08022d08
 800c624:	0800f869 	.word	0x0800f869

0800c628 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset>:

static void PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset()
{
 800c628:	b590      	push	{r4, r7, lr}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af02      	add	r7, sp, #8
	    Breath_Count         = Count_The_Breath;
 800c62e:	4b3b      	ldr	r3, [pc, #236]	; (800c71c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf4>)
 800c630:	2201      	movs	r2, #1
 800c632:	701a      	strb	r2, [r3, #0]
		PIP_Not_Acheieved();
 800c634:	f001 f95a 	bl	800d8ec <PIP_Not_Acheieved>
		ExpValve_CLOSE();
 800c638:	4b39      	ldr	r3, [pc, #228]	; (800c720 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf8>)
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	4a38      	ldr	r2, [pc, #224]	; (800c720 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf8>)
 800c63e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c642:	6153      	str	r3, [r2, #20]
		PIP_AVERAGE();
 800c644:	f7fc fcea 	bl	800901c <PIP_AVERAGE>
		PEEP_AVERAGE();
 800c648:	f7fc fd0e 	bl	8009068 <PEEP_AVERAGE>
		Set_Blower_Val();
 800c64c:	f000 f9cc 	bl	800c9e8 <Set_Blower_Val>
		O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 800c650:	4b34      	ldr	r3, [pc, #208]	; (800c724 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xfc>)
 800c652:	78db      	ldrb	r3, [r3, #3]
 800c654:	4618      	mov	r0, r3
 800c656:	f7ff fa57 	bl	800bb08 <O2_DAC_Control>
		Check_Alert();
 800c65a:	f7f4 fd4d 	bl	80010f8 <Check_Alert>
		Alert_Inspiration_Time_Parameter();
 800c65e:	f7f4 fdf5 	bl	800124c <Alert_Inspiration_Time_Parameter>
		LED_Alert();
 800c662:	f7f5 f9a5 	bl	80019b0 <LED_Alert>
		Alert_Status = NO_ALERT;
 800c666:	4b30      	ldr	r3, [pc, #192]	; (800c728 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x100>)
 800c668:	2200      	movs	r2, #0
 800c66a:	701a      	strb	r2, [r3, #0]
		Sampled_Parameter_Inspiration_time();
 800c66c:	f004 f93c 	bl	80108e8 <Sampled_Parameter_Inspiration_time>
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 800c670:	4b2e      	ldr	r3, [pc, #184]	; (800c72c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 800c672:	7c18      	ldrb	r0, [r3, #16]
 800c674:	4b2e      	ldr	r3, [pc, #184]	; (800c730 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800c676:	7899      	ldrb	r1, [r3, #2]
 800c678:	4b2d      	ldr	r3, [pc, #180]	; (800c730 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800c67a:	689a      	ldr	r2, [r3, #8]
 800c67c:	4b2c      	ldr	r3, [pc, #176]	; (800c730 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800c67e:	785c      	ldrb	r4, [r3, #1]
																															 PC_SIMV.RESPIRATORY_RATE_Val,
																															 PC_SIMV.INSPIRATION_TIME,
																															 PC_SIMV.PEEP_Val,
																															 PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800c680:	4b2a      	ldr	r3, [pc, #168]	; (800c72c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 800c682:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 800c686:	b29b      	uxth	r3, r3
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	4623      	mov	r3, r4
 800c68c:	f7f9 fac2 	bl	8005c14 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>
 800c690:	4603      	mov	r3, r0
 800c692:	b21a      	sxth	r2, r3
 800c694:	4b25      	ldr	r3, [pc, #148]	; (800c72c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 800c696:	809a      	strh	r2, [r3, #4]

		if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 800c698:	4b26      	ldr	r3, [pc, #152]	; (800c734 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x10c>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d106      	bne.n	800c6ae <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x86>
		{
			BREATH_STATE                                      = PATIENT_TRIGGER_INSPIRATION;
 800c6a0:	4b25      	ldr	r3, [pc, #148]	; (800c738 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x110>)
 800c6a2:	2202      	movs	r2, #2
 800c6a4:	701a      	strb	r2, [r3, #0]
			LED_STATUS                                        = EXPIRATION_LED;
 800c6a6:	4b25      	ldr	r3, [pc, #148]	; (800c73c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x114>)
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	701a      	strb	r2, [r3, #0]
 800c6ac:	e002      	b.n	800c6b4 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x8c>
		}
		else
		{
			BREATH_STATE                                       = INSPIRATION_CYCLE;
 800c6ae:	4b22      	ldr	r3, [pc, #136]	; (800c738 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x110>)
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	701a      	strb	r2, [r3, #0]
		}

		Peep_Status                   				         = PEEP_NOT_ACHEIVED;
 800c6b4:	4b22      	ldr	r3, [pc, #136]	; (800c740 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x118>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			             = OPENED;
 800c6ba:	4b22      	ldr	r3, [pc, #136]	; (800c744 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x11c>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	701a      	strb	r2, [r3, #0]
		PIP_Average_Parameter.Maximum_PIP_Acheived           = RESET;
 800c6c0:	4b21      	ldr	r3, [pc, #132]	; (800c748 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x120>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	701a      	strb	r2, [r3, #0]
		TIME_Base_parameter._INSPIRATION_TIME                = PC_SIMV.INSPIRATION_TIME;
 800c6c6:	4b1a      	ldr	r3, [pc, #104]	; (800c730 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	4b1f      	ldr	r3, [pc, #124]	; (800c74c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x124>)
 800c6ce:	601a      	str	r2, [r3, #0]

		Led_Delay                                            = (PC_SIMV.RISE_TIME_MS_Val  /46);
 800c6d0:	4b17      	ldr	r3, [pc, #92]	; (800c730 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800c6d2:	ed93 7a01 	vldr	s14, [r3, #4]
 800c6d6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800c750 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x128>
 800c6da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c6de:	4b1d      	ldr	r3, [pc, #116]	; (800c754 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x12c>)
 800c6e0:	edc3 7a00 	vstr	s15, [r3]
		LED_ITER                                             = 1;
 800c6e4:	4b1c      	ldr	r3, [pc, #112]	; (800c758 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x130>)
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	701a      	strb	r2, [r3, #0]

		TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED        = RESET;
 800c6ea:	4b18      	ldr	r3, [pc, #96]	; (800c74c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x124>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	609a      	str	r2, [r3, #8]
		vol.Volume                                           = RESET;
 800c6f0:	4b1a      	ldr	r3, [pc, #104]	; (800c75c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x134>)
 800c6f2:	f04f 0200 	mov.w	r2, #0
 800c6f6:	601a      	str	r2, [r3, #0]
		vol.Volume_max                                       = RESET;
 800c6f8:	4b18      	ldr	r3, [pc, #96]	; (800c75c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x134>)
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	609a      	str	r2, [r3, #8]
		Next_Half_Breath_Cycle                               = Generate_Expiration_Cycle;
 800c6fe:	4b18      	ldr	r3, [pc, #96]	; (800c760 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x138>)
 800c700:	2201      	movs	r2, #1
 800c702:	701a      	strb	r2, [r3, #0]
		Run_Current_Breathe_State                            = Run_Inspiration_Cycle;
 800c704:	4b17      	ldr	r3, [pc, #92]	; (800c764 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x13c>)
 800c706:	2201      	movs	r2, #1
 800c708:	701a      	strb	r2, [r3, #0]
		vTaskDelay(PC_SIMV.INSPIRATION_TIME);
 800c70a:	4b09      	ldr	r3, [pc, #36]	; (800c730 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	4618      	mov	r0, r3
 800c710:	f012 fd8c 	bl	801f22c <vTaskDelay>
}
 800c714:	bf00      	nop
 800c716:	3704      	adds	r7, #4
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd90      	pop	{r4, r7, pc}
 800c71c:	200139a6 	.word	0x200139a6
 800c720:	40020400 	.word	0x40020400
 800c724:	20013ba4 	.word	0x20013ba4
 800c728:	20013f88 	.word	0x20013f88
 800c72c:	20014300 	.word	0x20014300
 800c730:	200142bc 	.word	0x200142bc
 800c734:	20013ca9 	.word	0x20013ca9
 800c738:	200140fd 	.word	0x200140fd
 800c73c:	20013aed 	.word	0x20013aed
 800c740:	200140f5 	.word	0x200140f5
 800c744:	200140f4 	.word	0x200140f4
 800c748:	20013b70 	.word	0x20013b70
 800c74c:	200141fc 	.word	0x200141fc
 800c750:	42380000 	.word	0x42380000
 800c754:	20014078 	.word	0x20014078
 800c758:	20013f3c 	.word	0x20013f3c
 800c75c:	200140c8 	.word	0x200140c8
 800c760:	20013d20 	.word	0x20013d20
 800c764:	20013f7c 	.word	0x20013f7c

0800c768 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset>:

static void PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset()
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	af00      	add	r7, sp, #0
		if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 800c76c:	4b31      	ldr	r3, [pc, #196]	; (800c834 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xcc>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d106      	bne.n	800c782 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x1a>
		{
			BREATH_STATE                                      = PATIENT_TRIGGER_EXPIRATION;
 800c774:	4b30      	ldr	r3, [pc, #192]	; (800c838 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd0>)
 800c776:	2203      	movs	r2, #3
 800c778:	701a      	strb	r2, [r3, #0]
			LED_STATUS                                        = Idle_LED;
 800c77a:	4b30      	ldr	r3, [pc, #192]	; (800c83c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd4>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	701a      	strb	r2, [r3, #0]
 800c780:	e002      	b.n	800c788 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x20>
		}
		else
		{
			BREATH_STATE                                       = EXPIRATION_CYCLE;
 800c782:	4b2d      	ldr	r3, [pc, #180]	; (800c838 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd0>)
 800c784:	2201      	movs	r2, #1
 800c786:	701a      	strb	r2, [r3, #0]
		}
		PEEP_Maintain_Parameter.CHECK_TRIGGER               = 1500;
 800c788:	4b2d      	ldr	r3, [pc, #180]	; (800c840 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 800c78a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c78e:	61da      	str	r2, [r3, #28]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 800c790:	4b2b      	ldr	r3, [pc, #172]	; (800c840 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 800c792:	2200      	movs	r2, #0
 800c794:	615a      	str	r2, [r3, #20]
		PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 800c796:	4b2a      	ldr	r3, [pc, #168]	; (800c840 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 800c798:	2200      	movs	r2, #0
 800c79a:	619a      	str	r2, [r3, #24]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 800c79c:	4b28      	ldr	r3, [pc, #160]	; (800c840 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 800c7a2:	4b27      	ldr	r3, [pc, #156]	; (800c840 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	60da      	str	r2, [r3, #12]
		Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 800c7a8:	4b22      	ldr	r3, [pc, #136]	; (800c834 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xcc>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	701a      	strb	r2, [r3, #0]
		Trigger_Time_Monitor();
 800c7ae:	f000 f933 	bl	800ca18 <Trigger_Time_Monitor>
		Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL    = TUNE_PEEP_BLOWER(&Pressure_Mode_blower_control.LAST_PEEP_BLOWER_DAC_VAL,
 800c7b2:	4b24      	ldr	r3, [pc, #144]	; (800c844 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xdc>)
 800c7b4:	785b      	ldrb	r3, [r3, #1]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	4823      	ldr	r0, [pc, #140]	; (800c848 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe0>)
 800c7ba:	f000 f857 	bl	800c86c <TUNE_PEEP_BLOWER>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4b22      	ldr	r3, [pc, #136]	; (800c84c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe4>)
 800c7c4:	821a      	strh	r2, [r3, #16]
				                                                               Common_Mode_Parameter._PEEP_Val );
		Pressure_Mode_blower_control.BLOWER_DAC_VAL         = Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL;
 800c7c6:	4b21      	ldr	r3, [pc, #132]	; (800c84c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe4>)
 800c7c8:	8a1a      	ldrh	r2, [r3, #16]
 800c7ca:	4b20      	ldr	r3, [pc, #128]	; (800c84c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe4>)
 800c7cc:	801a      	strh	r2, [r3, #0]
		Adjust_Servo_And_Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 800c7ce:	4b1d      	ldr	r3, [pc, #116]	; (800c844 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xdc>)
 800c7d0:	78db      	ldrb	r3, [r3, #3]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe ffd2 	bl	800b77c <Adjust_Servo_And_Calculate_O2>
		Alert_Expiration_Time_Parameter();
 800c7d8:	f7f4 fda8 	bl	800132c <Alert_Expiration_Time_Parameter>
		TIME_Base_parameter._EXPIRATION_TIME                = PC_SIMV.EXPIRATION_TIME;
 800c7dc:	4b1c      	ldr	r3, [pc, #112]	; (800c850 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe8>)
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4b1c      	ldr	r3, [pc, #112]	; (800c854 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xec>)
 800c7e4:	605a      	str	r2, [r3, #4]


		Led_Delay                                           = ( (PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time + 500)  /46);
 800c7e6:	4b16      	ldr	r3, [pc, #88]	; (800c840 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 800c7e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c7ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c7f0:	4a19      	ldr	r2, [pc, #100]	; (800c858 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xf0>)
 800c7f2:	fb82 1203 	smull	r1, r2, r2, r3
 800c7f6:	441a      	add	r2, r3
 800c7f8:	1152      	asrs	r2, r2, #5
 800c7fa:	17db      	asrs	r3, r3, #31
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	ee07 3a90 	vmov	s15, r3
 800c802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c806:	4b15      	ldr	r3, [pc, #84]	; (800c85c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xf4>)
 800c808:	edc3 7a00 	vstr	s15, [r3]
		LED_ITER                                            = 45;
 800c80c:	4b14      	ldr	r3, [pc, #80]	; (800c860 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xf8>)
 800c80e:	222d      	movs	r2, #45	; 0x2d
 800c810:	701a      	strb	r2, [r3, #0]

		TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 800c812:	4b10      	ldr	r3, [pc, #64]	; (800c854 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xec>)
 800c814:	2200      	movs	r2, #0
 800c816:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 800c818:	4b12      	ldr	r3, [pc, #72]	; (800c864 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xfc>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	701a      	strb	r2, [r3, #0]
		Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 800c81e:	4b12      	ldr	r3, [pc, #72]	; (800c868 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x100>)
 800c820:	2202      	movs	r2, #2
 800c822:	701a      	strb	r2, [r3, #0]
		vTaskDelay(PC_SIMV.EXPIRATION_TIME);
 800c824:	4b0a      	ldr	r3, [pc, #40]	; (800c850 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe8>)
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	4618      	mov	r0, r3
 800c82a:	f012 fcff 	bl	801f22c <vTaskDelay>
}
 800c82e:	bf00      	nop
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	20013ca9 	.word	0x20013ca9
 800c838:	200140fd 	.word	0x200140fd
 800c83c:	20013aed 	.word	0x20013aed
 800c840:	20014300 	.word	0x20014300
 800c844:	20013ba4 	.word	0x20013ba4
 800c848:	20014042 	.word	0x20014042
 800c84c:	20014030 	.word	0x20014030
 800c850:	200142bc 	.word	0x200142bc
 800c854:	200141fc 	.word	0x200141fc
 800c858:	b21642c9 	.word	0xb21642c9
 800c85c:	20014078 	.word	0x20014078
 800c860:	20013f3c 	.word	0x20013f3c
 800c864:	20013d20 	.word	0x20013d20
 800c868:	20013f7c 	.word	0x20013f7c

0800c86c <TUNE_PEEP_BLOWER>:




uint16_t TUNE_PEEP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PEEP)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	70fb      	strb	r3, [r7, #3]
	if(PEEP_Maintain_Parameter.PEEP_AVG_VAL  > Set_PEEP)
 800c878:	4b11      	ldr	r3, [pc, #68]	; (800c8c0 <TUNE_PEEP_BLOWER+0x54>)
 800c87a:	7c1b      	ldrb	r3, [r3, #16]
 800c87c:	78fa      	ldrb	r2, [r7, #3]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d206      	bcs.n	800c890 <TUNE_PEEP_BLOWER+0x24>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	881b      	ldrh	r3, [r3, #0]
 800c886:	3b0a      	subs	r3, #10
 800c888:	b29a      	uxth	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	801a      	strh	r2, [r3, #0]
 800c88e:	e00f      	b.n	800c8b0 <TUNE_PEEP_BLOWER+0x44>
	}
	else if(PEEP_Maintain_Parameter.PEEP_AVG_VAL  < Set_PEEP)
 800c890:	4b0b      	ldr	r3, [pc, #44]	; (800c8c0 <TUNE_PEEP_BLOWER+0x54>)
 800c892:	7c1b      	ldrb	r3, [r3, #16]
 800c894:	78fa      	ldrb	r2, [r7, #3]
 800c896:	429a      	cmp	r2, r3
 800c898:	d906      	bls.n	800c8a8 <TUNE_PEEP_BLOWER+0x3c>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	330a      	adds	r3, #10
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	801a      	strh	r2, [r3, #0]
 800c8a6:	e003      	b.n	800c8b0 <TUNE_PEEP_BLOWER+0x44>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	881a      	ldrh	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	881b      	ldrh	r3, [r3, #0]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	20014300 	.word	0x20014300

0800c8c4 <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	af00      	add	r7, sp, #0
	if (( Pressure_sensor.Pressure_Val < (Pressure_Trigger_Offset - PC_SIMV.TRIG_LMT )))
 800c8c8:	4b0e      	ldr	r3, [pc, #56]	; (800c904 <CHECK_PRESSURE_TRIGGER+0x40>)
 800c8ca:	789b      	ldrb	r3, [r3, #2]
 800c8cc:	ee07 3a90 	vmov	s15, r3
 800c8d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c8d4:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <CHECK_PRESSURE_TRIGGER+0x44>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	ee07 3a90 	vmov	s15, r3
 800c8dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c8e0:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <CHECK_PRESSURE_TRIGGER+0x48>)
 800c8e2:	edd3 7a05 	vldr	s15, [r3, #20]
 800c8e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c8ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f2:	d400      	bmi.n	800c8f6 <CHECK_PRESSURE_TRIGGER+0x32>
	{
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 800c8f4:	e004      	b.n	800c900 <CHECK_PRESSURE_TRIGGER+0x3c>
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
 800c8f6:	4b06      	ldr	r3, [pc, #24]	; (800c910 <CHECK_PRESSURE_TRIGGER+0x4c>)
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 800c8fc:	f7ff fe6c 	bl	800c5d8 <Switch_TASK_Inspiration_CYCLE>
}
 800c900:	bf00      	nop
 800c902:	bd80      	pop	{r7, pc}
 800c904:	2001405c 	.word	0x2001405c
 800c908:	20014024 	.word	0x20014024
 800c90c:	200142bc 	.word	0x200142bc
 800c910:	20013ca9 	.word	0x20013ca9

0800c914 <CHECK_FLOW_TRIGGER>:


static void CHECK_FLOW_TRIGGER()
{
 800c914:	b580      	push	{r7, lr}
 800c916:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+PC_SIMV.TRIG_LMT )))
 800c918:	4b10      	ldr	r3, [pc, #64]	; (800c95c <CHECK_FLOW_TRIGGER+0x48>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	ee07 3a90 	vmov	s15, r3
 800c920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c924:	4b0e      	ldr	r3, [pc, #56]	; (800c960 <CHECK_FLOW_TRIGGER+0x4c>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	ee07 3a90 	vmov	s15, r3
 800c92c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c930:	4b0c      	ldr	r3, [pc, #48]	; (800c964 <CHECK_FLOW_TRIGGER+0x50>)
 800c932:	edd3 7a05 	vldr	s15, [r3, #20]
 800c936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c93a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c942:	dc00      	bgt.n	800c946 <CHECK_FLOW_TRIGGER+0x32>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();

	}
}
 800c944:	e008      	b.n	800c958 <CHECK_FLOW_TRIGGER+0x44>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
 800c946:	4b05      	ldr	r3, [pc, #20]	; (800c95c <CHECK_FLOW_TRIGGER+0x48>)
 800c948:	781a      	ldrb	r2, [r3, #0]
 800c94a:	4b07      	ldr	r3, [pc, #28]	; (800c968 <CHECK_FLOW_TRIGGER+0x54>)
 800c94c:	701a      	strb	r2, [r3, #0]
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
 800c94e:	4b07      	ldr	r3, [pc, #28]	; (800c96c <CHECK_FLOW_TRIGGER+0x58>)
 800c950:	2201      	movs	r2, #1
 800c952:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 800c954:	f7ff fe40 	bl	800c5d8 <Switch_TASK_Inspiration_CYCLE>
}
 800c958:	bf00      	nop
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	20014068 	.word	0x20014068
 800c960:	20014018 	.word	0x20014018
 800c964:	200142bc 	.word	0x200142bc
 800c968:	20014240 	.word	0x20014240
 800c96c:	20013ca9 	.word	0x20013ca9

0800c970 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0
	if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 800c974:	4b0e      	ldr	r3, [pc, #56]	; (800c9b0 <CHECK_TRIGGER_OFFSET+0x40>)
 800c976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d008      	beq.n	800c98e <CHECK_TRIGGER_OFFSET+0x1e>
 800c97c:	4b0c      	ldr	r3, [pc, #48]	; (800c9b0 <CHECK_TRIGGER_OFFSET+0x40>)
 800c97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c980:	f113 0f08 	cmn.w	r3, #8
 800c984:	db0f      	blt.n	800c9a6 <CHECK_TRIGGER_OFFSET+0x36>
 800c986:	4b0a      	ldr	r3, [pc, #40]	; (800c9b0 <CHECK_TRIGGER_OFFSET+0x40>)
 800c988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	da0b      	bge.n	800c9a6 <CHECK_TRIGGER_OFFSET+0x36>
	{
		Pressure_Trigger_Offset  =  Pressure_sensor.Pressure_Val;
 800c98e:	4b09      	ldr	r3, [pc, #36]	; (800c9b4 <CHECK_TRIGGER_OFFSET+0x44>)
 800c990:	789b      	ldrb	r3, [r3, #2]
 800c992:	461a      	mov	r2, r3
 800c994:	4b08      	ldr	r3, [pc, #32]	; (800c9b8 <CHECK_TRIGGER_OFFSET+0x48>)
 800c996:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  Flow_Sensor_cal._Flow_Val;
 800c998:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <CHECK_TRIGGER_OFFSET+0x40>)
 800c99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c99c:	4a07      	ldr	r2, [pc, #28]	; (800c9bc <CHECK_TRIGGER_OFFSET+0x4c>)
 800c99e:	6013      	str	r3, [r2, #0]
		FLOW_TRIGGER             =  0;
 800c9a0:	4b07      	ldr	r3, [pc, #28]	; (800c9c0 <CHECK_TRIGGER_OFFSET+0x50>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	701a      	strb	r2, [r3, #0]

	}
}
 800c9a6:	bf00      	nop
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr
 800c9b0:	20013fb0 	.word	0x20013fb0
 800c9b4:	2001405c 	.word	0x2001405c
 800c9b8:	20014024 	.word	0x20014024
 800c9bc:	20014018 	.word	0x20014018
 800c9c0:	20014068 	.word	0x20014068

0800c9c4 <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 800c9c8:	4b05      	ldr	r3, [pc, #20]	; (800c9e0 <STOP_BLOWER_IF_FLOW_SENSE+0x1c>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	609a      	str	r2, [r3, #8]
	PCsimv.Blower_Wait_Time_Milli_Second = 500;
 800c9ce:	4b05      	ldr	r3, [pc, #20]	; (800c9e4 <STOP_BLOWER_IF_FLOW_SENSE+0x20>)
 800c9d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c9d4:	601a      	str	r2, [r3, #0]
}
 800c9d6:	bf00      	nop
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	40007400 	.word	0x40007400
 800c9e4:	20013b98 	.word	0x20013b98

0800c9e8 <Set_Blower_Val>:


static void Set_Blower_Val()
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	af00      	add	r7, sp, #0
	if(PEEP_Maintain_Parameter.PEEP_AVG_VAL   == PC_SIMV.PEEP_Val  )
 800c9ec:	4b07      	ldr	r3, [pc, #28]	; (800ca0c <Set_Blower_Val+0x24>)
 800c9ee:	7c1a      	ldrb	r2, [r3, #16]
 800c9f0:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <Set_Blower_Val+0x28>)
 800c9f2:	785b      	ldrb	r3, [r3, #1]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d107      	bne.n	800ca08 <Set_Blower_Val+0x20>
	{
		Change_DAC_Values(PC_SIMV.PEEP_Val ,Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL);
 800c9f8:	4b05      	ldr	r3, [pc, #20]	; (800ca10 <Set_Blower_Val+0x28>)
 800c9fa:	785b      	ldrb	r3, [r3, #1]
 800c9fc:	4a05      	ldr	r2, [pc, #20]	; (800ca14 <Set_Blower_Val+0x2c>)
 800c9fe:	8a12      	ldrh	r2, [r2, #16]
 800ca00:	4611      	mov	r1, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fc fe3a 	bl	800967c <Change_DAC_Values>
	}
}
 800ca08:	bf00      	nop
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	20014300 	.word	0x20014300
 800ca10:	200142bc 	.word	0x200142bc
 800ca14:	20014030 	.word	0x20014030

0800ca18 <Trigger_Time_Monitor>:



static void Trigger_Time_Monitor()
{
 800ca18:	b480      	push	{r7}
 800ca1a:	af00      	add	r7, sp, #0
	PC_SIMV.CALC_TRIG_VAL 	                 =  (PC_SIMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 800ca1c:	4b11      	ldr	r3, [pc, #68]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	4b11      	ldr	r3, [pc, #68]	; (800ca68 <Trigger_Time_Monitor+0x50>)
 800ca24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	4b0d      	ldr	r3, [pc, #52]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca30:	835a      	strh	r2, [r3, #26]
	if(PC_SIMV.CALC_TRIG_VAL <0)
	{
		PC_SIMV.CALC_TRIG_VAL = (PC_SIMV.CALC_TRIG_VAL * (-1));
	}
	PC_SIMV.TOLERANCE_EWAVE =  PC_SIMV.TRIG_TIME;
 800ca32:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca34:	8b1a      	ldrh	r2, [r3, #24]
 800ca36:	4b0b      	ldr	r3, [pc, #44]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca38:	839a      	strh	r2, [r3, #28]
	if(PC_SIMV.CALC_TRIG_VAL < PC_SIMV.TRIG_TIME )
 800ca3a:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca3c:	8b5a      	ldrh	r2, [r3, #26]
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca40:	8b1b      	ldrh	r3, [r3, #24]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d205      	bcs.n	800ca52 <Trigger_Time_Monitor+0x3a>
	{
		PC_SIMV.TOLERANCE_EWAVE =  (PC_SIMV.TRIG_TIME - 200) ;
 800ca46:	4b07      	ldr	r3, [pc, #28]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca48:	8b1b      	ldrh	r3, [r3, #24]
 800ca4a:	3bc8      	subs	r3, #200	; 0xc8
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	4b05      	ldr	r3, [pc, #20]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca50:	839a      	strh	r2, [r3, #28]
	}

	PC_SIMV.TRIG_WINDOW		                 = PC_SIMV.TOLERANCE_EWAVE;
 800ca52:	4b04      	ldr	r3, [pc, #16]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca54:	8b9a      	ldrh	r2, [r3, #28]
 800ca56:	4b03      	ldr	r3, [pc, #12]	; (800ca64 <Trigger_Time_Monitor+0x4c>)
 800ca58:	83da      	strh	r2, [r3, #30]
}
 800ca5a:	bf00      	nop
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	200142bc 	.word	0x200142bc
 800ca68:	20014300 	.word	0x20014300

0800ca6c <Pc_Simv_Mode_Packet_Data>:
static void Trigger_Time_Monitor();

uint16_t Expiratory_Valve_Open_Time=700;

void Pc_Simv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	PC_SIMV.PIP_Val                          = Receive_Graph_Packet->PIP_PS_Phigh;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	791a      	ldrb	r2, [r3, #4]
 800ca78:	4b64      	ldr	r3, [pc, #400]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800ca7a:	701a      	strb	r2, [r3, #0]
	PC_SIMV.PEEP_Val                         = Receive_Graph_Packet->PEEP_CPAP_Plow;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	795a      	ldrb	r2, [r3, #5]
 800ca80:	4b62      	ldr	r3, [pc, #392]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800ca82:	705a      	strb	r2, [r3, #1]
	PC_SIMV.FIO2_Val                         =  Receive_Graph_Packet->FiO2;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	7a1a      	ldrb	r2, [r3, #8]
 800ca88:	4b60      	ldr	r3, [pc, #384]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800ca8a:	70da      	strb	r2, [r3, #3]


	PC_SIMV.RESPIRATORY_RATE_Val             = Receive_Graph_Packet->RR;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	7a5a      	ldrb	r2, [r3, #9]
 800ca90:	4b5e      	ldr	r3, [pc, #376]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800ca92:	709a      	strb	r2, [r3, #2]
	One_Breathe_time                         = (One_Minite_In_MS / PC_SIMV.RESPIRATORY_RATE_Val);
 800ca94:	4b5d      	ldr	r3, [pc, #372]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800ca96:	789b      	ldrb	r3, [r3, #2]
 800ca98:	461a      	mov	r2, r3
 800ca9a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ca9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800caa2:	60fb      	str	r3, [r7, #12]
	PC_SIMV.INSPIRATION_TIME                 = ( ( Receive_Graph_Packet->T_high) * 100 );
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	7a9b      	ldrb	r3, [r3, #10]
 800caa8:	461a      	mov	r2, r3
 800caaa:	2364      	movs	r3, #100	; 0x64
 800caac:	fb03 f302 	mul.w	r3, r3, r2
 800cab0:	461a      	mov	r2, r3
 800cab2:	4b56      	ldr	r3, [pc, #344]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cab4:	609a      	str	r2, [r3, #8]
	PC_SIMV.EXPIRATION_TIME                  = (One_Breathe_time - PC_SIMV.INSPIRATION_TIME);
 800cab6:	4b55      	ldr	r3, [pc, #340]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	1ad3      	subs	r3, r2, r3
 800cabe:	4a53      	ldr	r2, [pc, #332]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cac0:	60d3      	str	r3, [r2, #12]


	PC_SIMV.Rise_Time                        = Receive_Graph_Packet->Rise_Time;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	7b1a      	ldrb	r2, [r3, #12]
 800cac6:	4b51      	ldr	r3, [pc, #324]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cac8:	749a      	strb	r2, [r3, #18]
	PC_SIMV.RISE_TIME_MS_Val                 = (PC_SIMV.Rise_Time *100);
 800caca:	4b50      	ldr	r3, [pc, #320]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cacc:	7c9b      	ldrb	r3, [r3, #18]
 800cace:	461a      	mov	r2, r3
 800cad0:	2364      	movs	r3, #100	; 0x64
 800cad2:	fb03 f302 	mul.w	r3, r3, r2
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cade:	4b4b      	ldr	r3, [pc, #300]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cae0:	edc3 7a01 	vstr	s15, [r3, #4]




	if(PC_SIMV.INSPIRATION_TIME >600)
 800cae4:	4b49      	ldr	r3, [pc, #292]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800caec:	d90c      	bls.n	800cb08 <Pc_Simv_Mode_Packet_Data+0x9c>
	{
		if(PC_SIMV.RISE_TIME_MS_Val < 600)
 800caee:	4b47      	ldr	r3, [pc, #284]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800caf0:	edd3 7a01 	vldr	s15, [r3, #4]
 800caf4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800cc10 <Pc_Simv_Mode_Packet_Data+0x1a4>
 800caf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb00:	d502      	bpl.n	800cb08 <Pc_Simv_Mode_Packet_Data+0x9c>
			PC_SIMV.RISE_TIME_MS_Val = 600;
 800cb02:	4b42      	ldr	r3, [pc, #264]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb04:	4a43      	ldr	r2, [pc, #268]	; (800cc14 <Pc_Simv_Mode_Packet_Data+0x1a8>)
 800cb06:	605a      	str	r2, [r3, #4]
	}
	PIP_control_Task.PIP_Acheived_Time_Ms    =  (PC_SIMV.RISE_TIME_MS_Val * 2);
 800cb08:	4b40      	ldr	r3, [pc, #256]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb0a:	edd3 7a01 	vldr	s15, [r3, #4]
 800cb0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb16:	ee17 3a90 	vmov	r3, s15
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	4b3e      	ldr	r3, [pc, #248]	; (800cc18 <Pc_Simv_Mode_Packet_Data+0x1ac>)
 800cb1e:	809a      	strh	r2, [r3, #4]

	PC_SIMV.Assist_Control    	             = (0x80 & (Receive_Graph_Packet->Control_Byte))>>7;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	78db      	ldrb	r3, [r3, #3]
 800cb24:	09db      	lsrs	r3, r3, #7
 800cb26:	b2da      	uxtb	r2, r3
 800cb28:	4b38      	ldr	r3, [pc, #224]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb2a:	f883 2020 	strb.w	r2, [r3, #32]


	PC_SIMV.TRIG_TYPE     	                 = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	78db      	ldrb	r3, [r3, #3]
 800cb32:	099b      	lsrs	r3, r3, #6
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	4b33      	ldr	r3, [pc, #204]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb3e:	74da      	strb	r2, [r3, #19]
	PC_SIMV.TRIG_LMT     	                 = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	7c1b      	ldrb	r3, [r3, #16]
 800cb44:	4a35      	ldr	r2, [pc, #212]	; (800cc1c <Pc_Simv_Mode_Packet_Data+0x1b0>)
 800cb46:	fba2 2303 	umull	r2, r3, r2, r3
 800cb4a:	08db      	lsrs	r3, r3, #3
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	ee07 3a90 	vmov	s15, r3
 800cb52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb56:	4b2d      	ldr	r3, [pc, #180]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb58:	edc3 7a05 	vstr	s15, [r3, #20]
	PC_SIMV.TRIG_TIME     	                 = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7bdb      	ldrb	r3, [r3, #15]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	461a      	mov	r2, r3
 800cb64:	0092      	lsls	r2, r2, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	461a      	mov	r2, r3
 800cb6a:	0091      	lsls	r1, r2, #2
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4413      	add	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	4b25      	ldr	r3, [pc, #148]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb78:	831a      	strh	r2, [r3, #24]



	PC_SIMV.CALC_TRIG_VAL 	                 =  (PC_SIMV.EXPIRATION_TIME   - Expiratory_Valve_Open_Time );
 800cb7a:	4b24      	ldr	r3, [pc, #144]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	4b27      	ldr	r3, [pc, #156]	; (800cc20 <Pc_Simv_Mode_Packet_Data+0x1b4>)
 800cb82:	881b      	ldrh	r3, [r3, #0]
 800cb84:	1ad3      	subs	r3, r2, r3
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	4b20      	ldr	r3, [pc, #128]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb8a:	835a      	strh	r2, [r3, #26]
	if(PC_SIMV.CALC_TRIG_VAL <0)
	{
		PC_SIMV.CALC_TRIG_VAL = (PC_SIMV.CALC_TRIG_VAL * (-1));
	}

	PC_SIMV.TOLERANCE_EWAVE =  PC_SIMV.TRIG_TIME;
 800cb8c:	4b1f      	ldr	r3, [pc, #124]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb8e:	8b1a      	ldrh	r2, [r3, #24]
 800cb90:	4b1e      	ldr	r3, [pc, #120]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb92:	839a      	strh	r2, [r3, #28]
	if(PC_SIMV.CALC_TRIG_VAL < PC_SIMV.TRIG_TIME )
 800cb94:	4b1d      	ldr	r3, [pc, #116]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb96:	8b5a      	ldrh	r2, [r3, #26]
 800cb98:	4b1c      	ldr	r3, [pc, #112]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cb9a:	8b1b      	ldrh	r3, [r3, #24]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d205      	bcs.n	800cbac <Pc_Simv_Mode_Packet_Data+0x140>
	{
		PC_SIMV.TOLERANCE_EWAVE =  (PC_SIMV.TRIG_TIME - 200) ;
 800cba0:	4b1a      	ldr	r3, [pc, #104]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cba2:	8b1b      	ldrh	r3, [r3, #24]
 800cba4:	3bc8      	subs	r3, #200	; 0xc8
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	4b18      	ldr	r3, [pc, #96]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cbaa:	839a      	strh	r2, [r3, #28]
	}
	PC_SIMV.TRIG_WINDOW		                 = PC_SIMV.TOLERANCE_EWAVE;
 800cbac:	4b17      	ldr	r3, [pc, #92]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cbae:	8b9a      	ldrh	r2, [r3, #28]
 800cbb0:	4b16      	ldr	r3, [pc, #88]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cbb2:	83da      	strh	r2, [r3, #30]

	if(PC_SIMV.Assist_Control == 1)
 800cbb4:	4b15      	ldr	r3, [pc, #84]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cbb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d103      	bne.n	800cbc6 <Pc_Simv_Mode_Packet_Data+0x15a>
		Assist_Control=ASSIST_ON;
 800cbbe:	4b19      	ldr	r3, [pc, #100]	; (800cc24 <Pc_Simv_Mode_Packet_Data+0x1b8>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	701a      	strb	r2, [r3, #0]
 800cbc4:	e007      	b.n	800cbd6 <Pc_Simv_Mode_Packet_Data+0x16a>
	else if(PC_SIMV.Assist_Control == 0)
 800cbc6:	4b11      	ldr	r3, [pc, #68]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cbc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <Pc_Simv_Mode_Packet_Data+0x16a>
		Assist_Control=ASSIST_OFF;
 800cbd0:	4b14      	ldr	r3, [pc, #80]	; (800cc24 <Pc_Simv_Mode_Packet_Data+0x1b8>)
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	701a      	strb	r2, [r3, #0]
	if(PC_SIMV.TRIG_TYPE == 0)
 800cbd6:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cbd8:	7cdb      	ldrb	r3, [r3, #19]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d103      	bne.n	800cbe6 <Pc_Simv_Mode_Packet_Data+0x17a>
		Trigger_Type = Pressure_Trigger;
 800cbde:	4b12      	ldr	r3, [pc, #72]	; (800cc28 <Pc_Simv_Mode_Packet_Data+0x1bc>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	e006      	b.n	800cbf4 <Pc_Simv_Mode_Packet_Data+0x188>
	else if(PC_SIMV.TRIG_TYPE == 1)
 800cbe6:	4b09      	ldr	r3, [pc, #36]	; (800cc0c <Pc_Simv_Mode_Packet_Data+0x1a0>)
 800cbe8:	7cdb      	ldrb	r3, [r3, #19]
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d102      	bne.n	800cbf4 <Pc_Simv_Mode_Packet_Data+0x188>
		Trigger_Type = Flow_Trigger;
 800cbee:	4b0e      	ldr	r3, [pc, #56]	; (800cc28 <Pc_Simv_Mode_Packet_Data+0x1bc>)
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set                        = OPEN;
 800cbf4:	4b0d      	ldr	r3, [pc, #52]	; (800cc2c <Pc_Simv_Mode_Packet_Data+0x1c0>)
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 800cbfa:	4b0d      	ldr	r3, [pc, #52]	; (800cc30 <Pc_Simv_Mode_Packet_Data+0x1c4>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f012 fc0c 	bl	801f41c <vTaskResume>
}
 800cc04:	bf00      	nop
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	200142bc 	.word	0x200142bc
 800cc10:	44160000 	.word	0x44160000
 800cc14:	44160000 	.word	0x44160000
 800cc18:	20013b04 	.word	0x20013b04
 800cc1c:	cccccccd 	.word	0xcccccccd
 800cc20:	20000008 	.word	0x20000008
 800cc24:	200139e0 	.word	0x200139e0
 800cc28:	2001398c 	.word	0x2001398c
 800cc2c:	20014338 	.word	0x20014338
 800cc30:	2001406c 	.word	0x2001406c

0800cc34 <Pc_Simv_Assist_ON_Task>:



void Pc_Simv_Assist_ON_Task(void *argument)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 800cc3c:	4b14      	ldr	r3, [pc, #80]	; (800cc90 <Pc_Simv_Assist_ON_Task+0x5c>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d00b      	beq.n	800cc5c <Pc_Simv_Assist_ON_Task+0x28>
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	dc1c      	bgt.n	800cc82 <Pc_Simv_Assist_ON_Task+0x4e>
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01c      	beq.n	800cc86 <Pc_Simv_Assist_ON_Task+0x52>
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d118      	bne.n	800cc82 <Pc_Simv_Assist_ON_Task+0x4e>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800cc50:	4b10      	ldr	r3, [pc, #64]	; (800cc94 <Pc_Simv_Assist_ON_Task+0x60>)
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 f84b 	bl	800ccf0 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON>
			break;
 800cc5a:	e015      	b.n	800cc88 <Pc_Simv_Assist_ON_Task+0x54>
			case Run_Expiration_Cycle:
				Pressure_Mode_blower_control.BLOWER_DAC_VAL=0;
 800cc5c:	4b0d      	ldr	r3, [pc, #52]	; (800cc94 <Pc_Simv_Assist_ON_Task+0x60>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	801a      	strh	r2, [r3, #0]
				Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800cc62:	4b0c      	ldr	r3, [pc, #48]	; (800cc94 <Pc_Simv_Assist_ON_Task+0x60>)
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	4a0c      	ldr	r2, [pc, #48]	; (800cc98 <Pc_Simv_Assist_ON_Task+0x64>)
 800cc68:	edd2 7a00 	vldr	s15, [r2]
											   PEEP_Maintain_Parameter.PEEP_Temp,
											   PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800cc6c:	4a0a      	ldr	r2, [pc, #40]	; (800cc98 <Pc_Simv_Assist_ON_Task+0x64>)
 800cc6e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800cc72:	b292      	uxth	r2, r2
 800cc74:	4611      	mov	r1, r2
 800cc76:	eeb0 0a67 	vmov.f32	s0, s15
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 f86c 	bl	800cd58 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON>
			break;
 800cc80:	e002      	b.n	800cc88 <Pc_Simv_Assist_ON_Task+0x54>
			case No_Run_State:
			break;
			default:
			break;
 800cc82:	bf00      	nop
 800cc84:	e000      	b.n	800cc88 <Pc_Simv_Assist_ON_Task+0x54>
			break;
 800cc86:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 800cc88:	2002      	movs	r0, #2
 800cc8a:	f012 facf 	bl	801f22c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 800cc8e:	e7d5      	b.n	800cc3c <Pc_Simv_Assist_ON_Task+0x8>
 800cc90:	20013f7c 	.word	0x20013f7c
 800cc94:	20014030 	.word	0x20014030
 800cc98:	20014300 	.word	0x20014300

0800cc9c <PC_SIMV_Inspiration_Time_Variables_Reset>:
}



void PC_SIMV_Inspiration_Time_Variables_Reset()
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	af00      	add	r7, sp, #0
	if(Assist_Control == ASSIST_ON)
 800cca0:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <PC_SIMV_Inspiration_Time_Variables_Reset+0x24>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d102      	bne.n	800ccae <PC_SIMV_Inspiration_Time_Variables_Reset+0x12>
	{
		PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
 800cca8:	f000 f90c 	bl	800cec4 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>
	}
	else if(Assist_Control == ASSIST_OFF)
	{
		PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset();
	}
}
 800ccac:	e005      	b.n	800ccba <PC_SIMV_Inspiration_Time_Variables_Reset+0x1e>
	else if(Assist_Control == ASSIST_OFF)
 800ccae:	4b04      	ldr	r3, [pc, #16]	; (800ccc0 <PC_SIMV_Inspiration_Time_Variables_Reset+0x24>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d101      	bne.n	800ccba <PC_SIMV_Inspiration_Time_Variables_Reset+0x1e>
		PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset();
 800ccb6:	f7ff fc5f 	bl	800c578 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset>
}
 800ccba:	bf00      	nop
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	200139e0 	.word	0x200139e0

0800ccc4 <PC_SIMV_Expiration_Time_Variables_Reset>:



void PC_SIMV_Expiration_Time_Variables_Reset()
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
	if(Assist_Control == ASSIST_ON)
 800ccc8:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <PC_SIMV_Expiration_Time_Variables_Reset+0x24>)
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d102      	bne.n	800ccd6 <PC_SIMV_Expiration_Time_Variables_Reset+0x12>
	{
		PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
 800ccd0:	f000 f9e0 	bl	800d094 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>
	}
	else if(Assist_Control == ASSIST_OFF)
	{
		PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset();
	}
}
 800ccd4:	e005      	b.n	800cce2 <PC_SIMV_Expiration_Time_Variables_Reset+0x1e>
	else if(Assist_Control == ASSIST_OFF)
 800ccd6:	4b04      	ldr	r3, [pc, #16]	; (800cce8 <PC_SIMV_Expiration_Time_Variables_Reset+0x24>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d101      	bne.n	800cce2 <PC_SIMV_Expiration_Time_Variables_Reset+0x1e>
		PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset();
 800ccde:	f7ff fc67 	bl	800c5b0 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset>
}
 800cce2:	bf00      	nop
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	200139e0 	.word	0x200139e0
 800ccec:	00000000 	.word	0x00000000

0800ccf0 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON>:

static void Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(uint16_t Blower_Signal)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	80fb      	strh	r3, [r7, #6]
	Pressure_Mode_blower_control.Blower_Signal_Voltage = ( (Blower_Signal*3.3) /4095);
 800ccfa:	88fb      	ldrh	r3, [r7, #6]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7f3 fbb9 	bl	8000474 <__aeabi_i2d>
 800cd02:	a311      	add	r3, pc, #68	; (adr r3, 800cd48 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x58>)
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	f7f3 fc1e 	bl	8000548 <__aeabi_dmul>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	4610      	mov	r0, r2
 800cd12:	4619      	mov	r1, r3
 800cd14:	a30e      	add	r3, pc, #56	; (adr r3, 800cd50 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x60>)
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	f7f3 fd3f 	bl	800079c <__aeabi_ddiv>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	460b      	mov	r3, r1
 800cd22:	4610      	mov	r0, r2
 800cd24:	4619      	mov	r1, r3
 800cd26:	f7f3 fef1 	bl	8000b0c <__aeabi_d2f>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	4a04      	ldr	r2, [pc, #16]	; (800cd40 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x50>)
 800cd2e:	60d3      	str	r3, [r2, #12]
	Blower_Signal(Blower_Signal);
 800cd30:	4a04      	ldr	r2, [pc, #16]	; (800cd44 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x54>)
 800cd32:	88fb      	ldrh	r3, [r7, #6]
 800cd34:	6093      	str	r3, [r2, #8]
}
 800cd36:	bf00      	nop
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20014030 	.word	0x20014030
 800cd44:	40007400 	.word	0x40007400
 800cd48:	66666666 	.word	0x66666666
 800cd4c:	400a6666 	.word	0x400a6666
 800cd50:	00000000 	.word	0x00000000
 800cd54:	40affe00 	.word	0x40affe00

0800cd58 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON>:

static void Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	4603      	mov	r3, r0
 800cd60:	ed87 0a00 	vstr	s0, [r7]
 800cd64:	460a      	mov	r2, r1
 800cd66:	80fb      	strh	r3, [r7, #6]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	80bb      	strh	r3, [r7, #4]
	Blower_Signal( Blower_Signal);
 800cd6c:	4a27      	ldr	r2, [pc, #156]	; (800ce0c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb4>)
 800cd6e:	88fb      	ldrh	r3, [r7, #6]
 800cd70:	6093      	str	r3, [r2, #8]
		if(Peep_Status==PEEP_ACHEIVED)
 800cd72:	4b27      	ldr	r3, [pc, #156]	; (800ce10 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb8>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d113      	bne.n	800cda2 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x4a>
		{
				if(Pressure_sensor.Pressure_Val < PEEP)
 800cd7a:	4b26      	ldr	r3, [pc, #152]	; (800ce14 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xbc>)
 800cd7c:	789b      	ldrb	r3, [r3, #2]
 800cd7e:	ee07 3a90 	vmov	s15, r3
 800cd82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd86:	ed97 7a00 	vldr	s14, [r7]
 800cd8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd92:	dd03      	ble.n	800cd9c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x44>
				{
					Blower_Signal( Blower_Signal);
 800cd94:	4a1d      	ldr	r2, [pc, #116]	; (800ce0c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb4>)
 800cd96:	88fb      	ldrh	r3, [r7, #6]
 800cd98:	6093      	str	r3, [r2, #8]
 800cd9a:	e002      	b.n	800cda2 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x4a>
				}
				else
				{
					Blower_Signal( Blower_Signal);
 800cd9c:	4a1b      	ldr	r2, [pc, #108]	; (800ce0c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb4>)
 800cd9e:	88fb      	ldrh	r3, [r7, #6]
 800cda0:	6093      	str	r3, [r2, #8]
				}
		 }
		if(Pressure_sensor.Pressure_Val<= PEEP)
 800cda2:	4b1c      	ldr	r3, [pc, #112]	; (800ce14 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xbc>)
 800cda4:	789b      	ldrb	r3, [r3, #2]
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdae:	ed97 7a00 	vldr	s14, [r7]
 800cdb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdba:	db14      	blt.n	800cde6 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x8e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 800cdbc:	4b16      	ldr	r3, [pc, #88]	; (800ce18 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc0>)
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d106      	bne.n	800cdd2 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x7a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 800cdc4:	4b14      	ldr	r3, [pc, #80]	; (800ce18 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc0>)
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Expiratory_Valve_Open_Time);
 800cdca:	88bb      	ldrh	r3, [r7, #4]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f012 fa2d 	bl	801f22c <vTaskDelay>
			}
			Peep_Status=PEEP_ACHEIVED;
 800cdd2:	4b0f      	ldr	r3, [pc, #60]	; (800ce10 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb8>)
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 800cdd8:	4b10      	ldr	r3, [pc, #64]	; (800ce1c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc4>)
 800cdda:	695b      	ldr	r3, [r3, #20]
 800cddc:	4a0f      	ldr	r2, [pc, #60]	; (800ce1c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc4>)
 800cdde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cde2:	6153      	str	r3, [r2, #20]
 800cde4:	e009      	b.n	800cdfa <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xa2>
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 800cde6:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb8>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d105      	bne.n	800cdfa <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xa2>
		{
			ExpValve_OPEN();
 800cdee:	4b0b      	ldr	r3, [pc, #44]	; (800ce1c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc4>)
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	4a0a      	ldr	r2, [pc, #40]	; (800ce1c <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc4>)
 800cdf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cdf8:	6153      	str	r3, [r2, #20]
		}

		CHECK_TRIGGER_ASSIST_ON(PC_SIMV.TRIG_WINDOW);
 800cdfa:	4b09      	ldr	r3, [pc, #36]	; (800ce20 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc8>)
 800cdfc:	8bdb      	ldrh	r3, [r3, #30]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 f810 	bl	800ce24 <CHECK_TRIGGER_ASSIST_ON>
}
 800ce04:	bf00      	nop
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	40007400 	.word	0x40007400
 800ce10:	200140f5 	.word	0x200140f5
 800ce14:	2001405c 	.word	0x2001405c
 800ce18:	200140f4 	.word	0x200140f4
 800ce1c:	40020400 	.word	0x40020400
 800ce20:	200142bc 	.word	0x200142bc

0800ce24 <CHECK_TRIGGER_ASSIST_ON>:


static void CHECK_TRIGGER_ASSIST_ON(uint16_t Trigger_Check_Time)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 800ce2e:	4b0f      	ldr	r3, [pc, #60]	; (800ce6c <CHECK_TRIGGER_ASSIST_ON+0x48>)
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	88fb      	ldrh	r3, [r7, #6]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	dc11      	bgt.n	800ce5c <CHECK_TRIGGER_ASSIST_ON+0x38>
 800ce38:	4b0c      	ldr	r3, [pc, #48]	; (800ce6c <CHECK_TRIGGER_ASSIST_ON+0x48>)
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00d      	beq.n	800ce5c <CHECK_TRIGGER_ASSIST_ON+0x38>
	{
		if (Trigger_Type == Pressure_Trigger)
 800ce40:	4b0b      	ldr	r3, [pc, #44]	; (800ce70 <CHECK_TRIGGER_ASSIST_ON+0x4c>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d102      	bne.n	800ce4e <CHECK_TRIGGER_ASSIST_ON+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 800ce48:	f000 f990 	bl	800d16c <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800ce4c:	e009      	b.n	800ce62 <CHECK_TRIGGER_ASSIST_ON+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 800ce4e:	4b08      	ldr	r3, [pc, #32]	; (800ce70 <CHECK_TRIGGER_ASSIST_ON+0x4c>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d105      	bne.n	800ce62 <CHECK_TRIGGER_ASSIST_ON+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 800ce56:	f000 f9b1 	bl	800d1bc <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800ce5a:	e002      	b.n	800ce62 <CHECK_TRIGGER_ASSIST_ON+0x3e>
		}
	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 800ce5c:	f000 f9dc 	bl	800d218 <CHECK_TRIGGER_OFFSET>
	}
}
 800ce60:	e000      	b.n	800ce64 <CHECK_TRIGGER_ASSIST_ON+0x40>
		if (Trigger_Type == Pressure_Trigger)
 800ce62:	bf00      	nop
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	200141fc 	.word	0x200141fc
 800ce70:	2001398c 	.word	0x2001398c

0800ce74 <Switch_TASK_Inspiration_CYCLE>:



static void Switch_TASK_Inspiration_CYCLE()
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af02      	add	r7, sp, #8
	vTaskDelete(One_Time_Handler);
 800ce7a:	4b0d      	ldr	r3, [pc, #52]	; (800ceb0 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f012 f944 	bl	801f10c <vTaskDelete>
	TIME_Base_parameter._INSPIRATION_TIME = 0;
 800ce84:	4b0b      	ldr	r3, [pc, #44]	; (800ceb4 <Switch_TASK_Inspiration_CYCLE+0x40>)
 800ce86:	2200      	movs	r2, #0
 800ce88:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter._EXPIRATION_TIME  = 0;
 800ce8a:	4b0a      	ldr	r3, [pc, #40]	; (800ceb4 <Switch_TASK_Inspiration_CYCLE+0x40>)
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	605a      	str	r2, [r3, #4]



	Next_Half_Breath_Cycle                = Generate_Inspiration_Cycle;
 800ce90:	4b09      	ldr	r3, [pc, #36]	; (800ceb8 <Switch_TASK_Inspiration_CYCLE+0x44>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	701a      	strb	r2, [r3, #0]
	xTaskCreate(One_Time_Task,"One-Time-Task", 128, NULL,3, &One_Time_Handler);
 800ce96:	4b06      	ldr	r3, [pc, #24]	; (800ceb0 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 800ce98:	9301      	str	r3, [sp, #4]
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	2300      	movs	r3, #0
 800cea0:	2280      	movs	r2, #128	; 0x80
 800cea2:	4906      	ldr	r1, [pc, #24]	; (800cebc <Switch_TASK_Inspiration_CYCLE+0x48>)
 800cea4:	4806      	ldr	r0, [pc, #24]	; (800cec0 <Switch_TASK_Inspiration_CYCLE+0x4c>)
 800cea6:	f011 fffa 	bl	801ee9e <xTaskCreate>
}
 800ceaa:	bf00      	nop
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	20014094 	.word	0x20014094
 800ceb4:	200141fc 	.word	0x200141fc
 800ceb8:	20013d20 	.word	0x20013d20
 800cebc:	08022d18 	.word	0x08022d18
 800cec0:	0800f869 	.word	0x0800f869

0800cec4 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>:


void PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset()
{
 800cec4:	b590      	push	{r4, r7, lr}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af02      	add	r7, sp, #8
	    Breath_Count         = Count_The_Breath;
 800ceca:	4b5a      	ldr	r3, [pc, #360]	; (800d034 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x170>)
 800cecc:	2201      	movs	r2, #1
 800cece:	701a      	strb	r2, [r3, #0]
	    Smooth_Ramp_Pressure();
 800ced0:	f000 f9e4 	bl	800d29c <Smooth_Ramp_Pressure>
	    PIP_Not_Acheieved();
 800ced4:	f000 fd0a 	bl	800d8ec <PIP_Not_Acheieved>
		ExpValve_CLOSE();
 800ced8:	4b57      	ldr	r3, [pc, #348]	; (800d038 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x174>)
 800ceda:	695b      	ldr	r3, [r3, #20]
 800cedc:	4a56      	ldr	r2, [pc, #344]	; (800d038 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x174>)
 800cede:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cee2:	6153      	str	r3, [r2, #20]
		PIP_AVERAGE();
 800cee4:	f7fc f89a 	bl	800901c <PIP_AVERAGE>
		PEEP_AVERAGE();
 800cee8:	f7fc f8be 	bl	8009068 <PEEP_AVERAGE>
		Set_Blower_Val();
 800ceec:	f000 f9be 	bl	800d26c <Set_Blower_Val>
		O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 800cef0:	4b52      	ldr	r3, [pc, #328]	; (800d03c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x178>)
 800cef2:	78db      	ldrb	r3, [r3, #3]
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7fe fe07 	bl	800bb08 <O2_DAC_Control>
		Check_Alert();
 800cefa:	f7f4 f8fd 	bl	80010f8 <Check_Alert>
		Alert_Inspiration_Time_Parameter();
 800cefe:	f7f4 f9a5 	bl	800124c <Alert_Inspiration_Time_Parameter>
		LED_Alert();
 800cf02:	f7f4 fd55 	bl	80019b0 <LED_Alert>
		Alert_Status = NO_ALERT;
 800cf06:	4b4e      	ldr	r3, [pc, #312]	; (800d040 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	701a      	strb	r2, [r3, #0]
		Sampled_Parameter_Inspiration_time();
 800cf0c:	f003 fcec 	bl	80108e8 <Sampled_Parameter_Inspiration_time>
		if( (PC_SIMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 800cf10:	4b4c      	ldr	r3, [pc, #304]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cf12:	785a      	ldrb	r2, [r3, #1]
 800cf14:	4b4c      	ldr	r3, [pc, #304]	; (800d048 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 800cf16:	7c1b      	ldrb	r3, [r3, #16]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d013      	beq.n	800cf44 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x80>
		{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time        = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 800cf1c:	4b4a      	ldr	r3, [pc, #296]	; (800d048 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 800cf1e:	7c18      	ldrb	r0, [r3, #16]
 800cf20:	4b48      	ldr	r3, [pc, #288]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cf22:	7899      	ldrb	r1, [r3, #2]
 800cf24:	4b47      	ldr	r3, [pc, #284]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cf26:	689a      	ldr	r2, [r3, #8]
 800cf28:	4b46      	ldr	r3, [pc, #280]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cf2a:	785c      	ldrb	r4, [r3, #1]
																																 PC_SIMV.RESPIRATORY_RATE_Val,
																																 PC_SIMV.INSPIRATION_TIME,
																																 PC_SIMV.PEEP_Val,
																												                 PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800cf2c:	4b46      	ldr	r3, [pc, #280]	; (800d048 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 800cf2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time        = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	4623      	mov	r3, r4
 800cf38:	f7f8 fe6c 	bl	8005c14 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	b21a      	sxth	r2, r3
 800cf40:	4b41      	ldr	r3, [pc, #260]	; (800d048 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 800cf42:	809a      	strh	r2, [r3, #4]

		}
		INCREASE_EACH_DAC_SET_CONST(Common_Mode_Parameter._PIP_Val,PC_SIMV.RISE_TIME_MS_Val);
 800cf44:	4b3d      	ldr	r3, [pc, #244]	; (800d03c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x178>)
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	4a3e      	ldr	r2, [pc, #248]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cf4a:	edd2 7a01 	vldr	s15, [r2, #4]
 800cf4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf52:	ee17 2a90 	vmov	r2, s15
 800cf56:	b292      	uxth	r2, r2
 800cf58:	4611      	mov	r1, r2
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 fd80 	bl	800da60 <INCREASE_EACH_DAC_SET_CONST>
		BLOWER_ENDING_DAC_SIGNAL_TUNE(PC_SIMV.PIP_Val,
 800cf60:	4b38      	ldr	r3, [pc, #224]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cf62:	7818      	ldrb	r0, [r3, #0]
 800cf64:	4b37      	ldr	r3, [pc, #220]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cf66:	7899      	ldrb	r1, [r3, #2]
 800cf68:	4b36      	ldr	r3, [pc, #216]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cf6a:	7c5a      	ldrb	r2, [r3, #17]
 800cf6c:	4b35      	ldr	r3, [pc, #212]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cf6e:	7c9b      	ldrb	r3, [r3, #18]
 800cf70:	f000 ff6a 	bl	800de48 <BLOWER_ENDING_DAC_SIGNAL_TUNE>
									  PC_SIMV.RESPIRATORY_RATE_Val,
									  PC_SIMV.Expiration_Time_Ratio,
									  PC_SIMV.Rise_Time);

		if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 800cf74:	4b35      	ldr	r3, [pc, #212]	; (800d04c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x188>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d106      	bne.n	800cf8a <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0xc6>
		{
			BREATH_STATE                                      = PATIENT_TRIGGER_INSPIRATION;
 800cf7c:	4b34      	ldr	r3, [pc, #208]	; (800d050 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x18c>)
 800cf7e:	2202      	movs	r2, #2
 800cf80:	701a      	strb	r2, [r3, #0]
			LED_STATUS                                        = EXPIRATION_LED;
 800cf82:	4b34      	ldr	r3, [pc, #208]	; (800d054 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x190>)
 800cf84:	2202      	movs	r2, #2
 800cf86:	701a      	strb	r2, [r3, #0]
 800cf88:	e002      	b.n	800cf90 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0xcc>
		}
		else
		{
			BREATH_STATE                                       = INSPIRATION_CYCLE;
 800cf8a:	4b31      	ldr	r3, [pc, #196]	; (800d050 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x18c>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]
		}
		Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 800cf90:	4b31      	ldr	r3, [pc, #196]	; (800d058 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x194>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			                   = OPENED;
 800cf96:	4b31      	ldr	r3, [pc, #196]	; (800d05c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x198>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	701a      	strb	r2, [r3, #0]
		PIP_Status                    				               = PIP_NOT_ACHEIVED;
 800cf9c:	4b30      	ldr	r3, [pc, #192]	; (800d060 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x19c>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	701a      	strb	r2, [r3, #0]
		Set_PIP_Status                                             = SET_PIP_VALUE_NOT_ACHEIVED;
 800cfa2:	4b30      	ldr	r3, [pc, #192]	; (800d064 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a0>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	701a      	strb	r2, [r3, #0]
		Read_Time_vs_Pressure                                      = READ_TIME_OPEN;
 800cfa8:	4b2f      	ldr	r3, [pc, #188]	; (800d068 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a4>)
 800cfaa:	2200      	movs	r2, #0
 800cfac:	701a      	strb	r2, [r3, #0]
		PIP_control_Task.PIP_Control_Event_Occured                 = RESET;
 800cfae:	4b2f      	ldr	r3, [pc, #188]	; (800d06c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	805a      	strh	r2, [r3, #2]
		PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 800cfb4:	4b2e      	ldr	r3, [pc, #184]	; (800d070 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1ac>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_DAC_VAL                = DAC_VAL(PC_SIMV.PEEP_Val );
 800cfba:	4b22      	ldr	r3, [pc, #136]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cfbc:	785b      	ldrb	r3, [r3, #1]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fc f99e 	bl	8009300 <DAC_VAL>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	4b2a      	ldr	r3, [pc, #168]	; (800d074 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b0>)
 800cfca:	801a      	strh	r2, [r3, #0]
		Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL           = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800cfcc:	4b29      	ldr	r3, [pc, #164]	; (800d074 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b0>)
 800cfce:	881a      	ldrh	r2, [r3, #0]
 800cfd0:	4b28      	ldr	r3, [pc, #160]	; (800d074 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b0>)
 800cfd2:	805a      	strh	r2, [r3, #2]
		TIME_Base_parameter._INSPIRATION_TIME                      = PC_SIMV.INSPIRATION_TIME;
 800cfd4:	4b1b      	ldr	r3, [pc, #108]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	461a      	mov	r2, r3
 800cfda:	4b27      	ldr	r3, [pc, #156]	; (800d078 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b4>)
 800cfdc:	601a      	str	r2, [r3, #0]


		Led_Delay                                                  = (PC_SIMV.RISE_TIME_MS_Val  /46);
 800cfde:	4b19      	ldr	r3, [pc, #100]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800cfe0:	ed93 7a01 	vldr	s14, [r3, #4]
 800cfe4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800d07c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>
 800cfe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cfec:	4b24      	ldr	r3, [pc, #144]	; (800d080 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1bc>)
 800cfee:	edc3 7a00 	vstr	s15, [r3]
		LED_ITER                                                   = 1;
 800cff2:	4b24      	ldr	r3, [pc, #144]	; (800d084 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c0>)
 800cff4:	2201      	movs	r2, #1
 800cff6:	701a      	strb	r2, [r3, #0]

		TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 800cff8:	4b1f      	ldr	r3, [pc, #124]	; (800d078 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b4>)
 800cffa:	2200      	movs	r2, #0
 800cffc:	609a      	str	r2, [r3, #8]
		PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = PIP_control_Task.Early_Acheived_Ramp_Time_Percentage;
 800cffe:	4b1b      	ldr	r3, [pc, #108]	; (800d06c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 800d000:	7a1a      	ldrb	r2, [r3, #8]
 800d002:	4b1a      	ldr	r3, [pc, #104]	; (800d06c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 800d004:	725a      	strb	r2, [r3, #9]
		vol.Volume                                                 = RESET;
 800d006:	4b20      	ldr	r3, [pc, #128]	; (800d088 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c4>)
 800d008:	f04f 0200 	mov.w	r2, #0
 800d00c:	601a      	str	r2, [r3, #0]
		vol.Volume_max                                             = RESET;
 800d00e:	4b1e      	ldr	r3, [pc, #120]	; (800d088 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c4>)
 800d010:	2200      	movs	r2, #0
 800d012:	609a      	str	r2, [r3, #8]
		Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 800d014:	4b1d      	ldr	r3, [pc, #116]	; (800d08c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c8>)
 800d016:	2201      	movs	r2, #1
 800d018:	701a      	strb	r2, [r3, #0]
		Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 800d01a:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1cc>)
 800d01c:	2201      	movs	r2, #1
 800d01e:	701a      	strb	r2, [r3, #0]
		vTaskDelay(PC_SIMV.INSPIRATION_TIME);
 800d020:	4b08      	ldr	r3, [pc, #32]	; (800d044 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	4618      	mov	r0, r3
 800d026:	f012 f901 	bl	801f22c <vTaskDelay>
}
 800d02a:	bf00      	nop
 800d02c:	3704      	adds	r7, #4
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd90      	pop	{r4, r7, pc}
 800d032:	bf00      	nop
 800d034:	200139a6 	.word	0x200139a6
 800d038:	40020400 	.word	0x40020400
 800d03c:	20013ba4 	.word	0x20013ba4
 800d040:	20013f88 	.word	0x20013f88
 800d044:	200142bc 	.word	0x200142bc
 800d048:	20014300 	.word	0x20014300
 800d04c:	20013ca9 	.word	0x20013ca9
 800d050:	200140fd 	.word	0x200140fd
 800d054:	20013aed 	.word	0x20013aed
 800d058:	200140f5 	.word	0x200140f5
 800d05c:	200140f4 	.word	0x200140f4
 800d060:	200140c2 	.word	0x200140c2
 800d064:	200141f8 	.word	0x200141f8
 800d068:	20014371 	.word	0x20014371
 800d06c:	20013b04 	.word	0x20013b04
 800d070:	20013b70 	.word	0x20013b70
 800d074:	20014030 	.word	0x20014030
 800d078:	200141fc 	.word	0x200141fc
 800d07c:	42380000 	.word	0x42380000
 800d080:	20014078 	.word	0x20014078
 800d084:	20013f3c 	.word	0x20013f3c
 800d088:	200140c8 	.word	0x200140c8
 800d08c:	20013d20 	.word	0x20013d20
 800d090:	20013f7c 	.word	0x20013f7c

0800d094 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>:


void PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset()
{
 800d094:	b580      	push	{r7, lr}
 800d096:	af00      	add	r7, sp, #0
		if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 800d098:	4b28      	ldr	r3, [pc, #160]	; (800d13c <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xa8>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d106      	bne.n	800d0ae <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x1a>
		{
			BREATH_STATE                                      = PATIENT_TRIGGER_EXPIRATION;
 800d0a0:	4b27      	ldr	r3, [pc, #156]	; (800d140 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xac>)
 800d0a2:	2203      	movs	r2, #3
 800d0a4:	701a      	strb	r2, [r3, #0]
			LED_STATUS                                        = Idle_LED;
 800d0a6:	4b27      	ldr	r3, [pc, #156]	; (800d144 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xb0>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	701a      	strb	r2, [r3, #0]
 800d0ac:	e002      	b.n	800d0b4 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x20>
		}
		else
		{
			BREATH_STATE                                       = EXPIRATION_CYCLE;
 800d0ae:	4b24      	ldr	r3, [pc, #144]	; (800d140 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xac>)
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	701a      	strb	r2, [r3, #0]
		}

		PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 800d0b4:	4b24      	ldr	r3, [pc, #144]	; (800d148 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xb4>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	615a      	str	r2, [r3, #20]
		PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 800d0ba:	4b23      	ldr	r3, [pc, #140]	; (800d148 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xb4>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	619a      	str	r2, [r3, #24]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 800d0c0:	4b21      	ldr	r3, [pc, #132]	; (800d148 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xb4>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 800d0c6:	4b20      	ldr	r3, [pc, #128]	; (800d148 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xb4>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	60da      	str	r2, [r3, #12]
	    Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 800d0cc:	4b1b      	ldr	r3, [pc, #108]	; (800d13c <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xa8>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	701a      	strb	r2, [r3, #0]
	    Trigger_Time_Monitor();
 800d0d2:	f000 f921 	bl	800d318 <Trigger_Time_Monitor>
	    Adjust_Servo_And_Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 800d0d6:	4b1d      	ldr	r3, [pc, #116]	; (800d14c <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xb8>)
 800d0d8:	78db      	ldrb	r3, [r3, #3]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fe fb4e 	bl	800b77c <Adjust_Servo_And_Calculate_O2>
		Alert_Expiration_Time_Parameter();
 800d0e0:	f7f4 f924 	bl	800132c <Alert_Expiration_Time_Parameter>
		TIME_Base_parameter._EXPIRATION_TIME                = PC_SIMV.EXPIRATION_TIME;
 800d0e4:	4b1a      	ldr	r3, [pc, #104]	; (800d150 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xbc>)
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	4b1a      	ldr	r3, [pc, #104]	; (800d154 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xc0>)
 800d0ec:	605a      	str	r2, [r3, #4]

		Led_Delay                                           = ( (PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time + 500)  /46);
 800d0ee:	4b16      	ldr	r3, [pc, #88]	; (800d148 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xb4>)
 800d0f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d0f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d0f8:	4a17      	ldr	r2, [pc, #92]	; (800d158 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xc4>)
 800d0fa:	fb82 1203 	smull	r1, r2, r2, r3
 800d0fe:	441a      	add	r2, r3
 800d100:	1152      	asrs	r2, r2, #5
 800d102:	17db      	asrs	r3, r3, #31
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	ee07 3a90 	vmov	s15, r3
 800d10a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d10e:	4b13      	ldr	r3, [pc, #76]	; (800d15c <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xc8>)
 800d110:	edc3 7a00 	vstr	s15, [r3]
		LED_ITER                                            = 45;
 800d114:	4b12      	ldr	r3, [pc, #72]	; (800d160 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xcc>)
 800d116:	222d      	movs	r2, #45	; 0x2d
 800d118:	701a      	strb	r2, [r3, #0]

		TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 800d11a:	4b0e      	ldr	r3, [pc, #56]	; (800d154 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xc0>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 800d120:	4b10      	ldr	r3, [pc, #64]	; (800d164 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd0>)
 800d122:	2200      	movs	r2, #0
 800d124:	701a      	strb	r2, [r3, #0]
		Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 800d126:	4b10      	ldr	r3, [pc, #64]	; (800d168 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd4>)
 800d128:	2202      	movs	r2, #2
 800d12a:	701a      	strb	r2, [r3, #0]
		vTaskDelay(PC_SIMV.EXPIRATION_TIME);
 800d12c:	4b08      	ldr	r3, [pc, #32]	; (800d150 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xbc>)
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	4618      	mov	r0, r3
 800d132:	f012 f87b 	bl	801f22c <vTaskDelay>
}
 800d136:	bf00      	nop
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20013ca9 	.word	0x20013ca9
 800d140:	200140fd 	.word	0x200140fd
 800d144:	20013aed 	.word	0x20013aed
 800d148:	20014300 	.word	0x20014300
 800d14c:	20013ba4 	.word	0x20013ba4
 800d150:	200142bc 	.word	0x200142bc
 800d154:	200141fc 	.word	0x200141fc
 800d158:	b21642c9 	.word	0xb21642c9
 800d15c:	20014078 	.word	0x20014078
 800d160:	20013f3c 	.word	0x20013f3c
 800d164:	20013d20 	.word	0x20013d20
 800d168:	20013f7c 	.word	0x20013f7c

0800d16c <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	af00      	add	r7, sp, #0
	if (( Pressure_sensor.Pressure_Val < (Pressure_Trigger_Offset - PC_SIMV.TRIG_LMT )))
 800d170:	4b0e      	ldr	r3, [pc, #56]	; (800d1ac <CHECK_PRESSURE_TRIGGER+0x40>)
 800d172:	789b      	ldrb	r3, [r3, #2]
 800d174:	ee07 3a90 	vmov	s15, r3
 800d178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d17c:	4b0c      	ldr	r3, [pc, #48]	; (800d1b0 <CHECK_PRESSURE_TRIGGER+0x44>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	ee07 3a90 	vmov	s15, r3
 800d184:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d188:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <CHECK_PRESSURE_TRIGGER+0x48>)
 800d18a:	edd3 7a05 	vldr	s15, [r3, #20]
 800d18e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19a:	d400      	bmi.n	800d19e <CHECK_PRESSURE_TRIGGER+0x32>
	{
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 800d19c:	e004      	b.n	800d1a8 <CHECK_PRESSURE_TRIGGER+0x3c>
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
 800d19e:	4b06      	ldr	r3, [pc, #24]	; (800d1b8 <CHECK_PRESSURE_TRIGGER+0x4c>)
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 800d1a4:	f7ff fe66 	bl	800ce74 <Switch_TASK_Inspiration_CYCLE>
}
 800d1a8:	bf00      	nop
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	2001405c 	.word	0x2001405c
 800d1b0:	20014024 	.word	0x20014024
 800d1b4:	200142bc 	.word	0x200142bc
 800d1b8:	20013ca9 	.word	0x20013ca9

0800d1bc <CHECK_FLOW_TRIGGER>:


static void CHECK_FLOW_TRIGGER()
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+PC_SIMV.TRIG_LMT )))
 800d1c0:	4b10      	ldr	r3, [pc, #64]	; (800d204 <CHECK_FLOW_TRIGGER+0x48>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	ee07 3a90 	vmov	s15, r3
 800d1c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d1cc:	4b0e      	ldr	r3, [pc, #56]	; (800d208 <CHECK_FLOW_TRIGGER+0x4c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	ee07 3a90 	vmov	s15, r3
 800d1d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d1d8:	4b0c      	ldr	r3, [pc, #48]	; (800d20c <CHECK_FLOW_TRIGGER+0x50>)
 800d1da:	edd3 7a05 	vldr	s15, [r3, #20]
 800d1de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ea:	dc00      	bgt.n	800d1ee <CHECK_FLOW_TRIGGER+0x32>
	{
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 800d1ec:	e008      	b.n	800d200 <CHECK_FLOW_TRIGGER+0x44>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
 800d1ee:	4b05      	ldr	r3, [pc, #20]	; (800d204 <CHECK_FLOW_TRIGGER+0x48>)
 800d1f0:	781a      	ldrb	r2, [r3, #0]
 800d1f2:	4b07      	ldr	r3, [pc, #28]	; (800d210 <CHECK_FLOW_TRIGGER+0x54>)
 800d1f4:	701a      	strb	r2, [r3, #0]
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
 800d1f6:	4b07      	ldr	r3, [pc, #28]	; (800d214 <CHECK_FLOW_TRIGGER+0x58>)
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 800d1fc:	f7ff fe3a 	bl	800ce74 <Switch_TASK_Inspiration_CYCLE>
}
 800d200:	bf00      	nop
 800d202:	bd80      	pop	{r7, pc}
 800d204:	20014068 	.word	0x20014068
 800d208:	20014018 	.word	0x20014018
 800d20c:	200142bc 	.word	0x200142bc
 800d210:	20014240 	.word	0x20014240
 800d214:	20013ca9 	.word	0x20013ca9

0800d218 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 800d218:	b480      	push	{r7}
 800d21a:	af00      	add	r7, sp, #0
	if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 800d21c:	4b0e      	ldr	r3, [pc, #56]	; (800d258 <CHECK_TRIGGER_OFFSET+0x40>)
 800d21e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d220:	2b00      	cmp	r3, #0
 800d222:	d008      	beq.n	800d236 <CHECK_TRIGGER_OFFSET+0x1e>
 800d224:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <CHECK_TRIGGER_OFFSET+0x40>)
 800d226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d228:	f113 0f08 	cmn.w	r3, #8
 800d22c:	db0f      	blt.n	800d24e <CHECK_TRIGGER_OFFSET+0x36>
 800d22e:	4b0a      	ldr	r3, [pc, #40]	; (800d258 <CHECK_TRIGGER_OFFSET+0x40>)
 800d230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d232:	2b00      	cmp	r3, #0
 800d234:	da0b      	bge.n	800d24e <CHECK_TRIGGER_OFFSET+0x36>
	{
		Pressure_Trigger_Offset  =  Pressure_sensor.Pressure_Val;
 800d236:	4b09      	ldr	r3, [pc, #36]	; (800d25c <CHECK_TRIGGER_OFFSET+0x44>)
 800d238:	789b      	ldrb	r3, [r3, #2]
 800d23a:	461a      	mov	r2, r3
 800d23c:	4b08      	ldr	r3, [pc, #32]	; (800d260 <CHECK_TRIGGER_OFFSET+0x48>)
 800d23e:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  Flow_Sensor_cal._Flow_Val;
 800d240:	4b05      	ldr	r3, [pc, #20]	; (800d258 <CHECK_TRIGGER_OFFSET+0x40>)
 800d242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d244:	4a07      	ldr	r2, [pc, #28]	; (800d264 <CHECK_TRIGGER_OFFSET+0x4c>)
 800d246:	6013      	str	r3, [r2, #0]
		FLOW_TRIGGER             =  0;
 800d248:	4b07      	ldr	r3, [pc, #28]	; (800d268 <CHECK_TRIGGER_OFFSET+0x50>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	701a      	strb	r2, [r3, #0]
	}
}
 800d24e:	bf00      	nop
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr
 800d258:	20013fb0 	.word	0x20013fb0
 800d25c:	2001405c 	.word	0x2001405c
 800d260:	20014024 	.word	0x20014024
 800d264:	20014018 	.word	0x20014018
 800d268:	20014068 	.word	0x20014068

0800d26c <Set_Blower_Val>:



static void Set_Blower_Val()
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	af00      	add	r7, sp, #0
	if(PIP_Average_Parameter.PIP_AVG_VAL  == PC_SIMV.PIP_Val  )
 800d270:	4b07      	ldr	r3, [pc, #28]	; (800d290 <Set_Blower_Val+0x24>)
 800d272:	7b1a      	ldrb	r2, [r3, #12]
 800d274:	4b07      	ldr	r3, [pc, #28]	; (800d294 <Set_Blower_Val+0x28>)
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d107      	bne.n	800d28c <Set_Blower_Val+0x20>
	{
		Change_DAC_Values(PC_SIMV.PIP_Val ,Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL);
 800d27c:	4b05      	ldr	r3, [pc, #20]	; (800d294 <Set_Blower_Val+0x28>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	4a05      	ldr	r2, [pc, #20]	; (800d298 <Set_Blower_Val+0x2c>)
 800d282:	8912      	ldrh	r2, [r2, #8]
 800d284:	4611      	mov	r1, r2
 800d286:	4618      	mov	r0, r3
 800d288:	f7fc f9f8 	bl	800967c <Change_DAC_Values>
	}
}
 800d28c:	bf00      	nop
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	20013b70 	.word	0x20013b70
 800d294:	200142bc 	.word	0x200142bc
 800d298:	20014030 	.word	0x20014030

0800d29c <Smooth_Ramp_Pressure>:


static void Smooth_Ramp_Pressure()
{
 800d29c:	b480      	push	{r7}
 800d29e:	af00      	add	r7, sp, #0
	if(Smooth_Ramp_Time   == Smooth_Ramp_Time_Val_Pending)
 800d2a0:	4b18      	ldr	r3, [pc, #96]	; (800d304 <Smooth_Ramp_Pressure+0x68>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d128      	bne.n	800d2fa <Smooth_Ramp_Pressure+0x5e>
	{
		if( (PC_SIMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL)  && (PC_SIMV.PEEP_Val >= 9) && (PC_SIMV.PEEP_Val <= 14) && (PC_SIMV.PIP_Val >=30) )
 800d2a8:	4b17      	ldr	r3, [pc, #92]	; (800d308 <Smooth_Ramp_Pressure+0x6c>)
 800d2aa:	785a      	ldrb	r2, [r3, #1]
 800d2ac:	4b17      	ldr	r3, [pc, #92]	; (800d30c <Smooth_Ramp_Pressure+0x70>)
 800d2ae:	7c1b      	ldrb	r3, [r3, #16]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d122      	bne.n	800d2fa <Smooth_Ramp_Pressure+0x5e>
 800d2b4:	4b14      	ldr	r3, [pc, #80]	; (800d308 <Smooth_Ramp_Pressure+0x6c>)
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	2b08      	cmp	r3, #8
 800d2ba:	d91e      	bls.n	800d2fa <Smooth_Ramp_Pressure+0x5e>
 800d2bc:	4b12      	ldr	r3, [pc, #72]	; (800d308 <Smooth_Ramp_Pressure+0x6c>)
 800d2be:	785b      	ldrb	r3, [r3, #1]
 800d2c0:	2b0e      	cmp	r3, #14
 800d2c2:	d81a      	bhi.n	800d2fa <Smooth_Ramp_Pressure+0x5e>
 800d2c4:	4b10      	ldr	r3, [pc, #64]	; (800d308 <Smooth_Ramp_Pressure+0x6c>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2b1d      	cmp	r3, #29
 800d2ca:	d916      	bls.n	800d2fa <Smooth_Ramp_Pressure+0x5e>
		{
			if(PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  < 2)
 800d2cc:	4b0f      	ldr	r3, [pc, #60]	; (800d30c <Smooth_Ramp_Pressure+0x70>)
 800d2ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	dc11      	bgt.n	800d2fa <Smooth_Ramp_Pressure+0x5e>
			{
				if(Smooth_Ramp_Time_Val_Count > 2 )
 800d2d6:	4b0e      	ldr	r3, [pc, #56]	; (800d310 <Smooth_Ramp_Pressure+0x74>)
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d907      	bls.n	800d2ee <Smooth_Ramp_Pressure+0x52>
				{
					Smooth_Ramp_Time_Val = PC_SIMV.PEEP_Val;
 800d2de:	4b0a      	ldr	r3, [pc, #40]	; (800d308 <Smooth_Ramp_Pressure+0x6c>)
 800d2e0:	785a      	ldrb	r2, [r3, #1]
 800d2e2:	4b0c      	ldr	r3, [pc, #48]	; (800d314 <Smooth_Ramp_Pressure+0x78>)
 800d2e4:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time     = Smooth_Ramp_Time_Val_Finished;
 800d2e6:	4b07      	ldr	r3, [pc, #28]	; (800d304 <Smooth_Ramp_Pressure+0x68>)
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time_Val_Count++;
				}
			}
		}
    }
}
 800d2ec:	e005      	b.n	800d2fa <Smooth_Ramp_Pressure+0x5e>
					Smooth_Ramp_Time_Val_Count++;
 800d2ee:	4b08      	ldr	r3, [pc, #32]	; (800d310 <Smooth_Ramp_Pressure+0x74>)
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	4b06      	ldr	r3, [pc, #24]	; (800d310 <Smooth_Ramp_Pressure+0x74>)
 800d2f8:	701a      	strb	r2, [r3, #0]
}
 800d2fa:	bf00      	nop
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr
 800d304:	20013b82 	.word	0x20013b82
 800d308:	200142bc 	.word	0x200142bc
 800d30c:	20014300 	.word	0x20014300
 800d310:	200140c1 	.word	0x200140c1
 800d314:	20014058 	.word	0x20014058

0800d318 <Trigger_Time_Monitor>:



static void Trigger_Time_Monitor()
{
 800d318:	b480      	push	{r7}
 800d31a:	af00      	add	r7, sp, #0
	PC_SIMV.CALC_TRIG_VAL 	                 =  (PC_SIMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 800d31c:	4b11      	ldr	r3, [pc, #68]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	b29a      	uxth	r2, r3
 800d322:	4b11      	ldr	r3, [pc, #68]	; (800d368 <Trigger_Time_Monitor+0x50>)
 800d324:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d328:	b29b      	uxth	r3, r3
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d330:	835a      	strh	r2, [r3, #26]
	if(PC_SIMV.CALC_TRIG_VAL <0)
	{
		PC_SIMV.CALC_TRIG_VAL = (PC_SIMV.CALC_TRIG_VAL * (-1));
	}
	PC_SIMV.TOLERANCE_EWAVE =  PC_SIMV.TRIG_TIME;
 800d332:	4b0c      	ldr	r3, [pc, #48]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d334:	8b1a      	ldrh	r2, [r3, #24]
 800d336:	4b0b      	ldr	r3, [pc, #44]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d338:	839a      	strh	r2, [r3, #28]
	if(PC_SIMV.CALC_TRIG_VAL < PC_SIMV.TRIG_TIME )
 800d33a:	4b0a      	ldr	r3, [pc, #40]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d33c:	8b5a      	ldrh	r2, [r3, #26]
 800d33e:	4b09      	ldr	r3, [pc, #36]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d340:	8b1b      	ldrh	r3, [r3, #24]
 800d342:	429a      	cmp	r2, r3
 800d344:	d205      	bcs.n	800d352 <Trigger_Time_Monitor+0x3a>
	{
		PC_SIMV.TOLERANCE_EWAVE =  (PC_SIMV.TRIG_TIME - 200) ;
 800d346:	4b07      	ldr	r3, [pc, #28]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d348:	8b1b      	ldrh	r3, [r3, #24]
 800d34a:	3bc8      	subs	r3, #200	; 0xc8
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	4b05      	ldr	r3, [pc, #20]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d350:	839a      	strh	r2, [r3, #28]
	}

	PC_SIMV.TRIG_WINDOW		                 = PC_SIMV.TOLERANCE_EWAVE;
 800d352:	4b04      	ldr	r3, [pc, #16]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d354:	8b9a      	ldrh	r2, [r3, #28]
 800d356:	4b03      	ldr	r3, [pc, #12]	; (800d364 <Trigger_Time_Monitor+0x4c>)
 800d358:	83da      	strh	r2, [r3, #30]
}
 800d35a:	bf00      	nop
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	200142bc 	.word	0x200142bc
 800d368:	20014300 	.word	0x20014300

0800d36c <Pc_Cmv_Mode_Packet_Data>:




void Pc_Cmv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	PC_CMV.PIP_Val                = Receive_Graph_Packet->PIP_PS_Phigh;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	791a      	ldrb	r2, [r3, #4]
 800d378:	4b2f      	ldr	r3, [pc, #188]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d37a:	701a      	strb	r2, [r3, #0]
	PC_CMV.PEEP_Val               = Receive_Graph_Packet->PEEP_CPAP_Plow;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	795a      	ldrb	r2, [r3, #5]
 800d380:	4b2d      	ldr	r3, [pc, #180]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d382:	705a      	strb	r2, [r3, #1]
	PC_CMV.FIO2_Val               = Receive_Graph_Packet->FiO2;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	7a1a      	ldrb	r2, [r3, #8]
 800d388:	4b2b      	ldr	r3, [pc, #172]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d38a:	70da      	strb	r2, [r3, #3]

	PC_CMV.RESPIRATORY_RATE_Val   = Receive_Graph_Packet->RR;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7a5a      	ldrb	r2, [r3, #9]
 800d390:	4b29      	ldr	r3, [pc, #164]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d392:	709a      	strb	r2, [r3, #2]
	One_Breathe_time              = (One_Minite_In_MS / PC_CMV.RESPIRATORY_RATE_Val);
 800d394:	4b28      	ldr	r3, [pc, #160]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d396:	789b      	ldrb	r3, [r3, #2]
 800d398:	461a      	mov	r2, r3
 800d39a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d39e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3a2:	60fb      	str	r3, [r7, #12]
	PC_CMV.INSPIRATION_TIME       = ( ( Receive_Graph_Packet->T_high) * 100 );
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7a9b      	ldrb	r3, [r3, #10]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	2364      	movs	r3, #100	; 0x64
 800d3ac:	fb03 f302 	mul.w	r3, r3, r2
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	4b21      	ldr	r3, [pc, #132]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d3b4:	609a      	str	r2, [r3, #8]
	PC_CMV.EXPIRATION_TIME        = (One_Breathe_time - PC_CMV.INSPIRATION_TIME);
 800d3b6:	4b20      	ldr	r3, [pc, #128]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	4a1e      	ldr	r2, [pc, #120]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d3c0:	60d3      	str	r3, [r2, #12]

	PC_CMV.Rise_Time              = Receive_Graph_Packet->Rise_Time;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	7b1a      	ldrb	r2, [r3, #12]
 800d3c6:	4b1c      	ldr	r3, [pc, #112]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d3c8:	749a      	strb	r2, [r3, #18]
	PC_CMV.RISE_TIME_MS_Val       = (PC_CMV.Rise_Time *100);
 800d3ca:	4b1b      	ldr	r3, [pc, #108]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d3cc:	7c9b      	ldrb	r3, [r3, #18]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	2364      	movs	r3, #100	; 0x64
 800d3d2:	fb03 f302 	mul.w	r3, r3, r2
 800d3d6:	ee07 3a90 	vmov	s15, r3
 800d3da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3de:	4b16      	ldr	r3, [pc, #88]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d3e0:	edc3 7a01 	vstr	s15, [r3, #4]
	if(PC_CMV.INSPIRATION_TIME >600)
 800d3e4:	4b14      	ldr	r3, [pc, #80]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800d3ec:	d90c      	bls.n	800d408 <Pc_Cmv_Mode_Packet_Data+0x9c>
	{
		if(PC_CMV.RISE_TIME_MS_Val < 600)
 800d3ee:	4b12      	ldr	r3, [pc, #72]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d3f0:	edd3 7a01 	vldr	s15, [r3, #4]
 800d3f4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d43c <Pc_Cmv_Mode_Packet_Data+0xd0>
 800d3f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d400:	d502      	bpl.n	800d408 <Pc_Cmv_Mode_Packet_Data+0x9c>
			PC_CMV.RISE_TIME_MS_Val = 600;
 800d402:	4b0d      	ldr	r3, [pc, #52]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d404:	4a0e      	ldr	r2, [pc, #56]	; (800d440 <Pc_Cmv_Mode_Packet_Data+0xd4>)
 800d406:	605a      	str	r2, [r3, #4]
	}
	PIP_control_Task.PIP_Acheived_Time_Ms      	 =  (PC_CMV.RISE_TIME_MS_Val * 2);
 800d408:	4b0b      	ldr	r3, [pc, #44]	; (800d438 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800d40a:	edd3 7a01 	vldr	s15, [r3, #4]
 800d40e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d416:	ee17 3a90 	vmov	r3, s15
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	4b09      	ldr	r3, [pc, #36]	; (800d444 <Pc_Cmv_Mode_Packet_Data+0xd8>)
 800d41e:	809a      	strh	r2, [r3, #4]
	Mode_Initial_Flag_Set                        = OPEN;
 800d420:	4b09      	ldr	r3, [pc, #36]	; (800d448 <Pc_Cmv_Mode_Packet_Data+0xdc>)
 800d422:	2201      	movs	r2, #1
 800d424:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 800d426:	4b09      	ldr	r3, [pc, #36]	; (800d44c <Pc_Cmv_Mode_Packet_Data+0xe0>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f011 fff6 	bl	801f41c <vTaskResume>
}
 800d430:	bf00      	nop
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	200141e4 	.word	0x200141e4
 800d43c:	44160000 	.word	0x44160000
 800d440:	44160000 	.word	0x44160000
 800d444:	20013b04 	.word	0x20013b04
 800d448:	20014338 	.word	0x20014338
 800d44c:	2001406c 	.word	0x2001406c

0800d450 <Pc_Cmv_Task>:


void Pc_Cmv_Task (void *argument)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 800d458:	4b14      	ldr	r3, [pc, #80]	; (800d4ac <Pc_Cmv_Task+0x5c>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d00b      	beq.n	800d478 <Pc_Cmv_Task+0x28>
 800d460:	2b02      	cmp	r3, #2
 800d462:	dc1c      	bgt.n	800d49e <Pc_Cmv_Task+0x4e>
 800d464:	2b00      	cmp	r3, #0
 800d466:	d01c      	beq.n	800d4a2 <Pc_Cmv_Task+0x52>
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d118      	bne.n	800d49e <Pc_Cmv_Task+0x4e>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800d46c:	4b10      	ldr	r3, [pc, #64]	; (800d4b0 <Pc_Cmv_Task+0x60>)
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	4618      	mov	r0, r3
 800d472:	f000 f821 	bl	800d4b8 <Inspiration_Time_Blower_Control_PC_CMV>
			break;
 800d476:	e015      	b.n	800d4a4 <Pc_Cmv_Task+0x54>
			case Run_Expiration_Cycle:
				Pressure_Mode_blower_control.BLOWER_DAC_VAL=0;
 800d478:	4b0d      	ldr	r3, [pc, #52]	; (800d4b0 <Pc_Cmv_Task+0x60>)
 800d47a:	2200      	movs	r2, #0
 800d47c:	801a      	strh	r2, [r3, #0]
				Expiration_Time_Blower_Control_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800d47e:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <Pc_Cmv_Task+0x60>)
 800d480:	881b      	ldrh	r3, [r3, #0]
 800d482:	4a0c      	ldr	r2, [pc, #48]	; (800d4b4 <Pc_Cmv_Task+0x64>)
 800d484:	edd2 7a00 	vldr	s15, [r2]
											   PEEP_Maintain_Parameter.PEEP_Temp,
											   PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800d488:	4a0a      	ldr	r2, [pc, #40]	; (800d4b4 <Pc_Cmv_Task+0x64>)
 800d48a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800d48e:	b292      	uxth	r2, r2
 800d490:	4611      	mov	r1, r2
 800d492:	eeb0 0a67 	vmov.f32	s0, s15
 800d496:	4618      	mov	r0, r3
 800d498:	f000 f842 	bl	800d520 <Expiration_Time_Blower_Control_PC_CMV>
			break;
 800d49c:	e002      	b.n	800d4a4 <Pc_Cmv_Task+0x54>
			case No_Run_State:
			break;
			default:
			break;
 800d49e:	bf00      	nop
 800d4a0:	e000      	b.n	800d4a4 <Pc_Cmv_Task+0x54>
			break;
 800d4a2:	bf00      	nop
		}
		vTaskDelay(Two_Millisecond_Delay);
 800d4a4:	2002      	movs	r0, #2
 800d4a6:	f011 fec1 	bl	801f22c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 800d4aa:	e7d5      	b.n	800d458 <Pc_Cmv_Task+0x8>
 800d4ac:	20013f7c 	.word	0x20013f7c
 800d4b0:	20014030 	.word	0x20014030
 800d4b4:	20014300 	.word	0x20014300

0800d4b8 <Inspiration_Time_Blower_Control_PC_CMV>:




static void Inspiration_Time_Blower_Control_PC_CMV(uint16_t Blower_Signal)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	4603      	mov	r3, r0
 800d4c0:	80fb      	strh	r3, [r7, #6]
	Pressure_Mode_blower_control.Blower_Signal_Voltage = ( (Blower_Signal*3.3) /4095);
 800d4c2:	88fb      	ldrh	r3, [r7, #6]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7f2 ffd5 	bl	8000474 <__aeabi_i2d>
 800d4ca:	a311      	add	r3, pc, #68	; (adr r3, 800d510 <Inspiration_Time_Blower_Control_PC_CMV+0x58>)
 800d4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d0:	f7f3 f83a 	bl	8000548 <__aeabi_dmul>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4610      	mov	r0, r2
 800d4da:	4619      	mov	r1, r3
 800d4dc:	a30e      	add	r3, pc, #56	; (adr r3, 800d518 <Inspiration_Time_Blower_Control_PC_CMV+0x60>)
 800d4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e2:	f7f3 f95b 	bl	800079c <__aeabi_ddiv>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	f7f3 fb0d 	bl	8000b0c <__aeabi_d2f>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	4a04      	ldr	r2, [pc, #16]	; (800d508 <Inspiration_Time_Blower_Control_PC_CMV+0x50>)
 800d4f6:	60d3      	str	r3, [r2, #12]
	Blower_Signal(Blower_Signal);
 800d4f8:	4a04      	ldr	r2, [pc, #16]	; (800d50c <Inspiration_Time_Blower_Control_PC_CMV+0x54>)
 800d4fa:	88fb      	ldrh	r3, [r7, #6]
 800d4fc:	6093      	str	r3, [r2, #8]
}
 800d4fe:	bf00      	nop
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20014030 	.word	0x20014030
 800d50c:	40007400 	.word	0x40007400
 800d510:	66666666 	.word	0x66666666
 800d514:	400a6666 	.word	0x400a6666
 800d518:	00000000 	.word	0x00000000
 800d51c:	40affe00 	.word	0x40affe00

0800d520 <Expiration_Time_Blower_Control_PC_CMV>:

static void Expiration_Time_Blower_Control_PC_CMV(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	ed87 0a00 	vstr	s0, [r7]
 800d52c:	460a      	mov	r2, r1
 800d52e:	80fb      	strh	r3, [r7, #6]
 800d530:	4613      	mov	r3, r2
 800d532:	80bb      	strh	r3, [r7, #4]
	Blower_Signal( Blower_Signal);
 800d534:	4a25      	ldr	r2, [pc, #148]	; (800d5cc <Expiration_Time_Blower_Control_PC_CMV+0xac>)
 800d536:	88fb      	ldrh	r3, [r7, #6]
 800d538:	6093      	str	r3, [r2, #8]
		if(Peep_Status==PEEP_ACHEIVED)
 800d53a:	4b25      	ldr	r3, [pc, #148]	; (800d5d0 <Expiration_Time_Blower_Control_PC_CMV+0xb0>)
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d113      	bne.n	800d56a <Expiration_Time_Blower_Control_PC_CMV+0x4a>
		{
				if(Pressure_sensor.Pressure_Val < PEEP)
 800d542:	4b24      	ldr	r3, [pc, #144]	; (800d5d4 <Expiration_Time_Blower_Control_PC_CMV+0xb4>)
 800d544:	789b      	ldrb	r3, [r3, #2]
 800d546:	ee07 3a90 	vmov	s15, r3
 800d54a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d54e:	ed97 7a00 	vldr	s14, [r7]
 800d552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d55a:	dd03      	ble.n	800d564 <Expiration_Time_Blower_Control_PC_CMV+0x44>
				{
					Blower_Signal( Blower_Signal);
 800d55c:	4a1b      	ldr	r2, [pc, #108]	; (800d5cc <Expiration_Time_Blower_Control_PC_CMV+0xac>)
 800d55e:	88fb      	ldrh	r3, [r7, #6]
 800d560:	6093      	str	r3, [r2, #8]
 800d562:	e002      	b.n	800d56a <Expiration_Time_Blower_Control_PC_CMV+0x4a>
				}
				else
				{
					Blower_Signal( Blower_Signal);
 800d564:	4a19      	ldr	r2, [pc, #100]	; (800d5cc <Expiration_Time_Blower_Control_PC_CMV+0xac>)
 800d566:	88fb      	ldrh	r3, [r7, #6]
 800d568:	6093      	str	r3, [r2, #8]
				}
		 }
		if(Pressure_sensor.Pressure_Val<= PEEP)
 800d56a:	4b1a      	ldr	r3, [pc, #104]	; (800d5d4 <Expiration_Time_Blower_Control_PC_CMV+0xb4>)
 800d56c:	789b      	ldrb	r3, [r3, #2]
 800d56e:	ee07 3a90 	vmov	s15, r3
 800d572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d576:	ed97 7a00 	vldr	s14, [r7]
 800d57a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d582:	db14      	blt.n	800d5ae <Expiration_Time_Blower_Control_PC_CMV+0x8e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 800d584:	4b14      	ldr	r3, [pc, #80]	; (800d5d8 <Expiration_Time_Blower_Control_PC_CMV+0xb8>)
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d106      	bne.n	800d59a <Expiration_Time_Blower_Control_PC_CMV+0x7a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 800d58c:	4b12      	ldr	r3, [pc, #72]	; (800d5d8 <Expiration_Time_Blower_Control_PC_CMV+0xb8>)
 800d58e:	2201      	movs	r2, #1
 800d590:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Expiratory_Valve_Open_Time);
 800d592:	88bb      	ldrh	r3, [r7, #4]
 800d594:	4618      	mov	r0, r3
 800d596:	f011 fe49 	bl	801f22c <vTaskDelay>
			}
			Peep_Status=PEEP_ACHEIVED;
 800d59a:	4b0d      	ldr	r3, [pc, #52]	; (800d5d0 <Expiration_Time_Blower_Control_PC_CMV+0xb0>)
 800d59c:	2201      	movs	r2, #1
 800d59e:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 800d5a0:	4b0e      	ldr	r3, [pc, #56]	; (800d5dc <Expiration_Time_Blower_Control_PC_CMV+0xbc>)
 800d5a2:	695b      	ldr	r3, [r3, #20]
 800d5a4:	4a0d      	ldr	r2, [pc, #52]	; (800d5dc <Expiration_Time_Blower_Control_PC_CMV+0xbc>)
 800d5a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d5aa:	6153      	str	r3, [r2, #20]
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
		{
			ExpValve_OPEN();
		}
}
 800d5ac:	e009      	b.n	800d5c2 <Expiration_Time_Blower_Control_PC_CMV+0xa2>
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 800d5ae:	4b08      	ldr	r3, [pc, #32]	; (800d5d0 <Expiration_Time_Blower_Control_PC_CMV+0xb0>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d105      	bne.n	800d5c2 <Expiration_Time_Blower_Control_PC_CMV+0xa2>
			ExpValve_OPEN();
 800d5b6:	4b09      	ldr	r3, [pc, #36]	; (800d5dc <Expiration_Time_Blower_Control_PC_CMV+0xbc>)
 800d5b8:	695b      	ldr	r3, [r3, #20]
 800d5ba:	4a08      	ldr	r2, [pc, #32]	; (800d5dc <Expiration_Time_Blower_Control_PC_CMV+0xbc>)
 800d5bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d5c0:	6153      	str	r3, [r2, #20]
}
 800d5c2:	bf00      	nop
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	40007400 	.word	0x40007400
 800d5d0:	200140f5 	.word	0x200140f5
 800d5d4:	2001405c 	.word	0x2001405c
 800d5d8:	200140f4 	.word	0x200140f4
 800d5dc:	40020400 	.word	0x40020400

0800d5e0 <PC_CMV_Inspiration_Time_Variables_Reset>:


void PC_CMV_Inspiration_Time_Variables_Reset()
{
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af02      	add	r7, sp, #8
	Breath_Count         = Count_The_Breath;
 800d5e6:	4b54      	ldr	r3, [pc, #336]	; (800d738 <PC_CMV_Inspiration_Time_Variables_Reset+0x158>)
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	701a      	strb	r2, [r3, #0]
	Smooth_Ramp_Pressure();
 800d5ec:	f000 f940 	bl	800d870 <Smooth_Ramp_Pressure>
	PIP_Not_Acheieved();
 800d5f0:	f000 f97c 	bl	800d8ec <PIP_Not_Acheieved>
	ExpValve_CLOSE();
 800d5f4:	4b51      	ldr	r3, [pc, #324]	; (800d73c <PC_CMV_Inspiration_Time_Variables_Reset+0x15c>)
 800d5f6:	695b      	ldr	r3, [r3, #20]
 800d5f8:	4a50      	ldr	r2, [pc, #320]	; (800d73c <PC_CMV_Inspiration_Time_Variables_Reset+0x15c>)
 800d5fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d5fe:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 800d600:	f7fb fd0c 	bl	800901c <PIP_AVERAGE>
	PEEP_AVERAGE();
 800d604:	f7fb fd30 	bl	8009068 <PEEP_AVERAGE>
	Set_Blower_Val();
 800d608:	f000 f91a 	bl	800d840 <Set_Blower_Val>
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 800d60c:	4b4c      	ldr	r3, [pc, #304]	; (800d740 <PC_CMV_Inspiration_Time_Variables_Reset+0x160>)
 800d60e:	78db      	ldrb	r3, [r3, #3]
 800d610:	4618      	mov	r0, r3
 800d612:	f7fe fa79 	bl	800bb08 <O2_DAC_Control>
	Check_Alert();
 800d616:	f7f3 fd6f 	bl	80010f8 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 800d61a:	f7f3 fe17 	bl	800124c <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 800d61e:	f7f4 f9c7 	bl	80019b0 <LED_Alert>
	Alert_Status                                              = NO_ALERT;
 800d622:	4b48      	ldr	r3, [pc, #288]	; (800d744 <PC_CMV_Inspiration_Time_Variables_Reset+0x164>)
 800d624:	2200      	movs	r2, #0
 800d626:	701a      	strb	r2, [r3, #0]

	Sampled_Parameter_Inspiration_time();
 800d628:	f003 f95e 	bl	80108e8 <Sampled_Parameter_Inspiration_time>

	if( (PC_CMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 800d62c:	4b46      	ldr	r3, [pc, #280]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d62e:	785a      	ldrb	r2, [r3, #1]
 800d630:	4b46      	ldr	r3, [pc, #280]	; (800d74c <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800d632:	7c1b      	ldrb	r3, [r3, #16]
 800d634:	429a      	cmp	r2, r3
 800d636:	d013      	beq.n	800d660 <PC_CMV_Inspiration_Time_Variables_Reset+0x80>
	{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,PC_CMV.RESPIRATORY_RATE_Val,PC_CMV.INSPIRATION_TIME,PC_CMV.PEEP_Val,PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800d638:	4b44      	ldr	r3, [pc, #272]	; (800d74c <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800d63a:	7c18      	ldrb	r0, [r3, #16]
 800d63c:	4b42      	ldr	r3, [pc, #264]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d63e:	7899      	ldrb	r1, [r3, #2]
 800d640:	4b41      	ldr	r3, [pc, #260]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d642:	689a      	ldr	r2, [r3, #8]
 800d644:	4b40      	ldr	r3, [pc, #256]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d646:	785c      	ldrb	r4, [r3, #1]
 800d648:	4b40      	ldr	r3, [pc, #256]	; (800d74c <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800d64a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d64e:	b29b      	uxth	r3, r3
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	4623      	mov	r3, r4
 800d654:	f7f8 fade 	bl	8005c14 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>
 800d658:	4603      	mov	r3, r0
 800d65a:	b21a      	sxth	r2, r3
 800d65c:	4b3b      	ldr	r3, [pc, #236]	; (800d74c <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800d65e:	809a      	strh	r2, [r3, #4]
	}
	INCREASE_EACH_DAC_SET_CONST(Common_Mode_Parameter._PIP_Val,PC_CMV.RISE_TIME_MS_Val);
 800d660:	4b37      	ldr	r3, [pc, #220]	; (800d740 <PC_CMV_Inspiration_Time_Variables_Reset+0x160>)
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	4a38      	ldr	r2, [pc, #224]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d666:	edd2 7a01 	vldr	s15, [r2, #4]
 800d66a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d66e:	ee17 2a90 	vmov	r2, s15
 800d672:	b292      	uxth	r2, r2
 800d674:	4611      	mov	r1, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f000 f9f2 	bl	800da60 <INCREASE_EACH_DAC_SET_CONST>
	BLOWER_ENDING_DAC_SIGNAL_TUNE(PC_CMV.PIP_Val,PC_CMV.RESPIRATORY_RATE_Val,PC_CMV.Expiration_Time_Ratio,PC_CMV.Rise_Time);
 800d67c:	4b32      	ldr	r3, [pc, #200]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d67e:	7818      	ldrb	r0, [r3, #0]
 800d680:	4b31      	ldr	r3, [pc, #196]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d682:	7899      	ldrb	r1, [r3, #2]
 800d684:	4b30      	ldr	r3, [pc, #192]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d686:	7c5a      	ldrb	r2, [r3, #17]
 800d688:	4b2f      	ldr	r3, [pc, #188]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d68a:	7c9b      	ldrb	r3, [r3, #18]
 800d68c:	f000 fbdc 	bl	800de48 <BLOWER_ENDING_DAC_SIGNAL_TUNE>
	BREATH_STATE                                               = INSPIRATION_CYCLE;
 800d690:	4b2f      	ldr	r3, [pc, #188]	; (800d750 <PC_CMV_Inspiration_Time_Variables_Reset+0x170>)
 800d692:	2200      	movs	r2, #0
 800d694:	701a      	strb	r2, [r3, #0]
	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 800d696:	4b2f      	ldr	r3, [pc, #188]	; (800d754 <PC_CMV_Inspiration_Time_Variables_Reset+0x174>)
 800d698:	2200      	movs	r2, #0
 800d69a:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 800d69c:	4b2e      	ldr	r3, [pc, #184]	; (800d758 <PC_CMV_Inspiration_Time_Variables_Reset+0x178>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	701a      	strb	r2, [r3, #0]
	PIP_Status                    				               = PIP_NOT_ACHEIVED;
 800d6a2:	4b2e      	ldr	r3, [pc, #184]	; (800d75c <PC_CMV_Inspiration_Time_Variables_Reset+0x17c>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	701a      	strb	r2, [r3, #0]
	Set_PIP_Status                                             = SET_PIP_VALUE_NOT_ACHEIVED;
 800d6a8:	4b2d      	ldr	r3, [pc, #180]	; (800d760 <PC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	701a      	strb	r2, [r3, #0]
	Read_Time_vs_Pressure                                      = READ_TIME_OPEN;
 800d6ae:	4b2d      	ldr	r3, [pc, #180]	; (800d764 <PC_CMV_Inspiration_Time_Variables_Reset+0x184>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.PIP_Control_Event_Occured                 = RESET;
 800d6b4:	4b2c      	ldr	r3, [pc, #176]	; (800d768 <PC_CMV_Inspiration_Time_Variables_Reset+0x188>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	805a      	strh	r2, [r3, #2]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 800d6ba:	4b2c      	ldr	r3, [pc, #176]	; (800d76c <PC_CMV_Inspiration_Time_Variables_Reset+0x18c>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	701a      	strb	r2, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_DAC_VAL                = DAC_VAL(PC_CMV.PEEP_Val );
 800d6c0:	4b21      	ldr	r3, [pc, #132]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d6c2:	785b      	ldrb	r3, [r3, #1]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fb fe1b 	bl	8009300 <DAC_VAL>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	4b28      	ldr	r3, [pc, #160]	; (800d770 <PC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 800d6d0:	801a      	strh	r2, [r3, #0]
	Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL           = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800d6d2:	4b27      	ldr	r3, [pc, #156]	; (800d770 <PC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 800d6d4:	881a      	ldrh	r2, [r3, #0]
 800d6d6:	4b26      	ldr	r3, [pc, #152]	; (800d770 <PC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 800d6d8:	805a      	strh	r2, [r3, #2]
	TIME_Base_parameter._INSPIRATION_TIME                      = PC_CMV.INSPIRATION_TIME;
 800d6da:	4b1b      	ldr	r3, [pc, #108]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	461a      	mov	r2, r3
 800d6e0:	4b24      	ldr	r3, [pc, #144]	; (800d774 <PC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 800d6e2:	601a      	str	r2, [r3, #0]

	Led_Delay                                                  = (PC_CMV.RISE_TIME_MS_Val  /46);
 800d6e4:	4b18      	ldr	r3, [pc, #96]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d6e6:	ed93 7a01 	vldr	s14, [r3, #4]
 800d6ea:	eddf 6a23 	vldr	s13, [pc, #140]	; 800d778 <PC_CMV_Inspiration_Time_Variables_Reset+0x198>
 800d6ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d6f2:	4b22      	ldr	r3, [pc, #136]	; (800d77c <PC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 800d6f4:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                                   = 1;
 800d6f8:	4b21      	ldr	r3, [pc, #132]	; (800d780 <PC_CMV_Inspiration_Time_Variables_Reset+0x1a0>)
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	701a      	strb	r2, [r3, #0]

	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 800d6fe:	4b1d      	ldr	r3, [pc, #116]	; (800d774 <PC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 800d700:	2200      	movs	r2, #0
 800d702:	609a      	str	r2, [r3, #8]
	PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = PIP_control_Task.Early_Acheived_Ramp_Time_Percentage;
 800d704:	4b18      	ldr	r3, [pc, #96]	; (800d768 <PC_CMV_Inspiration_Time_Variables_Reset+0x188>)
 800d706:	7a1a      	ldrb	r2, [r3, #8]
 800d708:	4b17      	ldr	r3, [pc, #92]	; (800d768 <PC_CMV_Inspiration_Time_Variables_Reset+0x188>)
 800d70a:	725a      	strb	r2, [r3, #9]
	vol.Volume                                                 = RESET;
 800d70c:	4b1d      	ldr	r3, [pc, #116]	; (800d784 <PC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 800d70e:	f04f 0200 	mov.w	r2, #0
 800d712:	601a      	str	r2, [r3, #0]
	vol.Volume_max                                             = RESET;
 800d714:	4b1b      	ldr	r3, [pc, #108]	; (800d784 <PC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 800d716:	2200      	movs	r2, #0
 800d718:	609a      	str	r2, [r3, #8]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 800d71a:	4b1b      	ldr	r3, [pc, #108]	; (800d788 <PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 800d71c:	2201      	movs	r2, #1
 800d71e:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 800d720:	4b1a      	ldr	r3, [pc, #104]	; (800d78c <PC_CMV_Inspiration_Time_Variables_Reset+0x1ac>)
 800d722:	2201      	movs	r2, #1
 800d724:	701a      	strb	r2, [r3, #0]
	vTaskDelay(PC_CMV.INSPIRATION_TIME);
 800d726:	4b08      	ldr	r3, [pc, #32]	; (800d748 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f011 fd7e 	bl	801f22c <vTaskDelay>
}
 800d730:	bf00      	nop
 800d732:	3704      	adds	r7, #4
 800d734:	46bd      	mov	sp, r7
 800d736:	bd90      	pop	{r4, r7, pc}
 800d738:	200139a6 	.word	0x200139a6
 800d73c:	40020400 	.word	0x40020400
 800d740:	20013ba4 	.word	0x20013ba4
 800d744:	20013f88 	.word	0x20013f88
 800d748:	200141e4 	.word	0x200141e4
 800d74c:	20014300 	.word	0x20014300
 800d750:	200140fd 	.word	0x200140fd
 800d754:	200140f5 	.word	0x200140f5
 800d758:	200140f4 	.word	0x200140f4
 800d75c:	200140c2 	.word	0x200140c2
 800d760:	200141f8 	.word	0x200141f8
 800d764:	20014371 	.word	0x20014371
 800d768:	20013b04 	.word	0x20013b04
 800d76c:	20013b70 	.word	0x20013b70
 800d770:	20014030 	.word	0x20014030
 800d774:	200141fc 	.word	0x200141fc
 800d778:	42380000 	.word	0x42380000
 800d77c:	20014078 	.word	0x20014078
 800d780:	20013f3c 	.word	0x20013f3c
 800d784:	200140c8 	.word	0x200140c8
 800d788:	20013d20 	.word	0x20013d20
 800d78c:	20013f7c 	.word	0x20013f7c

0800d790 <PC_CMV_Expiration_Time_Variables_Reset>:

void PC_CMV_Expiration_Time_Variables_Reset()
{
 800d790:	b580      	push	{r7, lr}
 800d792:	af00      	add	r7, sp, #0
	BREATH_STATE                                        = EXPIRATION_CYCLE;
 800d794:	4b20      	ldr	r3, [pc, #128]	; (800d818 <PC_CMV_Expiration_Time_Variables_Reset+0x88>)
 800d796:	2201      	movs	r2, #1
 800d798:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 800d79a:	4b20      	ldr	r3, [pc, #128]	; (800d81c <PC_CMV_Expiration_Time_Variables_Reset+0x8c>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 800d7a0:	4b1e      	ldr	r3, [pc, #120]	; (800d81c <PC_CMV_Expiration_Time_Variables_Reset+0x8c>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 800d7a6:	4b1d      	ldr	r3, [pc, #116]	; (800d81c <PC_CMV_Expiration_Time_Variables_Reset+0x8c>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 800d7ac:	4b1b      	ldr	r3, [pc, #108]	; (800d81c <PC_CMV_Expiration_Time_Variables_Reset+0x8c>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	60da      	str	r2, [r3, #12]
	Adjust_Servo_And_Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 800d7b2:	4b1b      	ldr	r3, [pc, #108]	; (800d820 <PC_CMV_Expiration_Time_Variables_Reset+0x90>)
 800d7b4:	78db      	ldrb	r3, [r3, #3]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fd ffe0 	bl	800b77c <Adjust_Servo_And_Calculate_O2>
	Alert_Expiration_Time_Parameter();
 800d7bc:	f7f3 fdb6 	bl	800132c <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = PC_CMV.EXPIRATION_TIME;
 800d7c0:	4b18      	ldr	r3, [pc, #96]	; (800d824 <PC_CMV_Expiration_Time_Variables_Reset+0x94>)
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	4b18      	ldr	r3, [pc, #96]	; (800d828 <PC_CMV_Expiration_Time_Variables_Reset+0x98>)
 800d7c8:	605a      	str	r2, [r3, #4]

	Led_Delay                                           = ( (PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time + 500)  /46);
 800d7ca:	4b14      	ldr	r3, [pc, #80]	; (800d81c <PC_CMV_Expiration_Time_Variables_Reset+0x8c>)
 800d7cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d7d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d7d4:	4a15      	ldr	r2, [pc, #84]	; (800d82c <PC_CMV_Expiration_Time_Variables_Reset+0x9c>)
 800d7d6:	fb82 1203 	smull	r1, r2, r2, r3
 800d7da:	441a      	add	r2, r3
 800d7dc:	1152      	asrs	r2, r2, #5
 800d7de:	17db      	asrs	r3, r3, #31
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	ee07 3a90 	vmov	s15, r3
 800d7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7ea:	4b11      	ldr	r3, [pc, #68]	; (800d830 <PC_CMV_Expiration_Time_Variables_Reset+0xa0>)
 800d7ec:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                            = 45;
 800d7f0:	4b10      	ldr	r3, [pc, #64]	; (800d834 <PC_CMV_Expiration_Time_Variables_Reset+0xa4>)
 800d7f2:	222d      	movs	r2, #45	; 0x2d
 800d7f4:	701a      	strb	r2, [r3, #0]

	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 800d7f6:	4b0c      	ldr	r3, [pc, #48]	; (800d828 <PC_CMV_Expiration_Time_Variables_Reset+0x98>)
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 800d7fc:	4b0e      	ldr	r3, [pc, #56]	; (800d838 <PC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 800d7fe:	2200      	movs	r2, #0
 800d800:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 800d802:	4b0e      	ldr	r3, [pc, #56]	; (800d83c <PC_CMV_Expiration_Time_Variables_Reset+0xac>)
 800d804:	2202      	movs	r2, #2
 800d806:	701a      	strb	r2, [r3, #0]
	vTaskDelay(PC_CMV.EXPIRATION_TIME);
 800d808:	4b06      	ldr	r3, [pc, #24]	; (800d824 <PC_CMV_Expiration_Time_Variables_Reset+0x94>)
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	4618      	mov	r0, r3
 800d80e:	f011 fd0d 	bl	801f22c <vTaskDelay>
}
 800d812:	bf00      	nop
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	200140fd 	.word	0x200140fd
 800d81c:	20014300 	.word	0x20014300
 800d820:	20013ba4 	.word	0x20013ba4
 800d824:	200141e4 	.word	0x200141e4
 800d828:	200141fc 	.word	0x200141fc
 800d82c:	b21642c9 	.word	0xb21642c9
 800d830:	20014078 	.word	0x20014078
 800d834:	20013f3c 	.word	0x20013f3c
 800d838:	20013d20 	.word	0x20013d20
 800d83c:	20013f7c 	.word	0x20013f7c

0800d840 <Set_Blower_Val>:



static void Set_Blower_Val()
{
 800d840:	b580      	push	{r7, lr}
 800d842:	af00      	add	r7, sp, #0
	if(PIP_Average_Parameter.PIP_AVG_VAL  == PC_CMV.PIP_Val )
 800d844:	4b07      	ldr	r3, [pc, #28]	; (800d864 <Set_Blower_Val+0x24>)
 800d846:	7b1a      	ldrb	r2, [r3, #12]
 800d848:	4b07      	ldr	r3, [pc, #28]	; (800d868 <Set_Blower_Val+0x28>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d107      	bne.n	800d860 <Set_Blower_Val+0x20>
	{
		Change_DAC_Values(PC_CMV.PIP_Val ,Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL);
 800d850:	4b05      	ldr	r3, [pc, #20]	; (800d868 <Set_Blower_Val+0x28>)
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	4a05      	ldr	r2, [pc, #20]	; (800d86c <Set_Blower_Val+0x2c>)
 800d856:	8912      	ldrh	r2, [r2, #8]
 800d858:	4611      	mov	r1, r2
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fb ff0e 	bl	800967c <Change_DAC_Values>
	}
}
 800d860:	bf00      	nop
 800d862:	bd80      	pop	{r7, pc}
 800d864:	20013b70 	.word	0x20013b70
 800d868:	200141e4 	.word	0x200141e4
 800d86c:	20014030 	.word	0x20014030

0800d870 <Smooth_Ramp_Pressure>:


static void Smooth_Ramp_Pressure()
{
 800d870:	b480      	push	{r7}
 800d872:	af00      	add	r7, sp, #0
	if(Smooth_Ramp_Time   == Smooth_Ramp_Time_Val_Pending)
 800d874:	4b18      	ldr	r3, [pc, #96]	; (800d8d8 <Smooth_Ramp_Pressure+0x68>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d128      	bne.n	800d8ce <Smooth_Ramp_Pressure+0x5e>
	{
		if( (PC_CMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL)  && (PC_CMV.PEEP_Val >= 9) && (PC_CMV.PEEP_Val <= 14) && (PC_CMV.PIP_Val >=30) )
 800d87c:	4b17      	ldr	r3, [pc, #92]	; (800d8dc <Smooth_Ramp_Pressure+0x6c>)
 800d87e:	785a      	ldrb	r2, [r3, #1]
 800d880:	4b17      	ldr	r3, [pc, #92]	; (800d8e0 <Smooth_Ramp_Pressure+0x70>)
 800d882:	7c1b      	ldrb	r3, [r3, #16]
 800d884:	429a      	cmp	r2, r3
 800d886:	d122      	bne.n	800d8ce <Smooth_Ramp_Pressure+0x5e>
 800d888:	4b14      	ldr	r3, [pc, #80]	; (800d8dc <Smooth_Ramp_Pressure+0x6c>)
 800d88a:	785b      	ldrb	r3, [r3, #1]
 800d88c:	2b08      	cmp	r3, #8
 800d88e:	d91e      	bls.n	800d8ce <Smooth_Ramp_Pressure+0x5e>
 800d890:	4b12      	ldr	r3, [pc, #72]	; (800d8dc <Smooth_Ramp_Pressure+0x6c>)
 800d892:	785b      	ldrb	r3, [r3, #1]
 800d894:	2b0e      	cmp	r3, #14
 800d896:	d81a      	bhi.n	800d8ce <Smooth_Ramp_Pressure+0x5e>
 800d898:	4b10      	ldr	r3, [pc, #64]	; (800d8dc <Smooth_Ramp_Pressure+0x6c>)
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	2b1d      	cmp	r3, #29
 800d89e:	d916      	bls.n	800d8ce <Smooth_Ramp_Pressure+0x5e>
		{
			if(PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  < 2)
 800d8a0:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <Smooth_Ramp_Pressure+0x70>)
 800d8a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	dc11      	bgt.n	800d8ce <Smooth_Ramp_Pressure+0x5e>
			{
				if(Smooth_Ramp_Time_Val_Count > 2 )
 800d8aa:	4b0e      	ldr	r3, [pc, #56]	; (800d8e4 <Smooth_Ramp_Pressure+0x74>)
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	d907      	bls.n	800d8c2 <Smooth_Ramp_Pressure+0x52>
				{
					Smooth_Ramp_Time_Val = PC_CMV.PEEP_Val;
 800d8b2:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <Smooth_Ramp_Pressure+0x6c>)
 800d8b4:	785a      	ldrb	r2, [r3, #1]
 800d8b6:	4b0c      	ldr	r3, [pc, #48]	; (800d8e8 <Smooth_Ramp_Pressure+0x78>)
 800d8b8:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time     = Smooth_Ramp_Time_Val_Finished;
 800d8ba:	4b07      	ldr	r3, [pc, #28]	; (800d8d8 <Smooth_Ramp_Pressure+0x68>)
 800d8bc:	2201      	movs	r2, #1
 800d8be:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time_Val_Count++;
				}
			}
		}
    }
}
 800d8c0:	e005      	b.n	800d8ce <Smooth_Ramp_Pressure+0x5e>
					Smooth_Ramp_Time_Val_Count++;
 800d8c2:	4b08      	ldr	r3, [pc, #32]	; (800d8e4 <Smooth_Ramp_Pressure+0x74>)
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	4b06      	ldr	r3, [pc, #24]	; (800d8e4 <Smooth_Ramp_Pressure+0x74>)
 800d8cc:	701a      	strb	r2, [r3, #0]
}
 800d8ce:	bf00      	nop
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	20013b82 	.word	0x20013b82
 800d8dc:	200141e4 	.word	0x200141e4
 800d8e0:	20014300 	.word	0x20014300
 800d8e4:	200140c1 	.word	0x200140c1
 800d8e8:	20014058 	.word	0x20014058

0800d8ec <PIP_Not_Acheieved>:


void PIP_Not_Acheieved()
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
}
 800d8f0:	bf00      	nop
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <PIP_Acheieved>:


void PIP_Acheieved()
{
 800d8fa:	b480      	push	{r7}
 800d8fc:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800d8fe:	bf00      	nop
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <PIP_Control_Task>:
uint16_t Minimum_Inc_Value_2=100;
uint16_t Maximum_Inc_Value=140;


void PIP_Control_Task(void *argument)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
	while(1)
	{

		if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 800d910:	4b0b      	ldr	r3, [pc, #44]	; (800d940 <PIP_Control_Task+0x38>)
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d10c      	bne.n	800d932 <PIP_Control_Task+0x2a>
		{
			if(Common_Mode_Parameter._FIO2_Val  == 100)
 800d918:	4b0a      	ldr	r3, [pc, #40]	; (800d944 <PIP_Control_Task+0x3c>)
 800d91a:	78db      	ldrb	r3, [r3, #3]
 800d91c:	2b64      	cmp	r3, #100	; 0x64
 800d91e:	d103      	bne.n	800d928 <PIP_Control_Task+0x20>
			{
				Pressure_Mode_blower_control.BLOWER_DAC_VAL = 0;
 800d920:	4b09      	ldr	r3, [pc, #36]	; (800d948 <PIP_Control_Task+0x40>)
 800d922:	2200      	movs	r2, #0
 800d924:	801a      	strh	r2, [r3, #0]
 800d926:	e004      	b.n	800d932 <PIP_Control_Task+0x2a>
			}
			else
			{
				PIP_Control(Common_Mode_Parameter._PIP_Val);
 800d928:	4b06      	ldr	r3, [pc, #24]	; (800d944 <PIP_Control_Task+0x3c>)
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 f80f 	bl	800d950 <PIP_Control>
			}
		}

		vTaskDelay(PIP_control_Task.PIP_Control_Task_Delay);
 800d932:	4b06      	ldr	r3, [pc, #24]	; (800d94c <PIP_Control_Task+0x44>)
 800d934:	881b      	ldrh	r3, [r3, #0]
 800d936:	4618      	mov	r0, r3
 800d938:	f011 fc78 	bl	801f22c <vTaskDelay>
		if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 800d93c:	e7e8      	b.n	800d910 <PIP_Control_Task+0x8>
 800d93e:	bf00      	nop
 800d940:	20013f7c 	.word	0x20013f7c
 800d944:	20013ba4 	.word	0x20013ba4
 800d948:	20014030 	.word	0x20014030
 800d94c:	20013b04 	.word	0x20013b04

0800d950 <PIP_Control>:
}



void PIP_Control(uint8_t PIP_VAL)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	4603      	mov	r3, r0
 800d958:	71fb      	strb	r3, [r7, #7]
	PIP_control_Task.PIP_Control_Event_Occured++;
 800d95a:	4b39      	ldr	r3, [pc, #228]	; (800da40 <PIP_Control+0xf0>)
 800d95c:	885b      	ldrh	r3, [r3, #2]
 800d95e:	3301      	adds	r3, #1
 800d960:	b29a      	uxth	r2, r3
 800d962:	4b37      	ldr	r3, [pc, #220]	; (800da40 <PIP_Control+0xf0>)
 800d964:	805a      	strh	r2, [r3, #2]

	if (Pressure_sensor.Pressure_Val >= (PIP_VAL))
 800d966:	4b37      	ldr	r3, [pc, #220]	; (800da44 <PIP_Control+0xf4>)
 800d968:	789b      	ldrb	r3, [r3, #2]
 800d96a:	79fa      	ldrb	r2, [r7, #7]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d81c      	bhi.n	800d9aa <PIP_Control+0x5a>
	{
		PIP_Status = PIP_ACHEIVED;
 800d970:	4b35      	ldr	r3, [pc, #212]	; (800da48 <PIP_Control+0xf8>)
 800d972:	2201      	movs	r2, #1
 800d974:	701a      	strb	r2, [r3, #0]
		if(Read_Time_vs_Pressure==READ_TIME_OPEN)
 800d976:	4b35      	ldr	r3, [pc, #212]	; (800da4c <PIP_Control+0xfc>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d15b      	bne.n	800da36 <PIP_Control+0xe6>
		{
			PIP_Acheieved();
 800d97e:	f7ff ffbc 	bl	800d8fa <PIP_Acheieved>
			PIP_control_Task.PIP_Acheived_Time_Ms       = (PIP_control_Task.PIP_Control_Event_Occured*PIP_control_Task.PIP_Control_Task_Delay);
 800d982:	4b2f      	ldr	r3, [pc, #188]	; (800da40 <PIP_Control+0xf0>)
 800d984:	885a      	ldrh	r2, [r3, #2]
 800d986:	4b2e      	ldr	r3, [pc, #184]	; (800da40 <PIP_Control+0xf0>)
 800d988:	881b      	ldrh	r3, [r3, #0]
 800d98a:	fb12 f303 	smulbb	r3, r2, r3
 800d98e:	b29a      	uxth	r2, r3
 800d990:	4b2b      	ldr	r3, [pc, #172]	; (800da40 <PIP_Control+0xf0>)
 800d992:	809a      	strh	r2, [r3, #4]
			Pressure_Mode_blower_control.BLOWER_DAC_VAL = Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL;
 800d994:	4b2e      	ldr	r3, [pc, #184]	; (800da50 <PIP_Control+0x100>)
 800d996:	885a      	ldrh	r2, [r3, #2]
 800d998:	4b2d      	ldr	r3, [pc, #180]	; (800da50 <PIP_Control+0x100>)
 800d99a:	801a      	strh	r2, [r3, #0]
			Set_PIP_Status                              = SET_PIP_VALUE_ACHEIVED;
 800d99c:	4b2d      	ldr	r3, [pc, #180]	; (800da54 <PIP_Control+0x104>)
 800d99e:	2201      	movs	r2, #1
 800d9a0:	701a      	strb	r2, [r3, #0]
			Read_Time_vs_Pressure                       = READ_TIME_CLOSE;
 800d9a2:	4b2a      	ldr	r3, [pc, #168]	; (800da4c <PIP_Control+0xfc>)
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	701a      	strb	r2, [r3, #0]
			if(Pressure_Mode_blower_control.BLOWER_DAC_VAL >=4095)
				Pressure_Mode_blower_control.BLOWER_DAC_VAL=4095;

		}
	}
}
 800d9a8:	e045      	b.n	800da36 <PIP_Control+0xe6>
	else if (PIP_Status == PIP_NOT_ACHEIVED)
 800d9aa:	4b27      	ldr	r3, [pc, #156]	; (800da48 <PIP_Control+0xf8>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d141      	bne.n	800da36 <PIP_Control+0xe6>
		if (Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL >= Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL)
 800d9b2:	4b27      	ldr	r3, [pc, #156]	; (800da50 <PIP_Control+0x100>)
 800d9b4:	885a      	ldrh	r2, [r3, #2]
 800d9b6:	4b26      	ldr	r3, [pc, #152]	; (800da50 <PIP_Control+0x100>)
 800d9b8:	891b      	ldrh	r3, [r3, #8]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d307      	bcc.n	800d9ce <PIP_Control+0x7e>
			Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;
 800d9be:	4b24      	ldr	r3, [pc, #144]	; (800da50 <PIP_Control+0x100>)
 800d9c0:	891a      	ldrh	r2, [r3, #8]
 800d9c2:	4b23      	ldr	r3, [pc, #140]	; (800da50 <PIP_Control+0x100>)
 800d9c4:	805a      	strh	r2, [r3, #2]
			PIP_Status = PIP_ACHEIVED;
 800d9c6:	4b20      	ldr	r3, [pc, #128]	; (800da48 <PIP_Control+0xf8>)
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	701a      	strb	r2, [r3, #0]
}
 800d9cc:	e033      	b.n	800da36 <PIP_Control+0xe6>
		else if (Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL < Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL)
 800d9ce:	4b20      	ldr	r3, [pc, #128]	; (800da50 <PIP_Control+0x100>)
 800d9d0:	885a      	ldrh	r2, [r3, #2]
 800d9d2:	4b1f      	ldr	r3, [pc, #124]	; (800da50 <PIP_Control+0x100>)
 800d9d4:	891b      	ldrh	r3, [r3, #8]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d22d      	bcs.n	800da36 <PIP_Control+0xe6>
			Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800d9da:	4b1d      	ldr	r3, [pc, #116]	; (800da50 <PIP_Control+0x100>)
 800d9dc:	881a      	ldrh	r2, [r3, #0]
 800d9de:	4b1c      	ldr	r3, [pc, #112]	; (800da50 <PIP_Control+0x100>)
 800d9e0:	805a      	strh	r2, [r3, #2]
			Pressure_Mode_blower_control.BLOWER_DAC_VAL      = (Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL + (PIP_control_Task.Increase_Each_DAC_SET_CONST ));
 800d9e2:	4b1b      	ldr	r3, [pc, #108]	; (800da50 <PIP_Control+0x100>)
 800d9e4:	885a      	ldrh	r2, [r3, #2]
 800d9e6:	4b16      	ldr	r3, [pc, #88]	; (800da40 <PIP_Control+0xf0>)
 800d9e8:	88db      	ldrh	r3, [r3, #6]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	b29a      	uxth	r2, r3
 800d9ee:	4b18      	ldr	r3, [pc, #96]	; (800da50 <PIP_Control+0x100>)
 800d9f0:	801a      	strh	r2, [r3, #0]
			if( (Common_Mode_Parameter._PEEP_Val >= Smooth_Ramp_Time_Val) && (Common_Mode_Parameter._PIP_Val  >=30) )
 800d9f2:	4b19      	ldr	r3, [pc, #100]	; (800da58 <PIP_Control+0x108>)
 800d9f4:	785a      	ldrb	r2, [r3, #1]
 800d9f6:	4b19      	ldr	r3, [pc, #100]	; (800da5c <PIP_Control+0x10c>)
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d311      	bcc.n	800da22 <PIP_Control+0xd2>
 800d9fe:	4b16      	ldr	r3, [pc, #88]	; (800da58 <PIP_Control+0x108>)
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b1d      	cmp	r3, #29
 800da04:	d90d      	bls.n	800da22 <PIP_Control+0xd2>
				if (Pressure_Mode_blower_control.BLOWER_DAC_VAL >= Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL)
 800da06:	4b12      	ldr	r3, [pc, #72]	; (800da50 <PIP_Control+0x100>)
 800da08:	881a      	ldrh	r2, [r3, #0]
 800da0a:	4b11      	ldr	r3, [pc, #68]	; (800da50 <PIP_Control+0x100>)
 800da0c:	891b      	ldrh	r3, [r3, #8]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d307      	bcc.n	800da22 <PIP_Control+0xd2>
					Pressure_Mode_blower_control.BLOWER_DAC_VAL      = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;
 800da12:	4b0f      	ldr	r3, [pc, #60]	; (800da50 <PIP_Control+0x100>)
 800da14:	891a      	ldrh	r2, [r3, #8]
 800da16:	4b0e      	ldr	r3, [pc, #56]	; (800da50 <PIP_Control+0x100>)
 800da18:	801a      	strh	r2, [r3, #0]
					Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800da1a:	4b0d      	ldr	r3, [pc, #52]	; (800da50 <PIP_Control+0x100>)
 800da1c:	881a      	ldrh	r2, [r3, #0]
 800da1e:	4b0c      	ldr	r3, [pc, #48]	; (800da50 <PIP_Control+0x100>)
 800da20:	805a      	strh	r2, [r3, #2]
			if(Pressure_Mode_blower_control.BLOWER_DAC_VAL >=4095)
 800da22:	4b0b      	ldr	r3, [pc, #44]	; (800da50 <PIP_Control+0x100>)
 800da24:	881b      	ldrh	r3, [r3, #0]
 800da26:	f640 72fe 	movw	r2, #4094	; 0xffe
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d903      	bls.n	800da36 <PIP_Control+0xe6>
				Pressure_Mode_blower_control.BLOWER_DAC_VAL=4095;
 800da2e:	4b08      	ldr	r3, [pc, #32]	; (800da50 <PIP_Control+0x100>)
 800da30:	f640 72ff 	movw	r2, #4095	; 0xfff
 800da34:	801a      	strh	r2, [r3, #0]
}
 800da36:	bf00      	nop
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20013b04 	.word	0x20013b04
 800da44:	2001405c 	.word	0x2001405c
 800da48:	200140c2 	.word	0x200140c2
 800da4c:	20014371 	.word	0x20014371
 800da50:	20014030 	.word	0x20014030
 800da54:	200141f8 	.word	0x200141f8
 800da58:	20013ba4 	.word	0x20013ba4
 800da5c:	20014058 	.word	0x20014058

0800da60 <INCREASE_EACH_DAC_SET_CONST>:




void INCREASE_EACH_DAC_SET_CONST(uint8_t PIP_VAL, uint16_t Rise_Time_MS)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	4603      	mov	r3, r0
 800da68:	460a      	mov	r2, r1
 800da6a:	71fb      	strb	r3, [r7, #7]
 800da6c:	4613      	mov	r3, r2
 800da6e:	80bb      	strh	r3, [r7, #4]
	if(PIP_control_Task.PIP_Acheived_Time_Ms <=  (Rise_Time_MS-50) )
 800da70:	88bb      	ldrh	r3, [r7, #4]
 800da72:	3b31      	subs	r3, #49	; 0x31
 800da74:	4a0e      	ldr	r2, [pc, #56]	; (800dab0 <INCREASE_EACH_DAC_SET_CONST+0x50>)
 800da76:	8892      	ldrh	r2, [r2, #4]
 800da78:	4293      	cmp	r3, r2
 800da7a:	dd06      	ble.n	800da8a <INCREASE_EACH_DAC_SET_CONST+0x2a>
	{
		PIP_ACHEIVED_EARLY(PIP_VAL,Rise_Time_MS);
 800da7c:	88ba      	ldrh	r2, [r7, #4]
 800da7e:	79fb      	ldrb	r3, [r7, #7]
 800da80:	4611      	mov	r1, r2
 800da82:	4618      	mov	r0, r3
 800da84:	f000 f816 	bl	800dab4 <PIP_ACHEIVED_EARLY>
 800da88:	e00c      	b.n	800daa4 <INCREASE_EACH_DAC_SET_CONST+0x44>
	}
	else if(PIP_control_Task.PIP_Acheived_Time_Ms >=  (Rise_Time_MS+50) )
 800da8a:	88bb      	ldrh	r3, [r7, #4]
 800da8c:	3331      	adds	r3, #49	; 0x31
 800da8e:	4a08      	ldr	r2, [pc, #32]	; (800dab0 <INCREASE_EACH_DAC_SET_CONST+0x50>)
 800da90:	8892      	ldrh	r2, [r2, #4]
 800da92:	4293      	cmp	r3, r2
 800da94:	da04      	bge.n	800daa0 <INCREASE_EACH_DAC_SET_CONST+0x40>
	{
		PIP_ACHEIVED_SLOWLY(Rise_Time_MS);
 800da96:	88bb      	ldrh	r3, [r7, #4]
 800da98:	4618      	mov	r0, r3
 800da9a:	f000 f935 	bl	800dd08 <PIP_ACHEIVED_SLOWLY>
 800da9e:	e001      	b.n	800daa4 <INCREASE_EACH_DAC_SET_CONST+0x44>
	}
	else
	{
		PIP_ACHEIVED_NORMALY();
 800daa0:	f000 f9a2 	bl	800dde8 <PIP_ACHEIVED_NORMALY>
	}

	    _PIP_NOT_ACHEIVED();
 800daa4:	f000 f9ae 	bl	800de04 <_PIP_NOT_ACHEIVED>
}
 800daa8:	bf00      	nop
 800daaa:	3708      	adds	r7, #8
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	20013b04 	.word	0x20013b04

0800dab4 <PIP_ACHEIVED_EARLY>:




void PIP_ACHEIVED_EARLY(uint8_t PIP_VAL,uint16_t Rise_Time_MS)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	4603      	mov	r3, r0
 800dabc:	460a      	mov	r2, r1
 800dabe:	71fb      	strb	r3, [r7, #7]
 800dac0:	4613      	mov	r3, r2
 800dac2:	80bb      	strh	r3, [r7, #4]
	if(Set_PIP_Status == SET_PIP_VALUE_NOT_ACHEIVED)
 800dac4:	4b87      	ldr	r3, [pc, #540]	; (800dce4 <PIP_ACHEIVED_EARLY+0x230>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 8104 	beq.w	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
	{

	}
	else
	{
		PIP_control_Task.Early_Acheived_Ramp_Time_Percentage = (uint16_t) (  (PIP_control_Task.PIP_Acheived_Time_Ms  / ((float)Rise_Time_MS)) * 100);
 800dace:	4b86      	ldr	r3, [pc, #536]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dad0:	889b      	ldrh	r3, [r3, #4]
 800dad2:	ee07 3a90 	vmov	s15, r3
 800dad6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dada:	88bb      	ldrh	r3, [r7, #4]
 800dadc:	ee07 3a90 	vmov	s15, r3
 800dae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dae8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800dcec <PIP_ACHEIVED_EARLY+0x238>
 800daec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800daf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daf4:	ee17 3a90 	vmov	r3, s15
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	4b7a      	ldr	r3, [pc, #488]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dafe:	721a      	strb	r2, [r3, #8]

		if(PIP_control_Task.Early_Acheived_Ramp_Time_Percentage <= 70)
 800db00:	4b79      	ldr	r3, [pc, #484]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db02:	7a1b      	ldrb	r3, [r3, #8]
 800db04:	2b46      	cmp	r3, #70	; 0x46
 800db06:	d829      	bhi.n	800db5c <PIP_ACHEIVED_EARLY+0xa8>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST - 5 );
 800db08:	4b77      	ldr	r3, [pc, #476]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db0a:	88db      	ldrh	r3, [r3, #6]
 800db0c:	3b05      	subs	r3, #5
 800db0e:	b29a      	uxth	r2, r3
 800db10:	4b75      	ldr	r3, [pc, #468]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db12:	80da      	strh	r2, [r3, #6]

			if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 800db14:	4b76      	ldr	r3, [pc, #472]	; (800dcf0 <PIP_ACHEIVED_EARLY+0x23c>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	2b1d      	cmp	r3, #29
 800db1a:	d811      	bhi.n	800db40 <PIP_ACHEIVED_EARLY+0x8c>
 800db1c:	4b74      	ldr	r3, [pc, #464]	; (800dcf0 <PIP_ACHEIVED_EARLY+0x23c>)
 800db1e:	785b      	ldrb	r3, [r3, #1]
 800db20:	2b08      	cmp	r3, #8
 800db22:	d80d      	bhi.n	800db40 <PIP_ACHEIVED_EARLY+0x8c>
			{
			    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800db24:	4b70      	ldr	r3, [pc, #448]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db26:	88da      	ldrh	r2, [r3, #6]
 800db28:	4b72      	ldr	r3, [pc, #456]	; (800dcf4 <PIP_ACHEIVED_EARLY+0x240>)
 800db2a:	881b      	ldrh	r3, [r3, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d87b      	bhi.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>
			    {
			    	PIP_control_Task.Increase_Each_DAC_SET_CONST = Minimum_Inc_Value_1;
 800db30:	4b70      	ldr	r3, [pc, #448]	; (800dcf4 <PIP_ACHEIVED_EARLY+0x240>)
 800db32:	881a      	ldrh	r2, [r3, #0]
 800db34:	4b6c      	ldr	r3, [pc, #432]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db36:	80da      	strh	r2, [r3, #6]
			    	Need_PID_Task_Delay                          = YES;
 800db38:	4b6f      	ldr	r3, [pc, #444]	; (800dcf8 <PIP_ACHEIVED_EARLY+0x244>)
 800db3a:	2201      	movs	r2, #1
 800db3c:	701a      	strb	r2, [r3, #0]
			    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800db3e:	e073      	b.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>
			    }
			}
			else
			{
				if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_2)
 800db40:	4b69      	ldr	r3, [pc, #420]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db42:	88da      	ldrh	r2, [r3, #6]
 800db44:	4b6d      	ldr	r3, [pc, #436]	; (800dcfc <PIP_ACHEIVED_EARLY+0x248>)
 800db46:	881b      	ldrh	r3, [r3, #0]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d86d      	bhi.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>
				{
					PIP_control_Task.Increase_Each_DAC_SET_CONST = Minimum_Inc_Value_2;
 800db4c:	4b6b      	ldr	r3, [pc, #428]	; (800dcfc <PIP_ACHEIVED_EARLY+0x248>)
 800db4e:	881a      	ldrh	r2, [r3, #0]
 800db50:	4b65      	ldr	r3, [pc, #404]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db52:	80da      	strh	r2, [r3, #6]
					Need_PID_Task_Delay                          = YES;
 800db54:	4b68      	ldr	r3, [pc, #416]	; (800dcf8 <PIP_ACHEIVED_EARLY+0x244>)
 800db56:	2201      	movs	r2, #1
 800db58:	701a      	strb	r2, [r3, #0]
 800db5a:	e065      	b.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>



		}

		else if(  (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage <= 80) && (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage > 70) )
 800db5c:	4b62      	ldr	r3, [pc, #392]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db5e:	7a1b      	ldrb	r3, [r3, #8]
 800db60:	2b50      	cmp	r3, #80	; 0x50
 800db62:	d82e      	bhi.n	800dbc2 <PIP_ACHEIVED_EARLY+0x10e>
 800db64:	4b60      	ldr	r3, [pc, #384]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db66:	7a1b      	ldrb	r3, [r3, #8]
 800db68:	2b46      	cmp	r3, #70	; 0x46
 800db6a:	d92a      	bls.n	800dbc2 <PIP_ACHEIVED_EARLY+0x10e>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST - 2 );
 800db6c:	4b5e      	ldr	r3, [pc, #376]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db6e:	88db      	ldrh	r3, [r3, #6]
 800db70:	3b02      	subs	r3, #2
 800db72:	b29a      	uxth	r2, r3
 800db74:	4b5c      	ldr	r3, [pc, #368]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db76:	80da      	strh	r2, [r3, #6]
			if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 800db78:	4b5d      	ldr	r3, [pc, #372]	; (800dcf0 <PIP_ACHEIVED_EARLY+0x23c>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	2b1d      	cmp	r3, #29
 800db7e:	d811      	bhi.n	800dba4 <PIP_ACHEIVED_EARLY+0xf0>
 800db80:	4b5b      	ldr	r3, [pc, #364]	; (800dcf0 <PIP_ACHEIVED_EARLY+0x23c>)
 800db82:	785b      	ldrb	r3, [r3, #1]
 800db84:	2b08      	cmp	r3, #8
 800db86:	d80d      	bhi.n	800dba4 <PIP_ACHEIVED_EARLY+0xf0>
			{
			    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800db88:	4b57      	ldr	r3, [pc, #348]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db8a:	88da      	ldrh	r2, [r3, #6]
 800db8c:	4b59      	ldr	r3, [pc, #356]	; (800dcf4 <PIP_ACHEIVED_EARLY+0x240>)
 800db8e:	881b      	ldrh	r3, [r3, #0]
 800db90:	429a      	cmp	r2, r3
 800db92:	d815      	bhi.n	800dbc0 <PIP_ACHEIVED_EARLY+0x10c>
			    {
			    	PIP_control_Task.Increase_Each_DAC_SET_CONST = Minimum_Inc_Value_1;
 800db94:	4b57      	ldr	r3, [pc, #348]	; (800dcf4 <PIP_ACHEIVED_EARLY+0x240>)
 800db96:	881a      	ldrh	r2, [r3, #0]
 800db98:	4b53      	ldr	r3, [pc, #332]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800db9a:	80da      	strh	r2, [r3, #6]
			    	Need_PID_Task_Delay                          = YES;
 800db9c:	4b56      	ldr	r3, [pc, #344]	; (800dcf8 <PIP_ACHEIVED_EARLY+0x244>)
 800db9e:	2201      	movs	r2, #1
 800dba0:	701a      	strb	r2, [r3, #0]
			    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800dba2:	e00d      	b.n	800dbc0 <PIP_ACHEIVED_EARLY+0x10c>
			    }
			}
			else
			{
				if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_2)
 800dba4:	4b50      	ldr	r3, [pc, #320]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dba6:	88da      	ldrh	r2, [r3, #6]
 800dba8:	4b54      	ldr	r3, [pc, #336]	; (800dcfc <PIP_ACHEIVED_EARLY+0x248>)
 800dbaa:	881b      	ldrh	r3, [r3, #0]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d83a      	bhi.n	800dc26 <PIP_ACHEIVED_EARLY+0x172>
				{
					PIP_control_Task.Increase_Each_DAC_SET_CONST = Minimum_Inc_Value_2;
 800dbb0:	4b52      	ldr	r3, [pc, #328]	; (800dcfc <PIP_ACHEIVED_EARLY+0x248>)
 800dbb2:	881a      	ldrh	r2, [r3, #0]
 800dbb4:	4b4c      	ldr	r3, [pc, #304]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dbb6:	80da      	strh	r2, [r3, #6]
					Need_PID_Task_Delay                          = YES;
 800dbb8:	4b4f      	ldr	r3, [pc, #316]	; (800dcf8 <PIP_ACHEIVED_EARLY+0x244>)
 800dbba:	2201      	movs	r2, #1
 800dbbc:	701a      	strb	r2, [r3, #0]
			if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 800dbbe:	e032      	b.n	800dc26 <PIP_ACHEIVED_EARLY+0x172>
 800dbc0:	e031      	b.n	800dc26 <PIP_ACHEIVED_EARLY+0x172>
				}
			}
		}

		else if(  (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage <= 90) && (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage > 80) )
 800dbc2:	4b49      	ldr	r3, [pc, #292]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dbc4:	7a1b      	ldrb	r3, [r3, #8]
 800dbc6:	2b5a      	cmp	r3, #90	; 0x5a
 800dbc8:	d82e      	bhi.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>
 800dbca:	4b47      	ldr	r3, [pc, #284]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dbcc:	7a1b      	ldrb	r3, [r3, #8]
 800dbce:	2b50      	cmp	r3, #80	; 0x50
 800dbd0:	d92a      	bls.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST - 1 );
 800dbd2:	4b45      	ldr	r3, [pc, #276]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dbd4:	88db      	ldrh	r3, [r3, #6]
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	4b43      	ldr	r3, [pc, #268]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dbdc:	80da      	strh	r2, [r3, #6]

			if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 800dbde:	4b44      	ldr	r3, [pc, #272]	; (800dcf0 <PIP_ACHEIVED_EARLY+0x23c>)
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	2b1d      	cmp	r3, #29
 800dbe4:	d811      	bhi.n	800dc0a <PIP_ACHEIVED_EARLY+0x156>
 800dbe6:	4b42      	ldr	r3, [pc, #264]	; (800dcf0 <PIP_ACHEIVED_EARLY+0x23c>)
 800dbe8:	785b      	ldrb	r3, [r3, #1]
 800dbea:	2b08      	cmp	r3, #8
 800dbec:	d80d      	bhi.n	800dc0a <PIP_ACHEIVED_EARLY+0x156>
			{
			    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800dbee:	4b3e      	ldr	r3, [pc, #248]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dbf0:	88da      	ldrh	r2, [r3, #6]
 800dbf2:	4b40      	ldr	r3, [pc, #256]	; (800dcf4 <PIP_ACHEIVED_EARLY+0x240>)
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d816      	bhi.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>
			    {
			    	PIP_control_Task.Increase_Each_DAC_SET_CONST = Minimum_Inc_Value_1;
 800dbfa:	4b3e      	ldr	r3, [pc, #248]	; (800dcf4 <PIP_ACHEIVED_EARLY+0x240>)
 800dbfc:	881a      	ldrh	r2, [r3, #0]
 800dbfe:	4b3a      	ldr	r3, [pc, #232]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc00:	80da      	strh	r2, [r3, #6]
			    	Need_PID_Task_Delay                          = YES;
 800dc02:	4b3d      	ldr	r3, [pc, #244]	; (800dcf8 <PIP_ACHEIVED_EARLY+0x244>)
 800dc04:	2201      	movs	r2, #1
 800dc06:	701a      	strb	r2, [r3, #0]
			    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800dc08:	e00e      	b.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>
			    }
			}
			else
			{
				if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_2)
 800dc0a:	4b37      	ldr	r3, [pc, #220]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc0c:	88da      	ldrh	r2, [r3, #6]
 800dc0e:	4b3b      	ldr	r3, [pc, #236]	; (800dcfc <PIP_ACHEIVED_EARLY+0x248>)
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d808      	bhi.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>
				{
					PIP_control_Task.Increase_Each_DAC_SET_CONST = Minimum_Inc_Value_2;
 800dc16:	4b39      	ldr	r3, [pc, #228]	; (800dcfc <PIP_ACHEIVED_EARLY+0x248>)
 800dc18:	881a      	ldrh	r2, [r3, #0]
 800dc1a:	4b33      	ldr	r3, [pc, #204]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc1c:	80da      	strh	r2, [r3, #6]
					Need_PID_Task_Delay                          = YES;
 800dc1e:	4b36      	ldr	r3, [pc, #216]	; (800dcf8 <PIP_ACHEIVED_EARLY+0x244>)
 800dc20:	2201      	movs	r2, #1
 800dc22:	701a      	strb	r2, [r3, #0]
 800dc24:	e000      	b.n	800dc28 <PIP_ACHEIVED_EARLY+0x174>
			if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 800dc26:	bf00      	nop
			}
		}



		if(Need_PID_Task_Delay == YES)
 800dc28:	4b33      	ldr	r3, [pc, #204]	; (800dcf8 <PIP_ACHEIVED_EARLY+0x244>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d152      	bne.n	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
		{
			if(PIP_Average_Parameter.Maximum_PIP_Acheived  < PIP_VAL)
 800dc30:	4b33      	ldr	r3, [pc, #204]	; (800dd00 <PIP_ACHEIVED_EARLY+0x24c>)
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	79fa      	ldrb	r2, [r7, #7]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d914      	bls.n	800dc64 <PIP_ACHEIVED_EARLY+0x1b0>
			{
				PIP_control_Task.Low_PIP_Count++;
 800dc3a:	4b2b      	ldr	r3, [pc, #172]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc3c:	7a9b      	ldrb	r3, [r3, #10]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	4b29      	ldr	r3, [pc, #164]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc44:	729a      	strb	r2, [r3, #10]
				 if(PIP_control_Task.Low_PIP_Count>=5)
 800dc46:	4b28      	ldr	r3, [pc, #160]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc48:	7a9b      	ldrb	r3, [r3, #10]
 800dc4a:	2b04      	cmp	r3, #4
 800dc4c:	d943      	bls.n	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
				 {
					PIP_control_Task.PIP_Control_Task_Delay = PIP_control_Task.PIP_Control_Task_Delay;
 800dc4e:	4b26      	ldr	r3, [pc, #152]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc50:	881a      	ldrh	r2, [r3, #0]
 800dc52:	4b25      	ldr	r3, [pc, #148]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc54:	801a      	strh	r2, [r3, #0]
					PIP_control_Task.Low_PIP_Count=6;
 800dc56:	4b24      	ldr	r3, [pc, #144]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc58:	2206      	movs	r2, #6
 800dc5a:	729a      	strb	r2, [r3, #10]
					Tune_PID_Task_Delay = T_LOCK;
 800dc5c:	4b29      	ldr	r3, [pc, #164]	; (800dd04 <PIP_ACHEIVED_EARLY+0x250>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	701a      	strb	r2, [r3, #0]
				}
			}
		}

	}
}
 800dc62:	e038      	b.n	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
			else if(PIP_control_Task.Early_Acheived_Ramp_Time_Percentage  >= PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage)
 800dc64:	4b20      	ldr	r3, [pc, #128]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc66:	7a1a      	ldrb	r2, [r3, #8]
 800dc68:	4b1f      	ldr	r3, [pc, #124]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc6a:	7a5b      	ldrb	r3, [r3, #9]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d332      	bcc.n	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
				if(Tune_PID_Task_Delay == T_OPEN)
 800dc70:	4b24      	ldr	r3, [pc, #144]	; (800dd04 <PIP_ACHEIVED_EARLY+0x250>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d12e      	bne.n	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
					  if(PIP_control_Task.Early_Acheived_Ramp_Time_Percentage<60)
 800dc78:	4b1b      	ldr	r3, [pc, #108]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc7a:	7a1b      	ldrb	r3, [r3, #8]
 800dc7c:	2b3b      	cmp	r3, #59	; 0x3b
 800dc7e:	d806      	bhi.n	800dc8e <PIP_ACHEIVED_EARLY+0x1da>
						  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay+10);
 800dc80:	4b19      	ldr	r3, [pc, #100]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc82:	881b      	ldrh	r3, [r3, #0]
 800dc84:	330a      	adds	r3, #10
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	4b17      	ldr	r3, [pc, #92]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc8a:	801a      	strh	r2, [r3, #0]
}
 800dc8c:	e023      	b.n	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
					  else if( (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage<70) && (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage>=60) )
 800dc8e:	4b16      	ldr	r3, [pc, #88]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc90:	7a1b      	ldrb	r3, [r3, #8]
 800dc92:	2b45      	cmp	r3, #69	; 0x45
 800dc94:	d80a      	bhi.n	800dcac <PIP_ACHEIVED_EARLY+0x1f8>
 800dc96:	4b14      	ldr	r3, [pc, #80]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dc98:	7a1b      	ldrb	r3, [r3, #8]
 800dc9a:	2b3b      	cmp	r3, #59	; 0x3b
 800dc9c:	d906      	bls.n	800dcac <PIP_ACHEIVED_EARLY+0x1f8>
						  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay+6);
 800dc9e:	4b12      	ldr	r3, [pc, #72]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	3306      	adds	r3, #6
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	4b10      	ldr	r3, [pc, #64]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dca8:	801a      	strh	r2, [r3, #0]
 800dcaa:	e014      	b.n	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
					  else if( (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage<=80) && (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage=70) )
 800dcac:	4b0e      	ldr	r3, [pc, #56]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dcae:	7a1b      	ldrb	r3, [r3, #8]
 800dcb0:	2b50      	cmp	r3, #80	; 0x50
 800dcb2:	d809      	bhi.n	800dcc8 <PIP_ACHEIVED_EARLY+0x214>
 800dcb4:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dcb6:	2246      	movs	r2, #70	; 0x46
 800dcb8:	721a      	strb	r2, [r3, #8]
						  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay+4);
 800dcba:	4b0b      	ldr	r3, [pc, #44]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dcbc:	881b      	ldrh	r3, [r3, #0]
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	4b09      	ldr	r3, [pc, #36]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dcc4:	801a      	strh	r2, [r3, #0]
 800dcc6:	e006      	b.n	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
						  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay+1);
 800dcc8:	4b07      	ldr	r3, [pc, #28]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dcca:	881b      	ldrh	r3, [r3, #0]
 800dccc:	3301      	adds	r3, #1
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	4b05      	ldr	r3, [pc, #20]	; (800dce8 <PIP_ACHEIVED_EARLY+0x234>)
 800dcd2:	801a      	strh	r2, [r3, #0]
}
 800dcd4:	e7ff      	b.n	800dcd6 <PIP_ACHEIVED_EARLY+0x222>
 800dcd6:	bf00      	nop
 800dcd8:	370c      	adds	r7, #12
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr
 800dce2:	bf00      	nop
 800dce4:	200141f8 	.word	0x200141f8
 800dce8:	20013b04 	.word	0x20013b04
 800dcec:	42c80000 	.word	0x42c80000
 800dcf0:	20013ba4 	.word	0x20013ba4
 800dcf4:	2000000a 	.word	0x2000000a
 800dcf8:	200140f6 	.word	0x200140f6
 800dcfc:	2000000c 	.word	0x2000000c
 800dd00:	20013b70 	.word	0x20013b70
 800dd04:	20013c88 	.word	0x20013c88

0800dd08 <PIP_ACHEIVED_SLOWLY>:




void PIP_ACHEIVED_SLOWLY(uint16_t Rise_Time_MS)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	4603      	mov	r3, r0
 800dd10:	80fb      	strh	r3, [r7, #6]
	PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage = (uint16_t) ((  PIP_control_Task.PIP_Acheived_Time_Ms  / ((float)Rise_Time_MS) ) * 100);
 800dd12:	4b32      	ldr	r3, [pc, #200]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd14:	889b      	ldrh	r3, [r3, #4]
 800dd16:	ee07 3a90 	vmov	s15, r3
 800dd1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dd1e:	88fb      	ldrh	r3, [r7, #6]
 800dd20:	ee07 3a90 	vmov	s15, r3
 800dd24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dd28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd2c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800dde0 <PIP_ACHEIVED_SLOWLY+0xd8>
 800dd30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd38:	ee17 3a90 	vmov	r3, s15
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	4b27      	ldr	r3, [pc, #156]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd40:	819a      	strh	r2, [r3, #12]




	if( (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage >= 130)  )
 800dd42:	4b26      	ldr	r3, [pc, #152]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd44:	899b      	ldrh	r3, [r3, #12]
 800dd46:	2b81      	cmp	r3, #129	; 0x81
 800dd48:	d910      	bls.n	800dd6c <PIP_ACHEIVED_SLOWLY+0x64>
	{
		PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST + 5 );
 800dd4a:	4b24      	ldr	r3, [pc, #144]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd4c:	88db      	ldrh	r3, [r3, #6]
 800dd4e:	3305      	adds	r3, #5
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	4b22      	ldr	r3, [pc, #136]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd54:	80da      	strh	r2, [r3, #6]
		if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800dd56:	4b21      	ldr	r3, [pc, #132]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd58:	88da      	ldrh	r2, [r3, #6]
 800dd5a:	4b22      	ldr	r3, [pc, #136]	; (800dde4 <PIP_ACHEIVED_SLOWLY+0xdc>)
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d336      	bcc.n	800ddd0 <PIP_ACHEIVED_SLOWLY+0xc8>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = Maximum_Inc_Value;
 800dd62:	4b20      	ldr	r3, [pc, #128]	; (800dde4 <PIP_ACHEIVED_SLOWLY+0xdc>)
 800dd64:	881a      	ldrh	r2, [r3, #0]
 800dd66:	4b1d      	ldr	r3, [pc, #116]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd68:	80da      	strh	r2, [r3, #6]
			PIP_control_Task.Increase_Each_DAC_SET_CONST = Maximum_Inc_Value;

		}
	}

}
 800dd6a:	e031      	b.n	800ddd0 <PIP_ACHEIVED_SLOWLY+0xc8>
	else if(  (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage> 120) && (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage <130) )
 800dd6c:	4b1b      	ldr	r3, [pc, #108]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd6e:	899b      	ldrh	r3, [r3, #12]
 800dd70:	2b78      	cmp	r3, #120	; 0x78
 800dd72:	d914      	bls.n	800dd9e <PIP_ACHEIVED_SLOWLY+0x96>
 800dd74:	4b19      	ldr	r3, [pc, #100]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd76:	899b      	ldrh	r3, [r3, #12]
 800dd78:	2b81      	cmp	r3, #129	; 0x81
 800dd7a:	d810      	bhi.n	800dd9e <PIP_ACHEIVED_SLOWLY+0x96>
		PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST + 2 );
 800dd7c:	4b17      	ldr	r3, [pc, #92]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd7e:	88db      	ldrh	r3, [r3, #6]
 800dd80:	3302      	adds	r3, #2
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	4b15      	ldr	r3, [pc, #84]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd86:	80da      	strh	r2, [r3, #6]
		if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800dd88:	4b14      	ldr	r3, [pc, #80]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd8a:	88da      	ldrh	r2, [r3, #6]
 800dd8c:	4b15      	ldr	r3, [pc, #84]	; (800dde4 <PIP_ACHEIVED_SLOWLY+0xdc>)
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d31d      	bcc.n	800ddd0 <PIP_ACHEIVED_SLOWLY+0xc8>
			PIP_control_Task.Increase_Each_DAC_SET_CONST = Maximum_Inc_Value;
 800dd94:	4b13      	ldr	r3, [pc, #76]	; (800dde4 <PIP_ACHEIVED_SLOWLY+0xdc>)
 800dd96:	881a      	ldrh	r2, [r3, #0]
 800dd98:	4b10      	ldr	r3, [pc, #64]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dd9a:	80da      	strh	r2, [r3, #6]
		if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800dd9c:	e018      	b.n	800ddd0 <PIP_ACHEIVED_SLOWLY+0xc8>
	else if( (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage<=120) && (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage >= 110) )
 800dd9e:	4b0f      	ldr	r3, [pc, #60]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dda0:	899b      	ldrh	r3, [r3, #12]
 800dda2:	2b78      	cmp	r3, #120	; 0x78
 800dda4:	d814      	bhi.n	800ddd0 <PIP_ACHEIVED_SLOWLY+0xc8>
 800dda6:	4b0d      	ldr	r3, [pc, #52]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800dda8:	899b      	ldrh	r3, [r3, #12]
 800ddaa:	2b6d      	cmp	r3, #109	; 0x6d
 800ddac:	d910      	bls.n	800ddd0 <PIP_ACHEIVED_SLOWLY+0xc8>
		PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST + 1 );
 800ddae:	4b0b      	ldr	r3, [pc, #44]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800ddb0:	88db      	ldrh	r3, [r3, #6]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	4b09      	ldr	r3, [pc, #36]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800ddb8:	80da      	strh	r2, [r3, #6]
		if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800ddba:	4b08      	ldr	r3, [pc, #32]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800ddbc:	88da      	ldrh	r2, [r3, #6]
 800ddbe:	4b09      	ldr	r3, [pc, #36]	; (800dde4 <PIP_ACHEIVED_SLOWLY+0xdc>)
 800ddc0:	881b      	ldrh	r3, [r3, #0]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d304      	bcc.n	800ddd0 <PIP_ACHEIVED_SLOWLY+0xc8>
			PIP_control_Task.Increase_Each_DAC_SET_CONST = Maximum_Inc_Value;
 800ddc6:	4b07      	ldr	r3, [pc, #28]	; (800dde4 <PIP_ACHEIVED_SLOWLY+0xdc>)
 800ddc8:	881a      	ldrh	r2, [r3, #0]
 800ddca:	4b04      	ldr	r3, [pc, #16]	; (800dddc <PIP_ACHEIVED_SLOWLY+0xd4>)
 800ddcc:	80da      	strh	r2, [r3, #6]
}
 800ddce:	e7ff      	b.n	800ddd0 <PIP_ACHEIVED_SLOWLY+0xc8>
 800ddd0:	bf00      	nop
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	20013b04 	.word	0x20013b04
 800dde0:	42c80000 	.word	0x42c80000
 800dde4:	2000000e 	.word	0x2000000e

0800dde8 <PIP_ACHEIVED_NORMALY>:


void PIP_ACHEIVED_NORMALY()
{
 800dde8:	b480      	push	{r7}
 800ddea:	af00      	add	r7, sp, #0
	PIP_control_Task.Increase_Each_DAC_SET_CONST = PIP_control_Task.Increase_Each_DAC_SET_CONST;
 800ddec:	4b04      	ldr	r3, [pc, #16]	; (800de00 <PIP_ACHEIVED_NORMALY+0x18>)
 800ddee:	88da      	ldrh	r2, [r3, #6]
 800ddf0:	4b03      	ldr	r3, [pc, #12]	; (800de00 <PIP_ACHEIVED_NORMALY+0x18>)
 800ddf2:	80da      	strh	r2, [r3, #6]
}
 800ddf4:	bf00      	nop
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	20013b04 	.word	0x20013b04

0800de04 <_PIP_NOT_ACHEIVED>:


void _PIP_NOT_ACHEIVED()
{
 800de04:	b480      	push	{r7}
 800de06:	af00      	add	r7, sp, #0
	if(Set_PIP_Status == SET_PIP_VALUE_NOT_ACHEIVED)
 800de08:	4b0c      	ldr	r3, [pc, #48]	; (800de3c <_PIP_NOT_ACHEIVED+0x38>)
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d10f      	bne.n	800de30 <_PIP_NOT_ACHEIVED+0x2c>
	{
		PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST + 1 );
 800de10:	4b0b      	ldr	r3, [pc, #44]	; (800de40 <_PIP_NOT_ACHEIVED+0x3c>)
 800de12:	88db      	ldrh	r3, [r3, #6]
 800de14:	3301      	adds	r3, #1
 800de16:	b29a      	uxth	r2, r3
 800de18:	4b09      	ldr	r3, [pc, #36]	; (800de40 <_PIP_NOT_ACHEIVED+0x3c>)
 800de1a:	80da      	strh	r2, [r3, #6]
		if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800de1c:	4b08      	ldr	r3, [pc, #32]	; (800de40 <_PIP_NOT_ACHEIVED+0x3c>)
 800de1e:	88da      	ldrh	r2, [r3, #6]
 800de20:	4b08      	ldr	r3, [pc, #32]	; (800de44 <_PIP_NOT_ACHEIVED+0x40>)
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	d303      	bcc.n	800de30 <_PIP_NOT_ACHEIVED+0x2c>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = Maximum_Inc_Value;
 800de28:	4b06      	ldr	r3, [pc, #24]	; (800de44 <_PIP_NOT_ACHEIVED+0x40>)
 800de2a:	881a      	ldrh	r2, [r3, #0]
 800de2c:	4b04      	ldr	r3, [pc, #16]	; (800de40 <_PIP_NOT_ACHEIVED+0x3c>)
 800de2e:	80da      	strh	r2, [r3, #6]

		}
	}
}
 800de30:	bf00      	nop
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	200141f8 	.word	0x200141f8
 800de40:	20013b04 	.word	0x20013b04
 800de44:	2000000e 	.word	0x2000000e

0800de48 <BLOWER_ENDING_DAC_SIGNAL_TUNE>:



void BLOWER_ENDING_DAC_SIGNAL_TUNE(uint8_t PIP_VAL,uint8_t Respiratory_Rate,uint8_t E_Ratio,uint8_t Rise_Time)
{
 800de48:	b490      	push	{r4, r7}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	4604      	mov	r4, r0
 800de50:	4608      	mov	r0, r1
 800de52:	4611      	mov	r1, r2
 800de54:	461a      	mov	r2, r3
 800de56:	4623      	mov	r3, r4
 800de58:	71fb      	strb	r3, [r7, #7]
 800de5a:	4603      	mov	r3, r0
 800de5c:	71bb      	strb	r3, [r7, #6]
 800de5e:	460b      	mov	r3, r1
 800de60:	717b      	strb	r3, [r7, #5]
 800de62:	4613      	mov	r3, r2
 800de64:	713b      	strb	r3, [r7, #4]

	static uint8_t count1,count2;

	if(Respiratory_Rate>=30 || Rise_Time>80 || (E_Ratio>4))
 800de66:	79bb      	ldrb	r3, [r7, #6]
 800de68:	2b1d      	cmp	r3, #29
 800de6a:	d805      	bhi.n	800de78 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x30>
 800de6c:	793b      	ldrb	r3, [r7, #4]
 800de6e:	2b50      	cmp	r3, #80	; 0x50
 800de70:	d802      	bhi.n	800de78 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x30>
 800de72:	797b      	ldrb	r3, [r7, #5]
 800de74:	2b04      	cmp	r3, #4
 800de76:	d951      	bls.n	800df1c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0xd4>
    {
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))
 800de78:	4b46      	ldr	r3, [pc, #280]	; (800df94 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x14c>)
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	461a      	mov	r2, r3
 800de7e:	79fb      	ldrb	r3, [r7, #7]
 800de80:	3301      	adds	r3, #1
 800de82:	429a      	cmp	r2, r3
 800de84:	dd1f      	ble.n	800dec6 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x7e>
			{
		    	count1++;
 800de86:	4b44      	ldr	r3, [pc, #272]	; (800df98 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x150>)
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	3301      	adds	r3, #1
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	4b42      	ldr	r3, [pc, #264]	; (800df98 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x150>)
 800de90:	701a      	strb	r2, [r3, #0]
		    	count2=0;
 800de92:	4b42      	ldr	r3, [pc, #264]	; (800df9c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x154>)
 800de94:	2200      	movs	r2, #0
 800de96:	701a      	strb	r2, [r3, #0]
		    	if(count1>2)
 800de98:	4b3f      	ldr	r3, [pc, #252]	; (800df98 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x150>)
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d973      	bls.n	800df88 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x140>
		    	{
		    		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=(Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL-1);
 800dea0:	4b3f      	ldr	r3, [pc, #252]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800dea2:	891b      	ldrh	r3, [r3, #8]
 800dea4:	3b01      	subs	r3, #1
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	4b3d      	ldr	r3, [pc, #244]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800deaa:	811a      	strh	r2, [r3, #8]
		    		count1=0;
 800deac:	4b3a      	ldr	r3, [pc, #232]	; (800df98 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x150>)
 800deae:	2200      	movs	r2, #0
 800deb0:	701a      	strb	r2, [r3, #0]
					if(Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL<=500)
 800deb2:	4b3b      	ldr	r3, [pc, #236]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800deb4:	891b      	ldrh	r3, [r3, #8]
 800deb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800deba:	d865      	bhi.n	800df88 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x140>
					{
						Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=500;
 800debc:	4b38      	ldr	r3, [pc, #224]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800debe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dec2:	811a      	strh	r2, [r3, #8]
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))
 800dec4:	e060      	b.n	800df88 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x140>
					}
		    	}
			}
			else if(PIP_Average_Parameter.Maximum_PIP_Acheived < PIP_VAL)
 800dec6:	4b33      	ldr	r3, [pc, #204]	; (800df94 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x14c>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	79fa      	ldrb	r2, [r7, #7]
 800decc:	429a      	cmp	r2, r3
 800dece:	d920      	bls.n	800df12 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0xca>
			{
				count2++;
 800ded0:	4b32      	ldr	r3, [pc, #200]	; (800df9c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x154>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	3301      	adds	r3, #1
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	4b30      	ldr	r3, [pc, #192]	; (800df9c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x154>)
 800deda:	701a      	strb	r2, [r3, #0]
				count1=0;
 800dedc:	4b2e      	ldr	r3, [pc, #184]	; (800df98 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x150>)
 800dede:	2200      	movs	r2, #0
 800dee0:	701a      	strb	r2, [r3, #0]
				if(count2>2)
 800dee2:	4b2e      	ldr	r3, [pc, #184]	; (800df9c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x154>)
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b02      	cmp	r3, #2
 800dee8:	d94e      	bls.n	800df88 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x140>
				{
					Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL+1;
 800deea:	4b2d      	ldr	r3, [pc, #180]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800deec:	891b      	ldrh	r3, [r3, #8]
 800deee:	3301      	adds	r3, #1
 800def0:	b29a      	uxth	r2, r3
 800def2:	4b2b      	ldr	r3, [pc, #172]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800def4:	811a      	strh	r2, [r3, #8]
				count2=0;
 800def6:	4b29      	ldr	r3, [pc, #164]	; (800df9c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x154>)
 800def8:	2200      	movs	r2, #0
 800defa:	701a      	strb	r2, [r3, #0]
				if(  Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL  >= 4095)
 800defc:	4b28      	ldr	r3, [pc, #160]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800defe:	891b      	ldrh	r3, [r3, #8]
 800df00:	f640 72fe 	movw	r2, #4094	; 0xffe
 800df04:	4293      	cmp	r3, r2
 800df06:	d93f      	bls.n	800df88 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x140>
					Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = 4095;
 800df08:	4b25      	ldr	r3, [pc, #148]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df0a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800df0e:	811a      	strh	r2, [r3, #8]
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))
 800df10:	e03a      	b.n	800df88 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x140>
				}
			}
			else
			{
				Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;
 800df12:	4b23      	ldr	r3, [pc, #140]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df14:	891a      	ldrh	r2, [r3, #8]
 800df16:	4b22      	ldr	r3, [pc, #136]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df18:	811a      	strh	r2, [r3, #8]
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))
 800df1a:	e035      	b.n	800df88 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x140>
			}
    }

 else if(Respiratory_Rate < 30 || Rise_Time <= 80)
 800df1c:	79bb      	ldrb	r3, [r7, #6]
 800df1e:	2b1d      	cmp	r3, #29
 800df20:	d902      	bls.n	800df28 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0xe0>
 800df22:	793b      	ldrb	r3, [r7, #4]
 800df24:	2b50      	cmp	r3, #80	; 0x50
 800df26:	d830      	bhi.n	800df8a <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x142>
 {
	if(PIP_Average_Parameter.PIP_AVG_VAL > PIP_VAL)
 800df28:	4b1a      	ldr	r3, [pc, #104]	; (800df94 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x14c>)
 800df2a:	7b1b      	ldrb	r3, [r3, #12]
 800df2c:	79fa      	ldrb	r2, [r7, #7]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d20f      	bcs.n	800df52 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x10a>
	{
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = (Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL-5);
 800df32:	4b1b      	ldr	r3, [pc, #108]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df34:	891b      	ldrh	r3, [r3, #8]
 800df36:	3b05      	subs	r3, #5
 800df38:	b29a      	uxth	r2, r3
 800df3a:	4b19      	ldr	r3, [pc, #100]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df3c:	811a      	strh	r2, [r3, #8]
		if(Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL<=500)
 800df3e:	4b18      	ldr	r3, [pc, #96]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df40:	891b      	ldrh	r3, [r3, #8]
 800df42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800df46:	d820      	bhi.n	800df8a <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x142>
			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=500;
 800df48:	4b15      	ldr	r3, [pc, #84]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800df4e:	811a      	strh	r2, [r3, #8]
	{
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;

	}
 }
}
 800df50:	e01b      	b.n	800df8a <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x142>
	else if(PIP_Average_Parameter.PIP_AVG_VAL < PIP_VAL)
 800df52:	4b10      	ldr	r3, [pc, #64]	; (800df94 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x14c>)
 800df54:	7b1b      	ldrb	r3, [r3, #12]
 800df56:	79fa      	ldrb	r2, [r7, #7]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d910      	bls.n	800df7e <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x136>
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = (Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL+5);
 800df5c:	4b10      	ldr	r3, [pc, #64]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df5e:	891b      	ldrh	r3, [r3, #8]
 800df60:	3305      	adds	r3, #5
 800df62:	b29a      	uxth	r2, r3
 800df64:	4b0e      	ldr	r3, [pc, #56]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df66:	811a      	strh	r2, [r3, #8]
		if(Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL >= 4095)
 800df68:	4b0d      	ldr	r3, [pc, #52]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df6a:	891b      	ldrh	r3, [r3, #8]
 800df6c:	f640 72fe 	movw	r2, #4094	; 0xffe
 800df70:	4293      	cmp	r3, r2
 800df72:	d90a      	bls.n	800df8a <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x142>
			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = 4095;
 800df74:	4b0a      	ldr	r3, [pc, #40]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df76:	f640 72ff 	movw	r2, #4095	; 0xfff
 800df7a:	811a      	strh	r2, [r3, #8]
}
 800df7c:	e005      	b.n	800df8a <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x142>
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;
 800df7e:	4b08      	ldr	r3, [pc, #32]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df80:	891a      	ldrh	r2, [r3, #8]
 800df82:	4b07      	ldr	r3, [pc, #28]	; (800dfa0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x158>)
 800df84:	811a      	strh	r2, [r3, #8]
}
 800df86:	e000      	b.n	800df8a <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x142>
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))
 800df88:	bf00      	nop
}
 800df8a:	bf00      	nop
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bc90      	pop	{r4, r7}
 800df92:	4770      	bx	lr
 800df94:	20013b70 	.word	0x20013b70
 800df98:	200001f0 	.word	0x200001f0
 800df9c:	200001f1 	.word	0x200001f1
 800dfa0:	20014030 	.word	0x20014030

0800dfa4 <PSV_Mode_Packet_Data>:
static void INSPIRATION_PROCESS_PSV();
static void Patient_Circuit_Disconnected_Alert_PSV();


void PSV_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
	 PSV.PRESSURE_SUPPORT_Val             = Receive_Graph_Packet->PIP_PS_Phigh;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	791b      	ldrb	r3, [r3, #4]
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	4b2b      	ldr	r3, [pc, #172]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800dfb4:	801a      	strh	r2, [r3, #0]
	 PSV.PEEP_Val                         = Receive_Graph_Packet->PEEP_CPAP_Plow;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	795a      	ldrb	r2, [r3, #5]
 800dfba:	4b29      	ldr	r3, [pc, #164]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800dfbc:	709a      	strb	r2, [r3, #2]

	 PSV.TRIG_TYPE                        = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	78db      	ldrb	r3, [r3, #3]
 800dfc2:	099b      	lsrs	r3, r3, #6
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	4b24      	ldr	r3, [pc, #144]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800dfd0:	809a      	strh	r2, [r3, #4]
	 PSV.TRIG_LMT                         = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	7c1b      	ldrb	r3, [r3, #16]
 800dfd6:	4a23      	ldr	r2, [pc, #140]	; (800e064 <PSV_Mode_Packet_Data+0xc0>)
 800dfd8:	fba2 2303 	umull	r2, r3, r2, r3
 800dfdc:	08db      	lsrs	r3, r3, #3
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	ee07 3a90 	vmov	s15, r3
 800dfe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfe8:	4b1d      	ldr	r3, [pc, #116]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800dfea:	edc3 7a02 	vstr	s15, [r3, #8]
	 PSV.TRIG_TIME                        = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	7bdb      	ldrb	r3, [r3, #15]
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	461a      	mov	r2, r3
 800dff6:	0092      	lsls	r2, r2, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	461a      	mov	r2, r3
 800dffc:	0091      	lsls	r1, r2, #2
 800dffe:	461a      	mov	r2, r3
 800e000:	460b      	mov	r3, r1
 800e002:	4413      	add	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	b29a      	uxth	r2, r3
 800e008:	4b15      	ldr	r3, [pc, #84]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800e00a:	819a      	strh	r2, [r3, #12]

	 PSV.APNEA_TIME                       = Receive_Graph_Packet->Apnea_Time;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	7b9b      	ldrb	r3, [r3, #14]
 800e010:	b29a      	uxth	r2, r3
 800e012:	4b13      	ldr	r3, [pc, #76]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800e014:	829a      	strh	r2, [r3, #20]
	 PSV.APNEA_COUNTER                    = (1000*PSV.APNEA_TIME) ;
 800e016:	4b12      	ldr	r3, [pc, #72]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800e018:	8a9b      	ldrh	r3, [r3, #20]
 800e01a:	461a      	mov	r2, r3
 800e01c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e020:	fb03 f302 	mul.w	r3, r3, r2
 800e024:	4a0e      	ldr	r2, [pc, #56]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800e026:	6193      	str	r3, [r2, #24]
	 if(PSV.TRIG_TYPE == 0)
 800e028:	4b0d      	ldr	r3, [pc, #52]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800e02a:	889b      	ldrh	r3, [r3, #4]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d103      	bne.n	800e038 <PSV_Mode_Packet_Data+0x94>
		Trigger_Type = Pressure_Trigger;
 800e030:	4b0d      	ldr	r3, [pc, #52]	; (800e068 <PSV_Mode_Packet_Data+0xc4>)
 800e032:	2200      	movs	r2, #0
 800e034:	701a      	strb	r2, [r3, #0]
 800e036:	e006      	b.n	800e046 <PSV_Mode_Packet_Data+0xa2>
	else if(PSV.TRIG_TYPE == 1)
 800e038:	4b09      	ldr	r3, [pc, #36]	; (800e060 <PSV_Mode_Packet_Data+0xbc>)
 800e03a:	889b      	ldrh	r3, [r3, #4]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d102      	bne.n	800e046 <PSV_Mode_Packet_Data+0xa2>
		Trigger_Type = Flow_Trigger;
 800e040:	4b09      	ldr	r3, [pc, #36]	; (800e068 <PSV_Mode_Packet_Data+0xc4>)
 800e042:	2201      	movs	r2, #1
 800e044:	701a      	strb	r2, [r3, #0]
	 Mode_Initial_Flag_Set                        = OPEN;
 800e046:	4b09      	ldr	r3, [pc, #36]	; (800e06c <PSV_Mode_Packet_Data+0xc8>)
 800e048:	2201      	movs	r2, #1
 800e04a:	701a      	strb	r2, [r3, #0]

	 vTaskResume(Mode_initial_Flag_Set_Handler);
 800e04c:	4b08      	ldr	r3, [pc, #32]	; (800e070 <PSV_Mode_Packet_Data+0xcc>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4618      	mov	r0, r3
 800e052:	f011 f9e3 	bl	801f41c <vTaskResume>
}
 800e056:	bf00      	nop
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	20013da4 	.word	0x20013da4
 800e064:	cccccccd 	.word	0xcccccccd
 800e068:	2001398c 	.word	0x2001398c
 800e06c:	20014338 	.word	0x20014338
 800e070:	2001406c 	.word	0x2001406c

0800e074 <PSV_Task>:



void PSV_Task(void *argument)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(PSV.APNEA_COUNTER > 0)
 800e07c:	4b0a      	ldr	r3, [pc, #40]	; (800e0a8 <PSV_Task+0x34>)
 800e07e:	699b      	ldr	r3, [r3, #24]
 800e080:	2b00      	cmp	r3, #0
 800e082:	dd02      	ble.n	800e08a <PSV_Task+0x16>
		{
			PSV_CONTROL();
 800e084:	f000 f932 	bl	800e2ec <PSV_CONTROL>
 800e088:	e00a      	b.n	800e0a0 <PSV_Task+0x2c>
		}
		else
		{
			LED_STATUS = Idle_LED;
 800e08a:	4b08      	ldr	r3, [pc, #32]	; (800e0ac <PSV_Task+0x38>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	701a      	strb	r2, [r3, #0]
			RESET_FLAGS();
 800e090:	f000 fd14 	bl	800eabc <RESET_FLAGS>
			 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 800e094:	4b06      	ldr	r3, [pc, #24]	; (800e0b0 <PSV_Task+0x3c>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d101      	bne.n	800e0a0 <PSV_Task+0x2c>
			 {
				 BACKUP_PC_CMV_START();
 800e09c:	f000 fc04 	bl	800e8a8 <BACKUP_PC_CMV_START>
			 }

		}
		vTaskDelay(Two_Millisecond_Delay);
 800e0a0:	2002      	movs	r0, #2
 800e0a2:	f011 f8c3 	bl	801f22c <vTaskDelay>
		if(PSV.APNEA_COUNTER > 0)
 800e0a6:	e7e9      	b.n	800e07c <PSV_Task+0x8>
 800e0a8:	20013da4 	.word	0x20013da4
 800e0ac:	20013aed 	.word	0x20013aed
 800e0b0:	20013f74 	.word	0x20013f74

0800e0b4 <INSPIRATION_PROCESS_PSV>:




static void INSPIRATION_PROCESS_PSV()
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	af00      	add	r7, sp, #0
	Breath_Count         = Count_The_Breath;
 800e0b8:	4b28      	ldr	r3, [pc, #160]	; (800e15c <INSPIRATION_PROCESS_PSV+0xa8>)
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	701a      	strb	r2, [r3, #0]
	 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 800e0be:	4b28      	ldr	r3, [pc, #160]	; (800e160 <INSPIRATION_PROCESS_PSV+0xac>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d104      	bne.n	800e0d0 <INSPIRATION_PROCESS_PSV+0x1c>
	 {
		 PSV_Control._INSPIRATION_TIME                   = BACKUP_PC_CMV.INSPIRATION_TIME;
 800e0c6:	4b27      	ldr	r3, [pc, #156]	; (800e164 <INSPIRATION_PROCESS_PSV+0xb0>)
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	4b26      	ldr	r3, [pc, #152]	; (800e168 <INSPIRATION_PROCESS_PSV+0xb4>)
 800e0ce:	60da      	str	r2, [r3, #12]
	 }

	PIP_control_Task.PIP_Control_Task_Delay               = 2;
 800e0d0:	4b26      	ldr	r3, [pc, #152]	; (800e16c <INSPIRATION_PROCESS_PSV+0xb8>)
 800e0d2:	2202      	movs	r2, #2
 800e0d4:	801a      	strh	r2, [r3, #0]
	PIP_control_Task.Increase_Each_DAC_SET_CONST          = 140;
 800e0d6:	4b25      	ldr	r3, [pc, #148]	; (800e16c <INSPIRATION_PROCESS_PSV+0xb8>)
 800e0d8:	228c      	movs	r2, #140	; 0x8c
 800e0da:	80da      	strh	r2, [r3, #6]
	PIP_Status                    				          = PIP_NOT_ACHEIVED;
 800e0dc:	4b24      	ldr	r3, [pc, #144]	; (800e170 <INSPIRATION_PROCESS_PSV+0xbc>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	701a      	strb	r2, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_DAC_VAL           = DAC_VAL(PSV.PEEP_Val);;
 800e0e2:	4b24      	ldr	r3, [pc, #144]	; (800e174 <INSPIRATION_PROCESS_PSV+0xc0>)
 800e0e4:	789b      	ldrb	r3, [r3, #2]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fb f90a 	bl	8009300 <DAC_VAL>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	4b21      	ldr	r3, [pc, #132]	; (800e178 <INSPIRATION_PROCESS_PSV+0xc4>)
 800e0f2:	801a      	strh	r2, [r3, #0]
	Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL      = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800e0f4:	4b20      	ldr	r3, [pc, #128]	; (800e178 <INSPIRATION_PROCESS_PSV+0xc4>)
 800e0f6:	881a      	ldrh	r2, [r3, #0]
 800e0f8:	4b1f      	ldr	r3, [pc, #124]	; (800e178 <INSPIRATION_PROCESS_PSV+0xc4>)
 800e0fa:	805a      	strh	r2, [r3, #2]
	Set_PIP_Status                                        = SET_PIP_VALUE_NOT_ACHEIVED;
 800e0fc:	4b1f      	ldr	r3, [pc, #124]	; (800e17c <INSPIRATION_PROCESS_PSV+0xc8>)
 800e0fe:	2200      	movs	r2, #0
 800e100:	701a      	strb	r2, [r3, #0]
	Read_Time_vs_Pressure                                 = READ_TIME_OPEN;
 800e102:	4b1f      	ldr	r3, [pc, #124]	; (800e180 <INSPIRATION_PROCESS_PSV+0xcc>)
 800e104:	2200      	movs	r2, #0
 800e106:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.PIP_Control_Event_Occured            = RESET;
 800e108:	4b18      	ldr	r3, [pc, #96]	; (800e16c <INSPIRATION_PROCESS_PSV+0xb8>)
 800e10a:	2200      	movs	r2, #0
 800e10c:	805a      	strh	r2, [r3, #2]
	PIP_Average_Parameter.Maximum_PIP_Acheived            = RESET;
 800e10e:	4b1d      	ldr	r3, [pc, #116]	; (800e184 <INSPIRATION_PROCESS_PSV+0xd0>)
 800e110:	2200      	movs	r2, #0
 800e112:	701a      	strb	r2, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = PSV_TUNE_PIP_BLOWER(&Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL,
                                                                                  PSV.PRESSURE_SUPPORT_Val );
 800e114:	4b17      	ldr	r3, [pc, #92]	; (800e174 <INSPIRATION_PROCESS_PSV+0xc0>)
 800e116:	881b      	ldrh	r3, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = PSV_TUNE_PIP_BLOWER(&Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL,
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	4619      	mov	r1, r3
 800e11c:	481a      	ldr	r0, [pc, #104]	; (800e188 <INSPIRATION_PROCESS_PSV+0xd4>)
 800e11e:	f000 fb4b 	bl	800e7b8 <PSV_TUNE_PIP_BLOWER>
 800e122:	4603      	mov	r3, r0
 800e124:	461a      	mov	r2, r3
 800e126:	4b14      	ldr	r3, [pc, #80]	; (800e178 <INSPIRATION_PROCESS_PSV+0xc4>)
 800e128:	811a      	strh	r2, [r3, #8]




	vol.Volume                                            = RESET;
 800e12a:	4b18      	ldr	r3, [pc, #96]	; (800e18c <INSPIRATION_PROCESS_PSV+0xd8>)
 800e12c:	f04f 0200 	mov.w	r2, #0
 800e130:	601a      	str	r2, [r3, #0]
	vol.Volume_max                                        = RESET;
 800e132:	4b16      	ldr	r3, [pc, #88]	; (800e18c <INSPIRATION_PROCESS_PSV+0xd8>)
 800e134:	2200      	movs	r2, #0
 800e136:	609a      	str	r2, [r3, #8]
	PSV_PEEP_AVERAGE();
 800e138:	f000 fa58 	bl	800e5ec <PSV_PEEP_AVERAGE>
	LED_STATUS = INSPIRATION_lED;
 800e13c:	4b14      	ldr	r3, [pc, #80]	; (800e190 <INSPIRATION_PROCESS_PSV+0xdc>)
 800e13e:	2201      	movs	r2, #1
 800e140:	701a      	strb	r2, [r3, #0]
	vTaskResume(PSV_PID_Handler);
 800e142:	4b14      	ldr	r3, [pc, #80]	; (800e194 <INSPIRATION_PROCESS_PSV+0xe0>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4618      	mov	r0, r3
 800e148:	f011 f968 	bl	801f41c <vTaskResume>
	vTaskSuspend(PSV_Handler);
 800e14c:	4b12      	ldr	r3, [pc, #72]	; (800e198 <INSPIRATION_PROCESS_PSV+0xe4>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4618      	mov	r0, r3
 800e152:	f011 f89f 	bl	801f294 <vTaskSuspend>
}
 800e156:	bf00      	nop
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	200139a6 	.word	0x200139a6
 800e160:	20013f74 	.word	0x20013f74
 800e164:	20013930 	.word	0x20013930
 800e168:	20014248 	.word	0x20014248
 800e16c:	20013b04 	.word	0x20013b04
 800e170:	200140c2 	.word	0x200140c2
 800e174:	20013da4 	.word	0x20013da4
 800e178:	20014030 	.word	0x20014030
 800e17c:	200141f8 	.word	0x200141f8
 800e180:	20014371 	.word	0x20014371
 800e184:	20013b70 	.word	0x20013b70
 800e188:	20014038 	.word	0x20014038
 800e18c:	200140c8 	.word	0x200140c8
 800e190:	20013aed 	.word	0x20013aed
 800e194:	20013f20 	.word	0x20013f20
 800e198:	20013fa8 	.word	0x20013fa8
 800e19c:	00000000 	.word	0x00000000

0800e1a0 <PSV_PID_Task>:


void PSV_PID_Task(void *argument)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(PSV_Control._INSPIRATION_TIME > 0)
 800e1a8:	4b43      	ldr	r3, [pc, #268]	; (800e2b8 <PSV_PID_Task+0x118>)
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	dd39      	ble.n	800e224 <PSV_PID_Task+0x84>
		{
			BREATH_STATE                                          = PATIENT_TRIGGER_INSPIRATION;
 800e1b0:	4b42      	ldr	r3, [pc, #264]	; (800e2bc <PSV_PID_Task+0x11c>)
 800e1b2:	2202      	movs	r2, #2
 800e1b4:	701a      	strb	r2, [r3, #0]
			PIP_Control(PSV.PRESSURE_SUPPORT_Val );
 800e1b6:	4b42      	ldr	r3, [pc, #264]	; (800e2c0 <PSV_PID_Task+0x120>)
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7ff fbc7 	bl	800d950 <PIP_Control>
			Blower_Signal(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800e1c2:	4b40      	ldr	r3, [pc, #256]	; (800e2c4 <PSV_PID_Task+0x124>)
 800e1c4:	881a      	ldrh	r2, [r3, #0]
 800e1c6:	4b40      	ldr	r3, [pc, #256]	; (800e2c8 <PSV_PID_Task+0x128>)
 800e1c8:	609a      	str	r2, [r3, #8]
			Pressure_Mode_blower_control.Blower_Signal_Voltage = ( (Pressure_Mode_blower_control.BLOWER_DAC_VAL*3.3) /4095);
 800e1ca:	4b3e      	ldr	r3, [pc, #248]	; (800e2c4 <PSV_PID_Task+0x124>)
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7f2 f950 	bl	8000474 <__aeabi_i2d>
 800e1d4:	a334      	add	r3, pc, #208	; (adr r3, 800e2a8 <PSV_PID_Task+0x108>)
 800e1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1da:	f7f2 f9b5 	bl	8000548 <__aeabi_dmul>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	4610      	mov	r0, r2
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	a332      	add	r3, pc, #200	; (adr r3, 800e2b0 <PSV_PID_Task+0x110>)
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	f7f2 fad6 	bl	800079c <__aeabi_ddiv>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4610      	mov	r0, r2
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	f7f2 fc88 	bl	8000b0c <__aeabi_d2f>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	4a31      	ldr	r2, [pc, #196]	; (800e2c4 <PSV_PID_Task+0x124>)
 800e200:	60d3      	str	r3, [r2, #12]
			   if(PSV_Control._INSPIRATION_TIME < 100)
 800e202:	4b2d      	ldr	r3, [pc, #180]	; (800e2b8 <PSV_PID_Task+0x118>)
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	2b63      	cmp	r3, #99	; 0x63
 800e208:	dc48      	bgt.n	800e29c <PSV_PID_Task+0xfc>
			   {
				   PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val += Pressure_sensor.Pressure_Val;
 800e20a:	4b30      	ldr	r3, [pc, #192]	; (800e2cc <PSV_PID_Task+0x12c>)
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	4a30      	ldr	r2, [pc, #192]	; (800e2d0 <PSV_PID_Task+0x130>)
 800e210:	7892      	ldrb	r2, [r2, #2]
 800e212:	4413      	add	r3, r2
 800e214:	4a2d      	ldr	r2, [pc, #180]	; (800e2cc <PSV_PID_Task+0x12c>)
 800e216:	6053      	str	r3, [r2, #4]
				   PSV_Pip_average.PRESSURE_SUPPORT_Event_Count++;
 800e218:	4b2c      	ldr	r3, [pc, #176]	; (800e2cc <PSV_PID_Task+0x12c>)
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	3301      	adds	r3, #1
 800e21e:	4a2b      	ldr	r2, [pc, #172]	; (800e2cc <PSV_PID_Task+0x12c>)
 800e220:	6093      	str	r3, [r2, #8]
 800e222:	e03b      	b.n	800e29c <PSV_PID_Task+0xfc>
			   }
		}
		else if(PSV_Control._INSPIRATION_TIME == 0)
 800e224:	4b24      	ldr	r3, [pc, #144]	; (800e2b8 <PSV_PID_Task+0x118>)
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d137      	bne.n	800e29c <PSV_PID_Task+0xfc>
		{
			Blower_Signal(0);
 800e22c:	4b26      	ldr	r3, [pc, #152]	; (800e2c8 <PSV_PID_Task+0x128>)
 800e22e:	2200      	movs	r2, #0
 800e230:	609a      	str	r2, [r3, #8]
			ExpValve_OPEN();
 800e232:	4b28      	ldr	r3, [pc, #160]	; (800e2d4 <PSV_PID_Task+0x134>)
 800e234:	695b      	ldr	r3, [r3, #20]
 800e236:	4a27      	ldr	r2, [pc, #156]	; (800e2d4 <PSV_PID_Task+0x134>)
 800e238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e23c:	6153      	str	r3, [r2, #20]
			vTaskDelay(700);
 800e23e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800e242:	f010 fff3 	bl	801f22c <vTaskDelay>
			PSV.APNEA_COUNTER                                = (1000*PSV.APNEA_TIME) ;
 800e246:	4b1e      	ldr	r3, [pc, #120]	; (800e2c0 <PSV_PID_Task+0x120>)
 800e248:	8a9b      	ldrh	r3, [r3, #20]
 800e24a:	461a      	mov	r2, r3
 800e24c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e250:	fb03 f302 	mul.w	r3, r3, r2
 800e254:	4a1a      	ldr	r2, [pc, #104]	; (800e2c0 <PSV_PID_Task+0x120>)
 800e256:	6193      	str	r3, [r2, #24]
			PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL      = DAC_VAL(PSV.PEEP_Val );
 800e258:	4b19      	ldr	r3, [pc, #100]	; (800e2c0 <PSV_PID_Task+0x120>)
 800e25a:	789b      	ldrb	r3, [r3, #2]
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7fb f84f 	bl	8009300 <DAC_VAL>
 800e262:	4603      	mov	r3, r0
 800e264:	461a      	mov	r2, r3
 800e266:	4b1c      	ldr	r3, [pc, #112]	; (800e2d8 <PSV_PID_Task+0x138>)
 800e268:	80da      	strh	r2, [r3, #6]

			Patient_Trigger                                   = NO_PATIENT_TRIGGER;
 800e26a:	4b1c      	ldr	r3, [pc, #112]	; (800e2dc <PSV_PID_Task+0x13c>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	701a      	strb	r2, [r3, #0]
		    BREATH_STATE                                      = PATIENT_TRIGGER_EXPIRATION;
 800e270:	4b12      	ldr	r3, [pc, #72]	; (800e2bc <PSV_PID_Task+0x11c>)
 800e272:	2203      	movs	r2, #3
 800e274:	701a      	strb	r2, [r3, #0]


			PSV_PIP_AVERAGE();
 800e276:	f000 f9ef 	bl	800e658 <PSV_PIP_AVERAGE>
			PSV_Control.PSV_PEEP_Settle_Time                 = 2000;
 800e27a:	4b0f      	ldr	r3, [pc, #60]	; (800e2b8 <PSV_PID_Task+0x118>)
 800e27c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e280:	601a      	str	r2, [r3, #0]
			BIPAP_Peep_Average.EPAP_AVG_VAL                  = 0;
 800e282:	4b17      	ldr	r3, [pc, #92]	; (800e2e0 <PSV_PID_Task+0x140>)
 800e284:	2200      	movs	r2, #0
 800e286:	721a      	strb	r2, [r3, #8]
			vTaskResume(PSV_Handler);
 800e288:	4b16      	ldr	r3, [pc, #88]	; (800e2e4 <PSV_PID_Task+0x144>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f011 f8c5 	bl	801f41c <vTaskResume>
			vTaskSuspend(PSV_PID_Handler);
 800e292:	4b15      	ldr	r3, [pc, #84]	; (800e2e8 <PSV_PID_Task+0x148>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4618      	mov	r0, r3
 800e298:	f010 fffc 	bl	801f294 <vTaskSuspend>
		}
		vTaskDelay(Ten_Millisecond_Delay);
 800e29c:	200a      	movs	r0, #10
 800e29e:	f010 ffc5 	bl	801f22c <vTaskDelay>
		if(PSV_Control._INSPIRATION_TIME > 0)
 800e2a2:	e781      	b.n	800e1a8 <PSV_PID_Task+0x8>
 800e2a4:	f3af 8000 	nop.w
 800e2a8:	66666666 	.word	0x66666666
 800e2ac:	400a6666 	.word	0x400a6666
 800e2b0:	00000000 	.word	0x00000000
 800e2b4:	40affe00 	.word	0x40affe00
 800e2b8:	20014248 	.word	0x20014248
 800e2bc:	200140fd 	.word	0x200140fd
 800e2c0:	20013da4 	.word	0x20013da4
 800e2c4:	20014030 	.word	0x20014030
 800e2c8:	40007400 	.word	0x40007400
 800e2cc:	20013b84 	.word	0x20013b84
 800e2d0:	2001405c 	.word	0x2001405c
 800e2d4:	40020400 	.word	0x40020400
 800e2d8:	20014284 	.word	0x20014284
 800e2dc:	20013ca9 	.word	0x20013ca9
 800e2e0:	200139cc 	.word	0x200139cc
 800e2e4:	20013fa8 	.word	0x20013fa8
 800e2e8:	20013f20 	.word	0x20013f20

0800e2ec <PSV_CONTROL>:
	}
}


static void PSV_CONTROL()
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	af00      	add	r7, sp, #0
	    BREATH_STATE                                     = EXPIRATION_CYCLE;
 800e2f0:	4b3d      	ldr	r3, [pc, #244]	; (800e3e8 <PSV_CONTROL+0xfc>)
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	701a      	strb	r2, [r3, #0]
	    if(Pressure_sensor.Pressure_Val >= (PSV.PEEP_Val + 5) )
 800e2f6:	4b3d      	ldr	r3, [pc, #244]	; (800e3ec <PSV_CONTROL+0x100>)
 800e2f8:	789b      	ldrb	r3, [r3, #2]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	4a3c      	ldr	r2, [pc, #240]	; (800e3f0 <PSV_CONTROL+0x104>)
 800e2fe:	7892      	ldrb	r2, [r2, #2]
 800e300:	4293      	cmp	r3, r2
 800e302:	da1b      	bge.n	800e33c <PSV_CONTROL+0x50>
	    {
	    	Blower_Signal(0);
 800e304:	4b3b      	ldr	r3, [pc, #236]	; (800e3f4 <PSV_CONTROL+0x108>)
 800e306:	2200      	movs	r2, #0
 800e308:	609a      	str	r2, [r3, #8]
	    	Pressure_Mode_blower_control.Blower_Signal_Voltage = 0;
 800e30a:	4b3b      	ldr	r3, [pc, #236]	; (800e3f8 <PSV_CONTROL+0x10c>)
 800e30c:	f04f 0200 	mov.w	r2, #0
 800e310:	60da      	str	r2, [r3, #12]
	    	Pressure_Status = OVER_PRESSURE;
 800e312:	4b3a      	ldr	r3, [pc, #232]	; (800e3fc <PSV_CONTROL+0x110>)
 800e314:	2201      	movs	r2, #1
 800e316:	701a      	strb	r2, [r3, #0]
	    	ExpValve_OPEN();
 800e318:	4b39      	ldr	r3, [pc, #228]	; (800e400 <PSV_CONTROL+0x114>)
 800e31a:	695b      	ldr	r3, [r3, #20]
 800e31c:	4a38      	ldr	r2, [pc, #224]	; (800e400 <PSV_CONTROL+0x114>)
 800e31e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e322:	6153      	str	r3, [r2, #20]
	    	vTaskDelay(700);
 800e324:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800e328:	f010 ff80 	bl	801f22c <vTaskDelay>
	    	PSV_Control.PSV_PEEP_Settle_Time   = 2000;
 800e32c:	4b35      	ldr	r3, [pc, #212]	; (800e404 <PSV_CONTROL+0x118>)
 800e32e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e332:	601a      	str	r2, [r3, #0]
	    	Pressure_Status = NORMAL_PRESSURE;
 800e334:	4b31      	ldr	r3, [pc, #196]	; (800e3fc <PSV_CONTROL+0x110>)
 800e336:	2200      	movs	r2, #0
 800e338:	701a      	strb	r2, [r3, #0]
				else
				{
					CHECK_TRIGGER_OFFSET();
				}
	    }
}
 800e33a:	e052      	b.n	800e3e2 <PSV_CONTROL+0xf6>
	    	LED_STATUS = EXPIRATION_LED;
 800e33c:	4b32      	ldr	r3, [pc, #200]	; (800e408 <PSV_CONTROL+0x11c>)
 800e33e:	2202      	movs	r2, #2
 800e340:	701a      	strb	r2, [r3, #0]
				if(PSV_Control.Blower_Wait_Time_Milli_Second == 0)
 800e342:	4b30      	ldr	r3, [pc, #192]	; (800e404 <PSV_CONTROL+0x118>)
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d101      	bne.n	800e34e <PSV_CONTROL+0x62>
					RUN_PSV_PEEP_MAINTAIN_BLOWER();
 800e34a:	f000 f901 	bl	800e550 <RUN_PSV_PEEP_MAINTAIN_BLOWER>
				if(PSV_Control.PSV_PEEP_Settle_Time == 0 )
 800e34e:	4b2d      	ldr	r3, [pc, #180]	; (800e404 <PSV_CONTROL+0x118>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d141      	bne.n	800e3da <PSV_CONTROL+0xee>
					Patient_Circuit_Disconnected_Alert_PSV();
 800e356:	f000 fbdf 	bl	800eb18 <Patient_Circuit_Disconnected_Alert_PSV>
					if( (Flow_Sensor_cal._Flow_Val > 0) && (PSV_Control.Trigger_Check_Wait_Time == 0))
 800e35a:	4b2c      	ldr	r3, [pc, #176]	; (800e40c <PSV_CONTROL+0x120>)
 800e35c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e35e:	2b00      	cmp	r3, #0
 800e360:	dd13      	ble.n	800e38a <PSV_CONTROL+0x9e>
 800e362:	4b28      	ldr	r3, [pc, #160]	; (800e404 <PSV_CONTROL+0x118>)
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d10f      	bne.n	800e38a <PSV_CONTROL+0x9e>
						STOP_BLOWER_IF_FLOW_SENSE();
 800e36a:	f000 f92d 	bl	800e5c8 <STOP_BLOWER_IF_FLOW_SENSE>
							if (Trigger_Type == Pressure_Trigger)
 800e36e:	4b28      	ldr	r3, [pc, #160]	; (800e410 <PSV_CONTROL+0x124>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d102      	bne.n	800e37c <PSV_CONTROL+0x90>
								CHECK_PRESSURE_TRIGGER();
 800e376:	f000 f853 	bl	800e420 <CHECK_PRESSURE_TRIGGER>
							if (Trigger_Type == Pressure_Trigger)
 800e37a:	e031      	b.n	800e3e0 <PSV_CONTROL+0xf4>
							else if (Trigger_Type == Flow_Trigger)
 800e37c:	4b24      	ldr	r3, [pc, #144]	; (800e410 <PSV_CONTROL+0x124>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d12d      	bne.n	800e3e0 <PSV_CONTROL+0xf4>
								CHECK_FLOW_TRIGGER();
 800e384:	f000 f880 	bl	800e488 <CHECK_FLOW_TRIGGER>
							if (Trigger_Type == Pressure_Trigger)
 800e388:	e02a      	b.n	800e3e0 <PSV_CONTROL+0xf4>
						PSV_Peep_Average.PEEP_Cumulative_Val += Pressure_sensor.Pressure_Val;
 800e38a:	4b22      	ldr	r3, [pc, #136]	; (800e414 <PSV_CONTROL+0x128>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a18      	ldr	r2, [pc, #96]	; (800e3f0 <PSV_CONTROL+0x104>)
 800e390:	7892      	ldrb	r2, [r2, #2]
 800e392:	4413      	add	r3, r2
 800e394:	4a1f      	ldr	r2, [pc, #124]	; (800e414 <PSV_CONTROL+0x128>)
 800e396:	6013      	str	r3, [r2, #0]
						PSV_Peep_Average.PEEP_Event_Count++;
 800e398:	4b1e      	ldr	r3, [pc, #120]	; (800e414 <PSV_CONTROL+0x128>)
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	3301      	adds	r3, #1
 800e39e:	4a1d      	ldr	r2, [pc, #116]	; (800e414 <PSV_CONTROL+0x128>)
 800e3a0:	6053      	str	r3, [r2, #4]
						if(PSV_Peep_Average.PEEP_Event_Count >1000)
 800e3a2:	4b1c      	ldr	r3, [pc, #112]	; (800e414 <PSV_CONTROL+0x128>)
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e3aa:	d91a      	bls.n	800e3e2 <PSV_CONTROL+0xf6>
							Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800e3ac:	f7fc fe3c 	bl	800b028 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
							PSV_PEEP_AVERAGE();
 800e3b0:	f000 f91c 	bl	800e5ec <PSV_PEEP_AVERAGE>
							PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL    = PSV_TUNE_PEEP_BLOWER(&PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL,
 800e3b4:	4b0d      	ldr	r3, [pc, #52]	; (800e3ec <PSV_CONTROL+0x100>)
 800e3b6:	789b      	ldrb	r3, [r3, #2]
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	4817      	ldr	r0, [pc, #92]	; (800e418 <PSV_CONTROL+0x12c>)
 800e3bc:	f000 f984 	bl	800e6c8 <PSV_TUNE_PEEP_BLOWER>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	4b15      	ldr	r3, [pc, #84]	; (800e41c <PSV_CONTROL+0x130>)
 800e3c6:	811a      	strh	r2, [r3, #8]
							PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL         = PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL;
 800e3c8:	4b14      	ldr	r3, [pc, #80]	; (800e41c <PSV_CONTROL+0x130>)
 800e3ca:	891a      	ldrh	r2, [r3, #8]
 800e3cc:	4b13      	ldr	r3, [pc, #76]	; (800e41c <PSV_CONTROL+0x130>)
 800e3ce:	80da      	strh	r2, [r3, #6]
							PSV_Control.PSV_PEEP_Settle_Time                    = 1000;
 800e3d0:	4b0c      	ldr	r3, [pc, #48]	; (800e404 <PSV_CONTROL+0x118>)
 800e3d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3d6:	601a      	str	r2, [r3, #0]
}
 800e3d8:	e003      	b.n	800e3e2 <PSV_CONTROL+0xf6>
					CHECK_TRIGGER_OFFSET();
 800e3da:	f000 f88f 	bl	800e4fc <CHECK_TRIGGER_OFFSET>
}
 800e3de:	e000      	b.n	800e3e2 <PSV_CONTROL+0xf6>
							if (Trigger_Type == Pressure_Trigger)
 800e3e0:	bf00      	nop
}
 800e3e2:	bf00      	nop
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	200140fd 	.word	0x200140fd
 800e3ec:	20013da4 	.word	0x20013da4
 800e3f0:	2001405c 	.word	0x2001405c
 800e3f4:	40007400 	.word	0x40007400
 800e3f8:	20014030 	.word	0x20014030
 800e3fc:	20013f29 	.word	0x20013f29
 800e400:	40020400 	.word	0x40020400
 800e404:	20014248 	.word	0x20014248
 800e408:	20013aed 	.word	0x20013aed
 800e40c:	20013fb0 	.word	0x20013fb0
 800e410:	2001398c 	.word	0x2001398c
 800e414:	20014258 	.word	0x20014258
 800e418:	2001428c 	.word	0x2001428c
 800e41c:	20014284 	.word	0x20014284

0800e420 <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 800e420:	b580      	push	{r7, lr}
 800e422:	af00      	add	r7, sp, #0
	if (( Pressure_sensor.Pressure_Val < (Pressure_Trigger_Offset - PSV.TRIG_LMT )))
 800e424:	4b12      	ldr	r3, [pc, #72]	; (800e470 <CHECK_PRESSURE_TRIGGER+0x50>)
 800e426:	789b      	ldrb	r3, [r3, #2]
 800e428:	ee07 3a90 	vmov	s15, r3
 800e42c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e430:	4b10      	ldr	r3, [pc, #64]	; (800e474 <CHECK_PRESSURE_TRIGGER+0x54>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	ee07 3a90 	vmov	s15, r3
 800e438:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e43c:	4b0e      	ldr	r3, [pc, #56]	; (800e478 <CHECK_PRESSURE_TRIGGER+0x58>)
 800e43e:	edd3 7a02 	vldr	s15, [r3, #8]
 800e442:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44e:	d400      	bmi.n	800e452 <CHECK_PRESSURE_TRIGGER+0x32>
		PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL = 0;
		Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
		INSPIRATION_PROCESS_PSV();

	}
}
 800e450:	e00b      	b.n	800e46a <CHECK_PRESSURE_TRIGGER+0x4a>
		Patient_Trigger                             = PATIENT_TRIGGER_HAPPEN;
 800e452:	4b0a      	ldr	r3, [pc, #40]	; (800e47c <CHECK_PRESSURE_TRIGGER+0x5c>)
 800e454:	2201      	movs	r2, #1
 800e456:	701a      	strb	r2, [r3, #0]
		PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL = 0;
 800e458:	4b09      	ldr	r3, [pc, #36]	; (800e480 <CHECK_PRESSURE_TRIGGER+0x60>)
 800e45a:	2200      	movs	r2, #0
 800e45c:	80da      	strh	r2, [r3, #6]
		Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
 800e45e:	4b08      	ldr	r3, [pc, #32]	; (800e480 <CHECK_PRESSURE_TRIGGER+0x60>)
 800e460:	88da      	ldrh	r2, [r3, #6]
 800e462:	4b08      	ldr	r3, [pc, #32]	; (800e484 <CHECK_PRESSURE_TRIGGER+0x64>)
 800e464:	609a      	str	r2, [r3, #8]
		INSPIRATION_PROCESS_PSV();
 800e466:	f7ff fe25 	bl	800e0b4 <INSPIRATION_PROCESS_PSV>
}
 800e46a:	bf00      	nop
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	2001405c 	.word	0x2001405c
 800e474:	20014024 	.word	0x20014024
 800e478:	20013da4 	.word	0x20013da4
 800e47c:	20013ca9 	.word	0x20013ca9
 800e480:	20014284 	.word	0x20014284
 800e484:	40007400 	.word	0x40007400

0800e488 <CHECK_FLOW_TRIGGER>:

static void CHECK_FLOW_TRIGGER()
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+PSV.TRIG_LMT )))
 800e48c:	4b14      	ldr	r3, [pc, #80]	; (800e4e0 <CHECK_FLOW_TRIGGER+0x58>)
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	ee07 3a90 	vmov	s15, r3
 800e494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e498:	4b12      	ldr	r3, [pc, #72]	; (800e4e4 <CHECK_FLOW_TRIGGER+0x5c>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	ee07 3a90 	vmov	s15, r3
 800e4a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e4a4:	4b10      	ldr	r3, [pc, #64]	; (800e4e8 <CHECK_FLOW_TRIGGER+0x60>)
 800e4a6:	edd3 7a02 	vldr	s15, [r3, #8]
 800e4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b6:	dc00      	bgt.n	800e4ba <CHECK_FLOW_TRIGGER+0x32>
		PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL = 0;
		Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
		INSPIRATION_PROCESS_PSV();

	}
}
 800e4b8:	e00f      	b.n	800e4da <CHECK_FLOW_TRIGGER+0x52>
		LAST_FLOW_TRIGGER 							= FLOW_TRIGGER;
 800e4ba:	4b09      	ldr	r3, [pc, #36]	; (800e4e0 <CHECK_FLOW_TRIGGER+0x58>)
 800e4bc:	781a      	ldrb	r2, [r3, #0]
 800e4be:	4b0b      	ldr	r3, [pc, #44]	; (800e4ec <CHECK_FLOW_TRIGGER+0x64>)
 800e4c0:	701a      	strb	r2, [r3, #0]
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
 800e4c2:	4b0b      	ldr	r3, [pc, #44]	; (800e4f0 <CHECK_FLOW_TRIGGER+0x68>)
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	701a      	strb	r2, [r3, #0]
		PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL = 0;
 800e4c8:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <CHECK_FLOW_TRIGGER+0x6c>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	80da      	strh	r2, [r3, #6]
		Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
 800e4ce:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <CHECK_FLOW_TRIGGER+0x6c>)
 800e4d0:	88da      	ldrh	r2, [r3, #6]
 800e4d2:	4b09      	ldr	r3, [pc, #36]	; (800e4f8 <CHECK_FLOW_TRIGGER+0x70>)
 800e4d4:	609a      	str	r2, [r3, #8]
		INSPIRATION_PROCESS_PSV();
 800e4d6:	f7ff fded 	bl	800e0b4 <INSPIRATION_PROCESS_PSV>
}
 800e4da:	bf00      	nop
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20014068 	.word	0x20014068
 800e4e4:	20014018 	.word	0x20014018
 800e4e8:	20013da4 	.word	0x20013da4
 800e4ec:	20014240 	.word	0x20014240
 800e4f0:	20013ca9 	.word	0x20013ca9
 800e4f4:	20014284 	.word	0x20014284
 800e4f8:	40007400 	.word	0x40007400

0800e4fc <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	af00      	add	r7, sp, #0
	if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 800e500:	4b0e      	ldr	r3, [pc, #56]	; (800e53c <CHECK_TRIGGER_OFFSET+0x40>)
 800e502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e504:	2b00      	cmp	r3, #0
 800e506:	d008      	beq.n	800e51a <CHECK_TRIGGER_OFFSET+0x1e>
 800e508:	4b0c      	ldr	r3, [pc, #48]	; (800e53c <CHECK_TRIGGER_OFFSET+0x40>)
 800e50a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e50c:	f113 0f08 	cmn.w	r3, #8
 800e510:	db0f      	blt.n	800e532 <CHECK_TRIGGER_OFFSET+0x36>
 800e512:	4b0a      	ldr	r3, [pc, #40]	; (800e53c <CHECK_TRIGGER_OFFSET+0x40>)
 800e514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e516:	2b00      	cmp	r3, #0
 800e518:	da0b      	bge.n	800e532 <CHECK_TRIGGER_OFFSET+0x36>
	{
		FLOW_TRIGGER             = 0;
 800e51a:	4b09      	ldr	r3, [pc, #36]	; (800e540 <CHECK_TRIGGER_OFFSET+0x44>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	701a      	strb	r2, [r3, #0]
		Pressure_Trigger_Offset  =  Pressure_sensor.Pressure_Val;
 800e520:	4b08      	ldr	r3, [pc, #32]	; (800e544 <CHECK_TRIGGER_OFFSET+0x48>)
 800e522:	789b      	ldrb	r3, [r3, #2]
 800e524:	461a      	mov	r2, r3
 800e526:	4b08      	ldr	r3, [pc, #32]	; (800e548 <CHECK_TRIGGER_OFFSET+0x4c>)
 800e528:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  Flow_Sensor_cal._Flow_Val;
 800e52a:	4b04      	ldr	r3, [pc, #16]	; (800e53c <CHECK_TRIGGER_OFFSET+0x40>)
 800e52c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e52e:	4a07      	ldr	r2, [pc, #28]	; (800e54c <CHECK_TRIGGER_OFFSET+0x50>)
 800e530:	6013      	str	r3, [r2, #0]
	}
}
 800e532:	bf00      	nop
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	20013fb0 	.word	0x20013fb0
 800e540:	20014068 	.word	0x20014068
 800e544:	2001405c 	.word	0x2001405c
 800e548:	20014024 	.word	0x20014024
 800e54c:	20014018 	.word	0x20014018

0800e550 <RUN_PSV_PEEP_MAINTAIN_BLOWER>:


static void RUN_PSV_PEEP_MAINTAIN_BLOWER()
{
 800e550:	b580      	push	{r7, lr}
 800e552:	af00      	add	r7, sp, #0
	ExpValve_CLOSE();
 800e554:	4b18      	ldr	r3, [pc, #96]	; (800e5b8 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x68>)
 800e556:	695b      	ldr	r3, [r3, #20]
 800e558:	4a17      	ldr	r2, [pc, #92]	; (800e5b8 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x68>)
 800e55a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e55e:	6153      	str	r3, [r2, #20]
	Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
 800e560:	4b16      	ldr	r3, [pc, #88]	; (800e5bc <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x6c>)
 800e562:	88da      	ldrh	r2, [r3, #6]
 800e564:	4b16      	ldr	r3, [pc, #88]	; (800e5c0 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x70>)
 800e566:	609a      	str	r2, [r3, #8]
	Pressure_Mode_blower_control.Blower_Signal_Voltage = ( (PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL*3.3) /4095);
 800e568:	4b14      	ldr	r3, [pc, #80]	; (800e5bc <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x6c>)
 800e56a:	88db      	ldrh	r3, [r3, #6]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7f1 ff81 	bl	8000474 <__aeabi_i2d>
 800e572:	a30d      	add	r3, pc, #52	; (adr r3, 800e5a8 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x58>)
 800e574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e578:	f7f1 ffe6 	bl	8000548 <__aeabi_dmul>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	4610      	mov	r0, r2
 800e582:	4619      	mov	r1, r3
 800e584:	a30a      	add	r3, pc, #40	; (adr r3, 800e5b0 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x60>)
 800e586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58a:	f7f2 f907 	bl	800079c <__aeabi_ddiv>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	4610      	mov	r0, r2
 800e594:	4619      	mov	r1, r3
 800e596:	f7f2 fab9 	bl	8000b0c <__aeabi_d2f>
 800e59a:	4603      	mov	r3, r0
 800e59c:	4a09      	ldr	r2, [pc, #36]	; (800e5c4 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x74>)
 800e59e:	60d3      	str	r3, [r2, #12]
}
 800e5a0:	bf00      	nop
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	f3af 8000 	nop.w
 800e5a8:	66666666 	.word	0x66666666
 800e5ac:	400a6666 	.word	0x400a6666
 800e5b0:	00000000 	.word	0x00000000
 800e5b4:	40affe00 	.word	0x40affe00
 800e5b8:	40020400 	.word	0x40020400
 800e5bc:	20014284 	.word	0x20014284
 800e5c0:	40007400 	.word	0x40007400
 800e5c4:	20014030 	.word	0x20014030

0800e5c8 <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 800e5cc:	4b05      	ldr	r3, [pc, #20]	; (800e5e4 <STOP_BLOWER_IF_FLOW_SENSE+0x1c>)
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	609a      	str	r2, [r3, #8]
	PSV_Control.Blower_Wait_Time_Milli_Second = 2000;
 800e5d2:	4b05      	ldr	r3, [pc, #20]	; (800e5e8 <STOP_BLOWER_IF_FLOW_SENSE+0x20>)
 800e5d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e5d8:	605a      	str	r2, [r3, #4]
}
 800e5da:	bf00      	nop
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr
 800e5e4:	40007400 	.word	0x40007400
 800e5e8:	20014248 	.word	0x20014248

0800e5ec <PSV_PEEP_AVERAGE>:



static void PSV_PEEP_AVERAGE()
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	af00      	add	r7, sp, #0
	if((PSV_Peep_Average.PEEP_Cumulative_Val == 0) || (PSV_Peep_Average.PEEP_Event_Count == 0))
 800e5f0:	4b16      	ldr	r3, [pc, #88]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d003      	beq.n	800e600 <PSV_PEEP_AVERAGE+0x14>
 800e5f8:	4b14      	ldr	r3, [pc, #80]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d105      	bne.n	800e60c <PSV_PEEP_AVERAGE+0x20>
	{
		PSV_Peep_Average.PEEP_Cumulative_Val = 1;
 800e600:	4b12      	ldr	r3, [pc, #72]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e602:	2201      	movs	r2, #1
 800e604:	601a      	str	r2, [r3, #0]
		PSV_Peep_Average.PEEP_Event_Count    = 1;
 800e606:	4b11      	ldr	r3, [pc, #68]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e608:	2201      	movs	r2, #1
 800e60a:	605a      	str	r2, [r3, #4]
	}
	PSV_Peep_Average.PEEP_AVG_VAL        = (uint32_t)(PSV_Peep_Average.PEEP_Cumulative_Val/ PSV_Peep_Average.PEEP_Event_Count);
 800e60c:	4b0f      	ldr	r3, [pc, #60]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	4b0e      	ldr	r3, [pc, #56]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	fbb2 f3f3 	udiv	r3, r2, r3
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	4b0c      	ldr	r3, [pc, #48]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e61c:	721a      	strb	r2, [r3, #8]
	PSV_Peep_Average.PEEP_Cumulative_Val = RESET;
 800e61e:	4b0b      	ldr	r3, [pc, #44]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e620:	2200      	movs	r2, #0
 800e622:	601a      	str	r2, [r3, #0]
	PSV_Peep_Average.PEEP_Event_Count    = RESET;
 800e624:	4b09      	ldr	r3, [pc, #36]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e626:	2200      	movs	r2, #0
 800e628:	605a      	str	r2, [r3, #4]
	if(PSV_Peep_Average.PEEP_AVG_VAL == PSV.PEEP_Val)
 800e62a:	4b08      	ldr	r3, [pc, #32]	; (800e64c <PSV_PEEP_AVERAGE+0x60>)
 800e62c:	7a1a      	ldrb	r2, [r3, #8]
 800e62e:	4b08      	ldr	r3, [pc, #32]	; (800e650 <PSV_PEEP_AVERAGE+0x64>)
 800e630:	789b      	ldrb	r3, [r3, #2]
 800e632:	429a      	cmp	r2, r3
 800e634:	d107      	bne.n	800e646 <PSV_PEEP_AVERAGE+0x5a>
	{
		Change_DAC_Values(PSV.PEEP_Val,PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL);
 800e636:	4b06      	ldr	r3, [pc, #24]	; (800e650 <PSV_PEEP_AVERAGE+0x64>)
 800e638:	789b      	ldrb	r3, [r3, #2]
 800e63a:	4a06      	ldr	r2, [pc, #24]	; (800e654 <PSV_PEEP_AVERAGE+0x68>)
 800e63c:	8912      	ldrh	r2, [r2, #8]
 800e63e:	4611      	mov	r1, r2
 800e640:	4618      	mov	r0, r3
 800e642:	f7fb f81b 	bl	800967c <Change_DAC_Values>
	}
}
 800e646:	bf00      	nop
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	20014258 	.word	0x20014258
 800e650:	20013da4 	.word	0x20013da4
 800e654:	20014284 	.word	0x20014284

0800e658 <PSV_PIP_AVERAGE>:



static void PSV_PIP_AVERAGE()
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	af00      	add	r7, sp, #0
	if((PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val == 0) || (PSV_Pip_average.PRESSURE_SUPPORT_Event_Count == 0))
 800e65c:	4b17      	ldr	r3, [pc, #92]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d003      	beq.n	800e66c <PSV_PIP_AVERAGE+0x14>
 800e664:	4b15      	ldr	r3, [pc, #84]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d105      	bne.n	800e678 <PSV_PIP_AVERAGE+0x20>
	{
		PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val = 1;
 800e66c:	4b13      	ldr	r3, [pc, #76]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e66e:	2201      	movs	r2, #1
 800e670:	605a      	str	r2, [r3, #4]
		PSV_Pip_average.PRESSURE_SUPPORT_Event_Count    = 1;
 800e672:	4b12      	ldr	r3, [pc, #72]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e674:	2201      	movs	r2, #1
 800e676:	609a      	str	r2, [r3, #8]
	}
	PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL        = (uint32_t)(PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val/ PSV_Pip_average.PRESSURE_SUPPORT_Event_Count);
 800e678:	4b10      	ldr	r3, [pc, #64]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e67a:	685a      	ldr	r2, [r3, #4]
 800e67c:	4b0f      	ldr	r3, [pc, #60]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e67e:	689b      	ldr	r3, [r3, #8]
 800e680:	fbb2 f3f3 	udiv	r3, r2, r3
 800e684:	b2da      	uxtb	r2, r3
 800e686:	4b0d      	ldr	r3, [pc, #52]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e688:	731a      	strb	r2, [r3, #12]
	PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val = RESET;
 800e68a:	4b0c      	ldr	r3, [pc, #48]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	605a      	str	r2, [r3, #4]
	PSV_Pip_average.PRESSURE_SUPPORT_Event_Count    = RESET;
 800e690:	4b0a      	ldr	r3, [pc, #40]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e692:	2200      	movs	r2, #0
 800e694:	609a      	str	r2, [r3, #8]
	if(PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL == PSV.PRESSURE_SUPPORT_Val)
 800e696:	4b09      	ldr	r3, [pc, #36]	; (800e6bc <PSV_PIP_AVERAGE+0x64>)
 800e698:	7b1b      	ldrb	r3, [r3, #12]
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	4b08      	ldr	r3, [pc, #32]	; (800e6c0 <PSV_PIP_AVERAGE+0x68>)
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d108      	bne.n	800e6b6 <PSV_PIP_AVERAGE+0x5e>
	{
		Change_DAC_Values(PSV.PRESSURE_SUPPORT_Val,Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL);
 800e6a4:	4b06      	ldr	r3, [pc, #24]	; (800e6c0 <PSV_PIP_AVERAGE+0x68>)
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	4a06      	ldr	r2, [pc, #24]	; (800e6c4 <PSV_PIP_AVERAGE+0x6c>)
 800e6ac:	8912      	ldrh	r2, [r2, #8]
 800e6ae:	4611      	mov	r1, r2
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7fa ffe3 	bl	800967c <Change_DAC_Values>
	}
}
 800e6b6:	bf00      	nop
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20013b84 	.word	0x20013b84
 800e6c0:	20013da4 	.word	0x20013da4
 800e6c4:	20014030 	.word	0x20014030

0800e6c8 <PSV_TUNE_PEEP_BLOWER>:


static uint16_t PSV_TUNE_PEEP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PEEP)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	70fb      	strb	r3, [r7, #3]
	if(  ( PSV_Peep_Average.PEEP_AVG_VAL)  > ( Set_PEEP ) && (PSV_Peep_Average.PEEP_AVG_VAL  < (Set_PEEP + 2) ) )
 800e6d4:	4b37      	ldr	r3, [pc, #220]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e6d6:	7a1b      	ldrb	r3, [r3, #8]
 800e6d8:	78fa      	ldrb	r2, [r7, #3]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d20c      	bcs.n	800e6f8 <PSV_TUNE_PEEP_BLOWER+0x30>
 800e6de:	78fb      	ldrb	r3, [r7, #3]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	4a34      	ldr	r2, [pc, #208]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e6e4:	7a12      	ldrb	r2, [r2, #8]
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	db06      	blt.n	800e6f8 <PSV_TUNE_PEEP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	881b      	ldrh	r3, [r3, #0]
 800e6ee:	3b0a      	subs	r3, #10
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	801a      	strh	r2, [r3, #0]
 800e6f6:	e055      	b.n	800e7a4 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if(  ( PSV_Peep_Average.PEEP_AVG_VAL)  >= ( Set_PEEP + 2 ) && (PSV_Peep_Average.PEEP_AVG_VAL  < (Set_PEEP + 4) ) )
 800e6f8:	78fb      	ldrb	r3, [r7, #3]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	4a2d      	ldr	r2, [pc, #180]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e6fe:	7a12      	ldrb	r2, [r2, #8]
 800e700:	4293      	cmp	r3, r2
 800e702:	da0c      	bge.n	800e71e <PSV_TUNE_PEEP_BLOWER+0x56>
 800e704:	78fb      	ldrb	r3, [r7, #3]
 800e706:	3303      	adds	r3, #3
 800e708:	4a2a      	ldr	r2, [pc, #168]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e70a:	7a12      	ldrb	r2, [r2, #8]
 800e70c:	4293      	cmp	r3, r2
 800e70e:	db06      	blt.n	800e71e <PSV_TUNE_PEEP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	881b      	ldrh	r3, [r3, #0]
 800e714:	3b14      	subs	r3, #20
 800e716:	b29a      	uxth	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	801a      	strh	r2, [r3, #0]
 800e71c:	e042      	b.n	800e7a4 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if(  ( PSV_Peep_Average.PEEP_AVG_VAL)  >= ( Set_PEEP + 4 )  )
 800e71e:	78fb      	ldrb	r3, [r7, #3]
 800e720:	3303      	adds	r3, #3
 800e722:	4a24      	ldr	r2, [pc, #144]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e724:	7a12      	ldrb	r2, [r2, #8]
 800e726:	4293      	cmp	r3, r2
 800e728:	da06      	bge.n	800e738 <PSV_TUNE_PEEP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	881b      	ldrh	r3, [r3, #0]
 800e72e:	3b28      	subs	r3, #40	; 0x28
 800e730:	b29a      	uxth	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	801a      	strh	r2, [r3, #0]
 800e736:	e035      	b.n	800e7a4 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if( (PSV_Peep_Average.PEEP_AVG_VAL  < Set_PEEP) && (PSV_Peep_Average.PEEP_AVG_VAL  > (Set_PEEP -2) ) )
 800e738:	4b1e      	ldr	r3, [pc, #120]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e73a:	7a1b      	ldrb	r3, [r3, #8]
 800e73c:	78fa      	ldrb	r2, [r7, #3]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d90c      	bls.n	800e75c <PSV_TUNE_PEEP_BLOWER+0x94>
 800e742:	78fb      	ldrb	r3, [r7, #3]
 800e744:	3b01      	subs	r3, #1
 800e746:	4a1b      	ldr	r2, [pc, #108]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e748:	7a12      	ldrb	r2, [r2, #8]
 800e74a:	4293      	cmp	r3, r2
 800e74c:	dc06      	bgt.n	800e75c <PSV_TUNE_PEEP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	881b      	ldrh	r3, [r3, #0]
 800e752:	330a      	adds	r3, #10
 800e754:	b29a      	uxth	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	801a      	strh	r2, [r3, #0]
 800e75a:	e023      	b.n	800e7a4 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if(  (PSV_Peep_Average.PEEP_AVG_VAL  <= (Set_PEEP-2) ) && (PSV_Peep_Average.PEEP_AVG_VAL  >  (Set_PEEP-4) ) )
 800e75c:	78fb      	ldrb	r3, [r7, #3]
 800e75e:	3b01      	subs	r3, #1
 800e760:	4a14      	ldr	r2, [pc, #80]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e762:	7a12      	ldrb	r2, [r2, #8]
 800e764:	4293      	cmp	r3, r2
 800e766:	dd0c      	ble.n	800e782 <PSV_TUNE_PEEP_BLOWER+0xba>
 800e768:	78fb      	ldrb	r3, [r7, #3]
 800e76a:	3b03      	subs	r3, #3
 800e76c:	4a11      	ldr	r2, [pc, #68]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e76e:	7a12      	ldrb	r2, [r2, #8]
 800e770:	4293      	cmp	r3, r2
 800e772:	dc06      	bgt.n	800e782 <PSV_TUNE_PEEP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	881b      	ldrh	r3, [r3, #0]
 800e778:	3314      	adds	r3, #20
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	801a      	strh	r2, [r3, #0]
 800e780:	e010      	b.n	800e7a4 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if(  (PSV_Peep_Average.PEEP_AVG_VAL  <= (Set_PEEP-4) )  )
 800e782:	78fb      	ldrb	r3, [r7, #3]
 800e784:	3b03      	subs	r3, #3
 800e786:	4a0b      	ldr	r2, [pc, #44]	; (800e7b4 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800e788:	7a12      	ldrb	r2, [r2, #8]
 800e78a:	4293      	cmp	r3, r2
 800e78c:	dd06      	ble.n	800e79c <PSV_TUNE_PEEP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	881b      	ldrh	r3, [r3, #0]
 800e792:	3328      	adds	r3, #40	; 0x28
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	801a      	strh	r2, [r3, #0]
 800e79a:	e003      	b.n	800e7a4 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	881a      	ldrh	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	881b      	ldrh	r3, [r3, #0]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	370c      	adds	r7, #12
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr
 800e7b4:	20014258 	.word	0x20014258

0800e7b8 <PSV_TUNE_PIP_BLOWER>:


static uint16_t PSV_TUNE_PIP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PIP)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	70fb      	strb	r3, [r7, #3]

	if(  ( PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL)  > ( Set_PIP ) && (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  < (Set_PIP + 2) ) )
 800e7c4:	4b37      	ldr	r3, [pc, #220]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e7c6:	7b1b      	ldrb	r3, [r3, #12]
 800e7c8:	78fa      	ldrb	r2, [r7, #3]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d20c      	bcs.n	800e7e8 <PSV_TUNE_PIP_BLOWER+0x30>
 800e7ce:	78fb      	ldrb	r3, [r7, #3]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	4a34      	ldr	r2, [pc, #208]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e7d4:	7b12      	ldrb	r2, [r2, #12]
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	db06      	blt.n	800e7e8 <PSV_TUNE_PIP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	3b0a      	subs	r3, #10
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	801a      	strh	r2, [r3, #0]
 800e7e6:	e055      	b.n	800e894 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  ( PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL)  >= ( Set_PIP + 2 ) && (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  < (Set_PIP + 4) ) )
 800e7e8:	78fb      	ldrb	r3, [r7, #3]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	4a2d      	ldr	r2, [pc, #180]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e7ee:	7b12      	ldrb	r2, [r2, #12]
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	da0c      	bge.n	800e80e <PSV_TUNE_PIP_BLOWER+0x56>
 800e7f4:	78fb      	ldrb	r3, [r7, #3]
 800e7f6:	3303      	adds	r3, #3
 800e7f8:	4a2a      	ldr	r2, [pc, #168]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e7fa:	7b12      	ldrb	r2, [r2, #12]
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	db06      	blt.n	800e80e <PSV_TUNE_PIP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	3b14      	subs	r3, #20
 800e806:	b29a      	uxth	r2, r3
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	801a      	strh	r2, [r3, #0]
 800e80c:	e042      	b.n	800e894 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  ( PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL)  >= ( Set_PIP + 4 )  )
 800e80e:	78fb      	ldrb	r3, [r7, #3]
 800e810:	3303      	adds	r3, #3
 800e812:	4a24      	ldr	r2, [pc, #144]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e814:	7b12      	ldrb	r2, [r2, #12]
 800e816:	4293      	cmp	r3, r2
 800e818:	da06      	bge.n	800e828 <PSV_TUNE_PIP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	881b      	ldrh	r3, [r3, #0]
 800e81e:	3b28      	subs	r3, #40	; 0x28
 800e820:	b29a      	uxth	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	801a      	strh	r2, [r3, #0]
 800e826:	e035      	b.n	800e894 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if( (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  < Set_PIP) && (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  > (Set_PIP -2) ) )
 800e828:	4b1e      	ldr	r3, [pc, #120]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e82a:	7b1b      	ldrb	r3, [r3, #12]
 800e82c:	78fa      	ldrb	r2, [r7, #3]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d90c      	bls.n	800e84c <PSV_TUNE_PIP_BLOWER+0x94>
 800e832:	78fb      	ldrb	r3, [r7, #3]
 800e834:	3b01      	subs	r3, #1
 800e836:	4a1b      	ldr	r2, [pc, #108]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e838:	7b12      	ldrb	r2, [r2, #12]
 800e83a:	4293      	cmp	r3, r2
 800e83c:	dc06      	bgt.n	800e84c <PSV_TUNE_PIP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	881b      	ldrh	r3, [r3, #0]
 800e842:	330a      	adds	r3, #10
 800e844:	b29a      	uxth	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	801a      	strh	r2, [r3, #0]
 800e84a:	e023      	b.n	800e894 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  <= (Set_PIP-2) ) && (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  >  (Set_PIP-4) ) )
 800e84c:	78fb      	ldrb	r3, [r7, #3]
 800e84e:	3b01      	subs	r3, #1
 800e850:	4a14      	ldr	r2, [pc, #80]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e852:	7b12      	ldrb	r2, [r2, #12]
 800e854:	4293      	cmp	r3, r2
 800e856:	dd0c      	ble.n	800e872 <PSV_TUNE_PIP_BLOWER+0xba>
 800e858:	78fb      	ldrb	r3, [r7, #3]
 800e85a:	3b03      	subs	r3, #3
 800e85c:	4a11      	ldr	r2, [pc, #68]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e85e:	7b12      	ldrb	r2, [r2, #12]
 800e860:	4293      	cmp	r3, r2
 800e862:	dc06      	bgt.n	800e872 <PSV_TUNE_PIP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	881b      	ldrh	r3, [r3, #0]
 800e868:	3314      	adds	r3, #20
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	801a      	strh	r2, [r3, #0]
 800e870:	e010      	b.n	800e894 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  <= (Set_PIP-4) )  )
 800e872:	78fb      	ldrb	r3, [r7, #3]
 800e874:	3b03      	subs	r3, #3
 800e876:	4a0b      	ldr	r2, [pc, #44]	; (800e8a4 <PSV_TUNE_PIP_BLOWER+0xec>)
 800e878:	7b12      	ldrb	r2, [r2, #12]
 800e87a:	4293      	cmp	r3, r2
 800e87c:	dd06      	ble.n	800e88c <PSV_TUNE_PIP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	881b      	ldrh	r3, [r3, #0]
 800e882:	3328      	adds	r3, #40	; 0x28
 800e884:	b29a      	uxth	r2, r3
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	801a      	strh	r2, [r3, #0]
 800e88a:	e003      	b.n	800e894 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	881a      	ldrh	r2, [r3, #0]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	881b      	ldrh	r3, [r3, #0]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	20013b84 	.word	0x20013b84

0800e8a8 <BACKUP_PC_CMV_START>:



static void BACKUP_PC_CMV_START()
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	af00      	add	r7, sp, #0
	if(Backup_PC_CMV_SET_VALUE == CHANGE_HAPPEN)
 800e8ac:	4b68      	ldr	r3, [pc, #416]	; (800ea50 <BACKUP_PC_CMV_START+0x1a8>)
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d172      	bne.n	800e99a <BACKUP_PC_CMV_START+0xf2>
	{
		Mode                                                  = Backup_Pccmv;
 800e8b4:	4b67      	ldr	r3, [pc, #412]	; (800ea54 <BACKUP_PC_CMV_START+0x1ac>)
 800e8b6:	2215      	movs	r2, #21
 800e8b8:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 800e8ba:	4b67      	ldr	r3, [pc, #412]	; (800ea58 <BACKUP_PC_CMV_START+0x1b0>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 800e8c0:	4b66      	ldr	r3, [pc, #408]	; (800ea5c <BACKUP_PC_CMV_START+0x1b4>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 800e8c6:	4b66      	ldr	r3, [pc, #408]	; (800ea60 <BACKUP_PC_CMV_START+0x1b8>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fa fd18 	bl	8009300 <DAC_VAL>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	4b63      	ldr	r3, [pc, #396]	; (800ea64 <BACKUP_PC_CMV_START+0x1bc>)
 800e8d6:	811a      	strh	r2, [r3, #8]
		if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 800e8d8:	4b63      	ldr	r3, [pc, #396]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b1d      	cmp	r3, #29
 800e8de:	d80a      	bhi.n	800e8f6 <BACKUP_PC_CMV_START+0x4e>
 800e8e0:	4b61      	ldr	r3, [pc, #388]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800e8e2:	785b      	ldrb	r3, [r3, #1]
 800e8e4:	2b08      	cmp	r3, #8
 800e8e6:	d806      	bhi.n	800e8f6 <BACKUP_PC_CMV_START+0x4e>
		{
			PIP_control_Task.PIP_Control_Task_Delay           = 10;
 800e8e8:	4b60      	ldr	r3, [pc, #384]	; (800ea6c <BACKUP_PC_CMV_START+0x1c4>)
 800e8ea:	220a      	movs	r2, #10
 800e8ec:	801a      	strh	r2, [r3, #0]
			PIP_control_Task.Increase_Each_DAC_SET_CONST      = 50;
 800e8ee:	4b5f      	ldr	r3, [pc, #380]	; (800ea6c <BACKUP_PC_CMV_START+0x1c4>)
 800e8f0:	2232      	movs	r2, #50	; 0x32
 800e8f2:	80da      	strh	r2, [r3, #6]
 800e8f4:	e005      	b.n	800e902 <BACKUP_PC_CMV_START+0x5a>
		}
		else
		{
			PIP_control_Task.PIP_Control_Task_Delay           = 2;
 800e8f6:	4b5d      	ldr	r3, [pc, #372]	; (800ea6c <BACKUP_PC_CMV_START+0x1c4>)
 800e8f8:	2202      	movs	r2, #2
 800e8fa:	801a      	strh	r2, [r3, #0]
			PIP_control_Task.Increase_Each_DAC_SET_CONST      = 140;
 800e8fc:	4b5b      	ldr	r3, [pc, #364]	; (800ea6c <BACKUP_PC_CMV_START+0x1c4>)
 800e8fe:	228c      	movs	r2, #140	; 0x8c
 800e900:	80da      	strh	r2, [r3, #6]
		}

		if( (Common_Mode_Parameter._PIP_Val < 30) && (Common_Mode_Parameter._PEEP_Val < 9) )
 800e902:	4b59      	ldr	r3, [pc, #356]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	2b1d      	cmp	r3, #29
 800e908:	d807      	bhi.n	800e91a <BACKUP_PC_CMV_START+0x72>
 800e90a:	4b57      	ldr	r3, [pc, #348]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800e90c:	785b      	ldrb	r3, [r3, #1]
 800e90e:	2b08      	cmp	r3, #8
 800e910:	d803      	bhi.n	800e91a <BACKUP_PC_CMV_START+0x72>
		{
			BACKUP_PC_CMV.RISE_TIME_MS_Val = 800;
 800e912:	4b53      	ldr	r3, [pc, #332]	; (800ea60 <BACKUP_PC_CMV_START+0x1b8>)
 800e914:	4a56      	ldr	r2, [pc, #344]	; (800ea70 <BACKUP_PC_CMV_START+0x1c8>)
 800e916:	605a      	str	r2, [r3, #4]
 800e918:	e006      	b.n	800e928 <BACKUP_PC_CMV_START+0x80>
		}
		else if((Common_Mode_Parameter._PEEP_Val < 9))
 800e91a:	4b53      	ldr	r3, [pc, #332]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800e91c:	785b      	ldrb	r3, [r3, #1]
 800e91e:	2b08      	cmp	r3, #8
 800e920:	d802      	bhi.n	800e928 <BACKUP_PC_CMV_START+0x80>
		{
			BACKUP_PC_CMV.RISE_TIME_MS_Val = 600;
 800e922:	4b4f      	ldr	r3, [pc, #316]	; (800ea60 <BACKUP_PC_CMV_START+0x1b8>)
 800e924:	4a53      	ldr	r2, [pc, #332]	; (800ea74 <BACKUP_PC_CMV_START+0x1cc>)
 800e926:	605a      	str	r2, [r3, #4]
		}
		Smooth_Ramp_Time_Val_Count = 0;
 800e928:	4b53      	ldr	r3, [pc, #332]	; (800ea78 <BACKUP_PC_CMV_START+0x1d0>)
 800e92a:	2200      	movs	r2, #0
 800e92c:	701a      	strb	r2, [r3, #0]
		Smooth_Ramp_Time_Val       = 15;
 800e92e:	4b53      	ldr	r3, [pc, #332]	; (800ea7c <BACKUP_PC_CMV_START+0x1d4>)
 800e930:	220f      	movs	r2, #15
 800e932:	701a      	strb	r2, [r3, #0]
		if(Common_Mode_Parameter._PEEP_Val >= 15)
 800e934:	4b4c      	ldr	r3, [pc, #304]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800e936:	785b      	ldrb	r3, [r3, #1]
 800e938:	2b0e      	cmp	r3, #14
 800e93a:	d903      	bls.n	800e944 <BACKUP_PC_CMV_START+0x9c>
		{
		  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800e93c:	4b50      	ldr	r3, [pc, #320]	; (800ea80 <BACKUP_PC_CMV_START+0x1d8>)
 800e93e:	2201      	movs	r2, #1
 800e940:	701a      	strb	r2, [r3, #0]
 800e942:	e00e      	b.n	800e962 <BACKUP_PC_CMV_START+0xba>
		}
		else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 800e944:	4b48      	ldr	r3, [pc, #288]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800e946:	785b      	ldrb	r3, [r3, #1]
 800e948:	2b0e      	cmp	r3, #14
 800e94a:	d807      	bhi.n	800e95c <BACKUP_PC_CMV_START+0xb4>
 800e94c:	4b46      	ldr	r3, [pc, #280]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800e94e:	785b      	ldrb	r3, [r3, #1]
 800e950:	2b08      	cmp	r3, #8
 800e952:	d903      	bls.n	800e95c <BACKUP_PC_CMV_START+0xb4>
		{
		  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 800e954:	4b4a      	ldr	r3, [pc, #296]	; (800ea80 <BACKUP_PC_CMV_START+0x1d8>)
 800e956:	2200      	movs	r2, #0
 800e958:	701a      	strb	r2, [r3, #0]
 800e95a:	e002      	b.n	800e962 <BACKUP_PC_CMV_START+0xba>
		}
		else
		{
			Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800e95c:	4b48      	ldr	r3, [pc, #288]	; (800ea80 <BACKUP_PC_CMV_START+0x1d8>)
 800e95e:	2201      	movs	r2, #1
 800e960:	701a      	strb	r2, [r3, #0]
		}
		PIP_Average_Parameter.PIP_Cumulative_Val              = 1;
 800e962:	4b48      	ldr	r3, [pc, #288]	; (800ea84 <BACKUP_PC_CMV_START+0x1dc>)
 800e964:	2201      	movs	r2, #1
 800e966:	605a      	str	r2, [r3, #4]
		PIP_Average_Parameter.PIP_Event_Count                 = 1;
 800e968:	4b46      	ldr	r3, [pc, #280]	; (800ea84 <BACKUP_PC_CMV_START+0x1dc>)
 800e96a:	2201      	movs	r2, #1
 800e96c:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 800e96e:	4b46      	ldr	r3, [pc, #280]	; (800ea88 <BACKUP_PC_CMV_START+0x1e0>)
 800e970:	2201      	movs	r2, #1
 800e972:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 800e974:	4b44      	ldr	r3, [pc, #272]	; (800ea88 <BACKUP_PC_CMV_START+0x1e0>)
 800e976:	2201      	movs	r2, #1
 800e978:	60da      	str	r2, [r3, #12]
		Need_PID_Task_Delay                                   = NO;
 800e97a:	4b44      	ldr	r3, [pc, #272]	; (800ea8c <BACKUP_PC_CMV_START+0x1e4>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	701a      	strb	r2, [r3, #0]
		Tune_PID_Task_Delay                                   = T_OPEN;
 800e980:	4b43      	ldr	r3, [pc, #268]	; (800ea90 <BACKUP_PC_CMV_START+0x1e8>)
 800e982:	2200      	movs	r2, #0
 800e984:	701a      	strb	r2, [r3, #0]
		PIP_control_Task.Low_PIP_Count                        = RESET;
 800e986:	4b39      	ldr	r3, [pc, #228]	; (800ea6c <BACKUP_PC_CMV_START+0x1c4>)
 800e988:	2200      	movs	r2, #0
 800e98a:	729a      	strb	r2, [r3, #10]
		PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 800e98c:	4b37      	ldr	r3, [pc, #220]	; (800ea6c <BACKUP_PC_CMV_START+0x1c4>)
 800e98e:	2200      	movs	r2, #0
 800e990:	725a      	strb	r2, [r3, #9]
		Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 800e992:	4b40      	ldr	r3, [pc, #256]	; (800ea94 <BACKUP_PC_CMV_START+0x1ec>)
 800e994:	2201      	movs	r2, #1
 800e996:	701a      	strb	r2, [r3, #0]
 800e998:	e023      	b.n	800e9e2 <BACKUP_PC_CMV_START+0x13a>
	 }
	 else if(Backup_PC_CMV_SET_VALUE == NO_CHANGES)
 800e99a:	4b2d      	ldr	r3, [pc, #180]	; (800ea50 <BACKUP_PC_CMV_START+0x1a8>)
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d11f      	bne.n	800e9e2 <BACKUP_PC_CMV_START+0x13a>
	 {
		Mode                                                  = Backup_Pccmv;
 800e9a2:	4b2c      	ldr	r3, [pc, #176]	; (800ea54 <BACKUP_PC_CMV_START+0x1ac>)
 800e9a4:	2215      	movs	r2, #21
 800e9a6:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 800e9a8:	4b2b      	ldr	r3, [pc, #172]	; (800ea58 <BACKUP_PC_CMV_START+0x1b0>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 800e9ae:	4b2b      	ldr	r3, [pc, #172]	; (800ea5c <BACKUP_PC_CMV_START+0x1b4>)
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = OLD.LAST_BLOWER_ENDING_DAC_SIGNAL;;
 800e9b4:	4b38      	ldr	r3, [pc, #224]	; (800ea98 <BACKUP_PC_CMV_START+0x1f0>)
 800e9b6:	8a9a      	ldrh	r2, [r3, #20]
 800e9b8:	4b2a      	ldr	r3, [pc, #168]	; (800ea64 <BACKUP_PC_CMV_START+0x1bc>)
 800e9ba:	811a      	strh	r2, [r3, #8]
		PIP_control_Task.PIP_Control_Task_Delay               = OLD.LAST_PIP_Control_Task_Delay;
 800e9bc:	4b36      	ldr	r3, [pc, #216]	; (800ea98 <BACKUP_PC_CMV_START+0x1f0>)
 800e9be:	8ada      	ldrh	r2, [r3, #22]
 800e9c0:	4b2a      	ldr	r3, [pc, #168]	; (800ea6c <BACKUP_PC_CMV_START+0x1c4>)
 800e9c2:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = OLD.LAST_Increase_Each_DAC_SET_CONST;
 800e9c4:	4b34      	ldr	r3, [pc, #208]	; (800ea98 <BACKUP_PC_CMV_START+0x1f0>)
 800e9c6:	8b1a      	ldrh	r2, [r3, #24]
 800e9c8:	4b28      	ldr	r3, [pc, #160]	; (800ea6c <BACKUP_PC_CMV_START+0x1c4>)
 800e9ca:	80da      	strh	r2, [r3, #6]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = PEEP_Maintain_Parameter.PEEP_AVG_VAL;
 800e9cc:	4b2e      	ldr	r3, [pc, #184]	; (800ea88 <BACKUP_PC_CMV_START+0x1e0>)
 800e9ce:	7c1b      	ldrb	r3, [r3, #16]
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	4b2d      	ldr	r3, [pc, #180]	; (800ea88 <BACKUP_PC_CMV_START+0x1e0>)
 800e9d4:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 800e9d6:	4b2c      	ldr	r3, [pc, #176]	; (800ea88 <BACKUP_PC_CMV_START+0x1e0>)
 800e9d8:	2201      	movs	r2, #1
 800e9da:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 800e9dc:	4b2d      	ldr	r3, [pc, #180]	; (800ea94 <BACKUP_PC_CMV_START+0x1ec>)
 800e9de:	2201      	movs	r2, #1
 800e9e0:	701a      	strb	r2, [r3, #0]
	 }
		vTaskResume(One_Time_Handler);
 800e9e2:	4b2e      	ldr	r3, [pc, #184]	; (800ea9c <BACKUP_PC_CMV_START+0x1f4>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f010 fd18 	bl	801f41c <vTaskResume>
		vTaskResume(BACKUP_PC_Handler);
 800e9ec:	4b2c      	ldr	r3, [pc, #176]	; (800eaa0 <BACKUP_PC_CMV_START+0x1f8>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f010 fd13 	bl	801f41c <vTaskResume>
		vTaskResume(PIP_Control_Task_Handler);
 800e9f6:	4b2b      	ldr	r3, [pc, #172]	; (800eaa4 <BACKUP_PC_CMV_START+0x1fc>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f010 fd0e 	bl	801f41c <vTaskResume>
		vTaskResume(Alert_Handler);
 800ea00:	4b29      	ldr	r3, [pc, #164]	; (800eaa8 <BACKUP_PC_CMV_START+0x200>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4618      	mov	r0, r3
 800ea06:	f010 fd09 	bl	801f41c <vTaskResume>
		if(Common_Mode_Parameter._FIO2_Val > 21)
 800ea0a:	4b17      	ldr	r3, [pc, #92]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800ea0c:	78db      	ldrb	r3, [r3, #3]
 800ea0e:	2b15      	cmp	r3, #21
 800ea10:	d90a      	bls.n	800ea28 <BACKUP_PC_CMV_START+0x180>
		{
			O2_Initial_Parameter(Common_Mode_Parameter._FIO2_Val);
 800ea12:	4b15      	ldr	r3, [pc, #84]	; (800ea68 <BACKUP_PC_CMV_START+0x1c0>)
 800ea14:	78db      	ldrb	r3, [r3, #3]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fc ffee 	bl	800b9f8 <O2_Initial_Parameter>
			vTaskResume(Oxygen_Blending_Handler);
 800ea1c:	4b23      	ldr	r3, [pc, #140]	; (800eaac <BACKUP_PC_CMV_START+0x204>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f010 fcfb 	bl	801f41c <vTaskResume>
 800ea26:	e007      	b.n	800ea38 <BACKUP_PC_CMV_START+0x190>
		}
		else
		{
			Parkar_valve_Signal(0);
 800ea28:	4b21      	ldr	r3, [pc, #132]	; (800eab0 <BACKUP_PC_CMV_START+0x208>)
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	615a      	str	r2, [r3, #20]
			vTaskSuspend(Oxygen_Blending_Handler);
 800ea2e:	4b1f      	ldr	r3, [pc, #124]	; (800eaac <BACKUP_PC_CMV_START+0x204>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f010 fc2e 	bl	801f294 <vTaskSuspend>
		}



		vTaskSuspend(PSV_PID_Handler);
 800ea38:	4b1e      	ldr	r3, [pc, #120]	; (800eab4 <BACKUP_PC_CMV_START+0x20c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f010 fc29 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(PSV_Handler);
 800ea42:	4b1d      	ldr	r3, [pc, #116]	; (800eab8 <BACKUP_PC_CMV_START+0x210>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f010 fc24 	bl	801f294 <vTaskSuspend>
}
 800ea4c:	bf00      	nop
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	20013c44 	.word	0x20013c44
 800ea54:	20013d48 	.word	0x20013d48
 800ea58:	200140f5 	.word	0x200140f5
 800ea5c:	200140f4 	.word	0x200140f4
 800ea60:	20013930 	.word	0x20013930
 800ea64:	20014030 	.word	0x20014030
 800ea68:	20013ba4 	.word	0x20013ba4
 800ea6c:	20013b04 	.word	0x20013b04
 800ea70:	44480000 	.word	0x44480000
 800ea74:	44160000 	.word	0x44160000
 800ea78:	200140c1 	.word	0x200140c1
 800ea7c:	20014058 	.word	0x20014058
 800ea80:	20013b82 	.word	0x20013b82
 800ea84:	20013b70 	.word	0x20013b70
 800ea88:	20014300 	.word	0x20014300
 800ea8c:	200140f6 	.word	0x200140f6
 800ea90:	20013c88 	.word	0x20013c88
 800ea94:	20013d20 	.word	0x20013d20
 800ea98:	20014298 	.word	0x20014298
 800ea9c:	20014094 	.word	0x20014094
 800eaa0:	20013bb4 	.word	0x20013bb4
 800eaa4:	20013ba0 	.word	0x20013ba0
 800eaa8:	20014020 	.word	0x20014020
 800eaac:	20013f24 	.word	0x20013f24
 800eab0:	40007400 	.word	0x40007400
 800eab4:	20013f20 	.word	0x20013f20
 800eab8:	20013fa8 	.word	0x20013fa8

0800eabc <RESET_FLAGS>:




static void RESET_FLAGS()
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 800eac0:	4b0e      	ldr	r3, [pc, #56]	; (800eafc <RESET_FLAGS+0x40>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	609a      	str	r2, [r3, #8]
	Peep_Status                   				= PEEP_NOT_ACHEIVED;
 800eac6:	4b0e      	ldr	r3, [pc, #56]	; (800eb00 <RESET_FLAGS+0x44>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			    = OPENED;
 800eacc:	4b0d      	ldr	r3, [pc, #52]	; (800eb04 <RESET_FLAGS+0x48>)
 800eace:	2200      	movs	r2, #0
 800ead0:	701a      	strb	r2, [r3, #0]
	Clear_All_Alert_Bits();
 800ead2:	f7f2 fa4d 	bl	8000f70 <Clear_All_Alert_Bits>
	Send_Bluetooth_Data_Farme                   = SEND_ALERT_FRAME;
 800ead6:	4b0c      	ldr	r3, [pc, #48]	; (800eb08 <RESET_FLAGS+0x4c>)
 800ead8:	2201      	movs	r2, #1
 800eada:	701a      	strb	r2, [r3, #0]
	Apnea_Alert                                 = APNEA_ALERT_HAPPEN;
 800eadc:	4b0b      	ldr	r3, [pc, #44]	; (800eb0c <RESET_FLAGS+0x50>)
 800eade:	2201      	movs	r2, #1
 800eae0:	701a      	strb	r2, [r3, #0]
	Alert_Status                                = ALERT_HAPPEN;
 800eae2:	4b0b      	ldr	r3, [pc, #44]	; (800eb10 <RESET_FLAGS+0x54>)
 800eae4:	2201      	movs	r2, #1
 800eae6:	701a      	strb	r2, [r3, #0]
	SET_ALERT_BIT(SECOND_FRAME_UN,_ALERT_APNEA);
 800eae8:	4a0a      	ldr	r2, [pc, #40]	; (800eb14 <RESET_FLAGS+0x58>)
 800eaea:	7913      	ldrb	r3, [r2, #4]
 800eaec:	f043 0301 	orr.w	r3, r3, #1
 800eaf0:	7113      	strb	r3, [r2, #4]
	LED_Alert();
 800eaf2:	f7f2 ff5d 	bl	80019b0 <LED_Alert>
}
 800eaf6:	bf00      	nop
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	40007400 	.word	0x40007400
 800eb00:	200140f5 	.word	0x200140f5
 800eb04:	200140f4 	.word	0x200140f4
 800eb08:	20013d10 	.word	0x20013d10
 800eb0c:	200140c0 	.word	0x200140c0
 800eb10:	20013f88 	.word	0x20013f88
 800eb14:	20013b34 	.word	0x20013b34

0800eb18 <Patient_Circuit_Disconnected_Alert_PSV>:


static void Patient_Circuit_Disconnected_Alert_PSV()
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	af00      	add	r7, sp, #0
	if(  (Pressure_sensor.Pressure_Val==0) && (Flow_Sensor_cal._Flow_Val==0 || Flow_Sensor_cal._Flow_Val==-1 || Flow_Sensor_cal._Flow_Val==-2))
 800eb1c:	4b26      	ldr	r3, [pc, #152]	; (800ebb8 <Patient_Circuit_Disconnected_Alert_PSV+0xa0>)
 800eb1e:	789b      	ldrb	r3, [r3, #2]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d146      	bne.n	800ebb2 <Patient_Circuit_Disconnected_Alert_PSV+0x9a>
 800eb24:	4b25      	ldr	r3, [pc, #148]	; (800ebbc <Patient_Circuit_Disconnected_Alert_PSV+0xa4>)
 800eb26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d009      	beq.n	800eb40 <Patient_Circuit_Disconnected_Alert_PSV+0x28>
 800eb2c:	4b23      	ldr	r3, [pc, #140]	; (800ebbc <Patient_Circuit_Disconnected_Alert_PSV+0xa4>)
 800eb2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb34:	d004      	beq.n	800eb40 <Patient_Circuit_Disconnected_Alert_PSV+0x28>
 800eb36:	4b21      	ldr	r3, [pc, #132]	; (800ebbc <Patient_Circuit_Disconnected_Alert_PSV+0xa4>)
 800eb38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb3a:	f113 0f02 	cmn.w	r3, #2
 800eb3e:	d138      	bne.n	800ebb2 <Patient_Circuit_Disconnected_Alert_PSV+0x9a>
	{
			if((DAC1->DHR12R1)>=400)
 800eb40:	4b1f      	ldr	r3, [pc, #124]	; (800ebc0 <Patient_Circuit_Disconnected_Alert_PSV+0xa8>)
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800eb48:	d333      	bcc.n	800ebb2 <Patient_Circuit_Disconnected_Alert_PSV+0x9a>
			{
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 800eb4a:	4b1e      	ldr	r3, [pc, #120]	; (800ebc4 <Patient_Circuit_Disconnected_Alert_PSV+0xac>)
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d12f      	bne.n	800ebb2 <Patient_Circuit_Disconnected_Alert_PSV+0x9a>
				{
					Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 800eb52:	4b1d      	ldr	r3, [pc, #116]	; (800ebc8 <Patient_Circuit_Disconnected_Alert_PSV+0xb0>)
 800eb54:	88db      	ldrh	r3, [r3, #6]
 800eb56:	3301      	adds	r3, #1
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	4b1b      	ldr	r3, [pc, #108]	; (800ebc8 <Patient_Circuit_Disconnected_Alert_PSV+0xb0>)
 800eb5c:	80da      	strh	r2, [r3, #6]
						if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 500)
 800eb5e:	4b1a      	ldr	r3, [pc, #104]	; (800ebc8 <Patient_Circuit_Disconnected_Alert_PSV+0xb0>)
 800eb60:	88db      	ldrh	r3, [r3, #6]
 800eb62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800eb66:	d324      	bcc.n	800ebb2 <Patient_Circuit_Disconnected_Alert_PSV+0x9a>
						{
							Clear_All_Alert_Bits();
 800eb68:	f7f2 fa02 	bl	8000f70 <Clear_All_Alert_Bits>
							Alert_Status = ALERT_HAPPEN;
 800eb6c:	4b17      	ldr	r3, [pc, #92]	; (800ebcc <Patient_Circuit_Disconnected_Alert_PSV+0xb4>)
 800eb6e:	2201      	movs	r2, #1
 800eb70:	701a      	strb	r2, [r3, #0]
							SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 800eb72:	4a17      	ldr	r2, [pc, #92]	; (800ebd0 <Patient_Circuit_Disconnected_Alert_PSV+0xb8>)
 800eb74:	78d3      	ldrb	r3, [r2, #3]
 800eb76:	f043 0310 	orr.w	r3, r3, #16
 800eb7a:	70d3      	strb	r3, [r2, #3]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 800eb7c:	4b11      	ldr	r3, [pc, #68]	; (800ebc4 <Patient_Circuit_Disconnected_Alert_PSV+0xac>)
 800eb7e:	2201      	movs	r2, #1
 800eb80:	701a      	strb	r2, [r3, #0]
							Send_Bluetooth_Data_Farme                = SEND_ALERT_FRAME;
 800eb82:	4b14      	ldr	r3, [pc, #80]	; (800ebd4 <Patient_Circuit_Disconnected_Alert_PSV+0xbc>)
 800eb84:	2201      	movs	r2, #1
 800eb86:	701a      	strb	r2, [r3, #0]
							Apnea_Alert                              = APNEA_ALERT_HAPPEN;
 800eb88:	4b13      	ldr	r3, [pc, #76]	; (800ebd8 <Patient_Circuit_Disconnected_Alert_PSV+0xc0>)
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	701a      	strb	r2, [r3, #0]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 800eb8e:	4b0d      	ldr	r3, [pc, #52]	; (800ebc4 <Patient_Circuit_Disconnected_Alert_PSV+0xac>)
 800eb90:	2201      	movs	r2, #1
 800eb92:	701a      	strb	r2, [r3, #0]
							LED_Alert();
 800eb94:	f7f2 ff0c 	bl	80019b0 <LED_Alert>
							PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL           = DAC_VAL(PSV.PEEP_Val );
 800eb98:	4b10      	ldr	r3, [pc, #64]	; (800ebdc <Patient_Circuit_Disconnected_Alert_PSV+0xc4>)
 800eb9a:	789b      	ldrb	r3, [r3, #2]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fa fbaf 	bl	8009300 <DAC_VAL>
 800eba2:	4603      	mov	r3, r0
 800eba4:	461a      	mov	r2, r3
 800eba6:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <Patient_Circuit_Disconnected_Alert_PSV+0xc8>)
 800eba8:	80da      	strh	r2, [r3, #6]
							PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL      = PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 800ebaa:	4b0d      	ldr	r3, [pc, #52]	; (800ebe0 <Patient_Circuit_Disconnected_Alert_PSV+0xc8>)
 800ebac:	88da      	ldrh	r2, [r3, #6]
 800ebae:	4b0c      	ldr	r3, [pc, #48]	; (800ebe0 <Patient_Circuit_Disconnected_Alert_PSV+0xc8>)
 800ebb0:	811a      	strh	r2, [r3, #8]

						}
				}
			}
	}
}
 800ebb2:	bf00      	nop
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	2001405c 	.word	0x2001405c
 800ebbc:	20013fb0 	.word	0x20013fb0
 800ebc0:	40007400 	.word	0x40007400
 800ebc4:	20013ac9 	.word	0x20013ac9
 800ebc8:	20014274 	.word	0x20014274
 800ebcc:	20013f88 	.word	0x20013f88
 800ebd0:	20013b34 	.word	0x20013b34
 800ebd4:	20013d10 	.word	0x20013d10
 800ebd8:	200140c0 	.word	0x200140c0
 800ebdc:	20013da4 	.word	0x20013da4
 800ebe0:	20014284 	.word	0x20014284

0800ebe4 <Get_Volume>:
uint8_t  numReadings  = 15;



void Get_Volume()
{
 800ebe4:	b5b0      	push	{r4, r5, r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
	float Flow_Volume;
	Flow_Volume=(Flow_Sensor_cal.Flow1/60.00)*(Volume_Mul);
 800ebea:	4b20      	ldr	r3, [pc, #128]	; (800ec6c <Get_Volume+0x88>)
 800ebec:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ebf0:	f04f 0200 	mov.w	r2, #0
 800ebf4:	4b1e      	ldr	r3, [pc, #120]	; (800ec70 <Get_Volume+0x8c>)
 800ebf6:	f7f1 fdd1 	bl	800079c <__aeabi_ddiv>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	4614      	mov	r4, r2
 800ec00:	461d      	mov	r5, r3
 800ec02:	4b1c      	ldr	r3, [pc, #112]	; (800ec74 <Get_Volume+0x90>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7f1 fc46 	bl	8000498 <__aeabi_f2d>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	460b      	mov	r3, r1
 800ec10:	4620      	mov	r0, r4
 800ec12:	4629      	mov	r1, r5
 800ec14:	f7f1 fc98 	bl	8000548 <__aeabi_dmul>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	4610      	mov	r0, r2
 800ec1e:	4619      	mov	r1, r3
 800ec20:	f7f1 ff74 	bl	8000b0c <__aeabi_d2f>
 800ec24:	4603      	mov	r3, r0
 800ec26:	607b      	str	r3, [r7, #4]
	vol.Volume=vol.Volume+Flow_Volume;
 800ec28:	4b13      	ldr	r3, [pc, #76]	; (800ec78 <Get_Volume+0x94>)
 800ec2a:	ed93 7a00 	vldr	s14, [r3]
 800ec2e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ec32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec36:	4b10      	ldr	r3, [pc, #64]	; (800ec78 <Get_Volume+0x94>)
 800ec38:	edc3 7a00 	vstr	s15, [r3]
	vol.Volume_Val=(int)vol.Volume;
 800ec3c:	4b0e      	ldr	r3, [pc, #56]	; (800ec78 <Get_Volume+0x94>)
 800ec3e:	edd3 7a00 	vldr	s15, [r3]
 800ec42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec46:	ee17 2a90 	vmov	r2, s15
 800ec4a:	4b0b      	ldr	r3, [pc, #44]	; (800ec78 <Get_Volume+0x94>)
 800ec4c:	605a      	str	r2, [r3, #4]
	if(vol.Volume_max<vol.Volume_Val)
 800ec4e:	4b0a      	ldr	r3, [pc, #40]	; (800ec78 <Get_Volume+0x94>)
 800ec50:	689a      	ldr	r2, [r3, #8]
 800ec52:	4b09      	ldr	r3, [pc, #36]	; (800ec78 <Get_Volume+0x94>)
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	da03      	bge.n	800ec62 <Get_Volume+0x7e>
	{
		vol.Volume_max=vol.Volume_Val;
 800ec5a:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <Get_Volume+0x94>)
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	4a06      	ldr	r2, [pc, #24]	; (800ec78 <Get_Volume+0x94>)
 800ec60:	6093      	str	r3, [r2, #8]
	}

}
 800ec62:	bf00      	nop
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bdb0      	pop	{r4, r5, r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	20013fb0 	.word	0x20013fb0
 800ec70:	404e0000 	.word	0x404e0000
 800ec74:	20000014 	.word	0x20000014
 800ec78:	200140c8 	.word	0x200140c8

0800ec7c <Flow_Sensor_Value>:


void  Flow_Sensor_Value()
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	af00      	add	r7, sp, #0
	Get_AW_Flow();
 800ec80:	f000 f896 	bl	800edb0 <Get_AW_Flow>
	_Flow();
 800ec84:	f000 f908 	bl	800ee98 <_Flow>
}
 800ec88:	bf00      	nop
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <AW_flow_raw_Volt>:


float AW_flow_raw_Volt(uint16_t r)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	4603      	mov	r3, r0
 800ec94:	80fb      	strh	r3, [r7, #6]
	float volt=0;
 800ec96:	f04f 0300 	mov.w	r3, #0
 800ec9a:	60fb      	str	r3, [r7, #12]
	volt=(r*6144.00)/32768;
 800ec9c:	88fb      	ldrh	r3, [r7, #6]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7f1 fbe8 	bl	8000474 <__aeabi_i2d>
 800eca4:	f04f 0200 	mov.w	r2, #0
 800eca8:	4b0d      	ldr	r3, [pc, #52]	; (800ece0 <AW_flow_raw_Volt+0x54>)
 800ecaa:	f7f1 fc4d 	bl	8000548 <__aeabi_dmul>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	4610      	mov	r0, r2
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	f04f 0200 	mov.w	r2, #0
 800ecba:	4b0a      	ldr	r3, [pc, #40]	; (800ece4 <AW_flow_raw_Volt+0x58>)
 800ecbc:	f7f1 fd6e 	bl	800079c <__aeabi_ddiv>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	4610      	mov	r0, r2
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	f7f1 ff20 	bl	8000b0c <__aeabi_d2f>
 800eccc:	4603      	mov	r3, r0
 800ecce:	60fb      	str	r3, [r7, #12]
	return volt;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	ee07 3a90 	vmov	s15, r3
}
 800ecd6:	eeb0 0a67 	vmov.f32	s0, s15
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	40b80000 	.word	0x40b80000
 800ece4:	40e00000 	.word	0x40e00000

0800ece8 <AW_flow_moving_average>:

uint16_t AW_flow_moving_average(uint16_t value)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	4603      	mov	r3, r0
 800ecf0:	80fb      	strh	r3, [r7, #6]
	    Flow_sensor.AW_flow_raw1_new = ((value-Flow_sensor.AW_flow_raw_old)/Flow_sensor_7002_Filter)+Flow_sensor.AW_flow_raw_old;
 800ecf2:	88fb      	ldrh	r3, [r7, #6]
 800ecf4:	4a0c      	ldr	r2, [pc, #48]	; (800ed28 <AW_flow_moving_average+0x40>)
 800ecf6:	8952      	ldrh	r2, [r2, #10]
 800ecf8:	1a9b      	subs	r3, r3, r2
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	da00      	bge.n	800ed00 <AW_flow_moving_average+0x18>
 800ecfe:	3303      	adds	r3, #3
 800ed00:	109b      	asrs	r3, r3, #2
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	4b08      	ldr	r3, [pc, #32]	; (800ed28 <AW_flow_moving_average+0x40>)
 800ed06:	895b      	ldrh	r3, [r3, #10]
 800ed08:	4413      	add	r3, r2
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	4b06      	ldr	r3, [pc, #24]	; (800ed28 <AW_flow_moving_average+0x40>)
 800ed0e:	811a      	strh	r2, [r3, #8]
	    Flow_sensor.AW_flow_raw_old = Flow_sensor.AW_flow_raw1_new;
 800ed10:	4b05      	ldr	r3, [pc, #20]	; (800ed28 <AW_flow_moving_average+0x40>)
 800ed12:	891a      	ldrh	r2, [r3, #8]
 800ed14:	4b04      	ldr	r3, [pc, #16]	; (800ed28 <AW_flow_moving_average+0x40>)
 800ed16:	815a      	strh	r2, [r3, #10]
		return Flow_sensor.AW_flow_raw1_new;
 800ed18:	4b03      	ldr	r3, [pc, #12]	; (800ed28 <AW_flow_moving_average+0x40>)
 800ed1a:	891b      	ldrh	r3, [r3, #8]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr
 800ed28:	200139b8 	.word	0x200139b8

0800ed2c <ADS1115_AW_flow_sensor>:

uint16_t ADS1115_AW_flow_sensor()
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af02      	add	r7, sp, #8
		uint16_t  ADCraw=0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	80fb      	strh	r3, [r7, #6]
		unsigned char ADSwrite[ADS1115_MODULE_WRITE_COMMAND_SIZE];

		ADSwrite[0] = 0x01;
 800ed36:	2301      	movs	r3, #1
 800ed38:	703b      	strb	r3, [r7, #0]
		ADSwrite[1] = 0x40;
 800ed3a:	2340      	movs	r3, #64	; 0x40
 800ed3c:	707b      	strb	r3, [r7, #1]
		ADSwrite[2] = 0xE3;
 800ed3e:	23e3      	movs	r3, #227	; 0xe3
 800ed40:	70bb      	strb	r3, [r7, #2]

      	if(HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS,(ADSwrite), ADS1115_MODULE_WRITE_COMMAND_SIZE, ADS1115_MODULE_WAIT_TIME_1_MS)!=HAL_OK)
 800ed42:	463a      	mov	r2, r7
 800ed44:	2301      	movs	r3, #1
 800ed46:	9300      	str	r3, [sp, #0]
 800ed48:	2303      	movs	r3, #3
 800ed4a:	2190      	movs	r1, #144	; 0x90
 800ed4c:	4814      	ldr	r0, [pc, #80]	; (800eda0 <ADS1115_AW_flow_sensor+0x74>)
 800ed4e:	f006 fcdf 	bl	8015710 <HAL_I2C_Master_Transmit>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d002      	beq.n	800ed5e <ADS1115_AW_flow_sensor+0x32>
      	{
      		ADS1115_Status=ADS1115_MODULE_FAULT;
 800ed58:	4b12      	ldr	r3, [pc, #72]	; (800eda4 <ADS1115_AW_flow_sensor+0x78>)
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	701a      	strb	r2, [r3, #0]
      	}
      	ADSwrite[0] = 0x00;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	703b      	strb	r3, [r7, #0]
		HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS, (ADSwrite), ADS1115_MODULE_WRITE_COMMAND_SIZE_1_BYTE, ADS1115_MODULE_WAIT_TIME_1_MS);
 800ed62:	463a      	mov	r2, r7
 800ed64:	2301      	movs	r3, #1
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	2301      	movs	r3, #1
 800ed6a:	2190      	movs	r1, #144	; 0x90
 800ed6c:	480c      	ldr	r0, [pc, #48]	; (800eda0 <ADS1115_AW_flow_sensor+0x74>)
 800ed6e:	f006 fccf 	bl	8015710 <HAL_I2C_Master_Transmit>



		HAL_I2C_Master_Receive(&hi2c2, (ADS1115_ADDRESS),(Flow_sensor.ADSread),ADS1115_MODULE_READ_COMMAND_SIZE,ADS1115_MODULE_WAIT_TIME_1_MS);
 800ed72:	2301      	movs	r3, #1
 800ed74:	9300      	str	r3, [sp, #0]
 800ed76:	2302      	movs	r3, #2
 800ed78:	4a0b      	ldr	r2, [pc, #44]	; (800eda8 <ADS1115_AW_flow_sensor+0x7c>)
 800ed7a:	2190      	movs	r1, #144	; 0x90
 800ed7c:	4808      	ldr	r0, [pc, #32]	; (800eda0 <ADS1115_AW_flow_sensor+0x74>)
 800ed7e:	f006 fdc5 	bl	801590c <HAL_I2C_Master_Receive>
		ADCraw = ((Flow_sensor.ADSread[0]) << 8 | (Flow_sensor.ADSread[1]));
 800ed82:	4b0a      	ldr	r3, [pc, #40]	; (800edac <ADS1115_AW_flow_sensor+0x80>)
 800ed84:	789b      	ldrb	r3, [r3, #2]
 800ed86:	021b      	lsls	r3, r3, #8
 800ed88:	b21a      	sxth	r2, r3
 800ed8a:	4b08      	ldr	r3, [pc, #32]	; (800edac <ADS1115_AW_flow_sensor+0x80>)
 800ed8c:	78db      	ldrb	r3, [r3, #3]
 800ed8e:	b21b      	sxth	r3, r3
 800ed90:	4313      	orrs	r3, r2
 800ed92:	b21b      	sxth	r3, r3
 800ed94:	80fb      	strh	r3, [r7, #6]

		return   ADCraw;
 800ed96:	88fb      	ldrh	r3, [r7, #6]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	200148b4 	.word	0x200148b4
 800eda4:	20013c8a 	.word	0x20013c8a
 800eda8:	200139ba 	.word	0x200139ba
 800edac:	200139b8 	.word	0x200139b8

0800edb0 <Get_AW_Flow>:

void Get_AW_Flow(void)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	af00      	add	r7, sp, #0
	AW_flow_raw = ADS1115_AW_flow_sensor();
 800edb4:	f7ff ffba 	bl	800ed2c <ADS1115_AW_flow_sensor>
 800edb8:	4603      	mov	r3, r0
 800edba:	461a      	mov	r2, r3
 800edbc:	4b0f      	ldr	r3, [pc, #60]	; (800edfc <Get_AW_Flow+0x4c>)
 800edbe:	801a      	strh	r2, [r3, #0]
	AW_flow_raw_filtered = AW_flow_moving_average(AW_flow_raw);
 800edc0:	4b0e      	ldr	r3, [pc, #56]	; (800edfc <Get_AW_Flow+0x4c>)
 800edc2:	881b      	ldrh	r3, [r3, #0]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7ff ff8f 	bl	800ece8 <AW_flow_moving_average>
 800edca:	4603      	mov	r3, r0
 800edcc:	461a      	mov	r2, r3
 800edce:	4b0c      	ldr	r3, [pc, #48]	; (800ee00 <Get_AW_Flow+0x50>)
 800edd0:	801a      	strh	r2, [r3, #0]
	Trigger_Flow(AW_flow_raw);
 800edd2:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <Get_AW_Flow+0x4c>)
 800edd4:	881b      	ldrh	r3, [r3, #0]
 800edd6:	4618      	mov	r0, r3
 800edd8:	f000 fa72 	bl	800f2c0 <Trigger_Flow>
	Flow_sensor.AW_flow_milli_volt = AW_flow_raw_Volt(AW_flow_raw_filtered);
 800eddc:	4b08      	ldr	r3, [pc, #32]	; (800ee00 <Get_AW_Flow+0x50>)
 800edde:	881b      	ldrh	r3, [r3, #0]
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7ff ff53 	bl	800ec8c <AW_flow_raw_Volt>
 800ede6:	eef0 7a40 	vmov.f32	s15, s0
 800edea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edee:	ee17 3a90 	vmov	r3, s15
 800edf2:	b29a      	uxth	r2, r3
 800edf4:	4b03      	ldr	r3, [pc, #12]	; (800ee04 <Get_AW_Flow+0x54>)
 800edf6:	80da      	strh	r2, [r3, #6]
}
 800edf8:	bf00      	nop
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	20014854 	.word	0x20014854
 800ee00:	20014856 	.word	0x20014856
 800ee04:	200139b8 	.word	0x200139b8

0800ee08 <Flow_Sensor_7002_offset>:

void Flow_Sensor_7002_offset(void)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0

	for(int i=0;i<=1000;i++)
 800ee0e:	2300      	movs	r3, #0
 800ee10:	607b      	str	r3, [r7, #4]
 800ee12:	e010      	b.n	800ee36 <Flow_Sensor_7002_offset+0x2e>
	{
			Get_AW_Flow();
 800ee14:	f7ff ffcc 	bl	800edb0 <Get_AW_Flow>
			Get_AW_Flow_ADS1115_OFFSET(AW_flow_raw);
 800ee18:	4b0e      	ldr	r3, [pc, #56]	; (800ee54 <Flow_Sensor_7002_offset+0x4c>)
 800ee1a:	881b      	ldrh	r3, [r3, #0]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f000 fad5 	bl	800f3cc <Get_AW_Flow_ADS1115_OFFSET>
			Flow_sensor.AW_Flow_Offset=Flow_sensor.AW_flow_milli_volt;
 800ee22:	4b0d      	ldr	r3, [pc, #52]	; (800ee58 <Flow_Sensor_7002_offset+0x50>)
 800ee24:	88da      	ldrh	r2, [r3, #6]
 800ee26:	4b0c      	ldr	r3, [pc, #48]	; (800ee58 <Flow_Sensor_7002_offset+0x50>)
 800ee28:	801a      	strh	r2, [r3, #0]
			vTaskDelay(Two_Millisecond_Delay);
 800ee2a:	2002      	movs	r0, #2
 800ee2c:	f010 f9fe 	bl	801f22c <vTaskDelay>
	for(int i=0;i<=1000;i++)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	3301      	adds	r3, #1
 800ee34:	607b      	str	r3, [r7, #4]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ee3c:	ddea      	ble.n	800ee14 <Flow_Sensor_7002_offset+0xc>
	}
	xSemaphoreGive(binarysem);
 800ee3e:	4b07      	ldr	r3, [pc, #28]	; (800ee5c <Flow_Sensor_7002_offset+0x54>)
 800ee40:	6818      	ldr	r0, [r3, #0]
 800ee42:	2300      	movs	r3, #0
 800ee44:	2200      	movs	r2, #0
 800ee46:	2100      	movs	r1, #0
 800ee48:	f00f fac0 	bl	801e3cc <xQueueGenericSend>
}
 800ee4c:	bf00      	nop
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	20014854 	.word	0x20014854
 800ee58:	200139b8 	.word	0x200139b8
 800ee5c:	20013b40 	.word	0x20013b40

0800ee60 <adj>:




long adj(long x, long in_min, long in_max, long out_min, long out_max)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b085      	sub	sp, #20
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]
 800ee6c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	69b9      	ldr	r1, [r7, #24]
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	1a8a      	subs	r2, r1, r2
 800ee7a:	fb02 f203 	mul.w	r2, r2, r3
 800ee7e:	6879      	ldr	r1, [r7, #4]
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	1acb      	subs	r3, r1, r3
 800ee84:	fb92 f2f3 	sdiv	r2, r2, r3
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	4413      	add	r3, r2
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3714      	adds	r7, #20
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <_Flow>:




void _Flow()
{
 800ee98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee9c:	b082      	sub	sp, #8
 800ee9e:	af02      	add	r7, sp, #8


	    Flow_Sensor_cal.delp_flow1 =(Flow_sensor.AW_flow_milli_volt-Flow_sensor.AW_Flow_Offset)/1000.00;
 800eea0:	4b59      	ldr	r3, [pc, #356]	; (800f008 <_Flow+0x170>)
 800eea2:	88db      	ldrh	r3, [r3, #6]
 800eea4:	461a      	mov	r2, r3
 800eea6:	4b58      	ldr	r3, [pc, #352]	; (800f008 <_Flow+0x170>)
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	1ad3      	subs	r3, r2, r3
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7f1 fae1 	bl	8000474 <__aeabi_i2d>
 800eeb2:	f04f 0200 	mov.w	r2, #0
 800eeb6:	4b55      	ldr	r3, [pc, #340]	; (800f00c <_Flow+0x174>)
 800eeb8:	f7f1 fc70 	bl	800079c <__aeabi_ddiv>
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	4610      	mov	r0, r2
 800eec2:	4619      	mov	r1, r3
 800eec4:	f7f1 fe22 	bl	8000b0c <__aeabi_d2f>
 800eec8:	4603      	mov	r3, r0
 800eeca:	4a51      	ldr	r2, [pc, #324]	; (800f010 <_Flow+0x178>)
 800eecc:	6013      	str	r3, [r2, #0]
	    Flow_Sensor_cal.dp=Flow_Sensor_cal.delp_flow1*10;
 800eece:	4b50      	ldr	r3, [pc, #320]	; (800f010 <_Flow+0x178>)
 800eed0:	edd3 7a00 	vldr	s15, [r3]
 800eed4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800eed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eedc:	4b4c      	ldr	r3, [pc, #304]	; (800f010 <_Flow+0x178>)
 800eede:	edc3 7a01 	vstr	s15, [r3, #4]


		if(Flow_Sensor_cal.dp>0)
 800eee2:	4b4b      	ldr	r3, [pc, #300]	; (800f010 <_Flow+0x178>)
 800eee4:	edd3 7a01 	vldr	s15, [r3, #4]
 800eee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eeec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef0:	f340 8090 	ble.w	800f014 <_Flow+0x17c>
		{
			Flow_Sensor_cal.Flow1=0.1512*(Flow_Sensor_cal.dp)*(Flow_Sensor_cal.dp)*(Flow_Sensor_cal.dp)-3.3424*(Flow_Sensor_cal.dp)*(Flow_Sensor_cal.dp)+41.657*(Flow_Sensor_cal.dp);
 800eef4:	4b46      	ldr	r3, [pc, #280]	; (800f010 <_Flow+0x178>)
 800eef6:	685b      	ldr	r3, [r3, #4]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7f1 facd 	bl	8000498 <__aeabi_f2d>
 800eefe:	a33c      	add	r3, pc, #240	; (adr r3, 800eff0 <_Flow+0x158>)
 800ef00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef04:	f7f1 fb20 	bl	8000548 <__aeabi_dmul>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	4614      	mov	r4, r2
 800ef0e:	461d      	mov	r5, r3
 800ef10:	4b3f      	ldr	r3, [pc, #252]	; (800f010 <_Flow+0x178>)
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7f1 fabf 	bl	8000498 <__aeabi_f2d>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	4620      	mov	r0, r4
 800ef20:	4629      	mov	r1, r5
 800ef22:	f7f1 fb11 	bl	8000548 <__aeabi_dmul>
 800ef26:	4602      	mov	r2, r0
 800ef28:	460b      	mov	r3, r1
 800ef2a:	4614      	mov	r4, r2
 800ef2c:	461d      	mov	r5, r3
 800ef2e:	4b38      	ldr	r3, [pc, #224]	; (800f010 <_Flow+0x178>)
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7f1 fab0 	bl	8000498 <__aeabi_f2d>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	4629      	mov	r1, r5
 800ef40:	f7f1 fb02 	bl	8000548 <__aeabi_dmul>
 800ef44:	4602      	mov	r2, r0
 800ef46:	460b      	mov	r3, r1
 800ef48:	4614      	mov	r4, r2
 800ef4a:	461d      	mov	r5, r3
 800ef4c:	4b30      	ldr	r3, [pc, #192]	; (800f010 <_Flow+0x178>)
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7f1 faa1 	bl	8000498 <__aeabi_f2d>
 800ef56:	a328      	add	r3, pc, #160	; (adr r3, 800eff8 <_Flow+0x160>)
 800ef58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5c:	f7f1 faf4 	bl	8000548 <__aeabi_dmul>
 800ef60:	4602      	mov	r2, r0
 800ef62:	460b      	mov	r3, r1
 800ef64:	4690      	mov	r8, r2
 800ef66:	4699      	mov	r9, r3
 800ef68:	4b29      	ldr	r3, [pc, #164]	; (800f010 <_Flow+0x178>)
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7f1 fa93 	bl	8000498 <__aeabi_f2d>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	4640      	mov	r0, r8
 800ef78:	4649      	mov	r1, r9
 800ef7a:	f7f1 fae5 	bl	8000548 <__aeabi_dmul>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4620      	mov	r0, r4
 800ef84:	4629      	mov	r1, r5
 800ef86:	f7f1 f927 	bl	80001d8 <__aeabi_dsub>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	4614      	mov	r4, r2
 800ef90:	461d      	mov	r5, r3
 800ef92:	4b1f      	ldr	r3, [pc, #124]	; (800f010 <_Flow+0x178>)
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7f1 fa7e 	bl	8000498 <__aeabi_f2d>
 800ef9c:	a318      	add	r3, pc, #96	; (adr r3, 800f000 <_Flow+0x168>)
 800ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa2:	f7f1 fad1 	bl	8000548 <__aeabi_dmul>
 800efa6:	4602      	mov	r2, r0
 800efa8:	460b      	mov	r3, r1
 800efaa:	4620      	mov	r0, r4
 800efac:	4629      	mov	r1, r5
 800efae:	f7f1 f915 	bl	80001dc <__adddf3>
 800efb2:	4602      	mov	r2, r0
 800efb4:	460b      	mov	r3, r1
 800efb6:	4916      	ldr	r1, [pc, #88]	; (800f010 <_Flow+0x178>)
 800efb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
			Flow_Sensor_cal.Flow1=adj(Flow_Sensor_cal.Flow1,0,160,0,185);
 800efbc:	4b14      	ldr	r3, [pc, #80]	; (800f010 <_Flow+0x178>)
 800efbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800efc2:	4610      	mov	r0, r2
 800efc4:	4619      	mov	r1, r3
 800efc6:	f7f1 fd59 	bl	8000a7c <__aeabi_d2iz>
 800efca:	23b9      	movs	r3, #185	; 0xb9
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	2300      	movs	r3, #0
 800efd0:	22a0      	movs	r2, #160	; 0xa0
 800efd2:	2100      	movs	r1, #0
 800efd4:	f7ff ff44 	bl	800ee60 <adj>
 800efd8:	4603      	mov	r3, r0
 800efda:	4618      	mov	r0, r3
 800efdc:	f7f1 fa4a 	bl	8000474 <__aeabi_i2d>
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	490a      	ldr	r1, [pc, #40]	; (800f010 <_Flow+0x178>)
 800efe6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800efea:	e0a8      	b.n	800f13e <_Flow+0x2a6>
 800efec:	f3af 8000 	nop.w
 800eff0:	8793dd98 	.word	0x8793dd98
 800eff4:	3fc35a85 	.word	0x3fc35a85
 800eff8:	36113405 	.word	0x36113405
 800effc:	400abd3c 	.word	0x400abd3c
 800f000:	9374bc6a 	.word	0x9374bc6a
 800f004:	4044d418 	.word	0x4044d418
 800f008:	200139b8 	.word	0x200139b8
 800f00c:	408f4000 	.word	0x408f4000
 800f010:	20013fb0 	.word	0x20013fb0
		}
		else if(Flow_Sensor_cal.dp<0)
 800f014:	4b92      	ldr	r3, [pc, #584]	; (800f260 <_Flow+0x3c8>)
 800f016:	edd3 7a01 	vldr	s15, [r3, #4]
 800f01a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f022:	f140 808c 	bpl.w	800f13e <_Flow+0x2a6>
		{
			Flow_Sensor_cal.dp*=-1;
 800f026:	4b8e      	ldr	r3, [pc, #568]	; (800f260 <_Flow+0x3c8>)
 800f028:	edd3 7a01 	vldr	s15, [r3, #4]
 800f02c:	eef1 7a67 	vneg.f32	s15, s15
 800f030:	4b8b      	ldr	r3, [pc, #556]	; (800f260 <_Flow+0x3c8>)
 800f032:	edc3 7a01 	vstr	s15, [r3, #4]
			Flow_Sensor_cal.Flow1=0.1512*Flow_Sensor_cal.dp*Flow_Sensor_cal.dp*Flow_Sensor_cal.dp-3.3424*Flow_Sensor_cal.dp*Flow_Sensor_cal.dp+41.657*Flow_Sensor_cal.dp;
 800f036:	4b8a      	ldr	r3, [pc, #552]	; (800f260 <_Flow+0x3c8>)
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7f1 fa2c 	bl	8000498 <__aeabi_f2d>
 800f040:	a381      	add	r3, pc, #516	; (adr r3, 800f248 <_Flow+0x3b0>)
 800f042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f046:	f7f1 fa7f 	bl	8000548 <__aeabi_dmul>
 800f04a:	4602      	mov	r2, r0
 800f04c:	460b      	mov	r3, r1
 800f04e:	4690      	mov	r8, r2
 800f050:	4699      	mov	r9, r3
 800f052:	4b83      	ldr	r3, [pc, #524]	; (800f260 <_Flow+0x3c8>)
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	4618      	mov	r0, r3
 800f058:	f7f1 fa1e 	bl	8000498 <__aeabi_f2d>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	4640      	mov	r0, r8
 800f062:	4649      	mov	r1, r9
 800f064:	f7f1 fa70 	bl	8000548 <__aeabi_dmul>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4690      	mov	r8, r2
 800f06e:	4699      	mov	r9, r3
 800f070:	4b7b      	ldr	r3, [pc, #492]	; (800f260 <_Flow+0x3c8>)
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	4618      	mov	r0, r3
 800f076:	f7f1 fa0f 	bl	8000498 <__aeabi_f2d>
 800f07a:	4602      	mov	r2, r0
 800f07c:	460b      	mov	r3, r1
 800f07e:	4640      	mov	r0, r8
 800f080:	4649      	mov	r1, r9
 800f082:	f7f1 fa61 	bl	8000548 <__aeabi_dmul>
 800f086:	4602      	mov	r2, r0
 800f088:	460b      	mov	r3, r1
 800f08a:	4690      	mov	r8, r2
 800f08c:	4699      	mov	r9, r3
 800f08e:	4b74      	ldr	r3, [pc, #464]	; (800f260 <_Flow+0x3c8>)
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	4618      	mov	r0, r3
 800f094:	f7f1 fa00 	bl	8000498 <__aeabi_f2d>
 800f098:	a36d      	add	r3, pc, #436	; (adr r3, 800f250 <_Flow+0x3b8>)
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	f7f1 fa53 	bl	8000548 <__aeabi_dmul>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	4692      	mov	sl, r2
 800f0a8:	469b      	mov	fp, r3
 800f0aa:	4b6d      	ldr	r3, [pc, #436]	; (800f260 <_Flow+0x3c8>)
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7f1 f9f2 	bl	8000498 <__aeabi_f2d>
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	4650      	mov	r0, sl
 800f0ba:	4659      	mov	r1, fp
 800f0bc:	f7f1 fa44 	bl	8000548 <__aeabi_dmul>
 800f0c0:	4602      	mov	r2, r0
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	4640      	mov	r0, r8
 800f0c6:	4649      	mov	r1, r9
 800f0c8:	f7f1 f886 	bl	80001d8 <__aeabi_dsub>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4690      	mov	r8, r2
 800f0d2:	4699      	mov	r9, r3
 800f0d4:	4b62      	ldr	r3, [pc, #392]	; (800f260 <_Flow+0x3c8>)
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7f1 f9dd 	bl	8000498 <__aeabi_f2d>
 800f0de:	a35e      	add	r3, pc, #376	; (adr r3, 800f258 <_Flow+0x3c0>)
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	f7f1 fa30 	bl	8000548 <__aeabi_dmul>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	4649      	mov	r1, r9
 800f0f0:	f7f1 f874 	bl	80001dc <__adddf3>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	4959      	ldr	r1, [pc, #356]	; (800f260 <_Flow+0x3c8>)
 800f0fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
			Flow_Sensor_cal.Flow1=adj(Flow_Sensor_cal.Flow1,0,160,0,185);
 800f0fe:	4b58      	ldr	r3, [pc, #352]	; (800f260 <_Flow+0x3c8>)
 800f100:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f104:	4610      	mov	r0, r2
 800f106:	4619      	mov	r1, r3
 800f108:	f7f1 fcb8 	bl	8000a7c <__aeabi_d2iz>
 800f10c:	23b9      	movs	r3, #185	; 0xb9
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	2300      	movs	r3, #0
 800f112:	22a0      	movs	r2, #160	; 0xa0
 800f114:	2100      	movs	r1, #0
 800f116:	f7ff fea3 	bl	800ee60 <adj>
 800f11a:	4603      	mov	r3, r0
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7f1 f9a9 	bl	8000474 <__aeabi_i2d>
 800f122:	4602      	mov	r2, r0
 800f124:	460b      	mov	r3, r1
 800f126:	494e      	ldr	r1, [pc, #312]	; (800f260 <_Flow+0x3c8>)
 800f128:	e9c1 2304 	strd	r2, r3, [r1, #16]
			Flow_Sensor_cal.Flow1*=-1;
 800f12c:	4b4c      	ldr	r3, [pc, #304]	; (800f260 <_Flow+0x3c8>)
 800f12e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f132:	4614      	mov	r4, r2
 800f134:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800f138:	4b49      	ldr	r3, [pc, #292]	; (800f260 <_Flow+0x3c8>)
 800f13a:	e9c3 4504 	strd	r4, r5, [r3, #16]

		}


		      Flow_Sensor_cal.total = Flow_Sensor_cal.total - Flow_Sensor_cal.readings[Flow_Sensor_cal.readIndex];
 800f13e:	4b48      	ldr	r3, [pc, #288]	; (800f260 <_Flow+0x3c8>)
 800f140:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f142:	4b47      	ldr	r3, [pc, #284]	; (800f260 <_Flow+0x3c8>)
 800f144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f146:	4946      	ldr	r1, [pc, #280]	; (800f260 <_Flow+0x3c8>)
 800f148:	3306      	adds	r3, #6
 800f14a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	4a43      	ldr	r2, [pc, #268]	; (800f260 <_Flow+0x3c8>)
 800f152:	6593      	str	r3, [r2, #88]	; 0x58
		      Flow_Sensor_cal.readings[Flow_Sensor_cal.readIndex] = Flow_Sensor_cal.Flow1;
 800f154:	4b42      	ldr	r3, [pc, #264]	; (800f260 <_Flow+0x3c8>)
 800f156:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f15a:	4941      	ldr	r1, [pc, #260]	; (800f260 <_Flow+0x3c8>)
 800f15c:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 800f15e:	4610      	mov	r0, r2
 800f160:	4619      	mov	r1, r3
 800f162:	f7f1 fc8b 	bl	8000a7c <__aeabi_d2iz>
 800f166:	4602      	mov	r2, r0
 800f168:	493d      	ldr	r1, [pc, #244]	; (800f260 <_Flow+0x3c8>)
 800f16a:	1da3      	adds	r3, r4, #6
 800f16c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		      Flow_Sensor_cal.total = Flow_Sensor_cal.total + Flow_Sensor_cal.readings[Flow_Sensor_cal.readIndex];
 800f170:	4b3b      	ldr	r3, [pc, #236]	; (800f260 <_Flow+0x3c8>)
 800f172:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f174:	4b3a      	ldr	r3, [pc, #232]	; (800f260 <_Flow+0x3c8>)
 800f176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f178:	4939      	ldr	r1, [pc, #228]	; (800f260 <_Flow+0x3c8>)
 800f17a:	3306      	adds	r3, #6
 800f17c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f180:	4413      	add	r3, r2
 800f182:	4a37      	ldr	r2, [pc, #220]	; (800f260 <_Flow+0x3c8>)
 800f184:	6593      	str	r3, [r2, #88]	; 0x58
		      Flow_Sensor_cal.readIndex = Flow_Sensor_cal.readIndex + 1;
 800f186:	4b36      	ldr	r3, [pc, #216]	; (800f260 <_Flow+0x3c8>)
 800f188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f18a:	3301      	adds	r3, #1
 800f18c:	4a34      	ldr	r2, [pc, #208]	; (800f260 <_Flow+0x3c8>)
 800f18e:	6553      	str	r3, [r2, #84]	; 0x54
			  if (Flow_Sensor_cal.readIndex >= numReadings)
 800f190:	4b33      	ldr	r3, [pc, #204]	; (800f260 <_Flow+0x3c8>)
 800f192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f194:	4a33      	ldr	r2, [pc, #204]	; (800f264 <_Flow+0x3cc>)
 800f196:	7812      	ldrb	r2, [r2, #0]
 800f198:	4293      	cmp	r3, r2
 800f19a:	db02      	blt.n	800f1a2 <_Flow+0x30a>
			  {
				  Flow_Sensor_cal.readIndex = 0;
 800f19c:	4b30      	ldr	r3, [pc, #192]	; (800f260 <_Flow+0x3c8>)
 800f19e:	2200      	movs	r2, #0
 800f1a0:	655a      	str	r2, [r3, #84]	; 0x54
			  }
			  Flow_Sensor_cal.average = Flow_Sensor_cal.total / numReadings;
 800f1a2:	4b2f      	ldr	r3, [pc, #188]	; (800f260 <_Flow+0x3c8>)
 800f1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1a6:	4a2f      	ldr	r2, [pc, #188]	; (800f264 <_Flow+0x3cc>)
 800f1a8:	7812      	ldrb	r2, [r2, #0]
 800f1aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1ae:	4a2c      	ldr	r2, [pc, #176]	; (800f260 <_Flow+0x3c8>)
 800f1b0:	65d3      	str	r3, [r2, #92]	; 0x5c
			  Flow_Sensor_cal.Flow1= Flow_Sensor_cal.average;
 800f1b2:	4b2b      	ldr	r3, [pc, #172]	; (800f260 <_Flow+0x3c8>)
 800f1b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7f1 f95c 	bl	8000474 <__aeabi_i2d>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4927      	ldr	r1, [pc, #156]	; (800f260 <_Flow+0x3c8>)
 800f1c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if((Flow_Sensor_cal.Flow1<3)&&(Flow_Sensor_cal.Flow1> (-3)) )
 800f1c6:	4b26      	ldr	r3, [pc, #152]	; (800f260 <_Flow+0x3c8>)
 800f1c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f1cc:	f04f 0200 	mov.w	r2, #0
 800f1d0:	4b25      	ldr	r3, [pc, #148]	; (800f268 <_Flow+0x3d0>)
 800f1d2:	f7f1 fc2b 	bl	8000a2c <__aeabi_dcmplt>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d011      	beq.n	800f200 <_Flow+0x368>
 800f1dc:	4b20      	ldr	r3, [pc, #128]	; (800f260 <_Flow+0x3c8>)
 800f1de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f1e2:	f04f 0200 	mov.w	r2, #0
 800f1e6:	4b21      	ldr	r3, [pc, #132]	; (800f26c <_Flow+0x3d4>)
 800f1e8:	f7f1 fc3e 	bl	8000a68 <__aeabi_dcmpgt>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d006      	beq.n	800f200 <_Flow+0x368>
	    {
			Flow_Sensor_cal.Flow1=0;
 800f1f2:	491b      	ldr	r1, [pc, #108]	; (800f260 <_Flow+0x3c8>)
 800f1f4:	f04f 0200 	mov.w	r2, #0
 800f1f8:	f04f 0300 	mov.w	r3, #0
 800f1fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}




		Flow_Sensor_cal._Flow_Val=(int)Flow_Sensor_cal.Flow1;
 800f200:	4b17      	ldr	r3, [pc, #92]	; (800f260 <_Flow+0x3c8>)
 800f202:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f206:	4610      	mov	r0, r2
 800f208:	4619      	mov	r1, r3
 800f20a:	f7f1 fc37 	bl	8000a7c <__aeabi_d2iz>
 800f20e:	4603      	mov	r3, r0
 800f210:	4a13      	ldr	r2, [pc, #76]	; (800f260 <_Flow+0x3c8>)
 800f212:	6613      	str	r3, [r2, #96]	; 0x60

			if(Flow_Sensor_cal._Flow_Val> Max_Flow)
 800f214:	4b12      	ldr	r3, [pc, #72]	; (800f260 <_Flow+0x3c8>)
 800f216:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f218:	4b15      	ldr	r3, [pc, #84]	; (800f270 <_Flow+0x3d8>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	dd03      	ble.n	800f228 <_Flow+0x390>
			{
				Max_Flow= Flow_Sensor_cal._Flow_Val;
 800f220:	4b0f      	ldr	r3, [pc, #60]	; (800f260 <_Flow+0x3c8>)
 800f222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f224:	4a12      	ldr	r2, [pc, #72]	; (800f270 <_Flow+0x3d8>)
 800f226:	6013      	str	r3, [r2, #0]
			}
			if(Flow_Sensor_cal._Flow_Val< Min_Flow)
 800f228:	4b0d      	ldr	r3, [pc, #52]	; (800f260 <_Flow+0x3c8>)
 800f22a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f22c:	4b11      	ldr	r3, [pc, #68]	; (800f274 <_Flow+0x3dc>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	429a      	cmp	r2, r3
 800f232:	da03      	bge.n	800f23c <_Flow+0x3a4>
			{
				Min_Flow= Flow_Sensor_cal._Flow_Val;
 800f234:	4b0a      	ldr	r3, [pc, #40]	; (800f260 <_Flow+0x3c8>)
 800f236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f238:	4a0e      	ldr	r2, [pc, #56]	; (800f274 <_Flow+0x3dc>)
 800f23a:	6013      	str	r3, [r2, #0]
			}

}
 800f23c:	bf00      	nop
 800f23e:	46bd      	mov	sp, r7
 800f240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f244:	f3af 8000 	nop.w
 800f248:	8793dd98 	.word	0x8793dd98
 800f24c:	3fc35a85 	.word	0x3fc35a85
 800f250:	36113405 	.word	0x36113405
 800f254:	400abd3c 	.word	0x400abd3c
 800f258:	9374bc6a 	.word	0x9374bc6a
 800f25c:	4044d418 	.word	0x4044d418
 800f260:	20013fb0 	.word	0x20013fb0
 800f264:	20000018 	.word	0x20000018
 800f268:	40080000 	.word	0x40080000
 800f26c:	c0080000 	.word	0xc0080000
 800f270:	20014064 	.word	0x20014064
 800f274:	20014090 	.word	0x20014090

0800f278 <Trigger_AW_flow_moving_average>:



uint16_t Trigger_AW_flow_moving_average(uint16_t value)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	4603      	mov	r3, r0
 800f280:	80fb      	strh	r3, [r7, #6]
	Flow_sensor.AW_flow_raw1_new_trigger = ((value-Flow_sensor.AW_flow_raw_old_trigger)/Flow_sensor_7002_Filter_Trigger)+Flow_sensor.AW_flow_raw_old_trigger;
 800f282:	88fb      	ldrh	r3, [r7, #6]
 800f284:	4a0c      	ldr	r2, [pc, #48]	; (800f2b8 <Trigger_AW_flow_moving_average+0x40>)
 800f286:	8a12      	ldrh	r2, [r2, #16]
 800f288:	1a9b      	subs	r3, r3, r2
 800f28a:	4a0c      	ldr	r2, [pc, #48]	; (800f2bc <Trigger_AW_flow_moving_average+0x44>)
 800f28c:	7812      	ldrb	r2, [r2, #0]
 800f28e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f292:	b29a      	uxth	r2, r3
 800f294:	4b08      	ldr	r3, [pc, #32]	; (800f2b8 <Trigger_AW_flow_moving_average+0x40>)
 800f296:	8a1b      	ldrh	r3, [r3, #16]
 800f298:	4413      	add	r3, r2
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	4b06      	ldr	r3, [pc, #24]	; (800f2b8 <Trigger_AW_flow_moving_average+0x40>)
 800f29e:	81da      	strh	r2, [r3, #14]
	Flow_sensor.AW_flow_raw_old_trigger  = Flow_sensor.AW_flow_raw1_new_trigger;
 800f2a0:	4b05      	ldr	r3, [pc, #20]	; (800f2b8 <Trigger_AW_flow_moving_average+0x40>)
 800f2a2:	89da      	ldrh	r2, [r3, #14]
 800f2a4:	4b04      	ldr	r3, [pc, #16]	; (800f2b8 <Trigger_AW_flow_moving_average+0x40>)
 800f2a6:	821a      	strh	r2, [r3, #16]
	return Flow_sensor.AW_flow_raw1_new_trigger;
 800f2a8:	4b03      	ldr	r3, [pc, #12]	; (800f2b8 <Trigger_AW_flow_moving_average+0x40>)
 800f2aa:	89db      	ldrh	r3, [r3, #14]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr
 800f2b8:	200139b8 	.word	0x200139b8
 800f2bc:	20000010 	.word	0x20000010

0800f2c0 <Trigger_Flow>:


void Trigger_Flow(uint16_t value)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	80fb      	strh	r3, [r7, #6]


	Trigger_Raw_Flow                     = Trigger_AW_flow_moving_average(value);
 800f2ca:	88fb      	ldrh	r3, [r7, #6]
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7ff ffd3 	bl	800f278 <Trigger_AW_flow_moving_average>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	4b38      	ldr	r3, [pc, #224]	; (800f3b8 <Trigger_Flow+0xf8>)
 800f2d8:	801a      	strh	r2, [r3, #0]

	Raw_volt_Flow_Trigger_Temp           = (Trigger_Raw_Flow - ADS1115_7002_FLOW_SENSOR_OFFSET); //14450
 800f2da:	4b37      	ldr	r3, [pc, #220]	; (800f3b8 <Trigger_Flow+0xf8>)
 800f2dc:	881a      	ldrh	r2, [r3, #0]
 800f2de:	4b37      	ldr	r3, [pc, #220]	; (800f3bc <Trigger_Flow+0xfc>)
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	1ad3      	subs	r3, r2, r3
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	b21a      	sxth	r2, r3
 800f2e8:	4b35      	ldr	r3, [pc, #212]	; (800f3c0 <Trigger_Flow+0x100>)
 800f2ea:	801a      	strh	r2, [r3, #0]

	Raw_volt_Flow_Trigger                = (uint16_t)((float) Raw_volt_Flow_Trigger_Temp/10);
 800f2ec:	4b34      	ldr	r3, [pc, #208]	; (800f3c0 <Trigger_Flow+0x100>)
 800f2ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2f2:	ee07 3a90 	vmov	s15, r3
 800f2f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f2fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800f2fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f306:	ee17 3a90 	vmov	r3, s15
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	b21a      	sxth	r2, r3
 800f30e:	4b2d      	ldr	r3, [pc, #180]	; (800f3c4 <Trigger_Flow+0x104>)
 800f310:	801a      	strh	r2, [r3, #0]


	switch(Raw_volt_Flow_Trigger)
 800f312:	4b2c      	ldr	r3, [pc, #176]	; (800f3c4 <Trigger_Flow+0x104>)
 800f314:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f318:	3b01      	subs	r3, #1
 800f31a:	2b0a      	cmp	r3, #10
 800f31c:	d843      	bhi.n	800f3a6 <Trigger_Flow+0xe6>
 800f31e:	a201      	add	r2, pc, #4	; (adr r2, 800f324 <Trigger_Flow+0x64>)
 800f320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f324:	0800f351 	.word	0x0800f351
 800f328:	0800f357 	.word	0x0800f357
 800f32c:	0800f35f 	.word	0x0800f35f
 800f330:	0800f367 	.word	0x0800f367
 800f334:	0800f36f 	.word	0x0800f36f
 800f338:	0800f377 	.word	0x0800f377
 800f33c:	0800f37f 	.word	0x0800f37f
 800f340:	0800f387 	.word	0x0800f387
 800f344:	0800f38f 	.word	0x0800f38f
 800f348:	0800f397 	.word	0x0800f397
 800f34c:	0800f39f 	.word	0x0800f39f
	{
	    case 1:
		    FLOW_TRIGGER  =1;
 800f350:	4b1d      	ldr	r3, [pc, #116]	; (800f3c8 <Trigger_Flow+0x108>)
 800f352:	2201      	movs	r2, #1
 800f354:	701a      	strb	r2, [r3, #0]
	    case 2:
	    	FLOW_TRIGGER  =2;
 800f356:	4b1c      	ldr	r3, [pc, #112]	; (800f3c8 <Trigger_Flow+0x108>)
 800f358:	2202      	movs	r2, #2
 800f35a:	701a      	strb	r2, [r3, #0]
	    break;
 800f35c:	e027      	b.n	800f3ae <Trigger_Flow+0xee>
	    case 3:
	    	FLOW_TRIGGER  =3;
 800f35e:	4b1a      	ldr	r3, [pc, #104]	; (800f3c8 <Trigger_Flow+0x108>)
 800f360:	2203      	movs	r2, #3
 800f362:	701a      	strb	r2, [r3, #0]
		break;
 800f364:	e023      	b.n	800f3ae <Trigger_Flow+0xee>
		case 4:
			FLOW_TRIGGER  =4;
 800f366:	4b18      	ldr	r3, [pc, #96]	; (800f3c8 <Trigger_Flow+0x108>)
 800f368:	2204      	movs	r2, #4
 800f36a:	701a      	strb	r2, [r3, #0]
		break;
 800f36c:	e01f      	b.n	800f3ae <Trigger_Flow+0xee>
	    case 5:
	    	FLOW_TRIGGER  =5;
 800f36e:	4b16      	ldr	r3, [pc, #88]	; (800f3c8 <Trigger_Flow+0x108>)
 800f370:	2205      	movs	r2, #5
 800f372:	701a      	strb	r2, [r3, #0]
	    break;
 800f374:	e01b      	b.n	800f3ae <Trigger_Flow+0xee>
	    case 6:
	    	FLOW_TRIGGER  =6;
 800f376:	4b14      	ldr	r3, [pc, #80]	; (800f3c8 <Trigger_Flow+0x108>)
 800f378:	2206      	movs	r2, #6
 800f37a:	701a      	strb	r2, [r3, #0]
	    break;
 800f37c:	e017      	b.n	800f3ae <Trigger_Flow+0xee>
	    case 7:
	    	FLOW_TRIGGER  =7;
 800f37e:	4b12      	ldr	r3, [pc, #72]	; (800f3c8 <Trigger_Flow+0x108>)
 800f380:	2207      	movs	r2, #7
 800f382:	701a      	strb	r2, [r3, #0]
		break;
 800f384:	e013      	b.n	800f3ae <Trigger_Flow+0xee>
		case 8:
			FLOW_TRIGGER  =8;
 800f386:	4b10      	ldr	r3, [pc, #64]	; (800f3c8 <Trigger_Flow+0x108>)
 800f388:	2208      	movs	r2, #8
 800f38a:	701a      	strb	r2, [r3, #0]
		break;
 800f38c:	e00f      	b.n	800f3ae <Trigger_Flow+0xee>
	    case 9:
	    	FLOW_TRIGGER  =9;
 800f38e:	4b0e      	ldr	r3, [pc, #56]	; (800f3c8 <Trigger_Flow+0x108>)
 800f390:	2209      	movs	r2, #9
 800f392:	701a      	strb	r2, [r3, #0]
		break;
 800f394:	e00b      	b.n	800f3ae <Trigger_Flow+0xee>
		case 10:
			FLOW_TRIGGER  =10;
 800f396:	4b0c      	ldr	r3, [pc, #48]	; (800f3c8 <Trigger_Flow+0x108>)
 800f398:	220a      	movs	r2, #10
 800f39a:	701a      	strb	r2, [r3, #0]
		break;
 800f39c:	e007      	b.n	800f3ae <Trigger_Flow+0xee>
		case 11:
			FLOW_TRIGGER  =11;
 800f39e:	4b0a      	ldr	r3, [pc, #40]	; (800f3c8 <Trigger_Flow+0x108>)
 800f3a0:	220b      	movs	r2, #11
 800f3a2:	701a      	strb	r2, [r3, #0]
		break;
 800f3a4:	e003      	b.n	800f3ae <Trigger_Flow+0xee>
		default:
			FLOW_TRIGGER  =0;
 800f3a6:	4b08      	ldr	r3, [pc, #32]	; (800f3c8 <Trigger_Flow+0x108>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	701a      	strb	r2, [r3, #0]
		break;
 800f3ac:	bf00      	nop


	}

}
 800f3ae:	bf00      	nop
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	2001485a 	.word	0x2001485a
 800f3bc:	20014858 	.word	0x20014858
 800f3c0:	200140c4 	.word	0x200140c4
 800f3c4:	20013b80 	.word	0x20013b80
 800f3c8:	20014068 	.word	0x20014068

0800f3cc <Get_AW_Flow_ADS1115_OFFSET>:


void Get_AW_Flow_ADS1115_OFFSET(uint16_t AW_flow_raw)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	80fb      	strh	r3, [r7, #6]
	ADS1115_7002_FLOW_SENSOR_OFFSET = Trigger_AW_flow_moving_average(AW_flow_raw);
 800f3d6:	88fb      	ldrh	r3, [r7, #6]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7ff ff4d 	bl	800f278 <Trigger_AW_flow_moving_average>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	4b03      	ldr	r3, [pc, #12]	; (800f3f0 <Get_AW_Flow_ADS1115_OFFSET+0x24>)
 800f3e4:	801a      	strh	r2, [r3, #0]
}
 800f3e6:	bf00      	nop
 800f3e8:	3708      	adds	r7, #8
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	20014858 	.word	0x20014858

0800f3f4 <Pressure_Sensor_Moving_Average>:

uint16_t Runtime_Pressure_Val_filterd;
uint8_t Pressure_sensor_Filter=4;

uint16_t Pressure_Sensor_Moving_Average(uint16_t Sensor_Value)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	80fb      	strh	r3, [r7, #6]
	 Sensor_Value = ((Sensor_Value-Pressure_sensor.Last_Runtime_Pressure_Val)/Pressure_sensor_Filter)+Pressure_sensor.Last_Runtime_Pressure_Val;
 800f3fe:	88fb      	ldrh	r3, [r7, #6]
 800f400:	4a0a      	ldr	r2, [pc, #40]	; (800f42c <Pressure_Sensor_Moving_Average+0x38>)
 800f402:	8892      	ldrh	r2, [r2, #4]
 800f404:	1a9b      	subs	r3, r3, r2
 800f406:	4a0a      	ldr	r2, [pc, #40]	; (800f430 <Pressure_Sensor_Moving_Average+0x3c>)
 800f408:	7812      	ldrb	r2, [r2, #0]
 800f40a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f40e:	b29a      	uxth	r2, r3
 800f410:	4b06      	ldr	r3, [pc, #24]	; (800f42c <Pressure_Sensor_Moving_Average+0x38>)
 800f412:	889b      	ldrh	r3, [r3, #4]
 800f414:	4413      	add	r3, r2
 800f416:	80fb      	strh	r3, [r7, #6]
	 Pressure_sensor.Last_Runtime_Pressure_Val = Sensor_Value;
 800f418:	4a04      	ldr	r2, [pc, #16]	; (800f42c <Pressure_Sensor_Moving_Average+0x38>)
 800f41a:	88fb      	ldrh	r3, [r7, #6]
 800f41c:	8093      	strh	r3, [r2, #4]
     return Sensor_Value;
 800f41e:	88fb      	ldrh	r3, [r7, #6]
}
 800f420:	4618      	mov	r0, r3
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr
 800f42c:	2001405c 	.word	0x2001405c
 800f430:	20000019 	.word	0x20000019

0800f434 <Pressure_Sensor_Mv>:


uint16_t Pressure_Sensor_Mv(uint16_t P_value)
{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4603      	mov	r3, r0
 800f43c:	80fb      	strh	r3, [r7, #6]
 	  return (((P_value)*Sensor_Input_Voltage)/ADC_12_Bit_Value);
 800f43e:	88fb      	ldrh	r3, [r7, #6]
 800f440:	f241 3288 	movw	r2, #5000	; 0x1388
 800f444:	fb02 f303 	mul.w	r3, r2, r3
 800f448:	4a06      	ldr	r2, [pc, #24]	; (800f464 <Pressure_Sensor_Mv+0x30>)
 800f44a:	fb82 1203 	smull	r1, r2, r2, r3
 800f44e:	441a      	add	r2, r3
 800f450:	12d2      	asrs	r2, r2, #11
 800f452:	17db      	asrs	r3, r3, #31
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	b29b      	uxth	r3, r3
}
 800f458:	4618      	mov	r0, r3
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	80080081 	.word	0x80080081

0800f468 <Pressure_Sensor_offset>:

void Pressure_Sensor_offset(void)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
	uint16_t Pressure_Sensor_Offset_Raw_Val;
	//uint16_t Ads1115_Raw_Value;
	int Loop_End=1000;
 800f46e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f472:	60bb      	str	r3, [r7, #8]


  	for(int i=0;i<Loop_End;i++)
 800f474:	2300      	movs	r3, #0
 800f476:	60fb      	str	r3, [r7, #12]
 800f478:	e014      	b.n	800f4a4 <Pressure_Sensor_offset+0x3c>
  	{

#ifdef ADS1115_PRESSURE_SENSOR_DEBUG_0
  		Pressure_Sensor_Offset_Raw_Val=Pressure_Sensor_Mv(Pressure_Sensor_Pin_Voltage);
 800f47a:	4b0f      	ldr	r3, [pc, #60]	; (800f4b8 <Pressure_Sensor_offset+0x50>)
 800f47c:	889b      	ldrh	r3, [r3, #4]
 800f47e:	4618      	mov	r0, r3
 800f480:	f7ff ffd8 	bl	800f434 <Pressure_Sensor_Mv>
 800f484:	4603      	mov	r3, r0
 800f486:	80fb      	strh	r3, [r7, #6]
#ifdef ADS1115_PRESSURE_SENSOR_DEBUG_1
     Ads1115_Raw_Value    = ADS1115_Pressure_sensor();
     Pressure_Sensor_Offset_Raw_Val = AW_flow_raw_Volt(Ads1115_Raw_Value);
#endif

  	    Pressure_sensor.Pressure_Sensor_Offset_Val=Pressure_Sensor_Moving_Average(Pressure_Sensor_Offset_Raw_Val);
 800f488:	88fb      	ldrh	r3, [r7, #6]
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7ff ffb2 	bl	800f3f4 <Pressure_Sensor_Moving_Average>
 800f490:	4603      	mov	r3, r0
 800f492:	461a      	mov	r2, r3
 800f494:	4b09      	ldr	r3, [pc, #36]	; (800f4bc <Pressure_Sensor_offset+0x54>)
 800f496:	801a      	strh	r2, [r3, #0]
  		vTaskDelay(Two_Millisecond_Delay);
 800f498:	2002      	movs	r0, #2
 800f49a:	f00f fec7 	bl	801f22c <vTaskDelay>
  	for(int i=0;i<Loop_End;i++)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	60fb      	str	r3, [r7, #12]
 800f4a4:	68fa      	ldr	r2, [r7, #12]
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	dbe6      	blt.n	800f47a <Pressure_Sensor_offset+0x12>
  	}
}
 800f4ac:	bf00      	nop
 800f4ae:	bf00      	nop
 800f4b0:	3710      	adds	r7, #16
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	20013d04 	.word	0x20013d04
 800f4bc:	2001405c 	.word	0x2001405c

0800f4c0 <Pressure_Sensor_Value>:

void Pressure_Sensor_Value()
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b086      	sub	sp, #24
 800f4c4:	af00      	add	r7, sp, #0
	 float    Pressure_Mv_Val_;
	 float    P_cmh2o_Val;
	 //uint16_t Ads1115_Raw_Value;

#ifdef ADS1115_PRESSURE_SENSOR_DEBUG_0
     Runtime_Pressure_Val=Pressure_Sensor_Mv(Pressure_Sensor_Pin_Voltage);
 800f4c6:	4b1e      	ldr	r3, [pc, #120]	; (800f540 <Pressure_Sensor_Value+0x80>)
 800f4c8:	889b      	ldrh	r3, [r3, #4]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7ff ffb2 	bl	800f434 <Pressure_Sensor_Mv>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	82fb      	strh	r3, [r7, #22]
#endif




     Runtime_Pressure_Val_filterd=Pressure_Sensor_Moving_Average(Runtime_Pressure_Val);
 800f4d4:	8afb      	ldrh	r3, [r7, #22]
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7ff ff8c 	bl	800f3f4 <Pressure_Sensor_Moving_Average>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	461a      	mov	r2, r3
 800f4e0:	4b18      	ldr	r3, [pc, #96]	; (800f544 <Pressure_Sensor_Value+0x84>)
 800f4e2:	801a      	strh	r2, [r3, #0]
     Pressure_Mv_Val_=(Runtime_Pressure_Val_filterd-Pressure_sensor.Pressure_Sensor_Offset_Val);
 800f4e4:	4b17      	ldr	r3, [pc, #92]	; (800f544 <Pressure_Sensor_Value+0x84>)
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	4b17      	ldr	r3, [pc, #92]	; (800f548 <Pressure_Sensor_Value+0x88>)
 800f4ec:	881b      	ldrh	r3, [r3, #0]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	ee07 3a90 	vmov	s15, r3
 800f4f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4f8:	edc7 7a04 	vstr	s15, [r7, #16]
     P_cmh2o_Val=(Pressure_Mv_Val_/Pressure_Sensor_Sensitivity);
 800f4fc:	6938      	ldr	r0, [r7, #16]
 800f4fe:	f7f0 ffcb 	bl	8000498 <__aeabi_f2d>
 800f502:	a30d      	add	r3, pc, #52	; (adr r3, 800f538 <Pressure_Sensor_Value+0x78>)
 800f504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f508:	f7f1 f948 	bl	800079c <__aeabi_ddiv>
 800f50c:	4602      	mov	r2, r0
 800f50e:	460b      	mov	r3, r1
 800f510:	4610      	mov	r0, r2
 800f512:	4619      	mov	r1, r3
 800f514:	f7f1 fafa 	bl	8000b0c <__aeabi_d2f>
 800f518:	4603      	mov	r3, r0
 800f51a:	60fb      	str	r3, [r7, #12]
     Pressure_sensor.Pressure_Val=(uint8_t)P_cmh2o_Val;
 800f51c:	edd7 7a03 	vldr	s15, [r7, #12]
 800f520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f524:	edc7 7a01 	vstr	s15, [r7, #4]
 800f528:	793b      	ldrb	r3, [r7, #4]
 800f52a:	b2da      	uxtb	r2, r3
 800f52c:	4b06      	ldr	r3, [pc, #24]	; (800f548 <Pressure_Sensor_Value+0x88>)
 800f52e:	709a      	strb	r2, [r3, #2]
}
 800f530:	bf00      	nop
 800f532:	3718      	adds	r7, #24
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	d70a3d71 	.word	0xd70a3d71
 800f53c:	404610a3 	.word	0x404610a3
 800f540:	20013d04 	.word	0x20013d04
 800f544:	2001485c 	.word	0x2001485c
 800f548:	2001405c 	.word	0x2001405c

0800f54c <Sensor_Read_Task>:

#include "Sensor_Read.h"

extern uint16_t AW_flow_raw;
void Sensor_Read_Task(void *argument)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Pressure_Sensor_Value();
 800f554:	f7ff ffb4 	bl	800f4c0 <Pressure_Sensor_Value>
		Flow_Sensor_Value();
 800f558:	f7ff fb90 	bl	800ec7c <Flow_Sensor_Value>
		Temp_Flow    =  Flow_Sensor_cal._Flow_Val;
 800f55c:	4b0a      	ldr	r3, [pc, #40]	; (800f588 <Sensor_Read_Task+0x3c>)
 800f55e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f560:	4618      	mov	r0, r3
 800f562:	f7f0 ff87 	bl	8000474 <__aeabi_i2d>
 800f566:	4602      	mov	r2, r0
 800f568:	460b      	mov	r3, r1
 800f56a:	4908      	ldr	r1, [pc, #32]	; (800f58c <Sensor_Read_Task+0x40>)
 800f56c:	e9c1 2300 	strd	r2, r3, [r1]
		Get_Volume();
 800f570:	f7ff fb38 	bl	800ebe4 <Get_Volume>
		Get_Oxygen_Value(Common_Mode_Parameter._FIO2_Val );
 800f574:	4b06      	ldr	r3, [pc, #24]	; (800f590 <Sensor_Read_Task+0x44>)
 800f576:	78db      	ldrb	r3, [r3, #3]
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fc f9e3 	bl	800b944 <Get_Oxygen_Value>
		vTaskDelay(Two_Millisecond_Delay);
 800f57e:	2002      	movs	r0, #2
 800f580:	f00f fe54 	bl	801f22c <vTaskDelay>
		Pressure_Sensor_Value();
 800f584:	e7e6      	b.n	800f554 <Sensor_Read_Task+0x8>
 800f586:	bf00      	nop
 800f588:	20013fb0 	.word	0x20013fb0
 800f58c:	20013d18 	.word	0x20013d18
 800f590:	20013ba4 	.word	0x20013ba4

0800f594 <Sensor_Offset_Task>:
#include "stm32f4xx_hal.h"
#include "main.h"


void Sensor_Offset_Task (void *argument)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
	while (1)
	{

xSemaphoreTake(binarysem,10);
 800f59c:	4b85      	ldr	r3, [pc, #532]	; (800f7b4 <Sensor_Offset_Task+0x220>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	210a      	movs	r1, #10
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f00f f98c 	bl	801e8c0 <xQueueSemaphoreTake>

        vTaskDelay(4000);
 800f5a8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800f5ac:	f00f fe3e 	bl	801f22c <vTaskDelay>
		vTaskSuspend(Sensor_Read_Handler);
 800f5b0:	4b81      	ldr	r3, [pc, #516]	; (800f7b8 <Sensor_Offset_Task+0x224>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f00f fe6d 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Time_Trace_Handler);
 800f5ba:	4b80      	ldr	r3, [pc, #512]	; (800f7bc <Sensor_Offset_Task+0x228>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f00f fe68 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Bluetooth_Handler);
 800f5c4:	4b7e      	ldr	r3, [pc, #504]	; (800f7c0 <Sensor_Offset_Task+0x22c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f00f fe63 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Bluetooth_data_Split_Handler);
 800f5ce:	4b7d      	ldr	r3, [pc, #500]	; (800f7c4 <Sensor_Offset_Task+0x230>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f00f fe5e 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800f5d8:	4b7b      	ldr	r3, [pc, #492]	; (800f7c8 <Sensor_Offset_Task+0x234>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f00f fe59 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(One_Time_Handler);
 800f5e2:	4b7a      	ldr	r3, [pc, #488]	; (800f7cc <Sensor_Offset_Task+0x238>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f00f fe54 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Alert_Handler);
 800f5ec:	4b78      	ldr	r3, [pc, #480]	; (800f7d0 <Sensor_Offset_Task+0x23c>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f00f fe4f 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Oxygen_Blending_Handler);
 800f5f6:	4b77      	ldr	r3, [pc, #476]	; (800f7d4 <Sensor_Offset_Task+0x240>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f00f fe4a 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(Pc_Cmv_Handler);
 800f600:	4b75      	ldr	r3, [pc, #468]	; (800f7d8 <Sensor_Offset_Task+0x244>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4618      	mov	r0, r3
 800f606:	f00f fe45 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(PIP_Control_Task_Handler);
 800f60a:	4b74      	ldr	r3, [pc, #464]	; (800f7dc <Sensor_Offset_Task+0x248>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4618      	mov	r0, r3
 800f610:	f00f fe40 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(Vc_Cmv_Handler);
 800f614:	4b72      	ldr	r3, [pc, #456]	; (800f7e0 <Sensor_Offset_Task+0x24c>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4618      	mov	r0, r3
 800f61a:	f00f fe3b 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Volume_Control_Task_Handler);
 800f61e:	4b71      	ldr	r3, [pc, #452]	; (800f7e4 <Sensor_Offset_Task+0x250>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	4618      	mov	r0, r3
 800f624:	f00f fe36 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800f628:	4b6f      	ldr	r3, [pc, #444]	; (800f7e8 <Sensor_Offset_Task+0x254>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f00f fe31 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800f632:	4b6e      	ldr	r3, [pc, #440]	; (800f7ec <Sensor_Offset_Task+0x258>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4618      	mov	r0, r3
 800f638:	f00f fe2c 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800f63c:	4b6c      	ldr	r3, [pc, #432]	; (800f7f0 <Sensor_Offset_Task+0x25c>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4618      	mov	r0, r3
 800f642:	f00f fe27 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800f646:	4b6b      	ldr	r3, [pc, #428]	; (800f7f4 <Sensor_Offset_Task+0x260>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f00f fe22 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(PSV_Handler);
 800f650:	4b69      	ldr	r3, [pc, #420]	; (800f7f8 <Sensor_Offset_Task+0x264>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4618      	mov	r0, r3
 800f656:	f00f fe1d 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(PSV_PID_Handler);
 800f65a:	4b68      	ldr	r3, [pc, #416]	; (800f7fc <Sensor_Offset_Task+0x268>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4618      	mov	r0, r3
 800f660:	f00f fe18 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(CPAP_Handler);
 800f664:	4b66      	ldr	r3, [pc, #408]	; (800f800 <Sensor_Offset_Task+0x26c>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4618      	mov	r0, r3
 800f66a:	f00f fe13 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(APRV_Handler);
 800f66e:	4b65      	ldr	r3, [pc, #404]	; (800f804 <Sensor_Offset_Task+0x270>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	4618      	mov	r0, r3
 800f674:	f00f fe0e 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(APRV_ONE_TIME_Handler);
 800f678:	4b63      	ldr	r3, [pc, #396]	; (800f808 <Sensor_Offset_Task+0x274>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f00f fe09 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(BIPAP_Handler);
 800f682:	4b62      	ldr	r3, [pc, #392]	; (800f80c <Sensor_Offset_Task+0x278>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4618      	mov	r0, r3
 800f688:	f00f fe04 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(BIPAP_PID_Handler);
 800f68c:	4b60      	ldr	r3, [pc, #384]	; (800f810 <Sensor_Offset_Task+0x27c>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4618      	mov	r0, r3
 800f692:	f00f fdff 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(BACKUP_PC_Handler);
 800f696:	4b5f      	ldr	r3, [pc, #380]	; (800f814 <Sensor_Offset_Task+0x280>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f00f fdfa 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(Nebuliser_Handler);
 800f6a0:	4b5d      	ldr	r3, [pc, #372]	; (800f818 <Sensor_Offset_Task+0x284>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f00f fdf5 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(Suction_Handler);
 800f6aa:	4b5c      	ldr	r3, [pc, #368]	; (800f81c <Sensor_Offset_Task+0x288>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f00f fdf0 	bl	801f294 <vTaskSuspend>

		vTaskSuspend(LED_Strip_Task_Handler);
 800f6b4:	4b5a      	ldr	r3, [pc, #360]	; (800f820 <Sensor_Offset_Task+0x28c>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f00f fdeb 	bl	801f294 <vTaskSuspend>


		vTaskSuspend(Suction_Handler);
 800f6be:	4b57      	ldr	r3, [pc, #348]	; (800f81c <Sensor_Offset_Task+0x288>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f00f fde6 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(HFNC_Handler);
 800f6c8:	4b56      	ldr	r3, [pc, #344]	; (800f824 <Sensor_Offset_Task+0x290>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f00f fde1 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(O2_Calibration_Handler);
 800f6d2:	4b55      	ldr	r3, [pc, #340]	; (800f828 <Sensor_Offset_Task+0x294>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f00f fddc 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Calibration_Handler);
 800f6dc:	4b53      	ldr	r3, [pc, #332]	; (800f82c <Sensor_Offset_Task+0x298>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f00f fdd7 	bl	801f294 <vTaskSuspend>
		vTaskSuspend(Fuel_Gauge_Handler);
 800f6e6:	4b52      	ldr	r3, [pc, #328]	; (800f830 <Sensor_Offset_Task+0x29c>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f00f fdd2 	bl	801f294 <vTaskSuspend>


		Oxygen_Parameter.Achieved_Oxygen = 21;
 800f6f0:	4b50      	ldr	r3, [pc, #320]	; (800f834 <Sensor_Offset_Task+0x2a0>)
 800f6f2:	2215      	movs	r2, #21
 800f6f4:	731a      	strb	r2, [r3, #12]
		Send_Frame_Fuel_Gauge = First_Frame;
 800f6f6:	4b50      	ldr	r3, [pc, #320]	; (800f838 <Sensor_Offset_Task+0x2a4>)
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	701a      	strb	r2, [r3, #0]
		Fuel_Gauge_Init();                          // Fuel Gauge
 800f6fc:	f7f7 fc96 	bl	800702c <Fuel_Gauge_Init>

if( (xSemaphoreTake(binarysem,4000)) == pdTRUE)
 800f700:	4b2c      	ldr	r3, [pc, #176]	; (800f7b4 <Sensor_Offset_Task+0x220>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800f708:	4618      	mov	r0, r3
 800f70a:	f00f f8d9 	bl	801e8c0 <xQueueSemaphoreTake>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b01      	cmp	r3, #1
 800f712:	d124      	bne.n	800f75e <Sensor_Offset_Task+0x1ca>
{
		Pressure_Sensor_offset();
 800f714:	f7ff fea8 	bl	800f468 <Pressure_Sensor_offset>
		Flow_Sensor_7002_offset();
 800f718:	f7ff fb76 	bl	800ee08 <Flow_Sensor_7002_offset>

		INITIAL_DAC_VALUE();
 800f71c:	f7f9 fcee 	bl	80090fc <INITIAL_DAC_VALUE>
		Device_Control = PAUSE;
 800f720:	4b46      	ldr	r3, [pc, #280]	; (800f83c <Sensor_Offset_Task+0x2a8>)
 800f722:	2201      	movs	r2, #1
 800f724:	701a      	strb	r2, [r3, #0]
		INCREMENT_DAC_VAL_PER_ITERATION = 3;
 800f726:	4b46      	ldr	r3, [pc, #280]	; (800f840 <Sensor_Offset_Task+0x2ac>)
 800f728:	2203      	movs	r2, #3
 800f72a:	701a      	strb	r2, [r3, #0]

		HFNC_DAC_VALUE =0;
 800f72c:	4b45      	ldr	r3, [pc, #276]	; (800f844 <Sensor_Offset_Task+0x2b0>)
 800f72e:	2200      	movs	r2, #0
 800f730:	801a      	strh	r2, [r3, #0]
		HFNC_Dac1=230;
 800f732:	4b45      	ldr	r3, [pc, #276]	; (800f848 <Sensor_Offset_Task+0x2b4>)
 800f734:	22e6      	movs	r2, #230	; 0xe6
 800f736:	801a      	strh	r2, [r3, #0]
		HFNC_Dac2=1800;
 800f738:	4b44      	ldr	r3, [pc, #272]	; (800f84c <Sensor_Offset_Task+0x2b8>)
 800f73a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800f73e:	801a      	strh	r2, [r3, #0]
		kp=10;
 800f740:	4b43      	ldr	r3, [pc, #268]	; (800f850 <Sensor_Offset_Task+0x2bc>)
 800f742:	220a      	movs	r2, #10
 800f744:	701a      	strb	r2, [r3, #0]
		ki=10;
 800f746:	4b43      	ldr	r3, [pc, #268]	; (800f854 <Sensor_Offset_Task+0x2c0>)
 800f748:	220a      	movs	r2, #10
 800f74a:	701a      	strb	r2, [r3, #0]
		kd=1;
 800f74c:	4942      	ldr	r1, [pc, #264]	; (800f858 <Sensor_Offset_Task+0x2c4>)
 800f74e:	f04f 0200 	mov.w	r2, #0
 800f752:	4b42      	ldr	r3, [pc, #264]	; (800f85c <Sensor_Offset_Task+0x2c8>)
 800f754:	e9c1 2300 	strd	r2, r3, [r1]
		Time=50;
 800f758:	4b41      	ldr	r3, [pc, #260]	; (800f860 <Sensor_Offset_Task+0x2cc>)
 800f75a:	2232      	movs	r2, #50	; 0x32
 800f75c:	601a      	str	r2, [r3, #0]
}
if( (xSemaphoreTake(binarysem,4000)) == pdTRUE)
 800f75e:	4b15      	ldr	r3, [pc, #84]	; (800f7b4 <Sensor_Offset_Task+0x220>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800f766:	4618      	mov	r0, r3
 800f768:	f00f f8aa 	bl	801e8c0 <xQueueSemaphoreTake>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d11a      	bne.n	800f7a8 <Sensor_Offset_Task+0x214>
{

			vTaskResume(Sensor_Read_Handler);
 800f772:	4b11      	ldr	r3, [pc, #68]	; (800f7b8 <Sensor_Offset_Task+0x224>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	4618      	mov	r0, r3
 800f778:	f00f fe50 	bl	801f41c <vTaskResume>
			vTaskResume(Time_Trace_Handler);
 800f77c:	4b0f      	ldr	r3, [pc, #60]	; (800f7bc <Sensor_Offset_Task+0x228>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4618      	mov	r0, r3
 800f782:	f00f fe4b 	bl	801f41c <vTaskResume>
			vTaskResume(Bluetooth_Handler);
 800f786:	4b0e      	ldr	r3, [pc, #56]	; (800f7c0 <Sensor_Offset_Task+0x22c>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4618      	mov	r0, r3
 800f78c:	f00f fe46 	bl	801f41c <vTaskResume>
			vTaskResume(Fuel_Gauge_Handler);
 800f790:	4b27      	ldr	r3, [pc, #156]	; (800f830 <Sensor_Offset_Task+0x29c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4618      	mov	r0, r3
 800f796:	f00f fe41 	bl	801f41c <vTaskResume>

xSemaphoreGive(binarysem);
 800f79a:	4b06      	ldr	r3, [pc, #24]	; (800f7b4 <Sensor_Offset_Task+0x220>)
 800f79c:	6818      	ldr	r0, [r3, #0]
 800f79e:	2300      	movs	r3, #0
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	f00e fe12 	bl	801e3cc <xQueueGenericSend>
}
		vTaskDelete(Sensor_Offset_Handler);
 800f7a8:	4b2e      	ldr	r3, [pc, #184]	; (800f864 <Sensor_Offset_Task+0x2d0>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f00f fcad 	bl	801f10c <vTaskDelete>
xSemaphoreTake(binarysem,10);
 800f7b2:	e6f3      	b.n	800f59c <Sensor_Offset_Task+0x8>
 800f7b4:	20013b40 	.word	0x20013b40
 800f7b8:	20014028 	.word	0x20014028
 800f7bc:	200139e8 	.word	0x200139e8
 800f7c0:	2001408c 	.word	0x2001408c
 800f7c4:	20013f78 	.word	0x20013f78
 800f7c8:	2001406c 	.word	0x2001406c
 800f7cc:	20014094 	.word	0x20014094
 800f7d0:	20014020 	.word	0x20014020
 800f7d4:	20013f24 	.word	0x20013f24
 800f7d8:	20013f80 	.word	0x20013f80
 800f7dc:	20013ba0 	.word	0x20013ba0
 800f7e0:	200142f8 	.word	0x200142f8
 800f7e4:	20013998 	.word	0x20013998
 800f7e8:	20014348 	.word	0x20014348
 800f7ec:	20013ca0 	.word	0x20013ca0
 800f7f0:	20013f58 	.word	0x20013f58
 800f7f4:	200142e0 	.word	0x200142e0
 800f7f8:	20013fa8 	.word	0x20013fa8
 800f7fc:	20013f20 	.word	0x20013f20
 800f800:	20014374 	.word	0x20014374
 800f804:	20013f38 	.word	0x20013f38
 800f808:	20014148 	.word	0x20014148
 800f80c:	20013af0 	.word	0x20013af0
 800f810:	200141cc 	.word	0x200141cc
 800f814:	20013bb4 	.word	0x20013bb4
 800f818:	20013bb8 	.word	0x20013bb8
 800f81c:	2001423c 	.word	0x2001423c
 800f820:	20013d90 	.word	0x20013d90
 800f824:	20013ad8 	.word	0x20013ad8
 800f828:	20013ef0 	.word	0x20013ef0
 800f82c:	20014044 	.word	0x20014044
 800f830:	200140f8 	.word	0x200140f8
 800f834:	2001409c 	.word	0x2001409c
 800f838:	200139a5 	.word	0x200139a5
 800f83c:	20013d94 	.word	0x20013d94
 800f840:	200140c3 	.word	0x200140c3
 800f844:	2001394a 	.word	0x2001394a
 800f848:	2001399c 	.word	0x2001399c
 800f84c:	20013bd0 	.word	0x20013bd0
 800f850:	20014320 	.word	0x20014320
 800f854:	2001402c 	.word	0x2001402c
 800f858:	200139d8 	.word	0x200139d8
 800f85c:	3ff00000 	.word	0x3ff00000
 800f860:	200141e0 	.word	0x200141e0
 800f864:	200139e4 	.word	0x200139e4

0800f868 <One_Time_Task>:
}



void One_Time_Task(void *argument)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
	while (1)
	{

		switch (Next_Half_Breath_Cycle)
 800f870:	4b61      	ldr	r3, [pc, #388]	; (800f9f8 <One_Time_Task+0x190>)
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	2b02      	cmp	r3, #2
 800f876:	f000 80bb 	beq.w	800f9f0 <One_Time_Task+0x188>
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	f300 80ba 	bgt.w	800f9f4 <One_Time_Task+0x18c>
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <One_Time_Task+0x22>
 800f884:	2b01      	cmp	r3, #1
 800f886:	d059      	beq.n	800f93c <One_Time_Task+0xd4>
			break;

		case NoWaveFormState:
			break;
		default:
			break;
 800f888:	e0b4      	b.n	800f9f4 <One_Time_Task+0x18c>
			switch (Mode)
 800f88a:	4b5c      	ldr	r3, [pc, #368]	; (800f9fc <One_Time_Task+0x194>)
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	2b15      	cmp	r3, #21
 800f890:	d848      	bhi.n	800f924 <One_Time_Task+0xbc>
 800f892:	a201      	add	r2, pc, #4	; (adr r2, 800f898 <One_Time_Task+0x30>)
 800f894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f898:	0800f90f 	.word	0x0800f90f
 800f89c:	0800f8f1 	.word	0x0800f8f1
 800f8a0:	0800f8f7 	.word	0x0800f8f7
 800f8a4:	0800f925 	.word	0x0800f925
 800f8a8:	0800f925 	.word	0x0800f925
 800f8ac:	0800f8fd 	.word	0x0800f8fd
 800f8b0:	0800f903 	.word	0x0800f903
 800f8b4:	0800f925 	.word	0x0800f925
 800f8b8:	0800f925 	.word	0x0800f925
 800f8bc:	0800f925 	.word	0x0800f925
 800f8c0:	0800f925 	.word	0x0800f925
 800f8c4:	0800f925 	.word	0x0800f925
 800f8c8:	0800f925 	.word	0x0800f925
 800f8cc:	0800f925 	.word	0x0800f925
 800f8d0:	0800f925 	.word	0x0800f925
 800f8d4:	0800f925 	.word	0x0800f925
 800f8d8:	0800f925 	.word	0x0800f925
 800f8dc:	0800f925 	.word	0x0800f925
 800f8e0:	0800f925 	.word	0x0800f925
 800f8e4:	0800f925 	.word	0x0800f925
 800f8e8:	0800f925 	.word	0x0800f925
 800f8ec:	0800f909 	.word	0x0800f909
					PC_CMV_Inspiration_Time_Variables_Reset();
 800f8f0:	f7fd fe76 	bl	800d5e0 <PC_CMV_Inspiration_Time_Variables_Reset>
				break;
 800f8f4:	e021      	b.n	800f93a <One_Time_Task+0xd2>
					VC_CMV_Inspiration_Time_Variables_Reset();
 800f8f6:	f002 fc07 	bl	8012108 <VC_CMV_Inspiration_Time_Variables_Reset>
				break;
 800f8fa:	e01e      	b.n	800f93a <One_Time_Task+0xd2>
					PC_SIMV_Inspiration_Time_Variables_Reset();
 800f8fc:	f7fd f9ce 	bl	800cc9c <PC_SIMV_Inspiration_Time_Variables_Reset>
				break;
 800f900:	e01b      	b.n	800f93a <One_Time_Task+0xd2>
					VC_SIMV_Inspiration_Time_Variables_Reset();
 800f902:	f001 ff37 	bl	8011774 <VC_SIMV_Inspiration_Time_Variables_Reset>
				break;
 800f906:	e018      	b.n	800f93a <One_Time_Task+0xd2>
					BACKUP_PC_CMV_Inspiration_Time_Variables_Reset();
 800f908:	f7f3 f83c 	bl	8002984 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset>
				break;
 800f90c:	e015      	b.n	800f93a <One_Time_Task+0xd2>
					vol.Volume=0;
 800f90e:	4b3c      	ldr	r3, [pc, #240]	; (800fa00 <One_Time_Task+0x198>)
 800f910:	f04f 0200 	mov.w	r2, #0
 800f914:	601a      	str	r2, [r3, #0]
					vol.Volume_Val = 0;
 800f916:	4b3a      	ldr	r3, [pc, #232]	; (800fa00 <One_Time_Task+0x198>)
 800f918:	2200      	movs	r2, #0
 800f91a:	605a      	str	r2, [r3, #4]
					vTaskDelay(20);
 800f91c:	2014      	movs	r0, #20
 800f91e:	f00f fc85 	bl	801f22c <vTaskDelay>
				break;
 800f922:	e00a      	b.n	800f93a <One_Time_Task+0xd2>
					vol.Volume=0;
 800f924:	4b36      	ldr	r3, [pc, #216]	; (800fa00 <One_Time_Task+0x198>)
 800f926:	f04f 0200 	mov.w	r2, #0
 800f92a:	601a      	str	r2, [r3, #0]
					vol.Volume_Val = 0;
 800f92c:	4b34      	ldr	r3, [pc, #208]	; (800fa00 <One_Time_Task+0x198>)
 800f92e:	2200      	movs	r2, #0
 800f930:	605a      	str	r2, [r3, #4]
					vTaskDelay(20);
 800f932:	2014      	movs	r0, #20
 800f934:	f00f fc7a 	bl	801f22c <vTaskDelay>
				break;
 800f938:	bf00      	nop
		break;
 800f93a:	e05c      	b.n	800f9f6 <One_Time_Task+0x18e>
			switch (Mode)
 800f93c:	4b2f      	ldr	r3, [pc, #188]	; (800f9fc <One_Time_Task+0x194>)
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	2b15      	cmp	r3, #21
 800f942:	d849      	bhi.n	800f9d8 <One_Time_Task+0x170>
 800f944:	a201      	add	r2, pc, #4	; (adr r2, 800f94c <One_Time_Task+0xe4>)
 800f946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94a:	bf00      	nop
 800f94c:	0800f9c3 	.word	0x0800f9c3
 800f950:	0800f9a5 	.word	0x0800f9a5
 800f954:	0800f9ab 	.word	0x0800f9ab
 800f958:	0800f9d9 	.word	0x0800f9d9
 800f95c:	0800f9d9 	.word	0x0800f9d9
 800f960:	0800f9b1 	.word	0x0800f9b1
 800f964:	0800f9b7 	.word	0x0800f9b7
 800f968:	0800f9d9 	.word	0x0800f9d9
 800f96c:	0800f9d9 	.word	0x0800f9d9
 800f970:	0800f9d9 	.word	0x0800f9d9
 800f974:	0800f9d9 	.word	0x0800f9d9
 800f978:	0800f9d9 	.word	0x0800f9d9
 800f97c:	0800f9d9 	.word	0x0800f9d9
 800f980:	0800f9d9 	.word	0x0800f9d9
 800f984:	0800f9d9 	.word	0x0800f9d9
 800f988:	0800f9d9 	.word	0x0800f9d9
 800f98c:	0800f9d9 	.word	0x0800f9d9
 800f990:	0800f9d9 	.word	0x0800f9d9
 800f994:	0800f9d9 	.word	0x0800f9d9
 800f998:	0800f9d9 	.word	0x0800f9d9
 800f99c:	0800f9d9 	.word	0x0800f9d9
 800f9a0:	0800f9bd 	.word	0x0800f9bd
					PC_CMV_Expiration_Time_Variables_Reset();
 800f9a4:	f7fd fef4 	bl	800d790 <PC_CMV_Expiration_Time_Variables_Reset>
					break;
 800f9a8:	e021      	b.n	800f9ee <One_Time_Task+0x186>
					VC_CMV_Expiration_Time_Variables_Reset();
 800f9aa:	f002 fca1 	bl	80122f0 <VC_CMV_Expiration_Time_Variables_Reset>
				break;
 800f9ae:	e01e      	b.n	800f9ee <One_Time_Task+0x186>
					PC_SIMV_Expiration_Time_Variables_Reset();
 800f9b0:	f7fd f988 	bl	800ccc4 <PC_SIMV_Expiration_Time_Variables_Reset>
				break;
 800f9b4:	e01b      	b.n	800f9ee <One_Time_Task+0x186>
					VC_SIMV_Expiration_Time_Variables_Reset();
 800f9b6:	f001 fef1 	bl	801179c <VC_SIMV_Expiration_Time_Variables_Reset>
				break;
 800f9ba:	e018      	b.n	800f9ee <One_Time_Task+0x186>
					BACKUP_PC_CMV_Expiration_Time_Variables_Reset();
 800f9bc:	f7f3 f8bc 	bl	8002b38 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset>
				break;
 800f9c0:	e015      	b.n	800f9ee <One_Time_Task+0x186>
					vol.Volume=0;
 800f9c2:	4b0f      	ldr	r3, [pc, #60]	; (800fa00 <One_Time_Task+0x198>)
 800f9c4:	f04f 0200 	mov.w	r2, #0
 800f9c8:	601a      	str	r2, [r3, #0]
					vol.Volume_Val = 0;
 800f9ca:	4b0d      	ldr	r3, [pc, #52]	; (800fa00 <One_Time_Task+0x198>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	605a      	str	r2, [r3, #4]
					vTaskDelay(20);
 800f9d0:	2014      	movs	r0, #20
 800f9d2:	f00f fc2b 	bl	801f22c <vTaskDelay>
				break;
 800f9d6:	e00a      	b.n	800f9ee <One_Time_Task+0x186>
					vol.Volume=0;
 800f9d8:	4b09      	ldr	r3, [pc, #36]	; (800fa00 <One_Time_Task+0x198>)
 800f9da:	f04f 0200 	mov.w	r2, #0
 800f9de:	601a      	str	r2, [r3, #0]
					vol.Volume_Val = 0;
 800f9e0:	4b07      	ldr	r3, [pc, #28]	; (800fa00 <One_Time_Task+0x198>)
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	605a      	str	r2, [r3, #4]
					vTaskDelay(20);
 800f9e6:	2014      	movs	r0, #20
 800f9e8:	f00f fc20 	bl	801f22c <vTaskDelay>
					break;
 800f9ec:	bf00      	nop
			break;
 800f9ee:	e002      	b.n	800f9f6 <One_Time_Task+0x18e>
			break;
 800f9f0:	bf00      	nop
 800f9f2:	e73d      	b.n	800f870 <One_Time_Task+0x8>
			break;
 800f9f4:	bf00      	nop
		switch (Next_Half_Breath_Cycle)
 800f9f6:	e73b      	b.n	800f870 <One_Time_Task+0x8>
 800f9f8:	20013d20 	.word	0x20013d20
 800f9fc:	20013d48 	.word	0x20013d48
 800fa00:	200140c8 	.word	0x200140c8

0800fa04 <Suction_Task>:
#include "SUCTION.h"

uint8_t initial_suction_valve_open = 1;

void Suction_Task(void *argument)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if(initial_suction_valve_open == 1)
 800fa0c:	4b0f      	ldr	r3, [pc, #60]	; (800fa4c <Suction_Task+0x48>)
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d10d      	bne.n	800fa30 <Suction_Task+0x2c>
		{
			ExpValve_OPEN();
 800fa14:	4b0e      	ldr	r3, [pc, #56]	; (800fa50 <Suction_Task+0x4c>)
 800fa16:	695b      	ldr	r3, [r3, #20]
 800fa18:	4a0d      	ldr	r2, [pc, #52]	; (800fa50 <Suction_Task+0x4c>)
 800fa1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa1e:	6153      	str	r3, [r2, #20]
			initial_suction_valve_open = 0;
 800fa20:	4b0a      	ldr	r3, [pc, #40]	; (800fa4c <Suction_Task+0x48>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	701a      	strb	r2, [r3, #0]
			vTaskDelay(1000);
 800fa26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fa2a:	f00f fbff 	bl	801f22c <vTaskDelay>
 800fa2e:	e009      	b.n	800fa44 <Suction_Task+0x40>
		}
		else
		{
			ExpValve_CLOSE();
 800fa30:	4b07      	ldr	r3, [pc, #28]	; (800fa50 <Suction_Task+0x4c>)
 800fa32:	695b      	ldr	r3, [r3, #20]
 800fa34:	4a06      	ldr	r2, [pc, #24]	; (800fa50 <Suction_Task+0x4c>)
 800fa36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fa3a:	6153      	str	r3, [r2, #20]
			Blower_Signal(1300);
 800fa3c:	4b05      	ldr	r3, [pc, #20]	; (800fa54 <Suction_Task+0x50>)
 800fa3e:	f240 5214 	movw	r2, #1300	; 0x514
 800fa42:	609a      	str	r2, [r3, #8]
		}
		vTaskDelay(100);
 800fa44:	2064      	movs	r0, #100	; 0x64
 800fa46:	f00f fbf1 	bl	801f22c <vTaskDelay>
		if(initial_suction_valve_open == 1)
 800fa4a:	e7df      	b.n	800fa0c <Suction_Task+0x8>
 800fa4c:	2000001a 	.word	0x2000001a
 800fa50:	40020400 	.word	0x40020400
 800fa54:	40007400 	.word	0x40007400

0800fa58 <SUCTION_Packet_Data>:
	}
}

void SUCTION_Packet_Data()
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	af00      	add	r7, sp, #0
	ExpValve_OPEN();
 800fa5c:	4b46      	ldr	r3, [pc, #280]	; (800fb78 <SUCTION_Packet_Data+0x120>)
 800fa5e:	695b      	ldr	r3, [r3, #20]
 800fa60:	4a45      	ldr	r2, [pc, #276]	; (800fb78 <SUCTION_Packet_Data+0x120>)
 800fa62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa66:	6153      	str	r3, [r2, #20]
	vTaskSuspend(Vc_Cmv_Handler);
 800fa68:	4b44      	ldr	r3, [pc, #272]	; (800fb7c <SUCTION_Packet_Data+0x124>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f00f fc11 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800fa72:	4b43      	ldr	r3, [pc, #268]	; (800fb80 <SUCTION_Packet_Data+0x128>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f00f fc0c 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800fa7c:	4b41      	ldr	r3, [pc, #260]	; (800fb84 <SUCTION_Packet_Data+0x12c>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f00f fc07 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Cmv_Handler);
 800fa86:	4b40      	ldr	r3, [pc, #256]	; (800fb88 <SUCTION_Packet_Data+0x130>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f00f fc02 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800fa90:	4b3e      	ldr	r3, [pc, #248]	; (800fb8c <SUCTION_Packet_Data+0x134>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f00f fbfd 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800fa9a:	4b3d      	ldr	r3, [pc, #244]	; (800fb90 <SUCTION_Packet_Data+0x138>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f00f fbf8 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800faa4:	4b3b      	ldr	r3, [pc, #236]	; (800fb94 <SUCTION_Packet_Data+0x13c>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f00f fbf3 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800faae:	4b3a      	ldr	r3, [pc, #232]	; (800fb98 <SUCTION_Packet_Data+0x140>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4618      	mov	r0, r3
 800fab4:	f00f fbee 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800fab8:	4b38      	ldr	r3, [pc, #224]	; (800fb9c <SUCTION_Packet_Data+0x144>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f00f fbe9 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800fac2:	4b37      	ldr	r3, [pc, #220]	; (800fba0 <SUCTION_Packet_Data+0x148>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f00f fbe4 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_Handler);
 800facc:	4b35      	ldr	r3, [pc, #212]	; (800fba4 <SUCTION_Packet_Data+0x14c>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f00f fbdf 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800fad6:	4b34      	ldr	r3, [pc, #208]	; (800fba8 <SUCTION_Packet_Data+0x150>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4618      	mov	r0, r3
 800fadc:	f00f fbda 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800fae0:	4b32      	ldr	r3, [pc, #200]	; (800fbac <SUCTION_Packet_Data+0x154>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f00f fbd5 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800faea:	4b31      	ldr	r3, [pc, #196]	; (800fbb0 <SUCTION_Packet_Data+0x158>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4618      	mov	r0, r3
 800faf0:	f00f fbd0 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800faf4:	4b2f      	ldr	r3, [pc, #188]	; (800fbb4 <SUCTION_Packet_Data+0x15c>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f00f fbcb 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800fafe:	4b2e      	ldr	r3, [pc, #184]	; (800fbb8 <SUCTION_Packet_Data+0x160>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f00f fbc6 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800fb08:	4b2c      	ldr	r3, [pc, #176]	; (800fbbc <SUCTION_Packet_Data+0x164>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f00f fbc1 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(Nebuliser_Handler);
 800fb12:	4b2b      	ldr	r3, [pc, #172]	; (800fbc0 <SUCTION_Packet_Data+0x168>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4618      	mov	r0, r3
 800fb18:	f00f fbbc 	bl	801f294 <vTaskSuspend>
	vTaskSuspend(HFNC_Handler);
 800fb1c:	4b29      	ldr	r3, [pc, #164]	; (800fbc4 <SUCTION_Packet_Data+0x16c>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f00f fbb7 	bl	801f294 <vTaskSuspend>
	Blower_Signal( 0);
 800fb26:	4b28      	ldr	r3, [pc, #160]	; (800fbc8 <SUCTION_Packet_Data+0x170>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	609a      	str	r2, [r3, #8]
	Parkar_valve_Signal(0);
 800fb2c:	4b26      	ldr	r3, [pc, #152]	; (800fbc8 <SUCTION_Packet_Data+0x170>)
 800fb2e:	2200      	movs	r2, #0
 800fb30:	615a      	str	r2, [r3, #20]
	Oxygen_Parameter.Servo_Position   =45;
 800fb32:	4b26      	ldr	r3, [pc, #152]	; (800fbcc <SUCTION_Packet_Data+0x174>)
 800fb34:	222d      	movs	r2, #45	; 0x2d
 800fb36:	73da      	strb	r2, [r3, #15]
	Servo_Info(Oxygen_Parameter.Servo_Position);
 800fb38:	4b24      	ldr	r3, [pc, #144]	; (800fbcc <SUCTION_Packet_Data+0x174>)
 800fb3a:	7bdb      	ldrb	r3, [r3, #15]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fb ff8f 	bl	800ba60 <Servo_Info>
	Servo_Position_Feedback          = SERVO_FULL_OPEND;
 800fb42:	4b23      	ldr	r3, [pc, #140]	; (800fbd0 <SUCTION_Packet_Data+0x178>)
 800fb44:	222d      	movs	r2, #45	; 0x2d
 800fb46:	701a      	strb	r2, [r3, #0]
	Servo_Angle(Oxygen_Parameter.Servo_Position);
 800fb48:	4b20      	ldr	r3, [pc, #128]	; (800fbcc <SUCTION_Packet_Data+0x174>)
 800fb4a:	7bda      	ldrb	r2, [r3, #15]
 800fb4c:	4b21      	ldr	r3, [pc, #132]	; (800fbd4 <SUCTION_Packet_Data+0x17c>)
 800fb4e:	635a      	str	r2, [r3, #52]	; 0x34
	vol.Volume       = RESET;
 800fb50:	4b21      	ldr	r3, [pc, #132]	; (800fbd8 <SUCTION_Packet_Data+0x180>)
 800fb52:	f04f 0200 	mov.w	r2, #0
 800fb56:	601a      	str	r2, [r3, #0]
	vol.Volume_max   = RESET;
 800fb58:	4b1f      	ldr	r3, [pc, #124]	; (800fbd8 <SUCTION_Packet_Data+0x180>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	609a      	str	r2, [r3, #8]
	vol.Volume_Val   = RESET;
 800fb5e:	4b1e      	ldr	r3, [pc, #120]	; (800fbd8 <SUCTION_Packet_Data+0x180>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	605a      	str	r2, [r3, #4]
	initial_suction_valve_open = 1;
 800fb64:	4b1d      	ldr	r3, [pc, #116]	; (800fbdc <SUCTION_Packet_Data+0x184>)
 800fb66:	2201      	movs	r2, #1
 800fb68:	701a      	strb	r2, [r3, #0]
	vTaskResume(Suction_Handler);
 800fb6a:	4b1d      	ldr	r3, [pc, #116]	; (800fbe0 <SUCTION_Packet_Data+0x188>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f00f fc54 	bl	801f41c <vTaskResume>
}
 800fb74:	bf00      	nop
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	40020400 	.word	0x40020400
 800fb7c:	200142f8 	.word	0x200142f8
 800fb80:	20013998 	.word	0x20013998
 800fb84:	20014094 	.word	0x20014094
 800fb88:	20013f80 	.word	0x20013f80
 800fb8c:	20013ba0 	.word	0x20013ba0
 800fb90:	20013ca0 	.word	0x20013ca0
 800fb94:	20014348 	.word	0x20014348
 800fb98:	20013f58 	.word	0x20013f58
 800fb9c:	200142e0 	.word	0x200142e0
 800fba0:	20013bb4 	.word	0x20013bb4
 800fba4:	20013fa8 	.word	0x20013fa8
 800fba8:	20013f20 	.word	0x20013f20
 800fbac:	20014374 	.word	0x20014374
 800fbb0:	20013af0 	.word	0x20013af0
 800fbb4:	200141cc 	.word	0x200141cc
 800fbb8:	20013f38 	.word	0x20013f38
 800fbbc:	20014148 	.word	0x20014148
 800fbc0:	20013bb8 	.word	0x20013bb8
 800fbc4:	20013ad8 	.word	0x20013ad8
 800fbc8:	40007400 	.word	0x40007400
 800fbcc:	2001409c 	.word	0x2001409c
 800fbd0:	20014074 	.word	0x20014074
 800fbd4:	40001800 	.word	0x40001800
 800fbd8:	200140c8 	.word	0x200140c8
 800fbdc:	2000001a 	.word	0x2000001a
 800fbe0:	2001423c 	.word	0x2001423c

0800fbe4 <Sampled_Parameter_List_1_Transmit>:
extern int RR_E_TIME_ACHIEVED;
extern int RR_I_TIME_ACHIEVED;
extern uint8_t Toggle;

void Sampled_Parameter_List_1_Transmit()
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	af00      	add	r7, sp, #0
	Sampled_Parameter_1_Packet._header          = Send_BlueTooth_Sampled_Parameter_Header ;
 800fbe8:	4b1c      	ldr	r3, [pc, #112]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800fbf0:	701a      	strb	r2, [r3, #0]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fbf8:	705a      	strb	r2, [r3, #1]
	Sampled_Parameter_1_Packet._length          = (sizeof(Sampled_Parameter_1_Packet)-3)  ;
 800fbfa:	4b18      	ldr	r3, [pc, #96]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fbfc:	2207      	movs	r2, #7
 800fbfe:	709a      	strb	r2, [r3, #2]
	Sampled_Parameter_1_Packet._PIP_Val         = Battery_Voltage ;
 800fc00:	4b17      	ldr	r3, [pc, #92]	; (800fc60 <Sampled_Parameter_List_1_Transmit+0x7c>)
 800fc02:	781a      	ldrb	r2, [r3, #0]
 800fc04:	4b15      	ldr	r3, [pc, #84]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fc06:	70da      	strb	r2, [r3, #3]
	Sampled_Parameter_1_Packet._PEEP_Val        = Toggle;
 800fc08:	4b16      	ldr	r3, [pc, #88]	; (800fc64 <Sampled_Parameter_List_1_Transmit+0x80>)
 800fc0a:	781a      	ldrb	r2, [r3, #0]
 800fc0c:	4b13      	ldr	r3, [pc, #76]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fc0e:	711a      	strb	r2, [r3, #4]
	Sampled_Parameter_1_Packet._VTI_Val_1       = Sampled_Parameter_2.Total_Tidal_Volume_Int ;
 800fc10:	4b15      	ldr	r3, [pc, #84]	; (800fc68 <Sampled_Parameter_List_1_Transmit+0x84>)
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	b2da      	uxtb	r2, r3
 800fc16:	4b11      	ldr	r3, [pc, #68]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fc18:	715a      	strb	r2, [r3, #5]
	Sampled_Parameter_1_Packet._VTI_Val_2       = Sampled_Parameter_2.Total_Tidal_Volume_Decimal;
 800fc1a:	4b13      	ldr	r3, [pc, #76]	; (800fc68 <Sampled_Parameter_List_1_Transmit+0x84>)
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	b2da      	uxtb	r2, r3
 800fc20:	4b0e      	ldr	r3, [pc, #56]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fc22:	719a      	strb	r2, [r3, #6]
	Sampled_Parameter_1_Packet._FIO2            = Oxygen_Parameter.Achieved_Oxygen ;
 800fc24:	4b11      	ldr	r3, [pc, #68]	; (800fc6c <Sampled_Parameter_List_1_Transmit+0x88>)
 800fc26:	7b1a      	ldrb	r2, [r3, #12]
 800fc28:	4b0c      	ldr	r3, [pc, #48]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fc2a:	71da      	strb	r2, [r3, #7]
	Sampled_Parameter_1_Packet._RR              = Breath_In_Minite ;
 800fc2c:	4b10      	ldr	r3, [pc, #64]	; (800fc70 <Sampled_Parameter_List_1_Transmit+0x8c>)
 800fc2e:	781a      	ldrb	r2, [r3, #0]
 800fc30:	4b0a      	ldr	r3, [pc, #40]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fc32:	721a      	strb	r2, [r3, #8]
	Sampled_Parameter_1_Packet._CRC8            = chksum8(&Sampled_Parameter_1_Packet._PIP_Val,(6));
 800fc34:	2106      	movs	r1, #6
 800fc36:	480f      	ldr	r0, [pc, #60]	; (800fc74 <Sampled_Parameter_List_1_Transmit+0x90>)
 800fc38:	f7f4 fbdc 	bl	80043f4 <chksum8>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	461a      	mov	r2, r3
 800fc40:	4b06      	ldr	r3, [pc, #24]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fc42:	725a      	strb	r2, [r3, #9]

#ifdef	UART_COMMUNICATION_1
	 HAL_UART_Transmit_IT(&huart6,(uint8_t*)&Sampled_Parameter_1_Packet,sizeof(Sampled_Parameter_1_Packet));
 800fc44:	220a      	movs	r2, #10
 800fc46:	4905      	ldr	r1, [pc, #20]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fc48:	480b      	ldr	r0, [pc, #44]	; (800fc78 <Sampled_Parameter_List_1_Transmit+0x94>)
 800fc4a:	f00a fa9a 	bl	801a182 <HAL_UART_Transmit_IT>
#endif
#ifdef	USB_COMMUNICATION_1
	 CDC_Transmit_FS((uint8_t*)&Sampled_Parameter_1_Packet,sizeof(Sampled_Parameter_1_Packet));
 800fc4e:	210a      	movs	r1, #10
 800fc50:	4802      	ldr	r0, [pc, #8]	; (800fc5c <Sampled_Parameter_List_1_Transmit+0x78>)
 800fc52:	f011 fb07 	bl	8021264 <CDC_Transmit_FS>
#endif



}
 800fc56:	bf00      	nop
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	20013f9c 	.word	0x20013f9c
 800fc60:	20013c89 	.word	0x20013c89
 800fc64:	200001cf 	.word	0x200001cf
 800fc68:	2001418c 	.word	0x2001418c
 800fc6c:	2001409c 	.word	0x2001409c
 800fc70:	20013f98 	.word	0x20013f98
 800fc74:	20013f9f 	.word	0x20013f9f
 800fc78:	20014104 	.word	0x20014104

0800fc7c <Sampled_Parameter_List_2_Transmit>:



void Sampled_Parameter_List_2_Transmit()
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	af00      	add	r7, sp, #0
	Sampled_Parameter_2_Packet._header          	     = Send_BlueTooth_Sampled_Parameter_Header ;
 800fc80:	4b1d      	ldr	r3, [pc, #116]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fc82:	2200      	movs	r2, #0
 800fc84:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800fc88:	701a      	strb	r2, [r3, #0]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fc90:	705a      	strb	r2, [r3, #1]
	Sampled_Parameter_2_Packet._length                   = (sizeof(Sampled_Parameter_2_Packet)-3)+16 ;
 800fc92:	4b19      	ldr	r3, [pc, #100]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fc94:	2217      	movs	r2, #23
 800fc96:	709a      	strb	r2, [r3, #2]

	Sampled_Parameter_2_Packet._Minite_Volume_int        = Sampled_Parameter_2.Total_Tidal_Volume_Int;
 800fc98:	4b18      	ldr	r3, [pc, #96]	; (800fcfc <Sampled_Parameter_List_2_Transmit+0x80>)
 800fc9a:	685b      	ldr	r3, [r3, #4]
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	4b16      	ldr	r3, [pc, #88]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fca0:	70da      	strb	r2, [r3, #3]
	Sampled_Parameter_2_Packet._Minite_Volume_float      = Sampled_Parameter_2.Total_Tidal_Volume_Decimal;
 800fca2:	4b16      	ldr	r3, [pc, #88]	; (800fcfc <Sampled_Parameter_List_2_Transmit+0x80>)
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	b2da      	uxtb	r2, r3
 800fca8:	4b13      	ldr	r3, [pc, #76]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fcaa:	711a      	strb	r2, [r3, #4]
	Sampled_Parameter_2_Packet._Static_Compliance_Int    = Sampled_Parameter_3.Staic_Compliance_int;
 800fcac:	4b14      	ldr	r3, [pc, #80]	; (800fd00 <Sampled_Parameter_List_2_Transmit+0x84>)
 800fcae:	7c1a      	ldrb	r2, [r3, #16]
 800fcb0:	4b11      	ldr	r3, [pc, #68]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fcb2:	715a      	strb	r2, [r3, #5]
	Sampled_Parameter_2_Packet._Static_Compliance_Float  = Sampled_Parameter_3.Staic_Compliance_float;
 800fcb4:	4b12      	ldr	r3, [pc, #72]	; (800fd00 <Sampled_Parameter_List_2_Transmit+0x84>)
 800fcb6:	7c5a      	ldrb	r2, [r3, #17]
 800fcb8:	4b0f      	ldr	r3, [pc, #60]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fcba:	719a      	strb	r2, [r3, #6]
	Sampled_Parameter_2_Packet._Dynamic_Compliance_Int   = Sampled_Parameter_3.Dynamic_Compliance_int;
 800fcbc:	4b10      	ldr	r3, [pc, #64]	; (800fd00 <Sampled_Parameter_List_2_Transmit+0x84>)
 800fcbe:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fcc2:	4b0d      	ldr	r3, [pc, #52]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fcc4:	71da      	strb	r2, [r3, #7]
	Sampled_Parameter_2_Packet._Dynamic_Compliance_Float = Sampled_Parameter_3.Dynamic_Compliance_float;
 800fcc6:	4b0e      	ldr	r3, [pc, #56]	; (800fd00 <Sampled_Parameter_List_2_Transmit+0x84>)
 800fcc8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fccc:	4b0a      	ldr	r3, [pc, #40]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fcce:	721a      	strb	r2, [r3, #8]

	Sampled_Parameter_2_Packet._CRC8                     = chksum8(&Sampled_Parameter_2_Packet._Minite_Volume_int,(6));
 800fcd0:	2106      	movs	r1, #6
 800fcd2:	480c      	ldr	r0, [pc, #48]	; (800fd04 <Sampled_Parameter_List_2_Transmit+0x88>)
 800fcd4:	f7f4 fb8e 	bl	80043f4 <chksum8>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	461a      	mov	r2, r3
 800fcdc:	4b06      	ldr	r3, [pc, #24]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fcde:	725a      	strb	r2, [r3, #9]

#ifdef	UART_COMMUNICATION_1
	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&Sampled_Parameter_2_Packet,sizeof(Sampled_Parameter_2_Packet));
 800fce0:	220a      	movs	r2, #10
 800fce2:	4905      	ldr	r1, [pc, #20]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fce4:	4808      	ldr	r0, [pc, #32]	; (800fd08 <Sampled_Parameter_List_2_Transmit+0x8c>)
 800fce6:	f00a fa4c 	bl	801a182 <HAL_UART_Transmit_IT>
#endif
#ifdef	USB_COMMUNICATION_1
	CDC_Transmit_FS((uint8_t*)&Sampled_Parameter_2_Packet,sizeof(Sampled_Parameter_2_Packet));
 800fcea:	210a      	movs	r1, #10
 800fcec:	4802      	ldr	r0, [pc, #8]	; (800fcf8 <Sampled_Parameter_List_2_Transmit+0x7c>)
 800fcee:	f011 fab9 	bl	8021264 <CDC_Transmit_FS>
#endif


}
 800fcf2:	bf00      	nop
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	2001394c 	.word	0x2001394c
 800fcfc:	2001418c 	.word	0x2001418c
 800fd00:	20013c48 	.word	0x20013c48
 800fd04:	2001394f 	.word	0x2001394f
 800fd08:	20014104 	.word	0x20014104

0800fd0c <Sampled_Parameter_List_3_Transmit>:



void Sampled_Parameter_List_3_Transmit()
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	af00      	add	r7, sp, #0
	Sampled_Parameter_3_Packet._header          	     = Send_BlueTooth_Sampled_Parameter_Header ;
 800fd10:	4b1d      	ldr	r3, [pc, #116]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd12:	2200      	movs	r2, #0
 800fd14:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800fd18:	701a      	strb	r2, [r3, #0]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fd20:	705a      	strb	r2, [r3, #1]
	Sampled_Parameter_3_Packet._length                   = (sizeof(Sampled_Parameter_3_Packet)-3)+24 ;
 800fd22:	4b19      	ldr	r3, [pc, #100]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd24:	221f      	movs	r2, #31
 800fd26:	709a      	strb	r2, [r3, #2]

	Sampled_Parameter_3_Packet._RInsp_Int                = Sampled_Parameter_3.Rinsp_int;
 800fd28:	4b18      	ldr	r3, [pc, #96]	; (800fd8c <Sampled_Parameter_List_3_Transmit+0x80>)
 800fd2a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fd2e:	4b16      	ldr	r3, [pc, #88]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd30:	70da      	strb	r2, [r3, #3]
	Sampled_Parameter_3_Packet._RInsp_Float1             = Sampled_Parameter_3.Rinsp_float_2;
 800fd32:	4b16      	ldr	r3, [pc, #88]	; (800fd8c <Sampled_Parameter_List_3_Transmit+0x80>)
 800fd34:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800fd38:	4b13      	ldr	r3, [pc, #76]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd3a:	711a      	strb	r2, [r3, #4]
	Sampled_Parameter_3_Packet._MAP_int                  = Sampled_Parameter_4.MAP_int;
 800fd3c:	4b14      	ldr	r3, [pc, #80]	; (800fd90 <Sampled_Parameter_List_3_Transmit+0x84>)
 800fd3e:	7a1a      	ldrb	r2, [r3, #8]
 800fd40:	4b11      	ldr	r3, [pc, #68]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd42:	715a      	strb	r2, [r3, #5]
	Sampled_Parameter_3_Packet._MAP_float                = Sampled_Parameter_4.MAP_float;
 800fd44:	4b12      	ldr	r3, [pc, #72]	; (800fd90 <Sampled_Parameter_List_3_Transmit+0x84>)
 800fd46:	7a5a      	ldrb	r2, [r3, #9]
 800fd48:	4b0f      	ldr	r3, [pc, #60]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd4a:	719a      	strb	r2, [r3, #6]
	Sampled_Parameter_3_Packet._VTE_Val                  = Sampled_Parameter_1.Volume_Max_Exp ;
 800fd4c:	4b11      	ldr	r3, [pc, #68]	; (800fd94 <Sampled_Parameter_List_3_Transmit+0x88>)
 800fd4e:	edd3 7a02 	vldr	s15, [r3, #8]
 800fd52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd56:	ee17 3a90 	vmov	r3, s15
 800fd5a:	b21a      	sxth	r2, r3
 800fd5c:	4b0a      	ldr	r3, [pc, #40]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd5e:	f8a3 2007 	strh.w	r2, [r3, #7]

	Sampled_Parameter_3_Packet._CRC8                     = chksum8(&Sampled_Parameter_3_Packet._RInsp_Int,(6));
 800fd62:	2106      	movs	r1, #6
 800fd64:	480c      	ldr	r0, [pc, #48]	; (800fd98 <Sampled_Parameter_List_3_Transmit+0x8c>)
 800fd66:	f7f4 fb45 	bl	80043f4 <chksum8>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	4b06      	ldr	r3, [pc, #24]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd70:	725a      	strb	r2, [r3, #9]

#ifdef	UART_COMMUNICATION_1
	 HAL_UART_Transmit_IT(&huart6,(uint8_t*)&Sampled_Parameter_3_Packet,sizeof(Sampled_Parameter_3_Packet));
 800fd72:	220a      	movs	r2, #10
 800fd74:	4904      	ldr	r1, [pc, #16]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd76:	4809      	ldr	r0, [pc, #36]	; (800fd9c <Sampled_Parameter_List_3_Transmit+0x90>)
 800fd78:	f00a fa03 	bl	801a182 <HAL_UART_Transmit_IT>
#endif
#ifdef	USB_COMMUNICATION_1
	 CDC_Transmit_FS((uint8_t*)&Sampled_Parameter_3_Packet,sizeof(Sampled_Parameter_3_Packet));
 800fd7c:	210a      	movs	r1, #10
 800fd7e:	4802      	ldr	r0, [pc, #8]	; (800fd88 <Sampled_Parameter_List_3_Transmit+0x7c>)
 800fd80:	f011 fa70 	bl	8021264 <CDC_Transmit_FS>
#endif


}
 800fd84:	bf00      	nop
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	20013bbc 	.word	0x20013bbc
 800fd8c:	20013c48 	.word	0x20013c48
 800fd90:	20013ef8 	.word	0x20013ef8
 800fd94:	200142e4 	.word	0x200142e4
 800fd98:	20013bbf 	.word	0x20013bbf
 800fd9c:	20014104 	.word	0x20014104

0800fda0 <Sampled_Parameter_List_4_Transmit>:




void Sampled_Parameter_List_4_Transmit()
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	af00      	add	r7, sp, #0
	Sampled_Parameter_4_Packet._header          	     = Send_BlueTooth_Sampled_Parameter_Header ;
 800fda4:	4b1a      	ldr	r3, [pc, #104]	; (800fe10 <Sampled_Parameter_List_4_Transmit+0x70>)
 800fda6:	2200      	movs	r2, #0
 800fda8:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800fdac:	701a      	strb	r2, [r3, #0]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fdb4:	705a      	strb	r2, [r3, #1]
	Sampled_Parameter_4_Packet._length                   = (sizeof(Sampled_Parameter_4_Packet)-3)+32 ;
 800fdb6:	4b16      	ldr	r3, [pc, #88]	; (800fe10 <Sampled_Parameter_List_4_Transmit+0x70>)
 800fdb8:	2227      	movs	r2, #39	; 0x27
 800fdba:	709a      	strb	r2, [r3, #2]


	Sampled_Parameter_4_Packet._PIF_Val                  = Sampled_Parameter_1.MAX_Flow ;
 800fdbc:	4b15      	ldr	r3, [pc, #84]	; (800fe14 <Sampled_Parameter_List_4_Transmit+0x74>)
 800fdbe:	7b1a      	ldrb	r2, [r3, #12]
 800fdc0:	4b13      	ldr	r3, [pc, #76]	; (800fe10 <Sampled_Parameter_List_4_Transmit+0x70>)
 800fdc2:	70da      	strb	r2, [r3, #3]
	Sampled_Parameter_4_Packet._PEF_Val                  = Sampled_Parameter_1.MIN_Flow ;
 800fdc4:	4b13      	ldr	r3, [pc, #76]	; (800fe14 <Sampled_Parameter_List_4_Transmit+0x74>)
 800fdc6:	7b5a      	ldrb	r2, [r3, #13]
 800fdc8:	4b11      	ldr	r3, [pc, #68]	; (800fe10 <Sampled_Parameter_List_4_Transmit+0x70>)
 800fdca:	711a      	strb	r2, [r3, #4]
	Sampled_Parameter_4_Packet._I_time_Achieved          = RR_I_TIME_ACHIEVED;
 800fdcc:	4b12      	ldr	r3, [pc, #72]	; (800fe18 <Sampled_Parameter_List_4_Transmit+0x78>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	4b0f      	ldr	r3, [pc, #60]	; (800fe10 <Sampled_Parameter_List_4_Transmit+0x70>)
 800fdd4:	f8a3 2005 	strh.w	r2, [r3, #5]
	Sampled_Parameter_4_Packet._E_time_Achieved          = RR_E_TIME_ACHIEVED;
 800fdd8:	4b10      	ldr	r3, [pc, #64]	; (800fe1c <Sampled_Parameter_List_4_Transmit+0x7c>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	4b0c      	ldr	r3, [pc, #48]	; (800fe10 <Sampled_Parameter_List_4_Transmit+0x70>)
 800fde0:	f8a3 2007 	strh.w	r2, [r3, #7]
	Sampled_Parameter_4_Packet._CRC8                     = chksum8(&Sampled_Parameter_4_Packet._PIF_Val,(6));
 800fde4:	2106      	movs	r1, #6
 800fde6:	480e      	ldr	r0, [pc, #56]	; (800fe20 <Sampled_Parameter_List_4_Transmit+0x80>)
 800fde8:	f7f4 fb04 	bl	80043f4 <chksum8>
 800fdec:	4603      	mov	r3, r0
 800fdee:	461a      	mov	r2, r3
 800fdf0:	4b07      	ldr	r3, [pc, #28]	; (800fe10 <Sampled_Parameter_List_4_Transmit+0x70>)
 800fdf2:	725a      	strb	r2, [r3, #9]

#ifdef	UART_COMMUNICATION_1
	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&Sampled_Parameter_4_Packet,sizeof(Sampled_Parameter_4_Packet));
 800fdf4:	220a      	movs	r2, #10
 800fdf6:	4906      	ldr	r1, [pc, #24]	; (800fe10 <Sampled_Parameter_List_4_Transmit+0x70>)
 800fdf8:	480a      	ldr	r0, [pc, #40]	; (800fe24 <Sampled_Parameter_List_4_Transmit+0x84>)
 800fdfa:	f00a f9c2 	bl	801a182 <HAL_UART_Transmit_IT>
#endif
#ifdef	USB_COMMUNICATION_1
	CDC_Transmit_FS((uint8_t*)&Sampled_Parameter_4_Packet,sizeof(Sampled_Parameter_4_Packet));
 800fdfe:	210a      	movs	r1, #10
 800fe00:	4803      	ldr	r0, [pc, #12]	; (800fe10 <Sampled_Parameter_List_4_Transmit+0x70>)
 800fe02:	f011 fa2f 	bl	8021264 <CDC_Transmit_FS>
#endif

	Reset_Flag_Func();
 800fe06:	f000 f8e7 	bl	800ffd8 <Reset_Flag_Func>

}
 800fe0a:	bf00      	nop
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	20014178 	.word	0x20014178
 800fe14:	200142e4 	.word	0x200142e4
 800fe18:	200001c8 	.word	0x200001c8
 800fe1c:	200001c4 	.word	0x200001c4
 800fe20:	2001417b 	.word	0x2001417b
 800fe24:	20014104 	.word	0x20014104

0800fe28 <Sampled_Parameter_List_5_Transmit>:



void Sampled_Parameter_List_5_Transmit()
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	af00      	add	r7, sp, #0
	Sampled_Parameter_5_Packet._header          	     = Send_BlueTooth_Sampled_Parameter_Header ;
 800fe2c:	4b1b      	ldr	r3, [pc, #108]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800fe34:	701a      	strb	r2, [r3, #0]
 800fe36:	2200      	movs	r2, #0
 800fe38:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fe3c:	705a      	strb	r2, [r3, #1]
	Sampled_Parameter_5_Packet._length                   = (sizeof(Sampled_Parameter_5_Packet)-3)+40 ;
 800fe3e:	4b17      	ldr	r3, [pc, #92]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe40:	222f      	movs	r2, #47	; 0x2f
 800fe42:	709a      	strb	r2, [r3, #2]
	Sampled_Parameter_5_Packet._Plauteu_Pressure         = Sampled_Parameter_3.Plateau_Pressure;
 800fe44:	4b16      	ldr	r3, [pc, #88]	; (800fea0 <Sampled_Parameter_List_5_Transmit+0x78>)
 800fe46:	785a      	ldrb	r2, [r3, #1]
 800fe48:	4b14      	ldr	r3, [pc, #80]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe4a:	70da      	strb	r2, [r3, #3]
	Sampled_Parameter_5_Packet._I_Ratio_int              = Sampled_Parameter_4.I_Ratio_int;
 800fe4c:	4b15      	ldr	r3, [pc, #84]	; (800fea4 <Sampled_Parameter_List_5_Transmit+0x7c>)
 800fe4e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fe52:	4b12      	ldr	r3, [pc, #72]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe54:	711a      	strb	r2, [r3, #4]
	Sampled_Parameter_5_Packet._I_Ratio_float            = Sampled_Parameter_4.I_Ratio_float;
 800fe56:	4b13      	ldr	r3, [pc, #76]	; (800fea4 <Sampled_Parameter_List_5_Transmit+0x7c>)
 800fe58:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fe5c:	4b0f      	ldr	r3, [pc, #60]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe5e:	715a      	strb	r2, [r3, #5]
	Sampled_Parameter_5_Packet._E_Ratio_int              = Sampled_Parameter_4.E_Ratio_int;
 800fe60:	4b10      	ldr	r3, [pc, #64]	; (800fea4 <Sampled_Parameter_List_5_Transmit+0x7c>)
 800fe62:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fe66:	4b0d      	ldr	r3, [pc, #52]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe68:	719a      	strb	r2, [r3, #6]
	Sampled_Parameter_5_Packet._E_Ratio_float            = Sampled_Parameter_4.E_Ratio_float;
 800fe6a:	4b0e      	ldr	r3, [pc, #56]	; (800fea4 <Sampled_Parameter_List_5_Transmit+0x7c>)
 800fe6c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fe70:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe72:	71da      	strb	r2, [r3, #7]
	Sampled_Parameter_5_Packet._CRC8                     = chksum8(&Sampled_Parameter_5_Packet._Plauteu_Pressure,(6));
 800fe74:	2106      	movs	r1, #6
 800fe76:	480c      	ldr	r0, [pc, #48]	; (800fea8 <Sampled_Parameter_List_5_Transmit+0x80>)
 800fe78:	f7f4 fabc 	bl	80043f4 <chksum8>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	461a      	mov	r2, r3
 800fe80:	4b06      	ldr	r3, [pc, #24]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe82:	725a      	strb	r2, [r3, #9]

#ifdef	UART_COMMUNICATION_1
	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&Sampled_Parameter_5_Packet,sizeof(Sampled_Parameter_5_Packet));
 800fe84:	220a      	movs	r2, #10
 800fe86:	4905      	ldr	r1, [pc, #20]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe88:	4808      	ldr	r0, [pc, #32]	; (800feac <Sampled_Parameter_List_5_Transmit+0x84>)
 800fe8a:	f00a f97a 	bl	801a182 <HAL_UART_Transmit_IT>
#endif
#ifdef	USB_COMMUNICATION_1
	CDC_Transmit_FS((uint8_t*)&Sampled_Parameter_5_Packet,sizeof(Sampled_Parameter_5_Packet));
 800fe8e:	210a      	movs	r1, #10
 800fe90:	4802      	ldr	r0, [pc, #8]	; (800fe9c <Sampled_Parameter_List_5_Transmit+0x74>)
 800fe92:	f011 f9e7 	bl	8021264 <CDC_Transmit_FS>
#endif



}
 800fe96:	bf00      	nop
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	20013af8 	.word	0x20013af8
 800fea0:	20013c48 	.word	0x20013c48
 800fea4:	20013ef8 	.word	0x20013ef8
 800fea8:	20013afb 	.word	0x20013afb
 800feac:	20014104 	.word	0x20014104

0800feb0 <Sampled_Parameter_Func_1>:
void Sampled_Parameter_Func_1()
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	af00      	add	r7, sp, #0
	Average_PIP_Func();
 800feb4:	f000 f816 	bl	800fee4 <Average_PIP_Func>
	Average_PEEP_Func();
 800feb8:	f000 f82e 	bl	800ff18 <Average_PEEP_Func>
	Volume_Max_Inspiration_Func();
 800febc:	f000 f83c 	bl	800ff38 <Volume_Max_Inspiration_Func>
	Volume_Max_Expiration_Func();
 800fec0:	f000 f84e 	bl	800ff60 <Volume_Max_Expiration_Func>
	Peak_Flow_Inspiration_Func();
 800fec4:	f000 f866 	bl	800ff94 <Peak_Flow_Inspiration_Func>
	Peak_Flow_Expiration_Func();
 800fec8:	f000 f874 	bl	800ffb4 <Peak_Flow_Expiration_Func>
	Max_Flow = 0;
 800fecc:	4b03      	ldr	r3, [pc, #12]	; (800fedc <Sampled_Parameter_Func_1+0x2c>)
 800fece:	2200      	movs	r2, #0
 800fed0:	601a      	str	r2, [r3, #0]
	Min_Flow = 0;
 800fed2:	4b03      	ldr	r3, [pc, #12]	; (800fee0 <Sampled_Parameter_Func_1+0x30>)
 800fed4:	2200      	movs	r2, #0
 800fed6:	601a      	str	r2, [r3, #0]
}
 800fed8:	bf00      	nop
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	20014064 	.word	0x20014064
 800fee0:	20014090 	.word	0x20014090

0800fee4 <Average_PIP_Func>:


void Average_PIP_Func()
{
 800fee4:	b480      	push	{r7}
 800fee6:	af00      	add	r7, sp, #0
	if(Common_Mode_Parameter._RESPIRATORY_RATE_Val > 30 )
 800fee8:	4b08      	ldr	r3, [pc, #32]	; (800ff0c <Average_PIP_Func+0x28>)
 800feea:	789b      	ldrb	r3, [r3, #2]
 800feec:	2b1e      	cmp	r3, #30
 800feee:	d904      	bls.n	800fefa <Average_PIP_Func+0x16>
	{
		Sampled_Parameter_1.Average_PIP  = PIP_Average_Parameter.Maximum_PIP_Acheived;
 800fef0:	4b07      	ldr	r3, [pc, #28]	; (800ff10 <Average_PIP_Func+0x2c>)
 800fef2:	781a      	ldrb	r2, [r3, #0]
 800fef4:	4b07      	ldr	r3, [pc, #28]	; (800ff14 <Average_PIP_Func+0x30>)
 800fef6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Sampled_Parameter_1.Average_PIP  = PIP_Average_Parameter.PIP_AVG_VAL ;
	}
}
 800fef8:	e003      	b.n	800ff02 <Average_PIP_Func+0x1e>
		Sampled_Parameter_1.Average_PIP  = PIP_Average_Parameter.PIP_AVG_VAL ;
 800fefa:	4b05      	ldr	r3, [pc, #20]	; (800ff10 <Average_PIP_Func+0x2c>)
 800fefc:	7b1a      	ldrb	r2, [r3, #12]
 800fefe:	4b05      	ldr	r3, [pc, #20]	; (800ff14 <Average_PIP_Func+0x30>)
 800ff00:	701a      	strb	r2, [r3, #0]
}
 800ff02:	bf00      	nop
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr
 800ff0c:	20013ba4 	.word	0x20013ba4
 800ff10:	20013b70 	.word	0x20013b70
 800ff14:	200142e4 	.word	0x200142e4

0800ff18 <Average_PEEP_Func>:


void Average_PEEP_Func()
{
 800ff18:	b480      	push	{r7}
 800ff1a:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.Average_PEEP = PEEP_Maintain_Parameter.PEEP_AVG_VAL;
 800ff1c:	4b04      	ldr	r3, [pc, #16]	; (800ff30 <Average_PEEP_Func+0x18>)
 800ff1e:	7c1a      	ldrb	r2, [r3, #16]
 800ff20:	4b04      	ldr	r3, [pc, #16]	; (800ff34 <Average_PEEP_Func+0x1c>)
 800ff22:	705a      	strb	r2, [r3, #1]
}
 800ff24:	bf00      	nop
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	20014300 	.word	0x20014300
 800ff34:	200142e4 	.word	0x200142e4

0800ff38 <Volume_Max_Inspiration_Func>:


void Volume_Max_Inspiration_Func()
{
 800ff38:	b480      	push	{r7}
 800ff3a:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.Volume_Max_Insp = vol.Volume_max;
 800ff3c:	4b06      	ldr	r3, [pc, #24]	; (800ff58 <Volume_Max_Inspiration_Func+0x20>)
 800ff3e:	689b      	ldr	r3, [r3, #8]
 800ff40:	ee07 3a90 	vmov	s15, r3
 800ff44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff48:	4b04      	ldr	r3, [pc, #16]	; (800ff5c <Volume_Max_Inspiration_Func+0x24>)
 800ff4a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800ff4e:	bf00      	nop
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr
 800ff58:	200140c8 	.word	0x200140c8
 800ff5c:	200142e4 	.word	0x200142e4

0800ff60 <Volume_Max_Expiration_Func>:

void Volume_Max_Expiration_Func()
{
 800ff60:	b480      	push	{r7}
 800ff62:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.Volume_Max_Exp= (Sampled_Parameter_1.Volume_Max_Insp -( V_Min));
 800ff64:	4b09      	ldr	r3, [pc, #36]	; (800ff8c <Volume_Max_Expiration_Func+0x2c>)
 800ff66:	ed93 7a01 	vldr	s14, [r3, #4]
 800ff6a:	4b09      	ldr	r3, [pc, #36]	; (800ff90 <Volume_Max_Expiration_Func+0x30>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	ee07 3a90 	vmov	s15, r3
 800ff72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff7a:	4b04      	ldr	r3, [pc, #16]	; (800ff8c <Volume_Max_Expiration_Func+0x2c>)
 800ff7c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800ff80:	bf00      	nop
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	200142e4 	.word	0x200142e4
 800ff90:	200001f4 	.word	0x200001f4

0800ff94 <Peak_Flow_Inspiration_Func>:


void Peak_Flow_Inspiration_Func()
{
 800ff94:	b480      	push	{r7}
 800ff96:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.MAX_Flow  = Max_Flow;
 800ff98:	4b04      	ldr	r3, [pc, #16]	; (800ffac <Peak_Flow_Inspiration_Func+0x18>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	b2da      	uxtb	r2, r3
 800ff9e:	4b04      	ldr	r3, [pc, #16]	; (800ffb0 <Peak_Flow_Inspiration_Func+0x1c>)
 800ffa0:	731a      	strb	r2, [r3, #12]
}
 800ffa2:	bf00      	nop
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr
 800ffac:	20014064 	.word	0x20014064
 800ffb0:	200142e4 	.word	0x200142e4

0800ffb4 <Peak_Flow_Expiration_Func>:
void Peak_Flow_Expiration_Func()
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.MIN_Flow  = (Min_Flow) * (-1);
 800ffb8:	4b05      	ldr	r3, [pc, #20]	; (800ffd0 <Peak_Flow_Expiration_Func+0x1c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	425b      	negs	r3, r3
 800ffc0:	b2da      	uxtb	r2, r3
 800ffc2:	4b04      	ldr	r3, [pc, #16]	; (800ffd4 <Peak_Flow_Expiration_Func+0x20>)
 800ffc4:	735a      	strb	r2, [r3, #13]
}
 800ffc6:	bf00      	nop
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr
 800ffd0:	20014090 	.word	0x20014090
 800ffd4:	200142e4 	.word	0x200142e4

0800ffd8 <Reset_Flag_Func>:

void Reset_Flag_Func()
{
 800ffd8:	b480      	push	{r7}
 800ffda:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.Average_PIP       = 0;
 800ffdc:	4b0c      	ldr	r3, [pc, #48]	; (8010010 <Reset_Flag_Func+0x38>)
 800ffde:	2200      	movs	r2, #0
 800ffe0:	701a      	strb	r2, [r3, #0]
	Sampled_Parameter_1.Average_PEEP      = 0;
 800ffe2:	4b0b      	ldr	r3, [pc, #44]	; (8010010 <Reset_Flag_Func+0x38>)
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	705a      	strb	r2, [r3, #1]
	Sampled_Parameter_1.Volume_Max_Insp   = 0;
 800ffe8:	4b09      	ldr	r3, [pc, #36]	; (8010010 <Reset_Flag_Func+0x38>)
 800ffea:	f04f 0200 	mov.w	r2, #0
 800ffee:	605a      	str	r2, [r3, #4]
	Sampled_Parameter_1.Volume_Max_Exp    = 0;
 800fff0:	4b07      	ldr	r3, [pc, #28]	; (8010010 <Reset_Flag_Func+0x38>)
 800fff2:	f04f 0200 	mov.w	r2, #0
 800fff6:	609a      	str	r2, [r3, #8]
	Sampled_Parameter_1.MAX_Flow          = 0;
 800fff8:	4b05      	ldr	r3, [pc, #20]	; (8010010 <Reset_Flag_Func+0x38>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	731a      	strb	r2, [r3, #12]
	Sampled_Parameter_1.MIN_Flow          = 0;
 800fffe:	4b04      	ldr	r3, [pc, #16]	; (8010010 <Reset_Flag_Func+0x38>)
 8010000:	2200      	movs	r2, #0
 8010002:	735a      	strb	r2, [r3, #13]
}
 8010004:	bf00      	nop
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	200142e4 	.word	0x200142e4

08010014 <Sampled_Parameter_Func_2>:



void Sampled_Parameter_Func_2()
{
 8010014:	b580      	push	{r7, lr}
 8010016:	af00      	add	r7, sp, #0
	Minite_Volume_Func();
 8010018:	f000 f808 	bl	801002c <Minite_Volume_Func>
	Acheived_RR_Func();
 801001c:	f000 f868 	bl	80100f0 <Acheived_RR_Func>
	Inspiration_Time_Func();
 8010020:	f000 f876 	bl	8010110 <Inspiration_Time_Func>
	Expiration_Time_Func();
 8010024:	f000 f8c6 	bl	80101b4 <Expiration_Time_Func>
}
 8010028:	bf00      	nop
 801002a:	bd80      	pop	{r7, pc}

0801002c <Minite_Volume_Func>:


void Minite_Volume_Func()
{
 801002c:	b480      	push	{r7}
 801002e:	af00      	add	r7, sp, #0
	if(Breath == 0)
 8010030:	4b2a      	ldr	r3, [pc, #168]	; (80100dc <Minite_Volume_Func+0xb0>)
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d13e      	bne.n	80100b6 <Minite_Volume_Func+0x8a>
	{
		Sampled_Parameter_2.Total_Tidal_Volume_float     = Sampled_Parameter_2.Minite_Volume / 1000;
 8010038:	4b29      	ldr	r3, [pc, #164]	; (80100e0 <Minite_Volume_Func+0xb4>)
 801003a:	ed93 7a00 	vldr	s14, [r3]
 801003e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80100e4 <Minite_Volume_Func+0xb8>
 8010042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010046:	4b26      	ldr	r3, [pc, #152]	; (80100e0 <Minite_Volume_Func+0xb4>)
 8010048:	edc3 7a04 	vstr	s15, [r3, #16]

		Sampled_Parameter_2.Total_Tidal_Volume_Int       = Sampled_Parameter_2.Total_Tidal_Volume_float;
 801004c:	4b24      	ldr	r3, [pc, #144]	; (80100e0 <Minite_Volume_Func+0xb4>)
 801004e:	edd3 7a04 	vldr	s15, [r3, #16]
 8010052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010056:	ee17 2a90 	vmov	r2, s15
 801005a:	4b21      	ldr	r3, [pc, #132]	; (80100e0 <Minite_Volume_Func+0xb4>)
 801005c:	605a      	str	r2, [r3, #4]

		Sampled_Parameter_2.Total_Tidal_Volume_Decimal_1 = Sampled_Parameter_2.Total_Tidal_Volume_float - Sampled_Parameter_2.Total_Tidal_Volume_Int;
 801005e:	4b20      	ldr	r3, [pc, #128]	; (80100e0 <Minite_Volume_Func+0xb4>)
 8010060:	ed93 7a04 	vldr	s14, [r3, #16]
 8010064:	4b1e      	ldr	r3, [pc, #120]	; (80100e0 <Minite_Volume_Func+0xb4>)
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	ee07 3a90 	vmov	s15, r3
 801006c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010074:	4b1a      	ldr	r3, [pc, #104]	; (80100e0 <Minite_Volume_Func+0xb4>)
 8010076:	edc3 7a02 	vstr	s15, [r3, #8]

		Sampled_Parameter_2.Total_Tidal_Volume_Decimal_1 = Sampled_Parameter_2.Total_Tidal_Volume_Decimal_1 * 1000;
 801007a:	4b19      	ldr	r3, [pc, #100]	; (80100e0 <Minite_Volume_Func+0xb4>)
 801007c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010080:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80100e4 <Minite_Volume_Func+0xb8>
 8010084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010088:	4b15      	ldr	r3, [pc, #84]	; (80100e0 <Minite_Volume_Func+0xb4>)
 801008a:	edc3 7a02 	vstr	s15, [r3, #8]

		Sampled_Parameter_2.Total_Tidal_Volume_Decimal   = (int)Sampled_Parameter_2.Total_Tidal_Volume_Decimal_1 / 10;
 801008e:	4b14      	ldr	r3, [pc, #80]	; (80100e0 <Minite_Volume_Func+0xb4>)
 8010090:	edd3 7a02 	vldr	s15, [r3, #8]
 8010094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010098:	ee17 1a90 	vmov	r1, s15
 801009c:	4b12      	ldr	r3, [pc, #72]	; (80100e8 <Minite_Volume_Func+0xbc>)
 801009e:	fb83 2301 	smull	r2, r3, r3, r1
 80100a2:	109a      	asrs	r2, r3, #2
 80100a4:	17cb      	asrs	r3, r1, #31
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	4a0d      	ldr	r2, [pc, #52]	; (80100e0 <Minite_Volume_Func+0xb4>)
 80100aa:	60d3      	str	r3, [r2, #12]

		Sampled_Parameter_2.Minite_Volume=0;
 80100ac:	4b0c      	ldr	r3, [pc, #48]	; (80100e0 <Minite_Volume_Func+0xb4>)
 80100ae:	f04f 0200 	mov.w	r2, #0
 80100b2:	601a      	str	r2, [r3, #0]
	else
	{
		Sampled_Parameter_2.Minite_Volume +=vol.Volume_max;
	}

}
 80100b4:	e00d      	b.n	80100d2 <Minite_Volume_Func+0xa6>
		Sampled_Parameter_2.Minite_Volume +=vol.Volume_max;
 80100b6:	4b0a      	ldr	r3, [pc, #40]	; (80100e0 <Minite_Volume_Func+0xb4>)
 80100b8:	ed93 7a00 	vldr	s14, [r3]
 80100bc:	4b0b      	ldr	r3, [pc, #44]	; (80100ec <Minite_Volume_Func+0xc0>)
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	ee07 3a90 	vmov	s15, r3
 80100c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100cc:	4b04      	ldr	r3, [pc, #16]	; (80100e0 <Minite_Volume_Func+0xb4>)
 80100ce:	edc3 7a00 	vstr	s15, [r3]
}
 80100d2:	bf00      	nop
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr
 80100dc:	20014069 	.word	0x20014069
 80100e0:	2001418c 	.word	0x2001418c
 80100e4:	447a0000 	.word	0x447a0000
 80100e8:	66666667 	.word	0x66666667
 80100ec:	200140c8 	.word	0x200140c8

080100f0 <Acheived_RR_Func>:

void Acheived_RR_Func()
{
 80100f0:	b480      	push	{r7}
 80100f2:	af00      	add	r7, sp, #0
	Sampled_Parameter_2.Acheived_RR = Breath_In_Minite;
 80100f4:	4b04      	ldr	r3, [pc, #16]	; (8010108 <Acheived_RR_Func+0x18>)
 80100f6:	781a      	ldrb	r2, [r3, #0]
 80100f8:	4b04      	ldr	r3, [pc, #16]	; (801010c <Acheived_RR_Func+0x1c>)
 80100fa:	751a      	strb	r2, [r3, #20]
}
 80100fc:	bf00      	nop
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	20013f98 	.word	0x20013f98
 801010c:	2001418c 	.word	0x2001418c

08010110 <Inspiration_Time_Func>:


void Inspiration_Time_Func()
{
 8010110:	b480      	push	{r7}
 8010112:	af00      	add	r7, sp, #0
	Sampled_Parameter_2.Acheived_I_Time           = RR_I_TIME_ACHIEVED;
 8010114:	4b23      	ldr	r3, [pc, #140]	; (80101a4 <Inspiration_Time_Func+0x94>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	b29a      	uxth	r2, r3
 801011a:	4b23      	ldr	r3, [pc, #140]	; (80101a8 <Inspiration_Time_Func+0x98>)
 801011c:	82da      	strh	r2, [r3, #22]


	Sampled_Parameter_2.Acheived_I_Time_float     = (float)Sampled_Parameter_2.Acheived_I_Time/1000;
 801011e:	4b22      	ldr	r3, [pc, #136]	; (80101a8 <Inspiration_Time_Func+0x98>)
 8010120:	8adb      	ldrh	r3, [r3, #22]
 8010122:	ee07 3a90 	vmov	s15, r3
 8010126:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801012a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80101ac <Inspiration_Time_Func+0x9c>
 801012e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010132:	4b1d      	ldr	r3, [pc, #116]	; (80101a8 <Inspiration_Time_Func+0x98>)
 8010134:	edc3 7a07 	vstr	s15, [r3, #28]
	Sampled_Parameter_2.Acheived_I_Time_int       = Sampled_Parameter_2.Acheived_I_Time_float;
 8010138:	4b1b      	ldr	r3, [pc, #108]	; (80101a8 <Inspiration_Time_Func+0x98>)
 801013a:	edd3 7a07 	vldr	s15, [r3, #28]
 801013e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010142:	ee17 2a90 	vmov	r2, s15
 8010146:	4b18      	ldr	r3, [pc, #96]	; (80101a8 <Inspiration_Time_Func+0x98>)
 8010148:	625a      	str	r2, [r3, #36]	; 0x24
	Sampled_Parameter_2.Acheived_I_Time_Decimal_1 = Sampled_Parameter_2.Acheived_I_Time_float - Sampled_Parameter_2.Acheived_I_Time_int;
 801014a:	4b17      	ldr	r3, [pc, #92]	; (80101a8 <Inspiration_Time_Func+0x98>)
 801014c:	ed93 7a07 	vldr	s14, [r3, #28]
 8010150:	4b15      	ldr	r3, [pc, #84]	; (80101a8 <Inspiration_Time_Func+0x98>)
 8010152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010154:	ee07 3a90 	vmov	s15, r3
 8010158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801015c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010160:	4b11      	ldr	r3, [pc, #68]	; (80101a8 <Inspiration_Time_Func+0x98>)
 8010162:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	Sampled_Parameter_2.Acheived_I_Time_Decimal_1 = Sampled_Parameter_2.Acheived_I_Time_Decimal_1 * 1000;
 8010166:	4b10      	ldr	r3, [pc, #64]	; (80101a8 <Inspiration_Time_Func+0x98>)
 8010168:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801016c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80101ac <Inspiration_Time_Func+0x9c>
 8010170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010174:	4b0c      	ldr	r3, [pc, #48]	; (80101a8 <Inspiration_Time_Func+0x98>)
 8010176:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	Sampled_Parameter_2.Acheived_I_Time_Decimal   = (int)Sampled_Parameter_2.Acheived_I_Time_Decimal_1/10;
 801017a:	4b0b      	ldr	r3, [pc, #44]	; (80101a8 <Inspiration_Time_Func+0x98>)
 801017c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010184:	ee17 1a90 	vmov	r1, s15
 8010188:	4b09      	ldr	r3, [pc, #36]	; (80101b0 <Inspiration_Time_Func+0xa0>)
 801018a:	fb83 2301 	smull	r2, r3, r3, r1
 801018e:	109a      	asrs	r2, r3, #2
 8010190:	17cb      	asrs	r3, r1, #31
 8010192:	1ad3      	subs	r3, r2, r3
 8010194:	4a04      	ldr	r2, [pc, #16]	; (80101a8 <Inspiration_Time_Func+0x98>)
 8010196:	6393      	str	r3, [r2, #56]	; 0x38
	//Sampled_Parameter_2.Acheived_I_Time_Decimal   = Sampled_Parameter_2.Acheived_I_Time_int;
}
 8010198:	bf00      	nop
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr
 80101a2:	bf00      	nop
 80101a4:	200001c8 	.word	0x200001c8
 80101a8:	2001418c 	.word	0x2001418c
 80101ac:	447a0000 	.word	0x447a0000
 80101b0:	66666667 	.word	0x66666667

080101b4 <Expiration_Time_Func>:

void Expiration_Time_Func()
{
 80101b4:	b480      	push	{r7}
 80101b6:	af00      	add	r7, sp, #0
	Sampled_Parameter_2.Acheived_E_Time           = RR_E_TIME_ACHIEVED;
 80101b8:	4b2c      	ldr	r3, [pc, #176]	; (801026c <Expiration_Time_Func+0xb8>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	b29a      	uxth	r2, r3
 80101be:	4b2c      	ldr	r3, [pc, #176]	; (8010270 <Expiration_Time_Func+0xbc>)
 80101c0:	831a      	strh	r2, [r3, #24]

	if(Sampled_Parameter_2.Acheived_E_Time <1000)
 80101c2:	4b2b      	ldr	r3, [pc, #172]	; (8010270 <Expiration_Time_Func+0xbc>)
 80101c4:	8b1b      	ldrh	r3, [r3, #24]
 80101c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80101ca:	d20d      	bcs.n	80101e8 <Expiration_Time_Func+0x34>
		Sampled_Parameter_2.Acheived_E_Time_float     = (float)Sampled_Parameter_2.Acheived_E_Time/1000;
 80101cc:	4b28      	ldr	r3, [pc, #160]	; (8010270 <Expiration_Time_Func+0xbc>)
 80101ce:	8b1b      	ldrh	r3, [r3, #24]
 80101d0:	ee07 3a90 	vmov	s15, r3
 80101d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80101d8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010274 <Expiration_Time_Func+0xc0>
 80101dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80101e0:	4b23      	ldr	r3, [pc, #140]	; (8010270 <Expiration_Time_Func+0xbc>)
 80101e2:	edc3 7a08 	vstr	s15, [r3, #32]
 80101e6:	e00c      	b.n	8010202 <Expiration_Time_Func+0x4e>
	else
	    Sampled_Parameter_2.Acheived_E_Time_float     = (float)Sampled_Parameter_2.Acheived_E_Time/1000;
 80101e8:	4b21      	ldr	r3, [pc, #132]	; (8010270 <Expiration_Time_Func+0xbc>)
 80101ea:	8b1b      	ldrh	r3, [r3, #24]
 80101ec:	ee07 3a90 	vmov	s15, r3
 80101f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80101f4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8010274 <Expiration_Time_Func+0xc0>
 80101f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80101fc:	4b1c      	ldr	r3, [pc, #112]	; (8010270 <Expiration_Time_Func+0xbc>)
 80101fe:	edc3 7a08 	vstr	s15, [r3, #32]


	Sampled_Parameter_2.Acheived_E_Time_int       = Sampled_Parameter_2.Acheived_E_Time_float;
 8010202:	4b1b      	ldr	r3, [pc, #108]	; (8010270 <Expiration_Time_Func+0xbc>)
 8010204:	edd3 7a08 	vldr	s15, [r3, #32]
 8010208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801020c:	ee17 2a90 	vmov	r2, s15
 8010210:	4b17      	ldr	r3, [pc, #92]	; (8010270 <Expiration_Time_Func+0xbc>)
 8010212:	629a      	str	r2, [r3, #40]	; 0x28
	Sampled_Parameter_2.Acheived_E_Time_Decimal_1 = Sampled_Parameter_2.Acheived_E_Time_float - Sampled_Parameter_2.Acheived_E_Time_int;
 8010214:	4b16      	ldr	r3, [pc, #88]	; (8010270 <Expiration_Time_Func+0xbc>)
 8010216:	ed93 7a08 	vldr	s14, [r3, #32]
 801021a:	4b15      	ldr	r3, [pc, #84]	; (8010270 <Expiration_Time_Func+0xbc>)
 801021c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801021e:	ee07 3a90 	vmov	s15, r3
 8010222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010226:	ee77 7a67 	vsub.f32	s15, s14, s15
 801022a:	4b11      	ldr	r3, [pc, #68]	; (8010270 <Expiration_Time_Func+0xbc>)
 801022c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	Sampled_Parameter_2.Acheived_E_Time_Decimal_1 = Sampled_Parameter_2.Acheived_E_Time_Decimal_1 * 1000;
 8010230:	4b0f      	ldr	r3, [pc, #60]	; (8010270 <Expiration_Time_Func+0xbc>)
 8010232:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8010236:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8010274 <Expiration_Time_Func+0xc0>
 801023a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801023e:	4b0c      	ldr	r3, [pc, #48]	; (8010270 <Expiration_Time_Func+0xbc>)
 8010240:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	Sampled_Parameter_2.Acheived_E_Time_Decimal   = (int)Sampled_Parameter_2.Acheived_E_Time_Decimal_1/10;
 8010244:	4b0a      	ldr	r3, [pc, #40]	; (8010270 <Expiration_Time_Func+0xbc>)
 8010246:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801024a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801024e:	ee17 1a90 	vmov	r1, s15
 8010252:	4b09      	ldr	r3, [pc, #36]	; (8010278 <Expiration_Time_Func+0xc4>)
 8010254:	fb83 2301 	smull	r2, r3, r3, r1
 8010258:	109a      	asrs	r2, r3, #2
 801025a:	17cb      	asrs	r3, r1, #31
 801025c:	1ad3      	subs	r3, r2, r3
 801025e:	4a04      	ldr	r2, [pc, #16]	; (8010270 <Expiration_Time_Func+0xbc>)
 8010260:	6313      	str	r3, [r2, #48]	; 0x30
	//Sampled_Parameter_2.Acheived_E_Time_Decimal   =  Sampled_Parameter_2.Acheived_E_Time_int;

}
 8010262:	bf00      	nop
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr
 801026c:	200001c4 	.word	0x200001c4
 8010270:	2001418c 	.word	0x2001418c
 8010274:	447a0000 	.word	0x447a0000
 8010278:	66666667 	.word	0x66666667

0801027c <Sampled_Parameter_Func_3>:


void Sampled_Parameter_Func_3()
{
 801027c:	b580      	push	{r7, lr}
 801027e:	af00      	add	r7, sp, #0
	Platau_Pressure();
 8010280:	f000 f806 	bl	8010290 <Platau_Pressure>
	Static_and_Dynamic_Compliance();
 8010284:	f000 f828 	bl	80102d8 <Static_and_Dynamic_Compliance>
	Inspiratory_Resistance();
 8010288:	f000 f934 	bl	80104f4 <Inspiratory_Resistance>
}
 801028c:	bf00      	nop
 801028e:	bd80      	pop	{r7, pc}

08010290 <Platau_Pressure>:



void Platau_Pressure()
{
 8010290:	b480      	push	{r7}
 8010292:	af00      	add	r7, sp, #0
	Sampled_Parameter_3.Compliance= (PIP_Average_Parameter.Maximum_PIP_Acheived - PIP_Average_Parameter.PIP_AVG_VAL );
 8010294:	4b0e      	ldr	r3, [pc, #56]	; (80102d0 <Platau_Pressure+0x40>)
 8010296:	781a      	ldrb	r2, [r3, #0]
 8010298:	4b0d      	ldr	r3, [pc, #52]	; (80102d0 <Platau_Pressure+0x40>)
 801029a:	7b1b      	ldrb	r3, [r3, #12]
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	b2da      	uxtb	r2, r3
 80102a0:	4b0c      	ldr	r3, [pc, #48]	; (80102d4 <Platau_Pressure+0x44>)
 80102a2:	701a      	strb	r2, [r3, #0]

	if(Sampled_Parameter_3.Compliance>=2)
 80102a4:	4b0b      	ldr	r3, [pc, #44]	; (80102d4 <Platau_Pressure+0x44>)
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d908      	bls.n	80102be <Platau_Pressure+0x2e>
	{
		Sampled_Parameter_3.Plateau_Pressure = (PIP_Average_Parameter.Maximum_PIP_Acheived - Sampled_Parameter_3.Compliance);
 80102ac:	4b08      	ldr	r3, [pc, #32]	; (80102d0 <Platau_Pressure+0x40>)
 80102ae:	781a      	ldrb	r2, [r3, #0]
 80102b0:	4b08      	ldr	r3, [pc, #32]	; (80102d4 <Platau_Pressure+0x44>)
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	b2da      	uxtb	r2, r3
 80102b8:	4b06      	ldr	r3, [pc, #24]	; (80102d4 <Platau_Pressure+0x44>)
 80102ba:	705a      	strb	r2, [r3, #1]
	}
	else
	{
		Sampled_Parameter_3.Plateau_Pressure = PIP_Average_Parameter.PIP_AVG_VAL;
	}
}
 80102bc:	e003      	b.n	80102c6 <Platau_Pressure+0x36>
		Sampled_Parameter_3.Plateau_Pressure = PIP_Average_Parameter.PIP_AVG_VAL;
 80102be:	4b04      	ldr	r3, [pc, #16]	; (80102d0 <Platau_Pressure+0x40>)
 80102c0:	7b1a      	ldrb	r2, [r3, #12]
 80102c2:	4b04      	ldr	r3, [pc, #16]	; (80102d4 <Platau_Pressure+0x44>)
 80102c4:	705a      	strb	r2, [r3, #1]
}
 80102c6:	bf00      	nop
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr
 80102d0:	20013b70 	.word	0x20013b70
 80102d4:	20013c48 	.word	0x20013c48

080102d8 <Static_and_Dynamic_Compliance>:




void Static_and_Dynamic_Compliance()
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b08c      	sub	sp, #48	; 0x30
 80102dc:	af00      	add	r7, sp, #0
	if(Alert_Check>3)
 80102de:	4b7f      	ldr	r3, [pc, #508]	; (80104dc <Static_and_Dynamic_Compliance+0x204>)
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	2b03      	cmp	r3, #3
 80102e4:	d90e      	bls.n	8010304 <Static_and_Dynamic_Compliance+0x2c>
	{
		Sampled_Parameter_3.Staic_Compliance_int     = 5;
 80102e6:	4b7e      	ldr	r3, [pc, #504]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80102e8:	2205      	movs	r2, #5
 80102ea:	741a      	strb	r2, [r3, #16]
		Sampled_Parameter_3.Staic_Compliance_float   = 0;
 80102ec:	4b7c      	ldr	r3, [pc, #496]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80102ee:	2200      	movs	r2, #0
 80102f0:	745a      	strb	r2, [r3, #17]
		Sampled_Parameter_3.Dynamic_Compliance_int   = 5;
 80102f2:	4b7b      	ldr	r3, [pc, #492]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80102f4:	2205      	movs	r2, #5
 80102f6:	f883 2020 	strb.w	r2, [r3, #32]
		Sampled_Parameter_3.Dynamic_Compliance_float = 0;
 80102fa:	4b79      	ldr	r3, [pc, #484]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				dummy6 =dummy6 * 100;

				Sampled_Parameter_3.Dynamic_Compliance_float = (int)dummy6 ;
	}

}
 8010302:	e0e7      	b.n	80104d4 <Static_and_Dynamic_Compliance+0x1fc>
			if(Sampled_Parameter_3.Compliance>=2)
 8010304:	4b76      	ldr	r3, [pc, #472]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	2b01      	cmp	r3, #1
 801030a:	d94f      	bls.n	80103ac <Static_and_Dynamic_Compliance+0xd4>
				Sampled_Parameter_3.Staic_Compliance = ( (Sampled_Parameter_1.Volume_Max_Insp) / (Sampled_Parameter_3.Plateau_Pressure - PEEP_Maintain_Parameter.PEEP_AVG_VAL) );
 801030c:	4b75      	ldr	r3, [pc, #468]	; (80104e4 <Static_and_Dynamic_Compliance+0x20c>)
 801030e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010312:	4b73      	ldr	r3, [pc, #460]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010314:	785b      	ldrb	r3, [r3, #1]
 8010316:	461a      	mov	r2, r3
 8010318:	4b73      	ldr	r3, [pc, #460]	; (80104e8 <Static_and_Dynamic_Compliance+0x210>)
 801031a:	7c1b      	ldrb	r3, [r3, #16]
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	ee07 3a90 	vmov	s15, r3
 8010322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010326:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801032a:	ee16 0a90 	vmov	r0, s13
 801032e:	f7f0 f8b3 	bl	8000498 <__aeabi_f2d>
 8010332:	4602      	mov	r2, r0
 8010334:	460b      	mov	r3, r1
 8010336:	496a      	ldr	r1, [pc, #424]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010338:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Sampled_Parameter_3.Staic_Compliance_int = (uint8_t)Sampled_Parameter_3.Staic_Compliance;
 801033c:	4b68      	ldr	r3, [pc, #416]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 801033e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010342:	4610      	mov	r0, r2
 8010344:	4619      	mov	r1, r3
 8010346:	f7f0 fbc1 	bl	8000acc <__aeabi_d2uiz>
 801034a:	4603      	mov	r3, r0
 801034c:	b2da      	uxtb	r2, r3
 801034e:	4b64      	ldr	r3, [pc, #400]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010350:	741a      	strb	r2, [r3, #16]
				if( (Sampled_Parameter_3.Staic_Compliance_int < 1) && (Sampled_Parameter_3.Staic_Compliance_int > 250) )
 8010352:	4b63      	ldr	r3, [pc, #396]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010354:	7c1b      	ldrb	r3, [r3, #16]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d106      	bne.n	8010368 <Static_and_Dynamic_Compliance+0x90>
 801035a:	4b61      	ldr	r3, [pc, #388]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 801035c:	7c1b      	ldrb	r3, [r3, #16]
 801035e:	2bfa      	cmp	r3, #250	; 0xfa
 8010360:	d902      	bls.n	8010368 <Static_and_Dynamic_Compliance+0x90>
					Sampled_Parameter_3.Staic_Compliance_int =1;
 8010362:	4b5f      	ldr	r3, [pc, #380]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010364:	2201      	movs	r2, #1
 8010366:	741a      	strb	r2, [r3, #16]
				dummy2 = modf(Sampled_Parameter_3.Staic_Compliance,&dummy);
 8010368:	4b5d      	ldr	r3, [pc, #372]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 801036a:	ed93 7b02 	vldr	d7, [r3, #8]
 801036e:	f107 0308 	add.w	r3, r7, #8
 8010372:	4618      	mov	r0, r3
 8010374:	eeb0 0a47 	vmov.f32	s0, s14
 8010378:	eef0 0a67 	vmov.f32	s1, s15
 801037c:	f011 fc08 	bl	8021b90 <modf>
 8010380:	ed87 0b08 	vstr	d0, [r7, #32]
				dummy2 =dummy2 * 100;
 8010384:	f04f 0200 	mov.w	r2, #0
 8010388:	4b58      	ldr	r3, [pc, #352]	; (80104ec <Static_and_Dynamic_Compliance+0x214>)
 801038a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801038e:	f7f0 f8db 	bl	8000548 <__aeabi_dmul>
 8010392:	4602      	mov	r2, r0
 8010394:	460b      	mov	r3, r1
 8010396:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Sampled_Parameter_3.Staic_Compliance_float = (int)dummy2 ;
 801039a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801039e:	f7f0 fb6d 	bl	8000a7c <__aeabi_d2iz>
 80103a2:	4603      	mov	r3, r0
 80103a4:	b2da      	uxtb	r2, r3
 80103a6:	4b4e      	ldr	r3, [pc, #312]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80103a8:	745a      	strb	r2, [r3, #17]
 80103aa:	e04d      	b.n	8010448 <Static_and_Dynamic_Compliance+0x170>
				Sampled_Parameter_3.Staic_Compliance = ( (Sampled_Parameter_1.Volume_Max_Insp) / (PIP_Average_Parameter.Maximum_PIP_Acheived  - PEEP_Maintain_Parameter.PEEP_AVG_VAL) );
 80103ac:	4b4d      	ldr	r3, [pc, #308]	; (80104e4 <Static_and_Dynamic_Compliance+0x20c>)
 80103ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80103b2:	4b4f      	ldr	r3, [pc, #316]	; (80104f0 <Static_and_Dynamic_Compliance+0x218>)
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	461a      	mov	r2, r3
 80103b8:	4b4b      	ldr	r3, [pc, #300]	; (80104e8 <Static_and_Dynamic_Compliance+0x210>)
 80103ba:	7c1b      	ldrb	r3, [r3, #16]
 80103bc:	1ad3      	subs	r3, r2, r3
 80103be:	ee07 3a90 	vmov	s15, r3
 80103c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80103ca:	ee16 0a90 	vmov	r0, s13
 80103ce:	f7f0 f863 	bl	8000498 <__aeabi_f2d>
 80103d2:	4602      	mov	r2, r0
 80103d4:	460b      	mov	r3, r1
 80103d6:	4942      	ldr	r1, [pc, #264]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80103d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Sampled_Parameter_3.Staic_Compliance_int = (uint8_t)Sampled_Parameter_3.Staic_Compliance;
 80103dc:	4b40      	ldr	r3, [pc, #256]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80103de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80103e2:	4610      	mov	r0, r2
 80103e4:	4619      	mov	r1, r3
 80103e6:	f7f0 fb71 	bl	8000acc <__aeabi_d2uiz>
 80103ea:	4603      	mov	r3, r0
 80103ec:	b2da      	uxtb	r2, r3
 80103ee:	4b3c      	ldr	r3, [pc, #240]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80103f0:	741a      	strb	r2, [r3, #16]
				if( (Sampled_Parameter_3.Staic_Compliance_int < 1) && (Sampled_Parameter_3.Staic_Compliance_int > 250) )
 80103f2:	4b3b      	ldr	r3, [pc, #236]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80103f4:	7c1b      	ldrb	r3, [r3, #16]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d106      	bne.n	8010408 <Static_and_Dynamic_Compliance+0x130>
 80103fa:	4b39      	ldr	r3, [pc, #228]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80103fc:	7c1b      	ldrb	r3, [r3, #16]
 80103fe:	2bfa      	cmp	r3, #250	; 0xfa
 8010400:	d902      	bls.n	8010408 <Static_and_Dynamic_Compliance+0x130>
					Sampled_Parameter_3.Staic_Compliance_int =1;
 8010402:	4b37      	ldr	r3, [pc, #220]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010404:	2201      	movs	r2, #1
 8010406:	741a      	strb	r2, [r3, #16]
				dummy4 = modf(Sampled_Parameter_3.Staic_Compliance,&dummy3);
 8010408:	4b35      	ldr	r3, [pc, #212]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 801040a:	ed93 7b02 	vldr	d7, [r3, #8]
 801040e:	463b      	mov	r3, r7
 8010410:	4618      	mov	r0, r3
 8010412:	eeb0 0a47 	vmov.f32	s0, s14
 8010416:	eef0 0a67 	vmov.f32	s1, s15
 801041a:	f011 fbb9 	bl	8021b90 <modf>
 801041e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
				dummy4 =dummy4 * 100;
 8010422:	f04f 0200 	mov.w	r2, #0
 8010426:	4b31      	ldr	r3, [pc, #196]	; (80104ec <Static_and_Dynamic_Compliance+0x214>)
 8010428:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801042c:	f7f0 f88c 	bl	8000548 <__aeabi_dmul>
 8010430:	4602      	mov	r2, r0
 8010432:	460b      	mov	r3, r1
 8010434:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				Sampled_Parameter_3.Staic_Compliance_float = (int)dummy4 ;
 8010438:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801043c:	f7f0 fb1e 	bl	8000a7c <__aeabi_d2iz>
 8010440:	4603      	mov	r3, r0
 8010442:	b2da      	uxtb	r2, r3
 8010444:	4b26      	ldr	r3, [pc, #152]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010446:	745a      	strb	r2, [r3, #17]
				Sampled_Parameter_3.Dynamic_Compliance = ( (Sampled_Parameter_1.Volume_Max_Insp) / (PIP_Average_Parameter.Maximum_PIP_Acheived - PEEP_Maintain_Parameter.PEEP_AVG_VAL) );
 8010448:	4b26      	ldr	r3, [pc, #152]	; (80104e4 <Static_and_Dynamic_Compliance+0x20c>)
 801044a:	ed93 7a01 	vldr	s14, [r3, #4]
 801044e:	4b28      	ldr	r3, [pc, #160]	; (80104f0 <Static_and_Dynamic_Compliance+0x218>)
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	461a      	mov	r2, r3
 8010454:	4b24      	ldr	r3, [pc, #144]	; (80104e8 <Static_and_Dynamic_Compliance+0x210>)
 8010456:	7c1b      	ldrb	r3, [r3, #16]
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	ee07 3a90 	vmov	s15, r3
 801045e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010462:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010466:	ee16 0a90 	vmov	r0, s13
 801046a:	f7f0 f815 	bl	8000498 <__aeabi_f2d>
 801046e:	4602      	mov	r2, r0
 8010470:	460b      	mov	r3, r1
 8010472:	491b      	ldr	r1, [pc, #108]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010474:	e9c1 2306 	strd	r2, r3, [r1, #24]
				Sampled_Parameter_3.Dynamic_Compliance_int = (uint8_t)Sampled_Parameter_3.Dynamic_Compliance;
 8010478:	4b19      	ldr	r3, [pc, #100]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 801047a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801047e:	4610      	mov	r0, r2
 8010480:	4619      	mov	r1, r3
 8010482:	f7f0 fb23 	bl	8000acc <__aeabi_d2uiz>
 8010486:	4603      	mov	r3, r0
 8010488:	b2da      	uxtb	r2, r3
 801048a:	4b15      	ldr	r3, [pc, #84]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 801048c:	f883 2020 	strb.w	r2, [r3, #32]
				dummy6 = modf(Sampled_Parameter_3.Dynamic_Compliance,&dummy5);
 8010490:	4b13      	ldr	r3, [pc, #76]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 8010492:	ed93 7b06 	vldr	d7, [r3, #24]
 8010496:	f107 0310 	add.w	r3, r7, #16
 801049a:	4618      	mov	r0, r3
 801049c:	eeb0 0a47 	vmov.f32	s0, s14
 80104a0:	eef0 0a67 	vmov.f32	s1, s15
 80104a4:	f011 fb74 	bl	8021b90 <modf>
 80104a8:	ed87 0b06 	vstr	d0, [r7, #24]
				dummy6 =dummy6 * 100;
 80104ac:	f04f 0200 	mov.w	r2, #0
 80104b0:	4b0e      	ldr	r3, [pc, #56]	; (80104ec <Static_and_Dynamic_Compliance+0x214>)
 80104b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80104b6:	f7f0 f847 	bl	8000548 <__aeabi_dmul>
 80104ba:	4602      	mov	r2, r0
 80104bc:	460b      	mov	r3, r1
 80104be:	e9c7 2306 	strd	r2, r3, [r7, #24]
				Sampled_Parameter_3.Dynamic_Compliance_float = (int)dummy6 ;
 80104c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80104c6:	f7f0 fad9 	bl	8000a7c <__aeabi_d2iz>
 80104ca:	4603      	mov	r3, r0
 80104cc:	b2da      	uxtb	r2, r3
 80104ce:	4b04      	ldr	r3, [pc, #16]	; (80104e0 <Static_and_Dynamic_Compliance+0x208>)
 80104d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80104d4:	bf00      	nop
 80104d6:	3730      	adds	r7, #48	; 0x30
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	20014174 	.word	0x20014174
 80104e0:	20013c48 	.word	0x20013c48
 80104e4:	200142e4 	.word	0x200142e4
 80104e8:	20014300 	.word	0x20014300
 80104ec:	40590000 	.word	0x40590000
 80104f0:	20013b70 	.word	0x20013b70

080104f4 <Inspiratory_Resistance>:


void Inspiratory_Resistance()
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b090      	sub	sp, #64	; 0x40
 80104f8:	af00      	add	r7, sp, #0
	if(Sampled_Parameter_3.Compliance>=2)
 80104fa:	4b5e      	ldr	r3, [pc, #376]	; (8010674 <Inspiratory_Resistance+0x180>)
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d95a      	bls.n	80105b8 <Inspiratory_Resistance+0xc4>
	{
		Sampled_Parameter_3.Rinsp = ( (Sampled_Parameter_3.Plateau_Pressure - PEEP_Maintain_Parameter.PEEP_AVG_VAL) / (Sampled_Parameter_1.Volume_Max_Insp));
 8010502:	4b5c      	ldr	r3, [pc, #368]	; (8010674 <Inspiratory_Resistance+0x180>)
 8010504:	785b      	ldrb	r3, [r3, #1]
 8010506:	461a      	mov	r2, r3
 8010508:	4b5b      	ldr	r3, [pc, #364]	; (8010678 <Inspiratory_Resistance+0x184>)
 801050a:	7c1b      	ldrb	r3, [r3, #16]
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	ee07 3a90 	vmov	s15, r3
 8010512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010516:	4b59      	ldr	r3, [pc, #356]	; (801067c <Inspiratory_Resistance+0x188>)
 8010518:	edd3 7a01 	vldr	s15, [r3, #4]
 801051c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010520:	ee16 0a90 	vmov	r0, s13
 8010524:	f7ef ffb8 	bl	8000498 <__aeabi_f2d>
 8010528:	4602      	mov	r2, r0
 801052a:	460b      	mov	r3, r1
 801052c:	4951      	ldr	r1, [pc, #324]	; (8010674 <Inspiratory_Resistance+0x180>)
 801052e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		Sampled_Parameter_3.Rinsp_int = (uint8_t)Sampled_Parameter_3.Rinsp;
 8010532:	4b50      	ldr	r3, [pc, #320]	; (8010674 <Inspiratory_Resistance+0x180>)
 8010534:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8010538:	4610      	mov	r0, r2
 801053a:	4619      	mov	r1, r3
 801053c:	f7f0 fac6 	bl	8000acc <__aeabi_d2uiz>
 8010540:	4603      	mov	r3, r0
 8010542:	b2da      	uxtb	r2, r3
 8010544:	4b4b      	ldr	r3, [pc, #300]	; (8010674 <Inspiratory_Resistance+0x180>)
 8010546:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		double dummy3,dummy4,dummy5,dummy6;

		dummy4 = modf(Sampled_Parameter_3.Rinsp,&dummy3);
 801054a:	4b4a      	ldr	r3, [pc, #296]	; (8010674 <Inspiratory_Resistance+0x180>)
 801054c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8010550:	f107 0308 	add.w	r3, r7, #8
 8010554:	4618      	mov	r0, r3
 8010556:	eeb0 0a47 	vmov.f32	s0, s14
 801055a:	eef0 0a67 	vmov.f32	s1, s15
 801055e:	f011 fb17 	bl	8021b90 <modf>
 8010562:	ed87 0b08 	vstr	d0, [r7, #32]

		dummy5 =dummy4 * 10;
 8010566:	f04f 0200 	mov.w	r2, #0
 801056a:	4b45      	ldr	r3, [pc, #276]	; (8010680 <Inspiratory_Resistance+0x18c>)
 801056c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010570:	f7ef ffea 	bl	8000548 <__aeabi_dmul>
 8010574:	4602      	mov	r2, r0
 8010576:	460b      	mov	r3, r1
 8010578:	e9c7 2306 	strd	r2, r3, [r7, #24]

		Sampled_Parameter_3.Rinsp_float_1 = (int)dummy5;
 801057c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010580:	f7f0 fa7c 	bl	8000a7c <__aeabi_d2iz>
 8010584:	4603      	mov	r3, r0
 8010586:	b2da      	uxtb	r2, r3
 8010588:	4b3a      	ldr	r3, [pc, #232]	; (8010674 <Inspiratory_Resistance+0x180>)
 801058a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		dummy6 =dummy4 * 100;
 801058e:	f04f 0200 	mov.w	r2, #0
 8010592:	4b3c      	ldr	r3, [pc, #240]	; (8010684 <Inspiratory_Resistance+0x190>)
 8010594:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010598:	f7ef ffd6 	bl	8000548 <__aeabi_dmul>
 801059c:	4602      	mov	r2, r0
 801059e:	460b      	mov	r3, r1
 80105a0:	e9c7 2304 	strd	r2, r3, [r7, #16]

		Sampled_Parameter_3.Rinsp_float_2 = (int)dummy6;
 80105a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80105a8:	f7f0 fa68 	bl	8000a7c <__aeabi_d2iz>
 80105ac:	4603      	mov	r3, r0
 80105ae:	b2da      	uxtb	r2, r3
 80105b0:	4b30      	ldr	r3, [pc, #192]	; (8010674 <Inspiratory_Resistance+0x180>)
 80105b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

		dummy6 =dummy4 * 100;

		Sampled_Parameter_3.Rinsp_float_2 = (int)dummy6;
	}
}
 80105b6:	e058      	b.n	801066a <Inspiratory_Resistance+0x176>
		Sampled_Parameter_3.Rinsp = (  (PIP_Average_Parameter.Maximum_PIP_Acheived  - PEEP_Maintain_Parameter.PEEP_AVG_VAL)  / (Sampled_Parameter_1.Volume_Max_Insp) );
 80105b8:	4b33      	ldr	r3, [pc, #204]	; (8010688 <Inspiratory_Resistance+0x194>)
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	461a      	mov	r2, r3
 80105be:	4b2e      	ldr	r3, [pc, #184]	; (8010678 <Inspiratory_Resistance+0x184>)
 80105c0:	7c1b      	ldrb	r3, [r3, #16]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	ee07 3a90 	vmov	s15, r3
 80105c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80105cc:	4b2b      	ldr	r3, [pc, #172]	; (801067c <Inspiratory_Resistance+0x188>)
 80105ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80105d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80105d6:	ee16 0a90 	vmov	r0, s13
 80105da:	f7ef ff5d 	bl	8000498 <__aeabi_f2d>
 80105de:	4602      	mov	r2, r0
 80105e0:	460b      	mov	r3, r1
 80105e2:	4924      	ldr	r1, [pc, #144]	; (8010674 <Inspiratory_Resistance+0x180>)
 80105e4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		Sampled_Parameter_3.Rinsp_int = (uint8_t)Sampled_Parameter_3.Rinsp;
 80105e8:	4b22      	ldr	r3, [pc, #136]	; (8010674 <Inspiratory_Resistance+0x180>)
 80105ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80105ee:	4610      	mov	r0, r2
 80105f0:	4619      	mov	r1, r3
 80105f2:	f7f0 fa6b 	bl	8000acc <__aeabi_d2uiz>
 80105f6:	4603      	mov	r3, r0
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	4b1e      	ldr	r3, [pc, #120]	; (8010674 <Inspiratory_Resistance+0x180>)
 80105fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		dummy4 = modf(Sampled_Parameter_3.Rinsp,&dummy3);
 8010600:	4b1c      	ldr	r3, [pc, #112]	; (8010674 <Inspiratory_Resistance+0x180>)
 8010602:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8010606:	463b      	mov	r3, r7
 8010608:	4618      	mov	r0, r3
 801060a:	eeb0 0a47 	vmov.f32	s0, s14
 801060e:	eef0 0a67 	vmov.f32	s1, s15
 8010612:	f011 fabd 	bl	8021b90 <modf>
 8010616:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
		dummy5 =dummy4 * 10;
 801061a:	f04f 0200 	mov.w	r2, #0
 801061e:	4b18      	ldr	r3, [pc, #96]	; (8010680 <Inspiratory_Resistance+0x18c>)
 8010620:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010624:	f7ef ff90 	bl	8000548 <__aeabi_dmul>
 8010628:	4602      	mov	r2, r0
 801062a:	460b      	mov	r3, r1
 801062c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Sampled_Parameter_3.Rinsp_float_1 = (int)dummy5;
 8010630:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8010634:	f7f0 fa22 	bl	8000a7c <__aeabi_d2iz>
 8010638:	4603      	mov	r3, r0
 801063a:	b2da      	uxtb	r2, r3
 801063c:	4b0d      	ldr	r3, [pc, #52]	; (8010674 <Inspiratory_Resistance+0x180>)
 801063e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		dummy6 =dummy4 * 100;
 8010642:	f04f 0200 	mov.w	r2, #0
 8010646:	4b0f      	ldr	r3, [pc, #60]	; (8010684 <Inspiratory_Resistance+0x190>)
 8010648:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801064c:	f7ef ff7c 	bl	8000548 <__aeabi_dmul>
 8010650:	4602      	mov	r2, r0
 8010652:	460b      	mov	r3, r1
 8010654:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		Sampled_Parameter_3.Rinsp_float_2 = (int)dummy6;
 8010658:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801065c:	f7f0 fa0e 	bl	8000a7c <__aeabi_d2iz>
 8010660:	4603      	mov	r3, r0
 8010662:	b2da      	uxtb	r2, r3
 8010664:	4b03      	ldr	r3, [pc, #12]	; (8010674 <Inspiratory_Resistance+0x180>)
 8010666:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 801066a:	bf00      	nop
 801066c:	3740      	adds	r7, #64	; 0x40
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	20013c48 	.word	0x20013c48
 8010678:	20014300 	.word	0x20014300
 801067c:	200142e4 	.word	0x200142e4
 8010680:	40240000 	.word	0x40240000
 8010684:	40590000 	.word	0x40590000
 8010688:	20013b70 	.word	0x20013b70

0801068c <Sampled_Parameter_Func_4>:

void Sampled_Parameter_Func_4()
{
 801068c:	b580      	push	{r7, lr}
 801068e:	af00      	add	r7, sp, #0
	Mean_Airway_Pressure();
 8010690:	f000 f804 	bl	801069c <Mean_Airway_Pressure>
	I_and_E_Ratio_Func();
 8010694:	f000 f86a 	bl	801076c <I_and_E_Ratio_Func>
}
 8010698:	bf00      	nop
 801069a:	bd80      	pop	{r7, pc}

0801069c <Mean_Airway_Pressure>:



void Mean_Airway_Pressure()
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
	Sampled_Parameter_4.MAP = ( ( (Sampled_Parameter_2.Acheived_I_Time_float * Sampled_Parameter_1.Average_PIP) ) +  ( (Sampled_Parameter_2.Acheived_E_Time_float   * PEEP_Maintain_Parameter.PEEP_AVG_VAL )) ) / ( Sampled_Parameter_2.Acheived_I_Time_float + Sampled_Parameter_2.Acheived_E_Time_float  );
 80106a2:	4b2d      	ldr	r3, [pc, #180]	; (8010758 <Mean_Airway_Pressure+0xbc>)
 80106a4:	ed93 7a07 	vldr	s14, [r3, #28]
 80106a8:	4b2c      	ldr	r3, [pc, #176]	; (801075c <Mean_Airway_Pressure+0xc0>)
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	ee07 3a90 	vmov	s15, r3
 80106b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106b8:	4b27      	ldr	r3, [pc, #156]	; (8010758 <Mean_Airway_Pressure+0xbc>)
 80106ba:	edd3 6a08 	vldr	s13, [r3, #32]
 80106be:	4b28      	ldr	r3, [pc, #160]	; (8010760 <Mean_Airway_Pressure+0xc4>)
 80106c0:	7c1b      	ldrb	r3, [r3, #16]
 80106c2:	ee07 3a90 	vmov	s15, r3
 80106c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106d2:	4b21      	ldr	r3, [pc, #132]	; (8010758 <Mean_Airway_Pressure+0xbc>)
 80106d4:	edd3 6a07 	vldr	s13, [r3, #28]
 80106d8:	4b1f      	ldr	r3, [pc, #124]	; (8010758 <Mean_Airway_Pressure+0xbc>)
 80106da:	edd3 7a08 	vldr	s15, [r3, #32]
 80106de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80106e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80106e6:	ee16 0a90 	vmov	r0, s13
 80106ea:	f7ef fed5 	bl	8000498 <__aeabi_f2d>
 80106ee:	4602      	mov	r2, r0
 80106f0:	460b      	mov	r3, r1
 80106f2:	491c      	ldr	r1, [pc, #112]	; (8010764 <Mean_Airway_Pressure+0xc8>)
 80106f4:	e9c1 2300 	strd	r2, r3, [r1]

	Sampled_Parameter_4.MAP_int = (uint8_t)Sampled_Parameter_4.MAP;
 80106f8:	4b1a      	ldr	r3, [pc, #104]	; (8010764 <Mean_Airway_Pressure+0xc8>)
 80106fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fe:	4610      	mov	r0, r2
 8010700:	4619      	mov	r1, r3
 8010702:	f7f0 f9e3 	bl	8000acc <__aeabi_d2uiz>
 8010706:	4603      	mov	r3, r0
 8010708:	b2da      	uxtb	r2, r3
 801070a:	4b16      	ldr	r3, [pc, #88]	; (8010764 <Mean_Airway_Pressure+0xc8>)
 801070c:	721a      	strb	r2, [r3, #8]

	double dummy,dummy2;

	dummy2 = modf(Sampled_Parameter_4.MAP,&dummy);
 801070e:	4b15      	ldr	r3, [pc, #84]	; (8010764 <Mean_Airway_Pressure+0xc8>)
 8010710:	ed93 7b00 	vldr	d7, [r3]
 8010714:	463b      	mov	r3, r7
 8010716:	4618      	mov	r0, r3
 8010718:	eeb0 0a47 	vmov.f32	s0, s14
 801071c:	eef0 0a67 	vmov.f32	s1, s15
 8010720:	f011 fa36 	bl	8021b90 <modf>
 8010724:	ed87 0b02 	vstr	d0, [r7, #8]

	dummy2 =dummy2 * 100;
 8010728:	f04f 0200 	mov.w	r2, #0
 801072c:	4b0e      	ldr	r3, [pc, #56]	; (8010768 <Mean_Airway_Pressure+0xcc>)
 801072e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010732:	f7ef ff09 	bl	8000548 <__aeabi_dmul>
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	Sampled_Parameter_4.MAP_float = (int)dummy2 ;
 801073e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010742:	f7f0 f99b 	bl	8000a7c <__aeabi_d2iz>
 8010746:	4603      	mov	r3, r0
 8010748:	b2da      	uxtb	r2, r3
 801074a:	4b06      	ldr	r3, [pc, #24]	; (8010764 <Mean_Airway_Pressure+0xc8>)
 801074c:	725a      	strb	r2, [r3, #9]
}
 801074e:	bf00      	nop
 8010750:	3710      	adds	r7, #16
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
 8010756:	bf00      	nop
 8010758:	2001418c 	.word	0x2001418c
 801075c:	200142e4 	.word	0x200142e4
 8010760:	20014300 	.word	0x20014300
 8010764:	20013ef8 	.word	0x20013ef8
 8010768:	40590000 	.word	0x40590000

0801076c <I_and_E_Ratio_Func>:



void I_and_E_Ratio_Func()
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b08c      	sub	sp, #48	; 0x30
 8010770:	af00      	add	r7, sp, #0
	int n1, n2, i, gcd;

	n1 = Sampled_Parameter_2.Acheived_I_Time;
 8010772:	4b5a      	ldr	r3, [pc, #360]	; (80108dc <I_and_E_Ratio_Func+0x170>)
 8010774:	8adb      	ldrh	r3, [r3, #22]
 8010776:	627b      	str	r3, [r7, #36]	; 0x24
	n2 = Sampled_Parameter_2.Acheived_E_Time;
 8010778:	4b58      	ldr	r3, [pc, #352]	; (80108dc <I_and_E_Ratio_Func+0x170>)
 801077a:	8b1b      	ldrh	r3, [r3, #24]
 801077c:	623b      	str	r3, [r7, #32]

	for(i=1; i <= n1 && i <= n2; ++i)
 801077e:	2301      	movs	r3, #1
 8010780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010782:	e018      	b.n	80107b6 <I_and_E_Ratio_Func+0x4a>
	{
		if(n1%i==0 && n2%i==0)
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010788:	fb93 f2f2 	sdiv	r2, r3, r2
 801078c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801078e:	fb01 f202 	mul.w	r2, r1, r2
 8010792:	1a9b      	subs	r3, r3, r2
 8010794:	2b00      	cmp	r3, #0
 8010796:	d10b      	bne.n	80107b0 <I_and_E_Ratio_Func+0x44>
 8010798:	6a3b      	ldr	r3, [r7, #32]
 801079a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801079c:	fb93 f2f2 	sdiv	r2, r3, r2
 80107a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107a2:	fb01 f202 	mul.w	r2, r1, r2
 80107a6:	1a9b      	subs	r3, r3, r2
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d101      	bne.n	80107b0 <I_and_E_Ratio_Func+0x44>
			gcd = i;
 80107ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ae:	62bb      	str	r3, [r7, #40]	; 0x28
	for(i=1; i <= n1 && i <= n2; ++i)
 80107b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b2:	3301      	adds	r3, #1
 80107b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ba:	429a      	cmp	r2, r3
 80107bc:	dc03      	bgt.n	80107c6 <I_and_E_Ratio_Func+0x5a>
 80107be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107c0:	6a3b      	ldr	r3, [r7, #32]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	ddde      	ble.n	8010784 <I_and_E_Ratio_Func+0x18>
	}



	Sampled_Parameter_4.I_Ratio= (float)Sampled_Parameter_2.Acheived_I_Time /(float)gcd ;
 80107c6:	4b45      	ldr	r3, [pc, #276]	; (80108dc <I_and_E_Ratio_Func+0x170>)
 80107c8:	8adb      	ldrh	r3, [r3, #22]
 80107ca:	ee07 3a90 	vmov	s15, r3
 80107ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80107d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d4:	ee07 3a90 	vmov	s15, r3
 80107d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80107e0:	ee16 0a90 	vmov	r0, s13
 80107e4:	f7ef fe58 	bl	8000498 <__aeabi_f2d>
 80107e8:	4602      	mov	r2, r0
 80107ea:	460b      	mov	r3, r1
 80107ec:	493c      	ldr	r1, [pc, #240]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 80107ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Sampled_Parameter_4.E_Ratio= (float)Sampled_Parameter_2.Acheived_E_Time /(float)gcd ;
 80107f2:	4b3a      	ldr	r3, [pc, #232]	; (80108dc <I_and_E_Ratio_Func+0x170>)
 80107f4:	8b1b      	ldrh	r3, [r3, #24]
 80107f6:	ee07 3a90 	vmov	s15, r3
 80107fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80107fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010800:	ee07 3a90 	vmov	s15, r3
 8010804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010808:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801080c:	ee16 0a90 	vmov	r0, s13
 8010810:	f7ef fe42 	bl	8000498 <__aeabi_f2d>
 8010814:	4602      	mov	r2, r0
 8010816:	460b      	mov	r3, r1
 8010818:	4931      	ldr	r1, [pc, #196]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 801081a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//Sampled_Parameter_4.I_Ratio= (float)Sampled_Parameter_2.Acheived_I_Time_float /(float)gcd ;
	//Sampled_Parameter_4.E_Ratio= (float)Sampled_Parameter_2.Acheived_E_Time_float /(float)gcd ;


	    Sampled_Parameter_4.I_Ratio_int = (uint8_t)Sampled_Parameter_4.I_Ratio;
 801081e:	4b30      	ldr	r3, [pc, #192]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 8010820:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010824:	4610      	mov	r0, r2
 8010826:	4619      	mov	r1, r3
 8010828:	f7f0 f950 	bl	8000acc <__aeabi_d2uiz>
 801082c:	4603      	mov	r3, r0
 801082e:	b2da      	uxtb	r2, r3
 8010830:	4b2b      	ldr	r3, [pc, #172]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 8010832:	f883 2020 	strb.w	r2, [r3, #32]

		double dummy,dummy2;

		dummy2 = modf(Sampled_Parameter_4.I_Ratio,&dummy);
 8010836:	4b2a      	ldr	r3, [pc, #168]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 8010838:	ed93 7b04 	vldr	d7, [r3, #16]
 801083c:	f107 0308 	add.w	r3, r7, #8
 8010840:	4618      	mov	r0, r3
 8010842:	eeb0 0a47 	vmov.f32	s0, s14
 8010846:	eef0 0a67 	vmov.f32	s1, s15
 801084a:	f011 f9a1 	bl	8021b90 <modf>
 801084e:	ed87 0b06 	vstr	d0, [r7, #24]

		dummy2 =dummy2 * 100;
 8010852:	f04f 0200 	mov.w	r2, #0
 8010856:	4b23      	ldr	r3, [pc, #140]	; (80108e4 <I_and_E_Ratio_Func+0x178>)
 8010858:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801085c:	f7ef fe74 	bl	8000548 <__aeabi_dmul>
 8010860:	4602      	mov	r2, r0
 8010862:	460b      	mov	r3, r1
 8010864:	e9c7 2306 	strd	r2, r3, [r7, #24]

		Sampled_Parameter_4.I_Ratio_float = (int)dummy2 ;
 8010868:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801086c:	f7f0 f906 	bl	8000a7c <__aeabi_d2iz>
 8010870:	4603      	mov	r3, r0
 8010872:	b2da      	uxtb	r2, r3
 8010874:	4b1a      	ldr	r3, [pc, #104]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 8010876:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22



		        Sampled_Parameter_4.E_Ratio_int = (uint8_t)Sampled_Parameter_4.E_Ratio;
 801087a:	4b19      	ldr	r3, [pc, #100]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 801087c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8010880:	4610      	mov	r0, r2
 8010882:	4619      	mov	r1, r3
 8010884:	f7f0 f922 	bl	8000acc <__aeabi_d2uiz>
 8010888:	4603      	mov	r3, r0
 801088a:	b2da      	uxtb	r2, r3
 801088c:	4b14      	ldr	r3, [pc, #80]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 801088e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				double dummy11,dummy12;

				dummy12 = modf(Sampled_Parameter_4.E_Ratio,&dummy11);
 8010892:	4b13      	ldr	r3, [pc, #76]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 8010894:	ed93 7b06 	vldr	d7, [r3, #24]
 8010898:	463b      	mov	r3, r7
 801089a:	4618      	mov	r0, r3
 801089c:	eeb0 0a47 	vmov.f32	s0, s14
 80108a0:	eef0 0a67 	vmov.f32	s1, s15
 80108a4:	f011 f974 	bl	8021b90 <modf>
 80108a8:	ed87 0b04 	vstr	d0, [r7, #16]

				dummy12 =dummy12 * 100;
 80108ac:	f04f 0200 	mov.w	r2, #0
 80108b0:	4b0c      	ldr	r3, [pc, #48]	; (80108e4 <I_and_E_Ratio_Func+0x178>)
 80108b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80108b6:	f7ef fe47 	bl	8000548 <__aeabi_dmul>
 80108ba:	4602      	mov	r2, r0
 80108bc:	460b      	mov	r3, r1
 80108be:	e9c7 2304 	strd	r2, r3, [r7, #16]

				Sampled_Parameter_4.E_Ratio_float = (int)dummy12 ;
 80108c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80108c6:	f7f0 f8d9 	bl	8000a7c <__aeabi_d2iz>
 80108ca:	4603      	mov	r3, r0
 80108cc:	b2da      	uxtb	r2, r3
 80108ce:	4b04      	ldr	r3, [pc, #16]	; (80108e0 <I_and_E_Ratio_Func+0x174>)
 80108d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23




}
 80108d4:	bf00      	nop
 80108d6:	3730      	adds	r7, #48	; 0x30
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	2001418c 	.word	0x2001418c
 80108e0:	20013ef8 	.word	0x20013ef8
 80108e4:	40590000 	.word	0x40590000

080108e8 <Sampled_Parameter_Inspiration_time>:


void Sampled_Parameter_Inspiration_time()
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	af00      	add	r7, sp, #0
	V_Min     = vol.Volume;
 80108ec:	4b0c      	ldr	r3, [pc, #48]	; (8010920 <Sampled_Parameter_Inspiration_time+0x38>)
 80108ee:	edd3 7a00 	vldr	s15, [r3]
 80108f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108f6:	ee17 2a90 	vmov	r2, s15
 80108fa:	4b0a      	ldr	r3, [pc, #40]	; (8010924 <Sampled_Parameter_Inspiration_time+0x3c>)
 80108fc:	601a      	str	r2, [r3, #0]
	Sampled_Parameter_Func_1();
 80108fe:	f7ff fad7 	bl	800feb0 <Sampled_Parameter_Func_1>
	Sampled_Parameter_Func_2();
 8010902:	f7ff fb87 	bl	8010014 <Sampled_Parameter_Func_2>
	Sampled_Parameter_Func_3();
 8010906:	f7ff fcb9 	bl	801027c <Sampled_Parameter_Func_3>
	Sampled_Parameter_Func_4();
 801090a:	f7ff febf 	bl	801068c <Sampled_Parameter_Func_4>
	Send_Frame = First_Frame;
 801090e:	4b06      	ldr	r3, [pc, #24]	; (8010928 <Sampled_Parameter_Inspiration_time+0x40>)
 8010910:	2201      	movs	r2, #1
 8010912:	701a      	strb	r2, [r3, #0]
	Send_Frame_Fuel_Gauge = First_Frame;
 8010914:	4b05      	ldr	r3, [pc, #20]	; (801092c <Sampled_Parameter_Inspiration_time+0x44>)
 8010916:	2201      	movs	r2, #1
 8010918:	701a      	strb	r2, [r3, #0]
}
 801091a:	bf00      	nop
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	200140c8 	.word	0x200140c8
 8010924:	200001f4 	.word	0x200001f4
 8010928:	20013eec 	.word	0x20013eec
 801092c:	200139a5 	.word	0x200139a5

08010930 <Initial_Task_Create>:
extern ADC_HandleTypeDef hadc1;
extern DAC_HandleTypeDef hdac;
extern TIM_HandleTypeDef htim12;

void Initial_Task_Create()
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af02      	add	r7, sp, #8
		   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&Adc.AdcData,6);
 8010936:	2206      	movs	r2, #6
 8010938:	49aa      	ldr	r1, [pc, #680]	; (8010be4 <Initial_Task_Create+0x2b4>)
 801093a:	48ab      	ldr	r0, [pc, #684]	; (8010be8 <Initial_Task_Create+0x2b8>)
 801093c:	f003 f9ce 	bl	8013cdc <HAL_ADC_Start_DMA>
		   Blower_ON();
 8010940:	4baa      	ldr	r3, [pc, #680]	; (8010bec <Initial_Task_Create+0x2bc>)
 8010942:	695b      	ldr	r3, [r3, #20]
 8010944:	4aa9      	ldr	r2, [pc, #676]	; (8010bec <Initial_Task_Create+0x2bc>)
 8010946:	f043 0320 	orr.w	r3, r3, #32
 801094a:	6153      	str	r3, [r2, #20]
		   HAL_DAC_Start(&hdac,DAC1_CHANNEL_1);
 801094c:	2100      	movs	r1, #0
 801094e:	48a8      	ldr	r0, [pc, #672]	; (8010bf0 <Initial_Task_Create+0x2c0>)
 8010950:	f003 fe96 	bl	8014680 <HAL_DAC_Start>
		   Blower_Signal(0);
 8010954:	4ba7      	ldr	r3, [pc, #668]	; (8010bf4 <Initial_Task_Create+0x2c4>)
 8010956:	2200      	movs	r2, #0
 8010958:	609a      	str	r2, [r3, #8]
		   HAL_DAC_Start(&hdac,DAC1_CHANNEL_2);
 801095a:	2110      	movs	r1, #16
 801095c:	48a4      	ldr	r0, [pc, #656]	; (8010bf0 <Initial_Task_Create+0x2c0>)
 801095e:	f003 fe8f 	bl	8014680 <HAL_DAC_Start>
		   Parkar_valve_Signal(0);
 8010962:	4ba4      	ldr	r3, [pc, #656]	; (8010bf4 <Initial_Task_Create+0x2c4>)
 8010964:	2200      	movs	r2, #0
 8010966:	615a      	str	r2, [r3, #20]
		   HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8010968:	2100      	movs	r1, #0
 801096a:	48a3      	ldr	r0, [pc, #652]	; (8010bf8 <Initial_Task_Create+0x2c8>)
 801096c:	f007 fc62 	bl	8018234 <HAL_TIM_PWM_Start>
		   Servo_Angle(SERVO_FULL_OPEND);
 8010970:	4ba2      	ldr	r3, [pc, #648]	; (8010bfc <Initial_Task_Create+0x2cc>)
 8010972:	222d      	movs	r2, #45	; 0x2d
 8010974:	635a      	str	r2, [r3, #52]	; 0x34
		   Uart_Receive_Debug_Toggle_Led();
 8010976:	4ba2      	ldr	r3, [pc, #648]	; (8010c00 <Initial_Task_Create+0x2d0>)
 8010978:	695b      	ldr	r3, [r3, #20]
 801097a:	4aa1      	ldr	r2, [pc, #644]	; (8010c00 <Initial_Task_Create+0x2d0>)
 801097c:	f083 0302 	eor.w	r3, r3, #2
 8010980:	6153      	str	r3, [r2, #20]
		   PIP_Not_Acheieved();
 8010982:	f7fc ffb3 	bl	800d8ec <PIP_Not_Acheieved>
		   Blue_Led_ON();
 8010986:	4b9e      	ldr	r3, [pc, #632]	; (8010c00 <Initial_Task_Create+0x2d0>)
 8010988:	695b      	ldr	r3, [r3, #20]
 801098a:	4a9d      	ldr	r2, [pc, #628]	; (8010c00 <Initial_Task_Create+0x2d0>)
 801098c:	f043 0308 	orr.w	r3, r3, #8
 8010990:	6153      	str	r3, [r2, #20]
		   Red_Led_OFF();
 8010992:	4b9b      	ldr	r3, [pc, #620]	; (8010c00 <Initial_Task_Create+0x2d0>)
 8010994:	695b      	ldr	r3, [r3, #20]
 8010996:	4a9a      	ldr	r2, [pc, #616]	; (8010c00 <Initial_Task_Create+0x2d0>)
 8010998:	f023 0310 	bic.w	r3, r3, #16
 801099c:	6153      	str	r3, [r2, #20]
		   Green_Led_OFF();
 801099e:	4b98      	ldr	r3, [pc, #608]	; (8010c00 <Initial_Task_Create+0x2d0>)
 80109a0:	695b      	ldr	r3, [r3, #20]
 80109a2:	4a97      	ldr	r2, [pc, #604]	; (8010c00 <Initial_Task_Create+0x2d0>)
 80109a4:	f023 0320 	bic.w	r3, r3, #32
 80109a8:	6153      	str	r3, [r2, #20]

		   Bluetooth_Receive = xQueueCreate(1, sizeof(Bluetooth_Parameter.Bluetooth_RX_BUF));
 80109aa:	2200      	movs	r2, #0
 80109ac:	2114      	movs	r1, #20
 80109ae:	2001      	movs	r0, #1
 80109b0:	f00d fcb2 	bl	801e318 <xQueueGenericCreate>
 80109b4:	4603      	mov	r3, r0
 80109b6:	4a93      	ldr	r2, [pc, #588]	; (8010c04 <Initial_Task_Create+0x2d4>)
 80109b8:	6013      	str	r3, [r2, #0]
		   vSemaphoreCreateBinary(binarysem);
 80109ba:	2203      	movs	r2, #3
 80109bc:	2100      	movs	r1, #0
 80109be:	2001      	movs	r0, #1
 80109c0:	f00d fcaa 	bl	801e318 <xQueueGenericCreate>
 80109c4:	4603      	mov	r3, r0
 80109c6:	4a90      	ldr	r2, [pc, #576]	; (8010c08 <Initial_Task_Create+0x2d8>)
 80109c8:	6013      	str	r3, [r2, #0]
 80109ca:	4b8f      	ldr	r3, [pc, #572]	; (8010c08 <Initial_Task_Create+0x2d8>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d006      	beq.n	80109e0 <Initial_Task_Create+0xb0>
 80109d2:	4b8d      	ldr	r3, [pc, #564]	; (8010c08 <Initial_Task_Create+0x2d8>)
 80109d4:	6818      	ldr	r0, [r3, #0]
 80109d6:	2300      	movs	r3, #0
 80109d8:	2200      	movs	r2, #0
 80109da:	2100      	movs	r1, #0
 80109dc:	f00d fcf6 	bl	801e3cc <xQueueGenericSend>

		   xTaskCreate(Sensor_Offset_Task,"Sensor-Offset-Task", 128, NULL, 3, &Sensor_Offset_Handler);
 80109e0:	4b8a      	ldr	r3, [pc, #552]	; (8010c0c <Initial_Task_Create+0x2dc>)
 80109e2:	9301      	str	r3, [sp, #4]
 80109e4:	2303      	movs	r3, #3
 80109e6:	9300      	str	r3, [sp, #0]
 80109e8:	2300      	movs	r3, #0
 80109ea:	2280      	movs	r2, #128	; 0x80
 80109ec:	4988      	ldr	r1, [pc, #544]	; (8010c10 <Initial_Task_Create+0x2e0>)
 80109ee:	4889      	ldr	r0, [pc, #548]	; (8010c14 <Initial_Task_Create+0x2e4>)
 80109f0:	f00e fa55 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Time_Trace_Task,"Time-Trace-Task", 128, NULL, 2, &Time_Trace_Handler);
 80109f4:	4b88      	ldr	r3, [pc, #544]	; (8010c18 <Initial_Task_Create+0x2e8>)
 80109f6:	9301      	str	r3, [sp, #4]
 80109f8:	2302      	movs	r3, #2
 80109fa:	9300      	str	r3, [sp, #0]
 80109fc:	2300      	movs	r3, #0
 80109fe:	2280      	movs	r2, #128	; 0x80
 8010a00:	4986      	ldr	r1, [pc, #536]	; (8010c1c <Initial_Task_Create+0x2ec>)
 8010a02:	4887      	ldr	r0, [pc, #540]	; (8010c20 <Initial_Task_Create+0x2f0>)
 8010a04:	f00e fa4b 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Sensor_Read_Task,"Sensor-Read-Task", 256, NULL, 2, &Sensor_Read_Handler);
 8010a08:	4b86      	ldr	r3, [pc, #536]	; (8010c24 <Initial_Task_Create+0x2f4>)
 8010a0a:	9301      	str	r3, [sp, #4]
 8010a0c:	2302      	movs	r3, #2
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	2300      	movs	r3, #0
 8010a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a16:	4984      	ldr	r1, [pc, #528]	; (8010c28 <Initial_Task_Create+0x2f8>)
 8010a18:	4884      	ldr	r0, [pc, #528]	; (8010c2c <Initial_Task_Create+0x2fc>)
 8010a1a:	f00e fa40 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Bluetooth_Task,"Bluetooth-Task", 128, NULL, 2, &Bluetooth_Handler);
 8010a1e:	4b84      	ldr	r3, [pc, #528]	; (8010c30 <Initial_Task_Create+0x300>)
 8010a20:	9301      	str	r3, [sp, #4]
 8010a22:	2302      	movs	r3, #2
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	2300      	movs	r3, #0
 8010a28:	2280      	movs	r2, #128	; 0x80
 8010a2a:	4982      	ldr	r1, [pc, #520]	; (8010c34 <Initial_Task_Create+0x304>)
 8010a2c:	4882      	ldr	r0, [pc, #520]	; (8010c38 <Initial_Task_Create+0x308>)
 8010a2e:	f00e fa36 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(BlueTooth_Receiver_Task,"BlueTooth-Data-Receive-Task", 128, NULL, 5, &Bluetooth_Receiver_Handler);
 8010a32:	4b82      	ldr	r3, [pc, #520]	; (8010c3c <Initial_Task_Create+0x30c>)
 8010a34:	9301      	str	r3, [sp, #4]
 8010a36:	2305      	movs	r3, #5
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	2280      	movs	r2, #128	; 0x80
 8010a3e:	4980      	ldr	r1, [pc, #512]	; (8010c40 <Initial_Task_Create+0x310>)
 8010a40:	4880      	ldr	r0, [pc, #512]	; (8010c44 <Initial_Task_Create+0x314>)
 8010a42:	f00e fa2c 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Bluetooth_data_split_Task,"Uart-data-split-Task", 128, NULL, 4, &Bluetooth_data_Split_Handler);
 8010a46:	4b80      	ldr	r3, [pc, #512]	; (8010c48 <Initial_Task_Create+0x318>)
 8010a48:	9301      	str	r3, [sp, #4]
 8010a4a:	2304      	movs	r3, #4
 8010a4c:	9300      	str	r3, [sp, #0]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	2280      	movs	r2, #128	; 0x80
 8010a52:	497e      	ldr	r1, [pc, #504]	; (8010c4c <Initial_Task_Create+0x31c>)
 8010a54:	487e      	ldr	r0, [pc, #504]	; (8010c50 <Initial_Task_Create+0x320>)
 8010a56:	f00e fa22 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Mode_Initial_Flag_Set_Task,"Initial-Flag-Set-Task", 128, NULL, 3, &Mode_initial_Flag_Set_Handler);
 8010a5a:	4b7e      	ldr	r3, [pc, #504]	; (8010c54 <Initial_Task_Create+0x324>)
 8010a5c:	9301      	str	r3, [sp, #4]
 8010a5e:	2303      	movs	r3, #3
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	2300      	movs	r3, #0
 8010a64:	2280      	movs	r2, #128	; 0x80
 8010a66:	497c      	ldr	r1, [pc, #496]	; (8010c58 <Initial_Task_Create+0x328>)
 8010a68:	487c      	ldr	r0, [pc, #496]	; (8010c5c <Initial_Task_Create+0x32c>)
 8010a6a:	f00e fa18 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(One_Time_Task,"One-Time-Task", 128, NULL,3, &One_Time_Handler);
 8010a6e:	4b7c      	ldr	r3, [pc, #496]	; (8010c60 <Initial_Task_Create+0x330>)
 8010a70:	9301      	str	r3, [sp, #4]
 8010a72:	2303      	movs	r3, #3
 8010a74:	9300      	str	r3, [sp, #0]
 8010a76:	2300      	movs	r3, #0
 8010a78:	2280      	movs	r2, #128	; 0x80
 8010a7a:	497a      	ldr	r1, [pc, #488]	; (8010c64 <Initial_Task_Create+0x334>)
 8010a7c:	487a      	ldr	r0, [pc, #488]	; (8010c68 <Initial_Task_Create+0x338>)
 8010a7e:	f00e fa0e 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Pc_Cmv_Task,"Pc-Cmv-Task", 128, NULL, 2, &Pc_Cmv_Handler);
 8010a82:	4b7a      	ldr	r3, [pc, #488]	; (8010c6c <Initial_Task_Create+0x33c>)
 8010a84:	9301      	str	r3, [sp, #4]
 8010a86:	2302      	movs	r3, #2
 8010a88:	9300      	str	r3, [sp, #0]
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	2280      	movs	r2, #128	; 0x80
 8010a8e:	4978      	ldr	r1, [pc, #480]	; (8010c70 <Initial_Task_Create+0x340>)
 8010a90:	4878      	ldr	r0, [pc, #480]	; (8010c74 <Initial_Task_Create+0x344>)
 8010a92:	f00e fa04 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(PIP_Control_Task,"PIP-Control-PC-CMV-Task", 128, NULL, 2, &PIP_Control_Task_Handler);
 8010a96:	4b78      	ldr	r3, [pc, #480]	; (8010c78 <Initial_Task_Create+0x348>)
 8010a98:	9301      	str	r3, [sp, #4]
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	2280      	movs	r2, #128	; 0x80
 8010aa2:	4976      	ldr	r1, [pc, #472]	; (8010c7c <Initial_Task_Create+0x34c>)
 8010aa4:	4876      	ldr	r0, [pc, #472]	; (8010c80 <Initial_Task_Create+0x350>)
 8010aa6:	f00e f9fa 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Vc_Cmv_Task,"Vc-Cmv-Task", 128, NULL, 2, &Vc_Cmv_Handler);
 8010aaa:	4b76      	ldr	r3, [pc, #472]	; (8010c84 <Initial_Task_Create+0x354>)
 8010aac:	9301      	str	r3, [sp, #4]
 8010aae:	2302      	movs	r3, #2
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	2280      	movs	r2, #128	; 0x80
 8010ab6:	4974      	ldr	r1, [pc, #464]	; (8010c88 <Initial_Task_Create+0x358>)
 8010ab8:	4874      	ldr	r0, [pc, #464]	; (8010c8c <Initial_Task_Create+0x35c>)
 8010aba:	f00e f9f0 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Volume_Control_Task,"Volume-Control-VC-CMV-Task", 128, NULL, 2, &Volume_Control_Task_Handler);
 8010abe:	4b74      	ldr	r3, [pc, #464]	; (8010c90 <Initial_Task_Create+0x360>)
 8010ac0:	9301      	str	r3, [sp, #4]
 8010ac2:	2302      	movs	r3, #2
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	2280      	movs	r2, #128	; 0x80
 8010aca:	4972      	ldr	r1, [pc, #456]	; (8010c94 <Initial_Task_Create+0x364>)
 8010acc:	4872      	ldr	r0, [pc, #456]	; (8010c98 <Initial_Task_Create+0x368>)
 8010ace:	f00e f9e6 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Oxygen_Blending_Task, "Oxygen-Blending-Task", 128, NULL, 2, &Oxygen_Blending_Handler);
 8010ad2:	4b72      	ldr	r3, [pc, #456]	; (8010c9c <Initial_Task_Create+0x36c>)
 8010ad4:	9301      	str	r3, [sp, #4]
 8010ad6:	2302      	movs	r3, #2
 8010ad8:	9300      	str	r3, [sp, #0]
 8010ada:	2300      	movs	r3, #0
 8010adc:	2280      	movs	r2, #128	; 0x80
 8010ade:	4970      	ldr	r1, [pc, #448]	; (8010ca0 <Initial_Task_Create+0x370>)
 8010ae0:	4870      	ldr	r0, [pc, #448]	; (8010ca4 <Initial_Task_Create+0x374>)
 8010ae2:	f00e f9dc 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Alert_Task, "Alert Task", 128, NULL, 2, &Alert_Handler);
 8010ae6:	4b70      	ldr	r3, [pc, #448]	; (8010ca8 <Initial_Task_Create+0x378>)
 8010ae8:	9301      	str	r3, [sp, #4]
 8010aea:	2302      	movs	r3, #2
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	2300      	movs	r3, #0
 8010af0:	2280      	movs	r2, #128	; 0x80
 8010af2:	496e      	ldr	r1, [pc, #440]	; (8010cac <Initial_Task_Create+0x37c>)
 8010af4:	486e      	ldr	r0, [pc, #440]	; (8010cb0 <Initial_Task_Create+0x380>)
 8010af6:	f00e f9d2 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Pc_Simv_Assist_ON_Task,"Pc-Simv-Assist-ON-Task", 128, NULL, 2, &Pc_Simv_Assist_ON_Handler);
 8010afa:	4b6e      	ldr	r3, [pc, #440]	; (8010cb4 <Initial_Task_Create+0x384>)
 8010afc:	9301      	str	r3, [sp, #4]
 8010afe:	2302      	movs	r3, #2
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	2300      	movs	r3, #0
 8010b04:	2280      	movs	r2, #128	; 0x80
 8010b06:	496c      	ldr	r1, [pc, #432]	; (8010cb8 <Initial_Task_Create+0x388>)
 8010b08:	486c      	ldr	r0, [pc, #432]	; (8010cbc <Initial_Task_Create+0x38c>)
 8010b0a:	f00e f9c8 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Pc_Simv_Assist_OFF_Task,"Pc-Simv-Assist-OFF-Task", 128, NULL, 2, &Pc_Simv_Assist_OFF_Handler);
 8010b0e:	4b6c      	ldr	r3, [pc, #432]	; (8010cc0 <Initial_Task_Create+0x390>)
 8010b10:	9301      	str	r3, [sp, #4]
 8010b12:	2302      	movs	r3, #2
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	2300      	movs	r3, #0
 8010b18:	2280      	movs	r2, #128	; 0x80
 8010b1a:	496a      	ldr	r1, [pc, #424]	; (8010cc4 <Initial_Task_Create+0x394>)
 8010b1c:	486a      	ldr	r0, [pc, #424]	; (8010cc8 <Initial_Task_Create+0x398>)
 8010b1e:	f00e f9be 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Vc_Simv_Assist_ON_Task,"Vc-Simv-Assist-ON-Task", 128, NULL, 2, &Vc_Simv_Assist_ON_Handler);
 8010b22:	4b6a      	ldr	r3, [pc, #424]	; (8010ccc <Initial_Task_Create+0x39c>)
 8010b24:	9301      	str	r3, [sp, #4]
 8010b26:	2302      	movs	r3, #2
 8010b28:	9300      	str	r3, [sp, #0]
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	2280      	movs	r2, #128	; 0x80
 8010b2e:	4968      	ldr	r1, [pc, #416]	; (8010cd0 <Initial_Task_Create+0x3a0>)
 8010b30:	4868      	ldr	r0, [pc, #416]	; (8010cd4 <Initial_Task_Create+0x3a4>)
 8010b32:	f00e f9b4 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Vc_Simv_Assist_OFF_Task,"Vc-Simv-Assist-OFF-Task", 128, NULL, 2, &Vc_Simv_Assist_OFF_Handler);
 8010b36:	4b68      	ldr	r3, [pc, #416]	; (8010cd8 <Initial_Task_Create+0x3a8>)
 8010b38:	9301      	str	r3, [sp, #4]
 8010b3a:	2302      	movs	r3, #2
 8010b3c:	9300      	str	r3, [sp, #0]
 8010b3e:	2300      	movs	r3, #0
 8010b40:	2280      	movs	r2, #128	; 0x80
 8010b42:	4966      	ldr	r1, [pc, #408]	; (8010cdc <Initial_Task_Create+0x3ac>)
 8010b44:	4866      	ldr	r0, [pc, #408]	; (8010ce0 <Initial_Task_Create+0x3b0>)
 8010b46:	f00e f9aa 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(PSV_Task,"PSV-Task", 128, NULL, 2, &PSV_Handler);
 8010b4a:	4b66      	ldr	r3, [pc, #408]	; (8010ce4 <Initial_Task_Create+0x3b4>)
 8010b4c:	9301      	str	r3, [sp, #4]
 8010b4e:	2302      	movs	r3, #2
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	2300      	movs	r3, #0
 8010b54:	2280      	movs	r2, #128	; 0x80
 8010b56:	4964      	ldr	r1, [pc, #400]	; (8010ce8 <Initial_Task_Create+0x3b8>)
 8010b58:	4864      	ldr	r0, [pc, #400]	; (8010cec <Initial_Task_Create+0x3bc>)
 8010b5a:	f00e f9a0 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(PSV_PID_Task,"PSV-PID-Task", 128, NULL, 2, &PSV_PID_Handler);
 8010b5e:	4b64      	ldr	r3, [pc, #400]	; (8010cf0 <Initial_Task_Create+0x3c0>)
 8010b60:	9301      	str	r3, [sp, #4]
 8010b62:	2302      	movs	r3, #2
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	2300      	movs	r3, #0
 8010b68:	2280      	movs	r2, #128	; 0x80
 8010b6a:	4962      	ldr	r1, [pc, #392]	; (8010cf4 <Initial_Task_Create+0x3c4>)
 8010b6c:	4862      	ldr	r0, [pc, #392]	; (8010cf8 <Initial_Task_Create+0x3c8>)
 8010b6e:	f00e f996 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(CPAP_Task,"CPAP-Task", 128, NULL, 2, &CPAP_Handler);
 8010b72:	4b62      	ldr	r3, [pc, #392]	; (8010cfc <Initial_Task_Create+0x3cc>)
 8010b74:	9301      	str	r3, [sp, #4]
 8010b76:	2302      	movs	r3, #2
 8010b78:	9300      	str	r3, [sp, #0]
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	2280      	movs	r2, #128	; 0x80
 8010b7e:	4960      	ldr	r1, [pc, #384]	; (8010d00 <Initial_Task_Create+0x3d0>)
 8010b80:	4860      	ldr	r0, [pc, #384]	; (8010d04 <Initial_Task_Create+0x3d4>)
 8010b82:	f00e f98c 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(BIPAP_Task,"BIPAP-Task", 128, NULL, 2, &BIPAP_Handler);
 8010b86:	4b60      	ldr	r3, [pc, #384]	; (8010d08 <Initial_Task_Create+0x3d8>)
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	2302      	movs	r3, #2
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	2300      	movs	r3, #0
 8010b90:	2280      	movs	r2, #128	; 0x80
 8010b92:	495e      	ldr	r1, [pc, #376]	; (8010d0c <Initial_Task_Create+0x3dc>)
 8010b94:	485e      	ldr	r0, [pc, #376]	; (8010d10 <Initial_Task_Create+0x3e0>)
 8010b96:	f00e f982 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(BIPAP_PID_Task,"BIPAP-PID-Task", 128, NULL, 2, &BIPAP_PID_Handler);
 8010b9a:	4b5e      	ldr	r3, [pc, #376]	; (8010d14 <Initial_Task_Create+0x3e4>)
 8010b9c:	9301      	str	r3, [sp, #4]
 8010b9e:	2302      	movs	r3, #2
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	2280      	movs	r2, #128	; 0x80
 8010ba6:	495c      	ldr	r1, [pc, #368]	; (8010d18 <Initial_Task_Create+0x3e8>)
 8010ba8:	485c      	ldr	r0, [pc, #368]	; (8010d1c <Initial_Task_Create+0x3ec>)
 8010baa:	f00e f978 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(APRV_Task,"APRV-Task", 128, NULL, 2, &APRV_Handler);
 8010bae:	4b5c      	ldr	r3, [pc, #368]	; (8010d20 <Initial_Task_Create+0x3f0>)
 8010bb0:	9301      	str	r3, [sp, #4]
 8010bb2:	2302      	movs	r3, #2
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	2280      	movs	r2, #128	; 0x80
 8010bba:	495a      	ldr	r1, [pc, #360]	; (8010d24 <Initial_Task_Create+0x3f4>)
 8010bbc:	485a      	ldr	r0, [pc, #360]	; (8010d28 <Initial_Task_Create+0x3f8>)
 8010bbe:	f00e f96e 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(APRV_ONE_TIME_Task,"APRV-ONE-TIME-Task", 128, NULL, 2, &APRV_ONE_TIME_Handler);
 8010bc2:	4b5a      	ldr	r3, [pc, #360]	; (8010d2c <Initial_Task_Create+0x3fc>)
 8010bc4:	9301      	str	r3, [sp, #4]
 8010bc6:	2302      	movs	r3, #2
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	2300      	movs	r3, #0
 8010bcc:	2280      	movs	r2, #128	; 0x80
 8010bce:	4958      	ldr	r1, [pc, #352]	; (8010d30 <Initial_Task_Create+0x400>)
 8010bd0:	4858      	ldr	r0, [pc, #352]	; (8010d34 <Initial_Task_Create+0x404>)
 8010bd2:	f00e f964 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(BACKUP_PC_CMV_Task,"BACKUP-PC-CMV-Task", 128, NULL, 2, &BACKUP_PC_Handler);
 8010bd6:	4b58      	ldr	r3, [pc, #352]	; (8010d38 <Initial_Task_Create+0x408>)
 8010bd8:	9301      	str	r3, [sp, #4]
 8010bda:	2302      	movs	r3, #2
 8010bdc:	9300      	str	r3, [sp, #0]
 8010bde:	2300      	movs	r3, #0
 8010be0:	e0ac      	b.n	8010d3c <Initial_Task_Create+0x40c>
 8010be2:	bf00      	nop
 8010be4:	20013d04 	.word	0x20013d04
 8010be8:	20014908 	.word	0x20014908
 8010bec:	40021000 	.word	0x40021000
 8010bf0:	20014954 	.word	0x20014954
 8010bf4:	40007400 	.word	0x40007400
 8010bf8:	20014a28 	.word	0x20014a28
 8010bfc:	40001800 	.word	0x40001800
 8010c00:	40020c00 	.word	0x40020c00
 8010c04:	20013af4 	.word	0x20013af4
 8010c08:	20013b40 	.word	0x20013b40
 8010c0c:	200139e4 	.word	0x200139e4
 8010c10:	08022d28 	.word	0x08022d28
 8010c14:	0800f595 	.word	0x0800f595
 8010c18:	200139e8 	.word	0x200139e8
 8010c1c:	08022d3c 	.word	0x08022d3c
 8010c20:	0800b061 	.word	0x0800b061
 8010c24:	20014028 	.word	0x20014028
 8010c28:	08022d4c 	.word	0x08022d4c
 8010c2c:	0800f54d 	.word	0x0800f54d
 8010c30:	2001408c 	.word	0x2001408c
 8010c34:	08022d60 	.word	0x08022d60
 8010c38:	080042d5 	.word	0x080042d5
 8010c3c:	20013b2c 	.word	0x20013b2c
 8010c40:	08022d70 	.word	0x08022d70
 8010c44:	0800463d 	.word	0x0800463d
 8010c48:	20013f78 	.word	0x20013f78
 8010c4c:	08022d8c 	.word	0x08022d8c
 8010c50:	08004685 	.word	0x08004685
 8010c54:	2001406c 	.word	0x2001406c
 8010c58:	08022da4 	.word	0x08022da4
 8010c5c:	0800997d 	.word	0x0800997d
 8010c60:	20014094 	.word	0x20014094
 8010c64:	08022dbc 	.word	0x08022dbc
 8010c68:	0800f869 	.word	0x0800f869
 8010c6c:	20013f80 	.word	0x20013f80
 8010c70:	08022dcc 	.word	0x08022dcc
 8010c74:	0800d451 	.word	0x0800d451
 8010c78:	20013ba0 	.word	0x20013ba0
 8010c7c:	08022dd8 	.word	0x08022dd8
 8010c80:	0800d909 	.word	0x0800d909
 8010c84:	200142f8 	.word	0x200142f8
 8010c88:	08022df0 	.word	0x08022df0
 8010c8c:	08011f75 	.word	0x08011f75
 8010c90:	20013998 	.word	0x20013998
 8010c94:	08022dfc 	.word	0x08022dfc
 8010c98:	08012529 	.word	0x08012529
 8010c9c:	20013f24 	.word	0x20013f24
 8010ca0:	08022e18 	.word	0x08022e18
 8010ca4:	0800b67d 	.word	0x0800b67d
 8010ca8:	20014020 	.word	0x20014020
 8010cac:	08022e30 	.word	0x08022e30
 8010cb0:	08001055 	.word	0x08001055
 8010cb4:	20014348 	.word	0x20014348
 8010cb8:	08022e3c 	.word	0x08022e3c
 8010cbc:	0800cc35 	.word	0x0800cc35
 8010cc0:	20013ca0 	.word	0x20013ca0
 8010cc4:	08022e54 	.word	0x08022e54
 8010cc8:	0800c2dd 	.word	0x0800c2dd
 8010ccc:	20013f58 	.word	0x20013f58
 8010cd0:	08022e6c 	.word	0x08022e6c
 8010cd4:	0801170d 	.word	0x0801170d
 8010cd8:	200142e0 	.word	0x200142e0
 8010cdc:	08022e84 	.word	0x08022e84
 8010ce0:	08010e49 	.word	0x08010e49
 8010ce4:	20013fa8 	.word	0x20013fa8
 8010ce8:	08022e9c 	.word	0x08022e9c
 8010cec:	0800e075 	.word	0x0800e075
 8010cf0:	20013f20 	.word	0x20013f20
 8010cf4:	08022ea8 	.word	0x08022ea8
 8010cf8:	0800e1a1 	.word	0x0800e1a1
 8010cfc:	20014374 	.word	0x20014374
 8010d00:	08022eb8 	.word	0x08022eb8
 8010d04:	08005471 	.word	0x08005471
 8010d08:	20013af0 	.word	0x20013af0
 8010d0c:	08022ec4 	.word	0x08022ec4
 8010d10:	08003205 	.word	0x08003205
 8010d14:	200141cc 	.word	0x200141cc
 8010d18:	08022ed0 	.word	0x08022ed0
 8010d1c:	08003249 	.word	0x08003249
 8010d20:	20013f38 	.word	0x20013f38
 8010d24:	08022ee0 	.word	0x08022ee0
 8010d28:	08001c5d 	.word	0x08001c5d
 8010d2c:	20014148 	.word	0x20014148
 8010d30:	08022eec 	.word	0x08022eec
 8010d34:	08001ca5 	.word	0x08001ca5
 8010d38:	20013bb4 	.word	0x20013bb4
 8010d3c:	2280      	movs	r2, #128	; 0x80
 8010d3e:	492a      	ldr	r1, [pc, #168]	; (8010de8 <Initial_Task_Create+0x4b8>)
 8010d40:	482a      	ldr	r0, [pc, #168]	; (8010dec <Initial_Task_Create+0x4bc>)
 8010d42:	f00e f8ac 	bl	801ee9e <xTaskCreate>
		   xTaskCreate(Nebuliser_Task,"Nebulizer-Task", 128, NULL, 2, &Nebuliser_Handler);
 8010d46:	4b2a      	ldr	r3, [pc, #168]	; (8010df0 <Initial_Task_Create+0x4c0>)
 8010d48:	9301      	str	r3, [sp, #4]
 8010d4a:	2302      	movs	r3, #2
 8010d4c:	9300      	str	r3, [sp, #0]
 8010d4e:	2300      	movs	r3, #0
 8010d50:	2280      	movs	r2, #128	; 0x80
 8010d52:	4928      	ldr	r1, [pc, #160]	; (8010df4 <Initial_Task_Create+0x4c4>)
 8010d54:	4828      	ldr	r0, [pc, #160]	; (8010df8 <Initial_Task_Create+0x4c8>)
 8010d56:	f00e f8a2 	bl	801ee9e <xTaskCreate>
	       xTaskCreate(Suction_Task,"Suction-Task", 128, NULL, 2, &Suction_Handler);
 8010d5a:	4b28      	ldr	r3, [pc, #160]	; (8010dfc <Initial_Task_Create+0x4cc>)
 8010d5c:	9301      	str	r3, [sp, #4]
 8010d5e:	2302      	movs	r3, #2
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	2300      	movs	r3, #0
 8010d64:	2280      	movs	r2, #128	; 0x80
 8010d66:	4926      	ldr	r1, [pc, #152]	; (8010e00 <Initial_Task_Create+0x4d0>)
 8010d68:	4826      	ldr	r0, [pc, #152]	; (8010e04 <Initial_Task_Create+0x4d4>)
 8010d6a:	f00e f898 	bl	801ee9e <xTaskCreate>
	       xTaskCreate(HFNC_Task,"HFNC-Task", 128, NULL, 2, &HFNC_Handler);
 8010d6e:	4b26      	ldr	r3, [pc, #152]	; (8010e08 <Initial_Task_Create+0x4d8>)
 8010d70:	9301      	str	r3, [sp, #4]
 8010d72:	2302      	movs	r3, #2
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	2300      	movs	r3, #0
 8010d78:	2280      	movs	r2, #128	; 0x80
 8010d7a:	4924      	ldr	r1, [pc, #144]	; (8010e0c <Initial_Task_Create+0x4dc>)
 8010d7c:	4824      	ldr	r0, [pc, #144]	; (8010e10 <Initial_Task_Create+0x4e0>)
 8010d7e:	f00e f88e 	bl	801ee9e <xTaskCreate>
	       xTaskCreate(O2_Calibration_Task,"O2-Calibration-Task", 128, NULL, 2, &O2_Calibration_Handler);
 8010d82:	4b24      	ldr	r3, [pc, #144]	; (8010e14 <Initial_Task_Create+0x4e4>)
 8010d84:	9301      	str	r3, [sp, #4]
 8010d86:	2302      	movs	r3, #2
 8010d88:	9300      	str	r3, [sp, #0]
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	2280      	movs	r2, #128	; 0x80
 8010d8e:	4922      	ldr	r1, [pc, #136]	; (8010e18 <Initial_Task_Create+0x4e8>)
 8010d90:	4822      	ldr	r0, [pc, #136]	; (8010e1c <Initial_Task_Create+0x4ec>)
 8010d92:	f00e f884 	bl	801ee9e <xTaskCreate>
	       xTaskCreate(CALIBRATION_Task, "CALIBRATION Task", 128, NULL, 2, &Calibration_Handler);
 8010d96:	4b22      	ldr	r3, [pc, #136]	; (8010e20 <Initial_Task_Create+0x4f0>)
 8010d98:	9301      	str	r3, [sp, #4]
 8010d9a:	2302      	movs	r3, #2
 8010d9c:	9300      	str	r3, [sp, #0]
 8010d9e:	2300      	movs	r3, #0
 8010da0:	2280      	movs	r2, #128	; 0x80
 8010da2:	4920      	ldr	r1, [pc, #128]	; (8010e24 <Initial_Task_Create+0x4f4>)
 8010da4:	4820      	ldr	r0, [pc, #128]	; (8010e28 <Initial_Task_Create+0x4f8>)
 8010da6:	f00e f87a 	bl	801ee9e <xTaskCreate>
	       xTaskCreate(FUEL_GAUGE_Task, "FUEL GAUGE Task", 128, NULL, 2, &Fuel_Gauge_Handler);
 8010daa:	4b20      	ldr	r3, [pc, #128]	; (8010e2c <Initial_Task_Create+0x4fc>)
 8010dac:	9301      	str	r3, [sp, #4]
 8010dae:	2302      	movs	r3, #2
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	2300      	movs	r3, #0
 8010db4:	2280      	movs	r2, #128	; 0x80
 8010db6:	491e      	ldr	r1, [pc, #120]	; (8010e30 <Initial_Task_Create+0x500>)
 8010db8:	481e      	ldr	r0, [pc, #120]	; (8010e34 <Initial_Task_Create+0x504>)
 8010dba:	f00e f870 	bl	801ee9e <xTaskCreate>
	       xTaskCreate(LED_Strip_Task, "LED Strip Task", 128, NULL, 1, &LED_Strip_Task_Handler);
 8010dbe:	4b1e      	ldr	r3, [pc, #120]	; (8010e38 <Initial_Task_Create+0x508>)
 8010dc0:	9301      	str	r3, [sp, #4]
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	9300      	str	r3, [sp, #0]
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	2280      	movs	r2, #128	; 0x80
 8010dca:	491c      	ldr	r1, [pc, #112]	; (8010e3c <Initial_Task_Create+0x50c>)
 8010dcc:	481c      	ldr	r0, [pc, #112]	; (8010e40 <Initial_Task_Create+0x510>)
 8010dce:	f00e f866 	bl	801ee9e <xTaskCreate>
		   PID(&TPID, &Temp_Flow, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
		   PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
		   PID_SetSampleTime(&TPID, Time);
		   PID_SetOutputLimits(&TPID, HFNC_Dac1, HFNC_Dac2);
#endif
		   free_heap_size = xPortGetFreeHeapSize();
 8010dd2:	f010 f88f 	bl	8020ef4 <xPortGetFreeHeapSize>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	4a1a      	ldr	r2, [pc, #104]	; (8010e44 <Initial_Task_Create+0x514>)
 8010dda:	6013      	str	r3, [r2, #0]
		   vTaskStartScheduler();
 8010ddc:	f00e fb7c 	bl	801f4d8 <vTaskStartScheduler>
}
 8010de0:	bf00      	nop
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	08022f00 	.word	0x08022f00
 8010dec:	08002675 	.word	0x08002675
 8010df0:	20013bb8 	.word	0x20013bb8
 8010df4:	08022f14 	.word	0x08022f14
 8010df8:	08008e81 	.word	0x08008e81
 8010dfc:	2001423c 	.word	0x2001423c
 8010e00:	08022f24 	.word	0x08022f24
 8010e04:	0800fa05 	.word	0x0800fa05
 8010e08:	20013ad8 	.word	0x20013ad8
 8010e0c:	08022f34 	.word	0x08022f34
 8010e10:	080073f1 	.word	0x080073f1
 8010e14:	20013ef0 	.word	0x20013ef0
 8010e18:	08022f40 	.word	0x08022f40
 8010e1c:	08005265 	.word	0x08005265
 8010e20:	20014044 	.word	0x20014044
 8010e24:	08022f54 	.word	0x08022f54
 8010e28:	08004821 	.word	0x08004821
 8010e2c:	200140f8 	.word	0x200140f8
 8010e30:	08022f68 	.word	0x08022f68
 8010e34:	0800712d 	.word	0x0800712d
 8010e38:	20013d90 	.word	0x20013d90
 8010e3c:	08022f78 	.word	0x08022f78
 8010e40:	08007b75 	.word	0x08007b75
 8010e44:	20013c84 	.word	0x20013c84

08010e48 <Vc_Simv_Assist_OFF_Task>:


static void Trigger_Time_Monitor();

void Vc_Simv_Assist_OFF_Task(void *argument)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 8010e50:	4b13      	ldr	r3, [pc, #76]	; (8010ea0 <Vc_Simv_Assist_OFF_Task+0x58>)
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	2b02      	cmp	r3, #2
 8010e56:	d00b      	beq.n	8010e70 <Vc_Simv_Assist_OFF_Task+0x28>
 8010e58:	2b02      	cmp	r3, #2
 8010e5a:	dc19      	bgt.n	8010e90 <Vc_Simv_Assist_OFF_Task+0x48>
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d019      	beq.n	8010e94 <Vc_Simv_Assist_OFF_Task+0x4c>
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	d115      	bne.n	8010e90 <Vc_Simv_Assist_OFF_Task+0x48>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(Volume_Mode_Blower_control.BLOWER_DAC_VAL);
 8010e64:	4b0f      	ldr	r3, [pc, #60]	; (8010ea4 <Vc_Simv_Assist_OFF_Task+0x5c>)
 8010e66:	881b      	ldrh	r3, [r3, #0]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f000 f821 	bl	8010eb0 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF>
			break;
 8010e6e:	e012      	b.n	8010e96 <Vc_Simv_Assist_OFF_Task+0x4e>
			case Run_Expiration_Cycle:
				Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 8010e70:	4b0c      	ldr	r3, [pc, #48]	; (8010ea4 <Vc_Simv_Assist_OFF_Task+0x5c>)
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	4a0c      	ldr	r2, [pc, #48]	; (8010ea8 <Vc_Simv_Assist_OFF_Task+0x60>)
 8010e76:	edd2 7a00 	vldr	s15, [r2]
													  PEEP_Maintain_Parameter.PEEP_Temp,
													  PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8010e7a:	4a0b      	ldr	r2, [pc, #44]	; (8010ea8 <Vc_Simv_Assist_OFF_Task+0x60>)
 8010e7c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 8010e80:	b292      	uxth	r2, r2
 8010e82:	4611      	mov	r1, r2
 8010e84:	eeb0 0a67 	vmov.f32	s0, s15
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f000 f845 	bl	8010f18 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF>
			break;
 8010e8e:	e002      	b.n	8010e96 <Vc_Simv_Assist_OFF_Task+0x4e>
			case No_Run_State:
			break;
			default:
			break;
 8010e90:	bf00      	nop
 8010e92:	e000      	b.n	8010e96 <Vc_Simv_Assist_OFF_Task+0x4e>
			break;
 8010e94:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 8010e96:	2002      	movs	r0, #2
 8010e98:	f00e f9c8 	bl	801f22c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 8010e9c:	e7d8      	b.n	8010e50 <Vc_Simv_Assist_OFF_Task+0x8>
 8010e9e:	bf00      	nop
 8010ea0:	20013f7c 	.word	0x20013f7c
 8010ea4:	2001407c 	.word	0x2001407c
 8010ea8:	20014300 	.word	0x20014300
 8010eac:	00000000 	.word	0x00000000

08010eb0 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF>:
}



static void Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(uint16_t Blower_Signal)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	80fb      	strh	r3, [r7, #6]
	Volume_Mode_Blower_control.Blower_Signal_Voltage = ( (Blower_Signal*3.3) /4095);
 8010eba:	88fb      	ldrh	r3, [r7, #6]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ef fad9 	bl	8000474 <__aeabi_i2d>
 8010ec2:	a311      	add	r3, pc, #68	; (adr r3, 8010f08 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x58>)
 8010ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec8:	f7ef fb3e 	bl	8000548 <__aeabi_dmul>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	460b      	mov	r3, r1
 8010ed0:	4610      	mov	r0, r2
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	a30e      	add	r3, pc, #56	; (adr r3, 8010f10 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x60>)
 8010ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eda:	f7ef fc5f 	bl	800079c <__aeabi_ddiv>
 8010ede:	4602      	mov	r2, r0
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	4610      	mov	r0, r2
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	f7ef fe11 	bl	8000b0c <__aeabi_d2f>
 8010eea:	4603      	mov	r3, r0
 8010eec:	4a04      	ldr	r2, [pc, #16]	; (8010f00 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x50>)
 8010eee:	6093      	str	r3, [r2, #8]
	Blower_Signal(Blower_Signal);
 8010ef0:	4a04      	ldr	r2, [pc, #16]	; (8010f04 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x54>)
 8010ef2:	88fb      	ldrh	r3, [r7, #6]
 8010ef4:	6093      	str	r3, [r2, #8]
}
 8010ef6:	bf00      	nop
 8010ef8:	3708      	adds	r7, #8
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	2001407c 	.word	0x2001407c
 8010f04:	40007400 	.word	0x40007400
 8010f08:	66666666 	.word	0x66666666
 8010f0c:	400a6666 	.word	0x400a6666
 8010f10:	00000000 	.word	0x00000000
 8010f14:	40affe00 	.word	0x40affe00

08010f18 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF>:

static void Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	4603      	mov	r3, r0
 8010f20:	ed87 0a00 	vstr	s0, [r7]
 8010f24:	460a      	mov	r2, r1
 8010f26:	80fb      	strh	r3, [r7, #6]
 8010f28:	4613      	mov	r3, r2
 8010f2a:	80bb      	strh	r3, [r7, #4]
		if(VCsimv.Blower_Wait_Time_Milli_Second ==0)
 8010f2c:	4b25      	ldr	r3, [pc, #148]	; (8010fc4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xac>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d102      	bne.n	8010f3a <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x22>
		{
			Blower_Signal( Blower_Signal);
 8010f34:	4a24      	ldr	r2, [pc, #144]	; (8010fc8 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb0>)
 8010f36:	88fb      	ldrh	r3, [r7, #6]
 8010f38:	6093      	str	r3, [r2, #8]

		if(Peep_Status==PEEP_ACHEIVED)
		{

		}
		if(Pressure_sensor.Pressure_Val<= PEEP)
 8010f3a:	4b24      	ldr	r3, [pc, #144]	; (8010fcc <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb4>)
 8010f3c:	789b      	ldrb	r3, [r3, #2]
 8010f3e:	ee07 3a90 	vmov	s15, r3
 8010f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f46:	ed97 7a00 	vldr	s14, [r7]
 8010f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f52:	db23      	blt.n	8010f9c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x84>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 8010f54:	4b1e      	ldr	r3, [pc, #120]	; (8010fd0 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb8>)
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d115      	bne.n	8010f88 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x70>
			{

				if(Trigger_Process == ONE_TIME_TRIGGER)
 8010f5c:	4b1d      	ldr	r3, [pc, #116]	; (8010fd4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xbc>)
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d107      	bne.n	8010f74 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x5c>
				{
					Expiratory_Valve_Lock_Delay=CLOSED;
 8010f64:	4b1a      	ldr	r3, [pc, #104]	; (8010fd0 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb8>)
 8010f66:	2201      	movs	r2, #1
 8010f68:	701a      	strb	r2, [r3, #0]
				   vTaskDelay(Expiratory_Valve_Open_Time);
 8010f6a:	88bb      	ldrh	r3, [r7, #4]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f00e f95d 	bl	801f22c <vTaskDelay>
 8010f72:	e009      	b.n	8010f88 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x70>
				}
				else if(Trigger_Process == COUNTINOUS_TRIGGER)
 8010f74:	4b17      	ldr	r3, [pc, #92]	; (8010fd4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xbc>)
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d105      	bne.n	8010f88 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x70>
				{
					Expiratory_Valve_Lock_Delay=CLOSED;
 8010f7c:	4b14      	ldr	r3, [pc, #80]	; (8010fd0 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb8>)
 8010f7e:	2201      	movs	r2, #1
 8010f80:	701a      	strb	r2, [r3, #0]
				    vTaskDelay(0);
 8010f82:	2000      	movs	r0, #0
 8010f84:	f00e f952 	bl	801f22c <vTaskDelay>
				}
			}
			Peep_Status=PEEP_ACHEIVED;
 8010f88:	4b13      	ldr	r3, [pc, #76]	; (8010fd8 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc0>)
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 8010f8e:	4b13      	ldr	r3, [pc, #76]	; (8010fdc <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc4>)
 8010f90:	695b      	ldr	r3, [r3, #20]
 8010f92:	4a12      	ldr	r2, [pc, #72]	; (8010fdc <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc4>)
 8010f94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010f98:	6153      	str	r3, [r2, #20]
 8010f9a:	e009      	b.n	8010fb0 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x98>
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 8010f9c:	4b0e      	ldr	r3, [pc, #56]	; (8010fd8 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc0>)
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d105      	bne.n	8010fb0 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x98>
		{
			ExpValve_OPEN();
 8010fa4:	4b0d      	ldr	r3, [pc, #52]	; (8010fdc <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc4>)
 8010fa6:	695b      	ldr	r3, [r3, #20]
 8010fa8:	4a0c      	ldr	r2, [pc, #48]	; (8010fdc <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc4>)
 8010faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010fae:	6153      	str	r3, [r2, #20]
		}
	CHECK_TRIGGER_ASSIST_OFF(VC_SIMV.TRIG_WINDOW);
 8010fb0:	4b0b      	ldr	r3, [pc, #44]	; (8010fe0 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc8>)
 8010fb2:	8bdb      	ldrh	r3, [r3, #30]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f000 f815 	bl	8010fe4 <CHECK_TRIGGER_ASSIST_OFF>
}
 8010fba:	bf00      	nop
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	2001416c 	.word	0x2001416c
 8010fc8:	40007400 	.word	0x40007400
 8010fcc:	2001405c 	.word	0x2001405c
 8010fd0:	200140f4 	.word	0x200140f4
 8010fd4:	20013ac8 	.word	0x20013ac8
 8010fd8:	200140f5 	.word	0x200140f5
 8010fdc:	40020400 	.word	0x40020400
 8010fe0:	2001434c 	.word	0x2001434c

08010fe4 <CHECK_TRIGGER_ASSIST_OFF>:




static void CHECK_TRIGGER_ASSIST_OFF(uint16_t Trigger_Check_Time)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	4603      	mov	r3, r0
 8010fec:	80fb      	strh	r3, [r7, #6]
	if(Trigger_Process == ONE_TIME_TRIGGER)
 8010fee:	4b0a      	ldr	r3, [pc, #40]	; (8011018 <CHECK_TRIGGER_ASSIST_OFF+0x34>)
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d104      	bne.n	8011000 <CHECK_TRIGGER_ASSIST_OFF+0x1c>
	{
		Before_Trigger(Trigger_Check_Time);
 8010ff6:	88fb      	ldrh	r3, [r7, #6]
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f000 f80f 	bl	801101c <Before_Trigger>
	else if(Trigger_Process == COUNTINOUS_TRIGGER)
	{
		After_Trigger(Trigger_Check_Time);
	}

}
 8010ffe:	e007      	b.n	8011010 <CHECK_TRIGGER_ASSIST_OFF+0x2c>
	else if(Trigger_Process == COUNTINOUS_TRIGGER)
 8011000:	4b05      	ldr	r3, [pc, #20]	; (8011018 <CHECK_TRIGGER_ASSIST_OFF+0x34>)
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	2b01      	cmp	r3, #1
 8011006:	d103      	bne.n	8011010 <CHECK_TRIGGER_ASSIST_OFF+0x2c>
		After_Trigger(Trigger_Check_Time);
 8011008:	88fb      	ldrh	r3, [r7, #6]
 801100a:	4618      	mov	r0, r3
 801100c:	f000 f82e 	bl	801106c <After_Trigger>
}
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}
 8011018:	20013ac8 	.word	0x20013ac8

0801101c <Before_Trigger>:



static void Before_Trigger(uint16_t Trigger_Check_Time)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	4603      	mov	r3, r0
 8011024:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 8011026:	4b0f      	ldr	r3, [pc, #60]	; (8011064 <Before_Trigger+0x48>)
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	88fb      	ldrh	r3, [r7, #6]
 801102c:	429a      	cmp	r2, r3
 801102e:	dc11      	bgt.n	8011054 <Before_Trigger+0x38>
 8011030:	4b0c      	ldr	r3, [pc, #48]	; (8011064 <Before_Trigger+0x48>)
 8011032:	685b      	ldr	r3, [r3, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d00d      	beq.n	8011054 <Before_Trigger+0x38>
	{

		if (Trigger_Type == Pressure_Trigger)
 8011038:	4b0b      	ldr	r3, [pc, #44]	; (8011068 <Before_Trigger+0x4c>)
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d102      	bne.n	8011046 <Before_Trigger+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 8011040:	f000 f9dc 	bl	80113fc <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 8011044:	e009      	b.n	801105a <Before_Trigger+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 8011046:	4b08      	ldr	r3, [pc, #32]	; (8011068 <Before_Trigger+0x4c>)
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	2b01      	cmp	r3, #1
 801104c:	d105      	bne.n	801105a <Before_Trigger+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 801104e:	f000 f9fd 	bl	801144c <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 8011052:	e002      	b.n	801105a <Before_Trigger+0x3e>

	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 8011054:	f000 fa28 	bl	80114a8 <CHECK_TRIGGER_OFFSET>
	}
}
 8011058:	e000      	b.n	801105c <Before_Trigger+0x40>
		if (Trigger_Type == Pressure_Trigger)
 801105a:	bf00      	nop
}
 801105c:	bf00      	nop
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	200141fc 	.word	0x200141fc
 8011068:	2001398c 	.word	0x2001398c

0801106c <After_Trigger>:



static void After_Trigger(uint16_t Trigger_Check_Time)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	4603      	mov	r3, r0
 8011074:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 8011076:	4b18      	ldr	r3, [pc, #96]	; (80110d8 <After_Trigger+0x6c>)
 8011078:	685a      	ldr	r2, [r3, #4]
 801107a:	88fb      	ldrh	r3, [r7, #6]
 801107c:	429a      	cmp	r2, r3
 801107e:	dc23      	bgt.n	80110c8 <After_Trigger+0x5c>
 8011080:	4b15      	ldr	r3, [pc, #84]	; (80110d8 <After_Trigger+0x6c>)
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d01f      	beq.n	80110c8 <After_Trigger+0x5c>
	{
		if( (Flow_Sensor_cal._Flow_Val > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (VCsimv.Trigger_Check_Wait_Time == 0) )
 8011088:	4b14      	ldr	r3, [pc, #80]	; (80110dc <After_Trigger+0x70>)
 801108a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801108c:	2b00      	cmp	r3, #0
 801108e:	dd1e      	ble.n	80110ce <After_Trigger+0x62>
 8011090:	4b13      	ldr	r3, [pc, #76]	; (80110e0 <After_Trigger+0x74>)
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	2b01      	cmp	r3, #1
 8011096:	d11a      	bne.n	80110ce <After_Trigger+0x62>
 8011098:	4b12      	ldr	r3, [pc, #72]	; (80110e4 <After_Trigger+0x78>)
 801109a:	69db      	ldr	r3, [r3, #28]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d116      	bne.n	80110ce <After_Trigger+0x62>
 80110a0:	4b11      	ldr	r3, [pc, #68]	; (80110e8 <After_Trigger+0x7c>)
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d112      	bne.n	80110ce <After_Trigger+0x62>
		{
			STOP_BLOWER_IF_FLOW_SENSE();
 80110a8:	f000 fa28 	bl	80114fc <STOP_BLOWER_IF_FLOW_SENSE>
				if (Trigger_Type == Pressure_Trigger)
 80110ac:	4b0f      	ldr	r3, [pc, #60]	; (80110ec <After_Trigger+0x80>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d102      	bne.n	80110ba <After_Trigger+0x4e>
				{
					CHECK_PRESSURE_TRIGGER();
 80110b4:	f000 f9a2 	bl	80113fc <CHECK_PRESSURE_TRIGGER>
		if( (Flow_Sensor_cal._Flow_Val > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (VCsimv.Trigger_Check_Wait_Time == 0) )
 80110b8:	e009      	b.n	80110ce <After_Trigger+0x62>
				}
				else if (Trigger_Type == Flow_Trigger)
 80110ba:	4b0c      	ldr	r3, [pc, #48]	; (80110ec <After_Trigger+0x80>)
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d105      	bne.n	80110ce <After_Trigger+0x62>
				{
					CHECK_FLOW_TRIGGER();
 80110c2:	f000 f9c3 	bl	801144c <CHECK_FLOW_TRIGGER>
		if( (Flow_Sensor_cal._Flow_Val > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (VCsimv.Trigger_Check_Wait_Time == 0) )
 80110c6:	e002      	b.n	80110ce <After_Trigger+0x62>
		 }
	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 80110c8:	f000 f9ee 	bl	80114a8 <CHECK_TRIGGER_OFFSET>
	}
}
 80110cc:	e000      	b.n	80110d0 <After_Trigger+0x64>
		if( (Flow_Sensor_cal._Flow_Val > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (VCsimv.Trigger_Check_Wait_Time == 0) )
 80110ce:	bf00      	nop
}
 80110d0:	bf00      	nop
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	200141fc 	.word	0x200141fc
 80110dc:	20013fb0 	.word	0x20013fb0
 80110e0:	200140f5 	.word	0x200140f5
 80110e4:	20014300 	.word	0x20014300
 80110e8:	2001416c 	.word	0x2001416c
 80110ec:	2001398c 	.word	0x2001398c

080110f0 <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset>:



void VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset()
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	af00      	add	r7, sp, #0
	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 80110f4:	4b09      	ldr	r3, [pc, #36]	; (801111c <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x2c>)
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d108      	bne.n	801110e <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x1e>
	{
		Trigger_Process                           = COUNTINOUS_TRIGGER;
 80110fc:	4b08      	ldr	r3, [pc, #32]	; (8011120 <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x30>)
 80110fe:	2201      	movs	r2, #1
 8011100:	701a      	strb	r2, [r3, #0]
		Volume_Mode_Blower_control.BLOWER_DAC_VAL = RESET;
 8011102:	4b08      	ldr	r3, [pc, #32]	; (8011124 <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x34>)
 8011104:	2200      	movs	r2, #0
 8011106:	801a      	strh	r2, [r3, #0]
		VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset();
 8011108:	f000 f84a 	bl	80111a0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset>
	else
	{
		Trigger_Process    = ONE_TIME_TRIGGER;
		VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
	}
}
 801110c:	e004      	b.n	8011118 <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x28>
		Trigger_Process    = ONE_TIME_TRIGGER;
 801110e:	4b04      	ldr	r3, [pc, #16]	; (8011120 <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x30>)
 8011110:	2200      	movs	r2, #0
 8011112:	701a      	strb	r2, [r3, #0]
		VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
 8011114:	f000 fc42 	bl	801199c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>
}
 8011118:	bf00      	nop
 801111a:	bd80      	pop	{r7, pc}
 801111c:	20013ca9 	.word	0x20013ca9
 8011120:	20013ac8 	.word	0x20013ac8
 8011124:	2001407c 	.word	0x2001407c

08011128 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset>:



void VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset()
{
 8011128:	b580      	push	{r7, lr}
 801112a:	af00      	add	r7, sp, #0
	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 801112c:	4b06      	ldr	r3, [pc, #24]	; (8011148 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x20>)
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	2b01      	cmp	r3, #1
 8011132:	d102      	bne.n	801113a <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x12>
	{
		VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset();
 8011134:	f000 f8e0 	bl	80112f8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset>
	else
	{
		Volume_Mode_Blower_control.BLOWER_DAC_VAL=RESET;
		VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
	}
}
 8011138:	e004      	b.n	8011144 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x1c>
		Volume_Mode_Blower_control.BLOWER_DAC_VAL=RESET;
 801113a:	4b04      	ldr	r3, [pc, #16]	; (801114c <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x24>)
 801113c:	2200      	movs	r2, #0
 801113e:	801a      	strh	r2, [r3, #0]
		VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
 8011140:	f000 fd24 	bl	8011b8c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>
}
 8011144:	bf00      	nop
 8011146:	bd80      	pop	{r7, pc}
 8011148:	20013ca9 	.word	0x20013ca9
 801114c:	2001407c 	.word	0x2001407c

08011150 <Switch_TASK_Inspiration_CYCLE>:



static void Switch_TASK_Inspiration_CYCLE()
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af02      	add	r7, sp, #8
	vTaskDelete(One_Time_Handler);
 8011156:	4b0d      	ldr	r3, [pc, #52]	; (801118c <Switch_TASK_Inspiration_CYCLE+0x3c>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	4618      	mov	r0, r3
 801115c:	f00d ffd6 	bl	801f10c <vTaskDelete>
	TIME_Base_parameter._INSPIRATION_TIME = 0 ;
 8011160:	4b0b      	ldr	r3, [pc, #44]	; (8011190 <Switch_TASK_Inspiration_CYCLE+0x40>)
 8011162:	2200      	movs	r2, #0
 8011164:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter._EXPIRATION_TIME  = 0 ;
 8011166:	4b0a      	ldr	r3, [pc, #40]	; (8011190 <Switch_TASK_Inspiration_CYCLE+0x40>)
 8011168:	2200      	movs	r2, #0
 801116a:	605a      	str	r2, [r3, #4]
	Next_Half_Breath_Cycle                = Generate_Inspiration_Cycle;
 801116c:	4b09      	ldr	r3, [pc, #36]	; (8011194 <Switch_TASK_Inspiration_CYCLE+0x44>)
 801116e:	2200      	movs	r2, #0
 8011170:	701a      	strb	r2, [r3, #0]
	xTaskCreate(One_Time_Task,"One-Time-Task", 128, NULL,3, &One_Time_Handler);
 8011172:	4b06      	ldr	r3, [pc, #24]	; (801118c <Switch_TASK_Inspiration_CYCLE+0x3c>)
 8011174:	9301      	str	r3, [sp, #4]
 8011176:	2303      	movs	r3, #3
 8011178:	9300      	str	r3, [sp, #0]
 801117a:	2300      	movs	r3, #0
 801117c:	2280      	movs	r2, #128	; 0x80
 801117e:	4906      	ldr	r1, [pc, #24]	; (8011198 <Switch_TASK_Inspiration_CYCLE+0x48>)
 8011180:	4806      	ldr	r0, [pc, #24]	; (801119c <Switch_TASK_Inspiration_CYCLE+0x4c>)
 8011182:	f00d fe8c 	bl	801ee9e <xTaskCreate>
}
 8011186:	bf00      	nop
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}
 801118c:	20014094 	.word	0x20014094
 8011190:	200141fc 	.word	0x200141fc
 8011194:	20013d20 	.word	0x20013d20
 8011198:	08022f88 	.word	0x08022f88
 801119c:	0800f869 	.word	0x0800f869

080111a0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset>:



void VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset()
{
 80111a0:	b590      	push	{r4, r7, lr}
 80111a2:	b083      	sub	sp, #12
 80111a4:	af02      	add	r7, sp, #8
	Breath_Count         = Count_The_Breath;
 80111a6:	4b3f      	ldr	r3, [pc, #252]	; (80112a4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 80111a8:	2201      	movs	r2, #1
 80111aa:	701a      	strb	r2, [r3, #0]
	ExpValve_CLOSE();
 80111ac:	4b3e      	ldr	r3, [pc, #248]	; (80112a8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 80111ae:	695b      	ldr	r3, [r3, #20]
 80111b0:	4a3d      	ldr	r2, [pc, #244]	; (80112a8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 80111b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80111b6:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 80111b8:	f7f7 ff30 	bl	800901c <PIP_AVERAGE>
	PEEP_AVERAGE();
 80111bc:	f7f7 ff54 	bl	8009068 <PEEP_AVERAGE>
	Set_Blower_Val();
 80111c0:	f000 f9ae 	bl	8011520 <Set_Blower_Val>
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 80111c4:	4b39      	ldr	r3, [pc, #228]	; (80112ac <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x10c>)
 80111c6:	78db      	ldrb	r3, [r3, #3]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7fa fc9d 	bl	800bb08 <O2_DAC_Control>
	Check_Alert();
 80111ce:	f7ef ff93 	bl	80010f8 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 80111d2:	f7f0 f83b 	bl	800124c <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 80111d6:	f7f0 fbeb 	bl	80019b0 <LED_Alert>
	Alert_Status = NO_ALERT;
 80111da:	4b35      	ldr	r3, [pc, #212]	; (80112b0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x110>)
 80111dc:	2200      	movs	r2, #0
 80111de:	701a      	strb	r2, [r3, #0]
	Sampled_Parameter_Inspiration_time();
 80111e0:	f7ff fb82 	bl	80108e8 <Sampled_Parameter_Inspiration_time>
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time      = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 80111e4:	4b33      	ldr	r3, [pc, #204]	; (80112b4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x114>)
 80111e6:	7c18      	ldrb	r0, [r3, #16]
 80111e8:	4b33      	ldr	r3, [pc, #204]	; (80112b8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x118>)
 80111ea:	78d9      	ldrb	r1, [r3, #3]
 80111ec:	4b32      	ldr	r3, [pc, #200]	; (80112b8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x118>)
 80111ee:	689a      	ldr	r2, [r3, #8]
 80111f0:	4b31      	ldr	r3, [pc, #196]	; (80112b8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x118>)
 80111f2:	789c      	ldrb	r4, [r3, #2]
																														      VC_SIMV.RESPIRATORY_RATE_Val,
																														      VC_SIMV.INSPIRATION_TIME,
																														      VC_SIMV.PEEP_Val,
																														      PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 80111f4:	4b2f      	ldr	r3, [pc, #188]	; (80112b4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x114>)
 80111f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time      = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	4623      	mov	r3, r4
 8011200:	f7f5 f8bc 	bl	800637c <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode>
 8011204:	4603      	mov	r3, r0
 8011206:	b21a      	sxth	r2, r3
 8011208:	4b2a      	ldr	r3, [pc, #168]	; (80112b4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x114>)
 801120a:	809a      	strh	r2, [r3, #4]

	if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 801120c:	4b2b      	ldr	r3, [pc, #172]	; (80112bc <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x11c>)
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	2b01      	cmp	r3, #1
 8011212:	d106      	bne.n	8011222 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x82>
	{
		BREATH_STATE                                      = PATIENT_TRIGGER_INSPIRATION;
 8011214:	4b2a      	ldr	r3, [pc, #168]	; (80112c0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x120>)
 8011216:	2202      	movs	r2, #2
 8011218:	701a      	strb	r2, [r3, #0]
		LED_STATUS                                        = EXPIRATION_LED;
 801121a:	4b2a      	ldr	r3, [pc, #168]	; (80112c4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x124>)
 801121c:	2202      	movs	r2, #2
 801121e:	701a      	strb	r2, [r3, #0]
 8011220:	e002      	b.n	8011228 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x88>
	}
	else
	{
		BREATH_STATE                                       = INSPIRATION_CYCLE;
 8011222:	4b27      	ldr	r3, [pc, #156]	; (80112c0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x120>)
 8011224:	2200      	movs	r2, #0
 8011226:	701a      	strb	r2, [r3, #0]
	}

	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 8011228:	4b27      	ldr	r3, [pc, #156]	; (80112c8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x128>)
 801122a:	2200      	movs	r2, #0
 801122c:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 801122e:	4b27      	ldr	r3, [pc, #156]	; (80112cc <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x12c>)
 8011230:	2200      	movs	r2, #0
 8011232:	701a      	strb	r2, [r3, #0]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 8011234:	4b26      	ldr	r3, [pc, #152]	; (80112d0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x130>)
 8011236:	2200      	movs	r2, #0
 8011238:	701a      	strb	r2, [r3, #0]
	TIME_Base_parameter._INSPIRATION_TIME                      = VC_SIMV.INSPIRATION_TIME;
 801123a:	4b1f      	ldr	r3, [pc, #124]	; (80112b8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x118>)
 801123c:	689b      	ldr	r3, [r3, #8]
 801123e:	461a      	mov	r2, r3
 8011240:	4b24      	ldr	r3, [pc, #144]	; (80112d4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x134>)
 8011242:	601a      	str	r2, [r3, #0]

	Led_Delay                                                  = (Total_Volume_Achieved_Time  /46);
 8011244:	4b24      	ldr	r3, [pc, #144]	; (80112d8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x138>)
 8011246:	881b      	ldrh	r3, [r3, #0]
 8011248:	4a24      	ldr	r2, [pc, #144]	; (80112dc <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x13c>)
 801124a:	fba2 2303 	umull	r2, r3, r2, r3
 801124e:	095b      	lsrs	r3, r3, #5
 8011250:	b29b      	uxth	r3, r3
 8011252:	ee07 3a90 	vmov	s15, r3
 8011256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801125a:	4b21      	ldr	r3, [pc, #132]	; (80112e0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x140>)
 801125c:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                                   = 1;
 8011260:	4b20      	ldr	r3, [pc, #128]	; (80112e4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x144>)
 8011262:	2201      	movs	r2, #1
 8011264:	701a      	strb	r2, [r3, #0]
	Volume_Achieved_Time                                       = 0;
 8011266:	4b20      	ldr	r3, [pc, #128]	; (80112e8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x148>)
 8011268:	2200      	movs	r2, #0
 801126a:	801a      	strh	r2, [r3, #0]
	Total_Volume_Achieved_Time                                 = 0;
 801126c:	4b1a      	ldr	r3, [pc, #104]	; (80112d8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x138>)
 801126e:	2200      	movs	r2, #0
 8011270:	801a      	strh	r2, [r3, #0]

	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 8011272:	4b18      	ldr	r3, [pc, #96]	; (80112d4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x134>)
 8011274:	2200      	movs	r2, #0
 8011276:	609a      	str	r2, [r3, #8]
	vol.Volume                                                 = RESET;
 8011278:	4b1c      	ldr	r3, [pc, #112]	; (80112ec <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x14c>)
 801127a:	f04f 0200 	mov.w	r2, #0
 801127e:	601a      	str	r2, [r3, #0]
	vol.Volume_max                                             = RESET;
 8011280:	4b1a      	ldr	r3, [pc, #104]	; (80112ec <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x14c>)
 8011282:	2200      	movs	r2, #0
 8011284:	609a      	str	r2, [r3, #8]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 8011286:	4b1a      	ldr	r3, [pc, #104]	; (80112f0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x150>)
 8011288:	2201      	movs	r2, #1
 801128a:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 801128c:	4b19      	ldr	r3, [pc, #100]	; (80112f4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x154>)
 801128e:	2201      	movs	r2, #1
 8011290:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_SIMV.INSPIRATION_TIME);
 8011292:	4b09      	ldr	r3, [pc, #36]	; (80112b8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x118>)
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	4618      	mov	r0, r3
 8011298:	f00d ffc8 	bl	801f22c <vTaskDelay>
}
 801129c:	bf00      	nop
 801129e:	3704      	adds	r7, #4
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd90      	pop	{r4, r7, pc}
 80112a4:	200139a6 	.word	0x200139a6
 80112a8:	40020400 	.word	0x40020400
 80112ac:	20013ba4 	.word	0x20013ba4
 80112b0:	20013f88 	.word	0x20013f88
 80112b4:	20014300 	.word	0x20014300
 80112b8:	2001434c 	.word	0x2001434c
 80112bc:	20013ca9 	.word	0x20013ca9
 80112c0:	200140fd 	.word	0x200140fd
 80112c4:	20013aed 	.word	0x20013aed
 80112c8:	200140f5 	.word	0x200140f5
 80112cc:	200140f4 	.word	0x200140f4
 80112d0:	20013b70 	.word	0x20013b70
 80112d4:	200141fc 	.word	0x200141fc
 80112d8:	200142b8 	.word	0x200142b8
 80112dc:	b21642c9 	.word	0xb21642c9
 80112e0:	20014078 	.word	0x20014078
 80112e4:	20013f3c 	.word	0x20013f3c
 80112e8:	20013a00 	.word	0x20013a00
 80112ec:	200140c8 	.word	0x200140c8
 80112f0:	20013d20 	.word	0x20013d20
 80112f4:	20013f7c 	.word	0x20013f7c

080112f8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset>:



void VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset()
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	af00      	add	r7, sp, #0
	if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 80112fc:	4b31      	ldr	r3, [pc, #196]	; (80113c4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xcc>)
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	2b01      	cmp	r3, #1
 8011302:	d106      	bne.n	8011312 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x1a>
	{
		BREATH_STATE                                      = PATIENT_TRIGGER_EXPIRATION;
 8011304:	4b30      	ldr	r3, [pc, #192]	; (80113c8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd0>)
 8011306:	2203      	movs	r2, #3
 8011308:	701a      	strb	r2, [r3, #0]
		LED_STATUS                                        = Idle_LED;
 801130a:	4b30      	ldr	r3, [pc, #192]	; (80113cc <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd4>)
 801130c:	2200      	movs	r2, #0
 801130e:	701a      	strb	r2, [r3, #0]
 8011310:	e002      	b.n	8011318 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x20>
	}
	else
	{
		BREATH_STATE                                       = EXPIRATION_CYCLE;
 8011312:	4b2d      	ldr	r3, [pc, #180]	; (80113c8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd0>)
 8011314:	2201      	movs	r2, #1
 8011316:	701a      	strb	r2, [r3, #0]
	}
	PEEP_Maintain_Parameter.CHECK_TRIGGER               = 1500;
 8011318:	4b2d      	ldr	r3, [pc, #180]	; (80113d0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 801131a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801131e:	61da      	str	r2, [r3, #28]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 8011320:	4b2b      	ldr	r3, [pc, #172]	; (80113d0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 8011322:	2200      	movs	r2, #0
 8011324:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 8011326:	4b2a      	ldr	r3, [pc, #168]	; (80113d0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 8011328:	2200      	movs	r2, #0
 801132a:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 801132c:	4b28      	ldr	r3, [pc, #160]	; (80113d0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 801132e:	2200      	movs	r2, #0
 8011330:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 8011332:	4b27      	ldr	r3, [pc, #156]	; (80113d0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 8011334:	2200      	movs	r2, #0
 8011336:	60da      	str	r2, [r3, #12]
	Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 8011338:	4b22      	ldr	r3, [pc, #136]	; (80113c4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xcc>)
 801133a:	2200      	movs	r2, #0
 801133c:	701a      	strb	r2, [r3, #0]
	Trigger_Time_Monitor();
 801133e:	f000 f907 	bl	8011550 <Trigger_Time_Monitor>
	Volume_Mode_Blower_control.PEEP_BLOWER_DAC_VAL      = TUNE_PEEP_BLOWER(&Volume_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL,Common_Mode_Parameter._PEEP_Val );
 8011342:	4b24      	ldr	r3, [pc, #144]	; (80113d4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xdc>)
 8011344:	785b      	ldrb	r3, [r3, #1]
 8011346:	4619      	mov	r1, r3
 8011348:	4823      	ldr	r0, [pc, #140]	; (80113d8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe0>)
 801134a:	f7fb fa8f 	bl	800c86c <TUNE_PEEP_BLOWER>
 801134e:	4603      	mov	r3, r0
 8011350:	461a      	mov	r2, r3
 8011352:	4b22      	ldr	r3, [pc, #136]	; (80113dc <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe4>)
 8011354:	819a      	strh	r2, [r3, #12]
	Volume_Mode_Blower_control.BLOWER_DAC_VAL           = Volume_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 8011356:	4b21      	ldr	r3, [pc, #132]	; (80113dc <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe4>)
 8011358:	899a      	ldrh	r2, [r3, #12]
 801135a:	4b20      	ldr	r3, [pc, #128]	; (80113dc <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe4>)
 801135c:	801a      	strh	r2, [r3, #0]
	Adjust_Servo_And_Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 801135e:	4b1d      	ldr	r3, [pc, #116]	; (80113d4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xdc>)
 8011360:	78db      	ldrb	r3, [r3, #3]
 8011362:	4618      	mov	r0, r3
 8011364:	f7fa fa0a 	bl	800b77c <Adjust_Servo_And_Calculate_O2>
	Alert_Expiration_Time_Parameter();
 8011368:	f7ef ffe0 	bl	800132c <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = VC_SIMV.EXPIRATION_TIME;
 801136c:	4b1c      	ldr	r3, [pc, #112]	; (80113e0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe8>)
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	461a      	mov	r2, r3
 8011372:	4b1c      	ldr	r3, [pc, #112]	; (80113e4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xec>)
 8011374:	605a      	str	r2, [r3, #4]

	Led_Delay                                           = ( (PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time + 500)  /46);
 8011376:	4b16      	ldr	r3, [pc, #88]	; (80113d0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xd8>)
 8011378:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801137c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011380:	4a19      	ldr	r2, [pc, #100]	; (80113e8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xf0>)
 8011382:	fb82 1203 	smull	r1, r2, r2, r3
 8011386:	441a      	add	r2, r3
 8011388:	1152      	asrs	r2, r2, #5
 801138a:	17db      	asrs	r3, r3, #31
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	ee07 3a90 	vmov	s15, r3
 8011392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011396:	4b15      	ldr	r3, [pc, #84]	; (80113ec <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xf4>)
 8011398:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                            = 45;
 801139c:	4b14      	ldr	r3, [pc, #80]	; (80113f0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xf8>)
 801139e:	222d      	movs	r2, #45	; 0x2d
 80113a0:	701a      	strb	r2, [r3, #0]

	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 80113a2:	4b10      	ldr	r3, [pc, #64]	; (80113e4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xec>)
 80113a4:	2200      	movs	r2, #0
 80113a6:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 80113a8:	4b12      	ldr	r3, [pc, #72]	; (80113f4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xfc>)
 80113aa:	2200      	movs	r2, #0
 80113ac:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 80113ae:	4b12      	ldr	r3, [pc, #72]	; (80113f8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x100>)
 80113b0:	2202      	movs	r2, #2
 80113b2:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_SIMV.EXPIRATION_TIME);
 80113b4:	4b0a      	ldr	r3, [pc, #40]	; (80113e0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xe8>)
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	4618      	mov	r0, r3
 80113ba:	f00d ff37 	bl	801f22c <vTaskDelay>
}
 80113be:	bf00      	nop
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20013ca9 	.word	0x20013ca9
 80113c8:	200140fd 	.word	0x200140fd
 80113cc:	20013aed 	.word	0x20013aed
 80113d0:	20014300 	.word	0x20014300
 80113d4:	20013ba4 	.word	0x20013ba4
 80113d8:	2001408a 	.word	0x2001408a
 80113dc:	2001407c 	.word	0x2001407c
 80113e0:	2001434c 	.word	0x2001434c
 80113e4:	200141fc 	.word	0x200141fc
 80113e8:	b21642c9 	.word	0xb21642c9
 80113ec:	20014078 	.word	0x20014078
 80113f0:	20013f3c 	.word	0x20013f3c
 80113f4:	20013d20 	.word	0x20013d20
 80113f8:	20013f7c 	.word	0x20013f7c

080113fc <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	af00      	add	r7, sp, #0
	if (( Pressure_sensor.Pressure_Val < (Pressure_Trigger_Offset - VC_SIMV.TRIG_LMT )))
 8011400:	4b0e      	ldr	r3, [pc, #56]	; (801143c <CHECK_PRESSURE_TRIGGER+0x40>)
 8011402:	789b      	ldrb	r3, [r3, #2]
 8011404:	ee07 3a90 	vmov	s15, r3
 8011408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801140c:	4b0c      	ldr	r3, [pc, #48]	; (8011440 <CHECK_PRESSURE_TRIGGER+0x44>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	ee07 3a90 	vmov	s15, r3
 8011414:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011418:	4b0a      	ldr	r3, [pc, #40]	; (8011444 <CHECK_PRESSURE_TRIGGER+0x48>)
 801141a:	edd3 7a05 	vldr	s15, [r3, #20]
 801141e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801142a:	d400      	bmi.n	801142e <CHECK_PRESSURE_TRIGGER+0x32>
	{
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 801142c:	e004      	b.n	8011438 <CHECK_PRESSURE_TRIGGER+0x3c>
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
 801142e:	4b06      	ldr	r3, [pc, #24]	; (8011448 <CHECK_PRESSURE_TRIGGER+0x4c>)
 8011430:	2201      	movs	r2, #1
 8011432:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 8011434:	f7ff fe8c 	bl	8011150 <Switch_TASK_Inspiration_CYCLE>
}
 8011438:	bf00      	nop
 801143a:	bd80      	pop	{r7, pc}
 801143c:	2001405c 	.word	0x2001405c
 8011440:	20014024 	.word	0x20014024
 8011444:	2001434c 	.word	0x2001434c
 8011448:	20013ca9 	.word	0x20013ca9

0801144c <CHECK_FLOW_TRIGGER>:


static void CHECK_FLOW_TRIGGER()
{
 801144c:	b580      	push	{r7, lr}
 801144e:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+VC_SIMV.TRIG_LMT )))
 8011450:	4b10      	ldr	r3, [pc, #64]	; (8011494 <CHECK_FLOW_TRIGGER+0x48>)
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	ee07 3a90 	vmov	s15, r3
 8011458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801145c:	4b0e      	ldr	r3, [pc, #56]	; (8011498 <CHECK_FLOW_TRIGGER+0x4c>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	ee07 3a90 	vmov	s15, r3
 8011464:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011468:	4b0c      	ldr	r3, [pc, #48]	; (801149c <CHECK_FLOW_TRIGGER+0x50>)
 801146a:	edd3 7a05 	vldr	s15, [r3, #20]
 801146e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801147a:	dc00      	bgt.n	801147e <CHECK_FLOW_TRIGGER+0x32>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();

	}
}
 801147c:	e008      	b.n	8011490 <CHECK_FLOW_TRIGGER+0x44>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
 801147e:	4b05      	ldr	r3, [pc, #20]	; (8011494 <CHECK_FLOW_TRIGGER+0x48>)
 8011480:	781a      	ldrb	r2, [r3, #0]
 8011482:	4b07      	ldr	r3, [pc, #28]	; (80114a0 <CHECK_FLOW_TRIGGER+0x54>)
 8011484:	701a      	strb	r2, [r3, #0]
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
 8011486:	4b07      	ldr	r3, [pc, #28]	; (80114a4 <CHECK_FLOW_TRIGGER+0x58>)
 8011488:	2201      	movs	r2, #1
 801148a:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 801148c:	f7ff fe60 	bl	8011150 <Switch_TASK_Inspiration_CYCLE>
}
 8011490:	bf00      	nop
 8011492:	bd80      	pop	{r7, pc}
 8011494:	20014068 	.word	0x20014068
 8011498:	20014018 	.word	0x20014018
 801149c:	2001434c 	.word	0x2001434c
 80114a0:	20014240 	.word	0x20014240
 80114a4:	20013ca9 	.word	0x20013ca9

080114a8 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 80114a8:	b480      	push	{r7}
 80114aa:	af00      	add	r7, sp, #0
	if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 80114ac:	4b0e      	ldr	r3, [pc, #56]	; (80114e8 <CHECK_TRIGGER_OFFSET+0x40>)
 80114ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d008      	beq.n	80114c6 <CHECK_TRIGGER_OFFSET+0x1e>
 80114b4:	4b0c      	ldr	r3, [pc, #48]	; (80114e8 <CHECK_TRIGGER_OFFSET+0x40>)
 80114b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114b8:	f113 0f08 	cmn.w	r3, #8
 80114bc:	db0f      	blt.n	80114de <CHECK_TRIGGER_OFFSET+0x36>
 80114be:	4b0a      	ldr	r3, [pc, #40]	; (80114e8 <CHECK_TRIGGER_OFFSET+0x40>)
 80114c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	da0b      	bge.n	80114de <CHECK_TRIGGER_OFFSET+0x36>
	{
		Pressure_Trigger_Offset  =  Pressure_sensor.Pressure_Val;
 80114c6:	4b09      	ldr	r3, [pc, #36]	; (80114ec <CHECK_TRIGGER_OFFSET+0x44>)
 80114c8:	789b      	ldrb	r3, [r3, #2]
 80114ca:	461a      	mov	r2, r3
 80114cc:	4b08      	ldr	r3, [pc, #32]	; (80114f0 <CHECK_TRIGGER_OFFSET+0x48>)
 80114ce:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  Flow_Sensor_cal._Flow_Val;
 80114d0:	4b05      	ldr	r3, [pc, #20]	; (80114e8 <CHECK_TRIGGER_OFFSET+0x40>)
 80114d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114d4:	4a07      	ldr	r2, [pc, #28]	; (80114f4 <CHECK_TRIGGER_OFFSET+0x4c>)
 80114d6:	6013      	str	r3, [r2, #0]
		FLOW_TRIGGER             =  RESET;
 80114d8:	4b07      	ldr	r3, [pc, #28]	; (80114f8 <CHECK_TRIGGER_OFFSET+0x50>)
 80114da:	2200      	movs	r2, #0
 80114dc:	701a      	strb	r2, [r3, #0]

	}
}
 80114de:	bf00      	nop
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	20013fb0 	.word	0x20013fb0
 80114ec:	2001405c 	.word	0x2001405c
 80114f0:	20014024 	.word	0x20014024
 80114f4:	20014018 	.word	0x20014018
 80114f8:	20014068 	.word	0x20014068

080114fc <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 80114fc:	b480      	push	{r7}
 80114fe:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 8011500:	4b05      	ldr	r3, [pc, #20]	; (8011518 <STOP_BLOWER_IF_FLOW_SENSE+0x1c>)
 8011502:	2200      	movs	r2, #0
 8011504:	609a      	str	r2, [r3, #8]
	VCsimv.Blower_Wait_Time_Milli_Second = 500;
 8011506:	4b05      	ldr	r3, [pc, #20]	; (801151c <STOP_BLOWER_IF_FLOW_SENSE+0x20>)
 8011508:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801150c:	601a      	str	r2, [r3, #0]
}
 801150e:	bf00      	nop
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr
 8011518:	40007400 	.word	0x40007400
 801151c:	2001416c 	.word	0x2001416c

08011520 <Set_Blower_Val>:



static void Set_Blower_Val()
{
 8011520:	b580      	push	{r7, lr}
 8011522:	af00      	add	r7, sp, #0
	if(PEEP_Maintain_Parameter.PEEP_AVG_VAL   == VC_SIMV.PEEP_Val  )
 8011524:	4b07      	ldr	r3, [pc, #28]	; (8011544 <Set_Blower_Val+0x24>)
 8011526:	7c1a      	ldrb	r2, [r3, #16]
 8011528:	4b07      	ldr	r3, [pc, #28]	; (8011548 <Set_Blower_Val+0x28>)
 801152a:	789b      	ldrb	r3, [r3, #2]
 801152c:	429a      	cmp	r2, r3
 801152e:	d107      	bne.n	8011540 <Set_Blower_Val+0x20>
	{
		Change_DAC_Values(VC_SIMV.PEEP_Val ,Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL);
 8011530:	4b05      	ldr	r3, [pc, #20]	; (8011548 <Set_Blower_Val+0x28>)
 8011532:	789b      	ldrb	r3, [r3, #2]
 8011534:	4a05      	ldr	r2, [pc, #20]	; (801154c <Set_Blower_Val+0x2c>)
 8011536:	8a12      	ldrh	r2, [r2, #16]
 8011538:	4611      	mov	r1, r2
 801153a:	4618      	mov	r0, r3
 801153c:	f7f8 f89e 	bl	800967c <Change_DAC_Values>
	}
}
 8011540:	bf00      	nop
 8011542:	bd80      	pop	{r7, pc}
 8011544:	20014300 	.word	0x20014300
 8011548:	2001434c 	.word	0x2001434c
 801154c:	20014030 	.word	0x20014030

08011550 <Trigger_Time_Monitor>:



static void Trigger_Time_Monitor()
{
 8011550:	b480      	push	{r7}
 8011552:	af00      	add	r7, sp, #0
	VC_SIMV.CALC_TRIG_VAL 	                 =  (VC_SIMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 8011554:	4b11      	ldr	r3, [pc, #68]	; (801159c <Trigger_Time_Monitor+0x4c>)
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	b29a      	uxth	r2, r3
 801155a:	4b11      	ldr	r3, [pc, #68]	; (80115a0 <Trigger_Time_Monitor+0x50>)
 801155c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011560:	b29b      	uxth	r3, r3
 8011562:	1ad3      	subs	r3, r2, r3
 8011564:	b29a      	uxth	r2, r3
 8011566:	4b0d      	ldr	r3, [pc, #52]	; (801159c <Trigger_Time_Monitor+0x4c>)
 8011568:	835a      	strh	r2, [r3, #26]
	if(VC_SIMV.CALC_TRIG_VAL <0)
	{
		VC_SIMV.CALC_TRIG_VAL = (VC_SIMV.CALC_TRIG_VAL * (-1));
	}
	VC_SIMV.TOLERANCE_EWAVE =  VC_SIMV.TRIG_TIME;
 801156a:	4b0c      	ldr	r3, [pc, #48]	; (801159c <Trigger_Time_Monitor+0x4c>)
 801156c:	8b1a      	ldrh	r2, [r3, #24]
 801156e:	4b0b      	ldr	r3, [pc, #44]	; (801159c <Trigger_Time_Monitor+0x4c>)
 8011570:	839a      	strh	r2, [r3, #28]
	if(VC_SIMV.CALC_TRIG_VAL < VC_SIMV.TRIG_TIME )
 8011572:	4b0a      	ldr	r3, [pc, #40]	; (801159c <Trigger_Time_Monitor+0x4c>)
 8011574:	8b5a      	ldrh	r2, [r3, #26]
 8011576:	4b09      	ldr	r3, [pc, #36]	; (801159c <Trigger_Time_Monitor+0x4c>)
 8011578:	8b1b      	ldrh	r3, [r3, #24]
 801157a:	429a      	cmp	r2, r3
 801157c:	d205      	bcs.n	801158a <Trigger_Time_Monitor+0x3a>
	{
		VC_SIMV.TOLERANCE_EWAVE =  (VC_SIMV.TRIG_TIME - 200) ;
 801157e:	4b07      	ldr	r3, [pc, #28]	; (801159c <Trigger_Time_Monitor+0x4c>)
 8011580:	8b1b      	ldrh	r3, [r3, #24]
 8011582:	3bc8      	subs	r3, #200	; 0xc8
 8011584:	b29a      	uxth	r2, r3
 8011586:	4b05      	ldr	r3, [pc, #20]	; (801159c <Trigger_Time_Monitor+0x4c>)
 8011588:	839a      	strh	r2, [r3, #28]
	}

	VC_SIMV.TRIG_WINDOW		                 = VC_SIMV.TOLERANCE_EWAVE;
 801158a:	4b04      	ldr	r3, [pc, #16]	; (801159c <Trigger_Time_Monitor+0x4c>)
 801158c:	8b9a      	ldrh	r2, [r3, #28]
 801158e:	4b03      	ldr	r3, [pc, #12]	; (801159c <Trigger_Time_Monitor+0x4c>)
 8011590:	83da      	strh	r2, [r3, #30]
}
 8011592:	bf00      	nop
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr
 801159c:	2001434c 	.word	0x2001434c
 80115a0:	20014300 	.word	0x20014300

080115a4 <Vc_Simv_Mode_Packet_Data>:
static void Trigger_Time_Monitor();

extern uint16_t Expiratory_Valve_Open_Time;

void Vc_Simv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	VC_SIMV.VOLUME_Val             = Receive_Graph_Packet->VTI_VS;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	88db      	ldrh	r3, [r3, #6]
 80115b0:	b29a      	uxth	r2, r3
 80115b2:	4b4f      	ldr	r3, [pc, #316]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80115b4:	801a      	strh	r2, [r3, #0]
	VC_SIMV.PEEP_Val               = Receive_Graph_Packet->PEEP_CPAP_Plow;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	795a      	ldrb	r2, [r3, #5]
 80115ba:	4b4d      	ldr	r3, [pc, #308]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80115bc:	709a      	strb	r2, [r3, #2]
	VC_SIMV.FIO2_Val               = Receive_Graph_Packet->FiO2;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	7a1a      	ldrb	r2, [r3, #8]
 80115c2:	4b4b      	ldr	r3, [pc, #300]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80115c4:	711a      	strb	r2, [r3, #4]

	VC_SIMV.RESPIRATORY_RATE_Val   = Receive_Graph_Packet->RR;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	7a5a      	ldrb	r2, [r3, #9]
 80115ca:	4b49      	ldr	r3, [pc, #292]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80115cc:	70da      	strb	r2, [r3, #3]
	One_Breathe_time               = (One_Minite_In_MS / VC_SIMV.RESPIRATORY_RATE_Val);
 80115ce:	4b48      	ldr	r3, [pc, #288]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80115d0:	78db      	ldrb	r3, [r3, #3]
 80115d2:	461a      	mov	r2, r3
 80115d4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80115d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80115dc:	60fb      	str	r3, [r7, #12]
	VC_SIMV.INSPIRATION_TIME       = ( ( Receive_Graph_Packet->T_high) * 100 );
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	7a9b      	ldrb	r3, [r3, #10]
 80115e2:	461a      	mov	r2, r3
 80115e4:	2364      	movs	r3, #100	; 0x64
 80115e6:	fb03 f302 	mul.w	r3, r3, r2
 80115ea:	461a      	mov	r2, r3
 80115ec:	4b40      	ldr	r3, [pc, #256]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80115ee:	609a      	str	r2, [r3, #8]
	VC_SIMV.EXPIRATION_TIME        = (One_Breathe_time - VC_SIMV.INSPIRATION_TIME);
 80115f0:	4b3f      	ldr	r3, [pc, #252]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80115f2:	689b      	ldr	r3, [r3, #8]
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	1ad3      	subs	r3, r2, r3
 80115f8:	4a3d      	ldr	r2, [pc, #244]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80115fa:	60d3      	str	r3, [r2, #12]

	VC_SIMV.FLOW_RATE_Val          = Receive_Graph_Packet->Flow_Limit_FiO2_Flow_Limit;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	7b5a      	ldrb	r2, [r3, #13]
 8011600:	4b3b      	ldr	r3, [pc, #236]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 8011602:	749a      	strb	r2, [r3, #18]


	VC_SIMV.Assist_Control    	   = (0x80 & (Receive_Graph_Packet->Control_Byte))>>7;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	78db      	ldrb	r3, [r3, #3]
 8011608:	09db      	lsrs	r3, r3, #7
 801160a:	b2da      	uxtb	r2, r3
 801160c:	4b38      	ldr	r3, [pc, #224]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 801160e:	f883 2020 	strb.w	r2, [r3, #32]
	VC_SIMV.TRIG_TYPE     	       = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	78db      	ldrb	r3, [r3, #3]
 8011616:	099b      	lsrs	r3, r3, #6
 8011618:	b2db      	uxtb	r3, r3
 801161a:	f003 0301 	and.w	r3, r3, #1
 801161e:	b2da      	uxtb	r2, r3
 8011620:	4b33      	ldr	r3, [pc, #204]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 8011622:	74da      	strb	r2, [r3, #19]
	VC_SIMV.TRIG_LMT     	       = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	7c1b      	ldrb	r3, [r3, #16]
 8011628:	4a32      	ldr	r2, [pc, #200]	; (80116f4 <Vc_Simv_Mode_Packet_Data+0x150>)
 801162a:	fba2 2303 	umull	r2, r3, r2, r3
 801162e:	08db      	lsrs	r3, r3, #3
 8011630:	b2db      	uxtb	r3, r3
 8011632:	ee07 3a90 	vmov	s15, r3
 8011636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801163a:	4b2d      	ldr	r3, [pc, #180]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 801163c:	edc3 7a05 	vstr	s15, [r3, #20]
	VC_SIMV.TRIG_TIME     	       = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	7bdb      	ldrb	r3, [r3, #15]
 8011644:	b29b      	uxth	r3, r3
 8011646:	461a      	mov	r2, r3
 8011648:	0092      	lsls	r2, r2, #2
 801164a:	4413      	add	r3, r2
 801164c:	461a      	mov	r2, r3
 801164e:	0091      	lsls	r1, r2, #2
 8011650:	461a      	mov	r2, r3
 8011652:	460b      	mov	r3, r1
 8011654:	4413      	add	r3, r2
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	b29a      	uxth	r2, r3
 801165a:	4b25      	ldr	r3, [pc, #148]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 801165c:	831a      	strh	r2, [r3, #24]

	VC_SIMV.CALC_TRIG_VAL 	                 =  (VC_SIMV.EXPIRATION_TIME   - Expiratory_Valve_Open_Time );
 801165e:	4b24      	ldr	r3, [pc, #144]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	b29a      	uxth	r2, r3
 8011664:	4b24      	ldr	r3, [pc, #144]	; (80116f8 <Vc_Simv_Mode_Packet_Data+0x154>)
 8011666:	881b      	ldrh	r3, [r3, #0]
 8011668:	1ad3      	subs	r3, r2, r3
 801166a:	b29a      	uxth	r2, r3
 801166c:	4b20      	ldr	r3, [pc, #128]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 801166e:	835a      	strh	r2, [r3, #26]
	if(VC_SIMV.CALC_TRIG_VAL <0)
	{
		VC_SIMV.CALC_TRIG_VAL = (VC_SIMV.CALC_TRIG_VAL * (-1));
	}

	VC_SIMV.TOLERANCE_EWAVE =  VC_SIMV.TRIG_TIME;
 8011670:	4b1f      	ldr	r3, [pc, #124]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 8011672:	8b1a      	ldrh	r2, [r3, #24]
 8011674:	4b1e      	ldr	r3, [pc, #120]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 8011676:	839a      	strh	r2, [r3, #28]
	if(VC_SIMV.CALC_TRIG_VAL < VC_SIMV.TRIG_TIME )
 8011678:	4b1d      	ldr	r3, [pc, #116]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 801167a:	8b5a      	ldrh	r2, [r3, #26]
 801167c:	4b1c      	ldr	r3, [pc, #112]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 801167e:	8b1b      	ldrh	r3, [r3, #24]
 8011680:	429a      	cmp	r2, r3
 8011682:	d205      	bcs.n	8011690 <Vc_Simv_Mode_Packet_Data+0xec>
	{
		VC_SIMV.TOLERANCE_EWAVE =  (VC_SIMV.TRIG_TIME - 200) ;
 8011684:	4b1a      	ldr	r3, [pc, #104]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 8011686:	8b1b      	ldrh	r3, [r3, #24]
 8011688:	3bc8      	subs	r3, #200	; 0xc8
 801168a:	b29a      	uxth	r2, r3
 801168c:	4b18      	ldr	r3, [pc, #96]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 801168e:	839a      	strh	r2, [r3, #28]
	}
	VC_SIMV.TRIG_WINDOW		                 = VC_SIMV.TOLERANCE_EWAVE;
 8011690:	4b17      	ldr	r3, [pc, #92]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 8011692:	8b9a      	ldrh	r2, [r3, #28]
 8011694:	4b16      	ldr	r3, [pc, #88]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 8011696:	83da      	strh	r2, [r3, #30]

	if(VC_SIMV.Assist_Control == 1)
 8011698:	4b15      	ldr	r3, [pc, #84]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 801169a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801169e:	2b01      	cmp	r3, #1
 80116a0:	d103      	bne.n	80116aa <Vc_Simv_Mode_Packet_Data+0x106>
		Assist_Control=ASSIST_ON;
 80116a2:	4b16      	ldr	r3, [pc, #88]	; (80116fc <Vc_Simv_Mode_Packet_Data+0x158>)
 80116a4:	2200      	movs	r2, #0
 80116a6:	701a      	strb	r2, [r3, #0]
 80116a8:	e007      	b.n	80116ba <Vc_Simv_Mode_Packet_Data+0x116>
	else if(VC_SIMV.Assist_Control == 0)
 80116aa:	4b11      	ldr	r3, [pc, #68]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80116ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d102      	bne.n	80116ba <Vc_Simv_Mode_Packet_Data+0x116>
		Assist_Control=ASSIST_OFF;
 80116b4:	4b11      	ldr	r3, [pc, #68]	; (80116fc <Vc_Simv_Mode_Packet_Data+0x158>)
 80116b6:	2201      	movs	r2, #1
 80116b8:	701a      	strb	r2, [r3, #0]
	if(VC_SIMV.TRIG_TYPE == 0)
 80116ba:	4b0d      	ldr	r3, [pc, #52]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80116bc:	7cdb      	ldrb	r3, [r3, #19]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d103      	bne.n	80116ca <Vc_Simv_Mode_Packet_Data+0x126>
		Trigger_Type = Pressure_Trigger;
 80116c2:	4b0f      	ldr	r3, [pc, #60]	; (8011700 <Vc_Simv_Mode_Packet_Data+0x15c>)
 80116c4:	2200      	movs	r2, #0
 80116c6:	701a      	strb	r2, [r3, #0]
 80116c8:	e006      	b.n	80116d8 <Vc_Simv_Mode_Packet_Data+0x134>
	else if(VC_SIMV.TRIG_TYPE == 1)
 80116ca:	4b09      	ldr	r3, [pc, #36]	; (80116f0 <Vc_Simv_Mode_Packet_Data+0x14c>)
 80116cc:	7cdb      	ldrb	r3, [r3, #19]
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	d102      	bne.n	80116d8 <Vc_Simv_Mode_Packet_Data+0x134>
		Trigger_Type = Flow_Trigger;
 80116d2:	4b0b      	ldr	r3, [pc, #44]	; (8011700 <Vc_Simv_Mode_Packet_Data+0x15c>)
 80116d4:	2201      	movs	r2, #1
 80116d6:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set                        = OPEN;
 80116d8:	4b0a      	ldr	r3, [pc, #40]	; (8011704 <Vc_Simv_Mode_Packet_Data+0x160>)
 80116da:	2201      	movs	r2, #1
 80116dc:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 80116de:	4b0a      	ldr	r3, [pc, #40]	; (8011708 <Vc_Simv_Mode_Packet_Data+0x164>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f00d fe9a 	bl	801f41c <vTaskResume>
}
 80116e8:	bf00      	nop
 80116ea:	3710      	adds	r7, #16
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	2001434c 	.word	0x2001434c
 80116f4:	cccccccd 	.word	0xcccccccd
 80116f8:	20000008 	.word	0x20000008
 80116fc:	200139e0 	.word	0x200139e0
 8011700:	2001398c 	.word	0x2001398c
 8011704:	20014338 	.word	0x20014338
 8011708:	2001406c 	.word	0x2001406c

0801170c <Vc_Simv_Assist_ON_Task>:


void Vc_Simv_Assist_ON_Task(void *argument)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 8011714:	4b14      	ldr	r3, [pc, #80]	; (8011768 <Vc_Simv_Assist_ON_Task+0x5c>)
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	2b02      	cmp	r3, #2
 801171a:	d00b      	beq.n	8011734 <Vc_Simv_Assist_ON_Task+0x28>
 801171c:	2b02      	cmp	r3, #2
 801171e:	dc1c      	bgt.n	801175a <Vc_Simv_Assist_ON_Task+0x4e>
 8011720:	2b00      	cmp	r3, #0
 8011722:	d01c      	beq.n	801175e <Vc_Simv_Assist_ON_Task+0x52>
 8011724:	2b01      	cmp	r3, #1
 8011726:	d118      	bne.n	801175a <Vc_Simv_Assist_ON_Task+0x4e>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(Volume_Mode_Blower_control.BLOWER_DAC_VAL);
 8011728:	4b10      	ldr	r3, [pc, #64]	; (801176c <Vc_Simv_Assist_ON_Task+0x60>)
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	4618      	mov	r0, r3
 801172e:	f000 f84b 	bl	80117c8 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON>
			break;
 8011732:	e015      	b.n	8011760 <Vc_Simv_Assist_ON_Task+0x54>
			case Run_Expiration_Cycle:
				Volume_Mode_Blower_control.BLOWER_DAC_VAL=0;
 8011734:	4b0d      	ldr	r3, [pc, #52]	; (801176c <Vc_Simv_Assist_ON_Task+0x60>)
 8011736:	2200      	movs	r2, #0
 8011738:	801a      	strh	r2, [r3, #0]
				Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 801173a:	4b0c      	ldr	r3, [pc, #48]	; (801176c <Vc_Simv_Assist_ON_Task+0x60>)
 801173c:	881b      	ldrh	r3, [r3, #0]
 801173e:	4a0c      	ldr	r2, [pc, #48]	; (8011770 <Vc_Simv_Assist_ON_Task+0x64>)
 8011740:	edd2 7a00 	vldr	s15, [r2]
													  PEEP_Maintain_Parameter.PEEP_Temp,
													  PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8011744:	4a0a      	ldr	r2, [pc, #40]	; (8011770 <Vc_Simv_Assist_ON_Task+0x64>)
 8011746:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 801174a:	b292      	uxth	r2, r2
 801174c:	4611      	mov	r1, r2
 801174e:	eeb0 0a67 	vmov.f32	s0, s15
 8011752:	4618      	mov	r0, r3
 8011754:	f000 f86c 	bl	8011830 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON>
			break;
 8011758:	e002      	b.n	8011760 <Vc_Simv_Assist_ON_Task+0x54>
			case No_Run_State:
			break;
			default:
			break;
 801175a:	bf00      	nop
 801175c:	e000      	b.n	8011760 <Vc_Simv_Assist_ON_Task+0x54>
			break;
 801175e:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 8011760:	2002      	movs	r0, #2
 8011762:	f00d fd63 	bl	801f22c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 8011766:	e7d5      	b.n	8011714 <Vc_Simv_Assist_ON_Task+0x8>
 8011768:	20013f7c 	.word	0x20013f7c
 801176c:	2001407c 	.word	0x2001407c
 8011770:	20014300 	.word	0x20014300

08011774 <VC_SIMV_Inspiration_Time_Variables_Reset>:




void VC_SIMV_Inspiration_Time_Variables_Reset()
{
 8011774:	b580      	push	{r7, lr}
 8011776:	af00      	add	r7, sp, #0
	if(Assist_Control == ASSIST_ON)
 8011778:	4b07      	ldr	r3, [pc, #28]	; (8011798 <VC_SIMV_Inspiration_Time_Variables_Reset+0x24>)
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d102      	bne.n	8011786 <VC_SIMV_Inspiration_Time_Variables_Reset+0x12>
	{
		VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
 8011780:	f000 f90c 	bl	801199c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>
	}
	else if(Assist_Control == ASSIST_OFF)
	{
		VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset();
	}
}
 8011784:	e005      	b.n	8011792 <VC_SIMV_Inspiration_Time_Variables_Reset+0x1e>
	else if(Assist_Control == ASSIST_OFF)
 8011786:	4b04      	ldr	r3, [pc, #16]	; (8011798 <VC_SIMV_Inspiration_Time_Variables_Reset+0x24>)
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	2b01      	cmp	r3, #1
 801178c:	d101      	bne.n	8011792 <VC_SIMV_Inspiration_Time_Variables_Reset+0x1e>
		VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset();
 801178e:	f7ff fcaf 	bl	80110f0 <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset>
}
 8011792:	bf00      	nop
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop
 8011798:	200139e0 	.word	0x200139e0

0801179c <VC_SIMV_Expiration_Time_Variables_Reset>:



void VC_SIMV_Expiration_Time_Variables_Reset()
{
 801179c:	b580      	push	{r7, lr}
 801179e:	af00      	add	r7, sp, #0
	if(Assist_Control == ASSIST_ON)
 80117a0:	4b07      	ldr	r3, [pc, #28]	; (80117c0 <VC_SIMV_Expiration_Time_Variables_Reset+0x24>)
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d102      	bne.n	80117ae <VC_SIMV_Expiration_Time_Variables_Reset+0x12>
	{
		VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
 80117a8:	f000 f9f0 	bl	8011b8c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>
	}
	else if(Assist_Control == ASSIST_OFF)
	{
		VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset();
	}
}
 80117ac:	e005      	b.n	80117ba <VC_SIMV_Expiration_Time_Variables_Reset+0x1e>
	else if(Assist_Control == ASSIST_OFF)
 80117ae:	4b04      	ldr	r3, [pc, #16]	; (80117c0 <VC_SIMV_Expiration_Time_Variables_Reset+0x24>)
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d101      	bne.n	80117ba <VC_SIMV_Expiration_Time_Variables_Reset+0x1e>
		VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset();
 80117b6:	f7ff fcb7 	bl	8011128 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset>
}
 80117ba:	bf00      	nop
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	200139e0 	.word	0x200139e0
 80117c4:	00000000 	.word	0x00000000

080117c8 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON>:


static void Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(uint16_t Blower_Signal)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	4603      	mov	r3, r0
 80117d0:	80fb      	strh	r3, [r7, #6]
	Volume_Mode_Blower_control.Blower_Signal_Voltage = ( (Blower_Signal*3.3) /4095);
 80117d2:	88fb      	ldrh	r3, [r7, #6]
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7ee fe4d 	bl	8000474 <__aeabi_i2d>
 80117da:	a311      	add	r3, pc, #68	; (adr r3, 8011820 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x58>)
 80117dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e0:	f7ee feb2 	bl	8000548 <__aeabi_dmul>
 80117e4:	4602      	mov	r2, r0
 80117e6:	460b      	mov	r3, r1
 80117e8:	4610      	mov	r0, r2
 80117ea:	4619      	mov	r1, r3
 80117ec:	a30e      	add	r3, pc, #56	; (adr r3, 8011828 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x60>)
 80117ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f2:	f7ee ffd3 	bl	800079c <__aeabi_ddiv>
 80117f6:	4602      	mov	r2, r0
 80117f8:	460b      	mov	r3, r1
 80117fa:	4610      	mov	r0, r2
 80117fc:	4619      	mov	r1, r3
 80117fe:	f7ef f985 	bl	8000b0c <__aeabi_d2f>
 8011802:	4603      	mov	r3, r0
 8011804:	4a04      	ldr	r2, [pc, #16]	; (8011818 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x50>)
 8011806:	6093      	str	r3, [r2, #8]
	Blower_Signal(Blower_Signal);
 8011808:	4a04      	ldr	r2, [pc, #16]	; (801181c <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x54>)
 801180a:	88fb      	ldrh	r3, [r7, #6]
 801180c:	6093      	str	r3, [r2, #8]
}
 801180e:	bf00      	nop
 8011810:	3708      	adds	r7, #8
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	2001407c 	.word	0x2001407c
 801181c:	40007400 	.word	0x40007400
 8011820:	66666666 	.word	0x66666666
 8011824:	400a6666 	.word	0x400a6666
 8011828:	00000000 	.word	0x00000000
 801182c:	40affe00 	.word	0x40affe00

08011830 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON>:




static void Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	4603      	mov	r3, r0
 8011838:	ed87 0a00 	vstr	s0, [r7]
 801183c:	460a      	mov	r2, r1
 801183e:	80fb      	strh	r3, [r7, #6]
 8011840:	4613      	mov	r3, r2
 8011842:	80bb      	strh	r3, [r7, #4]
	Blower_Signal( Blower_Signal);
 8011844:	4a27      	ldr	r2, [pc, #156]	; (80118e4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb4>)
 8011846:	88fb      	ldrh	r3, [r7, #6]
 8011848:	6093      	str	r3, [r2, #8]
		if(Peep_Status==PEEP_ACHEIVED)
 801184a:	4b27      	ldr	r3, [pc, #156]	; (80118e8 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb8>)
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d113      	bne.n	801187a <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x4a>
		{
				if(Pressure_sensor.Pressure_Val < PEEP)
 8011852:	4b26      	ldr	r3, [pc, #152]	; (80118ec <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xbc>)
 8011854:	789b      	ldrb	r3, [r3, #2]
 8011856:	ee07 3a90 	vmov	s15, r3
 801185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801185e:	ed97 7a00 	vldr	s14, [r7]
 8011862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801186a:	dd03      	ble.n	8011874 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x44>
				{
					Blower_Signal( Blower_Signal);
 801186c:	4a1d      	ldr	r2, [pc, #116]	; (80118e4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb4>)
 801186e:	88fb      	ldrh	r3, [r7, #6]
 8011870:	6093      	str	r3, [r2, #8]
 8011872:	e002      	b.n	801187a <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x4a>
				}
				else
				{
					Blower_Signal( Blower_Signal);
 8011874:	4a1b      	ldr	r2, [pc, #108]	; (80118e4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb4>)
 8011876:	88fb      	ldrh	r3, [r7, #6]
 8011878:	6093      	str	r3, [r2, #8]
				}
		 }
		if(Pressure_sensor.Pressure_Val<= PEEP)
 801187a:	4b1c      	ldr	r3, [pc, #112]	; (80118ec <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xbc>)
 801187c:	789b      	ldrb	r3, [r3, #2]
 801187e:	ee07 3a90 	vmov	s15, r3
 8011882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011886:	ed97 7a00 	vldr	s14, [r7]
 801188a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011892:	db14      	blt.n	80118be <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x8e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 8011894:	4b16      	ldr	r3, [pc, #88]	; (80118f0 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc0>)
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d106      	bne.n	80118aa <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x7a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 801189c:	4b14      	ldr	r3, [pc, #80]	; (80118f0 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc0>)
 801189e:	2201      	movs	r2, #1
 80118a0:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Expiratory_Valve_Open_Time);
 80118a2:	88bb      	ldrh	r3, [r7, #4]
 80118a4:	4618      	mov	r0, r3
 80118a6:	f00d fcc1 	bl	801f22c <vTaskDelay>
			}
			Peep_Status=PEEP_ACHEIVED;
 80118aa:	4b0f      	ldr	r3, [pc, #60]	; (80118e8 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb8>)
 80118ac:	2201      	movs	r2, #1
 80118ae:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 80118b0:	4b10      	ldr	r3, [pc, #64]	; (80118f4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc4>)
 80118b2:	695b      	ldr	r3, [r3, #20]
 80118b4:	4a0f      	ldr	r2, [pc, #60]	; (80118f4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc4>)
 80118b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80118ba:	6153      	str	r3, [r2, #20]
 80118bc:	e009      	b.n	80118d2 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xa2>
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 80118be:	4b0a      	ldr	r3, [pc, #40]	; (80118e8 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb8>)
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d105      	bne.n	80118d2 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xa2>
		{
			ExpValve_OPEN();
 80118c6:	4b0b      	ldr	r3, [pc, #44]	; (80118f4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc4>)
 80118c8:	695b      	ldr	r3, [r3, #20]
 80118ca:	4a0a      	ldr	r2, [pc, #40]	; (80118f4 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc4>)
 80118cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80118d0:	6153      	str	r3, [r2, #20]
		}

		CHECK_TRIGGER_ASSIST_ON(VC_SIMV.TRIG_WINDOW);
 80118d2:	4b09      	ldr	r3, [pc, #36]	; (80118f8 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc8>)
 80118d4:	8bdb      	ldrh	r3, [r3, #30]
 80118d6:	4618      	mov	r0, r3
 80118d8:	f000 f810 	bl	80118fc <CHECK_TRIGGER_ASSIST_ON>
}
 80118dc:	bf00      	nop
 80118de:	3708      	adds	r7, #8
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	40007400 	.word	0x40007400
 80118e8:	200140f5 	.word	0x200140f5
 80118ec:	2001405c 	.word	0x2001405c
 80118f0:	200140f4 	.word	0x200140f4
 80118f4:	40020400 	.word	0x40020400
 80118f8:	2001434c 	.word	0x2001434c

080118fc <CHECK_TRIGGER_ASSIST_ON>:


static void CHECK_TRIGGER_ASSIST_ON(uint16_t Trigger_Check_Time)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	4603      	mov	r3, r0
 8011904:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 8011906:	4b0f      	ldr	r3, [pc, #60]	; (8011944 <CHECK_TRIGGER_ASSIST_ON+0x48>)
 8011908:	685a      	ldr	r2, [r3, #4]
 801190a:	88fb      	ldrh	r3, [r7, #6]
 801190c:	429a      	cmp	r2, r3
 801190e:	dc11      	bgt.n	8011934 <CHECK_TRIGGER_ASSIST_ON+0x38>
 8011910:	4b0c      	ldr	r3, [pc, #48]	; (8011944 <CHECK_TRIGGER_ASSIST_ON+0x48>)
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d00d      	beq.n	8011934 <CHECK_TRIGGER_ASSIST_ON+0x38>
	{
		if (Trigger_Type == Pressure_Trigger)
 8011918:	4b0b      	ldr	r3, [pc, #44]	; (8011948 <CHECK_TRIGGER_ASSIST_ON+0x4c>)
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d102      	bne.n	8011926 <CHECK_TRIGGER_ASSIST_ON+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 8011920:	f000 f9ae 	bl	8011c80 <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 8011924:	e009      	b.n	801193a <CHECK_TRIGGER_ASSIST_ON+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 8011926:	4b08      	ldr	r3, [pc, #32]	; (8011948 <CHECK_TRIGGER_ASSIST_ON+0x4c>)
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	2b01      	cmp	r3, #1
 801192c:	d105      	bne.n	801193a <CHECK_TRIGGER_ASSIST_ON+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 801192e:	f000 f9cf 	bl	8011cd0 <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 8011932:	e002      	b.n	801193a <CHECK_TRIGGER_ASSIST_ON+0x3e>
		}
	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 8011934:	f000 f9fa 	bl	8011d2c <CHECK_TRIGGER_OFFSET>
	}
}
 8011938:	e000      	b.n	801193c <CHECK_TRIGGER_ASSIST_ON+0x40>
		if (Trigger_Type == Pressure_Trigger)
 801193a:	bf00      	nop
}
 801193c:	bf00      	nop
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}
 8011944:	200141fc 	.word	0x200141fc
 8011948:	2001398c 	.word	0x2001398c

0801194c <Switch_TASK_Inspiration_CYCLE>:


static void Switch_TASK_Inspiration_CYCLE()
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af02      	add	r7, sp, #8
	vTaskDelete(One_Time_Handler);
 8011952:	4b0d      	ldr	r3, [pc, #52]	; (8011988 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	4618      	mov	r0, r3
 8011958:	f00d fbd8 	bl	801f10c <vTaskDelete>
	TIME_Base_parameter._INSPIRATION_TIME = 0 ;
 801195c:	4b0b      	ldr	r3, [pc, #44]	; (801198c <Switch_TASK_Inspiration_CYCLE+0x40>)
 801195e:	2200      	movs	r2, #0
 8011960:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter._EXPIRATION_TIME  = 0 ;
 8011962:	4b0a      	ldr	r3, [pc, #40]	; (801198c <Switch_TASK_Inspiration_CYCLE+0x40>)
 8011964:	2200      	movs	r2, #0
 8011966:	605a      	str	r2, [r3, #4]
	Next_Half_Breath_Cycle                = Generate_Inspiration_Cycle;
 8011968:	4b09      	ldr	r3, [pc, #36]	; (8011990 <Switch_TASK_Inspiration_CYCLE+0x44>)
 801196a:	2200      	movs	r2, #0
 801196c:	701a      	strb	r2, [r3, #0]
	xTaskCreate(One_Time_Task,"One-Time-Task", 128, NULL,3, &One_Time_Handler);
 801196e:	4b06      	ldr	r3, [pc, #24]	; (8011988 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 8011970:	9301      	str	r3, [sp, #4]
 8011972:	2303      	movs	r3, #3
 8011974:	9300      	str	r3, [sp, #0]
 8011976:	2300      	movs	r3, #0
 8011978:	2280      	movs	r2, #128	; 0x80
 801197a:	4906      	ldr	r1, [pc, #24]	; (8011994 <Switch_TASK_Inspiration_CYCLE+0x48>)
 801197c:	4806      	ldr	r0, [pc, #24]	; (8011998 <Switch_TASK_Inspiration_CYCLE+0x4c>)
 801197e:	f00d fa8e 	bl	801ee9e <xTaskCreate>
}
 8011982:	bf00      	nop
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	20014094 	.word	0x20014094
 801198c:	200141fc 	.word	0x200141fc
 8011990:	20013d20 	.word	0x20013d20
 8011994:	08022f98 	.word	0x08022f98
 8011998:	0800f869 	.word	0x0800f869

0801199c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>:


void VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset()
{
 801199c:	b590      	push	{r4, r7, lr}
 801199e:	b083      	sub	sp, #12
 80119a0:	af02      	add	r7, sp, #8
	Reset_Blower_Status();
 80119a2:	f000 fda7 	bl	80124f4 <Reset_Blower_Status>
	Breath_Count         = Count_The_Breath;
 80119a6:	4b5d      	ldr	r3, [pc, #372]	; (8011b1c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 80119a8:	2201      	movs	r2, #1
 80119aa:	701a      	strb	r2, [r3, #0]
	if(VC_SIMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL )
 80119ac:	4b5c      	ldr	r3, [pc, #368]	; (8011b20 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 80119ae:	789a      	ldrb	r2, [r3, #2]
 80119b0:	4b5c      	ldr	r3, [pc, #368]	; (8011b24 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x188>)
 80119b2:	7c1b      	ldrb	r3, [r3, #16]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d102      	bne.n	80119be <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x22>
	{
	   CHECK_Flow_Increment();
 80119b8:	f000 f9e2 	bl	8011d80 <CHECK_Flow_Increment>
 80119bc:	e00a      	b.n	80119d4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x38>
	}
	else
	{
		Flow_increment       = Flow_fine;
 80119be:	4b5a      	ldr	r3, [pc, #360]	; (8011b28 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x18c>)
 80119c0:	2200      	movs	r2, #0
 80119c2:	701a      	strb	r2, [r3, #0]
		memset(Volume_Array, 0,(100*sizeof(Volume_Array[0])) );
 80119c4:	2264      	movs	r2, #100	; 0x64
 80119c6:	2100      	movs	r1, #0
 80119c8:	4858      	ldr	r0, [pc, #352]	; (8011b2c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x190>)
 80119ca:	f010 f8d9 	bl	8021b80 <memset>
		Volume_Array_count = 0;
 80119ce:	4b58      	ldr	r3, [pc, #352]	; (8011b30 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x194>)
 80119d0:	2200      	movs	r2, #0
 80119d2:	801a      	strh	r2, [r3, #0]
	}
	Volume_Not_Acheieved();
 80119d4:	f000 fd80 	bl	80124d8 <Volume_Not_Acheieved>
	ExpValve_CLOSE();
 80119d8:	4b56      	ldr	r3, [pc, #344]	; (8011b34 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x198>)
 80119da:	695b      	ldr	r3, [r3, #20]
 80119dc:	4a55      	ldr	r2, [pc, #340]	; (8011b34 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x198>)
 80119de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80119e2:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 80119e4:	f7f7 fb1a 	bl	800901c <PIP_AVERAGE>
	PEEP_AVERAGE();
 80119e8:	f7f7 fb3e 	bl	8009068 <PEEP_AVERAGE>
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 80119ec:	4b52      	ldr	r3, [pc, #328]	; (8011b38 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x19c>)
 80119ee:	78db      	ldrb	r3, [r3, #3]
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7fa f889 	bl	800bb08 <O2_DAC_Control>
	Check_Alert();
 80119f6:	f7ef fb7f 	bl	80010f8 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 80119fa:	f7ef fc27 	bl	800124c <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 80119fe:	f7ef ffd7 	bl	80019b0 <LED_Alert>
	Alert_Status = NO_ALERT;
 8011a02:	4b4e      	ldr	r3, [pc, #312]	; (8011b3c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a0>)
 8011a04:	2200      	movs	r2, #0
 8011a06:	701a      	strb	r2, [r3, #0]
	Sampled_Parameter_Inspiration_time();
 8011a08:	f7fe ff6e 	bl	80108e8 <Sampled_Parameter_Inspiration_time>
	if(VC_SIMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL )
 8011a0c:	4b44      	ldr	r3, [pc, #272]	; (8011b20 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 8011a0e:	789a      	ldrb	r2, [r3, #2]
 8011a10:	4b44      	ldr	r3, [pc, #272]	; (8011b24 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x188>)
 8011a12:	7c1b      	ldrb	r3, [r3, #16]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d013      	beq.n	8011a40 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0xa4>
	{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time      = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 8011a18:	4b42      	ldr	r3, [pc, #264]	; (8011b24 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x188>)
 8011a1a:	7c18      	ldrb	r0, [r3, #16]
 8011a1c:	4b40      	ldr	r3, [pc, #256]	; (8011b20 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 8011a1e:	78d9      	ldrb	r1, [r3, #3]
 8011a20:	4b3f      	ldr	r3, [pc, #252]	; (8011b20 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 8011a22:	689a      	ldr	r2, [r3, #8]
 8011a24:	4b3e      	ldr	r3, [pc, #248]	; (8011b20 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 8011a26:	789c      	ldrb	r4, [r3, #2]
																												           VC_SIMV.RESPIRATORY_RATE_Val,
													                                                                       VC_SIMV.INSPIRATION_TIME,
													                                                                       VC_SIMV.PEEP_Val,
																												           PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8011a28:	4b3e      	ldr	r3, [pc, #248]	; (8011b24 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x188>)
 8011a2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time      = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	9300      	str	r3, [sp, #0]
 8011a32:	4623      	mov	r3, r4
 8011a34:	f7f4 fca2 	bl	800637c <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	b21a      	sxth	r2, r3
 8011a3c:	4b39      	ldr	r3, [pc, #228]	; (8011b24 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x188>)
 8011a3e:	809a      	strh	r2, [r3, #4]

	}
    VOLUME_STOP_POINT(Common_Mode_Parameter._VOLUME_Val,Volume_control_Task.Achieved_Volume);
 8011a40:	4b3d      	ldr	r3, [pc, #244]	; (8011b38 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x19c>)
 8011a42:	889b      	ldrh	r3, [r3, #4]
 8011a44:	4a3e      	ldr	r2, [pc, #248]	; (8011b40 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a4>)
 8011a46:	8852      	ldrh	r2, [r2, #2]
 8011a48:	4611      	mov	r1, r2
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f000 fe54 	bl	80126f8 <VOLUME_STOP_POINT>
    Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL          =  TUNE_INITIAL_DAC_VAL(Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL,
 8011a50:	4b3c      	ldr	r3, [pc, #240]	; (8011b44 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 8011a52:	889b      	ldrh	r3, [r3, #4]
 8011a54:	4a38      	ldr	r2, [pc, #224]	; (8011b38 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x19c>)
 8011a56:	7991      	ldrb	r1, [r2, #6]
 8011a58:	4a39      	ldr	r2, [pc, #228]	; (8011b40 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a4>)
 8011a5a:	7852      	ldrb	r2, [r2, #1]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f000 feab 	bl	80127b8 <TUNE_INITIAL_DAC_VAL>
 8011a62:	4603      	mov	r3, r0
 8011a64:	461a      	mov	r2, r3
 8011a66:	4b37      	ldr	r3, [pc, #220]	; (8011b44 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 8011a68:	805a      	strh	r2, [r3, #2]
    		                                                                           Common_Mode_Parameter._FLOW_RATE,
																					   Volume_control_Task.Flow_Max_Achieved);
    Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL;
 8011a6a:	4b36      	ldr	r3, [pc, #216]	; (8011b44 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 8011a6c:	885a      	ldrh	r2, [r3, #2]
 8011a6e:	4b35      	ldr	r3, [pc, #212]	; (8011b44 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 8011a70:	809a      	strh	r2, [r3, #4]


	if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 8011a72:	4b35      	ldr	r3, [pc, #212]	; (8011b48 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1ac>)
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d106      	bne.n	8011a88 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0xec>
	{
		BREATH_STATE                                      = PATIENT_TRIGGER_INSPIRATION;
 8011a7a:	4b34      	ldr	r3, [pc, #208]	; (8011b4c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b0>)
 8011a7c:	2202      	movs	r2, #2
 8011a7e:	701a      	strb	r2, [r3, #0]
		LED_STATUS                                        = EXPIRATION_LED;
 8011a80:	4b33      	ldr	r3, [pc, #204]	; (8011b50 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b4>)
 8011a82:	2202      	movs	r2, #2
 8011a84:	701a      	strb	r2, [r3, #0]
 8011a86:	e002      	b.n	8011a8e <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0xf2>
	}
	else
	{
		BREATH_STATE                                       = INSPIRATION_CYCLE;
 8011a88:	4b30      	ldr	r3, [pc, #192]	; (8011b4c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b0>)
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	701a      	strb	r2, [r3, #0]
	}

	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 8011a8e:	4b31      	ldr	r3, [pc, #196]	; (8011b54 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>)
 8011a90:	2200      	movs	r2, #0
 8011a92:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 8011a94:	4b30      	ldr	r3, [pc, #192]	; (8011b58 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1bc>)
 8011a96:	2200      	movs	r2, #0
 8011a98:	701a      	strb	r2, [r3, #0]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 8011a9a:	4b30      	ldr	r3, [pc, #192]	; (8011b5c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c0>)
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	701a      	strb	r2, [r3, #0]
	Maximum_Flow_Achieved                                      = FLOW_NOT_ACHIEVED;
 8011aa0:	4b2f      	ldr	r3, [pc, #188]	; (8011b60 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c4>)
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	701a      	strb	r2, [r3, #0]
	Volume_control_Task.Flow_Max_Achieved                      = RESET;
 8011aa6:	4b26      	ldr	r3, [pc, #152]	; (8011b40 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a4>)
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	705a      	strb	r2, [r3, #1]
	Volume_Achieved_Status                                     = VOLUME_NOT_ACHIEVED;
 8011aac:	4b2d      	ldr	r3, [pc, #180]	; (8011b64 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c8>)
 8011aae:	2200      	movs	r2, #0
 8011ab0:	701a      	strb	r2, [r3, #0]
	TIME_Base_parameter._INSPIRATION_TIME                      = VC_SIMV.INSPIRATION_TIME;
 8011ab2:	4b1b      	ldr	r3, [pc, #108]	; (8011b20 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 8011ab4:	689b      	ldr	r3, [r3, #8]
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	4b2b      	ldr	r3, [pc, #172]	; (8011b68 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1cc>)
 8011aba:	601a      	str	r2, [r3, #0]

	Led_Delay                                                  = (Total_Volume_Achieved_Time  /46);
 8011abc:	4b2b      	ldr	r3, [pc, #172]	; (8011b6c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d0>)
 8011abe:	881b      	ldrh	r3, [r3, #0]
 8011ac0:	4a2b      	ldr	r2, [pc, #172]	; (8011b70 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d4>)
 8011ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8011ac6:	095b      	lsrs	r3, r3, #5
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	ee07 3a90 	vmov	s15, r3
 8011ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ad2:	4b28      	ldr	r3, [pc, #160]	; (8011b74 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d8>)
 8011ad4:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                                   = 1;
 8011ad8:	4b27      	ldr	r3, [pc, #156]	; (8011b78 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1dc>)
 8011ada:	2201      	movs	r2, #1
 8011adc:	701a      	strb	r2, [r3, #0]
	Volume_Achieved_Time                                       = 0;
 8011ade:	4b27      	ldr	r3, [pc, #156]	; (8011b7c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e0>)
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	801a      	strh	r2, [r3, #0]
	Total_Volume_Achieved_Time                                 = 0;
 8011ae4:	4b21      	ldr	r3, [pc, #132]	; (8011b6c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d0>)
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	801a      	strh	r2, [r3, #0]

	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 8011aea:	4b1f      	ldr	r3, [pc, #124]	; (8011b68 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1cc>)
 8011aec:	2200      	movs	r2, #0
 8011aee:	609a      	str	r2, [r3, #8]
	vol.Volume                                                 = RESET;
 8011af0:	4b23      	ldr	r3, [pc, #140]	; (8011b80 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e4>)
 8011af2:	f04f 0200 	mov.w	r2, #0
 8011af6:	601a      	str	r2, [r3, #0]
	vol.Volume_max                                             = RESET;
 8011af8:	4b21      	ldr	r3, [pc, #132]	; (8011b80 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e4>)
 8011afa:	2200      	movs	r2, #0
 8011afc:	609a      	str	r2, [r3, #8]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 8011afe:	4b21      	ldr	r3, [pc, #132]	; (8011b84 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e8>)
 8011b00:	2201      	movs	r2, #1
 8011b02:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 8011b04:	4b20      	ldr	r3, [pc, #128]	; (8011b88 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1ec>)
 8011b06:	2201      	movs	r2, #1
 8011b08:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_SIMV.INSPIRATION_TIME);
 8011b0a:	4b05      	ldr	r3, [pc, #20]	; (8011b20 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 8011b0c:	689b      	ldr	r3, [r3, #8]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f00d fb8c 	bl	801f22c <vTaskDelay>
}
 8011b14:	bf00      	nop
 8011b16:	3704      	adds	r7, #4
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd90      	pop	{r4, r7, pc}
 8011b1c:	200139a6 	.word	0x200139a6
 8011b20:	2001434c 	.word	0x2001434c
 8011b24:	20014300 	.word	0x20014300
 8011b28:	20013f2a 	.word	0x20013f2a
 8011b2c:	20013dc0 	.word	0x20013dc0
 8011b30:	2001414c 	.word	0x2001414c
 8011b34:	40020400 	.word	0x40020400
 8011b38:	20013ba4 	.word	0x20013ba4
 8011b3c:	20013f88 	.word	0x20013f88
 8011b40:	20013f70 	.word	0x20013f70
 8011b44:	2001407c 	.word	0x2001407c
 8011b48:	20013ca9 	.word	0x20013ca9
 8011b4c:	200140fd 	.word	0x200140fd
 8011b50:	20013aed 	.word	0x20013aed
 8011b54:	200140f5 	.word	0x200140f5
 8011b58:	200140f4 	.word	0x200140f4
 8011b5c:	20013b70 	.word	0x20013b70
 8011b60:	20013d3c 	.word	0x20013d3c
 8011b64:	20013d21 	.word	0x20013d21
 8011b68:	200141fc 	.word	0x200141fc
 8011b6c:	200142b8 	.word	0x200142b8
 8011b70:	b21642c9 	.word	0xb21642c9
 8011b74:	20014078 	.word	0x20014078
 8011b78:	20013f3c 	.word	0x20013f3c
 8011b7c:	20013a00 	.word	0x20013a00
 8011b80:	200140c8 	.word	0x200140c8
 8011b84:	20013d20 	.word	0x20013d20
 8011b88:	20013f7c 	.word	0x20013f7c

08011b8c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>:


void VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset()
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	af00      	add	r7, sp, #0
	Volume_control_Task.Achieved_Volume                 = vol.Volume ;
 8011b90:	4b2d      	ldr	r3, [pc, #180]	; (8011c48 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xbc>)
 8011b92:	edd3 7a00 	vldr	s15, [r3]
 8011b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b9a:	ee17 3a90 	vmov	r3, s15
 8011b9e:	b29a      	uxth	r2, r3
 8011ba0:	4b2a      	ldr	r3, [pc, #168]	; (8011c4c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xc0>)
 8011ba2:	805a      	strh	r2, [r3, #2]
	if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 8011ba4:	4b2a      	ldr	r3, [pc, #168]	; (8011c50 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xc4>)
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d106      	bne.n	8011bba <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x2e>
	{
		BREATH_STATE                                      = PATIENT_TRIGGER_EXPIRATION;
 8011bac:	4b29      	ldr	r3, [pc, #164]	; (8011c54 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xc8>)
 8011bae:	2203      	movs	r2, #3
 8011bb0:	701a      	strb	r2, [r3, #0]
		LED_STATUS                                        = Idle_LED;
 8011bb2:	4b29      	ldr	r3, [pc, #164]	; (8011c58 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xcc>)
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	701a      	strb	r2, [r3, #0]
 8011bb8:	e002      	b.n	8011bc0 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x34>
	}
	else
	{
		BREATH_STATE                                       = EXPIRATION_CYCLE;
 8011bba:	4b26      	ldr	r3, [pc, #152]	; (8011c54 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xc8>)
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	701a      	strb	r2, [r3, #0]
	}
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 8011bc0:	4b26      	ldr	r3, [pc, #152]	; (8011c5c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd0>)
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 8011bc6:	4b25      	ldr	r3, [pc, #148]	; (8011c5c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd0>)
 8011bc8:	2200      	movs	r2, #0
 8011bca:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 8011bcc:	4b23      	ldr	r3, [pc, #140]	; (8011c5c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd0>)
 8011bce:	2200      	movs	r2, #0
 8011bd0:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 8011bd2:	4b22      	ldr	r3, [pc, #136]	; (8011c5c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd0>)
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	60da      	str	r2, [r3, #12]

	Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 8011bd8:	4b1d      	ldr	r3, [pc, #116]	; (8011c50 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xc4>)
 8011bda:	2200      	movs	r2, #0
 8011bdc:	701a      	strb	r2, [r3, #0]
	Trigger_Time_Monitor();
 8011bde:	f000 f95d 	bl	8011e9c <Trigger_Time_Monitor>

	Adjust_Servo_And_Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 8011be2:	4b1f      	ldr	r3, [pc, #124]	; (8011c60 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd4>)
 8011be4:	78db      	ldrb	r3, [r3, #3]
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7f9 fdc8 	bl	800b77c <Adjust_Servo_And_Calculate_O2>
	Alert_Expiration_Time_Parameter();
 8011bec:	f7ef fb9e 	bl	800132c <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = VC_SIMV.EXPIRATION_TIME;
 8011bf0:	4b1c      	ldr	r3, [pc, #112]	; (8011c64 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd8>)
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4b1c      	ldr	r3, [pc, #112]	; (8011c68 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xdc>)
 8011bf8:	605a      	str	r2, [r3, #4]

	Led_Delay                                           = ( (PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time + 500)  /46);
 8011bfa:	4b18      	ldr	r3, [pc, #96]	; (8011c5c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd0>)
 8011bfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011c04:	4a19      	ldr	r2, [pc, #100]	; (8011c6c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xe0>)
 8011c06:	fb82 1203 	smull	r1, r2, r2, r3
 8011c0a:	441a      	add	r2, r3
 8011c0c:	1152      	asrs	r2, r2, #5
 8011c0e:	17db      	asrs	r3, r3, #31
 8011c10:	1ad3      	subs	r3, r2, r3
 8011c12:	ee07 3a90 	vmov	s15, r3
 8011c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c1a:	4b15      	ldr	r3, [pc, #84]	; (8011c70 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xe4>)
 8011c1c:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                            = 45;
 8011c20:	4b14      	ldr	r3, [pc, #80]	; (8011c74 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xe8>)
 8011c22:	222d      	movs	r2, #45	; 0x2d
 8011c24:	701a      	strb	r2, [r3, #0]

	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 8011c26:	4b10      	ldr	r3, [pc, #64]	; (8011c68 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xdc>)
 8011c28:	2200      	movs	r2, #0
 8011c2a:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 8011c2c:	4b12      	ldr	r3, [pc, #72]	; (8011c78 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xec>)
 8011c2e:	2200      	movs	r2, #0
 8011c30:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 8011c32:	4b12      	ldr	r3, [pc, #72]	; (8011c7c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xf0>)
 8011c34:	2202      	movs	r2, #2
 8011c36:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_SIMV.EXPIRATION_TIME);
 8011c38:	4b0a      	ldr	r3, [pc, #40]	; (8011c64 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xd8>)
 8011c3a:	68db      	ldr	r3, [r3, #12]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f00d faf5 	bl	801f22c <vTaskDelay>
}
 8011c42:	bf00      	nop
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	200140c8 	.word	0x200140c8
 8011c4c:	20013f70 	.word	0x20013f70
 8011c50:	20013ca9 	.word	0x20013ca9
 8011c54:	200140fd 	.word	0x200140fd
 8011c58:	20013aed 	.word	0x20013aed
 8011c5c:	20014300 	.word	0x20014300
 8011c60:	20013ba4 	.word	0x20013ba4
 8011c64:	2001434c 	.word	0x2001434c
 8011c68:	200141fc 	.word	0x200141fc
 8011c6c:	b21642c9 	.word	0xb21642c9
 8011c70:	20014078 	.word	0x20014078
 8011c74:	20013f3c 	.word	0x20013f3c
 8011c78:	20013d20 	.word	0x20013d20
 8011c7c:	20013f7c 	.word	0x20013f7c

08011c80 <CHECK_PRESSURE_TRIGGER>:



static void CHECK_PRESSURE_TRIGGER()
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	af00      	add	r7, sp, #0
	if (( Pressure_sensor.Pressure_Val < (Pressure_Trigger_Offset - VC_SIMV.TRIG_LMT )))
 8011c84:	4b0e      	ldr	r3, [pc, #56]	; (8011cc0 <CHECK_PRESSURE_TRIGGER+0x40>)
 8011c86:	789b      	ldrb	r3, [r3, #2]
 8011c88:	ee07 3a90 	vmov	s15, r3
 8011c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011c90:	4b0c      	ldr	r3, [pc, #48]	; (8011cc4 <CHECK_PRESSURE_TRIGGER+0x44>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	ee07 3a90 	vmov	s15, r3
 8011c98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011c9c:	4b0a      	ldr	r3, [pc, #40]	; (8011cc8 <CHECK_PRESSURE_TRIGGER+0x48>)
 8011c9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8011ca2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cae:	d400      	bmi.n	8011cb2 <CHECK_PRESSURE_TRIGGER+0x32>
	{
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 8011cb0:	e004      	b.n	8011cbc <CHECK_PRESSURE_TRIGGER+0x3c>
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
 8011cb2:	4b06      	ldr	r3, [pc, #24]	; (8011ccc <CHECK_PRESSURE_TRIGGER+0x4c>)
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 8011cb8:	f7ff fe48 	bl	801194c <Switch_TASK_Inspiration_CYCLE>
}
 8011cbc:	bf00      	nop
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	2001405c 	.word	0x2001405c
 8011cc4:	20014024 	.word	0x20014024
 8011cc8:	2001434c 	.word	0x2001434c
 8011ccc:	20013ca9 	.word	0x20013ca9

08011cd0 <CHECK_FLOW_TRIGGER>:


static void CHECK_FLOW_TRIGGER()
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+VC_SIMV.TRIG_LMT )))
 8011cd4:	4b10      	ldr	r3, [pc, #64]	; (8011d18 <CHECK_FLOW_TRIGGER+0x48>)
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	ee07 3a90 	vmov	s15, r3
 8011cdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011ce0:	4b0e      	ldr	r3, [pc, #56]	; (8011d1c <CHECK_FLOW_TRIGGER+0x4c>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	ee07 3a90 	vmov	s15, r3
 8011ce8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011cec:	4b0c      	ldr	r3, [pc, #48]	; (8011d20 <CHECK_FLOW_TRIGGER+0x50>)
 8011cee:	edd3 7a05 	vldr	s15, [r3, #20]
 8011cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfe:	dc00      	bgt.n	8011d02 <CHECK_FLOW_TRIGGER+0x32>
	{
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 8011d00:	e008      	b.n	8011d14 <CHECK_FLOW_TRIGGER+0x44>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
 8011d02:	4b05      	ldr	r3, [pc, #20]	; (8011d18 <CHECK_FLOW_TRIGGER+0x48>)
 8011d04:	781a      	ldrb	r2, [r3, #0]
 8011d06:	4b07      	ldr	r3, [pc, #28]	; (8011d24 <CHECK_FLOW_TRIGGER+0x54>)
 8011d08:	701a      	strb	r2, [r3, #0]
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
 8011d0a:	4b07      	ldr	r3, [pc, #28]	; (8011d28 <CHECK_FLOW_TRIGGER+0x58>)
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 8011d10:	f7ff fe1c 	bl	801194c <Switch_TASK_Inspiration_CYCLE>
}
 8011d14:	bf00      	nop
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	20014068 	.word	0x20014068
 8011d1c:	20014018 	.word	0x20014018
 8011d20:	2001434c 	.word	0x2001434c
 8011d24:	20014240 	.word	0x20014240
 8011d28:	20013ca9 	.word	0x20013ca9

08011d2c <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	af00      	add	r7, sp, #0
	if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 8011d30:	4b0e      	ldr	r3, [pc, #56]	; (8011d6c <CHECK_TRIGGER_OFFSET+0x40>)
 8011d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d008      	beq.n	8011d4a <CHECK_TRIGGER_OFFSET+0x1e>
 8011d38:	4b0c      	ldr	r3, [pc, #48]	; (8011d6c <CHECK_TRIGGER_OFFSET+0x40>)
 8011d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d3c:	f113 0f08 	cmn.w	r3, #8
 8011d40:	db0f      	blt.n	8011d62 <CHECK_TRIGGER_OFFSET+0x36>
 8011d42:	4b0a      	ldr	r3, [pc, #40]	; (8011d6c <CHECK_TRIGGER_OFFSET+0x40>)
 8011d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	da0b      	bge.n	8011d62 <CHECK_TRIGGER_OFFSET+0x36>
	{
		Pressure_Trigger_Offset  =  Pressure_sensor.Pressure_Val;
 8011d4a:	4b09      	ldr	r3, [pc, #36]	; (8011d70 <CHECK_TRIGGER_OFFSET+0x44>)
 8011d4c:	789b      	ldrb	r3, [r3, #2]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	4b08      	ldr	r3, [pc, #32]	; (8011d74 <CHECK_TRIGGER_OFFSET+0x48>)
 8011d52:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  Flow_Sensor_cal._Flow_Val;
 8011d54:	4b05      	ldr	r3, [pc, #20]	; (8011d6c <CHECK_TRIGGER_OFFSET+0x40>)
 8011d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d58:	4a07      	ldr	r2, [pc, #28]	; (8011d78 <CHECK_TRIGGER_OFFSET+0x4c>)
 8011d5a:	6013      	str	r3, [r2, #0]
		FLOW_TRIGGER             =  RESET;
 8011d5c:	4b07      	ldr	r3, [pc, #28]	; (8011d7c <CHECK_TRIGGER_OFFSET+0x50>)
 8011d5e:	2200      	movs	r2, #0
 8011d60:	701a      	strb	r2, [r3, #0]
	}
}
 8011d62:	bf00      	nop
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr
 8011d6c:	20013fb0 	.word	0x20013fb0
 8011d70:	2001405c 	.word	0x2001405c
 8011d74:	20014024 	.word	0x20014024
 8011d78:	20014018 	.word	0x20014018
 8011d7c:	20014068 	.word	0x20014068

08011d80 <CHECK_Flow_Increment>:



static void CHECK_Flow_Increment()
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	af00      	add	r7, sp, #0
	   if( Flow_increment == Low_Flow_Problem )
 8011d84:	4b1b      	ldr	r3, [pc, #108]	; (8011df4 <CHECK_Flow_Increment+0x74>)
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d10d      	bne.n	8011da8 <CHECK_Flow_Increment+0x28>
	   {
		   INCREMENT_DAC_VAL_PER_ITERATION = (INCREMENT_DAC_VAL_PER_ITERATION + 1);
 8011d8c:	4b1a      	ldr	r3, [pc, #104]	; (8011df8 <CHECK_Flow_Increment+0x78>)
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	3301      	adds	r3, #1
 8011d92:	b2da      	uxtb	r2, r3
 8011d94:	4b18      	ldr	r3, [pc, #96]	; (8011df8 <CHECK_Flow_Increment+0x78>)
 8011d96:	701a      	strb	r2, [r3, #0]
		       if(INCREMENT_DAC_VAL_PER_ITERATION >10)
 8011d98:	4b17      	ldr	r3, [pc, #92]	; (8011df8 <CHECK_Flow_Increment+0x78>)
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	2b0a      	cmp	r3, #10
 8011d9e:	d914      	bls.n	8011dca <CHECK_Flow_Increment+0x4a>
		    	   INCREMENT_DAC_VAL_PER_ITERATION=10;
 8011da0:	4b15      	ldr	r3, [pc, #84]	; (8011df8 <CHECK_Flow_Increment+0x78>)
 8011da2:	220a      	movs	r2, #10
 8011da4:	701a      	strb	r2, [r3, #0]
 8011da6:	e010      	b.n	8011dca <CHECK_Flow_Increment+0x4a>
	   }
	   else if(Flow_increment == High_Flow_Problem)
 8011da8:	4b12      	ldr	r3, [pc, #72]	; (8011df4 <CHECK_Flow_Increment+0x74>)
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	2b02      	cmp	r3, #2
 8011dae:	d10c      	bne.n	8011dca <CHECK_Flow_Increment+0x4a>
	   {
		   INCREMENT_DAC_VAL_PER_ITERATION = (INCREMENT_DAC_VAL_PER_ITERATION - 1);
 8011db0:	4b11      	ldr	r3, [pc, #68]	; (8011df8 <CHECK_Flow_Increment+0x78>)
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	3b01      	subs	r3, #1
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	4b0f      	ldr	r3, [pc, #60]	; (8011df8 <CHECK_Flow_Increment+0x78>)
 8011dba:	701a      	strb	r2, [r3, #0]
		       if(INCREMENT_DAC_VAL_PER_ITERATION <3)
 8011dbc:	4b0e      	ldr	r3, [pc, #56]	; (8011df8 <CHECK_Flow_Increment+0x78>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	2b02      	cmp	r3, #2
 8011dc2:	d802      	bhi.n	8011dca <CHECK_Flow_Increment+0x4a>
		    	   INCREMENT_DAC_VAL_PER_ITERATION=3;
 8011dc4:	4b0c      	ldr	r3, [pc, #48]	; (8011df8 <CHECK_Flow_Increment+0x78>)
 8011dc6:	2203      	movs	r2, #3
 8011dc8:	701a      	strb	r2, [r3, #0]
	   }
	    Set_Flow_value       = Not_Detect;
 8011dca:	4b0c      	ldr	r3, [pc, #48]	; (8011dfc <CHECK_Flow_Increment+0x7c>)
 8011dcc:	2200      	movs	r2, #0
 8011dce:	701a      	strb	r2, [r3, #0]
		Flow_increment       = Flow_fine;
 8011dd0:	4b08      	ldr	r3, [pc, #32]	; (8011df4 <CHECK_Flow_Increment+0x74>)
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	701a      	strb	r2, [r3, #0]
		Check_Flow_Graph(VC_SIMV.FLOW_RATE_Val);
 8011dd6:	4b0a      	ldr	r3, [pc, #40]	; (8011e00 <CHECK_Flow_Increment+0x80>)
 8011dd8:	7c9b      	ldrb	r3, [r3, #18]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f000 f816 	bl	8011e0c <Check_Flow_Graph>
		memset(Volume_Array, 0,(100*sizeof(Volume_Array[0])) );
 8011de0:	2264      	movs	r2, #100	; 0x64
 8011de2:	2100      	movs	r1, #0
 8011de4:	4807      	ldr	r0, [pc, #28]	; (8011e04 <CHECK_Flow_Increment+0x84>)
 8011de6:	f00f fecb 	bl	8021b80 <memset>
		Volume_Array_count = 0;
 8011dea:	4b07      	ldr	r3, [pc, #28]	; (8011e08 <CHECK_Flow_Increment+0x88>)
 8011dec:	2200      	movs	r2, #0
 8011dee:	801a      	strh	r2, [r3, #0]
}
 8011df0:	bf00      	nop
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	20013f2a 	.word	0x20013f2a
 8011df8:	200140c3 	.word	0x200140c3
 8011dfc:	200140fc 	.word	0x200140fc
 8011e00:	2001434c 	.word	0x2001434c
 8011e04:	20013dc0 	.word	0x20013dc0
 8011e08:	2001414c 	.word	0x2001414c

08011e0c <Check_Flow_Graph>:



static void Check_Flow_Graph(uint8_t flow_rate)
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b085      	sub	sp, #20
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	4603      	mov	r3, r0
 8011e14:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<100;i++)
 8011e16:	2300      	movs	r3, #0
 8011e18:	60fb      	str	r3, [r7, #12]
 8011e1a:	e02f      	b.n	8011e7c <Check_Flow_Graph+0x70>
	{
		if(Volume_Array[i] == flow_rate)
 8011e1c:	4a1c      	ldr	r2, [pc, #112]	; (8011e90 <Check_Flow_Graph+0x84>)
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	4413      	add	r3, r2
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	79fa      	ldrb	r2, [r7, #7]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d102      	bne.n	8011e30 <Check_Flow_Graph+0x24>
		{
			Set_Flow_value = Detect;
 8011e2a:	4b1a      	ldr	r3, [pc, #104]	; (8011e94 <Check_Flow_Graph+0x88>)
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	701a      	strb	r2, [r3, #0]
		}
		if(Set_Flow_value == Detect)
 8011e30:	4b18      	ldr	r3, [pc, #96]	; (8011e94 <Check_Flow_Graph+0x88>)
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d11e      	bne.n	8011e76 <Check_Flow_Graph+0x6a>
		{
			if( (Volume_Array[i] < (flow_rate-9))  && (Volume_Array[i] !=0) )
 8011e38:	4a15      	ldr	r2, [pc, #84]	; (8011e90 <Check_Flow_Graph+0x84>)
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	461a      	mov	r2, r3
 8011e42:	79fb      	ldrb	r3, [r7, #7]
 8011e44:	3b09      	subs	r3, #9
 8011e46:	429a      	cmp	r2, r3
 8011e48:	da09      	bge.n	8011e5e <Check_Flow_Graph+0x52>
 8011e4a:	4a11      	ldr	r2, [pc, #68]	; (8011e90 <Check_Flow_Graph+0x84>)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	4413      	add	r3, r2
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d003      	beq.n	8011e5e <Check_Flow_Graph+0x52>
			{
				Flow_increment = Low_Flow_Problem;
 8011e56:	4b10      	ldr	r3, [pc, #64]	; (8011e98 <Check_Flow_Graph+0x8c>)
 8011e58:	2201      	movs	r2, #1
 8011e5a:	701a      	strb	r2, [r3, #0]
 8011e5c:	e00b      	b.n	8011e76 <Check_Flow_Graph+0x6a>
			}
			else if( (Volume_Array[i] > (flow_rate+8)))
 8011e5e:	4a0c      	ldr	r2, [pc, #48]	; (8011e90 <Check_Flow_Graph+0x84>)
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	4413      	add	r3, r2
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	461a      	mov	r2, r3
 8011e68:	79fb      	ldrb	r3, [r7, #7]
 8011e6a:	3308      	adds	r3, #8
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	dd02      	ble.n	8011e76 <Check_Flow_Graph+0x6a>
			{
				Flow_increment = High_Flow_Problem;
 8011e70:	4b09      	ldr	r3, [pc, #36]	; (8011e98 <Check_Flow_Graph+0x8c>)
 8011e72:	2202      	movs	r2, #2
 8011e74:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<100;i++)
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	60fb      	str	r3, [r7, #12]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2b63      	cmp	r3, #99	; 0x63
 8011e80:	ddcc      	ble.n	8011e1c <Check_Flow_Graph+0x10>
			}
		}
	}
}
 8011e82:	bf00      	nop
 8011e84:	bf00      	nop
 8011e86:	3714      	adds	r7, #20
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8e:	4770      	bx	lr
 8011e90:	20013dc0 	.word	0x20013dc0
 8011e94:	200140fc 	.word	0x200140fc
 8011e98:	20013f2a 	.word	0x20013f2a

08011e9c <Trigger_Time_Monitor>:



static void Trigger_Time_Monitor()
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	af00      	add	r7, sp, #0
	VC_SIMV.CALC_TRIG_VAL 	                 =  (VC_SIMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 8011ea0:	4b11      	ldr	r3, [pc, #68]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	b29a      	uxth	r2, r3
 8011ea6:	4b11      	ldr	r3, [pc, #68]	; (8011eec <Trigger_Time_Monitor+0x50>)
 8011ea8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	b29a      	uxth	r2, r3
 8011eb2:	4b0d      	ldr	r3, [pc, #52]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011eb4:	835a      	strh	r2, [r3, #26]
	if(VC_SIMV.CALC_TRIG_VAL <0)
	{
		VC_SIMV.CALC_TRIG_VAL = (VC_SIMV.CALC_TRIG_VAL * (-1));
	}
	VC_SIMV.TOLERANCE_EWAVE =  VC_SIMV.TRIG_TIME;
 8011eb6:	4b0c      	ldr	r3, [pc, #48]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011eb8:	8b1a      	ldrh	r2, [r3, #24]
 8011eba:	4b0b      	ldr	r3, [pc, #44]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011ebc:	839a      	strh	r2, [r3, #28]
	if(VC_SIMV.CALC_TRIG_VAL < VC_SIMV.TRIG_TIME )
 8011ebe:	4b0a      	ldr	r3, [pc, #40]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011ec0:	8b5a      	ldrh	r2, [r3, #26]
 8011ec2:	4b09      	ldr	r3, [pc, #36]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011ec4:	8b1b      	ldrh	r3, [r3, #24]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d205      	bcs.n	8011ed6 <Trigger_Time_Monitor+0x3a>
	{
		VC_SIMV.TOLERANCE_EWAVE =  (VC_SIMV.TRIG_TIME - 200) ;
 8011eca:	4b07      	ldr	r3, [pc, #28]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011ecc:	8b1b      	ldrh	r3, [r3, #24]
 8011ece:	3bc8      	subs	r3, #200	; 0xc8
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	4b05      	ldr	r3, [pc, #20]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011ed4:	839a      	strh	r2, [r3, #28]
	}

	VC_SIMV.TRIG_WINDOW		                 = VC_SIMV.TOLERANCE_EWAVE;
 8011ed6:	4b04      	ldr	r3, [pc, #16]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011ed8:	8b9a      	ldrh	r2, [r3, #28]
 8011eda:	4b03      	ldr	r3, [pc, #12]	; (8011ee8 <Trigger_Time_Monitor+0x4c>)
 8011edc:	83da      	strh	r2, [r3, #30]
}
 8011ede:	bf00      	nop
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr
 8011ee8:	2001434c 	.word	0x2001434c
 8011eec:	20014300 	.word	0x20014300

08011ef0 <Vc_Cmv_Mode_Packet_Data>:
static void CHECK_Flow_Increment();
static void Check_Flow_Graph(uint8_t);


void Vc_Cmv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	VC_CMV.VOLUME_Val             = Receive_Graph_Packet->VTI_VS;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	88db      	ldrh	r3, [r3, #6]
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	4b1a      	ldr	r3, [pc, #104]	; (8011f68 <Vc_Cmv_Mode_Packet_Data+0x78>)
 8011f00:	801a      	strh	r2, [r3, #0]
	VC_CMV.PEEP_Val               = Receive_Graph_Packet->PEEP_CPAP_Plow;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	795a      	ldrb	r2, [r3, #5]
 8011f06:	4b18      	ldr	r3, [pc, #96]	; (8011f68 <Vc_Cmv_Mode_Packet_Data+0x78>)
 8011f08:	709a      	strb	r2, [r3, #2]
	VC_CMV.FIO2_Val               = Receive_Graph_Packet->FiO2;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	7a1a      	ldrb	r2, [r3, #8]
 8011f0e:	4b16      	ldr	r3, [pc, #88]	; (8011f68 <Vc_Cmv_Mode_Packet_Data+0x78>)
 8011f10:	711a      	strb	r2, [r3, #4]

	VC_CMV.RESPIRATORY_RATE_Val   = Receive_Graph_Packet->RR;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	7a5a      	ldrb	r2, [r3, #9]
 8011f16:	4b14      	ldr	r3, [pc, #80]	; (8011f68 <Vc_Cmv_Mode_Packet_Data+0x78>)
 8011f18:	70da      	strb	r2, [r3, #3]
	One_Breathe_time              = (One_Minite_In_MS / VC_CMV.RESPIRATORY_RATE_Val);
 8011f1a:	4b13      	ldr	r3, [pc, #76]	; (8011f68 <Vc_Cmv_Mode_Packet_Data+0x78>)
 8011f1c:	78db      	ldrb	r3, [r3, #3]
 8011f1e:	461a      	mov	r2, r3
 8011f20:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011f24:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f28:	60fb      	str	r3, [r7, #12]
	VC_CMV.INSPIRATION_TIME       = ( ( Receive_Graph_Packet->T_high) * 100 );
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	7a9b      	ldrb	r3, [r3, #10]
 8011f2e:	461a      	mov	r2, r3
 8011f30:	2364      	movs	r3, #100	; 0x64
 8011f32:	fb03 f302 	mul.w	r3, r3, r2
 8011f36:	461a      	mov	r2, r3
 8011f38:	4b0b      	ldr	r3, [pc, #44]	; (8011f68 <Vc_Cmv_Mode_Packet_Data+0x78>)
 8011f3a:	609a      	str	r2, [r3, #8]
	VC_CMV.EXPIRATION_TIME        = (One_Breathe_time - VC_CMV.INSPIRATION_TIME);
 8011f3c:	4b0a      	ldr	r3, [pc, #40]	; (8011f68 <Vc_Cmv_Mode_Packet_Data+0x78>)
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	1ad3      	subs	r3, r2, r3
 8011f44:	4a08      	ldr	r2, [pc, #32]	; (8011f68 <Vc_Cmv_Mode_Packet_Data+0x78>)
 8011f46:	60d3      	str	r3, [r2, #12]


	VC_CMV.FLOW_RATE_Val          = Receive_Graph_Packet->Flow_Limit_FiO2_Flow_Limit;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	7b5a      	ldrb	r2, [r3, #13]
 8011f4c:	4b06      	ldr	r3, [pc, #24]	; (8011f68 <Vc_Cmv_Mode_Packet_Data+0x78>)
 8011f4e:	749a      	strb	r2, [r3, #18]

    Mode_Initial_Flag_Set         = OPEN;
 8011f50:	4b06      	ldr	r3, [pc, #24]	; (8011f6c <Vc_Cmv_Mode_Packet_Data+0x7c>)
 8011f52:	2201      	movs	r2, #1
 8011f54:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 8011f56:	4b06      	ldr	r3, [pc, #24]	; (8011f70 <Vc_Cmv_Mode_Packet_Data+0x80>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f00d fa5e 	bl	801f41c <vTaskResume>
}
 8011f60:	bf00      	nop
 8011f62:	3710      	adds	r7, #16
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	20014324 	.word	0x20014324
 8011f6c:	20014338 	.word	0x20014338
 8011f70:	2001406c 	.word	0x2001406c

08011f74 <Vc_Cmv_Task>:



void Vc_Cmv_Task (void *argument)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		switch (Run_Current_Breathe_State)
 8011f7c:	4b14      	ldr	r3, [pc, #80]	; (8011fd0 <Vc_Cmv_Task+0x5c>)
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	2b02      	cmp	r3, #2
 8011f82:	d00b      	beq.n	8011f9c <Vc_Cmv_Task+0x28>
 8011f84:	2b02      	cmp	r3, #2
 8011f86:	dc1c      	bgt.n	8011fc2 <Vc_Cmv_Task+0x4e>
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d01c      	beq.n	8011fc6 <Vc_Cmv_Task+0x52>
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d118      	bne.n	8011fc2 <Vc_Cmv_Task+0x4e>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_VC_CMV(Volume_Mode_Blower_control.BLOWER_DAC_VAL);
 8011f90:	4b10      	ldr	r3, [pc, #64]	; (8011fd4 <Vc_Cmv_Task+0x60>)
 8011f92:	881b      	ldrh	r3, [r3, #0]
 8011f94:	4618      	mov	r0, r3
 8011f96:	f000 f823 	bl	8011fe0 <Inspiration_Time_Blower_Control_VC_CMV>
			break;
 8011f9a:	e015      	b.n	8011fc8 <Vc_Cmv_Task+0x54>
			case Run_Expiration_Cycle:
				Volume_Mode_Blower_control.BLOWER_DAC_VAL=0;
 8011f9c:	4b0d      	ldr	r3, [pc, #52]	; (8011fd4 <Vc_Cmv_Task+0x60>)
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	801a      	strh	r2, [r3, #0]
				Expiration_Time_Blower_Control_VC_CMV(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 8011fa2:	4b0c      	ldr	r3, [pc, #48]	; (8011fd4 <Vc_Cmv_Task+0x60>)
 8011fa4:	881b      	ldrh	r3, [r3, #0]
 8011fa6:	4a0c      	ldr	r2, [pc, #48]	; (8011fd8 <Vc_Cmv_Task+0x64>)
 8011fa8:	edd2 7a00 	vldr	s15, [r2]
						   	   	   	   	   	          PEEP_Maintain_Parameter.PEEP_Temp,
						                              PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8011fac:	4a0a      	ldr	r2, [pc, #40]	; (8011fd8 <Vc_Cmv_Task+0x64>)
 8011fae:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_VC_CMV(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 8011fb2:	b292      	uxth	r2, r2
 8011fb4:	4611      	mov	r1, r2
 8011fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f000 f844 	bl	8012048 <Expiration_Time_Blower_Control_VC_CMV>
			break;
 8011fc0:	e002      	b.n	8011fc8 <Vc_Cmv_Task+0x54>
			case No_Run_State:
			break;
			default:
			break;
 8011fc2:	bf00      	nop
 8011fc4:	e000      	b.n	8011fc8 <Vc_Cmv_Task+0x54>
			break;
 8011fc6:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 8011fc8:	2002      	movs	r0, #2
 8011fca:	f00d f92f 	bl	801f22c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 8011fce:	e7d5      	b.n	8011f7c <Vc_Cmv_Task+0x8>
 8011fd0:	20013f7c 	.word	0x20013f7c
 8011fd4:	2001407c 	.word	0x2001407c
 8011fd8:	20014300 	.word	0x20014300
 8011fdc:	00000000 	.word	0x00000000

08011fe0 <Inspiration_Time_Blower_Control_VC_CMV>:
	}
}


static void Inspiration_Time_Blower_Control_VC_CMV(uint16_t Blower_Signal)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	80fb      	strh	r3, [r7, #6]
	Volume_Mode_Blower_control.Blower_Signal_Voltage = ( (Blower_Signal*3.3) /4095);
 8011fea:	88fb      	ldrh	r3, [r7, #6]
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7ee fa41 	bl	8000474 <__aeabi_i2d>
 8011ff2:	a311      	add	r3, pc, #68	; (adr r3, 8012038 <Inspiration_Time_Blower_Control_VC_CMV+0x58>)
 8011ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff8:	f7ee faa6 	bl	8000548 <__aeabi_dmul>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	460b      	mov	r3, r1
 8012000:	4610      	mov	r0, r2
 8012002:	4619      	mov	r1, r3
 8012004:	a30e      	add	r3, pc, #56	; (adr r3, 8012040 <Inspiration_Time_Blower_Control_VC_CMV+0x60>)
 8012006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200a:	f7ee fbc7 	bl	800079c <__aeabi_ddiv>
 801200e:	4602      	mov	r2, r0
 8012010:	460b      	mov	r3, r1
 8012012:	4610      	mov	r0, r2
 8012014:	4619      	mov	r1, r3
 8012016:	f7ee fd79 	bl	8000b0c <__aeabi_d2f>
 801201a:	4603      	mov	r3, r0
 801201c:	4a04      	ldr	r2, [pc, #16]	; (8012030 <Inspiration_Time_Blower_Control_VC_CMV+0x50>)
 801201e:	6093      	str	r3, [r2, #8]
	Blower_Signal(Blower_Signal);
 8012020:	4a04      	ldr	r2, [pc, #16]	; (8012034 <Inspiration_Time_Blower_Control_VC_CMV+0x54>)
 8012022:	88fb      	ldrh	r3, [r7, #6]
 8012024:	6093      	str	r3, [r2, #8]
}
 8012026:	bf00      	nop
 8012028:	3708      	adds	r7, #8
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}
 801202e:	bf00      	nop
 8012030:	2001407c 	.word	0x2001407c
 8012034:	40007400 	.word	0x40007400
 8012038:	66666666 	.word	0x66666666
 801203c:	400a6666 	.word	0x400a6666
 8012040:	00000000 	.word	0x00000000
 8012044:	40affe00 	.word	0x40affe00

08012048 <Expiration_Time_Blower_Control_VC_CMV>:


static void Expiration_Time_Blower_Control_VC_CMV(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	4603      	mov	r3, r0
 8012050:	ed87 0a00 	vstr	s0, [r7]
 8012054:	460a      	mov	r2, r1
 8012056:	80fb      	strh	r3, [r7, #6]
 8012058:	4613      	mov	r3, r2
 801205a:	80bb      	strh	r3, [r7, #4]
	Blower_Signal( Blower_Signal);
 801205c:	4a25      	ldr	r2, [pc, #148]	; (80120f4 <Expiration_Time_Blower_Control_VC_CMV+0xac>)
 801205e:	88fb      	ldrh	r3, [r7, #6]
 8012060:	6093      	str	r3, [r2, #8]
		if(Peep_Status==PEEP_ACHEIVED)
 8012062:	4b25      	ldr	r3, [pc, #148]	; (80120f8 <Expiration_Time_Blower_Control_VC_CMV+0xb0>)
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	2b01      	cmp	r3, #1
 8012068:	d113      	bne.n	8012092 <Expiration_Time_Blower_Control_VC_CMV+0x4a>
		{
				if(Pressure_sensor.Pressure_Val < PEEP)
 801206a:	4b24      	ldr	r3, [pc, #144]	; (80120fc <Expiration_Time_Blower_Control_VC_CMV+0xb4>)
 801206c:	789b      	ldrb	r3, [r3, #2]
 801206e:	ee07 3a90 	vmov	s15, r3
 8012072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012076:	ed97 7a00 	vldr	s14, [r7]
 801207a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012082:	dd03      	ble.n	801208c <Expiration_Time_Blower_Control_VC_CMV+0x44>
				{
					Blower_Signal( Blower_Signal);
 8012084:	4a1b      	ldr	r2, [pc, #108]	; (80120f4 <Expiration_Time_Blower_Control_VC_CMV+0xac>)
 8012086:	88fb      	ldrh	r3, [r7, #6]
 8012088:	6093      	str	r3, [r2, #8]
 801208a:	e002      	b.n	8012092 <Expiration_Time_Blower_Control_VC_CMV+0x4a>
				}
				else
				{
					Blower_Signal( Blower_Signal);
 801208c:	4a19      	ldr	r2, [pc, #100]	; (80120f4 <Expiration_Time_Blower_Control_VC_CMV+0xac>)
 801208e:	88fb      	ldrh	r3, [r7, #6]
 8012090:	6093      	str	r3, [r2, #8]
				}
		 }
		if(Pressure_sensor.Pressure_Val<= PEEP)
 8012092:	4b1a      	ldr	r3, [pc, #104]	; (80120fc <Expiration_Time_Blower_Control_VC_CMV+0xb4>)
 8012094:	789b      	ldrb	r3, [r3, #2]
 8012096:	ee07 3a90 	vmov	s15, r3
 801209a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801209e:	ed97 7a00 	vldr	s14, [r7]
 80120a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80120a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120aa:	db14      	blt.n	80120d6 <Expiration_Time_Blower_Control_VC_CMV+0x8e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 80120ac:	4b14      	ldr	r3, [pc, #80]	; (8012100 <Expiration_Time_Blower_Control_VC_CMV+0xb8>)
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d106      	bne.n	80120c2 <Expiration_Time_Blower_Control_VC_CMV+0x7a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 80120b4:	4b12      	ldr	r3, [pc, #72]	; (8012100 <Expiration_Time_Blower_Control_VC_CMV+0xb8>)
 80120b6:	2201      	movs	r2, #1
 80120b8:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Expiratory_Valve_Open_Time);
 80120ba:	88bb      	ldrh	r3, [r7, #4]
 80120bc:	4618      	mov	r0, r3
 80120be:	f00d f8b5 	bl	801f22c <vTaskDelay>
			}
			Peep_Status=PEEP_ACHEIVED;
 80120c2:	4b0d      	ldr	r3, [pc, #52]	; (80120f8 <Expiration_Time_Blower_Control_VC_CMV+0xb0>)
 80120c4:	2201      	movs	r2, #1
 80120c6:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 80120c8:	4b0e      	ldr	r3, [pc, #56]	; (8012104 <Expiration_Time_Blower_Control_VC_CMV+0xbc>)
 80120ca:	695b      	ldr	r3, [r3, #20]
 80120cc:	4a0d      	ldr	r2, [pc, #52]	; (8012104 <Expiration_Time_Blower_Control_VC_CMV+0xbc>)
 80120ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80120d2:	6153      	str	r3, [r2, #20]
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
		{
			ExpValve_OPEN();
		}
}
 80120d4:	e009      	b.n	80120ea <Expiration_Time_Blower_Control_VC_CMV+0xa2>
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 80120d6:	4b08      	ldr	r3, [pc, #32]	; (80120f8 <Expiration_Time_Blower_Control_VC_CMV+0xb0>)
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d105      	bne.n	80120ea <Expiration_Time_Blower_Control_VC_CMV+0xa2>
			ExpValve_OPEN();
 80120de:	4b09      	ldr	r3, [pc, #36]	; (8012104 <Expiration_Time_Blower_Control_VC_CMV+0xbc>)
 80120e0:	695b      	ldr	r3, [r3, #20]
 80120e2:	4a08      	ldr	r2, [pc, #32]	; (8012104 <Expiration_Time_Blower_Control_VC_CMV+0xbc>)
 80120e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80120e8:	6153      	str	r3, [r2, #20]
}
 80120ea:	bf00      	nop
 80120ec:	3708      	adds	r7, #8
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	40007400 	.word	0x40007400
 80120f8:	200140f5 	.word	0x200140f5
 80120fc:	2001405c 	.word	0x2001405c
 8012100:	200140f4 	.word	0x200140f4
 8012104:	40020400 	.word	0x40020400

08012108 <VC_CMV_Inspiration_Time_Variables_Reset>:



void VC_CMV_Inspiration_Time_Variables_Reset()
{
 8012108:	b590      	push	{r4, r7, lr}
 801210a:	b083      	sub	sp, #12
 801210c:	af02      	add	r7, sp, #8

	Breath_Count         = Count_The_Breath;
 801210e:	4b5d      	ldr	r3, [pc, #372]	; (8012284 <VC_CMV_Inspiration_Time_Variables_Reset+0x17c>)
 8012110:	2201      	movs	r2, #1
 8012112:	701a      	strb	r2, [r3, #0]
	if( (VC_CMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 8012114:	4b5c      	ldr	r3, [pc, #368]	; (8012288 <VC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 8012116:	789a      	ldrb	r2, [r3, #2]
 8012118:	4b5c      	ldr	r3, [pc, #368]	; (801228c <VC_CMV_Inspiration_Time_Variables_Reset+0x184>)
 801211a:	7c1b      	ldrb	r3, [r3, #16]
 801211c:	429a      	cmp	r2, r3
 801211e:	d102      	bne.n	8012126 <VC_CMV_Inspiration_Time_Variables_Reset+0x1e>
	{
	   CHECK_Flow_Increment();
 8012120:	f000 f94c 	bl	80123bc <CHECK_Flow_Increment>
 8012124:	e00a      	b.n	801213c <VC_CMV_Inspiration_Time_Variables_Reset+0x34>
	}
	else
	{
		Flow_increment       = Flow_fine;
 8012126:	4b5a      	ldr	r3, [pc, #360]	; (8012290 <VC_CMV_Inspiration_Time_Variables_Reset+0x188>)
 8012128:	2200      	movs	r2, #0
 801212a:	701a      	strb	r2, [r3, #0]
		memset(Volume_Array, 0,(100*sizeof(Volume_Array[0])) );
 801212c:	2264      	movs	r2, #100	; 0x64
 801212e:	2100      	movs	r1, #0
 8012130:	4858      	ldr	r0, [pc, #352]	; (8012294 <VC_CMV_Inspiration_Time_Variables_Reset+0x18c>)
 8012132:	f00f fd25 	bl	8021b80 <memset>
		Volume_Array_count = 0;
 8012136:	4b58      	ldr	r3, [pc, #352]	; (8012298 <VC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 8012138:	2200      	movs	r2, #0
 801213a:	801a      	strh	r2, [r3, #0]
	}
	Reset_Blower_Status();
 801213c:	f000 f9da 	bl	80124f4 <Reset_Blower_Status>
	Volume_Not_Acheieved();
 8012140:	f000 f9ca 	bl	80124d8 <Volume_Not_Acheieved>
	ExpValve_CLOSE();
 8012144:	4b55      	ldr	r3, [pc, #340]	; (801229c <VC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 8012146:	695b      	ldr	r3, [r3, #20]
 8012148:	4a54      	ldr	r2, [pc, #336]	; (801229c <VC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 801214a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801214e:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 8012150:	f7f6 ff64 	bl	800901c <PIP_AVERAGE>
	PEEP_AVERAGE();
 8012154:	f7f6 ff88 	bl	8009068 <PEEP_AVERAGE>
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 8012158:	4b51      	ldr	r3, [pc, #324]	; (80122a0 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 801215a:	78db      	ldrb	r3, [r3, #3]
 801215c:	4618      	mov	r0, r3
 801215e:	f7f9 fcd3 	bl	800bb08 <O2_DAC_Control>
	Check_Alert();
 8012162:	f7ee ffc9 	bl	80010f8 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 8012166:	f7ef f871 	bl	800124c <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 801216a:	f7ef fc21 	bl	80019b0 <LED_Alert>
	Alert_Status = NO_ALERT;
 801216e:	4b4d      	ldr	r3, [pc, #308]	; (80122a4 <VC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 8012170:	2200      	movs	r2, #0
 8012172:	701a      	strb	r2, [r3, #0]
	Sampled_Parameter_Inspiration_time();
 8012174:	f7fe fbb8 	bl	80108e8 <Sampled_Parameter_Inspiration_time>
	if( (VC_CMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 8012178:	4b43      	ldr	r3, [pc, #268]	; (8012288 <VC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 801217a:	789a      	ldrb	r2, [r3, #2]
 801217c:	4b43      	ldr	r3, [pc, #268]	; (801228c <VC_CMV_Inspiration_Time_Variables_Reset+0x184>)
 801217e:	7c1b      	ldrb	r3, [r3, #16]
 8012180:	429a      	cmp	r2, r3
 8012182:	d013      	beq.n	80121ac <VC_CMV_Inspiration_Time_Variables_Reset+0xa4>
	{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 8012184:	4b41      	ldr	r3, [pc, #260]	; (801228c <VC_CMV_Inspiration_Time_Variables_Reset+0x184>)
 8012186:	7c18      	ldrb	r0, [r3, #16]
 8012188:	4b3f      	ldr	r3, [pc, #252]	; (8012288 <VC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 801218a:	78d9      	ldrb	r1, [r3, #3]
 801218c:	4b3e      	ldr	r3, [pc, #248]	; (8012288 <VC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 801218e:	689a      	ldr	r2, [r3, #8]
 8012190:	4b3d      	ldr	r3, [pc, #244]	; (8012288 <VC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 8012192:	789c      	ldrb	r4, [r3, #2]
																												           VC_CMV.RESPIRATORY_RATE_Val,
													                                                                       VC_CMV.INSPIRATION_TIME,
													                                                                       VC_CMV.PEEP_Val,
																												           PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8012194:	4b3d      	ldr	r3, [pc, #244]	; (801228c <VC_CMV_Inspiration_Time_Variables_Reset+0x184>)
 8012196:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 801219a:	b29b      	uxth	r3, r3
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	4623      	mov	r3, r4
 80121a0:	f7f4 f8ec 	bl	800637c <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode>
 80121a4:	4603      	mov	r3, r0
 80121a6:	b21a      	sxth	r2, r3
 80121a8:	4b38      	ldr	r3, [pc, #224]	; (801228c <VC_CMV_Inspiration_Time_Variables_Reset+0x184>)
 80121aa:	809a      	strh	r2, [r3, #4]

	}
    VOLUME_STOP_POINT(Common_Mode_Parameter._VOLUME_Val,Volume_control_Task.Achieved_Volume);
 80121ac:	4b3c      	ldr	r3, [pc, #240]	; (80122a0 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 80121ae:	889b      	ldrh	r3, [r3, #4]
 80121b0:	4a3d      	ldr	r2, [pc, #244]	; (80122a8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1a0>)
 80121b2:	8852      	ldrh	r2, [r2, #2]
 80121b4:	4611      	mov	r1, r2
 80121b6:	4618      	mov	r0, r3
 80121b8:	f000 fa9e 	bl	80126f8 <VOLUME_STOP_POINT>
    Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL          =  TUNE_INITIAL_DAC_VAL(Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL,
 80121bc:	4b3b      	ldr	r3, [pc, #236]	; (80122ac <VC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 80121be:	889b      	ldrh	r3, [r3, #4]
 80121c0:	4a37      	ldr	r2, [pc, #220]	; (80122a0 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 80121c2:	7991      	ldrb	r1, [r2, #6]
 80121c4:	4a38      	ldr	r2, [pc, #224]	; (80122a8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1a0>)
 80121c6:	7852      	ldrb	r2, [r2, #1]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f000 faf5 	bl	80127b8 <TUNE_INITIAL_DAC_VAL>
 80121ce:	4603      	mov	r3, r0
 80121d0:	461a      	mov	r2, r3
 80121d2:	4b36      	ldr	r3, [pc, #216]	; (80122ac <VC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 80121d4:	805a      	strh	r2, [r3, #2]
    		                                                                           Common_Mode_Parameter._FLOW_RATE,
																					   Volume_control_Task.Flow_Max_Achieved);

    Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL;
 80121d6:	4b35      	ldr	r3, [pc, #212]	; (80122ac <VC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 80121d8:	885a      	ldrh	r2, [r3, #2]
 80121da:	4b34      	ldr	r3, [pc, #208]	; (80122ac <VC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 80121dc:	809a      	strh	r2, [r3, #4]

    LOW_COMPLIANCE_DAC                                         = LOW_Compliance_DAC_value(Common_Mode_Parameter._FLOW_RATE);
 80121de:	4b30      	ldr	r3, [pc, #192]	; (80122a0 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 80121e0:	799b      	ldrb	r3, [r3, #6]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f000 fb40 	bl	8012868 <LOW_Compliance_DAC_value>
 80121e8:	4603      	mov	r3, r0
 80121ea:	461a      	mov	r2, r3
 80121ec:	4b30      	ldr	r3, [pc, #192]	; (80122b0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 80121ee:	801a      	strh	r2, [r3, #0]

	BREATH_STATE                                               = INSPIRATION_CYCLE;
 80121f0:	4b30      	ldr	r3, [pc, #192]	; (80122b4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1ac>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	701a      	strb	r2, [r3, #0]
	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 80121f6:	4b30      	ldr	r3, [pc, #192]	; (80122b8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1b0>)
 80121f8:	2200      	movs	r2, #0
 80121fa:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 80121fc:	4b2f      	ldr	r3, [pc, #188]	; (80122bc <VC_CMV_Inspiration_Time_Variables_Reset+0x1b4>)
 80121fe:	2200      	movs	r2, #0
 8012200:	701a      	strb	r2, [r3, #0]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 8012202:	4b2f      	ldr	r3, [pc, #188]	; (80122c0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1b8>)
 8012204:	2200      	movs	r2, #0
 8012206:	701a      	strb	r2, [r3, #0]
	Maximum_Flow_Achieved                                      = FLOW_NOT_ACHIEVED;
 8012208:	4b2e      	ldr	r3, [pc, #184]	; (80122c4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1bc>)
 801220a:	2200      	movs	r2, #0
 801220c:	701a      	strb	r2, [r3, #0]
	Volume_control_Task.Flow_Max_Achieved                      = RESET;
 801220e:	4b26      	ldr	r3, [pc, #152]	; (80122a8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1a0>)
 8012210:	2200      	movs	r2, #0
 8012212:	705a      	strb	r2, [r3, #1]
	Volume_Achieved_Status                                     = VOLUME_NOT_ACHIEVED;
 8012214:	4b2c      	ldr	r3, [pc, #176]	; (80122c8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c0>)
 8012216:	2200      	movs	r2, #0
 8012218:	701a      	strb	r2, [r3, #0]
	TIME_Base_parameter._INSPIRATION_TIME                      = VC_CMV.INSPIRATION_TIME;
 801221a:	4b1b      	ldr	r3, [pc, #108]	; (8012288 <VC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 801221c:	689b      	ldr	r3, [r3, #8]
 801221e:	461a      	mov	r2, r3
 8012220:	4b2a      	ldr	r3, [pc, #168]	; (80122cc <VC_CMV_Inspiration_Time_Variables_Reset+0x1c4>)
 8012222:	601a      	str	r2, [r3, #0]

	Led_Delay                                                  = (Total_Volume_Achieved_Time  /46);
 8012224:	4b2a      	ldr	r3, [pc, #168]	; (80122d0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 8012226:	881b      	ldrh	r3, [r3, #0]
 8012228:	4a2a      	ldr	r2, [pc, #168]	; (80122d4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1cc>)
 801222a:	fba2 2303 	umull	r2, r3, r2, r3
 801222e:	095b      	lsrs	r3, r3, #5
 8012230:	b29b      	uxth	r3, r3
 8012232:	ee07 3a90 	vmov	s15, r3
 8012236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801223a:	4b27      	ldr	r3, [pc, #156]	; (80122d8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1d0>)
 801223c:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                                   = 1;
 8012240:	4b26      	ldr	r3, [pc, #152]	; (80122dc <VC_CMV_Inspiration_Time_Variables_Reset+0x1d4>)
 8012242:	2201      	movs	r2, #1
 8012244:	701a      	strb	r2, [r3, #0]
	Volume_Achieved_Time                                       = 0;
 8012246:	4b26      	ldr	r3, [pc, #152]	; (80122e0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1d8>)
 8012248:	2200      	movs	r2, #0
 801224a:	801a      	strh	r2, [r3, #0]
	Total_Volume_Achieved_Time                                 = 0;
 801224c:	4b20      	ldr	r3, [pc, #128]	; (80122d0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 801224e:	2200      	movs	r2, #0
 8012250:	801a      	strh	r2, [r3, #0]

	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 8012252:	4b1e      	ldr	r3, [pc, #120]	; (80122cc <VC_CMV_Inspiration_Time_Variables_Reset+0x1c4>)
 8012254:	2200      	movs	r2, #0
 8012256:	609a      	str	r2, [r3, #8]
	vol.Volume                                                 = RESET;
 8012258:	4b22      	ldr	r3, [pc, #136]	; (80122e4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1dc>)
 801225a:	f04f 0200 	mov.w	r2, #0
 801225e:	601a      	str	r2, [r3, #0]
	vol.Volume_max                                             = RESET;
 8012260:	4b20      	ldr	r3, [pc, #128]	; (80122e4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1dc>)
 8012262:	2200      	movs	r2, #0
 8012264:	609a      	str	r2, [r3, #8]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 8012266:	4b20      	ldr	r3, [pc, #128]	; (80122e8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1e0>)
 8012268:	2201      	movs	r2, #1
 801226a:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 801226c:	4b1f      	ldr	r3, [pc, #124]	; (80122ec <VC_CMV_Inspiration_Time_Variables_Reset+0x1e4>)
 801226e:	2201      	movs	r2, #1
 8012270:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_CMV.INSPIRATION_TIME);
 8012272:	4b05      	ldr	r3, [pc, #20]	; (8012288 <VC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 8012274:	689b      	ldr	r3, [r3, #8]
 8012276:	4618      	mov	r0, r3
 8012278:	f00c ffd8 	bl	801f22c <vTaskDelay>
}
 801227c:	bf00      	nop
 801227e:	3704      	adds	r7, #4
 8012280:	46bd      	mov	sp, r7
 8012282:	bd90      	pop	{r4, r7, pc}
 8012284:	200139a6 	.word	0x200139a6
 8012288:	20014324 	.word	0x20014324
 801228c:	20014300 	.word	0x20014300
 8012290:	20013f2a 	.word	0x20013f2a
 8012294:	20013dc0 	.word	0x20013dc0
 8012298:	2001414c 	.word	0x2001414c
 801229c:	40020400 	.word	0x40020400
 80122a0:	20013ba4 	.word	0x20013ba4
 80122a4:	20013f88 	.word	0x20013f88
 80122a8:	20013f70 	.word	0x20013f70
 80122ac:	2001407c 	.word	0x2001407c
 80122b0:	20013c80 	.word	0x20013c80
 80122b4:	200140fd 	.word	0x200140fd
 80122b8:	200140f5 	.word	0x200140f5
 80122bc:	200140f4 	.word	0x200140f4
 80122c0:	20013b70 	.word	0x20013b70
 80122c4:	20013d3c 	.word	0x20013d3c
 80122c8:	20013d21 	.word	0x20013d21
 80122cc:	200141fc 	.word	0x200141fc
 80122d0:	200142b8 	.word	0x200142b8
 80122d4:	b21642c9 	.word	0xb21642c9
 80122d8:	20014078 	.word	0x20014078
 80122dc:	20013f3c 	.word	0x20013f3c
 80122e0:	20013a00 	.word	0x20013a00
 80122e4:	200140c8 	.word	0x200140c8
 80122e8:	20013d20 	.word	0x20013d20
 80122ec:	20013f7c 	.word	0x20013f7c

080122f0 <VC_CMV_Expiration_Time_Variables_Reset>:


void VC_CMV_Expiration_Time_Variables_Reset()
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	af00      	add	r7, sp, #0
	Volume_control_Task.Achieved_Volume                 = vol.Volume ;
 80122f4:	4b25      	ldr	r3, [pc, #148]	; (801238c <VC_CMV_Expiration_Time_Variables_Reset+0x9c>)
 80122f6:	edd3 7a00 	vldr	s15, [r3]
 80122fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122fe:	ee17 3a90 	vmov	r3, s15
 8012302:	b29a      	uxth	r2, r3
 8012304:	4b22      	ldr	r3, [pc, #136]	; (8012390 <VC_CMV_Expiration_Time_Variables_Reset+0xa0>)
 8012306:	805a      	strh	r2, [r3, #2]
	BREATH_STATE                                        = EXPIRATION_CYCLE;
 8012308:	4b22      	ldr	r3, [pc, #136]	; (8012394 <VC_CMV_Expiration_Time_Variables_Reset+0xa4>)
 801230a:	2201      	movs	r2, #1
 801230c:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 801230e:	4b22      	ldr	r3, [pc, #136]	; (8012398 <VC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 8012310:	2200      	movs	r2, #0
 8012312:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 8012314:	4b20      	ldr	r3, [pc, #128]	; (8012398 <VC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 8012316:	2200      	movs	r2, #0
 8012318:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 801231a:	4b1f      	ldr	r3, [pc, #124]	; (8012398 <VC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 801231c:	2200      	movs	r2, #0
 801231e:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 8012320:	4b1d      	ldr	r3, [pc, #116]	; (8012398 <VC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 8012322:	2200      	movs	r2, #0
 8012324:	60da      	str	r2, [r3, #12]
	Adjust_Servo_And_Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 8012326:	4b1d      	ldr	r3, [pc, #116]	; (801239c <VC_CMV_Expiration_Time_Variables_Reset+0xac>)
 8012328:	78db      	ldrb	r3, [r3, #3]
 801232a:	4618      	mov	r0, r3
 801232c:	f7f9 fa26 	bl	800b77c <Adjust_Servo_And_Calculate_O2>
	Alert_Expiration_Time_Parameter();
 8012330:	f7ee fffc 	bl	800132c <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = VC_CMV.EXPIRATION_TIME;
 8012334:	4b1a      	ldr	r3, [pc, #104]	; (80123a0 <VC_CMV_Expiration_Time_Variables_Reset+0xb0>)
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	461a      	mov	r2, r3
 801233a:	4b1a      	ldr	r3, [pc, #104]	; (80123a4 <VC_CMV_Expiration_Time_Variables_Reset+0xb4>)
 801233c:	605a      	str	r2, [r3, #4]

	Led_Delay                                           = ( (PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time + 500)  /46);
 801233e:	4b16      	ldr	r3, [pc, #88]	; (8012398 <VC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 8012340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012344:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8012348:	4a17      	ldr	r2, [pc, #92]	; (80123a8 <VC_CMV_Expiration_Time_Variables_Reset+0xb8>)
 801234a:	fb82 1203 	smull	r1, r2, r2, r3
 801234e:	441a      	add	r2, r3
 8012350:	1152      	asrs	r2, r2, #5
 8012352:	17db      	asrs	r3, r3, #31
 8012354:	1ad3      	subs	r3, r2, r3
 8012356:	ee07 3a90 	vmov	s15, r3
 801235a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801235e:	4b13      	ldr	r3, [pc, #76]	; (80123ac <VC_CMV_Expiration_Time_Variables_Reset+0xbc>)
 8012360:	edc3 7a00 	vstr	s15, [r3]
	LED_ITER                                            = 45;
 8012364:	4b12      	ldr	r3, [pc, #72]	; (80123b0 <VC_CMV_Expiration_Time_Variables_Reset+0xc0>)
 8012366:	222d      	movs	r2, #45	; 0x2d
 8012368:	701a      	strb	r2, [r3, #0]

	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 801236a:	4b0e      	ldr	r3, [pc, #56]	; (80123a4 <VC_CMV_Expiration_Time_Variables_Reset+0xb4>)
 801236c:	2200      	movs	r2, #0
 801236e:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 8012370:	4b10      	ldr	r3, [pc, #64]	; (80123b4 <VC_CMV_Expiration_Time_Variables_Reset+0xc4>)
 8012372:	2200      	movs	r2, #0
 8012374:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 8012376:	4b10      	ldr	r3, [pc, #64]	; (80123b8 <VC_CMV_Expiration_Time_Variables_Reset+0xc8>)
 8012378:	2202      	movs	r2, #2
 801237a:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_CMV.EXPIRATION_TIME);
 801237c:	4b08      	ldr	r3, [pc, #32]	; (80123a0 <VC_CMV_Expiration_Time_Variables_Reset+0xb0>)
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	4618      	mov	r0, r3
 8012382:	f00c ff53 	bl	801f22c <vTaskDelay>
}
 8012386:	bf00      	nop
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	200140c8 	.word	0x200140c8
 8012390:	20013f70 	.word	0x20013f70
 8012394:	200140fd 	.word	0x200140fd
 8012398:	20014300 	.word	0x20014300
 801239c:	20013ba4 	.word	0x20013ba4
 80123a0:	20014324 	.word	0x20014324
 80123a4:	200141fc 	.word	0x200141fc
 80123a8:	b21642c9 	.word	0xb21642c9
 80123ac:	20014078 	.word	0x20014078
 80123b0:	20013f3c 	.word	0x20013f3c
 80123b4:	20013d20 	.word	0x20013d20
 80123b8:	20013f7c 	.word	0x20013f7c

080123bc <CHECK_Flow_Increment>:




static void CHECK_Flow_Increment()
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	af00      	add	r7, sp, #0
	   if( Flow_increment == Low_Flow_Problem )
 80123c0:	4b1b      	ldr	r3, [pc, #108]	; (8012430 <CHECK_Flow_Increment+0x74>)
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	2b01      	cmp	r3, #1
 80123c6:	d10d      	bne.n	80123e4 <CHECK_Flow_Increment+0x28>
	   {
		   INCREMENT_DAC_VAL_PER_ITERATION = (INCREMENT_DAC_VAL_PER_ITERATION + 1);
 80123c8:	4b1a      	ldr	r3, [pc, #104]	; (8012434 <CHECK_Flow_Increment+0x78>)
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	3301      	adds	r3, #1
 80123ce:	b2da      	uxtb	r2, r3
 80123d0:	4b18      	ldr	r3, [pc, #96]	; (8012434 <CHECK_Flow_Increment+0x78>)
 80123d2:	701a      	strb	r2, [r3, #0]
		       if(INCREMENT_DAC_VAL_PER_ITERATION >10)
 80123d4:	4b17      	ldr	r3, [pc, #92]	; (8012434 <CHECK_Flow_Increment+0x78>)
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	2b0a      	cmp	r3, #10
 80123da:	d914      	bls.n	8012406 <CHECK_Flow_Increment+0x4a>
		    	   INCREMENT_DAC_VAL_PER_ITERATION=10;
 80123dc:	4b15      	ldr	r3, [pc, #84]	; (8012434 <CHECK_Flow_Increment+0x78>)
 80123de:	220a      	movs	r2, #10
 80123e0:	701a      	strb	r2, [r3, #0]
 80123e2:	e010      	b.n	8012406 <CHECK_Flow_Increment+0x4a>
	   }
	   else if(Flow_increment == High_Flow_Problem)
 80123e4:	4b12      	ldr	r3, [pc, #72]	; (8012430 <CHECK_Flow_Increment+0x74>)
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	2b02      	cmp	r3, #2
 80123ea:	d10c      	bne.n	8012406 <CHECK_Flow_Increment+0x4a>
	   {
		   INCREMENT_DAC_VAL_PER_ITERATION = (INCREMENT_DAC_VAL_PER_ITERATION - 1);
 80123ec:	4b11      	ldr	r3, [pc, #68]	; (8012434 <CHECK_Flow_Increment+0x78>)
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	3b01      	subs	r3, #1
 80123f2:	b2da      	uxtb	r2, r3
 80123f4:	4b0f      	ldr	r3, [pc, #60]	; (8012434 <CHECK_Flow_Increment+0x78>)
 80123f6:	701a      	strb	r2, [r3, #0]
		       if(INCREMENT_DAC_VAL_PER_ITERATION <3)
 80123f8:	4b0e      	ldr	r3, [pc, #56]	; (8012434 <CHECK_Flow_Increment+0x78>)
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	2b02      	cmp	r3, #2
 80123fe:	d802      	bhi.n	8012406 <CHECK_Flow_Increment+0x4a>
		    	   INCREMENT_DAC_VAL_PER_ITERATION=3;
 8012400:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <CHECK_Flow_Increment+0x78>)
 8012402:	2203      	movs	r2, #3
 8012404:	701a      	strb	r2, [r3, #0]
	   }
	    Set_Flow_value       = Not_Detect;
 8012406:	4b0c      	ldr	r3, [pc, #48]	; (8012438 <CHECK_Flow_Increment+0x7c>)
 8012408:	2200      	movs	r2, #0
 801240a:	701a      	strb	r2, [r3, #0]
		Flow_increment       = Flow_fine;
 801240c:	4b08      	ldr	r3, [pc, #32]	; (8012430 <CHECK_Flow_Increment+0x74>)
 801240e:	2200      	movs	r2, #0
 8012410:	701a      	strb	r2, [r3, #0]
		Check_Flow_Graph(VC_CMV.FLOW_RATE_Val);
 8012412:	4b0a      	ldr	r3, [pc, #40]	; (801243c <CHECK_Flow_Increment+0x80>)
 8012414:	7c9b      	ldrb	r3, [r3, #18]
 8012416:	4618      	mov	r0, r3
 8012418:	f000 f816 	bl	8012448 <Check_Flow_Graph>
		memset(Volume_Array, 0,(100*sizeof(Volume_Array[0])) );
 801241c:	2264      	movs	r2, #100	; 0x64
 801241e:	2100      	movs	r1, #0
 8012420:	4807      	ldr	r0, [pc, #28]	; (8012440 <CHECK_Flow_Increment+0x84>)
 8012422:	f00f fbad 	bl	8021b80 <memset>
		Volume_Array_count   = 0;
 8012426:	4b07      	ldr	r3, [pc, #28]	; (8012444 <CHECK_Flow_Increment+0x88>)
 8012428:	2200      	movs	r2, #0
 801242a:	801a      	strh	r2, [r3, #0]

}
 801242c:	bf00      	nop
 801242e:	bd80      	pop	{r7, pc}
 8012430:	20013f2a 	.word	0x20013f2a
 8012434:	200140c3 	.word	0x200140c3
 8012438:	200140fc 	.word	0x200140fc
 801243c:	20014324 	.word	0x20014324
 8012440:	20013dc0 	.word	0x20013dc0
 8012444:	2001414c 	.word	0x2001414c

08012448 <Check_Flow_Graph>:



static void Check_Flow_Graph(uint8_t flow_rate)
{
 8012448:	b480      	push	{r7}
 801244a:	b085      	sub	sp, #20
 801244c:	af00      	add	r7, sp, #0
 801244e:	4603      	mov	r3, r0
 8012450:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<100;i++)
 8012452:	2300      	movs	r3, #0
 8012454:	60fb      	str	r3, [r7, #12]
 8012456:	e02f      	b.n	80124b8 <Check_Flow_Graph+0x70>
	{
		if(Volume_Array[i] == flow_rate)
 8012458:	4a1c      	ldr	r2, [pc, #112]	; (80124cc <Check_Flow_Graph+0x84>)
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	4413      	add	r3, r2
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	79fa      	ldrb	r2, [r7, #7]
 8012462:	429a      	cmp	r2, r3
 8012464:	d102      	bne.n	801246c <Check_Flow_Graph+0x24>
		{
			Set_Flow_value = Detect;
 8012466:	4b1a      	ldr	r3, [pc, #104]	; (80124d0 <Check_Flow_Graph+0x88>)
 8012468:	2201      	movs	r2, #1
 801246a:	701a      	strb	r2, [r3, #0]
		}
		if(Set_Flow_value == Detect)
 801246c:	4b18      	ldr	r3, [pc, #96]	; (80124d0 <Check_Flow_Graph+0x88>)
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	2b01      	cmp	r3, #1
 8012472:	d11e      	bne.n	80124b2 <Check_Flow_Graph+0x6a>
		{
			if( (Volume_Array[i] < (flow_rate-9))  && (Volume_Array[i] !=0) )
 8012474:	4a15      	ldr	r2, [pc, #84]	; (80124cc <Check_Flow_Graph+0x84>)
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	4413      	add	r3, r2
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	461a      	mov	r2, r3
 801247e:	79fb      	ldrb	r3, [r7, #7]
 8012480:	3b09      	subs	r3, #9
 8012482:	429a      	cmp	r2, r3
 8012484:	da09      	bge.n	801249a <Check_Flow_Graph+0x52>
 8012486:	4a11      	ldr	r2, [pc, #68]	; (80124cc <Check_Flow_Graph+0x84>)
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	4413      	add	r3, r2
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d003      	beq.n	801249a <Check_Flow_Graph+0x52>
			{
				Flow_increment = Low_Flow_Problem;
 8012492:	4b10      	ldr	r3, [pc, #64]	; (80124d4 <Check_Flow_Graph+0x8c>)
 8012494:	2201      	movs	r2, #1
 8012496:	701a      	strb	r2, [r3, #0]
 8012498:	e00b      	b.n	80124b2 <Check_Flow_Graph+0x6a>
			}
			else if( (Volume_Array[i] > (flow_rate+8)))
 801249a:	4a0c      	ldr	r2, [pc, #48]	; (80124cc <Check_Flow_Graph+0x84>)
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	4413      	add	r3, r2
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	461a      	mov	r2, r3
 80124a4:	79fb      	ldrb	r3, [r7, #7]
 80124a6:	3308      	adds	r3, #8
 80124a8:	429a      	cmp	r2, r3
 80124aa:	dd02      	ble.n	80124b2 <Check_Flow_Graph+0x6a>
			{
				Flow_increment = High_Flow_Problem;
 80124ac:	4b09      	ldr	r3, [pc, #36]	; (80124d4 <Check_Flow_Graph+0x8c>)
 80124ae:	2202      	movs	r2, #2
 80124b0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<100;i++)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	3301      	adds	r3, #1
 80124b6:	60fb      	str	r3, [r7, #12]
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2b63      	cmp	r3, #99	; 0x63
 80124bc:	ddcc      	ble.n	8012458 <Check_Flow_Graph+0x10>
			}
		}
	}
}
 80124be:	bf00      	nop
 80124c0:	bf00      	nop
 80124c2:	3714      	adds	r7, #20
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr
 80124cc:	20013dc0 	.word	0x20013dc0
 80124d0:	200140fc 	.word	0x200140fc
 80124d4:	20013f2a 	.word	0x20013f2a

080124d8 <Volume_Not_Acheieved>:



void Volume_Not_Acheieved()
{
 80124d8:	b480      	push	{r7}
 80124da:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
}
 80124dc:	bf00      	nop
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr

080124e6 <Volume_Acheieved>:


void Volume_Acheieved()
{
 80124e6:	b480      	push	{r7}
 80124e8:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 80124ea:	bf00      	nop
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <Reset_Blower_Status>:


void Reset_Blower_Status()
{
 80124f4:	b480      	push	{r7}
 80124f6:	af00      	add	r7, sp, #0
	Blower_Status       = BlOWER_ON;
 80124f8:	4b08      	ldr	r3, [pc, #32]	; (801251c <Reset_Blower_Status+0x28>)
 80124fa:	2200      	movs	r2, #0
 80124fc:	701a      	strb	r2, [r3, #0]
	Current_Pressure    = 0;
 80124fe:	4b08      	ldr	r3, [pc, #32]	; (8012520 <Reset_Blower_Status+0x2c>)
 8012500:	2200      	movs	r2, #0
 8012502:	601a      	str	r2, [r3, #0]

	if(Over_Pressure_Count > 10)
 8012504:	4b07      	ldr	r3, [pc, #28]	; (8012524 <Reset_Blower_Status+0x30>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	2b0a      	cmp	r3, #10
 801250a:	dd02      	ble.n	8012512 <Reset_Blower_Status+0x1e>
	{
		Over_Pressure_Count = 0;
 801250c:	4b05      	ldr	r3, [pc, #20]	; (8012524 <Reset_Blower_Status+0x30>)
 801250e:	2200      	movs	r2, #0
 8012510:	601a      	str	r2, [r3, #0]
	}

}
 8012512:	bf00      	nop
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr
 801251c:	20013f5c 	.word	0x20013f5c
 8012520:	20013944 	.word	0x20013944
 8012524:	20014244 	.word	0x20014244

08012528 <Volume_Control_Task>:
#include "Volume_control.h"



void Volume_Control_Task (void *argument)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 8012530:	4b13      	ldr	r3, [pc, #76]	; (8012580 <Volume_Control_Task+0x58>)
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	2b01      	cmp	r3, #1
 8012536:	d11f      	bne.n	8012578 <Volume_Control_Task+0x50>
		{
			if(Common_Mode_Parameter._FIO2_Val  == 100)
 8012538:	4b12      	ldr	r3, [pc, #72]	; (8012584 <Volume_Control_Task+0x5c>)
 801253a:	78db      	ldrb	r3, [r3, #3]
 801253c:	2b64      	cmp	r3, #100	; 0x64
 801253e:	d103      	bne.n	8012548 <Volume_Control_Task+0x20>
			{
				Volume_Mode_Blower_control.BLOWER_DAC_VAL = 0;
 8012540:	4b11      	ldr	r3, [pc, #68]	; (8012588 <Volume_Control_Task+0x60>)
 8012542:	2200      	movs	r2, #0
 8012544:	801a      	strh	r2, [r3, #0]
 8012546:	e017      	b.n	8012578 <Volume_Control_Task+0x50>
			}
			else
			{
				if(Pressure_sensor.Pressure_Val >= 60)
 8012548:	4b10      	ldr	r3, [pc, #64]	; (801258c <Volume_Control_Task+0x64>)
 801254a:	789b      	ldrb	r3, [r3, #2]
 801254c:	2b3b      	cmp	r3, #59	; 0x3b
 801254e:	d906      	bls.n	801255e <Volume_Control_Task+0x36>
				{
					Volume_Mode_Blower_control.BLOWER_DAC_VAL=0;
 8012550:	4b0d      	ldr	r3, [pc, #52]	; (8012588 <Volume_Control_Task+0x60>)
 8012552:	2200      	movs	r2, #0
 8012554:	801a      	strh	r2, [r3, #0]
					Blower_Status =BlOWER_OFF;
 8012556:	4b0e      	ldr	r3, [pc, #56]	; (8012590 <Volume_Control_Task+0x68>)
 8012558:	2201      	movs	r2, #1
 801255a:	701a      	strb	r2, [r3, #0]
 801255c:	e00c      	b.n	8012578 <Volume_Control_Task+0x50>
				}
				else
				{
					if(Blower_Status == BlOWER_ON)
 801255e:	4b0c      	ldr	r3, [pc, #48]	; (8012590 <Volume_Control_Task+0x68>)
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d108      	bne.n	8012578 <Volume_Control_Task+0x50>
					{
					   Volume_Control(Common_Mode_Parameter._VOLUME_Val,Common_Mode_Parameter._FLOW_RATE,Volume_control_Task.Volume_Stop_Value);
 8012566:	4b07      	ldr	r3, [pc, #28]	; (8012584 <Volume_Control_Task+0x5c>)
 8012568:	889b      	ldrh	r3, [r3, #4]
 801256a:	4a06      	ldr	r2, [pc, #24]	; (8012584 <Volume_Control_Task+0x5c>)
 801256c:	7991      	ldrb	r1, [r2, #6]
 801256e:	4a09      	ldr	r2, [pc, #36]	; (8012594 <Volume_Control_Task+0x6c>)
 8012570:	7812      	ldrb	r2, [r2, #0]
 8012572:	4618      	mov	r0, r3
 8012574:	f000 f810 	bl	8012598 <Volume_Control>
					}
				}
			}
		}

		vTaskDelay(Ten_Millisecond_Delay);
 8012578:	200a      	movs	r0, #10
 801257a:	f00c fe57 	bl	801f22c <vTaskDelay>
		if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 801257e:	e7d7      	b.n	8012530 <Volume_Control_Task+0x8>
 8012580:	20013f7c 	.word	0x20013f7c
 8012584:	20013ba4 	.word	0x20013ba4
 8012588:	2001407c 	.word	0x2001407c
 801258c:	2001405c 	.word	0x2001405c
 8012590:	20013f5c 	.word	0x20013f5c
 8012594:	20013f70 	.word	0x20013f70

08012598 <Volume_Control>:




void Volume_Control(uint16_t Set_Volume_Val,uint8_t Set_Flow_Rate,uint8_t Volume_Stop_Value)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	4603      	mov	r3, r0
 80125a0:	80fb      	strh	r3, [r7, #6]
 80125a2:	460b      	mov	r3, r1
 80125a4:	717b      	strb	r3, [r7, #5]
 80125a6:	4613      	mov	r3, r2
 80125a8:	713b      	strb	r3, [r7, #4]
	if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 80125aa:	4b46      	ldr	r3, [pc, #280]	; (80126c4 <Volume_Control+0x12c>)
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	f040 8083 	bne.w	80126ba <Volume_Control+0x122>
	{
		Set_Volume_Val= (Set_Volume_Val-Volume_Stop_Value);
 80125b4:	793b      	ldrb	r3, [r7, #4]
 80125b6:	b29b      	uxth	r3, r3
 80125b8:	88fa      	ldrh	r2, [r7, #6]
 80125ba:	1ad3      	subs	r3, r2, r3
 80125bc:	80fb      	strh	r3, [r7, #6]
			if(vol.Volume <= Set_Volume_Val)
 80125be:	4b42      	ldr	r3, [pc, #264]	; (80126c8 <Volume_Control+0x130>)
 80125c0:	ed93 7a00 	vldr	s14, [r3]
 80125c4:	88fb      	ldrh	r3, [r7, #6]
 80125c6:	ee07 3a90 	vmov	s15, r3
 80125ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d6:	d85b      	bhi.n	8012690 <Volume_Control+0xf8>
			{
				Volume_Achieved_Time++;
 80125d8:	4b3c      	ldr	r3, [pc, #240]	; (80126cc <Volume_Control+0x134>)
 80125da:	881b      	ldrh	r3, [r3, #0]
 80125dc:	3301      	adds	r3, #1
 80125de:	b29a      	uxth	r2, r3
 80125e0:	4b3a      	ldr	r3, [pc, #232]	; (80126cc <Volume_Control+0x134>)
 80125e2:	801a      	strh	r2, [r3, #0]
				Volume_Array[Volume_Array_count]=Flow_Sensor_cal._Flow_Val;
 80125e4:	4b3a      	ldr	r3, [pc, #232]	; (80126d0 <Volume_Control+0x138>)
 80125e6:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80125e8:	4b3a      	ldr	r3, [pc, #232]	; (80126d4 <Volume_Control+0x13c>)
 80125ea:	881b      	ldrh	r3, [r3, #0]
 80125ec:	461a      	mov	r2, r3
 80125ee:	b2c9      	uxtb	r1, r1
 80125f0:	4b39      	ldr	r3, [pc, #228]	; (80126d8 <Volume_Control+0x140>)
 80125f2:	5499      	strb	r1, [r3, r2]
				Volume_Array_count++;
 80125f4:	4b37      	ldr	r3, [pc, #220]	; (80126d4 <Volume_Control+0x13c>)
 80125f6:	881b      	ldrh	r3, [r3, #0]
 80125f8:	3301      	adds	r3, #1
 80125fa:	b29a      	uxth	r2, r3
 80125fc:	4b35      	ldr	r3, [pc, #212]	; (80126d4 <Volume_Control+0x13c>)
 80125fe:	801a      	strh	r2, [r3, #0]
				if(Volume_Array_count>=300)
 8012600:	4b34      	ldr	r3, [pc, #208]	; (80126d4 <Volume_Control+0x13c>)
 8012602:	881b      	ldrh	r3, [r3, #0]
 8012604:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012608:	d303      	bcc.n	8012612 <Volume_Control+0x7a>
					Volume_Array_count=300;
 801260a:	4b32      	ldr	r3, [pc, #200]	; (80126d4 <Volume_Control+0x13c>)
 801260c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012610:	801a      	strh	r2, [r3, #0]


				  if( (Sampled_Parameter_3.Staic_Compliance_int < 10)  )
 8012612:	4b32      	ldr	r3, [pc, #200]	; (80126dc <Volume_Control+0x144>)
 8012614:	7c1b      	ldrb	r3, [r3, #16]
 8012616:	2b09      	cmp	r3, #9
 8012618:	d810      	bhi.n	801263c <Volume_Control+0xa4>
				  {
					   Volume_Mode_Blower_control.BLOWER_DAC_VAL          = Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL;
 801261a:	4b31      	ldr	r3, [pc, #196]	; (80126e0 <Volume_Control+0x148>)
 801261c:	885a      	ldrh	r2, [r3, #2]
 801261e:	4b30      	ldr	r3, [pc, #192]	; (80126e0 <Volume_Control+0x148>)
 8012620:	801a      	strh	r2, [r3, #0]
						if(Flow_Sensor_cal._Flow_Val >= Set_Flow_Rate)
 8012622:	4b2b      	ldr	r3, [pc, #172]	; (80126d0 <Volume_Control+0x138>)
 8012624:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012626:	797b      	ldrb	r3, [r7, #5]
 8012628:	429a      	cmp	r2, r3
 801262a:	db46      	blt.n	80126ba <Volume_Control+0x122>
						{
							  if(Maximum_Flow_Achieved  == FLOW_NOT_ACHIEVED)
 801262c:	4b2d      	ldr	r3, [pc, #180]	; (80126e4 <Volume_Control+0x14c>)
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d142      	bne.n	80126ba <Volume_Control+0x122>
							  {
									Maximum_Flow_Achieved                     = FLOW_ACHIEVED;
 8012634:	4b2b      	ldr	r3, [pc, #172]	; (80126e4 <Volume_Control+0x14c>)
 8012636:	2201      	movs	r2, #1
 8012638:	701a      	strb	r2, [r3, #0]
				Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL;

			}

		}
}
 801263a:	e03e      	b.n	80126ba <Volume_Control+0x122>
						 if(Volume_Achieved_Status == VOLUME_NOT_ACHIEVED)
 801263c:	4b2a      	ldr	r3, [pc, #168]	; (80126e8 <Volume_Control+0x150>)
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d13a      	bne.n	80126ba <Volume_Control+0x122>
							 Volume_Mode_Blower_control.BLOWER_DAC_VAL          =   Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL+INCREMENT_DAC_VAL_PER_ITERATION;
 8012644:	4b26      	ldr	r3, [pc, #152]	; (80126e0 <Volume_Control+0x148>)
 8012646:	885a      	ldrh	r2, [r3, #2]
 8012648:	4b28      	ldr	r3, [pc, #160]	; (80126ec <Volume_Control+0x154>)
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	b29b      	uxth	r3, r3
 801264e:	4413      	add	r3, r2
 8012650:	b29a      	uxth	r2, r3
 8012652:	4b23      	ldr	r3, [pc, #140]	; (80126e0 <Volume_Control+0x148>)
 8012654:	801a      	strh	r2, [r3, #0]
							 Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL  =   Volume_Mode_Blower_control.BLOWER_DAC_VAL;
 8012656:	4b22      	ldr	r3, [pc, #136]	; (80126e0 <Volume_Control+0x148>)
 8012658:	881a      	ldrh	r2, [r3, #0]
 801265a:	4b21      	ldr	r3, [pc, #132]	; (80126e0 <Volume_Control+0x148>)
 801265c:	805a      	strh	r2, [r3, #2]
									if(Volume_Mode_Blower_control.BLOWER_DAC_VAL > 4095)
 801265e:	4b20      	ldr	r3, [pc, #128]	; (80126e0 <Volume_Control+0x148>)
 8012660:	881b      	ldrh	r3, [r3, #0]
 8012662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012666:	d303      	bcc.n	8012670 <Volume_Control+0xd8>
										Volume_Mode_Blower_control.BLOWER_DAC_VAL = 4095;
 8012668:	4b1d      	ldr	r3, [pc, #116]	; (80126e0 <Volume_Control+0x148>)
 801266a:	f640 72ff 	movw	r2, #4095	; 0xfff
 801266e:	801a      	strh	r2, [r3, #0]
									if(Flow_Sensor_cal._Flow_Val >= Set_Flow_Rate)
 8012670:	4b17      	ldr	r3, [pc, #92]	; (80126d0 <Volume_Control+0x138>)
 8012672:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012674:	797b      	ldrb	r3, [r7, #5]
 8012676:	429a      	cmp	r2, r3
 8012678:	db1f      	blt.n	80126ba <Volume_Control+0x122>
										  if(Maximum_Flow_Achieved  == FLOW_NOT_ACHIEVED)
 801267a:	4b1a      	ldr	r3, [pc, #104]	; (80126e4 <Volume_Control+0x14c>)
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d11b      	bne.n	80126ba <Volume_Control+0x122>
												Maximum_Flow_Achieved                     = FLOW_ACHIEVED;
 8012682:	4b18      	ldr	r3, [pc, #96]	; (80126e4 <Volume_Control+0x14c>)
 8012684:	2201      	movs	r2, #1
 8012686:	701a      	strb	r2, [r3, #0]
												TIME_Base_parameter.FLOW_ACHIEVED_TIMER   = 100;
 8012688:	4b19      	ldr	r3, [pc, #100]	; (80126f0 <Volume_Control+0x158>)
 801268a:	2264      	movs	r2, #100	; 0x64
 801268c:	611a      	str	r2, [r3, #16]
}
 801268e:	e014      	b.n	80126ba <Volume_Control+0x122>
			    Total_Volume_Achieved_Time                        = (Volume_Achieved_Time *10);
 8012690:	4b0e      	ldr	r3, [pc, #56]	; (80126cc <Volume_Control+0x134>)
 8012692:	881b      	ldrh	r3, [r3, #0]
 8012694:	461a      	mov	r2, r3
 8012696:	0092      	lsls	r2, r2, #2
 8012698:	4413      	add	r3, r2
 801269a:	005b      	lsls	r3, r3, #1
 801269c:	b29a      	uxth	r2, r3
 801269e:	4b15      	ldr	r3, [pc, #84]	; (80126f4 <Volume_Control+0x15c>)
 80126a0:	801a      	strh	r2, [r3, #0]
				Volume_Acheieved();
 80126a2:	f7ff ff20 	bl	80124e6 <Volume_Acheieved>
				Volume_Achieved_Status                            = VOLUME_ACHIEVED;
 80126a6:	4b10      	ldr	r3, [pc, #64]	; (80126e8 <Volume_Control+0x150>)
 80126a8:	2201      	movs	r2, #1
 80126aa:	701a      	strb	r2, [r3, #0]
				Volume_Mode_Blower_control.BLOWER_DAC_VAL         = RESET;
 80126ac:	4b0c      	ldr	r3, [pc, #48]	; (80126e0 <Volume_Control+0x148>)
 80126ae:	2200      	movs	r2, #0
 80126b0:	801a      	strh	r2, [r3, #0]
				Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL;
 80126b2:	4b0b      	ldr	r3, [pc, #44]	; (80126e0 <Volume_Control+0x148>)
 80126b4:	889a      	ldrh	r2, [r3, #4]
 80126b6:	4b0a      	ldr	r3, [pc, #40]	; (80126e0 <Volume_Control+0x148>)
 80126b8:	805a      	strh	r2, [r3, #2]
}
 80126ba:	bf00      	nop
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	20013f7c 	.word	0x20013f7c
 80126c8:	200140c8 	.word	0x200140c8
 80126cc:	20013a00 	.word	0x20013a00
 80126d0:	20013fb0 	.word	0x20013fb0
 80126d4:	2001414c 	.word	0x2001414c
 80126d8:	20013dc0 	.word	0x20013dc0
 80126dc:	20013c48 	.word	0x20013c48
 80126e0:	2001407c 	.word	0x2001407c
 80126e4:	20013d3c 	.word	0x20013d3c
 80126e8:	20013d21 	.word	0x20013d21
 80126ec:	200140c3 	.word	0x200140c3
 80126f0:	200141fc 	.word	0x200141fc
 80126f4:	200142b8 	.word	0x200142b8

080126f8 <VOLUME_STOP_POINT>:




void VOLUME_STOP_POINT(uint16_t Set_Volume,uint16_t Achieved_Volume)
{
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	4603      	mov	r3, r0
 8012700:	460a      	mov	r2, r1
 8012702:	80fb      	strh	r3, [r7, #6]
 8012704:	4613      	mov	r3, r2
 8012706:	80bb      	strh	r3, [r7, #4]
	static uint8_t count;
	static uint8_t count_2;
       if(Achieved_Volume > (Set_Volume + 10))
 8012708:	88ba      	ldrh	r2, [r7, #4]
 801270a:	88fb      	ldrh	r3, [r7, #6]
 801270c:	330a      	adds	r3, #10
 801270e:	429a      	cmp	r2, r3
 8012710:	dd1d      	ble.n	801274e <VOLUME_STOP_POINT+0x56>
	   {
    	   count++;
 8012712:	4b26      	ldr	r3, [pc, #152]	; (80127ac <VOLUME_STOP_POINT+0xb4>)
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	3301      	adds	r3, #1
 8012718:	b2da      	uxtb	r2, r3
 801271a:	4b24      	ldr	r3, [pc, #144]	; (80127ac <VOLUME_STOP_POINT+0xb4>)
 801271c:	701a      	strb	r2, [r3, #0]
			if (count >= 3)
 801271e:	4b23      	ldr	r3, [pc, #140]	; (80127ac <VOLUME_STOP_POINT+0xb4>)
 8012720:	781b      	ldrb	r3, [r3, #0]
 8012722:	2b02      	cmp	r3, #2
 8012724:	d93c      	bls.n	80127a0 <VOLUME_STOP_POINT+0xa8>
			{
				Volume_control_Task.Volume_Stop_Value = Volume_control_Task.Volume_Stop_Value + 5;
 8012726:	4b22      	ldr	r3, [pc, #136]	; (80127b0 <VOLUME_STOP_POINT+0xb8>)
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	3305      	adds	r3, #5
 801272c:	b2da      	uxtb	r2, r3
 801272e:	4b20      	ldr	r3, [pc, #128]	; (80127b0 <VOLUME_STOP_POINT+0xb8>)
 8012730:	701a      	strb	r2, [r3, #0]
				count   = 0;
 8012732:	4b1e      	ldr	r3, [pc, #120]	; (80127ac <VOLUME_STOP_POINT+0xb4>)
 8012734:	2200      	movs	r2, #0
 8012736:	701a      	strb	r2, [r3, #0]
				count_2 = 0;
 8012738:	4b1e      	ldr	r3, [pc, #120]	; (80127b4 <VOLUME_STOP_POINT+0xbc>)
 801273a:	2200      	movs	r2, #0
 801273c:	701a      	strb	r2, [r3, #0]

				if(Volume_control_Task.Volume_Stop_Value >= 100)
 801273e:	4b1c      	ldr	r3, [pc, #112]	; (80127b0 <VOLUME_STOP_POINT+0xb8>)
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	2b63      	cmp	r3, #99	; 0x63
 8012744:	d92c      	bls.n	80127a0 <VOLUME_STOP_POINT+0xa8>
					Volume_control_Task.Volume_Stop_Value = 100;
 8012746:	4b1a      	ldr	r3, [pc, #104]	; (80127b0 <VOLUME_STOP_POINT+0xb8>)
 8012748:	2264      	movs	r2, #100	; 0x64
 801274a:	701a      	strb	r2, [r3, #0]
       else
       {
			count_2 = 0;
			count   = 0;
       }
}
 801274c:	e028      	b.n	80127a0 <VOLUME_STOP_POINT+0xa8>
       else if(Achieved_Volume < (Set_Volume - 10))
 801274e:	88ba      	ldrh	r2, [r7, #4]
 8012750:	88fb      	ldrh	r3, [r7, #6]
 8012752:	3b0a      	subs	r3, #10
 8012754:	429a      	cmp	r2, r3
 8012756:	da1d      	bge.n	8012794 <VOLUME_STOP_POINT+0x9c>
    	   count_2++;
 8012758:	4b16      	ldr	r3, [pc, #88]	; (80127b4 <VOLUME_STOP_POINT+0xbc>)
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	3301      	adds	r3, #1
 801275e:	b2da      	uxtb	r2, r3
 8012760:	4b14      	ldr	r3, [pc, #80]	; (80127b4 <VOLUME_STOP_POINT+0xbc>)
 8012762:	701a      	strb	r2, [r3, #0]
			if (count_2 >= 3)
 8012764:	4b13      	ldr	r3, [pc, #76]	; (80127b4 <VOLUME_STOP_POINT+0xbc>)
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	2b02      	cmp	r3, #2
 801276a:	d919      	bls.n	80127a0 <VOLUME_STOP_POINT+0xa8>
				Volume_control_Task.Volume_Stop_Value = Volume_control_Task.Volume_Stop_Value - 5;
 801276c:	4b10      	ldr	r3, [pc, #64]	; (80127b0 <VOLUME_STOP_POINT+0xb8>)
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	3b05      	subs	r3, #5
 8012772:	b2da      	uxtb	r2, r3
 8012774:	4b0e      	ldr	r3, [pc, #56]	; (80127b0 <VOLUME_STOP_POINT+0xb8>)
 8012776:	701a      	strb	r2, [r3, #0]
				count_2 = 0;
 8012778:	4b0e      	ldr	r3, [pc, #56]	; (80127b4 <VOLUME_STOP_POINT+0xbc>)
 801277a:	2200      	movs	r2, #0
 801277c:	701a      	strb	r2, [r3, #0]
				count   = 0;
 801277e:	4b0b      	ldr	r3, [pc, #44]	; (80127ac <VOLUME_STOP_POINT+0xb4>)
 8012780:	2200      	movs	r2, #0
 8012782:	701a      	strb	r2, [r3, #0]
				if(Volume_control_Task.Volume_Stop_Value <= 5)
 8012784:	4b0a      	ldr	r3, [pc, #40]	; (80127b0 <VOLUME_STOP_POINT+0xb8>)
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	2b05      	cmp	r3, #5
 801278a:	d809      	bhi.n	80127a0 <VOLUME_STOP_POINT+0xa8>
									Volume_control_Task.Volume_Stop_Value = 5;
 801278c:	4b08      	ldr	r3, [pc, #32]	; (80127b0 <VOLUME_STOP_POINT+0xb8>)
 801278e:	2205      	movs	r2, #5
 8012790:	701a      	strb	r2, [r3, #0]
}
 8012792:	e005      	b.n	80127a0 <VOLUME_STOP_POINT+0xa8>
			count_2 = 0;
 8012794:	4b07      	ldr	r3, [pc, #28]	; (80127b4 <VOLUME_STOP_POINT+0xbc>)
 8012796:	2200      	movs	r2, #0
 8012798:	701a      	strb	r2, [r3, #0]
			count   = 0;
 801279a:	4b04      	ldr	r3, [pc, #16]	; (80127ac <VOLUME_STOP_POINT+0xb4>)
 801279c:	2200      	movs	r2, #0
 801279e:	701a      	strb	r2, [r3, #0]
}
 80127a0:	bf00      	nop
 80127a2:	370c      	adds	r7, #12
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr
 80127ac:	200001f8 	.word	0x200001f8
 80127b0:	20013f70 	.word	0x20013f70
 80127b4:	200001f9 	.word	0x200001f9

080127b8 <TUNE_INITIAL_DAC_VAL>:




uint16_t TUNE_INITIAL_DAC_VAL(uint16_t Previous_Dac_Val, uint8_t Flow_Rate,uint8_t Flow_Max)
{
 80127b8:	b480      	push	{r7}
 80127ba:	b085      	sub	sp, #20
 80127bc:	af00      	add	r7, sp, #0
 80127be:	4603      	mov	r3, r0
 80127c0:	80fb      	strh	r3, [r7, #6]
 80127c2:	460b      	mov	r3, r1
 80127c4:	717b      	strb	r3, [r7, #5]
 80127c6:	4613      	mov	r3, r2
 80127c8:	713b      	strb	r3, [r7, #4]
	uint16_t DAC_VALUE=Previous_Dac_Val;
 80127ca:	88fb      	ldrh	r3, [r7, #6]
 80127cc:	81fb      	strh	r3, [r7, #14]
	    if (Flow_Max > (Flow_Rate +5))
 80127ce:	793a      	ldrb	r2, [r7, #4]
 80127d0:	797b      	ldrb	r3, [r7, #5]
 80127d2:	3305      	adds	r3, #5
 80127d4:	429a      	cmp	r2, r3
 80127d6:	dd2d      	ble.n	8012834 <TUNE_INITIAL_DAC_VAL+0x7c>
		{
			if (Flow_Max > (Flow_Rate + 20))
 80127d8:	793a      	ldrb	r2, [r7, #4]
 80127da:	797b      	ldrb	r3, [r7, #5]
 80127dc:	3314      	adds	r3, #20
 80127de:	429a      	cmp	r2, r3
 80127e0:	dd03      	ble.n	80127ea <TUNE_INITIAL_DAC_VAL+0x32>
			{
				DAC_VALUE = Previous_Dac_Val - 20;
 80127e2:	88fb      	ldrh	r3, [r7, #6]
 80127e4:	3b14      	subs	r3, #20
 80127e6:	81fb      	strh	r3, [r7, #14]
 80127e8:	e01c      	b.n	8012824 <TUNE_INITIAL_DAC_VAL+0x6c>
			}
			else if ((Flow_Max <= (Flow_Rate + 20))&& (Flow_Max >= (Flow_Rate + 10)))
 80127ea:	793a      	ldrb	r2, [r7, #4]
 80127ec:	797b      	ldrb	r3, [r7, #5]
 80127ee:	3314      	adds	r3, #20
 80127f0:	429a      	cmp	r2, r3
 80127f2:	dc09      	bgt.n	8012808 <TUNE_INITIAL_DAC_VAL+0x50>
 80127f4:	797b      	ldrb	r3, [r7, #5]
 80127f6:	f103 0209 	add.w	r2, r3, #9
 80127fa:	793b      	ldrb	r3, [r7, #4]
 80127fc:	429a      	cmp	r2, r3
 80127fe:	da03      	bge.n	8012808 <TUNE_INITIAL_DAC_VAL+0x50>
			{
				DAC_VALUE = Previous_Dac_Val - 5;
 8012800:	88fb      	ldrh	r3, [r7, #6]
 8012802:	3b05      	subs	r3, #5
 8012804:	81fb      	strh	r3, [r7, #14]
 8012806:	e00d      	b.n	8012824 <TUNE_INITIAL_DAC_VAL+0x6c>
			}
			else if ((Flow_Max < (Flow_Rate + 10)) && (Flow_Max >= (Flow_Rate + 5)))
 8012808:	797b      	ldrb	r3, [r7, #5]
 801280a:	f103 0209 	add.w	r2, r3, #9
 801280e:	793b      	ldrb	r3, [r7, #4]
 8012810:	429a      	cmp	r2, r3
 8012812:	db07      	blt.n	8012824 <TUNE_INITIAL_DAC_VAL+0x6c>
 8012814:	797b      	ldrb	r3, [r7, #5]
 8012816:	1d1a      	adds	r2, r3, #4
 8012818:	793b      	ldrb	r3, [r7, #4]
 801281a:	429a      	cmp	r2, r3
 801281c:	da02      	bge.n	8012824 <TUNE_INITIAL_DAC_VAL+0x6c>
			{
				DAC_VALUE = Previous_Dac_Val - 1;
 801281e:	88fb      	ldrh	r3, [r7, #6]
 8012820:	3b01      	subs	r3, #1
 8012822:	81fb      	strh	r3, [r7, #14]
			}
			if (DAC_VALUE < 500)
 8012824:	89fb      	ldrh	r3, [r7, #14]
 8012826:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801282a:	d216      	bcs.n	801285a <TUNE_INITIAL_DAC_VAL+0xa2>
			{
				DAC_VALUE = 500;
 801282c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012830:	81fb      	strh	r3, [r7, #14]
 8012832:	e012      	b.n	801285a <TUNE_INITIAL_DAC_VAL+0xa2>
			}
		}
		else if ( (Flow_Max < (Flow_Rate- 5) ))
 8012834:	793a      	ldrb	r2, [r7, #4]
 8012836:	797b      	ldrb	r3, [r7, #5]
 8012838:	3b05      	subs	r3, #5
 801283a:	429a      	cmp	r2, r3
 801283c:	da0b      	bge.n	8012856 <TUNE_INITIAL_DAC_VAL+0x9e>
		{
			DAC_VALUE = Previous_Dac_Val + 30;
 801283e:	88fb      	ldrh	r3, [r7, #6]
 8012840:	331e      	adds	r3, #30
 8012842:	81fb      	strh	r3, [r7, #14]
			    if (DAC_VALUE >= 2500)
 8012844:	89fb      	ldrh	r3, [r7, #14]
 8012846:	f640 12c3 	movw	r2, #2499	; 0x9c3
 801284a:	4293      	cmp	r3, r2
 801284c:	d905      	bls.n	801285a <TUNE_INITIAL_DAC_VAL+0xa2>
				{
					DAC_VALUE = 2500;
 801284e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8012852:	81fb      	strh	r3, [r7, #14]
 8012854:	e001      	b.n	801285a <TUNE_INITIAL_DAC_VAL+0xa2>
				}
		}
		else
		{
			DAC_VALUE     = Previous_Dac_Val;
 8012856:	88fb      	ldrh	r3, [r7, #6]
 8012858:	81fb      	strh	r3, [r7, #14]
		}
	    return DAC_VALUE;
 801285a:	89fb      	ldrh	r3, [r7, #14]
}
 801285c:	4618      	mov	r0, r3
 801285e:	3714      	adds	r7, #20
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr

08012868 <LOW_Compliance_DAC_value>:



uint16_t LOW_Compliance_DAC_value(uint8_t Flow_Rate)
{
 8012868:	b480      	push	{r7}
 801286a:	b085      	sub	sp, #20
 801286c:	af00      	add	r7, sp, #0
 801286e:	4603      	mov	r3, r0
 8012870:	71fb      	strb	r3, [r7, #7]
	uint16_t Temp_DAC;

	if(Flow_Rate >= 60)
 8012872:	79fb      	ldrb	r3, [r7, #7]
 8012874:	2b3b      	cmp	r3, #59	; 0x3b
 8012876:	d903      	bls.n	8012880 <LOW_Compliance_DAC_value+0x18>
		Temp_DAC = 1110;
 8012878:	f240 4356 	movw	r3, #1110	; 0x456
 801287c:	81fb      	strh	r3, [r7, #14]
 801287e:	e03a      	b.n	80128f6 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 60) && (Flow_Rate >= 50) )
 8012880:	79fb      	ldrb	r3, [r7, #7]
 8012882:	2b3b      	cmp	r3, #59	; 0x3b
 8012884:	d806      	bhi.n	8012894 <LOW_Compliance_DAC_value+0x2c>
 8012886:	79fb      	ldrb	r3, [r7, #7]
 8012888:	2b31      	cmp	r3, #49	; 0x31
 801288a:	d903      	bls.n	8012894 <LOW_Compliance_DAC_value+0x2c>
		Temp_DAC = 1000;
 801288c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012890:	81fb      	strh	r3, [r7, #14]
 8012892:	e030      	b.n	80128f6 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 50) && (Flow_Rate >= 40) )
 8012894:	79fb      	ldrb	r3, [r7, #7]
 8012896:	2b31      	cmp	r3, #49	; 0x31
 8012898:	d806      	bhi.n	80128a8 <LOW_Compliance_DAC_value+0x40>
 801289a:	79fb      	ldrb	r3, [r7, #7]
 801289c:	2b27      	cmp	r3, #39	; 0x27
 801289e:	d903      	bls.n	80128a8 <LOW_Compliance_DAC_value+0x40>
		Temp_DAC = 850;
 80128a0:	f240 3352 	movw	r3, #850	; 0x352
 80128a4:	81fb      	strh	r3, [r7, #14]
 80128a6:	e026      	b.n	80128f6 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 40) && (Flow_Rate >= 30) )
 80128a8:	79fb      	ldrb	r3, [r7, #7]
 80128aa:	2b27      	cmp	r3, #39	; 0x27
 80128ac:	d806      	bhi.n	80128bc <LOW_Compliance_DAC_value+0x54>
 80128ae:	79fb      	ldrb	r3, [r7, #7]
 80128b0:	2b1d      	cmp	r3, #29
 80128b2:	d903      	bls.n	80128bc <LOW_Compliance_DAC_value+0x54>
		Temp_DAC = 800;
 80128b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80128b8:	81fb      	strh	r3, [r7, #14]
 80128ba:	e01c      	b.n	80128f6 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 30) && (Flow_Rate >= 20) )
 80128bc:	79fb      	ldrb	r3, [r7, #7]
 80128be:	2b1d      	cmp	r3, #29
 80128c0:	d806      	bhi.n	80128d0 <LOW_Compliance_DAC_value+0x68>
 80128c2:	79fb      	ldrb	r3, [r7, #7]
 80128c4:	2b13      	cmp	r3, #19
 80128c6:	d903      	bls.n	80128d0 <LOW_Compliance_DAC_value+0x68>
		Temp_DAC = 700;
 80128c8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80128cc:	81fb      	strh	r3, [r7, #14]
 80128ce:	e012      	b.n	80128f6 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 20) && (Flow_Rate >= 10) )
 80128d0:	79fb      	ldrb	r3, [r7, #7]
 80128d2:	2b13      	cmp	r3, #19
 80128d4:	d806      	bhi.n	80128e4 <LOW_Compliance_DAC_value+0x7c>
 80128d6:	79fb      	ldrb	r3, [r7, #7]
 80128d8:	2b09      	cmp	r3, #9
 80128da:	d903      	bls.n	80128e4 <LOW_Compliance_DAC_value+0x7c>
		Temp_DAC = 600;
 80128dc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80128e0:	81fb      	strh	r3, [r7, #14]
 80128e2:	e008      	b.n	80128f6 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 10) && (Flow_Rate > 0) )
 80128e4:	79fb      	ldrb	r3, [r7, #7]
 80128e6:	2b09      	cmp	r3, #9
 80128e8:	d805      	bhi.n	80128f6 <LOW_Compliance_DAC_value+0x8e>
 80128ea:	79fb      	ldrb	r3, [r7, #7]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d002      	beq.n	80128f6 <LOW_Compliance_DAC_value+0x8e>
		Temp_DAC = 600;
 80128f0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80128f4:	81fb      	strh	r3, [r7, #14]

	return Temp_DAC;
 80128f6:	89fb      	ldrh	r3, [r7, #14]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3714      	adds	r7, #20
 80128fc:	46bd      	mov	sp, r7
 80128fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012902:	4770      	bx	lr

08012904 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8012904:	b480      	push	{r7}
 8012906:	b085      	sub	sp, #20
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	60b9      	str	r1, [r7, #8]
 801290e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	4a07      	ldr	r2, [pc, #28]	; (8012930 <vApplicationGetIdleTaskMemory+0x2c>)
 8012914:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	4a06      	ldr	r2, [pc, #24]	; (8012934 <vApplicationGetIdleTaskMemory+0x30>)
 801291a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2280      	movs	r2, #128	; 0x80
 8012920:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8012922:	bf00      	nop
 8012924:	3714      	adds	r7, #20
 8012926:	46bd      	mov	sp, r7
 8012928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop
 8012930:	200001fc 	.word	0x200001fc
 8012934:	20000250 	.word	0x20000250

08012938 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8012938:	b480      	push	{r7}
 801293a:	b085      	sub	sp, #20
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	4a07      	ldr	r2, [pc, #28]	; (8012964 <vApplicationGetTimerTaskMemory+0x2c>)
 8012948:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	4a06      	ldr	r2, [pc, #24]	; (8012968 <vApplicationGetTimerTaskMemory+0x30>)
 801294e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012956:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8012958:	bf00      	nop
 801295a:	3714      	adds	r7, #20
 801295c:	46bd      	mov	sp, r7
 801295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012962:	4770      	bx	lr
 8012964:	20000450 	.word	0x20000450
 8012968:	200004a4 	.word	0x200004a4

0801296c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8012970:	f001 f90a 	bl	8013b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8012974:	f000 f816 	bl	80129a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8012978:	f000 fb26 	bl	8012fc8 <MX_GPIO_Init>
  MX_DMA_Init();
 801297c:	f000 faee 	bl	8012f5c <MX_DMA_Init>
  MX_ADC1_Init();
 8012980:	f000 f87a 	bl	8012a78 <MX_ADC1_Init>
  MX_DAC_Init();
 8012984:	f000 f910 	bl	8012ba8 <MX_DAC_Init>
  MX_I2C2_Init();
 8012988:	f000 f942 	bl	8012c10 <MX_I2C2_Init>
  MX_I2C3_Init();
 801298c:	f000 f96e 	bl	8012c6c <MX_I2C3_Init>
  MX_TIM3_Init();
 8012990:	f000 f99a 	bl	8012cc8 <MX_TIM3_Init>
  MX_TIM12_Init();
 8012994:	f000 fa7e 	bl	8012e94 <MX_TIM12_Init>
  MX_TIM4_Init();
 8012998:	f000 fa06 	bl	8012da8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Initial_Task_Create();                            //Code
 801299c:	f7fd ffc8 	bl	8010930 <Initial_Task_Create>
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
 80129a0:	e7fe      	b.n	80129a0 <main+0x34>
	...

080129a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b094      	sub	sp, #80	; 0x50
 80129a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80129aa:	f107 0320 	add.w	r3, r7, #32
 80129ae:	2230      	movs	r2, #48	; 0x30
 80129b0:	2100      	movs	r1, #0
 80129b2:	4618      	mov	r0, r3
 80129b4:	f00f f8e4 	bl	8021b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80129b8:	f107 030c 	add.w	r3, r7, #12
 80129bc:	2200      	movs	r2, #0
 80129be:	601a      	str	r2, [r3, #0]
 80129c0:	605a      	str	r2, [r3, #4]
 80129c2:	609a      	str	r2, [r3, #8]
 80129c4:	60da      	str	r2, [r3, #12]
 80129c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80129c8:	2300      	movs	r3, #0
 80129ca:	60bb      	str	r3, [r7, #8]
 80129cc:	4b28      	ldr	r3, [pc, #160]	; (8012a70 <SystemClock_Config+0xcc>)
 80129ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d0:	4a27      	ldr	r2, [pc, #156]	; (8012a70 <SystemClock_Config+0xcc>)
 80129d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80129d6:	6413      	str	r3, [r2, #64]	; 0x40
 80129d8:	4b25      	ldr	r3, [pc, #148]	; (8012a70 <SystemClock_Config+0xcc>)
 80129da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129e0:	60bb      	str	r3, [r7, #8]
 80129e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80129e4:	2300      	movs	r3, #0
 80129e6:	607b      	str	r3, [r7, #4]
 80129e8:	4b22      	ldr	r3, [pc, #136]	; (8012a74 <SystemClock_Config+0xd0>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4a21      	ldr	r2, [pc, #132]	; (8012a74 <SystemClock_Config+0xd0>)
 80129ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80129f2:	6013      	str	r3, [r2, #0]
 80129f4:	4b1f      	ldr	r3, [pc, #124]	; (8012a74 <SystemClock_Config+0xd0>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129fc:	607b      	str	r3, [r7, #4]
 80129fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8012a00:	2301      	movs	r3, #1
 8012a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012a0a:	2302      	movs	r3, #2
 8012a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012a0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8012a14:	2308      	movs	r3, #8
 8012a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8012a18:	23a8      	movs	r3, #168	; 0xa8
 8012a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012a1c:	2302      	movs	r3, #2
 8012a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8012a20:	2307      	movs	r3, #7
 8012a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012a24:	f107 0320 	add.w	r3, r7, #32
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f004 fe45 	bl	80176b8 <HAL_RCC_OscConfig>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d001      	beq.n	8012a38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8012a34:	f000 fc2e 	bl	8013294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012a38:	230f      	movs	r3, #15
 8012a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012a3c:	2302      	movs	r3, #2
 8012a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012a40:	2300      	movs	r3, #0
 8012a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8012a44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8012a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8012a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8012a50:	f107 030c 	add.w	r3, r7, #12
 8012a54:	2105      	movs	r1, #5
 8012a56:	4618      	mov	r0, r3
 8012a58:	f005 f8a6 	bl	8017ba8 <HAL_RCC_ClockConfig>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d001      	beq.n	8012a66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8012a62:	f000 fc17 	bl	8013294 <Error_Handler>
  }
}
 8012a66:	bf00      	nop
 8012a68:	3750      	adds	r7, #80	; 0x50
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	40023800 	.word	0x40023800
 8012a74:	40007000 	.word	0x40007000

08012a78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b084      	sub	sp, #16
 8012a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8012a7e:	463b      	mov	r3, r7
 8012a80:	2200      	movs	r2, #0
 8012a82:	601a      	str	r2, [r3, #0]
 8012a84:	605a      	str	r2, [r3, #4]
 8012a86:	609a      	str	r2, [r3, #8]
 8012a88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8012a8a:	4b44      	ldr	r3, [pc, #272]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012a8c:	4a44      	ldr	r2, [pc, #272]	; (8012ba0 <MX_ADC1_Init+0x128>)
 8012a8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012a90:	4b42      	ldr	r3, [pc, #264]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012a92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012a96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8012a98:	4b40      	ldr	r3, [pc, #256]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8012a9e:	4b3f      	ldr	r3, [pc, #252]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8012aa4:	4b3d      	ldr	r3, [pc, #244]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8012aaa:	4b3c      	ldr	r3, [pc, #240]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012aac:	2200      	movs	r2, #0
 8012aae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012ab2:	4b3a      	ldr	r3, [pc, #232]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012ab8:	4b38      	ldr	r3, [pc, #224]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012aba:	4a3a      	ldr	r2, [pc, #232]	; (8012ba4 <MX_ADC1_Init+0x12c>)
 8012abc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012abe:	4b37      	ldr	r3, [pc, #220]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8012ac4:	4b35      	ldr	r3, [pc, #212]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012ac6:	2206      	movs	r2, #6
 8012ac8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8012aca:	4b34      	ldr	r3, [pc, #208]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012acc:	2201      	movs	r2, #1
 8012ace:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012ad2:	4b32      	ldr	r3, [pc, #200]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8012ad8:	4830      	ldr	r0, [pc, #192]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012ada:	f001 f8bb 	bl	8013c54 <HAL_ADC_Init>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d001      	beq.n	8012ae8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8012ae4:	f000 fbd6 	bl	8013294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8012aec:	2301      	movs	r3, #1
 8012aee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8012af0:	2307      	movs	r3, #7
 8012af2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012af4:	463b      	mov	r3, r7
 8012af6:	4619      	mov	r1, r3
 8012af8:	4828      	ldr	r0, [pc, #160]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012afa:	f001 fa1d 	bl	8013f38 <HAL_ADC_ConfigChannel>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d001      	beq.n	8012b08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8012b04:	f000 fbc6 	bl	8013294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8012b08:	2302      	movs	r3, #2
 8012b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8012b0c:	2302      	movs	r3, #2
 8012b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012b10:	463b      	mov	r3, r7
 8012b12:	4619      	mov	r1, r3
 8012b14:	4821      	ldr	r0, [pc, #132]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012b16:	f001 fa0f 	bl	8013f38 <HAL_ADC_ConfigChannel>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d001      	beq.n	8012b24 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8012b20:	f000 fbb8 	bl	8013294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8012b24:	2303      	movs	r3, #3
 8012b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8012b28:	2303      	movs	r3, #3
 8012b2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012b2c:	463b      	mov	r3, r7
 8012b2e:	4619      	mov	r1, r3
 8012b30:	481a      	ldr	r0, [pc, #104]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012b32:	f001 fa01 	bl	8013f38 <HAL_ADC_ConfigChannel>
 8012b36:	4603      	mov	r3, r0
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d001      	beq.n	8012b40 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8012b3c:	f000 fbaa 	bl	8013294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8012b40:	230f      	movs	r3, #15
 8012b42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8012b44:	2304      	movs	r3, #4
 8012b46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012b48:	463b      	mov	r3, r7
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	4813      	ldr	r0, [pc, #76]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012b4e:	f001 f9f3 	bl	8013f38 <HAL_ADC_ConfigChannel>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d001      	beq.n	8012b5c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8012b58:	f000 fb9c 	bl	8013294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8012b5c:	230d      	movs	r3, #13
 8012b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8012b60:	2305      	movs	r3, #5
 8012b62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012b64:	463b      	mov	r3, r7
 8012b66:	4619      	mov	r1, r3
 8012b68:	480c      	ldr	r0, [pc, #48]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012b6a:	f001 f9e5 	bl	8013f38 <HAL_ADC_ConfigChannel>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d001      	beq.n	8012b78 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8012b74:	f000 fb8e 	bl	8013294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8012b78:	230a      	movs	r3, #10
 8012b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8012b7c:	2306      	movs	r3, #6
 8012b7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012b80:	463b      	mov	r3, r7
 8012b82:	4619      	mov	r1, r3
 8012b84:	4805      	ldr	r0, [pc, #20]	; (8012b9c <MX_ADC1_Init+0x124>)
 8012b86:	f001 f9d7 	bl	8013f38 <HAL_ADC_ConfigChannel>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d001      	beq.n	8012b94 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8012b90:	f000 fb80 	bl	8013294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8012b94:	bf00      	nop
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	20014908 	.word	0x20014908
 8012ba0:	40012000 	.word	0x40012000
 8012ba4:	0f000001 	.word	0x0f000001

08012ba8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8012bae:	463b      	mov	r3, r7
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	601a      	str	r2, [r3, #0]
 8012bb4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8012bb6:	4b14      	ldr	r3, [pc, #80]	; (8012c08 <MX_DAC_Init+0x60>)
 8012bb8:	4a14      	ldr	r2, [pc, #80]	; (8012c0c <MX_DAC_Init+0x64>)
 8012bba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8012bbc:	4812      	ldr	r0, [pc, #72]	; (8012c08 <MX_DAC_Init+0x60>)
 8012bbe:	f001 fd3d 	bl	801463c <HAL_DAC_Init>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d001      	beq.n	8012bcc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8012bc8:	f000 fb64 	bl	8013294 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8012bd4:	463b      	mov	r3, r7
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	4619      	mov	r1, r3
 8012bda:	480b      	ldr	r0, [pc, #44]	; (8012c08 <MX_DAC_Init+0x60>)
 8012bdc:	f001 fe06 	bl	80147ec <HAL_DAC_ConfigChannel>
 8012be0:	4603      	mov	r3, r0
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d001      	beq.n	8012bea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8012be6:	f000 fb55 	bl	8013294 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8012bea:	463b      	mov	r3, r7
 8012bec:	2210      	movs	r2, #16
 8012bee:	4619      	mov	r1, r3
 8012bf0:	4805      	ldr	r0, [pc, #20]	; (8012c08 <MX_DAC_Init+0x60>)
 8012bf2:	f001 fdfb 	bl	80147ec <HAL_DAC_ConfigChannel>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d001      	beq.n	8012c00 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8012bfc:	f000 fb4a 	bl	8013294 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8012c00:	bf00      	nop
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	20014954 	.word	0x20014954
 8012c0c:	40007400 	.word	0x40007400

08012c10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8012c14:	4b12      	ldr	r3, [pc, #72]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c16:	4a13      	ldr	r2, [pc, #76]	; (8012c64 <MX_I2C2_Init+0x54>)
 8012c18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8012c1a:	4b11      	ldr	r3, [pc, #68]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c1c:	4a12      	ldr	r2, [pc, #72]	; (8012c68 <MX_I2C2_Init+0x58>)
 8012c1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012c20:	4b0f      	ldr	r3, [pc, #60]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c22:	2200      	movs	r2, #0
 8012c24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8012c26:	4b0e      	ldr	r3, [pc, #56]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c28:	2200      	movs	r2, #0
 8012c2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012c2c:	4b0c      	ldr	r3, [pc, #48]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012c32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012c34:	4b0a      	ldr	r3, [pc, #40]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c36:	2200      	movs	r2, #0
 8012c38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8012c3a:	4b09      	ldr	r3, [pc, #36]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012c40:	4b07      	ldr	r3, [pc, #28]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c42:	2200      	movs	r2, #0
 8012c44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012c46:	4b06      	ldr	r3, [pc, #24]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c48:	2200      	movs	r2, #0
 8012c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8012c4c:	4804      	ldr	r0, [pc, #16]	; (8012c60 <MX_I2C2_Init+0x50>)
 8012c4e:	f002 fc1b 	bl	8015488 <HAL_I2C_Init>
 8012c52:	4603      	mov	r3, r0
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d001      	beq.n	8012c5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8012c58:	f000 fb1c 	bl	8013294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8012c5c:	bf00      	nop
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	200148b4 	.word	0x200148b4
 8012c64:	40005800 	.word	0x40005800
 8012c68:	00061a80 	.word	0x00061a80

08012c6c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8012c70:	4b12      	ldr	r3, [pc, #72]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012c72:	4a13      	ldr	r2, [pc, #76]	; (8012cc0 <MX_I2C3_Init+0x54>)
 8012c74:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8012c76:	4b11      	ldr	r3, [pc, #68]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012c78:	4a12      	ldr	r2, [pc, #72]	; (8012cc4 <MX_I2C3_Init+0x58>)
 8012c7a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012c7c:	4b0f      	ldr	r3, [pc, #60]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012c7e:	2200      	movs	r2, #0
 8012c80:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8012c82:	4b0e      	ldr	r3, [pc, #56]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012c84:	2200      	movs	r2, #0
 8012c86:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012c88:	4b0c      	ldr	r3, [pc, #48]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012c8e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012c90:	4b0a      	ldr	r3, [pc, #40]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012c92:	2200      	movs	r2, #0
 8012c94:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8012c96:	4b09      	ldr	r3, [pc, #36]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012c98:	2200      	movs	r2, #0
 8012c9a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012c9c:	4b07      	ldr	r3, [pc, #28]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012ca2:	4b06      	ldr	r3, [pc, #24]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8012ca8:	4804      	ldr	r0, [pc, #16]	; (8012cbc <MX_I2C3_Init+0x50>)
 8012caa:	f002 fbed 	bl	8015488 <HAL_I2C_Init>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d001      	beq.n	8012cb8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8012cb4:	f000 faee 	bl	8013294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8012cb8:	bf00      	nop
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	20014860 	.word	0x20014860
 8012cc0:	40005c00 	.word	0x40005c00
 8012cc4:	00061a80 	.word	0x00061a80

08012cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b08a      	sub	sp, #40	; 0x28
 8012ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8012cce:	f107 0318 	add.w	r3, r7, #24
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	601a      	str	r2, [r3, #0]
 8012cd6:	605a      	str	r2, [r3, #4]
 8012cd8:	609a      	str	r2, [r3, #8]
 8012cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012cdc:	f107 0310 	add.w	r3, r7, #16
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	601a      	str	r2, [r3, #0]
 8012ce4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8012ce6:	463b      	mov	r3, r7
 8012ce8:	2200      	movs	r2, #0
 8012cea:	601a      	str	r2, [r3, #0]
 8012cec:	605a      	str	r2, [r3, #4]
 8012cee:	609a      	str	r2, [r3, #8]
 8012cf0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8012cf2:	4b2b      	ldr	r3, [pc, #172]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012cf4:	4a2b      	ldr	r2, [pc, #172]	; (8012da4 <MX_TIM3_Init+0xdc>)
 8012cf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8012cf8:	4b29      	ldr	r3, [pc, #164]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012cfa:	2253      	movs	r2, #83	; 0x53
 8012cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012cfe:	4b28      	ldr	r3, [pc, #160]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012d00:	2200      	movs	r2, #0
 8012d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8012d04:	4b26      	ldr	r3, [pc, #152]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012d0c:	4b24      	ldr	r3, [pc, #144]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012d0e:	2200      	movs	r2, #0
 8012d10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012d12:	4b23      	ldr	r3, [pc, #140]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012d14:	2200      	movs	r2, #0
 8012d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8012d18:	4821      	ldr	r0, [pc, #132]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012d1a:	f005 f971 	bl	8018000 <HAL_TIM_Base_Init>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d001      	beq.n	8012d28 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8012d24:	f000 fab6 	bl	8013294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d2c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8012d2e:	f107 0318 	add.w	r3, r7, #24
 8012d32:	4619      	mov	r1, r3
 8012d34:	481a      	ldr	r0, [pc, #104]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012d36:	f006 fa75 	bl	8019224 <HAL_TIM_ConfigClockSource>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d001      	beq.n	8012d44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8012d40:	f000 faa8 	bl	8013294 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8012d44:	4816      	ldr	r0, [pc, #88]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012d46:	f005 fdd7 	bl	80188f8 <HAL_TIM_IC_Init>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d001      	beq.n	8012d54 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8012d50:	f000 faa0 	bl	8013294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012d54:	2300      	movs	r3, #0
 8012d56:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012d5c:	f107 0310 	add.w	r3, r7, #16
 8012d60:	4619      	mov	r1, r3
 8012d62:	480f      	ldr	r0, [pc, #60]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012d64:	f007 f89e 	bl	8019ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d001      	beq.n	8012d72 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8012d6e:	f000 fa91 	bl	8013294 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8012d72:	2300      	movs	r3, #0
 8012d74:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8012d76:	2301      	movs	r3, #1
 8012d78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8012d82:	463b      	mov	r3, r7
 8012d84:	2200      	movs	r2, #0
 8012d86:	4619      	mov	r1, r3
 8012d88:	4805      	ldr	r0, [pc, #20]	; (8012da0 <MX_TIM3_Init+0xd8>)
 8012d8a:	f006 f8ed 	bl	8018f68 <HAL_TIM_IC_ConfigChannel>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d001      	beq.n	8012d98 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8012d94:	f000 fa7e 	bl	8013294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8012d98:	bf00      	nop
 8012d9a:	3728      	adds	r7, #40	; 0x28
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	20013cac 	.word	0x20013cac
 8012da4:	40000400 	.word	0x40000400

08012da8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b08e      	sub	sp, #56	; 0x38
 8012dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8012dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012db2:	2200      	movs	r2, #0
 8012db4:	601a      	str	r2, [r3, #0]
 8012db6:	605a      	str	r2, [r3, #4]
 8012db8:	609a      	str	r2, [r3, #8]
 8012dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012dbc:	f107 0320 	add.w	r3, r7, #32
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	601a      	str	r2, [r3, #0]
 8012dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012dc6:	1d3b      	adds	r3, r7, #4
 8012dc8:	2200      	movs	r2, #0
 8012dca:	601a      	str	r2, [r3, #0]
 8012dcc:	605a      	str	r2, [r3, #4]
 8012dce:	609a      	str	r2, [r3, #8]
 8012dd0:	60da      	str	r2, [r3, #12]
 8012dd2:	611a      	str	r2, [r3, #16]
 8012dd4:	615a      	str	r2, [r3, #20]
 8012dd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8012dd8:	4b2c      	ldr	r3, [pc, #176]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012dda:	4a2d      	ldr	r2, [pc, #180]	; (8012e90 <MX_TIM4_Init+0xe8>)
 8012ddc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8012dde:	4b2b      	ldr	r3, [pc, #172]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012de0:	2200      	movs	r2, #0
 8012de2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012de4:	4b29      	ldr	r3, [pc, #164]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012de6:	2200      	movs	r2, #0
 8012de8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105-1;
 8012dea:	4b28      	ldr	r3, [pc, #160]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012dec:	2268      	movs	r2, #104	; 0x68
 8012dee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012df0:	4b26      	ldr	r3, [pc, #152]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012df2:	2200      	movs	r2, #0
 8012df4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012df6:	4b25      	ldr	r3, [pc, #148]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012df8:	2200      	movs	r2, #0
 8012dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8012dfc:	4823      	ldr	r0, [pc, #140]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012dfe:	f005 f8ff 	bl	8018000 <HAL_TIM_Base_Init>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d001      	beq.n	8012e0c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8012e08:	f000 fa44 	bl	8013294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8012e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012e16:	4619      	mov	r1, r3
 8012e18:	481c      	ldr	r0, [pc, #112]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012e1a:	f006 fa03 	bl	8019224 <HAL_TIM_ConfigClockSource>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8012e24:	f000 fa36 	bl	8013294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8012e28:	4818      	ldr	r0, [pc, #96]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012e2a:	f005 f9a9 	bl	8018180 <HAL_TIM_PWM_Init>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d001      	beq.n	8012e38 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8012e34:	f000 fa2e 	bl	8013294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8012e40:	f107 0320 	add.w	r3, r7, #32
 8012e44:	4619      	mov	r1, r3
 8012e46:	4811      	ldr	r0, [pc, #68]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012e48:	f007 f82c 	bl	8019ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d001      	beq.n	8012e56 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8012e52:	f000 fa1f 	bl	8013294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012e56:	2360      	movs	r3, #96	; 0x60
 8012e58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012e62:	2300      	movs	r3, #0
 8012e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012e66:	1d3b      	adds	r3, r7, #4
 8012e68:	2208      	movs	r2, #8
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	4807      	ldr	r0, [pc, #28]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012e6e:	f006 f917 	bl	80190a0 <HAL_TIM_PWM_ConfigChannel>
 8012e72:	4603      	mov	r3, r0
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d001      	beq.n	8012e7c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8012e78:	f000 fa0c 	bl	8013294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8012e7c:	4803      	ldr	r0, [pc, #12]	; (8012e8c <MX_TIM4_Init+0xe4>)
 8012e7e:	f000 fc6b 	bl	8013758 <HAL_TIM_MspPostInit>

}
 8012e82:	bf00      	nop
 8012e84:	3738      	adds	r7, #56	; 0x38
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	20013a04 	.word	0x20013a04
 8012e90:	40000800 	.word	0x40000800

08012e94 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b08c      	sub	sp, #48	; 0x30
 8012e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8012e9a:	f107 0320 	add.w	r3, r7, #32
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	601a      	str	r2, [r3, #0]
 8012ea2:	605a      	str	r2, [r3, #4]
 8012ea4:	609a      	str	r2, [r3, #8]
 8012ea6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012ea8:	1d3b      	adds	r3, r7, #4
 8012eaa:	2200      	movs	r2, #0
 8012eac:	601a      	str	r2, [r3, #0]
 8012eae:	605a      	str	r2, [r3, #4]
 8012eb0:	609a      	str	r2, [r3, #8]
 8012eb2:	60da      	str	r2, [r3, #12]
 8012eb4:	611a      	str	r2, [r3, #16]
 8012eb6:	615a      	str	r2, [r3, #20]
 8012eb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8012eba:	4b26      	ldr	r3, [pc, #152]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012ebc:	4a26      	ldr	r2, [pc, #152]	; (8012f58 <MX_TIM12_Init+0xc4>)
 8012ebe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1680-1;
 8012ec0:	4b24      	ldr	r3, [pc, #144]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012ec2:	f240 628f 	movw	r2, #1679	; 0x68f
 8012ec6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012ec8:	4b22      	ldr	r3, [pc, #136]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012eca:	2200      	movs	r2, #0
 8012ecc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8012ece:	4b21      	ldr	r3, [pc, #132]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012ed0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012ed4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012ed6:	4b1f      	ldr	r3, [pc, #124]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012ed8:	2200      	movs	r2, #0
 8012eda:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012edc:	4b1d      	ldr	r3, [pc, #116]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012ede:	2200      	movs	r2, #0
 8012ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8012ee2:	481c      	ldr	r0, [pc, #112]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012ee4:	f005 f88c 	bl	8018000 <HAL_TIM_Base_Init>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8012eee:	f000 f9d1 	bl	8013294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ef6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8012ef8:	f107 0320 	add.w	r3, r7, #32
 8012efc:	4619      	mov	r1, r3
 8012efe:	4815      	ldr	r0, [pc, #84]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012f00:	f006 f990 	bl	8019224 <HAL_TIM_ConfigClockSource>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d001      	beq.n	8012f0e <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8012f0a:	f000 f9c3 	bl	8013294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8012f0e:	4811      	ldr	r0, [pc, #68]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012f10:	f005 f936 	bl	8018180 <HAL_TIM_PWM_Init>
 8012f14:	4603      	mov	r3, r0
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d001      	beq.n	8012f1e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8012f1a:	f000 f9bb 	bl	8013294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012f1e:	2360      	movs	r3, #96	; 0x60
 8012f20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8012f22:	2300      	movs	r3, #0
 8012f24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012f26:	2300      	movs	r3, #0
 8012f28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012f2e:	1d3b      	adds	r3, r7, #4
 8012f30:	2200      	movs	r2, #0
 8012f32:	4619      	mov	r1, r3
 8012f34:	4807      	ldr	r0, [pc, #28]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012f36:	f006 f8b3 	bl	80190a0 <HAL_TIM_PWM_ConfigChannel>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d001      	beq.n	8012f44 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8012f40:	f000 f9a8 	bl	8013294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8012f44:	4803      	ldr	r0, [pc, #12]	; (8012f54 <MX_TIM12_Init+0xc0>)
 8012f46:	f000 fc07 	bl	8013758 <HAL_TIM_MspPostInit>

}
 8012f4a:	bf00      	nop
 8012f4c:	3730      	adds	r7, #48	; 0x30
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	20014a28 	.word	0x20014a28
 8012f58:	40001800 	.word	0x40001800

08012f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8012f62:	2300      	movs	r3, #0
 8012f64:	607b      	str	r3, [r7, #4]
 8012f66:	4b17      	ldr	r3, [pc, #92]	; (8012fc4 <MX_DMA_Init+0x68>)
 8012f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f6a:	4a16      	ldr	r2, [pc, #88]	; (8012fc4 <MX_DMA_Init+0x68>)
 8012f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012f70:	6313      	str	r3, [r2, #48]	; 0x30
 8012f72:	4b14      	ldr	r3, [pc, #80]	; (8012fc4 <MX_DMA_Init+0x68>)
 8012f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012f7a:	607b      	str	r3, [r7, #4]
 8012f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8012f7e:	2300      	movs	r3, #0
 8012f80:	603b      	str	r3, [r7, #0]
 8012f82:	4b10      	ldr	r3, [pc, #64]	; (8012fc4 <MX_DMA_Init+0x68>)
 8012f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f86:	4a0f      	ldr	r2, [pc, #60]	; (8012fc4 <MX_DMA_Init+0x68>)
 8012f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8012f8e:	4b0d      	ldr	r3, [pc, #52]	; (8012fc4 <MX_DMA_Init+0x68>)
 8012f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012f96:	603b      	str	r3, [r7, #0]
 8012f98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	2105      	movs	r1, #5
 8012f9e:	202f      	movs	r0, #47	; 0x2f
 8012fa0:	f001 fb22 	bl	80145e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8012fa4:	202f      	movs	r0, #47	; 0x2f
 8012fa6:	f001 fb3b 	bl	8014620 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8012faa:	2200      	movs	r2, #0
 8012fac:	2105      	movs	r1, #5
 8012fae:	2038      	movs	r0, #56	; 0x38
 8012fb0:	f001 fb1a 	bl	80145e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8012fb4:	2038      	movs	r0, #56	; 0x38
 8012fb6:	f001 fb33 	bl	8014620 <HAL_NVIC_EnableIRQ>

}
 8012fba:	bf00      	nop
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	40023800 	.word	0x40023800

08012fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b08c      	sub	sp, #48	; 0x30
 8012fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012fce:	f107 031c 	add.w	r3, r7, #28
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	601a      	str	r2, [r3, #0]
 8012fd6:	605a      	str	r2, [r3, #4]
 8012fd8:	609a      	str	r2, [r3, #8]
 8012fda:	60da      	str	r2, [r3, #12]
 8012fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012fde:	2300      	movs	r3, #0
 8012fe0:	61bb      	str	r3, [r7, #24]
 8012fe2:	4b5f      	ldr	r3, [pc, #380]	; (8013160 <MX_GPIO_Init+0x198>)
 8012fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fe6:	4a5e      	ldr	r2, [pc, #376]	; (8013160 <MX_GPIO_Init+0x198>)
 8012fe8:	f043 0310 	orr.w	r3, r3, #16
 8012fec:	6313      	str	r3, [r2, #48]	; 0x30
 8012fee:	4b5c      	ldr	r3, [pc, #368]	; (8013160 <MX_GPIO_Init+0x198>)
 8012ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ff2:	f003 0310 	and.w	r3, r3, #16
 8012ff6:	61bb      	str	r3, [r7, #24]
 8012ff8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	617b      	str	r3, [r7, #20]
 8012ffe:	4b58      	ldr	r3, [pc, #352]	; (8013160 <MX_GPIO_Init+0x198>)
 8013000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013002:	4a57      	ldr	r2, [pc, #348]	; (8013160 <MX_GPIO_Init+0x198>)
 8013004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013008:	6313      	str	r3, [r2, #48]	; 0x30
 801300a:	4b55      	ldr	r3, [pc, #340]	; (8013160 <MX_GPIO_Init+0x198>)
 801300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013012:	617b      	str	r3, [r7, #20]
 8013014:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013016:	2300      	movs	r3, #0
 8013018:	613b      	str	r3, [r7, #16]
 801301a:	4b51      	ldr	r3, [pc, #324]	; (8013160 <MX_GPIO_Init+0x198>)
 801301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801301e:	4a50      	ldr	r2, [pc, #320]	; (8013160 <MX_GPIO_Init+0x198>)
 8013020:	f043 0304 	orr.w	r3, r3, #4
 8013024:	6313      	str	r3, [r2, #48]	; 0x30
 8013026:	4b4e      	ldr	r3, [pc, #312]	; (8013160 <MX_GPIO_Init+0x198>)
 8013028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801302a:	f003 0304 	and.w	r3, r3, #4
 801302e:	613b      	str	r3, [r7, #16]
 8013030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013032:	2300      	movs	r3, #0
 8013034:	60fb      	str	r3, [r7, #12]
 8013036:	4b4a      	ldr	r3, [pc, #296]	; (8013160 <MX_GPIO_Init+0x198>)
 8013038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801303a:	4a49      	ldr	r2, [pc, #292]	; (8013160 <MX_GPIO_Init+0x198>)
 801303c:	f043 0301 	orr.w	r3, r3, #1
 8013040:	6313      	str	r3, [r2, #48]	; 0x30
 8013042:	4b47      	ldr	r3, [pc, #284]	; (8013160 <MX_GPIO_Init+0x198>)
 8013044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013046:	f003 0301 	and.w	r3, r3, #1
 801304a:	60fb      	str	r3, [r7, #12]
 801304c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801304e:	2300      	movs	r3, #0
 8013050:	60bb      	str	r3, [r7, #8]
 8013052:	4b43      	ldr	r3, [pc, #268]	; (8013160 <MX_GPIO_Init+0x198>)
 8013054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013056:	4a42      	ldr	r2, [pc, #264]	; (8013160 <MX_GPIO_Init+0x198>)
 8013058:	f043 0302 	orr.w	r3, r3, #2
 801305c:	6313      	str	r3, [r2, #48]	; 0x30
 801305e:	4b40      	ldr	r3, [pc, #256]	; (8013160 <MX_GPIO_Init+0x198>)
 8013060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013062:	f003 0302 	and.w	r3, r3, #2
 8013066:	60bb      	str	r3, [r7, #8]
 8013068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801306a:	2300      	movs	r3, #0
 801306c:	607b      	str	r3, [r7, #4]
 801306e:	4b3c      	ldr	r3, [pc, #240]	; (8013160 <MX_GPIO_Init+0x198>)
 8013070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013072:	4a3b      	ldr	r2, [pc, #236]	; (8013160 <MX_GPIO_Init+0x198>)
 8013074:	f043 0308 	orr.w	r3, r3, #8
 8013078:	6313      	str	r3, [r2, #48]	; 0x30
 801307a:	4b39      	ldr	r3, [pc, #228]	; (8013160 <MX_GPIO_Init+0x198>)
 801307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801307e:	f003 0308 	and.w	r3, r3, #8
 8013082:	607b      	str	r3, [r7, #4]
 8013084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Blower_Enable_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8013086:	2200      	movs	r2, #0
 8013088:	f64f 7122 	movw	r1, #65314	; 0xff22
 801308c:	4835      	ldr	r0, [pc, #212]	; (8013164 <MX_GPIO_Init+0x19c>)
 801308e:	f002 f9bd 	bl	801540c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|Expiratory_Valve_Control_Pin|Nebuliser_Motor_Control_Pin, GPIO_PIN_RESET);
 8013092:	2200      	movs	r2, #0
 8013094:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8013098:	4833      	ldr	r0, [pc, #204]	; (8013168 <MX_GPIO_Init+0x1a0>)
 801309a:	f002 f9b7 	bl	801540c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 801309e:	2200      	movs	r2, #0
 80130a0:	f248 017a 	movw	r1, #32890	; 0x807a
 80130a4:	4831      	ldr	r0, [pc, #196]	; (801316c <MX_GPIO_Init+0x1a4>)
 80130a6:	f002 f9b1 	bl	801540c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80130aa:	2304      	movs	r3, #4
 80130ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80130ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80130b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80130b4:	2302      	movs	r3, #2
 80130b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80130b8:	f107 031c 	add.w	r3, r7, #28
 80130bc:	4619      	mov	r1, r3
 80130be:	4829      	ldr	r0, [pc, #164]	; (8013164 <MX_GPIO_Init+0x19c>)
 80130c0:	f001 fff0 	bl	80150a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blower_Enable_Pin PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE1 */
  GPIO_InitStruct.Pin = Blower_Enable_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80130c4:	f64f 7322 	movw	r3, #65314	; 0xff22
 80130c8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80130ca:	2301      	movs	r3, #1
 80130cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130ce:	2300      	movs	r3, #0
 80130d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130d2:	2300      	movs	r3, #0
 80130d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80130d6:	f107 031c 	add.w	r3, r7, #28
 80130da:	4619      	mov	r1, r3
 80130dc:	4821      	ldr	r0, [pc, #132]	; (8013164 <MX_GPIO_Init+0x19c>)
 80130de:	f001 ffe1 	bl	80150a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80130e2:	2340      	movs	r3, #64	; 0x40
 80130e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80130e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80130ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130ec:	2300      	movs	r3, #0
 80130ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80130f0:	f107 031c 	add.w	r3, r7, #28
 80130f4:	4619      	mov	r1, r3
 80130f6:	481b      	ldr	r0, [pc, #108]	; (8013164 <MX_GPIO_Init+0x19c>)
 80130f8:	f001 ffd4 	bl	80150a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 Expiratory_Valve_Control_Pin Nebuliser_Motor_Control_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|Expiratory_Valve_Control_Pin|Nebuliser_Motor_Control_Pin;
 80130fc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8013100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013102:	2301      	movs	r3, #1
 8013104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013106:	2300      	movs	r3, #0
 8013108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801310a:	2300      	movs	r3, #0
 801310c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801310e:	f107 031c 	add.w	r3, r7, #28
 8013112:	4619      	mov	r1, r3
 8013114:	4814      	ldr	r0, [pc, #80]	; (8013168 <MX_GPIO_Init+0x1a0>)
 8013116:	f001 ffc5 	bl	80150a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD1 PD3 PD4
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 801311a:	f248 037a 	movw	r3, #32890	; 0x807a
 801311e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013120:	2301      	movs	r3, #1
 8013122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013124:	2300      	movs	r3, #0
 8013126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013128:	2300      	movs	r3, #0
 801312a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801312c:	f107 031c 	add.w	r3, r7, #28
 8013130:	4619      	mov	r1, r3
 8013132:	480e      	ldr	r0, [pc, #56]	; (801316c <MX_GPIO_Init+0x1a4>)
 8013134:	f001 ffb6 	bl	80150a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8013138:	2200      	movs	r2, #0
 801313a:	2105      	movs	r1, #5
 801313c:	2008      	movs	r0, #8
 801313e:	f001 fa53 	bl	80145e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8013142:	2008      	movs	r0, #8
 8013144:	f001 fa6c 	bl	8014620 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8013148:	2200      	movs	r2, #0
 801314a:	2105      	movs	r1, #5
 801314c:	2017      	movs	r0, #23
 801314e:	f001 fa4b 	bl	80145e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8013152:	2017      	movs	r0, #23
 8013154:	f001 fa64 	bl	8014620 <HAL_NVIC_EnableIRQ>

}
 8013158:	bf00      	nop
 801315a:	3730      	adds	r7, #48	; 0x30
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}
 8013160:	40023800 	.word	0x40023800
 8013164:	40021000 	.word	0x40021000
 8013168:	40020400 	.word	0x40020400
 801316c:	40020c00 	.word	0x40020c00

08013170 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	7f1b      	ldrb	r3, [r3, #28]
 801317c:	2b01      	cmp	r3, #1
 801317e:	d161      	bne.n	8013244 <HAL_TIM_IC_CaptureCallback+0xd4>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 8013180:	4b32      	ldr	r3, [pc, #200]	; (801324c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d10a      	bne.n	801319e <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8013188:	2100      	movs	r1, #0
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f006 f912 	bl	80193b4 <HAL_TIM_ReadCapturedValue>
 8013190:	4603      	mov	r3, r0
 8013192:	4a2f      	ldr	r2, [pc, #188]	; (8013250 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8013194:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8013196:	4b2d      	ldr	r3, [pc, #180]	; (801324c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8013198:	2201      	movs	r2, #1
 801319a:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 801319c:	e052      	b.n	8013244 <HAL_TIM_IC_CaptureCallback+0xd4>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 801319e:	2100      	movs	r1, #0
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f006 f907 	bl	80193b4 <HAL_TIM_ReadCapturedValue>
 80131a6:	4603      	mov	r3, r0
 80131a8:	4a2a      	ldr	r2, [pc, #168]	; (8013254 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80131aa:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 80131ac:	4b29      	ldr	r3, [pc, #164]	; (8013254 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80131ae:	681a      	ldr	r2, [r3, #0]
 80131b0:	4b27      	ldr	r3, [pc, #156]	; (8013250 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d907      	bls.n	80131c8 <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
 80131b8:	4b26      	ldr	r3, [pc, #152]	; (8013254 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80131ba:	681a      	ldr	r2, [r3, #0]
 80131bc:	4b24      	ldr	r3, [pc, #144]	; (8013250 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	1ad3      	subs	r3, r2, r3
 80131c2:	4a25      	ldr	r2, [pc, #148]	; (8013258 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80131c4:	6013      	str	r3, [r2, #0]
 80131c6:	e00d      	b.n	80131e4 <HAL_TIM_IC_CaptureCallback+0x74>
			else if (IC_Val1 > IC_Val2)
 80131c8:	4b21      	ldr	r3, [pc, #132]	; (8013250 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80131ca:	681a      	ldr	r2, [r3, #0]
 80131cc:	4b21      	ldr	r3, [pc, #132]	; (8013254 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	429a      	cmp	r2, r3
 80131d2:	d907      	bls.n	80131e4 <HAL_TIM_IC_CaptureCallback+0x74>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 80131d4:	4b1f      	ldr	r3, [pc, #124]	; (8013254 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	4b1d      	ldr	r3, [pc, #116]	; (8013250 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	1ad3      	subs	r3, r2, r3
 80131de:	3b01      	subs	r3, #1
 80131e0:	4a1d      	ldr	r2, [pc, #116]	; (8013258 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80131e2:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80131e4:	4b1d      	ldr	r3, [pc, #116]	; (801325c <HAL_TIM_IC_CaptureCallback+0xec>)
 80131e6:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 80131e8:	4b1b      	ldr	r3, [pc, #108]	; (8013258 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	ee07 3a90 	vmov	s15, r3
 80131f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80131f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80131f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131fc:	4b18      	ldr	r3, [pc, #96]	; (8013260 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80131fe:	edc3 7a00 	vstr	s15, [r3]
			frequency_Decimal = frequency/1000;
 8013202:	4b17      	ldr	r3, [pc, #92]	; (8013260 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8013204:	ed93 7a00 	vldr	s14, [r3]
 8013208:	eddf 6a16 	vldr	s13, [pc, #88]	; 8013264 <HAL_TIM_IC_CaptureCallback+0xf4>
 801320c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013210:	4b15      	ldr	r3, [pc, #84]	; (8013268 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8013212:	edc3 7a00 	vstr	s15, [r3]
			Blower_RPM   = ( ( (int)frequency - 248) * 30);
 8013216:	4b12      	ldr	r3, [pc, #72]	; (8013260 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8013218:	edd3 7a00 	vldr	s15, [r3]
 801321c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013220:	ee17 3a90 	vmov	r3, s15
 8013224:	f1a3 02f8 	sub.w	r2, r3, #248	; 0xf8
 8013228:	4613      	mov	r3, r2
 801322a:	011b      	lsls	r3, r3, #4
 801322c:	1a9b      	subs	r3, r3, r2
 801322e:	005b      	lsls	r3, r3, #1
 8013230:	461a      	mov	r2, r3
 8013232:	4b0e      	ldr	r3, [pc, #56]	; (801326c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8013234:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	2200      	movs	r2, #0
 801323c:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 801323e:	4b03      	ldr	r3, [pc, #12]	; (801324c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8013240:	2200      	movs	r2, #0
 8013242:	601a      	str	r2, [r3, #0]
}
 8013244:	bf00      	nop
 8013246:	3710      	adds	r7, #16
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	200008b0 	.word	0x200008b0
 8013250:	200008a4 	.word	0x200008a4
 8013254:	200008a8 	.word	0x200008a8
 8013258:	200008ac 	.word	0x200008ac
 801325c:	49742400 	.word	0x49742400
 8013260:	200008b4 	.word	0x200008b4
 8013264:	447a0000 	.word	0x447a0000
 8013268:	20014950 	.word	0x20014950
 801326c:	200008b8 	.word	0x200008b8

08013270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	4a04      	ldr	r2, [pc, #16]	; (8013290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801327e:	4293      	cmp	r3, r2
 8013280:	d101      	bne.n	8013286 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8013282:	f000 fca3 	bl	8013bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013286:	bf00      	nop
 8013288:	3708      	adds	r7, #8
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	40001000 	.word	0x40001000

08013294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013294:	b480      	push	{r7}
 8013296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8013298:	b672      	cpsid	i
}
 801329a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801329c:	e7fe      	b.n	801329c <Error_Handler+0x8>
	...

080132a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80132a6:	2300      	movs	r3, #0
 80132a8:	607b      	str	r3, [r7, #4]
 80132aa:	4b12      	ldr	r3, [pc, #72]	; (80132f4 <HAL_MspInit+0x54>)
 80132ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132ae:	4a11      	ldr	r2, [pc, #68]	; (80132f4 <HAL_MspInit+0x54>)
 80132b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80132b4:	6453      	str	r3, [r2, #68]	; 0x44
 80132b6:	4b0f      	ldr	r3, [pc, #60]	; (80132f4 <HAL_MspInit+0x54>)
 80132b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80132be:	607b      	str	r3, [r7, #4]
 80132c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80132c2:	2300      	movs	r3, #0
 80132c4:	603b      	str	r3, [r7, #0]
 80132c6:	4b0b      	ldr	r3, [pc, #44]	; (80132f4 <HAL_MspInit+0x54>)
 80132c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132ca:	4a0a      	ldr	r2, [pc, #40]	; (80132f4 <HAL_MspInit+0x54>)
 80132cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80132d0:	6413      	str	r3, [r2, #64]	; 0x40
 80132d2:	4b08      	ldr	r3, [pc, #32]	; (80132f4 <HAL_MspInit+0x54>)
 80132d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80132da:	603b      	str	r3, [r7, #0]
 80132dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80132de:	2200      	movs	r2, #0
 80132e0:	210f      	movs	r1, #15
 80132e2:	f06f 0001 	mvn.w	r0, #1
 80132e6:	f001 f97f 	bl	80145e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80132ea:	bf00      	nop
 80132ec:	3708      	adds	r7, #8
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	40023800 	.word	0x40023800

080132f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b08a      	sub	sp, #40	; 0x28
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013300:	f107 0314 	add.w	r3, r7, #20
 8013304:	2200      	movs	r2, #0
 8013306:	601a      	str	r2, [r3, #0]
 8013308:	605a      	str	r2, [r3, #4]
 801330a:	609a      	str	r2, [r3, #8]
 801330c:	60da      	str	r2, [r3, #12]
 801330e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	4a3c      	ldr	r2, [pc, #240]	; (8013408 <HAL_ADC_MspInit+0x110>)
 8013316:	4293      	cmp	r3, r2
 8013318:	d171      	bne.n	80133fe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801331a:	2300      	movs	r3, #0
 801331c:	613b      	str	r3, [r7, #16]
 801331e:	4b3b      	ldr	r3, [pc, #236]	; (801340c <HAL_ADC_MspInit+0x114>)
 8013320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013322:	4a3a      	ldr	r2, [pc, #232]	; (801340c <HAL_ADC_MspInit+0x114>)
 8013324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013328:	6453      	str	r3, [r2, #68]	; 0x44
 801332a:	4b38      	ldr	r3, [pc, #224]	; (801340c <HAL_ADC_MspInit+0x114>)
 801332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013332:	613b      	str	r3, [r7, #16]
 8013334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013336:	2300      	movs	r3, #0
 8013338:	60fb      	str	r3, [r7, #12]
 801333a:	4b34      	ldr	r3, [pc, #208]	; (801340c <HAL_ADC_MspInit+0x114>)
 801333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801333e:	4a33      	ldr	r2, [pc, #204]	; (801340c <HAL_ADC_MspInit+0x114>)
 8013340:	f043 0304 	orr.w	r3, r3, #4
 8013344:	6313      	str	r3, [r2, #48]	; 0x30
 8013346:	4b31      	ldr	r3, [pc, #196]	; (801340c <HAL_ADC_MspInit+0x114>)
 8013348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801334a:	f003 0304 	and.w	r3, r3, #4
 801334e:	60fb      	str	r3, [r7, #12]
 8013350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013352:	2300      	movs	r3, #0
 8013354:	60bb      	str	r3, [r7, #8]
 8013356:	4b2d      	ldr	r3, [pc, #180]	; (801340c <HAL_ADC_MspInit+0x114>)
 8013358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801335a:	4a2c      	ldr	r2, [pc, #176]	; (801340c <HAL_ADC_MspInit+0x114>)
 801335c:	f043 0301 	orr.w	r3, r3, #1
 8013360:	6313      	str	r3, [r2, #48]	; 0x30
 8013362:	4b2a      	ldr	r3, [pc, #168]	; (801340c <HAL_ADC_MspInit+0x114>)
 8013364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013366:	f003 0301 	and.w	r3, r3, #1
 801336a:	60bb      	str	r3, [r7, #8]
 801336c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|Battery_Voltage_Read_Pin;
 801336e:	2329      	movs	r3, #41	; 0x29
 8013370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013372:	2303      	movs	r3, #3
 8013374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013376:	2300      	movs	r3, #0
 8013378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801337a:	f107 0314 	add.w	r3, r7, #20
 801337e:	4619      	mov	r1, r3
 8013380:	4823      	ldr	r0, [pc, #140]	; (8013410 <HAL_ADC_MspInit+0x118>)
 8013382:	f001 fe8f 	bl	80150a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Oxygen_Sensor_Pin|O2_Flow_Sensor_Pin|Pressure_Sensor_Pin;
 8013386:	230d      	movs	r3, #13
 8013388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801338a:	2303      	movs	r3, #3
 801338c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801338e:	2300      	movs	r3, #0
 8013390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013392:	f107 0314 	add.w	r3, r7, #20
 8013396:	4619      	mov	r1, r3
 8013398:	481e      	ldr	r0, [pc, #120]	; (8013414 <HAL_ADC_MspInit+0x11c>)
 801339a:	f001 fe83 	bl	80150a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 801339e:	4b1e      	ldr	r3, [pc, #120]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133a0:	4a1e      	ldr	r2, [pc, #120]	; (801341c <HAL_ADC_MspInit+0x124>)
 80133a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80133a4:	4b1c      	ldr	r3, [pc, #112]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133a6:	2200      	movs	r2, #0
 80133a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80133aa:	4b1b      	ldr	r3, [pc, #108]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133ac:	2200      	movs	r2, #0
 80133ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80133b0:	4b19      	ldr	r3, [pc, #100]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133b2:	2200      	movs	r2, #0
 80133b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80133b6:	4b18      	ldr	r3, [pc, #96]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80133bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80133be:	4b16      	ldr	r3, [pc, #88]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80133c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80133c6:	4b14      	ldr	r3, [pc, #80]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80133cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80133ce:	4b12      	ldr	r3, [pc, #72]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80133d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80133d6:	4b10      	ldr	r3, [pc, #64]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133d8:	2200      	movs	r2, #0
 80133da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80133dc:	4b0e      	ldr	r3, [pc, #56]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133de:	2200      	movs	r2, #0
 80133e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80133e2:	480d      	ldr	r0, [pc, #52]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133e4:	f001 fa5c 	bl	80148a0 <HAL_DMA_Init>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d001      	beq.n	80133f2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80133ee:	f7ff ff51 	bl	8013294 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	4a08      	ldr	r2, [pc, #32]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133f6:	639a      	str	r2, [r3, #56]	; 0x38
 80133f8:	4a07      	ldr	r2, [pc, #28]	; (8013418 <HAL_ADC_MspInit+0x120>)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80133fe:	bf00      	nop
 8013400:	3728      	adds	r7, #40	; 0x28
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	40012000 	.word	0x40012000
 801340c:	40023800 	.word	0x40023800
 8013410:	40020800 	.word	0x40020800
 8013414:	40020000 	.word	0x40020000
 8013418:	20014968 	.word	0x20014968
 801341c:	40026410 	.word	0x40026410

08013420 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b08a      	sub	sp, #40	; 0x28
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013428:	f107 0314 	add.w	r3, r7, #20
 801342c:	2200      	movs	r2, #0
 801342e:	601a      	str	r2, [r3, #0]
 8013430:	605a      	str	r2, [r3, #4]
 8013432:	609a      	str	r2, [r3, #8]
 8013434:	60da      	str	r2, [r3, #12]
 8013436:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	4a1b      	ldr	r2, [pc, #108]	; (80134ac <HAL_DAC_MspInit+0x8c>)
 801343e:	4293      	cmp	r3, r2
 8013440:	d12f      	bne.n	80134a2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8013442:	2300      	movs	r3, #0
 8013444:	613b      	str	r3, [r7, #16]
 8013446:	4b1a      	ldr	r3, [pc, #104]	; (80134b0 <HAL_DAC_MspInit+0x90>)
 8013448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801344a:	4a19      	ldr	r2, [pc, #100]	; (80134b0 <HAL_DAC_MspInit+0x90>)
 801344c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013450:	6413      	str	r3, [r2, #64]	; 0x40
 8013452:	4b17      	ldr	r3, [pc, #92]	; (80134b0 <HAL_DAC_MspInit+0x90>)
 8013454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801345a:	613b      	str	r3, [r7, #16]
 801345c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801345e:	2300      	movs	r3, #0
 8013460:	60fb      	str	r3, [r7, #12]
 8013462:	4b13      	ldr	r3, [pc, #76]	; (80134b0 <HAL_DAC_MspInit+0x90>)
 8013464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013466:	4a12      	ldr	r2, [pc, #72]	; (80134b0 <HAL_DAC_MspInit+0x90>)
 8013468:	f043 0301 	orr.w	r3, r3, #1
 801346c:	6313      	str	r3, [r2, #48]	; 0x30
 801346e:	4b10      	ldr	r3, [pc, #64]	; (80134b0 <HAL_DAC_MspInit+0x90>)
 8013470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013472:	f003 0301 	and.w	r3, r3, #1
 8013476:	60fb      	str	r3, [r7, #12]
 8013478:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Blower_Signal_Pin|Propotional_valve_signal_Pin;
 801347a:	2330      	movs	r3, #48	; 0x30
 801347c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801347e:	2303      	movs	r3, #3
 8013480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013482:	2300      	movs	r3, #0
 8013484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013486:	f107 0314 	add.w	r3, r7, #20
 801348a:	4619      	mov	r1, r3
 801348c:	4809      	ldr	r0, [pc, #36]	; (80134b4 <HAL_DAC_MspInit+0x94>)
 801348e:	f001 fe09 	bl	80150a4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8013492:	2200      	movs	r2, #0
 8013494:	210f      	movs	r1, #15
 8013496:	2036      	movs	r0, #54	; 0x36
 8013498:	f001 f8a6 	bl	80145e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801349c:	2036      	movs	r0, #54	; 0x36
 801349e:	f001 f8bf 	bl	8014620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80134a2:	bf00      	nop
 80134a4:	3728      	adds	r7, #40	; 0x28
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	40007400 	.word	0x40007400
 80134b0:	40023800 	.word	0x40023800
 80134b4:	40020000 	.word	0x40020000

080134b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b08c      	sub	sp, #48	; 0x30
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80134c0:	f107 031c 	add.w	r3, r7, #28
 80134c4:	2200      	movs	r2, #0
 80134c6:	601a      	str	r2, [r3, #0]
 80134c8:	605a      	str	r2, [r3, #4]
 80134ca:	609a      	str	r2, [r3, #8]
 80134cc:	60da      	str	r2, [r3, #12]
 80134ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	4a42      	ldr	r2, [pc, #264]	; (80135e0 <HAL_I2C_MspInit+0x128>)
 80134d6:	4293      	cmp	r3, r2
 80134d8:	d12d      	bne.n	8013536 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80134da:	2300      	movs	r3, #0
 80134dc:	61bb      	str	r3, [r7, #24]
 80134de:	4b41      	ldr	r3, [pc, #260]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 80134e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134e2:	4a40      	ldr	r2, [pc, #256]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 80134e4:	f043 0302 	orr.w	r3, r3, #2
 80134e8:	6313      	str	r3, [r2, #48]	; 0x30
 80134ea:	4b3e      	ldr	r3, [pc, #248]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 80134ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134ee:	f003 0302 	and.w	r3, r3, #2
 80134f2:	61bb      	str	r3, [r7, #24]
 80134f4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ADS1115_SCL_Pin|ADS1115_SDA_Pin;
 80134f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80134fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80134fc:	2312      	movs	r3, #18
 80134fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013500:	2300      	movs	r3, #0
 8013502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013504:	2303      	movs	r3, #3
 8013506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013508:	2304      	movs	r3, #4
 801350a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801350c:	f107 031c 	add.w	r3, r7, #28
 8013510:	4619      	mov	r1, r3
 8013512:	4835      	ldr	r0, [pc, #212]	; (80135e8 <HAL_I2C_MspInit+0x130>)
 8013514:	f001 fdc6 	bl	80150a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8013518:	2300      	movs	r3, #0
 801351a:	617b      	str	r3, [r7, #20]
 801351c:	4b31      	ldr	r3, [pc, #196]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 801351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013520:	4a30      	ldr	r2, [pc, #192]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 8013522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013526:	6413      	str	r3, [r2, #64]	; 0x40
 8013528:	4b2e      	ldr	r3, [pc, #184]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 801352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801352c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013530:	617b      	str	r3, [r7, #20]
 8013532:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8013534:	e050      	b.n	80135d8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	4a2c      	ldr	r2, [pc, #176]	; (80135ec <HAL_I2C_MspInit+0x134>)
 801353c:	4293      	cmp	r3, r2
 801353e:	d14b      	bne.n	80135d8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013540:	2300      	movs	r3, #0
 8013542:	613b      	str	r3, [r7, #16]
 8013544:	4b27      	ldr	r3, [pc, #156]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 8013546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013548:	4a26      	ldr	r2, [pc, #152]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 801354a:	f043 0304 	orr.w	r3, r3, #4
 801354e:	6313      	str	r3, [r2, #48]	; 0x30
 8013550:	4b24      	ldr	r3, [pc, #144]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 8013552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013554:	f003 0304 	and.w	r3, r3, #4
 8013558:	613b      	str	r3, [r7, #16]
 801355a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801355c:	2300      	movs	r3, #0
 801355e:	60fb      	str	r3, [r7, #12]
 8013560:	4b20      	ldr	r3, [pc, #128]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 8013562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013564:	4a1f      	ldr	r2, [pc, #124]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 8013566:	f043 0301 	orr.w	r3, r3, #1
 801356a:	6313      	str	r3, [r2, #48]	; 0x30
 801356c:	4b1d      	ldr	r3, [pc, #116]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 801356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013570:	f003 0301 	and.w	r3, r3, #1
 8013574:	60fb      	str	r3, [r7, #12]
 8013576:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8013578:	f44f 7300 	mov.w	r3, #512	; 0x200
 801357c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801357e:	2312      	movs	r3, #18
 8013580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013582:	2300      	movs	r3, #0
 8013584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013586:	2303      	movs	r3, #3
 8013588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801358a:	2304      	movs	r3, #4
 801358c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801358e:	f107 031c 	add.w	r3, r7, #28
 8013592:	4619      	mov	r1, r3
 8013594:	4816      	ldr	r0, [pc, #88]	; (80135f0 <HAL_I2C_MspInit+0x138>)
 8013596:	f001 fd85 	bl	80150a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 801359a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801359e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80135a0:	2312      	movs	r3, #18
 80135a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135a4:	2300      	movs	r3, #0
 80135a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80135a8:	2303      	movs	r3, #3
 80135aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80135ac:	2304      	movs	r3, #4
 80135ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80135b0:	f107 031c 	add.w	r3, r7, #28
 80135b4:	4619      	mov	r1, r3
 80135b6:	480f      	ldr	r0, [pc, #60]	; (80135f4 <HAL_I2C_MspInit+0x13c>)
 80135b8:	f001 fd74 	bl	80150a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80135bc:	2300      	movs	r3, #0
 80135be:	60bb      	str	r3, [r7, #8]
 80135c0:	4b08      	ldr	r3, [pc, #32]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 80135c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135c4:	4a07      	ldr	r2, [pc, #28]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 80135c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80135ca:	6413      	str	r3, [r2, #64]	; 0x40
 80135cc:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <HAL_I2C_MspInit+0x12c>)
 80135ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80135d4:	60bb      	str	r3, [r7, #8]
 80135d6:	68bb      	ldr	r3, [r7, #8]
}
 80135d8:	bf00      	nop
 80135da:	3730      	adds	r7, #48	; 0x30
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	40005800 	.word	0x40005800
 80135e4:	40023800 	.word	0x40023800
 80135e8:	40020400 	.word	0x40020400
 80135ec:	40005c00 	.word	0x40005c00
 80135f0:	40020800 	.word	0x40020800
 80135f4:	40020000 	.word	0x40020000

080135f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b08c      	sub	sp, #48	; 0x30
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013600:	f107 031c 	add.w	r3, r7, #28
 8013604:	2200      	movs	r2, #0
 8013606:	601a      	str	r2, [r3, #0]
 8013608:	605a      	str	r2, [r3, #4]
 801360a:	609a      	str	r2, [r3, #8]
 801360c:	60da      	str	r2, [r3, #12]
 801360e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	4a49      	ldr	r2, [pc, #292]	; (801373c <HAL_TIM_Base_MspInit+0x144>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d134      	bne.n	8013684 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 801361a:	2300      	movs	r3, #0
 801361c:	61bb      	str	r3, [r7, #24]
 801361e:	4b48      	ldr	r3, [pc, #288]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 8013620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013622:	4a47      	ldr	r2, [pc, #284]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 8013624:	f043 0302 	orr.w	r3, r3, #2
 8013628:	6413      	str	r3, [r2, #64]	; 0x40
 801362a:	4b45      	ldr	r3, [pc, #276]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 801362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801362e:	f003 0302 	and.w	r3, r3, #2
 8013632:	61bb      	str	r3, [r7, #24]
 8013634:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013636:	2300      	movs	r3, #0
 8013638:	617b      	str	r3, [r7, #20]
 801363a:	4b41      	ldr	r3, [pc, #260]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 801363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801363e:	4a40      	ldr	r2, [pc, #256]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 8013640:	f043 0301 	orr.w	r3, r3, #1
 8013644:	6313      	str	r3, [r2, #48]	; 0x30
 8013646:	4b3e      	ldr	r3, [pc, #248]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 8013648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801364a:	f003 0301 	and.w	r3, r3, #1
 801364e:	617b      	str	r3, [r7, #20]
 8013650:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8013652:	2340      	movs	r3, #64	; 0x40
 8013654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013656:	2302      	movs	r3, #2
 8013658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801365a:	2300      	movs	r3, #0
 801365c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801365e:	2300      	movs	r3, #0
 8013660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013662:	2302      	movs	r3, #2
 8013664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013666:	f107 031c 	add.w	r3, r7, #28
 801366a:	4619      	mov	r1, r3
 801366c:	4835      	ldr	r0, [pc, #212]	; (8013744 <HAL_TIM_Base_MspInit+0x14c>)
 801366e:	f001 fd19 	bl	80150a4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8013672:	2200      	movs	r2, #0
 8013674:	2105      	movs	r1, #5
 8013676:	201d      	movs	r0, #29
 8013678:	f000 ffb6 	bl	80145e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 801367c:	201d      	movs	r0, #29
 801367e:	f000 ffcf 	bl	8014620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8013682:	e056      	b.n	8013732 <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM4)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	4a2f      	ldr	r2, [pc, #188]	; (8013748 <HAL_TIM_Base_MspInit+0x150>)
 801368a:	4293      	cmp	r3, r2
 801368c:	d13e      	bne.n	801370c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 801368e:	2300      	movs	r3, #0
 8013690:	613b      	str	r3, [r7, #16]
 8013692:	4b2b      	ldr	r3, [pc, #172]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 8013694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013696:	4a2a      	ldr	r2, [pc, #168]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 8013698:	f043 0304 	orr.w	r3, r3, #4
 801369c:	6413      	str	r3, [r2, #64]	; 0x40
 801369e:	4b28      	ldr	r3, [pc, #160]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 80136a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a2:	f003 0304 	and.w	r3, r3, #4
 80136a6:	613b      	str	r3, [r7, #16]
 80136a8:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80136aa:	4b28      	ldr	r3, [pc, #160]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136ac:	4a28      	ldr	r2, [pc, #160]	; (8013750 <HAL_TIM_Base_MspInit+0x158>)
 80136ae:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80136b0:	4b26      	ldr	r3, [pc, #152]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80136b6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80136b8:	4b24      	ldr	r3, [pc, #144]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136ba:	2240      	movs	r2, #64	; 0x40
 80136bc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80136be:	4b23      	ldr	r3, [pc, #140]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136c0:	2200      	movs	r2, #0
 80136c2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80136c4:	4b21      	ldr	r3, [pc, #132]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80136ca:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80136cc:	4b1f      	ldr	r3, [pc, #124]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80136d2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80136d4:	4b1d      	ldr	r3, [pc, #116]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80136da:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80136dc:	4b1b      	ldr	r3, [pc, #108]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136de:	2200      	movs	r2, #0
 80136e0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80136e2:	4b1a      	ldr	r3, [pc, #104]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136e4:	2200      	movs	r2, #0
 80136e6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80136e8:	4b18      	ldr	r3, [pc, #96]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136ea:	2200      	movs	r2, #0
 80136ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80136ee:	4817      	ldr	r0, [pc, #92]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 80136f0:	f001 f8d6 	bl	80148a0 <HAL_DMA_Init>
 80136f4:	4603      	mov	r3, r0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d001      	beq.n	80136fe <HAL_TIM_Base_MspInit+0x106>
      Error_Handler();
 80136fa:	f7ff fdcb 	bl	8013294 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	4a12      	ldr	r2, [pc, #72]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 8013702:	62da      	str	r2, [r3, #44]	; 0x2c
 8013704:	4a11      	ldr	r2, [pc, #68]	; (801374c <HAL_TIM_Base_MspInit+0x154>)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6393      	str	r3, [r2, #56]	; 0x38
}
 801370a:	e012      	b.n	8013732 <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM12)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	4a10      	ldr	r2, [pc, #64]	; (8013754 <HAL_TIM_Base_MspInit+0x15c>)
 8013712:	4293      	cmp	r3, r2
 8013714:	d10d      	bne.n	8013732 <HAL_TIM_Base_MspInit+0x13a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8013716:	2300      	movs	r3, #0
 8013718:	60fb      	str	r3, [r7, #12]
 801371a:	4b09      	ldr	r3, [pc, #36]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 801371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801371e:	4a08      	ldr	r2, [pc, #32]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 8013720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013724:	6413      	str	r3, [r2, #64]	; 0x40
 8013726:	4b06      	ldr	r3, [pc, #24]	; (8013740 <HAL_TIM_Base_MspInit+0x148>)
 8013728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801372e:	60fb      	str	r3, [r7, #12]
 8013730:	68fb      	ldr	r3, [r7, #12]
}
 8013732:	bf00      	nop
 8013734:	3730      	adds	r7, #48	; 0x30
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}
 801373a:	bf00      	nop
 801373c:	40000400 	.word	0x40000400
 8013740:	40023800 	.word	0x40023800
 8013744:	40020000 	.word	0x40020000
 8013748:	40000800 	.word	0x40000800
 801374c:	200149c8 	.word	0x200149c8
 8013750:	400260b8 	.word	0x400260b8
 8013754:	40001800 	.word	0x40001800

08013758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b08a      	sub	sp, #40	; 0x28
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013760:	f107 0314 	add.w	r3, r7, #20
 8013764:	2200      	movs	r2, #0
 8013766:	601a      	str	r2, [r3, #0]
 8013768:	605a      	str	r2, [r3, #4]
 801376a:	609a      	str	r2, [r3, #8]
 801376c:	60da      	str	r2, [r3, #12]
 801376e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	4a25      	ldr	r2, [pc, #148]	; (801380c <HAL_TIM_MspPostInit+0xb4>)
 8013776:	4293      	cmp	r3, r2
 8013778:	d11f      	bne.n	80137ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801377a:	2300      	movs	r3, #0
 801377c:	613b      	str	r3, [r7, #16]
 801377e:	4b24      	ldr	r3, [pc, #144]	; (8013810 <HAL_TIM_MspPostInit+0xb8>)
 8013780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013782:	4a23      	ldr	r2, [pc, #140]	; (8013810 <HAL_TIM_MspPostInit+0xb8>)
 8013784:	f043 0302 	orr.w	r3, r3, #2
 8013788:	6313      	str	r3, [r2, #48]	; 0x30
 801378a:	4b21      	ldr	r3, [pc, #132]	; (8013810 <HAL_TIM_MspPostInit+0xb8>)
 801378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801378e:	f003 0302 	and.w	r3, r3, #2
 8013792:	613b      	str	r3, [r7, #16]
 8013794:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8013796:	f44f 7380 	mov.w	r3, #256	; 0x100
 801379a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801379c:	2302      	movs	r3, #2
 801379e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137a0:	2300      	movs	r3, #0
 80137a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80137a4:	2300      	movs	r3, #0
 80137a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80137a8:	2302      	movs	r3, #2
 80137aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80137ac:	f107 0314 	add.w	r3, r7, #20
 80137b0:	4619      	mov	r1, r3
 80137b2:	4818      	ldr	r0, [pc, #96]	; (8013814 <HAL_TIM_MspPostInit+0xbc>)
 80137b4:	f001 fc76 	bl	80150a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80137b8:	e023      	b.n	8013802 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	4a16      	ldr	r2, [pc, #88]	; (8013818 <HAL_TIM_MspPostInit+0xc0>)
 80137c0:	4293      	cmp	r3, r2
 80137c2:	d11e      	bne.n	8013802 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80137c4:	2300      	movs	r3, #0
 80137c6:	60fb      	str	r3, [r7, #12]
 80137c8:	4b11      	ldr	r3, [pc, #68]	; (8013810 <HAL_TIM_MspPostInit+0xb8>)
 80137ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137cc:	4a10      	ldr	r2, [pc, #64]	; (8013810 <HAL_TIM_MspPostInit+0xb8>)
 80137ce:	f043 0302 	orr.w	r3, r3, #2
 80137d2:	6313      	str	r3, [r2, #48]	; 0x30
 80137d4:	4b0e      	ldr	r3, [pc, #56]	; (8013810 <HAL_TIM_MspPostInit+0xb8>)
 80137d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137d8:	f003 0302 	and.w	r3, r3, #2
 80137dc:	60fb      	str	r3, [r7, #12]
 80137de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Motor_Signal_Pin;
 80137e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80137e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80137e6:	2302      	movs	r3, #2
 80137e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137ea:	2300      	movs	r3, #0
 80137ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80137ee:	2300      	movs	r3, #0
 80137f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80137f2:	2309      	movs	r3, #9
 80137f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_Motor_Signal_GPIO_Port, &GPIO_InitStruct);
 80137f6:	f107 0314 	add.w	r3, r7, #20
 80137fa:	4619      	mov	r1, r3
 80137fc:	4805      	ldr	r0, [pc, #20]	; (8013814 <HAL_TIM_MspPostInit+0xbc>)
 80137fe:	f001 fc51 	bl	80150a4 <HAL_GPIO_Init>
}
 8013802:	bf00      	nop
 8013804:	3728      	adds	r7, #40	; 0x28
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}
 801380a:	bf00      	nop
 801380c:	40000800 	.word	0x40000800
 8013810:	40023800 	.word	0x40023800
 8013814:	40020400 	.word	0x40020400
 8013818:	40001800 	.word	0x40001800

0801381c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b08c      	sub	sp, #48	; 0x30
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013824:	f107 031c 	add.w	r3, r7, #28
 8013828:	2200      	movs	r2, #0
 801382a:	601a      	str	r2, [r3, #0]
 801382c:	605a      	str	r2, [r3, #4]
 801382e:	609a      	str	r2, [r3, #8]
 8013830:	60da      	str	r2, [r3, #12]
 8013832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	4a49      	ldr	r2, [pc, #292]	; (8013960 <HAL_UART_MspInit+0x144>)
 801383a:	4293      	cmp	r3, r2
 801383c:	d153      	bne.n	80138e6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 801383e:	2300      	movs	r3, #0
 8013840:	61bb      	str	r3, [r7, #24]
 8013842:	4b48      	ldr	r3, [pc, #288]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013846:	4a47      	ldr	r2, [pc, #284]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801384c:	6413      	str	r3, [r2, #64]	; 0x40
 801384e:	4b45      	ldr	r3, [pc, #276]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013856:	61bb      	str	r3, [r7, #24]
 8013858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801385a:	2300      	movs	r3, #0
 801385c:	617b      	str	r3, [r7, #20]
 801385e:	4b41      	ldr	r3, [pc, #260]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013862:	4a40      	ldr	r2, [pc, #256]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013864:	f043 0304 	orr.w	r3, r3, #4
 8013868:	6313      	str	r3, [r2, #48]	; 0x30
 801386a:	4b3e      	ldr	r3, [pc, #248]	; (8013964 <HAL_UART_MspInit+0x148>)
 801386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801386e:	f003 0304 	and.w	r3, r3, #4
 8013872:	617b      	str	r3, [r7, #20]
 8013874:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013876:	2300      	movs	r3, #0
 8013878:	613b      	str	r3, [r7, #16]
 801387a:	4b3a      	ldr	r3, [pc, #232]	; (8013964 <HAL_UART_MspInit+0x148>)
 801387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801387e:	4a39      	ldr	r2, [pc, #228]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013880:	f043 0308 	orr.w	r3, r3, #8
 8013884:	6313      	str	r3, [r2, #48]	; 0x30
 8013886:	4b37      	ldr	r3, [pc, #220]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801388a:	f003 0308 	and.w	r3, r3, #8
 801388e:	613b      	str	r3, [r7, #16]
 8013890:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8013892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013898:	2302      	movs	r3, #2
 801389a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801389c:	2300      	movs	r3, #0
 801389e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138a0:	2303      	movs	r3, #3
 80138a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80138a4:	2308      	movs	r3, #8
 80138a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80138a8:	f107 031c 	add.w	r3, r7, #28
 80138ac:	4619      	mov	r1, r3
 80138ae:	482e      	ldr	r0, [pc, #184]	; (8013968 <HAL_UART_MspInit+0x14c>)
 80138b0:	f001 fbf8 	bl	80150a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80138b4:	2304      	movs	r3, #4
 80138b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138b8:	2302      	movs	r3, #2
 80138ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138bc:	2300      	movs	r3, #0
 80138be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138c0:	2303      	movs	r3, #3
 80138c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80138c4:	2308      	movs	r3, #8
 80138c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80138c8:	f107 031c 	add.w	r3, r7, #28
 80138cc:	4619      	mov	r1, r3
 80138ce:	4827      	ldr	r0, [pc, #156]	; (801396c <HAL_UART_MspInit+0x150>)
 80138d0:	f001 fbe8 	bl	80150a4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80138d4:	2200      	movs	r2, #0
 80138d6:	2105      	movs	r1, #5
 80138d8:	2035      	movs	r0, #53	; 0x35
 80138da:	f000 fe85 	bl	80145e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80138de:	2035      	movs	r0, #53	; 0x35
 80138e0:	f000 fe9e 	bl	8014620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80138e4:	e038      	b.n	8013958 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	4a21      	ldr	r2, [pc, #132]	; (8013970 <HAL_UART_MspInit+0x154>)
 80138ec:	4293      	cmp	r3, r2
 80138ee:	d133      	bne.n	8013958 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80138f0:	2300      	movs	r3, #0
 80138f2:	60fb      	str	r3, [r7, #12]
 80138f4:	4b1b      	ldr	r3, [pc, #108]	; (8013964 <HAL_UART_MspInit+0x148>)
 80138f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138f8:	4a1a      	ldr	r2, [pc, #104]	; (8013964 <HAL_UART_MspInit+0x148>)
 80138fa:	f043 0320 	orr.w	r3, r3, #32
 80138fe:	6453      	str	r3, [r2, #68]	; 0x44
 8013900:	4b18      	ldr	r3, [pc, #96]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013904:	f003 0320 	and.w	r3, r3, #32
 8013908:	60fb      	str	r3, [r7, #12]
 801390a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801390c:	2300      	movs	r3, #0
 801390e:	60bb      	str	r3, [r7, #8]
 8013910:	4b14      	ldr	r3, [pc, #80]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013914:	4a13      	ldr	r2, [pc, #76]	; (8013964 <HAL_UART_MspInit+0x148>)
 8013916:	f043 0304 	orr.w	r3, r3, #4
 801391a:	6313      	str	r3, [r2, #48]	; 0x30
 801391c:	4b11      	ldr	r3, [pc, #68]	; (8013964 <HAL_UART_MspInit+0x148>)
 801391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013920:	f003 0304 	and.w	r3, r3, #4
 8013924:	60bb      	str	r3, [r7, #8]
 8013926:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Bluetooth_Tx_Pin|Blutooth_Rx_Pin;
 8013928:	23c0      	movs	r3, #192	; 0xc0
 801392a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801392c:	2302      	movs	r3, #2
 801392e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013930:	2300      	movs	r3, #0
 8013932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013934:	2303      	movs	r3, #3
 8013936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8013938:	2308      	movs	r3, #8
 801393a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801393c:	f107 031c 	add.w	r3, r7, #28
 8013940:	4619      	mov	r1, r3
 8013942:	4809      	ldr	r0, [pc, #36]	; (8013968 <HAL_UART_MspInit+0x14c>)
 8013944:	f001 fbae 	bl	80150a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8013948:	2200      	movs	r2, #0
 801394a:	2105      	movs	r1, #5
 801394c:	2047      	movs	r0, #71	; 0x47
 801394e:	f000 fe4b 	bl	80145e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8013952:	2047      	movs	r0, #71	; 0x47
 8013954:	f000 fe64 	bl	8014620 <HAL_NVIC_EnableIRQ>
}
 8013958:	bf00      	nop
 801395a:	3730      	adds	r7, #48	; 0x30
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}
 8013960:	40005000 	.word	0x40005000
 8013964:	40023800 	.word	0x40023800
 8013968:	40020800 	.word	0x40020800
 801396c:	40020c00 	.word	0x40020c00
 8013970:	40011400 	.word	0x40011400

08013974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b08c      	sub	sp, #48	; 0x30
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801397c:	2300      	movs	r3, #0
 801397e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8013980:	2300      	movs	r3, #0
 8013982:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8013984:	2200      	movs	r2, #0
 8013986:	6879      	ldr	r1, [r7, #4]
 8013988:	2036      	movs	r0, #54	; 0x36
 801398a:	f000 fe2d 	bl	80145e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801398e:	2036      	movs	r0, #54	; 0x36
 8013990:	f000 fe46 	bl	8014620 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8013994:	2300      	movs	r3, #0
 8013996:	60fb      	str	r3, [r7, #12]
 8013998:	4b1f      	ldr	r3, [pc, #124]	; (8013a18 <HAL_InitTick+0xa4>)
 801399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801399c:	4a1e      	ldr	r2, [pc, #120]	; (8013a18 <HAL_InitTick+0xa4>)
 801399e:	f043 0310 	orr.w	r3, r3, #16
 80139a2:	6413      	str	r3, [r2, #64]	; 0x40
 80139a4:	4b1c      	ldr	r3, [pc, #112]	; (8013a18 <HAL_InitTick+0xa4>)
 80139a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139a8:	f003 0310 	and.w	r3, r3, #16
 80139ac:	60fb      	str	r3, [r7, #12]
 80139ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80139b0:	f107 0210 	add.w	r2, r7, #16
 80139b4:	f107 0314 	add.w	r3, r7, #20
 80139b8:	4611      	mov	r1, r2
 80139ba:	4618      	mov	r0, r3
 80139bc:	f004 faee 	bl	8017f9c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80139c0:	f004 fac4 	bl	8017f4c <HAL_RCC_GetPCLK1Freq>
 80139c4:	4603      	mov	r3, r0
 80139c6:	005b      	lsls	r3, r3, #1
 80139c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80139ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139cc:	4a13      	ldr	r2, [pc, #76]	; (8013a1c <HAL_InitTick+0xa8>)
 80139ce:	fba2 2303 	umull	r2, r3, r2, r3
 80139d2:	0c9b      	lsrs	r3, r3, #18
 80139d4:	3b01      	subs	r3, #1
 80139d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80139d8:	4b11      	ldr	r3, [pc, #68]	; (8013a20 <HAL_InitTick+0xac>)
 80139da:	4a12      	ldr	r2, [pc, #72]	; (8013a24 <HAL_InitTick+0xb0>)
 80139dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80139de:	4b10      	ldr	r3, [pc, #64]	; (8013a20 <HAL_InitTick+0xac>)
 80139e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80139e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80139e6:	4a0e      	ldr	r2, [pc, #56]	; (8013a20 <HAL_InitTick+0xac>)
 80139e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80139ec:	4b0c      	ldr	r3, [pc, #48]	; (8013a20 <HAL_InitTick+0xac>)
 80139ee:	2200      	movs	r2, #0
 80139f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80139f2:	4b0b      	ldr	r3, [pc, #44]	; (8013a20 <HAL_InitTick+0xac>)
 80139f4:	2200      	movs	r2, #0
 80139f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80139f8:	4809      	ldr	r0, [pc, #36]	; (8013a20 <HAL_InitTick+0xac>)
 80139fa:	f004 fb01 	bl	8018000 <HAL_TIM_Base_Init>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d104      	bne.n	8013a0e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8013a04:	4806      	ldr	r0, [pc, #24]	; (8013a20 <HAL_InitTick+0xac>)
 8013a06:	f004 fb4b 	bl	80180a0 <HAL_TIM_Base_Start_IT>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	e000      	b.n	8013a10 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8013a0e:	2301      	movs	r3, #1
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3730      	adds	r7, #48	; 0x30
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	40023800 	.word	0x40023800
 8013a1c:	431bde83 	.word	0x431bde83
 8013a20:	20014a70 	.word	0x20014a70
 8013a24:	40001000 	.word	0x40001000

08013a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013a28:	b480      	push	{r7}
 8013a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8013a2c:	e7fe      	b.n	8013a2c <NMI_Handler+0x4>

08013a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013a2e:	b480      	push	{r7}
 8013a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013a32:	e7fe      	b.n	8013a32 <HardFault_Handler+0x4>

08013a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013a34:	b480      	push	{r7}
 8013a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013a38:	e7fe      	b.n	8013a38 <MemManage_Handler+0x4>

08013a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013a3a:	b480      	push	{r7}
 8013a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013a3e:	e7fe      	b.n	8013a3e <BusFault_Handler+0x4>

08013a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013a40:	b480      	push	{r7}
 8013a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013a44:	e7fe      	b.n	8013a44 <UsageFault_Handler+0x4>

08013a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013a46:	b480      	push	{r7}
 8013a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013a4a:	bf00      	nop
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr

08013a54 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(O2_Flow_Sensor_Pin);
 8013a58:	2004      	movs	r0, #4
 8013a5a:	f001 fcf1 	bl	8015440 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8013a5e:	bf00      	nop
 8013a60:	bd80      	pop	{r7, pc}

08013a62 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8013a62:	b580      	push	{r7, lr}
 8013a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bluetooth_Tx_Pin);
 8013a66:	2040      	movs	r0, #64	; 0x40
 8013a68:	f001 fcea 	bl	8015440 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8013a6c:	bf00      	nop
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8013a74:	4802      	ldr	r0, [pc, #8]	; (8013a80 <TIM3_IRQHandler+0x10>)
 8013a76:	f005 f96f 	bl	8018d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8013a7a:	bf00      	nop
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	20013cac 	.word	0x20013cac

08013a84 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8013a88:	4802      	ldr	r0, [pc, #8]	; (8013a94 <DMA1_Stream7_IRQHandler+0x10>)
 8013a8a:	f001 f8a1 	bl	8014bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8013a8e:	bf00      	nop
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop
 8013a94:	200149c8 	.word	0x200149c8

08013a98 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8013a9c:	4802      	ldr	r0, [pc, #8]	; (8013aa8 <UART5_IRQHandler+0x10>)
 8013a9e:	f006 fbe5 	bl	801a26c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8013aa2:	bf00      	nop
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	20013d4c 	.word	0x20013d4c

08013aac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8013ab0:	4b06      	ldr	r3, [pc, #24]	; (8013acc <TIM6_DAC_IRQHandler+0x20>)
 8013ab2:	791b      	ldrb	r3, [r3, #4]
 8013ab4:	b2db      	uxtb	r3, r3
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d002      	beq.n	8013ac0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8013aba:	4804      	ldr	r0, [pc, #16]	; (8013acc <TIM6_DAC_IRQHandler+0x20>)
 8013abc:	f000 fe32 	bl	8014724 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8013ac0:	4803      	ldr	r0, [pc, #12]	; (8013ad0 <TIM6_DAC_IRQHandler+0x24>)
 8013ac2:	f005 f949 	bl	8018d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8013ac6:	bf00      	nop
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop
 8013acc:	20014954 	.word	0x20014954
 8013ad0:	20014a70 	.word	0x20014a70

08013ad4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8013ad8:	4802      	ldr	r0, [pc, #8]	; (8013ae4 <DMA2_Stream0_IRQHandler+0x10>)
 8013ada:	f001 f879 	bl	8014bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8013ade:	bf00      	nop
 8013ae0:	bd80      	pop	{r7, pc}
 8013ae2:	bf00      	nop
 8013ae4:	20014968 	.word	0x20014968

08013ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8013aec:	4802      	ldr	r0, [pc, #8]	; (8013af8 <OTG_FS_IRQHandler+0x10>)
 8013aee:	f002 fdb0 	bl	8016652 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8013af2:	bf00      	nop
 8013af4:	bd80      	pop	{r7, pc}
 8013af6:	bf00      	nop
 8013af8:	20015fcc 	.word	0x20015fcc

08013afc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8013b00:	4802      	ldr	r0, [pc, #8]	; (8013b0c <USART6_IRQHandler+0x10>)
 8013b02:	f006 fbb3 	bl	801a26c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8013b06:	bf00      	nop
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	20014104 	.word	0x20014104

08013b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013b10:	b480      	push	{r7}
 8013b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013b14:	4b06      	ldr	r3, [pc, #24]	; (8013b30 <SystemInit+0x20>)
 8013b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b1a:	4a05      	ldr	r2, [pc, #20]	; (8013b30 <SystemInit+0x20>)
 8013b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013b24:	bf00      	nop
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr
 8013b2e:	bf00      	nop
 8013b30:	e000ed00 	.word	0xe000ed00

08013b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8013b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8013b38:	480d      	ldr	r0, [pc, #52]	; (8013b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8013b3a:	490e      	ldr	r1, [pc, #56]	; (8013b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8013b3c:	4a0e      	ldr	r2, [pc, #56]	; (8013b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8013b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013b40:	e002      	b.n	8013b48 <LoopCopyDataInit>

08013b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013b46:	3304      	adds	r3, #4

08013b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013b4c:	d3f9      	bcc.n	8013b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013b4e:	4a0b      	ldr	r2, [pc, #44]	; (8013b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8013b50:	4c0b      	ldr	r4, [pc, #44]	; (8013b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8013b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013b54:	e001      	b.n	8013b5a <LoopFillZerobss>

08013b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013b58:	3204      	adds	r2, #4

08013b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013b5c:	d3fb      	bcc.n	8013b56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8013b5e:	f7ff ffd7 	bl	8013b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013b62:	f00d ffdb 	bl	8021b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013b66:	f7fe ff01 	bl	801296c <main>
  bx  lr    
 8013b6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8013b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8013b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013b74:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8013b78:	08023210 	.word	0x08023210
  ldr r2, =_sbss
 8013b7c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8013b80:	200163d4 	.word	0x200163d4

08013b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013b84:	e7fe      	b.n	8013b84 <ADC_IRQHandler>
	...

08013b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8013b8c:	4b0e      	ldr	r3, [pc, #56]	; (8013bc8 <HAL_Init+0x40>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	4a0d      	ldr	r2, [pc, #52]	; (8013bc8 <HAL_Init+0x40>)
 8013b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8013b98:	4b0b      	ldr	r3, [pc, #44]	; (8013bc8 <HAL_Init+0x40>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	4a0a      	ldr	r2, [pc, #40]	; (8013bc8 <HAL_Init+0x40>)
 8013b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013ba4:	4b08      	ldr	r3, [pc, #32]	; (8013bc8 <HAL_Init+0x40>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	4a07      	ldr	r2, [pc, #28]	; (8013bc8 <HAL_Init+0x40>)
 8013baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013bb0:	2003      	movs	r0, #3
 8013bb2:	f000 fd0e 	bl	80145d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8013bb6:	200f      	movs	r0, #15
 8013bb8:	f7ff fedc 	bl	8013974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8013bbc:	f7ff fb70 	bl	80132a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8013bc0:	2300      	movs	r3, #0
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	bd80      	pop	{r7, pc}
 8013bc6:	bf00      	nop
 8013bc8:	40023c00 	.word	0x40023c00

08013bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013bcc:	b480      	push	{r7}
 8013bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013bd0:	4b06      	ldr	r3, [pc, #24]	; (8013bec <HAL_IncTick+0x20>)
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	461a      	mov	r2, r3
 8013bd6:	4b06      	ldr	r3, [pc, #24]	; (8013bf0 <HAL_IncTick+0x24>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	4413      	add	r3, r2
 8013bdc:	4a04      	ldr	r2, [pc, #16]	; (8013bf0 <HAL_IncTick+0x24>)
 8013bde:	6013      	str	r3, [r2, #0]
}
 8013be0:	bf00      	nop
 8013be2:	46bd      	mov	sp, r7
 8013be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be8:	4770      	bx	lr
 8013bea:	bf00      	nop
 8013bec:	20000024 	.word	0x20000024
 8013bf0:	20014ab8 	.word	0x20014ab8

08013bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013bf4:	b480      	push	{r7}
 8013bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8013bf8:	4b03      	ldr	r3, [pc, #12]	; (8013c08 <HAL_GetTick+0x14>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr
 8013c06:	bf00      	nop
 8013c08:	20014ab8 	.word	0x20014ab8

08013c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013c14:	f7ff ffee 	bl	8013bf4 <HAL_GetTick>
 8013c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c24:	d005      	beq.n	8013c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013c26:	4b0a      	ldr	r3, [pc, #40]	; (8013c50 <HAL_Delay+0x44>)
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	4413      	add	r3, r2
 8013c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013c32:	bf00      	nop
 8013c34:	f7ff ffde 	bl	8013bf4 <HAL_GetTick>
 8013c38:	4602      	mov	r2, r0
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	1ad3      	subs	r3, r2, r3
 8013c3e:	68fa      	ldr	r2, [r7, #12]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d8f7      	bhi.n	8013c34 <HAL_Delay+0x28>
  {
  }
}
 8013c44:	bf00      	nop
 8013c46:	bf00      	nop
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	20000024 	.word	0x20000024

08013c54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b084      	sub	sp, #16
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d101      	bne.n	8013c6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8013c66:	2301      	movs	r3, #1
 8013c68:	e033      	b.n	8013cd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d109      	bne.n	8013c86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f7ff fb40 	bl	80132f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2200      	movs	r2, #0
 8013c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c8a:	f003 0310 	and.w	r3, r3, #16
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d118      	bne.n	8013cc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8013c9a:	f023 0302 	bic.w	r3, r3, #2
 8013c9e:	f043 0202 	orr.w	r2, r3, #2
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f000 fa68 	bl	801417c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cb6:	f023 0303 	bic.w	r3, r3, #3
 8013cba:	f043 0201 	orr.w	r2, r3, #1
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	641a      	str	r2, [r3, #64]	; 0x40
 8013cc2:	e001      	b.n	8013cc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8013cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3710      	adds	r7, #16
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
	...

08013cdc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b086      	sub	sp, #24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013cf2:	2b01      	cmp	r3, #1
 8013cf4:	d101      	bne.n	8013cfa <HAL_ADC_Start_DMA+0x1e>
 8013cf6:	2302      	movs	r3, #2
 8013cf8:	e0e9      	b.n	8013ece <HAL_ADC_Start_DMA+0x1f2>
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	2201      	movs	r2, #1
 8013cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	689b      	ldr	r3, [r3, #8]
 8013d08:	f003 0301 	and.w	r3, r3, #1
 8013d0c:	2b01      	cmp	r3, #1
 8013d0e:	d018      	beq.n	8013d42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	689a      	ldr	r2, [r3, #8]
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f042 0201 	orr.w	r2, r2, #1
 8013d1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8013d20:	4b6d      	ldr	r3, [pc, #436]	; (8013ed8 <HAL_ADC_Start_DMA+0x1fc>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	4a6d      	ldr	r2, [pc, #436]	; (8013edc <HAL_ADC_Start_DMA+0x200>)
 8013d26:	fba2 2303 	umull	r2, r3, r2, r3
 8013d2a:	0c9a      	lsrs	r2, r3, #18
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	005b      	lsls	r3, r3, #1
 8013d30:	4413      	add	r3, r2
 8013d32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8013d34:	e002      	b.n	8013d3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	3b01      	subs	r3, #1
 8013d3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d1f9      	bne.n	8013d36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	689b      	ldr	r3, [r3, #8]
 8013d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013d50:	d107      	bne.n	8013d62 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	689a      	ldr	r2, [r3, #8]
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013d60:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	689b      	ldr	r3, [r3, #8]
 8013d68:	f003 0301 	and.w	r3, r3, #1
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	f040 80a1 	bne.w	8013eb4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8013d7a:	f023 0301 	bic.w	r3, r3, #1
 8013d7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d007      	beq.n	8013da4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8013d9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013db0:	d106      	bne.n	8013dc0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013db6:	f023 0206 	bic.w	r2, r3, #6
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	645a      	str	r2, [r3, #68]	; 0x44
 8013dbe:	e002      	b.n	8013dc6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8013dce:	4b44      	ldr	r3, [pc, #272]	; (8013ee0 <HAL_ADC_Start_DMA+0x204>)
 8013dd0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dd6:	4a43      	ldr	r2, [pc, #268]	; (8013ee4 <HAL_ADC_Start_DMA+0x208>)
 8013dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dde:	4a42      	ldr	r2, [pc, #264]	; (8013ee8 <HAL_ADC_Start_DMA+0x20c>)
 8013de0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013de6:	4a41      	ldr	r2, [pc, #260]	; (8013eec <HAL_ADC_Start_DMA+0x210>)
 8013de8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8013df2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	685a      	ldr	r2, [r3, #4]
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013e02:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	689a      	ldr	r2, [r3, #8]
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013e12:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	334c      	adds	r3, #76	; 0x4c
 8013e1e:	4619      	mov	r1, r3
 8013e20:	68ba      	ldr	r2, [r7, #8]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f000 fdea 	bl	80149fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	685b      	ldr	r3, [r3, #4]
 8013e2c:	f003 031f 	and.w	r3, r3, #31
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d12a      	bne.n	8013e8a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	4a2d      	ldr	r2, [pc, #180]	; (8013ef0 <HAL_ADC_Start_DMA+0x214>)
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	d015      	beq.n	8013e6a <HAL_ADC_Start_DMA+0x18e>
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	4a2c      	ldr	r2, [pc, #176]	; (8013ef4 <HAL_ADC_Start_DMA+0x218>)
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d105      	bne.n	8013e54 <HAL_ADC_Start_DMA+0x178>
 8013e48:	4b25      	ldr	r3, [pc, #148]	; (8013ee0 <HAL_ADC_Start_DMA+0x204>)
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	f003 031f 	and.w	r3, r3, #31
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d00a      	beq.n	8013e6a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	4a27      	ldr	r2, [pc, #156]	; (8013ef8 <HAL_ADC_Start_DMA+0x21c>)
 8013e5a:	4293      	cmp	r3, r2
 8013e5c:	d136      	bne.n	8013ecc <HAL_ADC_Start_DMA+0x1f0>
 8013e5e:	4b20      	ldr	r3, [pc, #128]	; (8013ee0 <HAL_ADC_Start_DMA+0x204>)
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	f003 0310 	and.w	r3, r3, #16
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d130      	bne.n	8013ecc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	689b      	ldr	r3, [r3, #8]
 8013e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d129      	bne.n	8013ecc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	689a      	ldr	r2, [r3, #8]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013e86:	609a      	str	r2, [r3, #8]
 8013e88:	e020      	b.n	8013ecc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	4a18      	ldr	r2, [pc, #96]	; (8013ef0 <HAL_ADC_Start_DMA+0x214>)
 8013e90:	4293      	cmp	r3, r2
 8013e92:	d11b      	bne.n	8013ecc <HAL_ADC_Start_DMA+0x1f0>
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	689b      	ldr	r3, [r3, #8]
 8013e9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d114      	bne.n	8013ecc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	689a      	ldr	r2, [r3, #8]
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013eb0:	609a      	str	r2, [r3, #8]
 8013eb2:	e00b      	b.n	8013ecc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eb8:	f043 0210 	orr.w	r2, r3, #16
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ec4:	f043 0201 	orr.w	r2, r3, #1
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8013ecc:	2300      	movs	r3, #0
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3718      	adds	r7, #24
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	2000001c 	.word	0x2000001c
 8013edc:	431bde83 	.word	0x431bde83
 8013ee0:	40012300 	.word	0x40012300
 8013ee4:	08014375 	.word	0x08014375
 8013ee8:	0801442f 	.word	0x0801442f
 8013eec:	0801444b 	.word	0x0801444b
 8013ef0:	40012000 	.word	0x40012000
 8013ef4:	40012100 	.word	0x40012100
 8013ef8:	40012200 	.word	0x40012200

08013efc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8013efc:	b480      	push	{r7}
 8013efe:	b083      	sub	sp, #12
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8013f04:	bf00      	nop
 8013f06:	370c      	adds	r7, #12
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr

08013f10 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8013f10:	b480      	push	{r7}
 8013f12:	b083      	sub	sp, #12
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8013f18:	bf00      	nop
 8013f1a:	370c      	adds	r7, #12
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f22:	4770      	bx	lr

08013f24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8013f24:	b480      	push	{r7}
 8013f26:	b083      	sub	sp, #12
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8013f2c:	bf00      	nop
 8013f2e:	370c      	adds	r7, #12
 8013f30:	46bd      	mov	sp, r7
 8013f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f36:	4770      	bx	lr

08013f38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b085      	sub	sp, #20
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8013f42:	2300      	movs	r3, #0
 8013f44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	d101      	bne.n	8013f54 <HAL_ADC_ConfigChannel+0x1c>
 8013f50:	2302      	movs	r3, #2
 8013f52:	e105      	b.n	8014160 <HAL_ADC_ConfigChannel+0x228>
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2201      	movs	r2, #1
 8013f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	2b09      	cmp	r3, #9
 8013f62:	d925      	bls.n	8013fb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	68d9      	ldr	r1, [r3, #12]
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	461a      	mov	r2, r3
 8013f72:	4613      	mov	r3, r2
 8013f74:	005b      	lsls	r3, r3, #1
 8013f76:	4413      	add	r3, r2
 8013f78:	3b1e      	subs	r3, #30
 8013f7a:	2207      	movs	r2, #7
 8013f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8013f80:	43da      	mvns	r2, r3
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	400a      	ands	r2, r1
 8013f88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	68d9      	ldr	r1, [r3, #12]
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	689a      	ldr	r2, [r3, #8]
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	005b      	lsls	r3, r3, #1
 8013fa0:	4403      	add	r3, r0
 8013fa2:	3b1e      	subs	r3, #30
 8013fa4:	409a      	lsls	r2, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	430a      	orrs	r2, r1
 8013fac:	60da      	str	r2, [r3, #12]
 8013fae:	e022      	b.n	8013ff6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	6919      	ldr	r1, [r3, #16]
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	005b      	lsls	r3, r3, #1
 8013fc2:	4413      	add	r3, r2
 8013fc4:	2207      	movs	r2, #7
 8013fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8013fca:	43da      	mvns	r2, r3
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	400a      	ands	r2, r1
 8013fd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	6919      	ldr	r1, [r3, #16]
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	689a      	ldr	r2, [r3, #8]
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	b29b      	uxth	r3, r3
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	005b      	lsls	r3, r3, #1
 8013fea:	4403      	add	r3, r0
 8013fec:	409a      	lsls	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	430a      	orrs	r2, r1
 8013ff4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	2b06      	cmp	r3, #6
 8013ffc:	d824      	bhi.n	8014048 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	685a      	ldr	r2, [r3, #4]
 8014008:	4613      	mov	r3, r2
 801400a:	009b      	lsls	r3, r3, #2
 801400c:	4413      	add	r3, r2
 801400e:	3b05      	subs	r3, #5
 8014010:	221f      	movs	r2, #31
 8014012:	fa02 f303 	lsl.w	r3, r2, r3
 8014016:	43da      	mvns	r2, r3
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	400a      	ands	r2, r1
 801401e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	b29b      	uxth	r3, r3
 801402c:	4618      	mov	r0, r3
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	685a      	ldr	r2, [r3, #4]
 8014032:	4613      	mov	r3, r2
 8014034:	009b      	lsls	r3, r3, #2
 8014036:	4413      	add	r3, r2
 8014038:	3b05      	subs	r3, #5
 801403a:	fa00 f203 	lsl.w	r2, r0, r3
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	430a      	orrs	r2, r1
 8014044:	635a      	str	r2, [r3, #52]	; 0x34
 8014046:	e04c      	b.n	80140e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	2b0c      	cmp	r3, #12
 801404e:	d824      	bhi.n	801409a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	685a      	ldr	r2, [r3, #4]
 801405a:	4613      	mov	r3, r2
 801405c:	009b      	lsls	r3, r3, #2
 801405e:	4413      	add	r3, r2
 8014060:	3b23      	subs	r3, #35	; 0x23
 8014062:	221f      	movs	r2, #31
 8014064:	fa02 f303 	lsl.w	r3, r2, r3
 8014068:	43da      	mvns	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	400a      	ands	r2, r1
 8014070:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	b29b      	uxth	r3, r3
 801407e:	4618      	mov	r0, r3
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	685a      	ldr	r2, [r3, #4]
 8014084:	4613      	mov	r3, r2
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	4413      	add	r3, r2
 801408a:	3b23      	subs	r3, #35	; 0x23
 801408c:	fa00 f203 	lsl.w	r2, r0, r3
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	430a      	orrs	r2, r1
 8014096:	631a      	str	r2, [r3, #48]	; 0x30
 8014098:	e023      	b.n	80140e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	685a      	ldr	r2, [r3, #4]
 80140a4:	4613      	mov	r3, r2
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	4413      	add	r3, r2
 80140aa:	3b41      	subs	r3, #65	; 0x41
 80140ac:	221f      	movs	r2, #31
 80140ae:	fa02 f303 	lsl.w	r3, r2, r3
 80140b2:	43da      	mvns	r2, r3
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	400a      	ands	r2, r1
 80140ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	4618      	mov	r0, r3
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	685a      	ldr	r2, [r3, #4]
 80140ce:	4613      	mov	r3, r2
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	4413      	add	r3, r2
 80140d4:	3b41      	subs	r3, #65	; 0x41
 80140d6:	fa00 f203 	lsl.w	r2, r0, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	430a      	orrs	r2, r1
 80140e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80140e2:	4b22      	ldr	r3, [pc, #136]	; (801416c <HAL_ADC_ConfigChannel+0x234>)
 80140e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	4a21      	ldr	r2, [pc, #132]	; (8014170 <HAL_ADC_ConfigChannel+0x238>)
 80140ec:	4293      	cmp	r3, r2
 80140ee:	d109      	bne.n	8014104 <HAL_ADC_ConfigChannel+0x1cc>
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2b12      	cmp	r3, #18
 80140f6:	d105      	bne.n	8014104 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	685b      	ldr	r3, [r3, #4]
 80140fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	4a19      	ldr	r2, [pc, #100]	; (8014170 <HAL_ADC_ConfigChannel+0x238>)
 801410a:	4293      	cmp	r3, r2
 801410c:	d123      	bne.n	8014156 <HAL_ADC_ConfigChannel+0x21e>
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2b10      	cmp	r3, #16
 8014114:	d003      	beq.n	801411e <HAL_ADC_ConfigChannel+0x1e6>
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2b11      	cmp	r3, #17
 801411c:	d11b      	bne.n	8014156 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2b10      	cmp	r3, #16
 8014130:	d111      	bne.n	8014156 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8014132:	4b10      	ldr	r3, [pc, #64]	; (8014174 <HAL_ADC_ConfigChannel+0x23c>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	4a10      	ldr	r2, [pc, #64]	; (8014178 <HAL_ADC_ConfigChannel+0x240>)
 8014138:	fba2 2303 	umull	r2, r3, r2, r3
 801413c:	0c9a      	lsrs	r2, r3, #18
 801413e:	4613      	mov	r3, r2
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	4413      	add	r3, r2
 8014144:	005b      	lsls	r3, r3, #1
 8014146:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8014148:	e002      	b.n	8014150 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	3b01      	subs	r3, #1
 801414e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d1f9      	bne.n	801414a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2200      	movs	r2, #0
 801415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801415e:	2300      	movs	r3, #0
}
 8014160:	4618      	mov	r0, r3
 8014162:	3714      	adds	r7, #20
 8014164:	46bd      	mov	sp, r7
 8014166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416a:	4770      	bx	lr
 801416c:	40012300 	.word	0x40012300
 8014170:	40012000 	.word	0x40012000
 8014174:	2000001c 	.word	0x2000001c
 8014178:	431bde83 	.word	0x431bde83

0801417c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801417c:	b480      	push	{r7}
 801417e:	b085      	sub	sp, #20
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8014184:	4b79      	ldr	r3, [pc, #484]	; (801436c <ADC_Init+0x1f0>)
 8014186:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	685a      	ldr	r2, [r3, #4]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	685b      	ldr	r3, [r3, #4]
 801419c:	431a      	orrs	r2, r3
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	685a      	ldr	r2, [r3, #4]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80141b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	6859      	ldr	r1, [r3, #4]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	691b      	ldr	r3, [r3, #16]
 80141bc:	021a      	lsls	r2, r3, #8
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	430a      	orrs	r2, r1
 80141c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	685a      	ldr	r2, [r3, #4]
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80141d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	6859      	ldr	r1, [r3, #4]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	689a      	ldr	r2, [r3, #8]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	430a      	orrs	r2, r1
 80141e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	689a      	ldr	r2, [r3, #8]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80141f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	6899      	ldr	r1, [r3, #8]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	68da      	ldr	r2, [r3, #12]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	430a      	orrs	r2, r1
 8014208:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801420e:	4a58      	ldr	r2, [pc, #352]	; (8014370 <ADC_Init+0x1f4>)
 8014210:	4293      	cmp	r3, r2
 8014212:	d022      	beq.n	801425a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	689a      	ldr	r2, [r3, #8]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8014222:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	6899      	ldr	r1, [r3, #8]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	430a      	orrs	r2, r1
 8014234:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	689a      	ldr	r2, [r3, #8]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8014244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	6899      	ldr	r1, [r3, #8]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	430a      	orrs	r2, r1
 8014256:	609a      	str	r2, [r3, #8]
 8014258:	e00f      	b.n	801427a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	689a      	ldr	r2, [r3, #8]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8014268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	689a      	ldr	r2, [r3, #8]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8014278:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	689a      	ldr	r2, [r3, #8]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	f022 0202 	bic.w	r2, r2, #2
 8014288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	6899      	ldr	r1, [r3, #8]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	7e1b      	ldrb	r3, [r3, #24]
 8014294:	005a      	lsls	r2, r3, #1
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	430a      	orrs	r2, r1
 801429c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d01b      	beq.n	80142e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	685a      	ldr	r2, [r3, #4]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80142b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	685a      	ldr	r2, [r3, #4]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80142c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	6859      	ldr	r1, [r3, #4]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142d2:	3b01      	subs	r3, #1
 80142d4:	035a      	lsls	r2, r3, #13
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	430a      	orrs	r2, r1
 80142dc:	605a      	str	r2, [r3, #4]
 80142de:	e007      	b.n	80142f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	685a      	ldr	r2, [r3, #4]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80142ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80142fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	69db      	ldr	r3, [r3, #28]
 801430a:	3b01      	subs	r3, #1
 801430c:	051a      	lsls	r2, r3, #20
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	430a      	orrs	r2, r1
 8014314:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	689a      	ldr	r2, [r3, #8]
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8014324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	6899      	ldr	r1, [r3, #8]
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014332:	025a      	lsls	r2, r3, #9
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	430a      	orrs	r2, r1
 801433a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	689a      	ldr	r2, [r3, #8]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801434a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	6899      	ldr	r1, [r3, #8]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	695b      	ldr	r3, [r3, #20]
 8014356:	029a      	lsls	r2, r3, #10
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	430a      	orrs	r2, r1
 801435e:	609a      	str	r2, [r3, #8]
}
 8014360:	bf00      	nop
 8014362:	3714      	adds	r7, #20
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr
 801436c:	40012300 	.word	0x40012300
 8014370:	0f000001 	.word	0x0f000001

08014374 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014380:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014386:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801438a:	2b00      	cmp	r3, #0
 801438c:	d13c      	bne.n	8014408 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014392:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	689b      	ldr	r3, [r3, #8]
 80143a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d12b      	bne.n	8014400 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d127      	bne.n	8014400 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d006      	beq.n	80143cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	689b      	ldr	r3, [r3, #8]
 80143c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d119      	bne.n	8014400 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	685a      	ldr	r2, [r3, #4]
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	f022 0220 	bic.w	r2, r2, #32
 80143da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d105      	bne.n	8014400 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143f8:	f043 0201 	orr.w	r2, r3, #1
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8014400:	68f8      	ldr	r0, [r7, #12]
 8014402:	f7ff fd7b 	bl	8013efc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8014406:	e00e      	b.n	8014426 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801440c:	f003 0310 	and.w	r3, r3, #16
 8014410:	2b00      	cmp	r3, #0
 8014412:	d003      	beq.n	801441c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8014414:	68f8      	ldr	r0, [r7, #12]
 8014416:	f7ff fd85 	bl	8013f24 <HAL_ADC_ErrorCallback>
}
 801441a:	e004      	b.n	8014426 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	4798      	blx	r3
}
 8014426:	bf00      	nop
 8014428:	3710      	adds	r7, #16
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}

0801442e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801442e:	b580      	push	{r7, lr}
 8014430:	b084      	sub	sp, #16
 8014432:	af00      	add	r7, sp, #0
 8014434:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801443a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801443c:	68f8      	ldr	r0, [r7, #12]
 801443e:	f7ff fd67 	bl	8013f10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8014442:	bf00      	nop
 8014444:	3710      	adds	r7, #16
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}

0801444a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801444a:	b580      	push	{r7, lr}
 801444c:	b084      	sub	sp, #16
 801444e:	af00      	add	r7, sp, #0
 8014450:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014456:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	2240      	movs	r2, #64	; 0x40
 801445c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014462:	f043 0204 	orr.w	r2, r3, #4
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801446a:	68f8      	ldr	r0, [r7, #12]
 801446c:	f7ff fd5a 	bl	8013f24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8014470:	bf00      	nop
 8014472:	3710      	adds	r7, #16
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014478:	b480      	push	{r7}
 801447a:	b085      	sub	sp, #20
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f003 0307 	and.w	r3, r3, #7
 8014486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014488:	4b0c      	ldr	r3, [pc, #48]	; (80144bc <__NVIC_SetPriorityGrouping+0x44>)
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801448e:	68ba      	ldr	r2, [r7, #8]
 8014490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8014494:	4013      	ands	r3, r2
 8014496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80144a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80144a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80144a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80144aa:	4a04      	ldr	r2, [pc, #16]	; (80144bc <__NVIC_SetPriorityGrouping+0x44>)
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	60d3      	str	r3, [r2, #12]
}
 80144b0:	bf00      	nop
 80144b2:	3714      	adds	r7, #20
 80144b4:	46bd      	mov	sp, r7
 80144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ba:	4770      	bx	lr
 80144bc:	e000ed00 	.word	0xe000ed00

080144c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80144c0:	b480      	push	{r7}
 80144c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80144c4:	4b04      	ldr	r3, [pc, #16]	; (80144d8 <__NVIC_GetPriorityGrouping+0x18>)
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	0a1b      	lsrs	r3, r3, #8
 80144ca:	f003 0307 	and.w	r3, r3, #7
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr
 80144d8:	e000ed00 	.word	0xe000ed00

080144dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80144dc:	b480      	push	{r7}
 80144de:	b083      	sub	sp, #12
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	4603      	mov	r3, r0
 80144e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80144e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	db0b      	blt.n	8014506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80144ee:	79fb      	ldrb	r3, [r7, #7]
 80144f0:	f003 021f 	and.w	r2, r3, #31
 80144f4:	4907      	ldr	r1, [pc, #28]	; (8014514 <__NVIC_EnableIRQ+0x38>)
 80144f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144fa:	095b      	lsrs	r3, r3, #5
 80144fc:	2001      	movs	r0, #1
 80144fe:	fa00 f202 	lsl.w	r2, r0, r2
 8014502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8014506:	bf00      	nop
 8014508:	370c      	adds	r7, #12
 801450a:	46bd      	mov	sp, r7
 801450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014510:	4770      	bx	lr
 8014512:	bf00      	nop
 8014514:	e000e100 	.word	0xe000e100

08014518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014518:	b480      	push	{r7}
 801451a:	b083      	sub	sp, #12
 801451c:	af00      	add	r7, sp, #0
 801451e:	4603      	mov	r3, r0
 8014520:	6039      	str	r1, [r7, #0]
 8014522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014528:	2b00      	cmp	r3, #0
 801452a:	db0a      	blt.n	8014542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	b2da      	uxtb	r2, r3
 8014530:	490c      	ldr	r1, [pc, #48]	; (8014564 <__NVIC_SetPriority+0x4c>)
 8014532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014536:	0112      	lsls	r2, r2, #4
 8014538:	b2d2      	uxtb	r2, r2
 801453a:	440b      	add	r3, r1
 801453c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8014540:	e00a      	b.n	8014558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014542:	683b      	ldr	r3, [r7, #0]
 8014544:	b2da      	uxtb	r2, r3
 8014546:	4908      	ldr	r1, [pc, #32]	; (8014568 <__NVIC_SetPriority+0x50>)
 8014548:	79fb      	ldrb	r3, [r7, #7]
 801454a:	f003 030f 	and.w	r3, r3, #15
 801454e:	3b04      	subs	r3, #4
 8014550:	0112      	lsls	r2, r2, #4
 8014552:	b2d2      	uxtb	r2, r2
 8014554:	440b      	add	r3, r1
 8014556:	761a      	strb	r2, [r3, #24]
}
 8014558:	bf00      	nop
 801455a:	370c      	adds	r7, #12
 801455c:	46bd      	mov	sp, r7
 801455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014562:	4770      	bx	lr
 8014564:	e000e100 	.word	0xe000e100
 8014568:	e000ed00 	.word	0xe000ed00

0801456c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801456c:	b480      	push	{r7}
 801456e:	b089      	sub	sp, #36	; 0x24
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	f003 0307 	and.w	r3, r3, #7
 801457e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014580:	69fb      	ldr	r3, [r7, #28]
 8014582:	f1c3 0307 	rsb	r3, r3, #7
 8014586:	2b04      	cmp	r3, #4
 8014588:	bf28      	it	cs
 801458a:	2304      	movcs	r3, #4
 801458c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801458e:	69fb      	ldr	r3, [r7, #28]
 8014590:	3304      	adds	r3, #4
 8014592:	2b06      	cmp	r3, #6
 8014594:	d902      	bls.n	801459c <NVIC_EncodePriority+0x30>
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	3b03      	subs	r3, #3
 801459a:	e000      	b.n	801459e <NVIC_EncodePriority+0x32>
 801459c:	2300      	movs	r3, #0
 801459e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80145a0:	f04f 32ff 	mov.w	r2, #4294967295
 80145a4:	69bb      	ldr	r3, [r7, #24]
 80145a6:	fa02 f303 	lsl.w	r3, r2, r3
 80145aa:	43da      	mvns	r2, r3
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	401a      	ands	r2, r3
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80145b4:	f04f 31ff 	mov.w	r1, #4294967295
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	fa01 f303 	lsl.w	r3, r1, r3
 80145be:	43d9      	mvns	r1, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80145c4:	4313      	orrs	r3, r2
         );
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3724      	adds	r7, #36	; 0x24
 80145ca:	46bd      	mov	sp, r7
 80145cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d0:	4770      	bx	lr

080145d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80145d2:	b580      	push	{r7, lr}
 80145d4:	b082      	sub	sp, #8
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f7ff ff4c 	bl	8014478 <__NVIC_SetPriorityGrouping>
}
 80145e0:	bf00      	nop
 80145e2:	3708      	adds	r7, #8
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}

080145e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b086      	sub	sp, #24
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	4603      	mov	r3, r0
 80145f0:	60b9      	str	r1, [r7, #8]
 80145f2:	607a      	str	r2, [r7, #4]
 80145f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80145f6:	2300      	movs	r3, #0
 80145f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80145fa:	f7ff ff61 	bl	80144c0 <__NVIC_GetPriorityGrouping>
 80145fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	68b9      	ldr	r1, [r7, #8]
 8014604:	6978      	ldr	r0, [r7, #20]
 8014606:	f7ff ffb1 	bl	801456c <NVIC_EncodePriority>
 801460a:	4602      	mov	r2, r0
 801460c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014610:	4611      	mov	r1, r2
 8014612:	4618      	mov	r0, r3
 8014614:	f7ff ff80 	bl	8014518 <__NVIC_SetPriority>
}
 8014618:	bf00      	nop
 801461a:	3718      	adds	r7, #24
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}

08014620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	4603      	mov	r3, r0
 8014628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801462e:	4618      	mov	r0, r3
 8014630:	f7ff ff54 	bl	80144dc <__NVIC_EnableIRQ>
}
 8014634:	bf00      	nop
 8014636:	3708      	adds	r7, #8
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}

0801463c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b082      	sub	sp, #8
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d101      	bne.n	801464e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 801464a:	2301      	movs	r3, #1
 801464c:	e014      	b.n	8014678 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	791b      	ldrb	r3, [r3, #4]
 8014652:	b2db      	uxtb	r3, r3
 8014654:	2b00      	cmp	r3, #0
 8014656:	d105      	bne.n	8014664 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2200      	movs	r2, #0
 801465c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f7fe fede 	bl	8013420 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2202      	movs	r2, #2
 8014668:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2200      	movs	r2, #0
 801466e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2201      	movs	r2, #1
 8014674:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8014676:	2300      	movs	r3, #0
}
 8014678:	4618      	mov	r0, r3
 801467a:	3708      	adds	r7, #8
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8014680:	b480      	push	{r7}
 8014682:	b083      	sub	sp, #12
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	795b      	ldrb	r3, [r3, #5]
 801468e:	2b01      	cmp	r3, #1
 8014690:	d101      	bne.n	8014696 <HAL_DAC_Start+0x16>
 8014692:	2302      	movs	r3, #2
 8014694:	e040      	b.n	8014718 <HAL_DAC_Start+0x98>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2201      	movs	r2, #1
 801469a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2202      	movs	r2, #2
 80146a0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	6819      	ldr	r1, [r3, #0]
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	f003 0310 	and.w	r3, r3, #16
 80146ae:	2201      	movs	r2, #1
 80146b0:	409a      	lsls	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	430a      	orrs	r2, r1
 80146b8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d10f      	bne.n	80146e0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80146ca:	2b3c      	cmp	r3, #60	; 0x3c
 80146cc:	d11d      	bne.n	801470a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	685a      	ldr	r2, [r3, #4]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	f042 0201 	orr.w	r2, r2, #1
 80146dc:	605a      	str	r2, [r3, #4]
 80146de:	e014      	b.n	801470a <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	f003 0310 	and.w	r3, r3, #16
 80146f0:	213c      	movs	r1, #60	; 0x3c
 80146f2:	fa01 f303 	lsl.w	r3, r1, r3
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d107      	bne.n	801470a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	685a      	ldr	r2, [r3, #4]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	f042 0202 	orr.w	r2, r2, #2
 8014708:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2201      	movs	r2, #1
 801470e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	2200      	movs	r2, #0
 8014714:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8014716:	2300      	movs	r3, #0
}
 8014718:	4618      	mov	r0, r3
 801471a:	370c      	adds	r7, #12
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr

08014724 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b082      	sub	sp, #8
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801473a:	d120      	bne.n	801477e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801474a:	d118      	bne.n	801477e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2204      	movs	r2, #4
 8014750:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	691b      	ldr	r3, [r3, #16]
 8014756:	f043 0201 	orr.w	r2, r3, #1
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014766:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014776:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f000 f82d 	bl	80147d8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801478c:	d120      	bne.n	80147d0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801479c:	d118      	bne.n	80147d0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	2204      	movs	r2, #4
 80147a2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	691b      	ldr	r3, [r3, #16]
 80147a8:	f043 0202 	orr.w	r2, r3, #2
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80147b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	681a      	ldr	r2, [r3, #0]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80147c8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f000 f85d 	bl	801488a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80147d0:	bf00      	nop
 80147d2:	3708      	adds	r7, #8
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}

080147d8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80147d8:	b480      	push	{r7}
 80147da:	b083      	sub	sp, #12
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80147e0:	bf00      	nop
 80147e2:	370c      	adds	r7, #12
 80147e4:	46bd      	mov	sp, r7
 80147e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ea:	4770      	bx	lr

080147ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80147ec:	b480      	push	{r7}
 80147ee:	b087      	sub	sp, #28
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	60b9      	str	r1, [r7, #8]
 80147f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	795b      	ldrb	r3, [r3, #5]
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	d101      	bne.n	8014804 <HAL_DAC_ConfigChannel+0x18>
 8014800:	2302      	movs	r3, #2
 8014802:	e03c      	b.n	801487e <HAL_DAC_ConfigChannel+0x92>
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	2201      	movs	r2, #1
 8014808:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2202      	movs	r2, #2
 801480e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f003 0310 	and.w	r3, r3, #16
 801481e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8014822:	fa02 f303 	lsl.w	r3, r2, r3
 8014826:	43db      	mvns	r3, r3
 8014828:	697a      	ldr	r2, [r7, #20]
 801482a:	4013      	ands	r3, r2
 801482c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	681a      	ldr	r2, [r3, #0]
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	4313      	orrs	r3, r2
 8014838:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f003 0310 	and.w	r3, r3, #16
 8014840:	693a      	ldr	r2, [r7, #16]
 8014842:	fa02 f303 	lsl.w	r3, r2, r3
 8014846:	697a      	ldr	r2, [r7, #20]
 8014848:	4313      	orrs	r3, r2
 801484a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	697a      	ldr	r2, [r7, #20]
 8014852:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	6819      	ldr	r1, [r3, #0]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f003 0310 	and.w	r3, r3, #16
 8014860:	22c0      	movs	r2, #192	; 0xc0
 8014862:	fa02 f303 	lsl.w	r3, r2, r3
 8014866:	43da      	mvns	r2, r3
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	400a      	ands	r2, r1
 801486e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	2201      	movs	r2, #1
 8014874:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2200      	movs	r2, #0
 801487a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 801487c:	2300      	movs	r3, #0
}
 801487e:	4618      	mov	r0, r3
 8014880:	371c      	adds	r7, #28
 8014882:	46bd      	mov	sp, r7
 8014884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014888:	4770      	bx	lr

0801488a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 801488a:	b480      	push	{r7}
 801488c:	b083      	sub	sp, #12
 801488e:	af00      	add	r7, sp, #0
 8014890:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8014892:	bf00      	nop
 8014894:	370c      	adds	r7, #12
 8014896:	46bd      	mov	sp, r7
 8014898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489c:	4770      	bx	lr
	...

080148a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b086      	sub	sp, #24
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80148a8:	2300      	movs	r3, #0
 80148aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80148ac:	f7ff f9a2 	bl	8013bf4 <HAL_GetTick>
 80148b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d101      	bne.n	80148bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80148b8:	2301      	movs	r3, #1
 80148ba:	e099      	b.n	80149f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2202      	movs	r2, #2
 80148c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2200      	movs	r2, #0
 80148c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	f022 0201 	bic.w	r2, r2, #1
 80148da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80148dc:	e00f      	b.n	80148fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80148de:	f7ff f989 	bl	8013bf4 <HAL_GetTick>
 80148e2:	4602      	mov	r2, r0
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	1ad3      	subs	r3, r2, r3
 80148e8:	2b05      	cmp	r3, #5
 80148ea:	d908      	bls.n	80148fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2220      	movs	r2, #32
 80148f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2203      	movs	r2, #3
 80148f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80148fa:	2303      	movs	r3, #3
 80148fc:	e078      	b.n	80149f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	f003 0301 	and.w	r3, r3, #1
 8014908:	2b00      	cmp	r3, #0
 801490a:	d1e8      	bne.n	80148de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8014914:	697a      	ldr	r2, [r7, #20]
 8014916:	4b38      	ldr	r3, [pc, #224]	; (80149f8 <HAL_DMA_Init+0x158>)
 8014918:	4013      	ands	r3, r2
 801491a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	685a      	ldr	r2, [r3, #4]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	689b      	ldr	r3, [r3, #8]
 8014924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801492a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	691b      	ldr	r3, [r3, #16]
 8014930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	699b      	ldr	r3, [r3, #24]
 801493c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	6a1b      	ldr	r3, [r3, #32]
 8014948:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801494a:	697a      	ldr	r2, [r7, #20]
 801494c:	4313      	orrs	r3, r2
 801494e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014954:	2b04      	cmp	r3, #4
 8014956:	d107      	bne.n	8014968 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014960:	4313      	orrs	r3, r2
 8014962:	697a      	ldr	r2, [r7, #20]
 8014964:	4313      	orrs	r3, r2
 8014966:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	697a      	ldr	r2, [r7, #20]
 801496e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	695b      	ldr	r3, [r3, #20]
 8014976:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	f023 0307 	bic.w	r3, r3, #7
 801497e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014984:	697a      	ldr	r2, [r7, #20]
 8014986:	4313      	orrs	r3, r2
 8014988:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801498e:	2b04      	cmp	r3, #4
 8014990:	d117      	bne.n	80149c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014996:	697a      	ldr	r2, [r7, #20]
 8014998:	4313      	orrs	r3, r2
 801499a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d00e      	beq.n	80149c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f000 fb01 	bl	8014fac <DMA_CheckFifoParam>
 80149aa:	4603      	mov	r3, r0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d008      	beq.n	80149c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2240      	movs	r2, #64	; 0x40
 80149b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	2201      	movs	r2, #1
 80149ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80149be:	2301      	movs	r3, #1
 80149c0:	e016      	b.n	80149f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	697a      	ldr	r2, [r7, #20]
 80149c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f000 fab8 	bl	8014f40 <DMA_CalcBaseAndBitshift>
 80149d0:	4603      	mov	r3, r0
 80149d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80149d8:	223f      	movs	r2, #63	; 0x3f
 80149da:	409a      	lsls	r2, r3
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2200      	movs	r2, #0
 80149e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2201      	movs	r2, #1
 80149ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80149ee:	2300      	movs	r3, #0
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	3718      	adds	r7, #24
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	f010803f 	.word	0xf010803f

080149fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b086      	sub	sp, #24
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	607a      	str	r2, [r7, #4]
 8014a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	d101      	bne.n	8014a22 <HAL_DMA_Start_IT+0x26>
 8014a1e:	2302      	movs	r3, #2
 8014a20:	e040      	b.n	8014aa4 <HAL_DMA_Start_IT+0xa8>
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2201      	movs	r2, #1
 8014a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d12f      	bne.n	8014a96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2202      	movs	r2, #2
 8014a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	2200      	movs	r2, #0
 8014a42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	687a      	ldr	r2, [r7, #4]
 8014a48:	68b9      	ldr	r1, [r7, #8]
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	f000 fa4a 	bl	8014ee4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a54:	223f      	movs	r2, #63	; 0x3f
 8014a56:	409a      	lsls	r2, r3
 8014a58:	693b      	ldr	r3, [r7, #16]
 8014a5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	681a      	ldr	r2, [r3, #0]
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	f042 0216 	orr.w	r2, r2, #22
 8014a6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d007      	beq.n	8014a84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	681a      	ldr	r2, [r3, #0]
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	f042 0208 	orr.w	r2, r2, #8
 8014a82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	681a      	ldr	r2, [r3, #0]
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	f042 0201 	orr.w	r2, r2, #1
 8014a92:	601a      	str	r2, [r3, #0]
 8014a94:	e005      	b.n	8014aa2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8014a9e:	2302      	movs	r3, #2
 8014aa0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8014aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3718      	adds	r7, #24
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}

08014aac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b084      	sub	sp, #16
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ab8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8014aba:	f7ff f89b 	bl	8013bf4 <HAL_GetTick>
 8014abe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014ac6:	b2db      	uxtb	r3, r3
 8014ac8:	2b02      	cmp	r3, #2
 8014aca:	d008      	beq.n	8014ade <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2280      	movs	r2, #128	; 0x80
 8014ad0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8014ada:	2301      	movs	r3, #1
 8014adc:	e052      	b.n	8014b84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	681a      	ldr	r2, [r3, #0]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	f022 0216 	bic.w	r2, r2, #22
 8014aec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	695a      	ldr	r2, [r3, #20]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014afc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d103      	bne.n	8014b0e <HAL_DMA_Abort+0x62>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d007      	beq.n	8014b1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	681a      	ldr	r2, [r3, #0]
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	f022 0208 	bic.w	r2, r2, #8
 8014b1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	f022 0201 	bic.w	r2, r2, #1
 8014b2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8014b2e:	e013      	b.n	8014b58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8014b30:	f7ff f860 	bl	8013bf4 <HAL_GetTick>
 8014b34:	4602      	mov	r2, r0
 8014b36:	68bb      	ldr	r3, [r7, #8]
 8014b38:	1ad3      	subs	r3, r2, r3
 8014b3a:	2b05      	cmp	r3, #5
 8014b3c:	d90c      	bls.n	8014b58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2220      	movs	r2, #32
 8014b42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2203      	movs	r2, #3
 8014b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8014b54:	2303      	movs	r3, #3
 8014b56:	e015      	b.n	8014b84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	f003 0301 	and.w	r3, r3, #1
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d1e4      	bne.n	8014b30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014b6a:	223f      	movs	r2, #63	; 0x3f
 8014b6c:	409a      	lsls	r2, r3
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2201      	movs	r2, #1
 8014b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8014b82:	2300      	movs	r3, #0
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3710      	adds	r7, #16
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8014b8c:	b480      	push	{r7}
 8014b8e:	b083      	sub	sp, #12
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	2b02      	cmp	r3, #2
 8014b9e:	d004      	beq.n	8014baa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2280      	movs	r2, #128	; 0x80
 8014ba4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8014ba6:	2301      	movs	r3, #1
 8014ba8:	e00c      	b.n	8014bc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2205      	movs	r2, #5
 8014bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	681a      	ldr	r2, [r3, #0]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	f022 0201 	bic.w	r2, r2, #1
 8014bc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8014bc2:	2300      	movs	r3, #0
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	370c      	adds	r7, #12
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bce:	4770      	bx	lr

08014bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b086      	sub	sp, #24
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8014bdc:	4b92      	ldr	r3, [pc, #584]	; (8014e28 <HAL_DMA_IRQHandler+0x258>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	4a92      	ldr	r2, [pc, #584]	; (8014e2c <HAL_DMA_IRQHandler+0x25c>)
 8014be2:	fba2 2303 	umull	r2, r3, r2, r3
 8014be6:	0a9b      	lsrs	r3, r3, #10
 8014be8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014bee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014bfa:	2208      	movs	r2, #8
 8014bfc:	409a      	lsls	r2, r3
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	4013      	ands	r3, r2
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d01a      	beq.n	8014c3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	f003 0304 	and.w	r3, r3, #4
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d013      	beq.n	8014c3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	681a      	ldr	r2, [r3, #0]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f022 0204 	bic.w	r2, r2, #4
 8014c22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c28:	2208      	movs	r2, #8
 8014c2a:	409a      	lsls	r2, r3
 8014c2c:	693b      	ldr	r3, [r7, #16]
 8014c2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c34:	f043 0201 	orr.w	r2, r3, #1
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c40:	2201      	movs	r2, #1
 8014c42:	409a      	lsls	r2, r3
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	4013      	ands	r3, r2
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d012      	beq.n	8014c72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	695b      	ldr	r3, [r3, #20]
 8014c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d00b      	beq.n	8014c72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c5e:	2201      	movs	r2, #1
 8014c60:	409a      	lsls	r2, r3
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c6a:	f043 0202 	orr.w	r2, r3, #2
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c76:	2204      	movs	r2, #4
 8014c78:	409a      	lsls	r2, r3
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	4013      	ands	r3, r2
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d012      	beq.n	8014ca8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	f003 0302 	and.w	r3, r3, #2
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d00b      	beq.n	8014ca8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c94:	2204      	movs	r2, #4
 8014c96:	409a      	lsls	r2, r3
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ca0:	f043 0204 	orr.w	r2, r3, #4
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014cac:	2210      	movs	r2, #16
 8014cae:	409a      	lsls	r2, r3
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	4013      	ands	r3, r2
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d043      	beq.n	8014d40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	f003 0308 	and.w	r3, r3, #8
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d03c      	beq.n	8014d40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014cca:	2210      	movs	r2, #16
 8014ccc:	409a      	lsls	r2, r3
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d018      	beq.n	8014d12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d108      	bne.n	8014d00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d024      	beq.n	8014d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cfa:	6878      	ldr	r0, [r7, #4]
 8014cfc:	4798      	blx	r3
 8014cfe:	e01f      	b.n	8014d40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d01b      	beq.n	8014d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	4798      	blx	r3
 8014d10:	e016      	b.n	8014d40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d107      	bne.n	8014d30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	681a      	ldr	r2, [r3, #0]
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	f022 0208 	bic.w	r2, r2, #8
 8014d2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d003      	beq.n	8014d40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014d44:	2220      	movs	r2, #32
 8014d46:	409a      	lsls	r2, r3
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	4013      	ands	r3, r2
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	f000 808e 	beq.w	8014e6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	f003 0310 	and.w	r3, r3, #16
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	f000 8086 	beq.w	8014e6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014d66:	2220      	movs	r2, #32
 8014d68:	409a      	lsls	r2, r3
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014d74:	b2db      	uxtb	r3, r3
 8014d76:	2b05      	cmp	r3, #5
 8014d78:	d136      	bne.n	8014de8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	681a      	ldr	r2, [r3, #0]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	f022 0216 	bic.w	r2, r2, #22
 8014d88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	695a      	ldr	r2, [r3, #20]
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014d98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d103      	bne.n	8014daa <HAL_DMA_IRQHandler+0x1da>
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d007      	beq.n	8014dba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	681a      	ldr	r2, [r3, #0]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	f022 0208 	bic.w	r2, r2, #8
 8014db8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014dbe:	223f      	movs	r2, #63	; 0x3f
 8014dc0:	409a      	lsls	r2, r3
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2201      	movs	r2, #1
 8014dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d07d      	beq.n	8014eda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	4798      	blx	r3
        }
        return;
 8014de6:	e078      	b.n	8014eda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d01c      	beq.n	8014e30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d108      	bne.n	8014e16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d030      	beq.n	8014e6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	4798      	blx	r3
 8014e14:	e02b      	b.n	8014e6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d027      	beq.n	8014e6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	4798      	blx	r3
 8014e26:	e022      	b.n	8014e6e <HAL_DMA_IRQHandler+0x29e>
 8014e28:	2000001c 	.word	0x2000001c
 8014e2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d10f      	bne.n	8014e5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	f022 0210 	bic.w	r2, r2, #16
 8014e4c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2201      	movs	r2, #1
 8014e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d003      	beq.n	8014e6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d032      	beq.n	8014edc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e7a:	f003 0301 	and.w	r3, r3, #1
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d022      	beq.n	8014ec8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2205      	movs	r2, #5
 8014e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	681a      	ldr	r2, [r3, #0]
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	f022 0201 	bic.w	r2, r2, #1
 8014e98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	3301      	adds	r3, #1
 8014e9e:	60bb      	str	r3, [r7, #8]
 8014ea0:	697a      	ldr	r2, [r7, #20]
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d307      	bcc.n	8014eb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	f003 0301 	and.w	r3, r3, #1
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d1f2      	bne.n	8014e9a <HAL_DMA_IRQHandler+0x2ca>
 8014eb4:	e000      	b.n	8014eb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8014eb6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2201      	movs	r2, #1
 8014ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d005      	beq.n	8014edc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	4798      	blx	r3
 8014ed8:	e000      	b.n	8014edc <HAL_DMA_IRQHandler+0x30c>
        return;
 8014eda:	bf00      	nop
    }
  }
}
 8014edc:	3718      	adds	r7, #24
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop

08014ee4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b085      	sub	sp, #20
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	60f8      	str	r0, [r7, #12]
 8014eec:	60b9      	str	r1, [r7, #8]
 8014eee:	607a      	str	r2, [r7, #4]
 8014ef0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	681a      	ldr	r2, [r3, #0]
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014f00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	683a      	ldr	r2, [r7, #0]
 8014f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	689b      	ldr	r3, [r3, #8]
 8014f0e:	2b40      	cmp	r3, #64	; 0x40
 8014f10:	d108      	bne.n	8014f24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	68ba      	ldr	r2, [r7, #8]
 8014f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8014f22:	e007      	b.n	8014f34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	68ba      	ldr	r2, [r7, #8]
 8014f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	687a      	ldr	r2, [r7, #4]
 8014f32:	60da      	str	r2, [r3, #12]
}
 8014f34:	bf00      	nop
 8014f36:	3714      	adds	r7, #20
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8014f40:	b480      	push	{r7}
 8014f42:	b085      	sub	sp, #20
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	3b10      	subs	r3, #16
 8014f50:	4a14      	ldr	r2, [pc, #80]	; (8014fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8014f52:	fba2 2303 	umull	r2, r3, r2, r3
 8014f56:	091b      	lsrs	r3, r3, #4
 8014f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8014f5a:	4a13      	ldr	r2, [pc, #76]	; (8014fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	4413      	add	r3, r2
 8014f60:	781b      	ldrb	r3, [r3, #0]
 8014f62:	461a      	mov	r2, r3
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2b03      	cmp	r3, #3
 8014f6c:	d909      	bls.n	8014f82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8014f76:	f023 0303 	bic.w	r3, r3, #3
 8014f7a:	1d1a      	adds	r2, r3, #4
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8014f80:	e007      	b.n	8014f92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8014f8a:	f023 0303 	bic.w	r3, r3, #3
 8014f8e:	687a      	ldr	r2, [r7, #4]
 8014f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	3714      	adds	r7, #20
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa0:	4770      	bx	lr
 8014fa2:	bf00      	nop
 8014fa4:	aaaaaaab 	.word	0xaaaaaaab
 8014fa8:	08023020 	.word	0x08023020

08014fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8014fac:	b480      	push	{r7}
 8014fae:	b085      	sub	sp, #20
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	699b      	ldr	r3, [r3, #24]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d11f      	bne.n	8015006 <DMA_CheckFifoParam+0x5a>
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	2b03      	cmp	r3, #3
 8014fca:	d856      	bhi.n	801507a <DMA_CheckFifoParam+0xce>
 8014fcc:	a201      	add	r2, pc, #4	; (adr r2, 8014fd4 <DMA_CheckFifoParam+0x28>)
 8014fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fd2:	bf00      	nop
 8014fd4:	08014fe5 	.word	0x08014fe5
 8014fd8:	08014ff7 	.word	0x08014ff7
 8014fdc:	08014fe5 	.word	0x08014fe5
 8014fe0:	0801507b 	.word	0x0801507b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d046      	beq.n	801507e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014ff4:	e043      	b.n	801507e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8014ffe:	d140      	bne.n	8015082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8015000:	2301      	movs	r3, #1
 8015002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015004:	e03d      	b.n	8015082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	699b      	ldr	r3, [r3, #24]
 801500a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801500e:	d121      	bne.n	8015054 <DMA_CheckFifoParam+0xa8>
 8015010:	68bb      	ldr	r3, [r7, #8]
 8015012:	2b03      	cmp	r3, #3
 8015014:	d837      	bhi.n	8015086 <DMA_CheckFifoParam+0xda>
 8015016:	a201      	add	r2, pc, #4	; (adr r2, 801501c <DMA_CheckFifoParam+0x70>)
 8015018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801501c:	0801502d 	.word	0x0801502d
 8015020:	08015033 	.word	0x08015033
 8015024:	0801502d 	.word	0x0801502d
 8015028:	08015045 	.word	0x08015045
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801502c:	2301      	movs	r3, #1
 801502e:	73fb      	strb	r3, [r7, #15]
      break;
 8015030:	e030      	b.n	8015094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801503a:	2b00      	cmp	r3, #0
 801503c:	d025      	beq.n	801508a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801503e:	2301      	movs	r3, #1
 8015040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015042:	e022      	b.n	801508a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801504c:	d11f      	bne.n	801508e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801504e:	2301      	movs	r3, #1
 8015050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8015052:	e01c      	b.n	801508e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	2b02      	cmp	r3, #2
 8015058:	d903      	bls.n	8015062 <DMA_CheckFifoParam+0xb6>
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	2b03      	cmp	r3, #3
 801505e:	d003      	beq.n	8015068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8015060:	e018      	b.n	8015094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8015062:	2301      	movs	r3, #1
 8015064:	73fb      	strb	r3, [r7, #15]
      break;
 8015066:	e015      	b.n	8015094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801506c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015070:	2b00      	cmp	r3, #0
 8015072:	d00e      	beq.n	8015092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8015074:	2301      	movs	r3, #1
 8015076:	73fb      	strb	r3, [r7, #15]
      break;
 8015078:	e00b      	b.n	8015092 <DMA_CheckFifoParam+0xe6>
      break;
 801507a:	bf00      	nop
 801507c:	e00a      	b.n	8015094 <DMA_CheckFifoParam+0xe8>
      break;
 801507e:	bf00      	nop
 8015080:	e008      	b.n	8015094 <DMA_CheckFifoParam+0xe8>
      break;
 8015082:	bf00      	nop
 8015084:	e006      	b.n	8015094 <DMA_CheckFifoParam+0xe8>
      break;
 8015086:	bf00      	nop
 8015088:	e004      	b.n	8015094 <DMA_CheckFifoParam+0xe8>
      break;
 801508a:	bf00      	nop
 801508c:	e002      	b.n	8015094 <DMA_CheckFifoParam+0xe8>
      break;   
 801508e:	bf00      	nop
 8015090:	e000      	b.n	8015094 <DMA_CheckFifoParam+0xe8>
      break;
 8015092:	bf00      	nop
    }
  } 
  
  return status; 
 8015094:	7bfb      	ldrb	r3, [r7, #15]
}
 8015096:	4618      	mov	r0, r3
 8015098:	3714      	adds	r7, #20
 801509a:	46bd      	mov	sp, r7
 801509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop

080150a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80150a4:	b480      	push	{r7}
 80150a6:	b089      	sub	sp, #36	; 0x24
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80150ae:	2300      	movs	r3, #0
 80150b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80150b2:	2300      	movs	r3, #0
 80150b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80150b6:	2300      	movs	r3, #0
 80150b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80150ba:	2300      	movs	r3, #0
 80150bc:	61fb      	str	r3, [r7, #28]
 80150be:	e16b      	b.n	8015398 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80150c0:	2201      	movs	r2, #1
 80150c2:	69fb      	ldr	r3, [r7, #28]
 80150c4:	fa02 f303 	lsl.w	r3, r2, r3
 80150c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	697a      	ldr	r2, [r7, #20]
 80150d0:	4013      	ands	r3, r2
 80150d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80150d4:	693a      	ldr	r2, [r7, #16]
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	429a      	cmp	r2, r3
 80150da:	f040 815a 	bne.w	8015392 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	f003 0303 	and.w	r3, r3, #3
 80150e6:	2b01      	cmp	r3, #1
 80150e8:	d005      	beq.n	80150f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80150f2:	2b02      	cmp	r3, #2
 80150f4:	d130      	bne.n	8015158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	689b      	ldr	r3, [r3, #8]
 80150fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	005b      	lsls	r3, r3, #1
 8015100:	2203      	movs	r2, #3
 8015102:	fa02 f303 	lsl.w	r3, r2, r3
 8015106:	43db      	mvns	r3, r3
 8015108:	69ba      	ldr	r2, [r7, #24]
 801510a:	4013      	ands	r3, r2
 801510c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801510e:	683b      	ldr	r3, [r7, #0]
 8015110:	68da      	ldr	r2, [r3, #12]
 8015112:	69fb      	ldr	r3, [r7, #28]
 8015114:	005b      	lsls	r3, r3, #1
 8015116:	fa02 f303 	lsl.w	r3, r2, r3
 801511a:	69ba      	ldr	r2, [r7, #24]
 801511c:	4313      	orrs	r3, r2
 801511e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	69ba      	ldr	r2, [r7, #24]
 8015124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801512c:	2201      	movs	r2, #1
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	fa02 f303 	lsl.w	r3, r2, r3
 8015134:	43db      	mvns	r3, r3
 8015136:	69ba      	ldr	r2, [r7, #24]
 8015138:	4013      	ands	r3, r2
 801513a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	685b      	ldr	r3, [r3, #4]
 8015140:	091b      	lsrs	r3, r3, #4
 8015142:	f003 0201 	and.w	r2, r3, #1
 8015146:	69fb      	ldr	r3, [r7, #28]
 8015148:	fa02 f303 	lsl.w	r3, r2, r3
 801514c:	69ba      	ldr	r2, [r7, #24]
 801514e:	4313      	orrs	r3, r2
 8015150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	69ba      	ldr	r2, [r7, #24]
 8015156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	f003 0303 	and.w	r3, r3, #3
 8015160:	2b03      	cmp	r3, #3
 8015162:	d017      	beq.n	8015194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	68db      	ldr	r3, [r3, #12]
 8015168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801516a:	69fb      	ldr	r3, [r7, #28]
 801516c:	005b      	lsls	r3, r3, #1
 801516e:	2203      	movs	r2, #3
 8015170:	fa02 f303 	lsl.w	r3, r2, r3
 8015174:	43db      	mvns	r3, r3
 8015176:	69ba      	ldr	r2, [r7, #24]
 8015178:	4013      	ands	r3, r2
 801517a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	689a      	ldr	r2, [r3, #8]
 8015180:	69fb      	ldr	r3, [r7, #28]
 8015182:	005b      	lsls	r3, r3, #1
 8015184:	fa02 f303 	lsl.w	r3, r2, r3
 8015188:	69ba      	ldr	r2, [r7, #24]
 801518a:	4313      	orrs	r3, r2
 801518c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	69ba      	ldr	r2, [r7, #24]
 8015192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	685b      	ldr	r3, [r3, #4]
 8015198:	f003 0303 	and.w	r3, r3, #3
 801519c:	2b02      	cmp	r3, #2
 801519e:	d123      	bne.n	80151e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80151a0:	69fb      	ldr	r3, [r7, #28]
 80151a2:	08da      	lsrs	r2, r3, #3
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	3208      	adds	r2, #8
 80151a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	f003 0307 	and.w	r3, r3, #7
 80151b4:	009b      	lsls	r3, r3, #2
 80151b6:	220f      	movs	r2, #15
 80151b8:	fa02 f303 	lsl.w	r3, r2, r3
 80151bc:	43db      	mvns	r3, r3
 80151be:	69ba      	ldr	r2, [r7, #24]
 80151c0:	4013      	ands	r3, r2
 80151c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	691a      	ldr	r2, [r3, #16]
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	f003 0307 	and.w	r3, r3, #7
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	fa02 f303 	lsl.w	r3, r2, r3
 80151d4:	69ba      	ldr	r2, [r7, #24]
 80151d6:	4313      	orrs	r3, r2
 80151d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80151da:	69fb      	ldr	r3, [r7, #28]
 80151dc:	08da      	lsrs	r2, r3, #3
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	3208      	adds	r2, #8
 80151e2:	69b9      	ldr	r1, [r7, #24]
 80151e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80151ee:	69fb      	ldr	r3, [r7, #28]
 80151f0:	005b      	lsls	r3, r3, #1
 80151f2:	2203      	movs	r2, #3
 80151f4:	fa02 f303 	lsl.w	r3, r2, r3
 80151f8:	43db      	mvns	r3, r3
 80151fa:	69ba      	ldr	r2, [r7, #24]
 80151fc:	4013      	ands	r3, r2
 80151fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	f003 0203 	and.w	r2, r3, #3
 8015208:	69fb      	ldr	r3, [r7, #28]
 801520a:	005b      	lsls	r3, r3, #1
 801520c:	fa02 f303 	lsl.w	r3, r2, r3
 8015210:	69ba      	ldr	r2, [r7, #24]
 8015212:	4313      	orrs	r3, r2
 8015214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	69ba      	ldr	r2, [r7, #24]
 801521a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	685b      	ldr	r3, [r3, #4]
 8015220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015224:	2b00      	cmp	r3, #0
 8015226:	f000 80b4 	beq.w	8015392 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801522a:	2300      	movs	r3, #0
 801522c:	60fb      	str	r3, [r7, #12]
 801522e:	4b60      	ldr	r3, [pc, #384]	; (80153b0 <HAL_GPIO_Init+0x30c>)
 8015230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015232:	4a5f      	ldr	r2, [pc, #380]	; (80153b0 <HAL_GPIO_Init+0x30c>)
 8015234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015238:	6453      	str	r3, [r2, #68]	; 0x44
 801523a:	4b5d      	ldr	r3, [pc, #372]	; (80153b0 <HAL_GPIO_Init+0x30c>)
 801523c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801523e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015242:	60fb      	str	r3, [r7, #12]
 8015244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015246:	4a5b      	ldr	r2, [pc, #364]	; (80153b4 <HAL_GPIO_Init+0x310>)
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	089b      	lsrs	r3, r3, #2
 801524c:	3302      	adds	r3, #2
 801524e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015254:	69fb      	ldr	r3, [r7, #28]
 8015256:	f003 0303 	and.w	r3, r3, #3
 801525a:	009b      	lsls	r3, r3, #2
 801525c:	220f      	movs	r2, #15
 801525e:	fa02 f303 	lsl.w	r3, r2, r3
 8015262:	43db      	mvns	r3, r3
 8015264:	69ba      	ldr	r2, [r7, #24]
 8015266:	4013      	ands	r3, r2
 8015268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	4a52      	ldr	r2, [pc, #328]	; (80153b8 <HAL_GPIO_Init+0x314>)
 801526e:	4293      	cmp	r3, r2
 8015270:	d02b      	beq.n	80152ca <HAL_GPIO_Init+0x226>
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	4a51      	ldr	r2, [pc, #324]	; (80153bc <HAL_GPIO_Init+0x318>)
 8015276:	4293      	cmp	r3, r2
 8015278:	d025      	beq.n	80152c6 <HAL_GPIO_Init+0x222>
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	4a50      	ldr	r2, [pc, #320]	; (80153c0 <HAL_GPIO_Init+0x31c>)
 801527e:	4293      	cmp	r3, r2
 8015280:	d01f      	beq.n	80152c2 <HAL_GPIO_Init+0x21e>
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	4a4f      	ldr	r2, [pc, #316]	; (80153c4 <HAL_GPIO_Init+0x320>)
 8015286:	4293      	cmp	r3, r2
 8015288:	d019      	beq.n	80152be <HAL_GPIO_Init+0x21a>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	4a4e      	ldr	r2, [pc, #312]	; (80153c8 <HAL_GPIO_Init+0x324>)
 801528e:	4293      	cmp	r3, r2
 8015290:	d013      	beq.n	80152ba <HAL_GPIO_Init+0x216>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	4a4d      	ldr	r2, [pc, #308]	; (80153cc <HAL_GPIO_Init+0x328>)
 8015296:	4293      	cmp	r3, r2
 8015298:	d00d      	beq.n	80152b6 <HAL_GPIO_Init+0x212>
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	4a4c      	ldr	r2, [pc, #304]	; (80153d0 <HAL_GPIO_Init+0x32c>)
 801529e:	4293      	cmp	r3, r2
 80152a0:	d007      	beq.n	80152b2 <HAL_GPIO_Init+0x20e>
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	4a4b      	ldr	r2, [pc, #300]	; (80153d4 <HAL_GPIO_Init+0x330>)
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d101      	bne.n	80152ae <HAL_GPIO_Init+0x20a>
 80152aa:	2307      	movs	r3, #7
 80152ac:	e00e      	b.n	80152cc <HAL_GPIO_Init+0x228>
 80152ae:	2308      	movs	r3, #8
 80152b0:	e00c      	b.n	80152cc <HAL_GPIO_Init+0x228>
 80152b2:	2306      	movs	r3, #6
 80152b4:	e00a      	b.n	80152cc <HAL_GPIO_Init+0x228>
 80152b6:	2305      	movs	r3, #5
 80152b8:	e008      	b.n	80152cc <HAL_GPIO_Init+0x228>
 80152ba:	2304      	movs	r3, #4
 80152bc:	e006      	b.n	80152cc <HAL_GPIO_Init+0x228>
 80152be:	2303      	movs	r3, #3
 80152c0:	e004      	b.n	80152cc <HAL_GPIO_Init+0x228>
 80152c2:	2302      	movs	r3, #2
 80152c4:	e002      	b.n	80152cc <HAL_GPIO_Init+0x228>
 80152c6:	2301      	movs	r3, #1
 80152c8:	e000      	b.n	80152cc <HAL_GPIO_Init+0x228>
 80152ca:	2300      	movs	r3, #0
 80152cc:	69fa      	ldr	r2, [r7, #28]
 80152ce:	f002 0203 	and.w	r2, r2, #3
 80152d2:	0092      	lsls	r2, r2, #2
 80152d4:	4093      	lsls	r3, r2
 80152d6:	69ba      	ldr	r2, [r7, #24]
 80152d8:	4313      	orrs	r3, r2
 80152da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80152dc:	4935      	ldr	r1, [pc, #212]	; (80153b4 <HAL_GPIO_Init+0x310>)
 80152de:	69fb      	ldr	r3, [r7, #28]
 80152e0:	089b      	lsrs	r3, r3, #2
 80152e2:	3302      	adds	r3, #2
 80152e4:	69ba      	ldr	r2, [r7, #24]
 80152e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80152ea:	4b3b      	ldr	r3, [pc, #236]	; (80153d8 <HAL_GPIO_Init+0x334>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	43db      	mvns	r3, r3
 80152f4:	69ba      	ldr	r2, [r7, #24]
 80152f6:	4013      	ands	r3, r2
 80152f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	685b      	ldr	r3, [r3, #4]
 80152fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015302:	2b00      	cmp	r3, #0
 8015304:	d003      	beq.n	801530e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8015306:	69ba      	ldr	r2, [r7, #24]
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	4313      	orrs	r3, r2
 801530c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801530e:	4a32      	ldr	r2, [pc, #200]	; (80153d8 <HAL_GPIO_Init+0x334>)
 8015310:	69bb      	ldr	r3, [r7, #24]
 8015312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8015314:	4b30      	ldr	r3, [pc, #192]	; (80153d8 <HAL_GPIO_Init+0x334>)
 8015316:	685b      	ldr	r3, [r3, #4]
 8015318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	43db      	mvns	r3, r3
 801531e:	69ba      	ldr	r2, [r7, #24]
 8015320:	4013      	ands	r3, r2
 8015322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	685b      	ldr	r3, [r3, #4]
 8015328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801532c:	2b00      	cmp	r3, #0
 801532e:	d003      	beq.n	8015338 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8015330:	69ba      	ldr	r2, [r7, #24]
 8015332:	693b      	ldr	r3, [r7, #16]
 8015334:	4313      	orrs	r3, r2
 8015336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015338:	4a27      	ldr	r2, [pc, #156]	; (80153d8 <HAL_GPIO_Init+0x334>)
 801533a:	69bb      	ldr	r3, [r7, #24]
 801533c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801533e:	4b26      	ldr	r3, [pc, #152]	; (80153d8 <HAL_GPIO_Init+0x334>)
 8015340:	689b      	ldr	r3, [r3, #8]
 8015342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	43db      	mvns	r3, r3
 8015348:	69ba      	ldr	r2, [r7, #24]
 801534a:	4013      	ands	r3, r2
 801534c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015356:	2b00      	cmp	r3, #0
 8015358:	d003      	beq.n	8015362 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801535a:	69ba      	ldr	r2, [r7, #24]
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	4313      	orrs	r3, r2
 8015360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015362:	4a1d      	ldr	r2, [pc, #116]	; (80153d8 <HAL_GPIO_Init+0x334>)
 8015364:	69bb      	ldr	r3, [r7, #24]
 8015366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015368:	4b1b      	ldr	r3, [pc, #108]	; (80153d8 <HAL_GPIO_Init+0x334>)
 801536a:	68db      	ldr	r3, [r3, #12]
 801536c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	43db      	mvns	r3, r3
 8015372:	69ba      	ldr	r2, [r7, #24]
 8015374:	4013      	ands	r3, r2
 8015376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	685b      	ldr	r3, [r3, #4]
 801537c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015380:	2b00      	cmp	r3, #0
 8015382:	d003      	beq.n	801538c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8015384:	69ba      	ldr	r2, [r7, #24]
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	4313      	orrs	r3, r2
 801538a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801538c:	4a12      	ldr	r2, [pc, #72]	; (80153d8 <HAL_GPIO_Init+0x334>)
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	3301      	adds	r3, #1
 8015396:	61fb      	str	r3, [r7, #28]
 8015398:	69fb      	ldr	r3, [r7, #28]
 801539a:	2b0f      	cmp	r3, #15
 801539c:	f67f ae90 	bls.w	80150c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80153a0:	bf00      	nop
 80153a2:	bf00      	nop
 80153a4:	3724      	adds	r7, #36	; 0x24
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr
 80153ae:	bf00      	nop
 80153b0:	40023800 	.word	0x40023800
 80153b4:	40013800 	.word	0x40013800
 80153b8:	40020000 	.word	0x40020000
 80153bc:	40020400 	.word	0x40020400
 80153c0:	40020800 	.word	0x40020800
 80153c4:	40020c00 	.word	0x40020c00
 80153c8:	40021000 	.word	0x40021000
 80153cc:	40021400 	.word	0x40021400
 80153d0:	40021800 	.word	0x40021800
 80153d4:	40021c00 	.word	0x40021c00
 80153d8:	40013c00 	.word	0x40013c00

080153dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80153dc:	b480      	push	{r7}
 80153de:	b085      	sub	sp, #20
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	460b      	mov	r3, r1
 80153e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	691a      	ldr	r2, [r3, #16]
 80153ec:	887b      	ldrh	r3, [r7, #2]
 80153ee:	4013      	ands	r3, r2
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d002      	beq.n	80153fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80153f4:	2301      	movs	r3, #1
 80153f6:	73fb      	strb	r3, [r7, #15]
 80153f8:	e001      	b.n	80153fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80153fa:	2300      	movs	r3, #0
 80153fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80153fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015400:	4618      	mov	r0, r3
 8015402:	3714      	adds	r7, #20
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr

0801540c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801540c:	b480      	push	{r7}
 801540e:	b083      	sub	sp, #12
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	460b      	mov	r3, r1
 8015416:	807b      	strh	r3, [r7, #2]
 8015418:	4613      	mov	r3, r2
 801541a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801541c:	787b      	ldrb	r3, [r7, #1]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d003      	beq.n	801542a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015422:	887a      	ldrh	r2, [r7, #2]
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015428:	e003      	b.n	8015432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801542a:	887b      	ldrh	r3, [r7, #2]
 801542c:	041a      	lsls	r2, r3, #16
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	619a      	str	r2, [r3, #24]
}
 8015432:	bf00      	nop
 8015434:	370c      	adds	r7, #12
 8015436:	46bd      	mov	sp, r7
 8015438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543c:	4770      	bx	lr
	...

08015440 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b082      	sub	sp, #8
 8015444:	af00      	add	r7, sp, #0
 8015446:	4603      	mov	r3, r0
 8015448:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801544a:	4b08      	ldr	r3, [pc, #32]	; (801546c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801544c:	695a      	ldr	r2, [r3, #20]
 801544e:	88fb      	ldrh	r3, [r7, #6]
 8015450:	4013      	ands	r3, r2
 8015452:	2b00      	cmp	r3, #0
 8015454:	d006      	beq.n	8015464 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015456:	4a05      	ldr	r2, [pc, #20]	; (801546c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8015458:	88fb      	ldrh	r3, [r7, #6]
 801545a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801545c:	88fb      	ldrh	r3, [r7, #6]
 801545e:	4618      	mov	r0, r3
 8015460:	f000 f806 	bl	8015470 <HAL_GPIO_EXTI_Callback>
  }
}
 8015464:	bf00      	nop
 8015466:	3708      	adds	r7, #8
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}
 801546c:	40013c00 	.word	0x40013c00

08015470 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8015470:	b480      	push	{r7}
 8015472:	b083      	sub	sp, #12
 8015474:	af00      	add	r7, sp, #0
 8015476:	4603      	mov	r3, r0
 8015478:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801547a:	bf00      	nop
 801547c:	370c      	adds	r7, #12
 801547e:	46bd      	mov	sp, r7
 8015480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015484:	4770      	bx	lr
	...

08015488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b084      	sub	sp, #16
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d101      	bne.n	801549a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015496:	2301      	movs	r3, #1
 8015498:	e12b      	b.n	80156f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d106      	bne.n	80154b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2200      	movs	r2, #0
 80154aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80154ae:	6878      	ldr	r0, [r7, #4]
 80154b0:	f7fe f802 	bl	80134b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2224      	movs	r2, #36	; 0x24
 80154b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	681a      	ldr	r2, [r3, #0]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	f022 0201 	bic.w	r2, r2, #1
 80154ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	681a      	ldr	r2, [r3, #0]
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80154da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80154ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80154ec:	f002 fd2e 	bl	8017f4c <HAL_RCC_GetPCLK1Freq>
 80154f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	4a81      	ldr	r2, [pc, #516]	; (80156fc <HAL_I2C_Init+0x274>)
 80154f8:	4293      	cmp	r3, r2
 80154fa:	d807      	bhi.n	801550c <HAL_I2C_Init+0x84>
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	4a80      	ldr	r2, [pc, #512]	; (8015700 <HAL_I2C_Init+0x278>)
 8015500:	4293      	cmp	r3, r2
 8015502:	bf94      	ite	ls
 8015504:	2301      	movls	r3, #1
 8015506:	2300      	movhi	r3, #0
 8015508:	b2db      	uxtb	r3, r3
 801550a:	e006      	b.n	801551a <HAL_I2C_Init+0x92>
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	4a7d      	ldr	r2, [pc, #500]	; (8015704 <HAL_I2C_Init+0x27c>)
 8015510:	4293      	cmp	r3, r2
 8015512:	bf94      	ite	ls
 8015514:	2301      	movls	r3, #1
 8015516:	2300      	movhi	r3, #0
 8015518:	b2db      	uxtb	r3, r3
 801551a:	2b00      	cmp	r3, #0
 801551c:	d001      	beq.n	8015522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801551e:	2301      	movs	r3, #1
 8015520:	e0e7      	b.n	80156f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	4a78      	ldr	r2, [pc, #480]	; (8015708 <HAL_I2C_Init+0x280>)
 8015526:	fba2 2303 	umull	r2, r3, r2, r3
 801552a:	0c9b      	lsrs	r3, r3, #18
 801552c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	68ba      	ldr	r2, [r7, #8]
 801553e:	430a      	orrs	r2, r1
 8015540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	6a1b      	ldr	r3, [r3, #32]
 8015548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	685b      	ldr	r3, [r3, #4]
 8015550:	4a6a      	ldr	r2, [pc, #424]	; (80156fc <HAL_I2C_Init+0x274>)
 8015552:	4293      	cmp	r3, r2
 8015554:	d802      	bhi.n	801555c <HAL_I2C_Init+0xd4>
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	3301      	adds	r3, #1
 801555a:	e009      	b.n	8015570 <HAL_I2C_Init+0xe8>
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015562:	fb02 f303 	mul.w	r3, r2, r3
 8015566:	4a69      	ldr	r2, [pc, #420]	; (801570c <HAL_I2C_Init+0x284>)
 8015568:	fba2 2303 	umull	r2, r3, r2, r3
 801556c:	099b      	lsrs	r3, r3, #6
 801556e:	3301      	adds	r3, #1
 8015570:	687a      	ldr	r2, [r7, #4]
 8015572:	6812      	ldr	r2, [r2, #0]
 8015574:	430b      	orrs	r3, r1
 8015576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	69db      	ldr	r3, [r3, #28]
 801557e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8015582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	495c      	ldr	r1, [pc, #368]	; (80156fc <HAL_I2C_Init+0x274>)
 801558c:	428b      	cmp	r3, r1
 801558e:	d819      	bhi.n	80155c4 <HAL_I2C_Init+0x13c>
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	1e59      	subs	r1, r3, #1
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	005b      	lsls	r3, r3, #1
 801559a:	fbb1 f3f3 	udiv	r3, r1, r3
 801559e:	1c59      	adds	r1, r3, #1
 80155a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80155a4:	400b      	ands	r3, r1
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d00a      	beq.n	80155c0 <HAL_I2C_Init+0x138>
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	1e59      	subs	r1, r3, #1
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	005b      	lsls	r3, r3, #1
 80155b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80155b8:	3301      	adds	r3, #1
 80155ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80155be:	e051      	b.n	8015664 <HAL_I2C_Init+0x1dc>
 80155c0:	2304      	movs	r3, #4
 80155c2:	e04f      	b.n	8015664 <HAL_I2C_Init+0x1dc>
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	689b      	ldr	r3, [r3, #8]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d111      	bne.n	80155f0 <HAL_I2C_Init+0x168>
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	1e58      	subs	r0, r3, #1
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6859      	ldr	r1, [r3, #4]
 80155d4:	460b      	mov	r3, r1
 80155d6:	005b      	lsls	r3, r3, #1
 80155d8:	440b      	add	r3, r1
 80155da:	fbb0 f3f3 	udiv	r3, r0, r3
 80155de:	3301      	adds	r3, #1
 80155e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	bf0c      	ite	eq
 80155e8:	2301      	moveq	r3, #1
 80155ea:	2300      	movne	r3, #0
 80155ec:	b2db      	uxtb	r3, r3
 80155ee:	e012      	b.n	8015616 <HAL_I2C_Init+0x18e>
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	1e58      	subs	r0, r3, #1
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6859      	ldr	r1, [r3, #4]
 80155f8:	460b      	mov	r3, r1
 80155fa:	009b      	lsls	r3, r3, #2
 80155fc:	440b      	add	r3, r1
 80155fe:	0099      	lsls	r1, r3, #2
 8015600:	440b      	add	r3, r1
 8015602:	fbb0 f3f3 	udiv	r3, r0, r3
 8015606:	3301      	adds	r3, #1
 8015608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801560c:	2b00      	cmp	r3, #0
 801560e:	bf0c      	ite	eq
 8015610:	2301      	moveq	r3, #1
 8015612:	2300      	movne	r3, #0
 8015614:	b2db      	uxtb	r3, r3
 8015616:	2b00      	cmp	r3, #0
 8015618:	d001      	beq.n	801561e <HAL_I2C_Init+0x196>
 801561a:	2301      	movs	r3, #1
 801561c:	e022      	b.n	8015664 <HAL_I2C_Init+0x1dc>
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	689b      	ldr	r3, [r3, #8]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d10e      	bne.n	8015644 <HAL_I2C_Init+0x1bc>
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	1e58      	subs	r0, r3, #1
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6859      	ldr	r1, [r3, #4]
 801562e:	460b      	mov	r3, r1
 8015630:	005b      	lsls	r3, r3, #1
 8015632:	440b      	add	r3, r1
 8015634:	fbb0 f3f3 	udiv	r3, r0, r3
 8015638:	3301      	adds	r3, #1
 801563a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801563e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015642:	e00f      	b.n	8015664 <HAL_I2C_Init+0x1dc>
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	1e58      	subs	r0, r3, #1
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6859      	ldr	r1, [r3, #4]
 801564c:	460b      	mov	r3, r1
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	440b      	add	r3, r1
 8015652:	0099      	lsls	r1, r3, #2
 8015654:	440b      	add	r3, r1
 8015656:	fbb0 f3f3 	udiv	r3, r0, r3
 801565a:	3301      	adds	r3, #1
 801565c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015664:	6879      	ldr	r1, [r7, #4]
 8015666:	6809      	ldr	r1, [r1, #0]
 8015668:	4313      	orrs	r3, r2
 801566a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	69da      	ldr	r2, [r3, #28]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	6a1b      	ldr	r3, [r3, #32]
 801567e:	431a      	orrs	r2, r3
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	430a      	orrs	r2, r1
 8015686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	689b      	ldr	r3, [r3, #8]
 801568e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8015692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8015696:	687a      	ldr	r2, [r7, #4]
 8015698:	6911      	ldr	r1, [r2, #16]
 801569a:	687a      	ldr	r2, [r7, #4]
 801569c:	68d2      	ldr	r2, [r2, #12]
 801569e:	4311      	orrs	r1, r2
 80156a0:	687a      	ldr	r2, [r7, #4]
 80156a2:	6812      	ldr	r2, [r2, #0]
 80156a4:	430b      	orrs	r3, r1
 80156a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	68db      	ldr	r3, [r3, #12]
 80156ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	695a      	ldr	r2, [r3, #20]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	699b      	ldr	r3, [r3, #24]
 80156ba:	431a      	orrs	r2, r3
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	430a      	orrs	r2, r1
 80156c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	681a      	ldr	r2, [r3, #0]
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	f042 0201 	orr.w	r2, r2, #1
 80156d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2200      	movs	r2, #0
 80156d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2220      	movs	r2, #32
 80156de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	2200      	movs	r2, #0
 80156e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80156f0:	2300      	movs	r3, #0
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3710      	adds	r7, #16
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}
 80156fa:	bf00      	nop
 80156fc:	000186a0 	.word	0x000186a0
 8015700:	001e847f 	.word	0x001e847f
 8015704:	003d08ff 	.word	0x003d08ff
 8015708:	431bde83 	.word	0x431bde83
 801570c:	10624dd3 	.word	0x10624dd3

08015710 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b088      	sub	sp, #32
 8015714:	af02      	add	r7, sp, #8
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	607a      	str	r2, [r7, #4]
 801571a:	461a      	mov	r2, r3
 801571c:	460b      	mov	r3, r1
 801571e:	817b      	strh	r3, [r7, #10]
 8015720:	4613      	mov	r3, r2
 8015722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8015724:	f7fe fa66 	bl	8013bf4 <HAL_GetTick>
 8015728:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015730:	b2db      	uxtb	r3, r3
 8015732:	2b20      	cmp	r3, #32
 8015734:	f040 80e0 	bne.w	80158f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	9300      	str	r3, [sp, #0]
 801573c:	2319      	movs	r3, #25
 801573e:	2201      	movs	r2, #1
 8015740:	4970      	ldr	r1, [pc, #448]	; (8015904 <HAL_I2C_Master_Transmit+0x1f4>)
 8015742:	68f8      	ldr	r0, [r7, #12]
 8015744:	f000 fc58 	bl	8015ff8 <I2C_WaitOnFlagUntilTimeout>
 8015748:	4603      	mov	r3, r0
 801574a:	2b00      	cmp	r3, #0
 801574c:	d001      	beq.n	8015752 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801574e:	2302      	movs	r3, #2
 8015750:	e0d3      	b.n	80158fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015758:	2b01      	cmp	r3, #1
 801575a:	d101      	bne.n	8015760 <HAL_I2C_Master_Transmit+0x50>
 801575c:	2302      	movs	r3, #2
 801575e:	e0cc      	b.n	80158fa <HAL_I2C_Master_Transmit+0x1ea>
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2201      	movs	r2, #1
 8015764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	f003 0301 	and.w	r3, r3, #1
 8015772:	2b01      	cmp	r3, #1
 8015774:	d007      	beq.n	8015786 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	681a      	ldr	r2, [r3, #0]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	f042 0201 	orr.w	r2, r2, #1
 8015784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	681a      	ldr	r2, [r3, #0]
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	2221      	movs	r2, #33	; 0x21
 801579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2210      	movs	r2, #16
 80157a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	2200      	movs	r2, #0
 80157aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	893a      	ldrh	r2, [r7, #8]
 80157b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80157bc:	b29a      	uxth	r2, r3
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	4a50      	ldr	r2, [pc, #320]	; (8015908 <HAL_I2C_Master_Transmit+0x1f8>)
 80157c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80157c8:	8979      	ldrh	r1, [r7, #10]
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	6a3a      	ldr	r2, [r7, #32]
 80157ce:	68f8      	ldr	r0, [r7, #12]
 80157d0:	f000 fac2 	bl	8015d58 <I2C_MasterRequestWrite>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d001      	beq.n	80157de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80157da:	2301      	movs	r3, #1
 80157dc:	e08d      	b.n	80158fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80157de:	2300      	movs	r3, #0
 80157e0:	613b      	str	r3, [r7, #16]
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	695b      	ldr	r3, [r3, #20]
 80157e8:	613b      	str	r3, [r7, #16]
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	699b      	ldr	r3, [r3, #24]
 80157f0:	613b      	str	r3, [r7, #16]
 80157f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80157f4:	e066      	b.n	80158c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80157f6:	697a      	ldr	r2, [r7, #20]
 80157f8:	6a39      	ldr	r1, [r7, #32]
 80157fa:	68f8      	ldr	r0, [r7, #12]
 80157fc:	f000 fcd2 	bl	80161a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8015800:	4603      	mov	r3, r0
 8015802:	2b00      	cmp	r3, #0
 8015804:	d00d      	beq.n	8015822 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801580a:	2b04      	cmp	r3, #4
 801580c:	d107      	bne.n	801581e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	681a      	ldr	r2, [r3, #0]
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801581c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801581e:	2301      	movs	r3, #1
 8015820:	e06b      	b.n	80158fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015826:	781a      	ldrb	r2, [r3, #0]
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015832:	1c5a      	adds	r2, r3, #1
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801583c:	b29b      	uxth	r3, r3
 801583e:	3b01      	subs	r3, #1
 8015840:	b29a      	uxth	r2, r3
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801584a:	3b01      	subs	r3, #1
 801584c:	b29a      	uxth	r2, r3
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	695b      	ldr	r3, [r3, #20]
 8015858:	f003 0304 	and.w	r3, r3, #4
 801585c:	2b04      	cmp	r3, #4
 801585e:	d11b      	bne.n	8015898 <HAL_I2C_Master_Transmit+0x188>
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015864:	2b00      	cmp	r3, #0
 8015866:	d017      	beq.n	8015898 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801586c:	781a      	ldrb	r2, [r3, #0]
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015878:	1c5a      	adds	r2, r3, #1
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015882:	b29b      	uxth	r3, r3
 8015884:	3b01      	subs	r3, #1
 8015886:	b29a      	uxth	r2, r3
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015890:	3b01      	subs	r3, #1
 8015892:	b29a      	uxth	r2, r3
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015898:	697a      	ldr	r2, [r7, #20]
 801589a:	6a39      	ldr	r1, [r7, #32]
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f000 fcc2 	bl	8016226 <I2C_WaitOnBTFFlagUntilTimeout>
 80158a2:	4603      	mov	r3, r0
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d00d      	beq.n	80158c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158ac:	2b04      	cmp	r3, #4
 80158ae:	d107      	bne.n	80158c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	681a      	ldr	r2, [r3, #0]
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80158be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80158c0:	2301      	movs	r3, #1
 80158c2:	e01a      	b.n	80158fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d194      	bne.n	80157f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80158da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	2220      	movs	r2, #32
 80158e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	2200      	movs	r2, #0
 80158e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	2200      	movs	r2, #0
 80158f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80158f4:	2300      	movs	r3, #0
 80158f6:	e000      	b.n	80158fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80158f8:	2302      	movs	r3, #2
  }
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3718      	adds	r7, #24
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	00100002 	.word	0x00100002
 8015908:	ffff0000 	.word	0xffff0000

0801590c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b08c      	sub	sp, #48	; 0x30
 8015910:	af02      	add	r7, sp, #8
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	607a      	str	r2, [r7, #4]
 8015916:	461a      	mov	r2, r3
 8015918:	460b      	mov	r3, r1
 801591a:	817b      	strh	r3, [r7, #10]
 801591c:	4613      	mov	r3, r2
 801591e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8015920:	f7fe f968 	bl	8013bf4 <HAL_GetTick>
 8015924:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801592c:	b2db      	uxtb	r3, r3
 801592e:	2b20      	cmp	r3, #32
 8015930:	f040 820b 	bne.w	8015d4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015936:	9300      	str	r3, [sp, #0]
 8015938:	2319      	movs	r3, #25
 801593a:	2201      	movs	r2, #1
 801593c:	497c      	ldr	r1, [pc, #496]	; (8015b30 <HAL_I2C_Master_Receive+0x224>)
 801593e:	68f8      	ldr	r0, [r7, #12]
 8015940:	f000 fb5a 	bl	8015ff8 <I2C_WaitOnFlagUntilTimeout>
 8015944:	4603      	mov	r3, r0
 8015946:	2b00      	cmp	r3, #0
 8015948:	d001      	beq.n	801594e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 801594a:	2302      	movs	r3, #2
 801594c:	e1fe      	b.n	8015d4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015954:	2b01      	cmp	r3, #1
 8015956:	d101      	bne.n	801595c <HAL_I2C_Master_Receive+0x50>
 8015958:	2302      	movs	r3, #2
 801595a:	e1f7      	b.n	8015d4c <HAL_I2C_Master_Receive+0x440>
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	2201      	movs	r2, #1
 8015960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	f003 0301 	and.w	r3, r3, #1
 801596e:	2b01      	cmp	r3, #1
 8015970:	d007      	beq.n	8015982 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	681a      	ldr	r2, [r3, #0]
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	f042 0201 	orr.w	r2, r2, #1
 8015980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	681a      	ldr	r2, [r3, #0]
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015990:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	2222      	movs	r2, #34	; 0x22
 8015996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2210      	movs	r2, #16
 801599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2200      	movs	r2, #0
 80159a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	687a      	ldr	r2, [r7, #4]
 80159ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	893a      	ldrh	r2, [r7, #8]
 80159b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80159b8:	b29a      	uxth	r2, r3
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	4a5c      	ldr	r2, [pc, #368]	; (8015b34 <HAL_I2C_Master_Receive+0x228>)
 80159c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80159c4:	8979      	ldrh	r1, [r7, #10]
 80159c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159ca:	68f8      	ldr	r0, [r7, #12]
 80159cc:	f000 fa46 	bl	8015e5c <I2C_MasterRequestRead>
 80159d0:	4603      	mov	r3, r0
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d001      	beq.n	80159da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80159d6:	2301      	movs	r3, #1
 80159d8:	e1b8      	b.n	8015d4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d113      	bne.n	8015a0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80159e2:	2300      	movs	r3, #0
 80159e4:	623b      	str	r3, [r7, #32]
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	695b      	ldr	r3, [r3, #20]
 80159ec:	623b      	str	r3, [r7, #32]
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	699b      	ldr	r3, [r3, #24]
 80159f4:	623b      	str	r3, [r7, #32]
 80159f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	681a      	ldr	r2, [r3, #0]
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015a06:	601a      	str	r2, [r3, #0]
 8015a08:	e18c      	b.n	8015d24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a0e:	2b01      	cmp	r3, #1
 8015a10:	d11b      	bne.n	8015a4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	681a      	ldr	r2, [r3, #0]
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015a20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015a22:	2300      	movs	r3, #0
 8015a24:	61fb      	str	r3, [r7, #28]
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	695b      	ldr	r3, [r3, #20]
 8015a2c:	61fb      	str	r3, [r7, #28]
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	699b      	ldr	r3, [r3, #24]
 8015a34:	61fb      	str	r3, [r7, #28]
 8015a36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	681a      	ldr	r2, [r3, #0]
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015a46:	601a      	str	r2, [r3, #0]
 8015a48:	e16c      	b.n	8015d24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a4e:	2b02      	cmp	r3, #2
 8015a50:	d11b      	bne.n	8015a8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	681a      	ldr	r2, [r3, #0]
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015a60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	681a      	ldr	r2, [r3, #0]
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015a72:	2300      	movs	r3, #0
 8015a74:	61bb      	str	r3, [r7, #24]
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	695b      	ldr	r3, [r3, #20]
 8015a7c:	61bb      	str	r3, [r7, #24]
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	699b      	ldr	r3, [r3, #24]
 8015a84:	61bb      	str	r3, [r7, #24]
 8015a86:	69bb      	ldr	r3, [r7, #24]
 8015a88:	e14c      	b.n	8015d24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	681a      	ldr	r2, [r3, #0]
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015a98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	617b      	str	r3, [r7, #20]
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	695b      	ldr	r3, [r3, #20]
 8015aa4:	617b      	str	r3, [r7, #20]
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	699b      	ldr	r3, [r3, #24]
 8015aac:	617b      	str	r3, [r7, #20]
 8015aae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8015ab0:	e138      	b.n	8015d24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ab6:	2b03      	cmp	r3, #3
 8015ab8:	f200 80f1 	bhi.w	8015c9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ac0:	2b01      	cmp	r3, #1
 8015ac2:	d123      	bne.n	8015b0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015ac8:	68f8      	ldr	r0, [r7, #12]
 8015aca:	f000 fbed 	bl	80162a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d001      	beq.n	8015ad8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	e139      	b.n	8015d4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	691a      	ldr	r2, [r3, #16]
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae2:	b2d2      	uxtb	r2, r2
 8015ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aea:	1c5a      	adds	r2, r3, #1
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015af4:	3b01      	subs	r3, #1
 8015af6:	b29a      	uxth	r2, r3
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b00:	b29b      	uxth	r3, r3
 8015b02:	3b01      	subs	r3, #1
 8015b04:	b29a      	uxth	r2, r3
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015b0a:	e10b      	b.n	8015d24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b10:	2b02      	cmp	r3, #2
 8015b12:	d14e      	bne.n	8015bb2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8015b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b16:	9300      	str	r3, [sp, #0]
 8015b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	4906      	ldr	r1, [pc, #24]	; (8015b38 <HAL_I2C_Master_Receive+0x22c>)
 8015b1e:	68f8      	ldr	r0, [r7, #12]
 8015b20:	f000 fa6a 	bl	8015ff8 <I2C_WaitOnFlagUntilTimeout>
 8015b24:	4603      	mov	r3, r0
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d008      	beq.n	8015b3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	e10e      	b.n	8015d4c <HAL_I2C_Master_Receive+0x440>
 8015b2e:	bf00      	nop
 8015b30:	00100002 	.word	0x00100002
 8015b34:	ffff0000 	.word	0xffff0000
 8015b38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	691a      	ldr	r2, [r3, #16]
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b56:	b2d2      	uxtb	r2, r2
 8015b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b5e:	1c5a      	adds	r2, r3, #1
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b68:	3b01      	subs	r3, #1
 8015b6a:	b29a      	uxth	r2, r3
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b74:	b29b      	uxth	r3, r3
 8015b76:	3b01      	subs	r3, #1
 8015b78:	b29a      	uxth	r2, r3
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	691a      	ldr	r2, [r3, #16]
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b88:	b2d2      	uxtb	r2, r2
 8015b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b90:	1c5a      	adds	r2, r3, #1
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b9a:	3b01      	subs	r3, #1
 8015b9c:	b29a      	uxth	r2, r3
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ba6:	b29b      	uxth	r3, r3
 8015ba8:	3b01      	subs	r3, #1
 8015baa:	b29a      	uxth	r2, r3
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015bb0:	e0b8      	b.n	8015d24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8015bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb4:	9300      	str	r3, [sp, #0]
 8015bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb8:	2200      	movs	r2, #0
 8015bba:	4966      	ldr	r1, [pc, #408]	; (8015d54 <HAL_I2C_Master_Receive+0x448>)
 8015bbc:	68f8      	ldr	r0, [r7, #12]
 8015bbe:	f000 fa1b 	bl	8015ff8 <I2C_WaitOnFlagUntilTimeout>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d001      	beq.n	8015bcc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8015bc8:	2301      	movs	r3, #1
 8015bca:	e0bf      	b.n	8015d4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	691a      	ldr	r2, [r3, #16]
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be6:	b2d2      	uxtb	r2, r2
 8015be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bee:	1c5a      	adds	r2, r3, #1
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bf8:	3b01      	subs	r3, #1
 8015bfa:	b29a      	uxth	r2, r3
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	3b01      	subs	r3, #1
 8015c08:	b29a      	uxth	r2, r3
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8015c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c14:	2200      	movs	r2, #0
 8015c16:	494f      	ldr	r1, [pc, #316]	; (8015d54 <HAL_I2C_Master_Receive+0x448>)
 8015c18:	68f8      	ldr	r0, [r7, #12]
 8015c1a:	f000 f9ed 	bl	8015ff8 <I2C_WaitOnFlagUntilTimeout>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d001      	beq.n	8015c28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8015c24:	2301      	movs	r3, #1
 8015c26:	e091      	b.n	8015d4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	681a      	ldr	r2, [r3, #0]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	691a      	ldr	r2, [r3, #16]
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c42:	b2d2      	uxtb	r2, r2
 8015c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c4a:	1c5a      	adds	r2, r3, #1
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c54:	3b01      	subs	r3, #1
 8015c56:	b29a      	uxth	r2, r3
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	3b01      	subs	r3, #1
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	691a      	ldr	r2, [r3, #16]
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c74:	b2d2      	uxtb	r2, r2
 8015c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c7c:	1c5a      	adds	r2, r3, #1
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c86:	3b01      	subs	r3, #1
 8015c88:	b29a      	uxth	r2, r3
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	3b01      	subs	r3, #1
 8015c96:	b29a      	uxth	r2, r3
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015c9c:	e042      	b.n	8015d24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015ca2:	68f8      	ldr	r0, [r7, #12]
 8015ca4:	f000 fb00 	bl	80162a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d001      	beq.n	8015cb2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8015cae:	2301      	movs	r3, #1
 8015cb0:	e04c      	b.n	8015d4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	691a      	ldr	r2, [r3, #16]
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cbc:	b2d2      	uxtb	r2, r2
 8015cbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc4:	1c5a      	adds	r2, r3, #1
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cce:	3b01      	subs	r3, #1
 8015cd0:	b29a      	uxth	r2, r3
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	3b01      	subs	r3, #1
 8015cde:	b29a      	uxth	r2, r3
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	695b      	ldr	r3, [r3, #20]
 8015cea:	f003 0304 	and.w	r3, r3, #4
 8015cee:	2b04      	cmp	r3, #4
 8015cf0:	d118      	bne.n	8015d24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	691a      	ldr	r2, [r3, #16]
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cfc:	b2d2      	uxtb	r2, r2
 8015cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d04:	1c5a      	adds	r2, r3, #1
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d0e:	3b01      	subs	r3, #1
 8015d10:	b29a      	uxth	r2, r3
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d1a:	b29b      	uxth	r3, r3
 8015d1c:	3b01      	subs	r3, #1
 8015d1e:	b29a      	uxth	r2, r3
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	f47f aec2 	bne.w	8015ab2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	2220      	movs	r2, #32
 8015d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	2200      	movs	r2, #0
 8015d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	2200      	movs	r2, #0
 8015d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8015d46:	2300      	movs	r3, #0
 8015d48:	e000      	b.n	8015d4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8015d4a:	2302      	movs	r3, #2
  }
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3728      	adds	r7, #40	; 0x28
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}
 8015d54:	00010004 	.word	0x00010004

08015d58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b088      	sub	sp, #32
 8015d5c:	af02      	add	r7, sp, #8
 8015d5e:	60f8      	str	r0, [r7, #12]
 8015d60:	607a      	str	r2, [r7, #4]
 8015d62:	603b      	str	r3, [r7, #0]
 8015d64:	460b      	mov	r3, r1
 8015d66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8015d6e:	697b      	ldr	r3, [r7, #20]
 8015d70:	2b08      	cmp	r3, #8
 8015d72:	d006      	beq.n	8015d82 <I2C_MasterRequestWrite+0x2a>
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	2b01      	cmp	r3, #1
 8015d78:	d003      	beq.n	8015d82 <I2C_MasterRequestWrite+0x2a>
 8015d7a:	697b      	ldr	r3, [r7, #20]
 8015d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8015d80:	d108      	bne.n	8015d94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	681a      	ldr	r2, [r3, #0]
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015d90:	601a      	str	r2, [r3, #0]
 8015d92:	e00b      	b.n	8015dac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d98:	2b12      	cmp	r3, #18
 8015d9a:	d107      	bne.n	8015dac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	681a      	ldr	r2, [r3, #0]
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015daa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	9300      	str	r3, [sp, #0]
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2200      	movs	r2, #0
 8015db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8015db8:	68f8      	ldr	r0, [r7, #12]
 8015dba:	f000 f91d 	bl	8015ff8 <I2C_WaitOnFlagUntilTimeout>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d00d      	beq.n	8015de0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015dd2:	d103      	bne.n	8015ddc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8015ddc:	2303      	movs	r3, #3
 8015dde:	e035      	b.n	8015e4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	691b      	ldr	r3, [r3, #16]
 8015de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015de8:	d108      	bne.n	8015dfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8015dea:	897b      	ldrh	r3, [r7, #10]
 8015dec:	b2db      	uxtb	r3, r3
 8015dee:	461a      	mov	r2, r3
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8015df8:	611a      	str	r2, [r3, #16]
 8015dfa:	e01b      	b.n	8015e34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8015dfc:	897b      	ldrh	r3, [r7, #10]
 8015dfe:	11db      	asrs	r3, r3, #7
 8015e00:	b2db      	uxtb	r3, r3
 8015e02:	f003 0306 	and.w	r3, r3, #6
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	f063 030f 	orn	r3, r3, #15
 8015e0c:	b2da      	uxtb	r2, r3
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	490e      	ldr	r1, [pc, #56]	; (8015e54 <I2C_MasterRequestWrite+0xfc>)
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	f000 f943 	bl	80160a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015e20:	4603      	mov	r3, r0
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d001      	beq.n	8015e2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8015e26:	2301      	movs	r3, #1
 8015e28:	e010      	b.n	8015e4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8015e2a:	897b      	ldrh	r3, [r7, #10]
 8015e2c:	b2da      	uxtb	r2, r3
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	687a      	ldr	r2, [r7, #4]
 8015e38:	4907      	ldr	r1, [pc, #28]	; (8015e58 <I2C_MasterRequestWrite+0x100>)
 8015e3a:	68f8      	ldr	r0, [r7, #12]
 8015e3c:	f000 f933 	bl	80160a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015e40:	4603      	mov	r3, r0
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d001      	beq.n	8015e4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8015e46:	2301      	movs	r3, #1
 8015e48:	e000      	b.n	8015e4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8015e4a:	2300      	movs	r3, #0
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	3718      	adds	r7, #24
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}
 8015e54:	00010008 	.word	0x00010008
 8015e58:	00010002 	.word	0x00010002

08015e5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b088      	sub	sp, #32
 8015e60:	af02      	add	r7, sp, #8
 8015e62:	60f8      	str	r0, [r7, #12]
 8015e64:	607a      	str	r2, [r7, #4]
 8015e66:	603b      	str	r3, [r7, #0]
 8015e68:	460b      	mov	r3, r1
 8015e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	681a      	ldr	r2, [r3, #0]
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015e80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8015e82:	697b      	ldr	r3, [r7, #20]
 8015e84:	2b08      	cmp	r3, #8
 8015e86:	d006      	beq.n	8015e96 <I2C_MasterRequestRead+0x3a>
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	2b01      	cmp	r3, #1
 8015e8c:	d003      	beq.n	8015e96 <I2C_MasterRequestRead+0x3a>
 8015e8e:	697b      	ldr	r3, [r7, #20]
 8015e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8015e94:	d108      	bne.n	8015ea8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015ea4:	601a      	str	r2, [r3, #0]
 8015ea6:	e00b      	b.n	8015ec0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015eac:	2b11      	cmp	r3, #17
 8015eae:	d107      	bne.n	8015ec0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	681a      	ldr	r2, [r3, #0]
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015ebe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	9300      	str	r3, [sp, #0]
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	f000 f893 	bl	8015ff8 <I2C_WaitOnFlagUntilTimeout>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d00d      	beq.n	8015ef4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ee6:	d103      	bne.n	8015ef0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8015ef0:	2303      	movs	r3, #3
 8015ef2:	e079      	b.n	8015fe8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	691b      	ldr	r3, [r3, #16]
 8015ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015efc:	d108      	bne.n	8015f10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8015efe:	897b      	ldrh	r3, [r7, #10]
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	f043 0301 	orr.w	r3, r3, #1
 8015f06:	b2da      	uxtb	r2, r3
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	611a      	str	r2, [r3, #16]
 8015f0e:	e05f      	b.n	8015fd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8015f10:	897b      	ldrh	r3, [r7, #10]
 8015f12:	11db      	asrs	r3, r3, #7
 8015f14:	b2db      	uxtb	r3, r3
 8015f16:	f003 0306 	and.w	r3, r3, #6
 8015f1a:	b2db      	uxtb	r3, r3
 8015f1c:	f063 030f 	orn	r3, r3, #15
 8015f20:	b2da      	uxtb	r2, r3
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	687a      	ldr	r2, [r7, #4]
 8015f2c:	4930      	ldr	r1, [pc, #192]	; (8015ff0 <I2C_MasterRequestRead+0x194>)
 8015f2e:	68f8      	ldr	r0, [r7, #12]
 8015f30:	f000 f8b9 	bl	80160a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d001      	beq.n	8015f3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	e054      	b.n	8015fe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8015f3e:	897b      	ldrh	r3, [r7, #10]
 8015f40:	b2da      	uxtb	r2, r3
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8015f48:	683b      	ldr	r3, [r7, #0]
 8015f4a:	687a      	ldr	r2, [r7, #4]
 8015f4c:	4929      	ldr	r1, [pc, #164]	; (8015ff4 <I2C_MasterRequestRead+0x198>)
 8015f4e:	68f8      	ldr	r0, [r7, #12]
 8015f50:	f000 f8a9 	bl	80160a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015f54:	4603      	mov	r3, r0
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d001      	beq.n	8015f5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8015f5a:	2301      	movs	r3, #1
 8015f5c:	e044      	b.n	8015fe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015f5e:	2300      	movs	r3, #0
 8015f60:	613b      	str	r3, [r7, #16]
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	695b      	ldr	r3, [r3, #20]
 8015f68:	613b      	str	r3, [r7, #16]
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	699b      	ldr	r3, [r3, #24]
 8015f70:	613b      	str	r3, [r7, #16]
 8015f72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015f82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	9300      	str	r3, [sp, #0]
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8015f90:	68f8      	ldr	r0, [r7, #12]
 8015f92:	f000 f831 	bl	8015ff8 <I2C_WaitOnFlagUntilTimeout>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d00d      	beq.n	8015fb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015faa:	d103      	bne.n	8015fb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015fb2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8015fb4:	2303      	movs	r3, #3
 8015fb6:	e017      	b.n	8015fe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8015fb8:	897b      	ldrh	r3, [r7, #10]
 8015fba:	11db      	asrs	r3, r3, #7
 8015fbc:	b2db      	uxtb	r3, r3
 8015fbe:	f003 0306 	and.w	r3, r3, #6
 8015fc2:	b2db      	uxtb	r3, r3
 8015fc4:	f063 030e 	orn	r3, r3, #14
 8015fc8:	b2da      	uxtb	r2, r3
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	4907      	ldr	r1, [pc, #28]	; (8015ff4 <I2C_MasterRequestRead+0x198>)
 8015fd6:	68f8      	ldr	r0, [r7, #12]
 8015fd8:	f000 f865 	bl	80160a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d001      	beq.n	8015fe6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8015fe2:	2301      	movs	r3, #1
 8015fe4:	e000      	b.n	8015fe8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8015fe6:	2300      	movs	r3, #0
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3718      	adds	r7, #24
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	00010008 	.word	0x00010008
 8015ff4:	00010002 	.word	0x00010002

08015ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	60b9      	str	r1, [r7, #8]
 8016002:	603b      	str	r3, [r7, #0]
 8016004:	4613      	mov	r3, r2
 8016006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016008:	e025      	b.n	8016056 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016010:	d021      	beq.n	8016056 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016012:	f7fd fdef 	bl	8013bf4 <HAL_GetTick>
 8016016:	4602      	mov	r2, r0
 8016018:	69bb      	ldr	r3, [r7, #24]
 801601a:	1ad3      	subs	r3, r2, r3
 801601c:	683a      	ldr	r2, [r7, #0]
 801601e:	429a      	cmp	r2, r3
 8016020:	d302      	bcc.n	8016028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d116      	bne.n	8016056 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	2200      	movs	r2, #0
 801602c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	2220      	movs	r2, #32
 8016032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	2200      	movs	r2, #0
 801603a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016042:	f043 0220 	orr.w	r2, r3, #32
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	2200      	movs	r2, #0
 801604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8016052:	2301      	movs	r3, #1
 8016054:	e023      	b.n	801609e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016056:	68bb      	ldr	r3, [r7, #8]
 8016058:	0c1b      	lsrs	r3, r3, #16
 801605a:	b2db      	uxtb	r3, r3
 801605c:	2b01      	cmp	r3, #1
 801605e:	d10d      	bne.n	801607c <I2C_WaitOnFlagUntilTimeout+0x84>
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	695b      	ldr	r3, [r3, #20]
 8016066:	43da      	mvns	r2, r3
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	4013      	ands	r3, r2
 801606c:	b29b      	uxth	r3, r3
 801606e:	2b00      	cmp	r3, #0
 8016070:	bf0c      	ite	eq
 8016072:	2301      	moveq	r3, #1
 8016074:	2300      	movne	r3, #0
 8016076:	b2db      	uxtb	r3, r3
 8016078:	461a      	mov	r2, r3
 801607a:	e00c      	b.n	8016096 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	699b      	ldr	r3, [r3, #24]
 8016082:	43da      	mvns	r2, r3
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	4013      	ands	r3, r2
 8016088:	b29b      	uxth	r3, r3
 801608a:	2b00      	cmp	r3, #0
 801608c:	bf0c      	ite	eq
 801608e:	2301      	moveq	r3, #1
 8016090:	2300      	movne	r3, #0
 8016092:	b2db      	uxtb	r3, r3
 8016094:	461a      	mov	r2, r3
 8016096:	79fb      	ldrb	r3, [r7, #7]
 8016098:	429a      	cmp	r2, r3
 801609a:	d0b6      	beq.n	801600a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801609c:	2300      	movs	r3, #0
}
 801609e:	4618      	mov	r0, r3
 80160a0:	3710      	adds	r7, #16
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}

080160a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80160a6:	b580      	push	{r7, lr}
 80160a8:	b084      	sub	sp, #16
 80160aa:	af00      	add	r7, sp, #0
 80160ac:	60f8      	str	r0, [r7, #12]
 80160ae:	60b9      	str	r1, [r7, #8]
 80160b0:	607a      	str	r2, [r7, #4]
 80160b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80160b4:	e051      	b.n	801615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	695b      	ldr	r3, [r3, #20]
 80160bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80160c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80160c4:	d123      	bne.n	801610e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	681a      	ldr	r2, [r3, #0]
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80160d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80160de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	2200      	movs	r2, #0
 80160e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	2220      	movs	r2, #32
 80160ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	2200      	movs	r2, #0
 80160f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160fa:	f043 0204 	orr.w	r2, r3, #4
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	2200      	movs	r2, #0
 8016106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801610a:	2301      	movs	r3, #1
 801610c:	e046      	b.n	801619c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016114:	d021      	beq.n	801615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016116:	f7fd fd6d 	bl	8013bf4 <HAL_GetTick>
 801611a:	4602      	mov	r2, r0
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	1ad3      	subs	r3, r2, r3
 8016120:	687a      	ldr	r2, [r7, #4]
 8016122:	429a      	cmp	r2, r3
 8016124:	d302      	bcc.n	801612c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d116      	bne.n	801615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	2200      	movs	r2, #0
 8016130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	2220      	movs	r2, #32
 8016136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2200      	movs	r2, #0
 801613e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016146:	f043 0220 	orr.w	r2, r3, #32
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2200      	movs	r2, #0
 8016152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8016156:	2301      	movs	r3, #1
 8016158:	e020      	b.n	801619c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	0c1b      	lsrs	r3, r3, #16
 801615e:	b2db      	uxtb	r3, r3
 8016160:	2b01      	cmp	r3, #1
 8016162:	d10c      	bne.n	801617e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	695b      	ldr	r3, [r3, #20]
 801616a:	43da      	mvns	r2, r3
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	4013      	ands	r3, r2
 8016170:	b29b      	uxth	r3, r3
 8016172:	2b00      	cmp	r3, #0
 8016174:	bf14      	ite	ne
 8016176:	2301      	movne	r3, #1
 8016178:	2300      	moveq	r3, #0
 801617a:	b2db      	uxtb	r3, r3
 801617c:	e00b      	b.n	8016196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	699b      	ldr	r3, [r3, #24]
 8016184:	43da      	mvns	r2, r3
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	4013      	ands	r3, r2
 801618a:	b29b      	uxth	r3, r3
 801618c:	2b00      	cmp	r3, #0
 801618e:	bf14      	ite	ne
 8016190:	2301      	movne	r3, #1
 8016192:	2300      	moveq	r3, #0
 8016194:	b2db      	uxtb	r3, r3
 8016196:	2b00      	cmp	r3, #0
 8016198:	d18d      	bne.n	80160b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801619a:	2300      	movs	r3, #0
}
 801619c:	4618      	mov	r0, r3
 801619e:	3710      	adds	r7, #16
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b084      	sub	sp, #16
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	60f8      	str	r0, [r7, #12]
 80161ac:	60b9      	str	r1, [r7, #8]
 80161ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80161b0:	e02d      	b.n	801620e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80161b2:	68f8      	ldr	r0, [r7, #12]
 80161b4:	f000 f8ce 	bl	8016354 <I2C_IsAcknowledgeFailed>
 80161b8:	4603      	mov	r3, r0
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d001      	beq.n	80161c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80161be:	2301      	movs	r3, #1
 80161c0:	e02d      	b.n	801621e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80161c2:	68bb      	ldr	r3, [r7, #8]
 80161c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161c8:	d021      	beq.n	801620e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80161ca:	f7fd fd13 	bl	8013bf4 <HAL_GetTick>
 80161ce:	4602      	mov	r2, r0
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	1ad3      	subs	r3, r2, r3
 80161d4:	68ba      	ldr	r2, [r7, #8]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d302      	bcc.n	80161e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d116      	bne.n	801620e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	2200      	movs	r2, #0
 80161e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2220      	movs	r2, #32
 80161ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	2200      	movs	r2, #0
 80161f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161fa:	f043 0220 	orr.w	r2, r3, #32
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	2200      	movs	r2, #0
 8016206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801620a:	2301      	movs	r3, #1
 801620c:	e007      	b.n	801621e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	695b      	ldr	r3, [r3, #20]
 8016214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016218:	2b80      	cmp	r3, #128	; 0x80
 801621a:	d1ca      	bne.n	80161b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801621c:	2300      	movs	r3, #0
}
 801621e:	4618      	mov	r0, r3
 8016220:	3710      	adds	r7, #16
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}

08016226 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8016226:	b580      	push	{r7, lr}
 8016228:	b084      	sub	sp, #16
 801622a:	af00      	add	r7, sp, #0
 801622c:	60f8      	str	r0, [r7, #12]
 801622e:	60b9      	str	r1, [r7, #8]
 8016230:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8016232:	e02d      	b.n	8016290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016234:	68f8      	ldr	r0, [r7, #12]
 8016236:	f000 f88d 	bl	8016354 <I2C_IsAcknowledgeFailed>
 801623a:	4603      	mov	r3, r0
 801623c:	2b00      	cmp	r3, #0
 801623e:	d001      	beq.n	8016244 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8016240:	2301      	movs	r3, #1
 8016242:	e02d      	b.n	80162a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801624a:	d021      	beq.n	8016290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801624c:	f7fd fcd2 	bl	8013bf4 <HAL_GetTick>
 8016250:	4602      	mov	r2, r0
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	1ad3      	subs	r3, r2, r3
 8016256:	68ba      	ldr	r2, [r7, #8]
 8016258:	429a      	cmp	r2, r3
 801625a:	d302      	bcc.n	8016262 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801625c:	68bb      	ldr	r3, [r7, #8]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d116      	bne.n	8016290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	2200      	movs	r2, #0
 8016266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2220      	movs	r2, #32
 801626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2200      	movs	r2, #0
 8016274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801627c:	f043 0220 	orr.w	r2, r3, #32
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2200      	movs	r2, #0
 8016288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801628c:	2301      	movs	r3, #1
 801628e:	e007      	b.n	80162a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	695b      	ldr	r3, [r3, #20]
 8016296:	f003 0304 	and.w	r3, r3, #4
 801629a:	2b04      	cmp	r3, #4
 801629c:	d1ca      	bne.n	8016234 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801629e:	2300      	movs	r3, #0
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3710      	adds	r7, #16
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	60f8      	str	r0, [r7, #12]
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80162b4:	e042      	b.n	801633c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	695b      	ldr	r3, [r3, #20]
 80162bc:	f003 0310 	and.w	r3, r3, #16
 80162c0:	2b10      	cmp	r3, #16
 80162c2:	d119      	bne.n	80162f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	f06f 0210 	mvn.w	r2, #16
 80162cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	2200      	movs	r2, #0
 80162d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	2220      	movs	r2, #32
 80162d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	2200      	movs	r2, #0
 80162e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	2200      	movs	r2, #0
 80162f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80162f4:	2301      	movs	r3, #1
 80162f6:	e029      	b.n	801634c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80162f8:	f7fd fc7c 	bl	8013bf4 <HAL_GetTick>
 80162fc:	4602      	mov	r2, r0
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	1ad3      	subs	r3, r2, r3
 8016302:	68ba      	ldr	r2, [r7, #8]
 8016304:	429a      	cmp	r2, r3
 8016306:	d302      	bcc.n	801630e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d116      	bne.n	801633c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	2200      	movs	r2, #0
 8016312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	2220      	movs	r2, #32
 8016318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	2200      	movs	r2, #0
 8016320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016328:	f043 0220 	orr.w	r2, r3, #32
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	2200      	movs	r2, #0
 8016334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8016338:	2301      	movs	r3, #1
 801633a:	e007      	b.n	801634c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	695b      	ldr	r3, [r3, #20]
 8016342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016346:	2b40      	cmp	r3, #64	; 0x40
 8016348:	d1b5      	bne.n	80162b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801634a:	2300      	movs	r3, #0
}
 801634c:	4618      	mov	r0, r3
 801634e:	3710      	adds	r7, #16
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8016354:	b480      	push	{r7}
 8016356:	b083      	sub	sp, #12
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	695b      	ldr	r3, [r3, #20]
 8016362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801636a:	d11b      	bne.n	80163a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8016374:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2200      	movs	r2, #0
 801637a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2220      	movs	r2, #32
 8016380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2200      	movs	r2, #0
 8016388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016390:	f043 0204 	orr.w	r2, r3, #4
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2200      	movs	r2, #0
 801639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80163a0:	2301      	movs	r3, #1
 80163a2:	e000      	b.n	80163a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80163a4:	2300      	movs	r3, #0
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	370c      	adds	r7, #12
 80163aa:	46bd      	mov	sp, r7
 80163ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b0:	4770      	bx	lr

080163b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80163b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163b4:	b08f      	sub	sp, #60	; 0x3c
 80163b6:	af0a      	add	r7, sp, #40	; 0x28
 80163b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d101      	bne.n	80163c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80163c0:	2301      	movs	r3, #1
 80163c2:	e10f      	b.n	80165e4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80163d0:	b2db      	uxtb	r3, r3
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d106      	bne.n	80163e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	2200      	movs	r2, #0
 80163da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f00b f888 	bl	80214f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2203      	movs	r2, #3
 80163e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d102      	bne.n	80163fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2200      	movs	r2, #0
 80163fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	4618      	mov	r0, r3
 8016404:	f004 feff 	bl	801b206 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	603b      	str	r3, [r7, #0]
 801640e:	687e      	ldr	r6, [r7, #4]
 8016410:	466d      	mov	r5, sp
 8016412:	f106 0410 	add.w	r4, r6, #16
 8016416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801641a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801641c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801641e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016422:	e885 0003 	stmia.w	r5, {r0, r1}
 8016426:	1d33      	adds	r3, r6, #4
 8016428:	cb0e      	ldmia	r3, {r1, r2, r3}
 801642a:	6838      	ldr	r0, [r7, #0]
 801642c:	f004 fdd6 	bl	801afdc <USB_CoreInit>
 8016430:	4603      	mov	r3, r0
 8016432:	2b00      	cmp	r3, #0
 8016434:	d005      	beq.n	8016442 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	2202      	movs	r2, #2
 801643a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801643e:	2301      	movs	r3, #1
 8016440:	e0d0      	b.n	80165e4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	2100      	movs	r1, #0
 8016448:	4618      	mov	r0, r3
 801644a:	f004 feed 	bl	801b228 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801644e:	2300      	movs	r3, #0
 8016450:	73fb      	strb	r3, [r7, #15]
 8016452:	e04a      	b.n	80164ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016454:	7bfa      	ldrb	r2, [r7, #15]
 8016456:	6879      	ldr	r1, [r7, #4]
 8016458:	4613      	mov	r3, r2
 801645a:	00db      	lsls	r3, r3, #3
 801645c:	1a9b      	subs	r3, r3, r2
 801645e:	009b      	lsls	r3, r3, #2
 8016460:	440b      	add	r3, r1
 8016462:	333d      	adds	r3, #61	; 0x3d
 8016464:	2201      	movs	r2, #1
 8016466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016468:	7bfa      	ldrb	r2, [r7, #15]
 801646a:	6879      	ldr	r1, [r7, #4]
 801646c:	4613      	mov	r3, r2
 801646e:	00db      	lsls	r3, r3, #3
 8016470:	1a9b      	subs	r3, r3, r2
 8016472:	009b      	lsls	r3, r3, #2
 8016474:	440b      	add	r3, r1
 8016476:	333c      	adds	r3, #60	; 0x3c
 8016478:	7bfa      	ldrb	r2, [r7, #15]
 801647a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 801647c:	7bfa      	ldrb	r2, [r7, #15]
 801647e:	7bfb      	ldrb	r3, [r7, #15]
 8016480:	b298      	uxth	r0, r3
 8016482:	6879      	ldr	r1, [r7, #4]
 8016484:	4613      	mov	r3, r2
 8016486:	00db      	lsls	r3, r3, #3
 8016488:	1a9b      	subs	r3, r3, r2
 801648a:	009b      	lsls	r3, r3, #2
 801648c:	440b      	add	r3, r1
 801648e:	3342      	adds	r3, #66	; 0x42
 8016490:	4602      	mov	r2, r0
 8016492:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016494:	7bfa      	ldrb	r2, [r7, #15]
 8016496:	6879      	ldr	r1, [r7, #4]
 8016498:	4613      	mov	r3, r2
 801649a:	00db      	lsls	r3, r3, #3
 801649c:	1a9b      	subs	r3, r3, r2
 801649e:	009b      	lsls	r3, r3, #2
 80164a0:	440b      	add	r3, r1
 80164a2:	333f      	adds	r3, #63	; 0x3f
 80164a4:	2200      	movs	r2, #0
 80164a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80164a8:	7bfa      	ldrb	r2, [r7, #15]
 80164aa:	6879      	ldr	r1, [r7, #4]
 80164ac:	4613      	mov	r3, r2
 80164ae:	00db      	lsls	r3, r3, #3
 80164b0:	1a9b      	subs	r3, r3, r2
 80164b2:	009b      	lsls	r3, r3, #2
 80164b4:	440b      	add	r3, r1
 80164b6:	3344      	adds	r3, #68	; 0x44
 80164b8:	2200      	movs	r2, #0
 80164ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80164bc:	7bfa      	ldrb	r2, [r7, #15]
 80164be:	6879      	ldr	r1, [r7, #4]
 80164c0:	4613      	mov	r3, r2
 80164c2:	00db      	lsls	r3, r3, #3
 80164c4:	1a9b      	subs	r3, r3, r2
 80164c6:	009b      	lsls	r3, r3, #2
 80164c8:	440b      	add	r3, r1
 80164ca:	3348      	adds	r3, #72	; 0x48
 80164cc:	2200      	movs	r2, #0
 80164ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80164d0:	7bfa      	ldrb	r2, [r7, #15]
 80164d2:	6879      	ldr	r1, [r7, #4]
 80164d4:	4613      	mov	r3, r2
 80164d6:	00db      	lsls	r3, r3, #3
 80164d8:	1a9b      	subs	r3, r3, r2
 80164da:	009b      	lsls	r3, r3, #2
 80164dc:	440b      	add	r3, r1
 80164de:	3350      	adds	r3, #80	; 0x50
 80164e0:	2200      	movs	r2, #0
 80164e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80164e4:	7bfb      	ldrb	r3, [r7, #15]
 80164e6:	3301      	adds	r3, #1
 80164e8:	73fb      	strb	r3, [r7, #15]
 80164ea:	7bfa      	ldrb	r2, [r7, #15]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	685b      	ldr	r3, [r3, #4]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d3af      	bcc.n	8016454 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80164f4:	2300      	movs	r3, #0
 80164f6:	73fb      	strb	r3, [r7, #15]
 80164f8:	e044      	b.n	8016584 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80164fa:	7bfa      	ldrb	r2, [r7, #15]
 80164fc:	6879      	ldr	r1, [r7, #4]
 80164fe:	4613      	mov	r3, r2
 8016500:	00db      	lsls	r3, r3, #3
 8016502:	1a9b      	subs	r3, r3, r2
 8016504:	009b      	lsls	r3, r3, #2
 8016506:	440b      	add	r3, r1
 8016508:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 801650c:	2200      	movs	r2, #0
 801650e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8016510:	7bfa      	ldrb	r2, [r7, #15]
 8016512:	6879      	ldr	r1, [r7, #4]
 8016514:	4613      	mov	r3, r2
 8016516:	00db      	lsls	r3, r3, #3
 8016518:	1a9b      	subs	r3, r3, r2
 801651a:	009b      	lsls	r3, r3, #2
 801651c:	440b      	add	r3, r1
 801651e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8016522:	7bfa      	ldrb	r2, [r7, #15]
 8016524:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016526:	7bfa      	ldrb	r2, [r7, #15]
 8016528:	6879      	ldr	r1, [r7, #4]
 801652a:	4613      	mov	r3, r2
 801652c:	00db      	lsls	r3, r3, #3
 801652e:	1a9b      	subs	r3, r3, r2
 8016530:	009b      	lsls	r3, r3, #2
 8016532:	440b      	add	r3, r1
 8016534:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016538:	2200      	movs	r2, #0
 801653a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801653c:	7bfa      	ldrb	r2, [r7, #15]
 801653e:	6879      	ldr	r1, [r7, #4]
 8016540:	4613      	mov	r3, r2
 8016542:	00db      	lsls	r3, r3, #3
 8016544:	1a9b      	subs	r3, r3, r2
 8016546:	009b      	lsls	r3, r3, #2
 8016548:	440b      	add	r3, r1
 801654a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801654e:	2200      	movs	r2, #0
 8016550:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016552:	7bfa      	ldrb	r2, [r7, #15]
 8016554:	6879      	ldr	r1, [r7, #4]
 8016556:	4613      	mov	r3, r2
 8016558:	00db      	lsls	r3, r3, #3
 801655a:	1a9b      	subs	r3, r3, r2
 801655c:	009b      	lsls	r3, r3, #2
 801655e:	440b      	add	r3, r1
 8016560:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016564:	2200      	movs	r2, #0
 8016566:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016568:	7bfa      	ldrb	r2, [r7, #15]
 801656a:	6879      	ldr	r1, [r7, #4]
 801656c:	4613      	mov	r3, r2
 801656e:	00db      	lsls	r3, r3, #3
 8016570:	1a9b      	subs	r3, r3, r2
 8016572:	009b      	lsls	r3, r3, #2
 8016574:	440b      	add	r3, r1
 8016576:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801657a:	2200      	movs	r2, #0
 801657c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801657e:	7bfb      	ldrb	r3, [r7, #15]
 8016580:	3301      	adds	r3, #1
 8016582:	73fb      	strb	r3, [r7, #15]
 8016584:	7bfa      	ldrb	r2, [r7, #15]
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	429a      	cmp	r2, r3
 801658c:	d3b5      	bcc.n	80164fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	603b      	str	r3, [r7, #0]
 8016594:	687e      	ldr	r6, [r7, #4]
 8016596:	466d      	mov	r5, sp
 8016598:	f106 0410 	add.w	r4, r6, #16
 801659c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801659e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80165a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80165ac:	1d33      	adds	r3, r6, #4
 80165ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80165b0:	6838      	ldr	r0, [r7, #0]
 80165b2:	f004 fe85 	bl	801b2c0 <USB_DevInit>
 80165b6:	4603      	mov	r3, r0
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d005      	beq.n	80165c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2202      	movs	r2, #2
 80165c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80165c4:	2301      	movs	r3, #1
 80165c6:	e00d      	b.n	80165e4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2200      	movs	r2, #0
 80165cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2201      	movs	r2, #1
 80165d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	4618      	mov	r0, r3
 80165de:	f005 ff01 	bl	801c3e4 <USB_DevDisconnect>

  return HAL_OK;
 80165e2:	2300      	movs	r3, #0
}
 80165e4:	4618      	mov	r0, r3
 80165e6:	3714      	adds	r7, #20
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b084      	sub	sp, #16
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8016600:	2b01      	cmp	r3, #1
 8016602:	d101      	bne.n	8016608 <HAL_PCD_Start+0x1c>
 8016604:	2302      	movs	r3, #2
 8016606:	e020      	b.n	801664a <HAL_PCD_Start+0x5e>
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2201      	movs	r2, #1
 801660c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016614:	2b01      	cmp	r3, #1
 8016616:	d109      	bne.n	801662c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801661c:	2b01      	cmp	r3, #1
 801661e:	d005      	beq.n	801662c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016624:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	4618      	mov	r0, r3
 8016632:	f004 fdd7 	bl	801b1e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	4618      	mov	r0, r3
 801663c:	f005 feb1 	bl	801c3a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2200      	movs	r2, #0
 8016644:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8016648:	2300      	movs	r3, #0
}
 801664a:	4618      	mov	r0, r3
 801664c:	3710      	adds	r7, #16
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}

08016652 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8016652:	b590      	push	{r4, r7, lr}
 8016654:	b08d      	sub	sp, #52	; 0x34
 8016656:	af00      	add	r7, sp, #0
 8016658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016660:	6a3b      	ldr	r3, [r7, #32]
 8016662:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	4618      	mov	r0, r3
 801666a:	f005 ff6f 	bl	801c54c <USB_GetMode>
 801666e:	4603      	mov	r3, r0
 8016670:	2b00      	cmp	r3, #0
 8016672:	f040 839d 	bne.w	8016db0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	4618      	mov	r0, r3
 801667c:	f005 fed3 	bl	801c426 <USB_ReadInterrupts>
 8016680:	4603      	mov	r3, r0
 8016682:	2b00      	cmp	r3, #0
 8016684:	f000 8393 	beq.w	8016dae <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	4618      	mov	r0, r3
 801668e:	f005 feca 	bl	801c426 <USB_ReadInterrupts>
 8016692:	4603      	mov	r3, r0
 8016694:	f003 0302 	and.w	r3, r3, #2
 8016698:	2b02      	cmp	r3, #2
 801669a:	d107      	bne.n	80166ac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	695a      	ldr	r2, [r3, #20]
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	f002 0202 	and.w	r2, r2, #2
 80166aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	4618      	mov	r0, r3
 80166b2:	f005 feb8 	bl	801c426 <USB_ReadInterrupts>
 80166b6:	4603      	mov	r3, r0
 80166b8:	f003 0310 	and.w	r3, r3, #16
 80166bc:	2b10      	cmp	r3, #16
 80166be:	d161      	bne.n	8016784 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	699a      	ldr	r2, [r3, #24]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	f022 0210 	bic.w	r2, r2, #16
 80166ce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80166d0:	6a3b      	ldr	r3, [r7, #32]
 80166d2:	6a1b      	ldr	r3, [r3, #32]
 80166d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80166d6:	69bb      	ldr	r3, [r7, #24]
 80166d8:	f003 020f 	and.w	r2, r3, #15
 80166dc:	4613      	mov	r3, r2
 80166de:	00db      	lsls	r3, r3, #3
 80166e0:	1a9b      	subs	r3, r3, r2
 80166e2:	009b      	lsls	r3, r3, #2
 80166e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80166e8:	687a      	ldr	r2, [r7, #4]
 80166ea:	4413      	add	r3, r2
 80166ec:	3304      	adds	r3, #4
 80166ee:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80166f0:	69bb      	ldr	r3, [r7, #24]
 80166f2:	0c5b      	lsrs	r3, r3, #17
 80166f4:	f003 030f 	and.w	r3, r3, #15
 80166f8:	2b02      	cmp	r3, #2
 80166fa:	d124      	bne.n	8016746 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80166fc:	69ba      	ldr	r2, [r7, #24]
 80166fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8016702:	4013      	ands	r3, r2
 8016704:	2b00      	cmp	r3, #0
 8016706:	d035      	beq.n	8016774 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8016708:	697b      	ldr	r3, [r7, #20]
 801670a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 801670c:	69bb      	ldr	r3, [r7, #24]
 801670e:	091b      	lsrs	r3, r3, #4
 8016710:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8016712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016716:	b29b      	uxth	r3, r3
 8016718:	461a      	mov	r2, r3
 801671a:	6a38      	ldr	r0, [r7, #32]
 801671c:	f005 fcef 	bl	801c0fe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8016720:	697b      	ldr	r3, [r7, #20]
 8016722:	68da      	ldr	r2, [r3, #12]
 8016724:	69bb      	ldr	r3, [r7, #24]
 8016726:	091b      	lsrs	r3, r3, #4
 8016728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801672c:	441a      	add	r2, r3
 801672e:	697b      	ldr	r3, [r7, #20]
 8016730:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8016732:	697b      	ldr	r3, [r7, #20]
 8016734:	699a      	ldr	r2, [r3, #24]
 8016736:	69bb      	ldr	r3, [r7, #24]
 8016738:	091b      	lsrs	r3, r3, #4
 801673a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801673e:	441a      	add	r2, r3
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	619a      	str	r2, [r3, #24]
 8016744:	e016      	b.n	8016774 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8016746:	69bb      	ldr	r3, [r7, #24]
 8016748:	0c5b      	lsrs	r3, r3, #17
 801674a:	f003 030f 	and.w	r3, r3, #15
 801674e:	2b06      	cmp	r3, #6
 8016750:	d110      	bne.n	8016774 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016758:	2208      	movs	r2, #8
 801675a:	4619      	mov	r1, r3
 801675c:	6a38      	ldr	r0, [r7, #32]
 801675e:	f005 fcce 	bl	801c0fe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	699a      	ldr	r2, [r3, #24]
 8016766:	69bb      	ldr	r3, [r7, #24]
 8016768:	091b      	lsrs	r3, r3, #4
 801676a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801676e:	441a      	add	r2, r3
 8016770:	697b      	ldr	r3, [r7, #20]
 8016772:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	699a      	ldr	r2, [r3, #24]
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	f042 0210 	orr.w	r2, r2, #16
 8016782:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	4618      	mov	r0, r3
 801678a:	f005 fe4c 	bl	801c426 <USB_ReadInterrupts>
 801678e:	4603      	mov	r3, r0
 8016790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016794:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8016798:	d16e      	bne.n	8016878 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 801679a:	2300      	movs	r3, #0
 801679c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f005 fe52 	bl	801c44c <USB_ReadDevAllOutEpInterrupt>
 80167a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80167aa:	e062      	b.n	8016872 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80167ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ae:	f003 0301 	and.w	r3, r3, #1
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d057      	beq.n	8016866 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167bc:	b2d2      	uxtb	r2, r2
 80167be:	4611      	mov	r1, r2
 80167c0:	4618      	mov	r0, r3
 80167c2:	f005 fe77 	bl	801c4b4 <USB_ReadDevOutEPInterrupt>
 80167c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	f003 0301 	and.w	r3, r3, #1
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d00c      	beq.n	80167ec <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80167d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d4:	015a      	lsls	r2, r3, #5
 80167d6:	69fb      	ldr	r3, [r7, #28]
 80167d8:	4413      	add	r3, r2
 80167da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80167de:	461a      	mov	r2, r3
 80167e0:	2301      	movs	r3, #1
 80167e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80167e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167e6:	6878      	ldr	r0, [r7, #4]
 80167e8:	f000 fdb0 	bl	801734c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	f003 0308 	and.w	r3, r3, #8
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d00c      	beq.n	8016810 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80167f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f8:	015a      	lsls	r2, r3, #5
 80167fa:	69fb      	ldr	r3, [r7, #28]
 80167fc:	4413      	add	r3, r2
 80167fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016802:	461a      	mov	r2, r3
 8016804:	2308      	movs	r3, #8
 8016806:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8016808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f000 feaa 	bl	8017564 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	f003 0310 	and.w	r3, r3, #16
 8016816:	2b00      	cmp	r3, #0
 8016818:	d008      	beq.n	801682c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801681c:	015a      	lsls	r2, r3, #5
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	4413      	add	r3, r2
 8016822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016826:	461a      	mov	r2, r3
 8016828:	2310      	movs	r3, #16
 801682a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	f003 0320 	and.w	r3, r3, #32
 8016832:	2b00      	cmp	r3, #0
 8016834:	d008      	beq.n	8016848 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8016836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016838:	015a      	lsls	r2, r3, #5
 801683a:	69fb      	ldr	r3, [r7, #28]
 801683c:	4413      	add	r3, r2
 801683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016842:	461a      	mov	r2, r3
 8016844:	2320      	movs	r3, #32
 8016846:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8016848:	693b      	ldr	r3, [r7, #16]
 801684a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801684e:	2b00      	cmp	r3, #0
 8016850:	d009      	beq.n	8016866 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8016852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016854:	015a      	lsls	r2, r3, #5
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	4413      	add	r3, r2
 801685a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801685e:	461a      	mov	r2, r3
 8016860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016864:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8016866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016868:	3301      	adds	r3, #1
 801686a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801686e:	085b      	lsrs	r3, r3, #1
 8016870:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8016872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016874:	2b00      	cmp	r3, #0
 8016876:	d199      	bne.n	80167ac <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	4618      	mov	r0, r3
 801687e:	f005 fdd2 	bl	801c426 <USB_ReadInterrupts>
 8016882:	4603      	mov	r3, r0
 8016884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801688c:	f040 80c0 	bne.w	8016a10 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	4618      	mov	r0, r3
 8016896:	f005 fdf3 	bl	801c480 <USB_ReadDevAllInEpInterrupt>
 801689a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801689c:	2300      	movs	r3, #0
 801689e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80168a0:	e0b2      	b.n	8016a08 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80168a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a4:	f003 0301 	and.w	r3, r3, #1
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	f000 80a7 	beq.w	80169fc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168b4:	b2d2      	uxtb	r2, r2
 80168b6:	4611      	mov	r1, r2
 80168b8:	4618      	mov	r0, r3
 80168ba:	f005 fe19 	bl	801c4f0 <USB_ReadDevInEPInterrupt>
 80168be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80168c0:	693b      	ldr	r3, [r7, #16]
 80168c2:	f003 0301 	and.w	r3, r3, #1
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d057      	beq.n	801697a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80168ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168cc:	f003 030f 	and.w	r3, r3, #15
 80168d0:	2201      	movs	r2, #1
 80168d2:	fa02 f303 	lsl.w	r3, r2, r3
 80168d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80168d8:	69fb      	ldr	r3, [r7, #28]
 80168da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80168de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	43db      	mvns	r3, r3
 80168e4:	69f9      	ldr	r1, [r7, #28]
 80168e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80168ea:	4013      	ands	r3, r2
 80168ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80168ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f0:	015a      	lsls	r2, r3, #5
 80168f2:	69fb      	ldr	r3, [r7, #28]
 80168f4:	4413      	add	r3, r2
 80168f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80168fa:	461a      	mov	r2, r3
 80168fc:	2301      	movs	r3, #1
 80168fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	691b      	ldr	r3, [r3, #16]
 8016904:	2b01      	cmp	r3, #1
 8016906:	d132      	bne.n	801696e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8016908:	6879      	ldr	r1, [r7, #4]
 801690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801690c:	4613      	mov	r3, r2
 801690e:	00db      	lsls	r3, r3, #3
 8016910:	1a9b      	subs	r3, r3, r2
 8016912:	009b      	lsls	r3, r3, #2
 8016914:	440b      	add	r3, r1
 8016916:	3348      	adds	r3, #72	; 0x48
 8016918:	6819      	ldr	r1, [r3, #0]
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801691e:	4613      	mov	r3, r2
 8016920:	00db      	lsls	r3, r3, #3
 8016922:	1a9b      	subs	r3, r3, r2
 8016924:	009b      	lsls	r3, r3, #2
 8016926:	4403      	add	r3, r0
 8016928:	3344      	adds	r3, #68	; 0x44
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	4419      	add	r1, r3
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016932:	4613      	mov	r3, r2
 8016934:	00db      	lsls	r3, r3, #3
 8016936:	1a9b      	subs	r3, r3, r2
 8016938:	009b      	lsls	r3, r3, #2
 801693a:	4403      	add	r3, r0
 801693c:	3348      	adds	r3, #72	; 0x48
 801693e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8016940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016942:	2b00      	cmp	r3, #0
 8016944:	d113      	bne.n	801696e <HAL_PCD_IRQHandler+0x31c>
 8016946:	6879      	ldr	r1, [r7, #4]
 8016948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801694a:	4613      	mov	r3, r2
 801694c:	00db      	lsls	r3, r3, #3
 801694e:	1a9b      	subs	r3, r3, r2
 8016950:	009b      	lsls	r3, r3, #2
 8016952:	440b      	add	r3, r1
 8016954:	3350      	adds	r3, #80	; 0x50
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d108      	bne.n	801696e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	6818      	ldr	r0, [r3, #0]
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016966:	461a      	mov	r2, r3
 8016968:	2101      	movs	r1, #1
 801696a:	f005 fe21 	bl	801c5b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016970:	b2db      	uxtb	r3, r3
 8016972:	4619      	mov	r1, r3
 8016974:	6878      	ldr	r0, [r7, #4]
 8016976:	f00a fe3e 	bl	80215f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801697a:	693b      	ldr	r3, [r7, #16]
 801697c:	f003 0308 	and.w	r3, r3, #8
 8016980:	2b00      	cmp	r3, #0
 8016982:	d008      	beq.n	8016996 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8016984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016986:	015a      	lsls	r2, r3, #5
 8016988:	69fb      	ldr	r3, [r7, #28]
 801698a:	4413      	add	r3, r2
 801698c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016990:	461a      	mov	r2, r3
 8016992:	2308      	movs	r3, #8
 8016994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	f003 0310 	and.w	r3, r3, #16
 801699c:	2b00      	cmp	r3, #0
 801699e:	d008      	beq.n	80169b2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80169a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a2:	015a      	lsls	r2, r3, #5
 80169a4:	69fb      	ldr	r3, [r7, #28]
 80169a6:	4413      	add	r3, r2
 80169a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169ac:	461a      	mov	r2, r3
 80169ae:	2310      	movs	r3, #16
 80169b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80169b2:	693b      	ldr	r3, [r7, #16]
 80169b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d008      	beq.n	80169ce <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80169bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169be:	015a      	lsls	r2, r3, #5
 80169c0:	69fb      	ldr	r3, [r7, #28]
 80169c2:	4413      	add	r3, r2
 80169c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169c8:	461a      	mov	r2, r3
 80169ca:	2340      	movs	r3, #64	; 0x40
 80169cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80169ce:	693b      	ldr	r3, [r7, #16]
 80169d0:	f003 0302 	and.w	r3, r3, #2
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d008      	beq.n	80169ea <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80169d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169da:	015a      	lsls	r2, r3, #5
 80169dc:	69fb      	ldr	r3, [r7, #28]
 80169de:	4413      	add	r3, r2
 80169e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169e4:	461a      	mov	r2, r3
 80169e6:	2302      	movs	r3, #2
 80169e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80169ea:	693b      	ldr	r3, [r7, #16]
 80169ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d003      	beq.n	80169fc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80169f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169f6:	6878      	ldr	r0, [r7, #4]
 80169f8:	f000 fc1b 	bl	8017232 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80169fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169fe:	3301      	adds	r3, #1
 8016a00:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8016a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a04:	085b      	lsrs	r3, r3, #1
 8016a06:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8016a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	f47f af49 	bne.w	80168a2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	4618      	mov	r0, r3
 8016a16:	f005 fd06 	bl	801c426 <USB_ReadInterrupts>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016a24:	d122      	bne.n	8016a6c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016a2c:	685b      	ldr	r3, [r3, #4]
 8016a2e:	69fa      	ldr	r2, [r7, #28]
 8016a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016a34:	f023 0301 	bic.w	r3, r3, #1
 8016a38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8016a40:	2b01      	cmp	r3, #1
 8016a42:	d108      	bne.n	8016a56 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2200      	movs	r2, #0
 8016a48:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8016a4c:	2100      	movs	r1, #0
 8016a4e:	6878      	ldr	r0, [r7, #4]
 8016a50:	f000 fe26 	bl	80176a0 <HAL_PCDEx_LPM_Callback>
 8016a54:	e002      	b.n	8016a5c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8016a56:	6878      	ldr	r0, [r7, #4]
 8016a58:	f00a fe44 	bl	80216e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	695a      	ldr	r2, [r3, #20]
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8016a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	4618      	mov	r0, r3
 8016a72:	f005 fcd8 	bl	801c426 <USB_ReadInterrupts>
 8016a76:	4603      	mov	r3, r0
 8016a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016a80:	d112      	bne.n	8016aa8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016a88:	689b      	ldr	r3, [r3, #8]
 8016a8a:	f003 0301 	and.w	r3, r3, #1
 8016a8e:	2b01      	cmp	r3, #1
 8016a90:	d102      	bne.n	8016a98 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f00a fe00 	bl	8021698 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	695a      	ldr	r2, [r3, #20]
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8016aa6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	4618      	mov	r0, r3
 8016aae:	f005 fcba 	bl	801c426 <USB_ReadInterrupts>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016abc:	f040 80c7 	bne.w	8016c4e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8016ac0:	69fb      	ldr	r3, [r7, #28]
 8016ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ac6:	685b      	ldr	r3, [r3, #4]
 8016ac8:	69fa      	ldr	r2, [r7, #28]
 8016aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016ace:	f023 0301 	bic.w	r3, r3, #1
 8016ad2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	2110      	movs	r1, #16
 8016ada:	4618      	mov	r0, r3
 8016adc:	f004 fd54 	bl	801b588 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ae4:	e056      	b.n	8016b94 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8016ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae8:	015a      	lsls	r2, r3, #5
 8016aea:	69fb      	ldr	r3, [r7, #28]
 8016aec:	4413      	add	r3, r2
 8016aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016af2:	461a      	mov	r2, r3
 8016af4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016af8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8016afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016afc:	015a      	lsls	r2, r3, #5
 8016afe:	69fb      	ldr	r3, [r7, #28]
 8016b00:	4413      	add	r3, r2
 8016b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b0a:	0151      	lsls	r1, r2, #5
 8016b0c:	69fa      	ldr	r2, [r7, #28]
 8016b0e:	440a      	add	r2, r1
 8016b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016b14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016b18:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8016b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b1c:	015a      	lsls	r2, r3, #5
 8016b1e:	69fb      	ldr	r3, [r7, #28]
 8016b20:	4413      	add	r3, r2
 8016b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b2a:	0151      	lsls	r1, r2, #5
 8016b2c:	69fa      	ldr	r2, [r7, #28]
 8016b2e:	440a      	add	r2, r1
 8016b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016b34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016b38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8016b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b3c:	015a      	lsls	r2, r3, #5
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	4413      	add	r3, r2
 8016b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b46:	461a      	mov	r2, r3
 8016b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016b4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b50:	015a      	lsls	r2, r3, #5
 8016b52:	69fb      	ldr	r3, [r7, #28]
 8016b54:	4413      	add	r3, r2
 8016b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b5e:	0151      	lsls	r1, r2, #5
 8016b60:	69fa      	ldr	r2, [r7, #28]
 8016b62:	440a      	add	r2, r1
 8016b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016b68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016b6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8016b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b70:	015a      	lsls	r2, r3, #5
 8016b72:	69fb      	ldr	r3, [r7, #28]
 8016b74:	4413      	add	r3, r2
 8016b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b7e:	0151      	lsls	r1, r2, #5
 8016b80:	69fa      	ldr	r2, [r7, #28]
 8016b82:	440a      	add	r2, r1
 8016b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016b88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016b8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b90:	3301      	adds	r3, #1
 8016b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	685b      	ldr	r3, [r3, #4]
 8016b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d3a3      	bcc.n	8016ae6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ba4:	69db      	ldr	r3, [r3, #28]
 8016ba6:	69fa      	ldr	r2, [r7, #28]
 8016ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016bac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8016bb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d016      	beq.n	8016be8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8016bba:	69fb      	ldr	r3, [r7, #28]
 8016bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016bc4:	69fa      	ldr	r2, [r7, #28]
 8016bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016bca:	f043 030b 	orr.w	r3, r3, #11
 8016bce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8016bd2:	69fb      	ldr	r3, [r7, #28]
 8016bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bda:	69fa      	ldr	r2, [r7, #28]
 8016bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016be0:	f043 030b 	orr.w	r3, r3, #11
 8016be4:	6453      	str	r3, [r2, #68]	; 0x44
 8016be6:	e015      	b.n	8016c14 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8016be8:	69fb      	ldr	r3, [r7, #28]
 8016bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bee:	695b      	ldr	r3, [r3, #20]
 8016bf0:	69fa      	ldr	r2, [r7, #28]
 8016bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016bfa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8016bfe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8016c00:	69fb      	ldr	r3, [r7, #28]
 8016c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c06:	691b      	ldr	r3, [r3, #16]
 8016c08:	69fa      	ldr	r2, [r7, #28]
 8016c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016c0e:	f043 030b 	orr.w	r3, r3, #11
 8016c12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8016c14:	69fb      	ldr	r3, [r7, #28]
 8016c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	69fa      	ldr	r2, [r7, #28]
 8016c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016c22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8016c26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	6818      	ldr	r0, [r3, #0]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	691b      	ldr	r3, [r3, #16]
 8016c30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8016c38:	461a      	mov	r2, r3
 8016c3a:	f005 fcb9 	bl	801c5b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	695a      	ldr	r2, [r3, #20]
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8016c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	4618      	mov	r0, r3
 8016c54:	f005 fbe7 	bl	801c426 <USB_ReadInterrupts>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016c62:	d124      	bne.n	8016cae <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f005 fc7d 	bl	801c568 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	4618      	mov	r0, r3
 8016c74:	f004 fce5 	bl	801b642 <USB_GetDevSpeed>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681c      	ldr	r4, [r3, #0]
 8016c84:	f001 f956 	bl	8017f34 <HAL_RCC_GetHCLKFreq>
 8016c88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8016c8e:	b2db      	uxtb	r3, r3
 8016c90:	461a      	mov	r2, r3
 8016c92:	4620      	mov	r0, r4
 8016c94:	f004 fa04 	bl	801b0a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8016c98:	6878      	ldr	r0, [r7, #4]
 8016c9a:	f00a fcd4 	bl	8021646 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	695a      	ldr	r2, [r3, #20]
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8016cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f005 fbb7 	bl	801c426 <USB_ReadInterrupts>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	f003 0308 	and.w	r3, r3, #8
 8016cbe:	2b08      	cmp	r3, #8
 8016cc0:	d10a      	bne.n	8016cd8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8016cc2:	6878      	ldr	r0, [r7, #4]
 8016cc4:	f00a fcb1 	bl	802162a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	695a      	ldr	r2, [r3, #20]
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	f002 0208 	and.w	r2, r2, #8
 8016cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f005 fba2 	bl	801c426 <USB_ReadInterrupts>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016cec:	d10f      	bne.n	8016d0e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8016cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf4:	b2db      	uxtb	r3, r3
 8016cf6:	4619      	mov	r1, r3
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f00a fd13 	bl	8021724 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	695a      	ldr	r2, [r3, #20]
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8016d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	4618      	mov	r0, r3
 8016d14:	f005 fb87 	bl	801c426 <USB_ReadInterrupts>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016d22:	d10f      	bne.n	8016d44 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8016d24:	2300      	movs	r3, #0
 8016d26:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8016d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	4619      	mov	r1, r3
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f00a fce6 	bl	8021700 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	695a      	ldr	r2, [r3, #20]
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8016d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f005 fb6c 	bl	801c426 <USB_ReadInterrupts>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016d58:	d10a      	bne.n	8016d70 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8016d5a:	6878      	ldr	r0, [r7, #4]
 8016d5c:	f00a fcf4 	bl	8021748 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	695a      	ldr	r2, [r3, #20]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8016d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	4618      	mov	r0, r3
 8016d76:	f005 fb56 	bl	801c426 <USB_ReadInterrupts>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	f003 0304 	and.w	r3, r3, #4
 8016d80:	2b04      	cmp	r3, #4
 8016d82:	d115      	bne.n	8016db0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	685b      	ldr	r3, [r3, #4]
 8016d8a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8016d8c:	69bb      	ldr	r3, [r7, #24]
 8016d8e:	f003 0304 	and.w	r3, r3, #4
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d002      	beq.n	8016d9c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f00a fce4 	bl	8021764 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	6859      	ldr	r1, [r3, #4]
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	69ba      	ldr	r2, [r7, #24]
 8016da8:	430a      	orrs	r2, r1
 8016daa:	605a      	str	r2, [r3, #4]
 8016dac:	e000      	b.n	8016db0 <HAL_PCD_IRQHandler+0x75e>
      return;
 8016dae:	bf00      	nop
    }
  }
}
 8016db0:	3734      	adds	r7, #52	; 0x34
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd90      	pop	{r4, r7, pc}

08016db6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b082      	sub	sp, #8
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	6078      	str	r0, [r7, #4]
 8016dbe:	460b      	mov	r3, r1
 8016dc0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8016dc8:	2b01      	cmp	r3, #1
 8016dca:	d101      	bne.n	8016dd0 <HAL_PCD_SetAddress+0x1a>
 8016dcc:	2302      	movs	r3, #2
 8016dce:	e013      	b.n	8016df8 <HAL_PCD_SetAddress+0x42>
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	2201      	movs	r2, #1
 8016dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	78fa      	ldrb	r2, [r7, #3]
 8016ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	78fa      	ldrb	r2, [r7, #3]
 8016de6:	4611      	mov	r1, r2
 8016de8:	4618      	mov	r0, r3
 8016dea:	f005 fab4 	bl	801c356 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	2200      	movs	r2, #0
 8016df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8016df6:	2300      	movs	r3, #0
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3708      	adds	r7, #8
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b084      	sub	sp, #16
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	4608      	mov	r0, r1
 8016e0a:	4611      	mov	r1, r2
 8016e0c:	461a      	mov	r2, r3
 8016e0e:	4603      	mov	r3, r0
 8016e10:	70fb      	strb	r3, [r7, #3]
 8016e12:	460b      	mov	r3, r1
 8016e14:	803b      	strh	r3, [r7, #0]
 8016e16:	4613      	mov	r3, r2
 8016e18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8016e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	da0f      	bge.n	8016e46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016e26:	78fb      	ldrb	r3, [r7, #3]
 8016e28:	f003 020f 	and.w	r2, r3, #15
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	00db      	lsls	r3, r3, #3
 8016e30:	1a9b      	subs	r3, r3, r2
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	3338      	adds	r3, #56	; 0x38
 8016e36:	687a      	ldr	r2, [r7, #4]
 8016e38:	4413      	add	r3, r2
 8016e3a:	3304      	adds	r3, #4
 8016e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	2201      	movs	r2, #1
 8016e42:	705a      	strb	r2, [r3, #1]
 8016e44:	e00f      	b.n	8016e66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016e46:	78fb      	ldrb	r3, [r7, #3]
 8016e48:	f003 020f 	and.w	r2, r3, #15
 8016e4c:	4613      	mov	r3, r2
 8016e4e:	00db      	lsls	r3, r3, #3
 8016e50:	1a9b      	subs	r3, r3, r2
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8016e58:	687a      	ldr	r2, [r7, #4]
 8016e5a:	4413      	add	r3, r2
 8016e5c:	3304      	adds	r3, #4
 8016e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	2200      	movs	r2, #0
 8016e64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8016e66:	78fb      	ldrb	r3, [r7, #3]
 8016e68:	f003 030f 	and.w	r3, r3, #15
 8016e6c:	b2da      	uxtb	r2, r3
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8016e72:	883a      	ldrh	r2, [r7, #0]
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	78ba      	ldrb	r2, [r7, #2]
 8016e7c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	785b      	ldrb	r3, [r3, #1]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d004      	beq.n	8016e90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	b29a      	uxth	r2, r3
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8016e90:	78bb      	ldrb	r3, [r7, #2]
 8016e92:	2b02      	cmp	r3, #2
 8016e94:	d102      	bne.n	8016e9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	2200      	movs	r2, #0
 8016e9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8016ea2:	2b01      	cmp	r3, #1
 8016ea4:	d101      	bne.n	8016eaa <HAL_PCD_EP_Open+0xaa>
 8016ea6:	2302      	movs	r3, #2
 8016ea8:	e00e      	b.n	8016ec8 <HAL_PCD_EP_Open+0xc8>
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	2201      	movs	r2, #1
 8016eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	68f9      	ldr	r1, [r7, #12]
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f004 fbe7 	bl	801b68c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8016ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3710      	adds	r7, #16
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b084      	sub	sp, #16
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	460b      	mov	r3, r1
 8016eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8016edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	da0f      	bge.n	8016f04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016ee4:	78fb      	ldrb	r3, [r7, #3]
 8016ee6:	f003 020f 	and.w	r2, r3, #15
 8016eea:	4613      	mov	r3, r2
 8016eec:	00db      	lsls	r3, r3, #3
 8016eee:	1a9b      	subs	r3, r3, r2
 8016ef0:	009b      	lsls	r3, r3, #2
 8016ef2:	3338      	adds	r3, #56	; 0x38
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	4413      	add	r3, r2
 8016ef8:	3304      	adds	r3, #4
 8016efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	2201      	movs	r2, #1
 8016f00:	705a      	strb	r2, [r3, #1]
 8016f02:	e00f      	b.n	8016f24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016f04:	78fb      	ldrb	r3, [r7, #3]
 8016f06:	f003 020f 	and.w	r2, r3, #15
 8016f0a:	4613      	mov	r3, r2
 8016f0c:	00db      	lsls	r3, r3, #3
 8016f0e:	1a9b      	subs	r3, r3, r2
 8016f10:	009b      	lsls	r3, r3, #2
 8016f12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8016f16:	687a      	ldr	r2, [r7, #4]
 8016f18:	4413      	add	r3, r2
 8016f1a:	3304      	adds	r3, #4
 8016f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2200      	movs	r2, #0
 8016f22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8016f24:	78fb      	ldrb	r3, [r7, #3]
 8016f26:	f003 030f 	and.w	r3, r3, #15
 8016f2a:	b2da      	uxtb	r2, r3
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8016f36:	2b01      	cmp	r3, #1
 8016f38:	d101      	bne.n	8016f3e <HAL_PCD_EP_Close+0x6e>
 8016f3a:	2302      	movs	r3, #2
 8016f3c:	e00e      	b.n	8016f5c <HAL_PCD_EP_Close+0x8c>
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	2201      	movs	r2, #1
 8016f42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	68f9      	ldr	r1, [r7, #12]
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f004 fc25 	bl	801b79c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	2200      	movs	r2, #0
 8016f56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8016f5a:	2300      	movs	r3, #0
}
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	3710      	adds	r7, #16
 8016f60:	46bd      	mov	sp, r7
 8016f62:	bd80      	pop	{r7, pc}

08016f64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b086      	sub	sp, #24
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	60f8      	str	r0, [r7, #12]
 8016f6c:	607a      	str	r2, [r7, #4]
 8016f6e:	603b      	str	r3, [r7, #0]
 8016f70:	460b      	mov	r3, r1
 8016f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016f74:	7afb      	ldrb	r3, [r7, #11]
 8016f76:	f003 020f 	and.w	r2, r3, #15
 8016f7a:	4613      	mov	r3, r2
 8016f7c:	00db      	lsls	r3, r3, #3
 8016f7e:	1a9b      	subs	r3, r3, r2
 8016f80:	009b      	lsls	r3, r3, #2
 8016f82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8016f86:	68fa      	ldr	r2, [r7, #12]
 8016f88:	4413      	add	r3, r2
 8016f8a:	3304      	adds	r3, #4
 8016f8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8016f8e:	697b      	ldr	r3, [r7, #20]
 8016f90:	687a      	ldr	r2, [r7, #4]
 8016f92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	683a      	ldr	r2, [r7, #0]
 8016f98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8016f9a:	697b      	ldr	r3, [r7, #20]
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8016fa0:	697b      	ldr	r3, [r7, #20]
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016fa6:	7afb      	ldrb	r3, [r7, #11]
 8016fa8:	f003 030f 	and.w	r3, r3, #15
 8016fac:	b2da      	uxtb	r2, r3
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	691b      	ldr	r3, [r3, #16]
 8016fb6:	2b01      	cmp	r3, #1
 8016fb8:	d102      	bne.n	8016fc0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8016fba:	687a      	ldr	r2, [r7, #4]
 8016fbc:	697b      	ldr	r3, [r7, #20]
 8016fbe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8016fc0:	7afb      	ldrb	r3, [r7, #11]
 8016fc2:	f003 030f 	and.w	r3, r3, #15
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d109      	bne.n	8016fde <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	6818      	ldr	r0, [r3, #0]
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	691b      	ldr	r3, [r3, #16]
 8016fd2:	b2db      	uxtb	r3, r3
 8016fd4:	461a      	mov	r2, r3
 8016fd6:	6979      	ldr	r1, [r7, #20]
 8016fd8:	f004 ff00 	bl	801bddc <USB_EP0StartXfer>
 8016fdc:	e008      	b.n	8016ff0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	6818      	ldr	r0, [r3, #0]
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	691b      	ldr	r3, [r3, #16]
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	461a      	mov	r2, r3
 8016fea:	6979      	ldr	r1, [r7, #20]
 8016fec:	f004 fcb2 	bl	801b954 <USB_EPStartXfer>
  }

  return HAL_OK;
 8016ff0:	2300      	movs	r3, #0
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3718      	adds	r7, #24
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}

08016ffa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016ffa:	b480      	push	{r7}
 8016ffc:	b083      	sub	sp, #12
 8016ffe:	af00      	add	r7, sp, #0
 8017000:	6078      	str	r0, [r7, #4]
 8017002:	460b      	mov	r3, r1
 8017004:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8017006:	78fb      	ldrb	r3, [r7, #3]
 8017008:	f003 020f 	and.w	r2, r3, #15
 801700c:	6879      	ldr	r1, [r7, #4]
 801700e:	4613      	mov	r3, r2
 8017010:	00db      	lsls	r3, r3, #3
 8017012:	1a9b      	subs	r3, r3, r2
 8017014:	009b      	lsls	r3, r3, #2
 8017016:	440b      	add	r3, r1
 8017018:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801701c:	681b      	ldr	r3, [r3, #0]
}
 801701e:	4618      	mov	r0, r3
 8017020:	370c      	adds	r7, #12
 8017022:	46bd      	mov	sp, r7
 8017024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017028:	4770      	bx	lr

0801702a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801702a:	b580      	push	{r7, lr}
 801702c:	b086      	sub	sp, #24
 801702e:	af00      	add	r7, sp, #0
 8017030:	60f8      	str	r0, [r7, #12]
 8017032:	607a      	str	r2, [r7, #4]
 8017034:	603b      	str	r3, [r7, #0]
 8017036:	460b      	mov	r3, r1
 8017038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801703a:	7afb      	ldrb	r3, [r7, #11]
 801703c:	f003 020f 	and.w	r2, r3, #15
 8017040:	4613      	mov	r3, r2
 8017042:	00db      	lsls	r3, r3, #3
 8017044:	1a9b      	subs	r3, r3, r2
 8017046:	009b      	lsls	r3, r3, #2
 8017048:	3338      	adds	r3, #56	; 0x38
 801704a:	68fa      	ldr	r2, [r7, #12]
 801704c:	4413      	add	r3, r2
 801704e:	3304      	adds	r3, #4
 8017050:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	687a      	ldr	r2, [r7, #4]
 8017056:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8017058:	697b      	ldr	r3, [r7, #20]
 801705a:	683a      	ldr	r2, [r7, #0]
 801705c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801705e:	697b      	ldr	r3, [r7, #20]
 8017060:	2200      	movs	r2, #0
 8017062:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8017064:	697b      	ldr	r3, [r7, #20]
 8017066:	2201      	movs	r2, #1
 8017068:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801706a:	7afb      	ldrb	r3, [r7, #11]
 801706c:	f003 030f 	and.w	r3, r3, #15
 8017070:	b2da      	uxtb	r2, r3
 8017072:	697b      	ldr	r3, [r7, #20]
 8017074:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	691b      	ldr	r3, [r3, #16]
 801707a:	2b01      	cmp	r3, #1
 801707c:	d102      	bne.n	8017084 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801707e:	687a      	ldr	r2, [r7, #4]
 8017080:	697b      	ldr	r3, [r7, #20]
 8017082:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8017084:	7afb      	ldrb	r3, [r7, #11]
 8017086:	f003 030f 	and.w	r3, r3, #15
 801708a:	2b00      	cmp	r3, #0
 801708c:	d109      	bne.n	80170a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	6818      	ldr	r0, [r3, #0]
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	691b      	ldr	r3, [r3, #16]
 8017096:	b2db      	uxtb	r3, r3
 8017098:	461a      	mov	r2, r3
 801709a:	6979      	ldr	r1, [r7, #20]
 801709c:	f004 fe9e 	bl	801bddc <USB_EP0StartXfer>
 80170a0:	e008      	b.n	80170b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	6818      	ldr	r0, [r3, #0]
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	691b      	ldr	r3, [r3, #16]
 80170aa:	b2db      	uxtb	r3, r3
 80170ac:	461a      	mov	r2, r3
 80170ae:	6979      	ldr	r1, [r7, #20]
 80170b0:	f004 fc50 	bl	801b954 <USB_EPStartXfer>
  }

  return HAL_OK;
 80170b4:	2300      	movs	r3, #0
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	3718      	adds	r7, #24
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd80      	pop	{r7, pc}

080170be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80170be:	b580      	push	{r7, lr}
 80170c0:	b084      	sub	sp, #16
 80170c2:	af00      	add	r7, sp, #0
 80170c4:	6078      	str	r0, [r7, #4]
 80170c6:	460b      	mov	r3, r1
 80170c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80170ca:	78fb      	ldrb	r3, [r7, #3]
 80170cc:	f003 020f 	and.w	r2, r3, #15
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	685b      	ldr	r3, [r3, #4]
 80170d4:	429a      	cmp	r2, r3
 80170d6:	d901      	bls.n	80170dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80170d8:	2301      	movs	r3, #1
 80170da:	e050      	b.n	801717e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80170dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	da0f      	bge.n	8017104 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80170e4:	78fb      	ldrb	r3, [r7, #3]
 80170e6:	f003 020f 	and.w	r2, r3, #15
 80170ea:	4613      	mov	r3, r2
 80170ec:	00db      	lsls	r3, r3, #3
 80170ee:	1a9b      	subs	r3, r3, r2
 80170f0:	009b      	lsls	r3, r3, #2
 80170f2:	3338      	adds	r3, #56	; 0x38
 80170f4:	687a      	ldr	r2, [r7, #4]
 80170f6:	4413      	add	r3, r2
 80170f8:	3304      	adds	r3, #4
 80170fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	2201      	movs	r2, #1
 8017100:	705a      	strb	r2, [r3, #1]
 8017102:	e00d      	b.n	8017120 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8017104:	78fa      	ldrb	r2, [r7, #3]
 8017106:	4613      	mov	r3, r2
 8017108:	00db      	lsls	r3, r3, #3
 801710a:	1a9b      	subs	r3, r3, r2
 801710c:	009b      	lsls	r3, r3, #2
 801710e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8017112:	687a      	ldr	r2, [r7, #4]
 8017114:	4413      	add	r3, r2
 8017116:	3304      	adds	r3, #4
 8017118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	2200      	movs	r2, #0
 801711e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	2201      	movs	r2, #1
 8017124:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017126:	78fb      	ldrb	r3, [r7, #3]
 8017128:	f003 030f 	and.w	r3, r3, #15
 801712c:	b2da      	uxtb	r2, r3
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8017138:	2b01      	cmp	r3, #1
 801713a:	d101      	bne.n	8017140 <HAL_PCD_EP_SetStall+0x82>
 801713c:	2302      	movs	r3, #2
 801713e:	e01e      	b.n	801717e <HAL_PCD_EP_SetStall+0xc0>
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	2201      	movs	r2, #1
 8017144:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	68f9      	ldr	r1, [r7, #12]
 801714e:	4618      	mov	r0, r3
 8017150:	f005 f82d 	bl	801c1ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8017154:	78fb      	ldrb	r3, [r7, #3]
 8017156:	f003 030f 	and.w	r3, r3, #15
 801715a:	2b00      	cmp	r3, #0
 801715c:	d10a      	bne.n	8017174 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	6818      	ldr	r0, [r3, #0]
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	691b      	ldr	r3, [r3, #16]
 8017166:	b2d9      	uxtb	r1, r3
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801716e:	461a      	mov	r2, r3
 8017170:	f005 fa1e 	bl	801c5b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2200      	movs	r2, #0
 8017178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801717c:	2300      	movs	r3, #0
}
 801717e:	4618      	mov	r0, r3
 8017180:	3710      	adds	r7, #16
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}

08017186 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017186:	b580      	push	{r7, lr}
 8017188:	b084      	sub	sp, #16
 801718a:	af00      	add	r7, sp, #0
 801718c:	6078      	str	r0, [r7, #4]
 801718e:	460b      	mov	r3, r1
 8017190:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8017192:	78fb      	ldrb	r3, [r7, #3]
 8017194:	f003 020f 	and.w	r2, r3, #15
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	429a      	cmp	r2, r3
 801719e:	d901      	bls.n	80171a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80171a0:	2301      	movs	r3, #1
 80171a2:	e042      	b.n	801722a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80171a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	da0f      	bge.n	80171cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80171ac:	78fb      	ldrb	r3, [r7, #3]
 80171ae:	f003 020f 	and.w	r2, r3, #15
 80171b2:	4613      	mov	r3, r2
 80171b4:	00db      	lsls	r3, r3, #3
 80171b6:	1a9b      	subs	r3, r3, r2
 80171b8:	009b      	lsls	r3, r3, #2
 80171ba:	3338      	adds	r3, #56	; 0x38
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	4413      	add	r3, r2
 80171c0:	3304      	adds	r3, #4
 80171c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	2201      	movs	r2, #1
 80171c8:	705a      	strb	r2, [r3, #1]
 80171ca:	e00f      	b.n	80171ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80171cc:	78fb      	ldrb	r3, [r7, #3]
 80171ce:	f003 020f 	and.w	r2, r3, #15
 80171d2:	4613      	mov	r3, r2
 80171d4:	00db      	lsls	r3, r3, #3
 80171d6:	1a9b      	subs	r3, r3, r2
 80171d8:	009b      	lsls	r3, r3, #2
 80171da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80171de:	687a      	ldr	r2, [r7, #4]
 80171e0:	4413      	add	r3, r2
 80171e2:	3304      	adds	r3, #4
 80171e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	2200      	movs	r2, #0
 80171ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	2200      	movs	r2, #0
 80171f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80171f2:	78fb      	ldrb	r3, [r7, #3]
 80171f4:	f003 030f 	and.w	r3, r3, #15
 80171f8:	b2da      	uxtb	r2, r3
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8017204:	2b01      	cmp	r3, #1
 8017206:	d101      	bne.n	801720c <HAL_PCD_EP_ClrStall+0x86>
 8017208:	2302      	movs	r3, #2
 801720a:	e00e      	b.n	801722a <HAL_PCD_EP_ClrStall+0xa4>
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2201      	movs	r2, #1
 8017210:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	68f9      	ldr	r1, [r7, #12]
 801721a:	4618      	mov	r0, r3
 801721c:	f005 f835 	bl	801c28a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2200      	movs	r2, #0
 8017224:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8017228:	2300      	movs	r3, #0
}
 801722a:	4618      	mov	r0, r3
 801722c:	3710      	adds	r7, #16
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}

08017232 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8017232:	b580      	push	{r7, lr}
 8017234:	b08a      	sub	sp, #40	; 0x28
 8017236:	af02      	add	r7, sp, #8
 8017238:	6078      	str	r0, [r7, #4]
 801723a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8017246:	683a      	ldr	r2, [r7, #0]
 8017248:	4613      	mov	r3, r2
 801724a:	00db      	lsls	r3, r3, #3
 801724c:	1a9b      	subs	r3, r3, r2
 801724e:	009b      	lsls	r3, r3, #2
 8017250:	3338      	adds	r3, #56	; 0x38
 8017252:	687a      	ldr	r2, [r7, #4]
 8017254:	4413      	add	r3, r2
 8017256:	3304      	adds	r3, #4
 8017258:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	699a      	ldr	r2, [r3, #24]
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	695b      	ldr	r3, [r3, #20]
 8017262:	429a      	cmp	r2, r3
 8017264:	d901      	bls.n	801726a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8017266:	2301      	movs	r3, #1
 8017268:	e06c      	b.n	8017344 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	695a      	ldr	r2, [r3, #20]
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	699b      	ldr	r3, [r3, #24]
 8017272:	1ad3      	subs	r3, r2, r3
 8017274:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	689b      	ldr	r3, [r3, #8]
 801727a:	69fa      	ldr	r2, [r7, #28]
 801727c:	429a      	cmp	r2, r3
 801727e:	d902      	bls.n	8017286 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	689b      	ldr	r3, [r3, #8]
 8017284:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8017286:	69fb      	ldr	r3, [r7, #28]
 8017288:	3303      	adds	r3, #3
 801728a:	089b      	lsrs	r3, r3, #2
 801728c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801728e:	e02b      	b.n	80172e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	695a      	ldr	r2, [r3, #20]
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	699b      	ldr	r3, [r3, #24]
 8017298:	1ad3      	subs	r3, r2, r3
 801729a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	689b      	ldr	r3, [r3, #8]
 80172a0:	69fa      	ldr	r2, [r7, #28]
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d902      	bls.n	80172ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	689b      	ldr	r3, [r3, #8]
 80172aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80172ac:	69fb      	ldr	r3, [r7, #28]
 80172ae:	3303      	adds	r3, #3
 80172b0:	089b      	lsrs	r3, r3, #2
 80172b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	68d9      	ldr	r1, [r3, #12]
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	b2da      	uxtb	r2, r3
 80172bc:	69fb      	ldr	r3, [r7, #28]
 80172be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80172c4:	b2db      	uxtb	r3, r3
 80172c6:	9300      	str	r3, [sp, #0]
 80172c8:	4603      	mov	r3, r0
 80172ca:	6978      	ldr	r0, [r7, #20]
 80172cc:	f004 fed9 	bl	801c082 <USB_WritePacket>

    ep->xfer_buff  += len;
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	68da      	ldr	r2, [r3, #12]
 80172d4:	69fb      	ldr	r3, [r7, #28]
 80172d6:	441a      	add	r2, r3
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	699a      	ldr	r2, [r3, #24]
 80172e0:	69fb      	ldr	r3, [r7, #28]
 80172e2:	441a      	add	r2, r3
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	015a      	lsls	r2, r3, #5
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	4413      	add	r3, r2
 80172f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172f4:	699b      	ldr	r3, [r3, #24]
 80172f6:	b29b      	uxth	r3, r3
 80172f8:	69ba      	ldr	r2, [r7, #24]
 80172fa:	429a      	cmp	r2, r3
 80172fc:	d809      	bhi.n	8017312 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	699a      	ldr	r2, [r3, #24]
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8017306:	429a      	cmp	r2, r3
 8017308:	d203      	bcs.n	8017312 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	695b      	ldr	r3, [r3, #20]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d1be      	bne.n	8017290 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	695a      	ldr	r2, [r3, #20]
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	699b      	ldr	r3, [r3, #24]
 801731a:	429a      	cmp	r2, r3
 801731c:	d811      	bhi.n	8017342 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	f003 030f 	and.w	r3, r3, #15
 8017324:	2201      	movs	r2, #1
 8017326:	fa02 f303 	lsl.w	r3, r2, r3
 801732a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	43db      	mvns	r3, r3
 8017338:	6939      	ldr	r1, [r7, #16]
 801733a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801733e:	4013      	ands	r3, r2
 8017340:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8017342:	2300      	movs	r3, #0
}
 8017344:	4618      	mov	r0, r3
 8017346:	3720      	adds	r7, #32
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}

0801734c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b086      	sub	sp, #24
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801735c:	697b      	ldr	r3, [r7, #20]
 801735e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8017360:	697b      	ldr	r3, [r7, #20]
 8017362:	333c      	adds	r3, #60	; 0x3c
 8017364:	3304      	adds	r3, #4
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801736a:	683b      	ldr	r3, [r7, #0]
 801736c:	015a      	lsls	r2, r3, #5
 801736e:	693b      	ldr	r3, [r7, #16]
 8017370:	4413      	add	r3, r2
 8017372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017376:	689b      	ldr	r3, [r3, #8]
 8017378:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	691b      	ldr	r3, [r3, #16]
 801737e:	2b01      	cmp	r3, #1
 8017380:	f040 80a0 	bne.w	80174c4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8017384:	68bb      	ldr	r3, [r7, #8]
 8017386:	f003 0308 	and.w	r3, r3, #8
 801738a:	2b00      	cmp	r3, #0
 801738c:	d015      	beq.n	80173ba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	4a72      	ldr	r2, [pc, #456]	; (801755c <PCD_EP_OutXfrComplete_int+0x210>)
 8017392:	4293      	cmp	r3, r2
 8017394:	f240 80dd 	bls.w	8017552 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801739e:	2b00      	cmp	r3, #0
 80173a0:	f000 80d7 	beq.w	8017552 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	015a      	lsls	r2, r3, #5
 80173a8:	693b      	ldr	r3, [r7, #16]
 80173aa:	4413      	add	r3, r2
 80173ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173b0:	461a      	mov	r2, r3
 80173b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80173b6:	6093      	str	r3, [r2, #8]
 80173b8:	e0cb      	b.n	8017552 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	f003 0320 	and.w	r3, r3, #32
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d009      	beq.n	80173d8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	015a      	lsls	r2, r3, #5
 80173c8:	693b      	ldr	r3, [r7, #16]
 80173ca:	4413      	add	r3, r2
 80173cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173d0:	461a      	mov	r2, r3
 80173d2:	2320      	movs	r3, #32
 80173d4:	6093      	str	r3, [r2, #8]
 80173d6:	e0bc      	b.n	8017552 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80173de:	2b00      	cmp	r3, #0
 80173e0:	f040 80b7 	bne.w	8017552 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	4a5d      	ldr	r2, [pc, #372]	; (801755c <PCD_EP_OutXfrComplete_int+0x210>)
 80173e8:	4293      	cmp	r3, r2
 80173ea:	d90f      	bls.n	801740c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80173ec:	68bb      	ldr	r3, [r7, #8]
 80173ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d00a      	beq.n	801740c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80173f6:	683b      	ldr	r3, [r7, #0]
 80173f8:	015a      	lsls	r2, r3, #5
 80173fa:	693b      	ldr	r3, [r7, #16]
 80173fc:	4413      	add	r3, r2
 80173fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017402:	461a      	mov	r2, r3
 8017404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017408:	6093      	str	r3, [r2, #8]
 801740a:	e0a2      	b.n	8017552 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801740c:	6879      	ldr	r1, [r7, #4]
 801740e:	683a      	ldr	r2, [r7, #0]
 8017410:	4613      	mov	r3, r2
 8017412:	00db      	lsls	r3, r3, #3
 8017414:	1a9b      	subs	r3, r3, r2
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	440b      	add	r3, r1
 801741a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801741e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	0159      	lsls	r1, r3, #5
 8017424:	693b      	ldr	r3, [r7, #16]
 8017426:	440b      	add	r3, r1
 8017428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801742c:	691b      	ldr	r3, [r3, #16]
 801742e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8017432:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	683a      	ldr	r2, [r7, #0]
 8017438:	4613      	mov	r3, r2
 801743a:	00db      	lsls	r3, r3, #3
 801743c:	1a9b      	subs	r3, r3, r2
 801743e:	009b      	lsls	r3, r3, #2
 8017440:	4403      	add	r3, r0
 8017442:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8017446:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8017448:	6879      	ldr	r1, [r7, #4]
 801744a:	683a      	ldr	r2, [r7, #0]
 801744c:	4613      	mov	r3, r2
 801744e:	00db      	lsls	r3, r3, #3
 8017450:	1a9b      	subs	r3, r3, r2
 8017452:	009b      	lsls	r3, r3, #2
 8017454:	440b      	add	r3, r1
 8017456:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801745a:	6819      	ldr	r1, [r3, #0]
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	683a      	ldr	r2, [r7, #0]
 8017460:	4613      	mov	r3, r2
 8017462:	00db      	lsls	r3, r3, #3
 8017464:	1a9b      	subs	r3, r3, r2
 8017466:	009b      	lsls	r3, r3, #2
 8017468:	4403      	add	r3, r0
 801746a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	4419      	add	r1, r3
 8017472:	6878      	ldr	r0, [r7, #4]
 8017474:	683a      	ldr	r2, [r7, #0]
 8017476:	4613      	mov	r3, r2
 8017478:	00db      	lsls	r3, r3, #3
 801747a:	1a9b      	subs	r3, r3, r2
 801747c:	009b      	lsls	r3, r3, #2
 801747e:	4403      	add	r3, r0
 8017480:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017484:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d114      	bne.n	80174b6 <PCD_EP_OutXfrComplete_int+0x16a>
 801748c:	6879      	ldr	r1, [r7, #4]
 801748e:	683a      	ldr	r2, [r7, #0]
 8017490:	4613      	mov	r3, r2
 8017492:	00db      	lsls	r3, r3, #3
 8017494:	1a9b      	subs	r3, r3, r2
 8017496:	009b      	lsls	r3, r3, #2
 8017498:	440b      	add	r3, r1
 801749a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d108      	bne.n	80174b6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	6818      	ldr	r0, [r3, #0]
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80174ae:	461a      	mov	r2, r3
 80174b0:	2101      	movs	r1, #1
 80174b2:	f005 f87d 	bl	801c5b0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80174b6:	683b      	ldr	r3, [r7, #0]
 80174b8:	b2db      	uxtb	r3, r3
 80174ba:	4619      	mov	r1, r3
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f00a f87f 	bl	80215c0 <HAL_PCD_DataOutStageCallback>
 80174c2:	e046      	b.n	8017552 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	4a26      	ldr	r2, [pc, #152]	; (8017560 <PCD_EP_OutXfrComplete_int+0x214>)
 80174c8:	4293      	cmp	r3, r2
 80174ca:	d124      	bne.n	8017516 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d00a      	beq.n	80174ec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80174d6:	683b      	ldr	r3, [r7, #0]
 80174d8:	015a      	lsls	r2, r3, #5
 80174da:	693b      	ldr	r3, [r7, #16]
 80174dc:	4413      	add	r3, r2
 80174de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80174e2:	461a      	mov	r2, r3
 80174e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80174e8:	6093      	str	r3, [r2, #8]
 80174ea:	e032      	b.n	8017552 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	f003 0320 	and.w	r3, r3, #32
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d008      	beq.n	8017508 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	015a      	lsls	r2, r3, #5
 80174fa:	693b      	ldr	r3, [r7, #16]
 80174fc:	4413      	add	r3, r2
 80174fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017502:	461a      	mov	r2, r3
 8017504:	2320      	movs	r3, #32
 8017506:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8017508:	683b      	ldr	r3, [r7, #0]
 801750a:	b2db      	uxtb	r3, r3
 801750c:	4619      	mov	r1, r3
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f00a f856 	bl	80215c0 <HAL_PCD_DataOutStageCallback>
 8017514:	e01d      	b.n	8017552 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8017516:	683b      	ldr	r3, [r7, #0]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d114      	bne.n	8017546 <PCD_EP_OutXfrComplete_int+0x1fa>
 801751c:	6879      	ldr	r1, [r7, #4]
 801751e:	683a      	ldr	r2, [r7, #0]
 8017520:	4613      	mov	r3, r2
 8017522:	00db      	lsls	r3, r3, #3
 8017524:	1a9b      	subs	r3, r3, r2
 8017526:	009b      	lsls	r3, r3, #2
 8017528:	440b      	add	r3, r1
 801752a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d108      	bne.n	8017546 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	6818      	ldr	r0, [r3, #0]
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801753e:	461a      	mov	r2, r3
 8017540:	2100      	movs	r1, #0
 8017542:	f005 f835 	bl	801c5b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	b2db      	uxtb	r3, r3
 801754a:	4619      	mov	r1, r3
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	f00a f837 	bl	80215c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8017552:	2300      	movs	r3, #0
}
 8017554:	4618      	mov	r0, r3
 8017556:	3718      	adds	r7, #24
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}
 801755c:	4f54300a 	.word	0x4f54300a
 8017560:	4f54310a 	.word	0x4f54310a

08017564 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b086      	sub	sp, #24
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
 801756c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017574:	697b      	ldr	r3, [r7, #20]
 8017576:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8017578:	697b      	ldr	r3, [r7, #20]
 801757a:	333c      	adds	r3, #60	; 0x3c
 801757c:	3304      	adds	r3, #4
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	015a      	lsls	r2, r3, #5
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	4413      	add	r3, r2
 801758a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801758e:	689b      	ldr	r3, [r3, #8]
 8017590:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	4a15      	ldr	r2, [pc, #84]	; (80175ec <PCD_EP_OutSetupPacket_int+0x88>)
 8017596:	4293      	cmp	r3, r2
 8017598:	d90e      	bls.n	80175b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d009      	beq.n	80175b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	015a      	lsls	r2, r3, #5
 80175a8:	693b      	ldr	r3, [r7, #16]
 80175aa:	4413      	add	r3, r2
 80175ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80175b0:	461a      	mov	r2, r3
 80175b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80175b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80175b8:	6878      	ldr	r0, [r7, #4]
 80175ba:	f009 ffef 	bl	802159c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	4a0a      	ldr	r2, [pc, #40]	; (80175ec <PCD_EP_OutSetupPacket_int+0x88>)
 80175c2:	4293      	cmp	r3, r2
 80175c4:	d90c      	bls.n	80175e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	691b      	ldr	r3, [r3, #16]
 80175ca:	2b01      	cmp	r3, #1
 80175cc:	d108      	bne.n	80175e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	6818      	ldr	r0, [r3, #0]
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80175d8:	461a      	mov	r2, r3
 80175da:	2101      	movs	r1, #1
 80175dc:	f004 ffe8 	bl	801c5b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80175e0:	2300      	movs	r3, #0
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	3718      	adds	r7, #24
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}
 80175ea:	bf00      	nop
 80175ec:	4f54300a 	.word	0x4f54300a

080175f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b085      	sub	sp, #20
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
 80175f8:	460b      	mov	r3, r1
 80175fa:	70fb      	strb	r3, [r7, #3]
 80175fc:	4613      	mov	r3, r2
 80175fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017606:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8017608:	78fb      	ldrb	r3, [r7, #3]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d107      	bne.n	801761e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801760e:	883b      	ldrh	r3, [r7, #0]
 8017610:	0419      	lsls	r1, r3, #16
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	68ba      	ldr	r2, [r7, #8]
 8017618:	430a      	orrs	r2, r1
 801761a:	629a      	str	r2, [r3, #40]	; 0x28
 801761c:	e028      	b.n	8017670 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017624:	0c1b      	lsrs	r3, r3, #16
 8017626:	68ba      	ldr	r2, [r7, #8]
 8017628:	4413      	add	r3, r2
 801762a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801762c:	2300      	movs	r3, #0
 801762e:	73fb      	strb	r3, [r7, #15]
 8017630:	e00d      	b.n	801764e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681a      	ldr	r2, [r3, #0]
 8017636:	7bfb      	ldrb	r3, [r7, #15]
 8017638:	3340      	adds	r3, #64	; 0x40
 801763a:	009b      	lsls	r3, r3, #2
 801763c:	4413      	add	r3, r2
 801763e:	685b      	ldr	r3, [r3, #4]
 8017640:	0c1b      	lsrs	r3, r3, #16
 8017642:	68ba      	ldr	r2, [r7, #8]
 8017644:	4413      	add	r3, r2
 8017646:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8017648:	7bfb      	ldrb	r3, [r7, #15]
 801764a:	3301      	adds	r3, #1
 801764c:	73fb      	strb	r3, [r7, #15]
 801764e:	7bfa      	ldrb	r2, [r7, #15]
 8017650:	78fb      	ldrb	r3, [r7, #3]
 8017652:	3b01      	subs	r3, #1
 8017654:	429a      	cmp	r2, r3
 8017656:	d3ec      	bcc.n	8017632 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8017658:	883b      	ldrh	r3, [r7, #0]
 801765a:	0418      	lsls	r0, r3, #16
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	6819      	ldr	r1, [r3, #0]
 8017660:	78fb      	ldrb	r3, [r7, #3]
 8017662:	3b01      	subs	r3, #1
 8017664:	68ba      	ldr	r2, [r7, #8]
 8017666:	4302      	orrs	r2, r0
 8017668:	3340      	adds	r3, #64	; 0x40
 801766a:	009b      	lsls	r3, r3, #2
 801766c:	440b      	add	r3, r1
 801766e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8017670:	2300      	movs	r3, #0
}
 8017672:	4618      	mov	r0, r3
 8017674:	3714      	adds	r7, #20
 8017676:	46bd      	mov	sp, r7
 8017678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767c:	4770      	bx	lr

0801767e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801767e:	b480      	push	{r7}
 8017680:	b083      	sub	sp, #12
 8017682:	af00      	add	r7, sp, #0
 8017684:	6078      	str	r0, [r7, #4]
 8017686:	460b      	mov	r3, r1
 8017688:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	887a      	ldrh	r2, [r7, #2]
 8017690:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8017692:	2300      	movs	r3, #0
}
 8017694:	4618      	mov	r0, r3
 8017696:	370c      	adds	r7, #12
 8017698:	46bd      	mov	sp, r7
 801769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801769e:	4770      	bx	lr

080176a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80176a0:	b480      	push	{r7}
 80176a2:	b083      	sub	sp, #12
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	460b      	mov	r3, r1
 80176aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80176ac:	bf00      	nop
 80176ae:	370c      	adds	r7, #12
 80176b0:	46bd      	mov	sp, r7
 80176b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b6:	4770      	bx	lr

080176b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b086      	sub	sp, #24
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d101      	bne.n	80176ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80176c6:	2301      	movs	r3, #1
 80176c8:	e264      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	f003 0301 	and.w	r3, r3, #1
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d075      	beq.n	80177c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80176d6:	4ba3      	ldr	r3, [pc, #652]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80176d8:	689b      	ldr	r3, [r3, #8]
 80176da:	f003 030c 	and.w	r3, r3, #12
 80176de:	2b04      	cmp	r3, #4
 80176e0:	d00c      	beq.n	80176fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80176e2:	4ba0      	ldr	r3, [pc, #640]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80176e4:	689b      	ldr	r3, [r3, #8]
 80176e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80176ea:	2b08      	cmp	r3, #8
 80176ec:	d112      	bne.n	8017714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80176ee:	4b9d      	ldr	r3, [pc, #628]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80176f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80176fa:	d10b      	bne.n	8017714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80176fc:	4b99      	ldr	r3, [pc, #612]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017704:	2b00      	cmp	r3, #0
 8017706:	d05b      	beq.n	80177c0 <HAL_RCC_OscConfig+0x108>
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	685b      	ldr	r3, [r3, #4]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d157      	bne.n	80177c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8017710:	2301      	movs	r3, #1
 8017712:	e23f      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	685b      	ldr	r3, [r3, #4]
 8017718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801771c:	d106      	bne.n	801772c <HAL_RCC_OscConfig+0x74>
 801771e:	4b91      	ldr	r3, [pc, #580]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	4a90      	ldr	r2, [pc, #576]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017728:	6013      	str	r3, [r2, #0]
 801772a:	e01d      	b.n	8017768 <HAL_RCC_OscConfig+0xb0>
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	685b      	ldr	r3, [r3, #4]
 8017730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8017734:	d10c      	bne.n	8017750 <HAL_RCC_OscConfig+0x98>
 8017736:	4b8b      	ldr	r3, [pc, #556]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	4a8a      	ldr	r2, [pc, #552]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 801773c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017740:	6013      	str	r3, [r2, #0]
 8017742:	4b88      	ldr	r3, [pc, #544]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	4a87      	ldr	r2, [pc, #540]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801774c:	6013      	str	r3, [r2, #0]
 801774e:	e00b      	b.n	8017768 <HAL_RCC_OscConfig+0xb0>
 8017750:	4b84      	ldr	r3, [pc, #528]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	4a83      	ldr	r2, [pc, #524]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801775a:	6013      	str	r3, [r2, #0]
 801775c:	4b81      	ldr	r3, [pc, #516]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	4a80      	ldr	r2, [pc, #512]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	685b      	ldr	r3, [r3, #4]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d013      	beq.n	8017798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017770:	f7fc fa40 	bl	8013bf4 <HAL_GetTick>
 8017774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017776:	e008      	b.n	801778a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017778:	f7fc fa3c 	bl	8013bf4 <HAL_GetTick>
 801777c:	4602      	mov	r2, r0
 801777e:	693b      	ldr	r3, [r7, #16]
 8017780:	1ad3      	subs	r3, r2, r3
 8017782:	2b64      	cmp	r3, #100	; 0x64
 8017784:	d901      	bls.n	801778a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8017786:	2303      	movs	r3, #3
 8017788:	e204      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801778a:	4b76      	ldr	r3, [pc, #472]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017792:	2b00      	cmp	r3, #0
 8017794:	d0f0      	beq.n	8017778 <HAL_RCC_OscConfig+0xc0>
 8017796:	e014      	b.n	80177c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017798:	f7fc fa2c 	bl	8013bf4 <HAL_GetTick>
 801779c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801779e:	e008      	b.n	80177b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80177a0:	f7fc fa28 	bl	8013bf4 <HAL_GetTick>
 80177a4:	4602      	mov	r2, r0
 80177a6:	693b      	ldr	r3, [r7, #16]
 80177a8:	1ad3      	subs	r3, r2, r3
 80177aa:	2b64      	cmp	r3, #100	; 0x64
 80177ac:	d901      	bls.n	80177b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80177ae:	2303      	movs	r3, #3
 80177b0:	e1f0      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80177b2:	4b6c      	ldr	r3, [pc, #432]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d1f0      	bne.n	80177a0 <HAL_RCC_OscConfig+0xe8>
 80177be:	e000      	b.n	80177c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80177c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	f003 0302 	and.w	r3, r3, #2
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d063      	beq.n	8017896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80177ce:	4b65      	ldr	r3, [pc, #404]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80177d0:	689b      	ldr	r3, [r3, #8]
 80177d2:	f003 030c 	and.w	r3, r3, #12
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d00b      	beq.n	80177f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80177da:	4b62      	ldr	r3, [pc, #392]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80177dc:	689b      	ldr	r3, [r3, #8]
 80177de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80177e2:	2b08      	cmp	r3, #8
 80177e4:	d11c      	bne.n	8017820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80177e6:	4b5f      	ldr	r3, [pc, #380]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80177e8:	685b      	ldr	r3, [r3, #4]
 80177ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d116      	bne.n	8017820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80177f2:	4b5c      	ldr	r3, [pc, #368]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	f003 0302 	and.w	r3, r3, #2
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d005      	beq.n	801780a <HAL_RCC_OscConfig+0x152>
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	68db      	ldr	r3, [r3, #12]
 8017802:	2b01      	cmp	r3, #1
 8017804:	d001      	beq.n	801780a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8017806:	2301      	movs	r3, #1
 8017808:	e1c4      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801780a:	4b56      	ldr	r3, [pc, #344]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	691b      	ldr	r3, [r3, #16]
 8017816:	00db      	lsls	r3, r3, #3
 8017818:	4952      	ldr	r1, [pc, #328]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 801781a:	4313      	orrs	r3, r2
 801781c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801781e:	e03a      	b.n	8017896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	68db      	ldr	r3, [r3, #12]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d020      	beq.n	801786a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017828:	4b4f      	ldr	r3, [pc, #316]	; (8017968 <HAL_RCC_OscConfig+0x2b0>)
 801782a:	2201      	movs	r2, #1
 801782c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801782e:	f7fc f9e1 	bl	8013bf4 <HAL_GetTick>
 8017832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017834:	e008      	b.n	8017848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017836:	f7fc f9dd 	bl	8013bf4 <HAL_GetTick>
 801783a:	4602      	mov	r2, r0
 801783c:	693b      	ldr	r3, [r7, #16]
 801783e:	1ad3      	subs	r3, r2, r3
 8017840:	2b02      	cmp	r3, #2
 8017842:	d901      	bls.n	8017848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8017844:	2303      	movs	r3, #3
 8017846:	e1a5      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017848:	4b46      	ldr	r3, [pc, #280]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	f003 0302 	and.w	r3, r3, #2
 8017850:	2b00      	cmp	r3, #0
 8017852:	d0f0      	beq.n	8017836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017854:	4b43      	ldr	r3, [pc, #268]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	691b      	ldr	r3, [r3, #16]
 8017860:	00db      	lsls	r3, r3, #3
 8017862:	4940      	ldr	r1, [pc, #256]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017864:	4313      	orrs	r3, r2
 8017866:	600b      	str	r3, [r1, #0]
 8017868:	e015      	b.n	8017896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801786a:	4b3f      	ldr	r3, [pc, #252]	; (8017968 <HAL_RCC_OscConfig+0x2b0>)
 801786c:	2200      	movs	r2, #0
 801786e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017870:	f7fc f9c0 	bl	8013bf4 <HAL_GetTick>
 8017874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017876:	e008      	b.n	801788a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017878:	f7fc f9bc 	bl	8013bf4 <HAL_GetTick>
 801787c:	4602      	mov	r2, r0
 801787e:	693b      	ldr	r3, [r7, #16]
 8017880:	1ad3      	subs	r3, r2, r3
 8017882:	2b02      	cmp	r3, #2
 8017884:	d901      	bls.n	801788a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8017886:	2303      	movs	r3, #3
 8017888:	e184      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801788a:	4b36      	ldr	r3, [pc, #216]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	f003 0302 	and.w	r3, r3, #2
 8017892:	2b00      	cmp	r3, #0
 8017894:	d1f0      	bne.n	8017878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	f003 0308 	and.w	r3, r3, #8
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d030      	beq.n	8017904 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	695b      	ldr	r3, [r3, #20]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d016      	beq.n	80178d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80178aa:	4b30      	ldr	r3, [pc, #192]	; (801796c <HAL_RCC_OscConfig+0x2b4>)
 80178ac:	2201      	movs	r2, #1
 80178ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80178b0:	f7fc f9a0 	bl	8013bf4 <HAL_GetTick>
 80178b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80178b6:	e008      	b.n	80178ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80178b8:	f7fc f99c 	bl	8013bf4 <HAL_GetTick>
 80178bc:	4602      	mov	r2, r0
 80178be:	693b      	ldr	r3, [r7, #16]
 80178c0:	1ad3      	subs	r3, r2, r3
 80178c2:	2b02      	cmp	r3, #2
 80178c4:	d901      	bls.n	80178ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80178c6:	2303      	movs	r3, #3
 80178c8:	e164      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80178ca:	4b26      	ldr	r3, [pc, #152]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80178cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80178ce:	f003 0302 	and.w	r3, r3, #2
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d0f0      	beq.n	80178b8 <HAL_RCC_OscConfig+0x200>
 80178d6:	e015      	b.n	8017904 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80178d8:	4b24      	ldr	r3, [pc, #144]	; (801796c <HAL_RCC_OscConfig+0x2b4>)
 80178da:	2200      	movs	r2, #0
 80178dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80178de:	f7fc f989 	bl	8013bf4 <HAL_GetTick>
 80178e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80178e4:	e008      	b.n	80178f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80178e6:	f7fc f985 	bl	8013bf4 <HAL_GetTick>
 80178ea:	4602      	mov	r2, r0
 80178ec:	693b      	ldr	r3, [r7, #16]
 80178ee:	1ad3      	subs	r3, r2, r3
 80178f0:	2b02      	cmp	r3, #2
 80178f2:	d901      	bls.n	80178f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80178f4:	2303      	movs	r3, #3
 80178f6:	e14d      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80178f8:	4b1a      	ldr	r3, [pc, #104]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 80178fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80178fc:	f003 0302 	and.w	r3, r3, #2
 8017900:	2b00      	cmp	r3, #0
 8017902:	d1f0      	bne.n	80178e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f003 0304 	and.w	r3, r3, #4
 801790c:	2b00      	cmp	r3, #0
 801790e:	f000 80a0 	beq.w	8017a52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017912:	2300      	movs	r3, #0
 8017914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017916:	4b13      	ldr	r3, [pc, #76]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801791a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801791e:	2b00      	cmp	r3, #0
 8017920:	d10f      	bne.n	8017942 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017922:	2300      	movs	r3, #0
 8017924:	60bb      	str	r3, [r7, #8]
 8017926:	4b0f      	ldr	r3, [pc, #60]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801792a:	4a0e      	ldr	r2, [pc, #56]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 801792c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017930:	6413      	str	r3, [r2, #64]	; 0x40
 8017932:	4b0c      	ldr	r3, [pc, #48]	; (8017964 <HAL_RCC_OscConfig+0x2ac>)
 8017934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801793a:	60bb      	str	r3, [r7, #8]
 801793c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801793e:	2301      	movs	r3, #1
 8017940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017942:	4b0b      	ldr	r3, [pc, #44]	; (8017970 <HAL_RCC_OscConfig+0x2b8>)
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801794a:	2b00      	cmp	r3, #0
 801794c:	d121      	bne.n	8017992 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801794e:	4b08      	ldr	r3, [pc, #32]	; (8017970 <HAL_RCC_OscConfig+0x2b8>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	4a07      	ldr	r2, [pc, #28]	; (8017970 <HAL_RCC_OscConfig+0x2b8>)
 8017954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801795a:	f7fc f94b 	bl	8013bf4 <HAL_GetTick>
 801795e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017960:	e011      	b.n	8017986 <HAL_RCC_OscConfig+0x2ce>
 8017962:	bf00      	nop
 8017964:	40023800 	.word	0x40023800
 8017968:	42470000 	.word	0x42470000
 801796c:	42470e80 	.word	0x42470e80
 8017970:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017974:	f7fc f93e 	bl	8013bf4 <HAL_GetTick>
 8017978:	4602      	mov	r2, r0
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	1ad3      	subs	r3, r2, r3
 801797e:	2b02      	cmp	r3, #2
 8017980:	d901      	bls.n	8017986 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8017982:	2303      	movs	r3, #3
 8017984:	e106      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017986:	4b85      	ldr	r3, [pc, #532]	; (8017b9c <HAL_RCC_OscConfig+0x4e4>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801798e:	2b00      	cmp	r3, #0
 8017990:	d0f0      	beq.n	8017974 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	689b      	ldr	r3, [r3, #8]
 8017996:	2b01      	cmp	r3, #1
 8017998:	d106      	bne.n	80179a8 <HAL_RCC_OscConfig+0x2f0>
 801799a:	4b81      	ldr	r3, [pc, #516]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 801799c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801799e:	4a80      	ldr	r2, [pc, #512]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 80179a0:	f043 0301 	orr.w	r3, r3, #1
 80179a4:	6713      	str	r3, [r2, #112]	; 0x70
 80179a6:	e01c      	b.n	80179e2 <HAL_RCC_OscConfig+0x32a>
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	689b      	ldr	r3, [r3, #8]
 80179ac:	2b05      	cmp	r3, #5
 80179ae:	d10c      	bne.n	80179ca <HAL_RCC_OscConfig+0x312>
 80179b0:	4b7b      	ldr	r3, [pc, #492]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 80179b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80179b4:	4a7a      	ldr	r2, [pc, #488]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 80179b6:	f043 0304 	orr.w	r3, r3, #4
 80179ba:	6713      	str	r3, [r2, #112]	; 0x70
 80179bc:	4b78      	ldr	r3, [pc, #480]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 80179be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80179c0:	4a77      	ldr	r2, [pc, #476]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 80179c2:	f043 0301 	orr.w	r3, r3, #1
 80179c6:	6713      	str	r3, [r2, #112]	; 0x70
 80179c8:	e00b      	b.n	80179e2 <HAL_RCC_OscConfig+0x32a>
 80179ca:	4b75      	ldr	r3, [pc, #468]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 80179cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80179ce:	4a74      	ldr	r2, [pc, #464]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 80179d0:	f023 0301 	bic.w	r3, r3, #1
 80179d4:	6713      	str	r3, [r2, #112]	; 0x70
 80179d6:	4b72      	ldr	r3, [pc, #456]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 80179d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80179da:	4a71      	ldr	r2, [pc, #452]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 80179dc:	f023 0304 	bic.w	r3, r3, #4
 80179e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	689b      	ldr	r3, [r3, #8]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d015      	beq.n	8017a16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80179ea:	f7fc f903 	bl	8013bf4 <HAL_GetTick>
 80179ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80179f0:	e00a      	b.n	8017a08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80179f2:	f7fc f8ff 	bl	8013bf4 <HAL_GetTick>
 80179f6:	4602      	mov	r2, r0
 80179f8:	693b      	ldr	r3, [r7, #16]
 80179fa:	1ad3      	subs	r3, r2, r3
 80179fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8017a00:	4293      	cmp	r3, r2
 8017a02:	d901      	bls.n	8017a08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8017a04:	2303      	movs	r3, #3
 8017a06:	e0c5      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017a08:	4b65      	ldr	r3, [pc, #404]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a0c:	f003 0302 	and.w	r3, r3, #2
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d0ee      	beq.n	80179f2 <HAL_RCC_OscConfig+0x33a>
 8017a14:	e014      	b.n	8017a40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017a16:	f7fc f8ed 	bl	8013bf4 <HAL_GetTick>
 8017a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8017a1c:	e00a      	b.n	8017a34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017a1e:	f7fc f8e9 	bl	8013bf4 <HAL_GetTick>
 8017a22:	4602      	mov	r2, r0
 8017a24:	693b      	ldr	r3, [r7, #16]
 8017a26:	1ad3      	subs	r3, r2, r3
 8017a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8017a2c:	4293      	cmp	r3, r2
 8017a2e:	d901      	bls.n	8017a34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8017a30:	2303      	movs	r3, #3
 8017a32:	e0af      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8017a34:	4b5a      	ldr	r3, [pc, #360]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a38:	f003 0302 	and.w	r3, r3, #2
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d1ee      	bne.n	8017a1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8017a40:	7dfb      	ldrb	r3, [r7, #23]
 8017a42:	2b01      	cmp	r3, #1
 8017a44:	d105      	bne.n	8017a52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017a46:	4b56      	ldr	r3, [pc, #344]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a4a:	4a55      	ldr	r2, [pc, #340]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017a50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	699b      	ldr	r3, [r3, #24]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	f000 809b 	beq.w	8017b92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8017a5c:	4b50      	ldr	r3, [pc, #320]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017a5e:	689b      	ldr	r3, [r3, #8]
 8017a60:	f003 030c 	and.w	r3, r3, #12
 8017a64:	2b08      	cmp	r3, #8
 8017a66:	d05c      	beq.n	8017b22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	699b      	ldr	r3, [r3, #24]
 8017a6c:	2b02      	cmp	r3, #2
 8017a6e:	d141      	bne.n	8017af4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017a70:	4b4c      	ldr	r3, [pc, #304]	; (8017ba4 <HAL_RCC_OscConfig+0x4ec>)
 8017a72:	2200      	movs	r2, #0
 8017a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017a76:	f7fc f8bd 	bl	8013bf4 <HAL_GetTick>
 8017a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017a7c:	e008      	b.n	8017a90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017a7e:	f7fc f8b9 	bl	8013bf4 <HAL_GetTick>
 8017a82:	4602      	mov	r2, r0
 8017a84:	693b      	ldr	r3, [r7, #16]
 8017a86:	1ad3      	subs	r3, r2, r3
 8017a88:	2b02      	cmp	r3, #2
 8017a8a:	d901      	bls.n	8017a90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8017a8c:	2303      	movs	r3, #3
 8017a8e:	e081      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017a90:	4b43      	ldr	r3, [pc, #268]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d1f0      	bne.n	8017a7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	69da      	ldr	r2, [r3, #28]
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	6a1b      	ldr	r3, [r3, #32]
 8017aa4:	431a      	orrs	r2, r3
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aaa:	019b      	lsls	r3, r3, #6
 8017aac:	431a      	orrs	r2, r3
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ab2:	085b      	lsrs	r3, r3, #1
 8017ab4:	3b01      	subs	r3, #1
 8017ab6:	041b      	lsls	r3, r3, #16
 8017ab8:	431a      	orrs	r2, r3
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017abe:	061b      	lsls	r3, r3, #24
 8017ac0:	4937      	ldr	r1, [pc, #220]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017ac2:	4313      	orrs	r3, r2
 8017ac4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017ac6:	4b37      	ldr	r3, [pc, #220]	; (8017ba4 <HAL_RCC_OscConfig+0x4ec>)
 8017ac8:	2201      	movs	r2, #1
 8017aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017acc:	f7fc f892 	bl	8013bf4 <HAL_GetTick>
 8017ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017ad2:	e008      	b.n	8017ae6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017ad4:	f7fc f88e 	bl	8013bf4 <HAL_GetTick>
 8017ad8:	4602      	mov	r2, r0
 8017ada:	693b      	ldr	r3, [r7, #16]
 8017adc:	1ad3      	subs	r3, r2, r3
 8017ade:	2b02      	cmp	r3, #2
 8017ae0:	d901      	bls.n	8017ae6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8017ae2:	2303      	movs	r3, #3
 8017ae4:	e056      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017ae6:	4b2e      	ldr	r3, [pc, #184]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d0f0      	beq.n	8017ad4 <HAL_RCC_OscConfig+0x41c>
 8017af2:	e04e      	b.n	8017b92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017af4:	4b2b      	ldr	r3, [pc, #172]	; (8017ba4 <HAL_RCC_OscConfig+0x4ec>)
 8017af6:	2200      	movs	r2, #0
 8017af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017afa:	f7fc f87b 	bl	8013bf4 <HAL_GetTick>
 8017afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017b00:	e008      	b.n	8017b14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017b02:	f7fc f877 	bl	8013bf4 <HAL_GetTick>
 8017b06:	4602      	mov	r2, r0
 8017b08:	693b      	ldr	r3, [r7, #16]
 8017b0a:	1ad3      	subs	r3, r2, r3
 8017b0c:	2b02      	cmp	r3, #2
 8017b0e:	d901      	bls.n	8017b14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8017b10:	2303      	movs	r3, #3
 8017b12:	e03f      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017b14:	4b22      	ldr	r3, [pc, #136]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d1f0      	bne.n	8017b02 <HAL_RCC_OscConfig+0x44a>
 8017b20:	e037      	b.n	8017b92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	699b      	ldr	r3, [r3, #24]
 8017b26:	2b01      	cmp	r3, #1
 8017b28:	d101      	bne.n	8017b2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	e032      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8017b2e:	4b1c      	ldr	r3, [pc, #112]	; (8017ba0 <HAL_RCC_OscConfig+0x4e8>)
 8017b30:	685b      	ldr	r3, [r3, #4]
 8017b32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	699b      	ldr	r3, [r3, #24]
 8017b38:	2b01      	cmp	r3, #1
 8017b3a:	d028      	beq.n	8017b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d121      	bne.n	8017b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017b54:	429a      	cmp	r2, r3
 8017b56:	d11a      	bne.n	8017b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017b58:	68fa      	ldr	r2, [r7, #12]
 8017b5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017b5e:	4013      	ands	r3, r2
 8017b60:	687a      	ldr	r2, [r7, #4]
 8017b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017b64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017b66:	4293      	cmp	r3, r2
 8017b68:	d111      	bne.n	8017b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b74:	085b      	lsrs	r3, r3, #1
 8017b76:	3b01      	subs	r3, #1
 8017b78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017b7a:	429a      	cmp	r2, r3
 8017b7c:	d107      	bne.n	8017b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	d001      	beq.n	8017b92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8017b8e:	2301      	movs	r3, #1
 8017b90:	e000      	b.n	8017b94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8017b92:	2300      	movs	r3, #0
}
 8017b94:	4618      	mov	r0, r3
 8017b96:	3718      	adds	r7, #24
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}
 8017b9c:	40007000 	.word	0x40007000
 8017ba0:	40023800 	.word	0x40023800
 8017ba4:	42470060 	.word	0x42470060

08017ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b084      	sub	sp, #16
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
 8017bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d101      	bne.n	8017bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017bb8:	2301      	movs	r3, #1
 8017bba:	e0cc      	b.n	8017d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8017bbc:	4b68      	ldr	r3, [pc, #416]	; (8017d60 <HAL_RCC_ClockConfig+0x1b8>)
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	f003 0307 	and.w	r3, r3, #7
 8017bc4:	683a      	ldr	r2, [r7, #0]
 8017bc6:	429a      	cmp	r2, r3
 8017bc8:	d90c      	bls.n	8017be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017bca:	4b65      	ldr	r3, [pc, #404]	; (8017d60 <HAL_RCC_ClockConfig+0x1b8>)
 8017bcc:	683a      	ldr	r2, [r7, #0]
 8017bce:	b2d2      	uxtb	r2, r2
 8017bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8017bd2:	4b63      	ldr	r3, [pc, #396]	; (8017d60 <HAL_RCC_ClockConfig+0x1b8>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	f003 0307 	and.w	r3, r3, #7
 8017bda:	683a      	ldr	r2, [r7, #0]
 8017bdc:	429a      	cmp	r2, r3
 8017bde:	d001      	beq.n	8017be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8017be0:	2301      	movs	r3, #1
 8017be2:	e0b8      	b.n	8017d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	f003 0302 	and.w	r3, r3, #2
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d020      	beq.n	8017c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	f003 0304 	and.w	r3, r3, #4
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d005      	beq.n	8017c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017bfc:	4b59      	ldr	r3, [pc, #356]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017bfe:	689b      	ldr	r3, [r3, #8]
 8017c00:	4a58      	ldr	r2, [pc, #352]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8017c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	f003 0308 	and.w	r3, r3, #8
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d005      	beq.n	8017c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8017c14:	4b53      	ldr	r3, [pc, #332]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c16:	689b      	ldr	r3, [r3, #8]
 8017c18:	4a52      	ldr	r2, [pc, #328]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8017c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017c20:	4b50      	ldr	r3, [pc, #320]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c22:	689b      	ldr	r3, [r3, #8]
 8017c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	689b      	ldr	r3, [r3, #8]
 8017c2c:	494d      	ldr	r1, [pc, #308]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c2e:	4313      	orrs	r3, r2
 8017c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	f003 0301 	and.w	r3, r3, #1
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d044      	beq.n	8017cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	685b      	ldr	r3, [r3, #4]
 8017c42:	2b01      	cmp	r3, #1
 8017c44:	d107      	bne.n	8017c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017c46:	4b47      	ldr	r3, [pc, #284]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d119      	bne.n	8017c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8017c52:	2301      	movs	r3, #1
 8017c54:	e07f      	b.n	8017d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	685b      	ldr	r3, [r3, #4]
 8017c5a:	2b02      	cmp	r3, #2
 8017c5c:	d003      	beq.n	8017c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8017c62:	2b03      	cmp	r3, #3
 8017c64:	d107      	bne.n	8017c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017c66:	4b3f      	ldr	r3, [pc, #252]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d109      	bne.n	8017c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8017c72:	2301      	movs	r3, #1
 8017c74:	e06f      	b.n	8017d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017c76:	4b3b      	ldr	r3, [pc, #236]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	f003 0302 	and.w	r3, r3, #2
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d101      	bne.n	8017c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8017c82:	2301      	movs	r3, #1
 8017c84:	e067      	b.n	8017d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017c86:	4b37      	ldr	r3, [pc, #220]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c88:	689b      	ldr	r3, [r3, #8]
 8017c8a:	f023 0203 	bic.w	r2, r3, #3
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	685b      	ldr	r3, [r3, #4]
 8017c92:	4934      	ldr	r1, [pc, #208]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017c94:	4313      	orrs	r3, r2
 8017c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8017c98:	f7fb ffac 	bl	8013bf4 <HAL_GetTick>
 8017c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017c9e:	e00a      	b.n	8017cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017ca0:	f7fb ffa8 	bl	8013bf4 <HAL_GetTick>
 8017ca4:	4602      	mov	r2, r0
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	1ad3      	subs	r3, r2, r3
 8017caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	d901      	bls.n	8017cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8017cb2:	2303      	movs	r3, #3
 8017cb4:	e04f      	b.n	8017d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017cb6:	4b2b      	ldr	r3, [pc, #172]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017cb8:	689b      	ldr	r3, [r3, #8]
 8017cba:	f003 020c 	and.w	r2, r3, #12
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	685b      	ldr	r3, [r3, #4]
 8017cc2:	009b      	lsls	r3, r3, #2
 8017cc4:	429a      	cmp	r2, r3
 8017cc6:	d1eb      	bne.n	8017ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8017cc8:	4b25      	ldr	r3, [pc, #148]	; (8017d60 <HAL_RCC_ClockConfig+0x1b8>)
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	f003 0307 	and.w	r3, r3, #7
 8017cd0:	683a      	ldr	r2, [r7, #0]
 8017cd2:	429a      	cmp	r2, r3
 8017cd4:	d20c      	bcs.n	8017cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017cd6:	4b22      	ldr	r3, [pc, #136]	; (8017d60 <HAL_RCC_ClockConfig+0x1b8>)
 8017cd8:	683a      	ldr	r2, [r7, #0]
 8017cda:	b2d2      	uxtb	r2, r2
 8017cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8017cde:	4b20      	ldr	r3, [pc, #128]	; (8017d60 <HAL_RCC_ClockConfig+0x1b8>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	f003 0307 	and.w	r3, r3, #7
 8017ce6:	683a      	ldr	r2, [r7, #0]
 8017ce8:	429a      	cmp	r2, r3
 8017cea:	d001      	beq.n	8017cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8017cec:	2301      	movs	r3, #1
 8017cee:	e032      	b.n	8017d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	f003 0304 	and.w	r3, r3, #4
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d008      	beq.n	8017d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017cfc:	4b19      	ldr	r3, [pc, #100]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017cfe:	689b      	ldr	r3, [r3, #8]
 8017d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	68db      	ldr	r3, [r3, #12]
 8017d08:	4916      	ldr	r1, [pc, #88]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017d0a:	4313      	orrs	r3, r2
 8017d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	f003 0308 	and.w	r3, r3, #8
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d009      	beq.n	8017d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017d1a:	4b12      	ldr	r3, [pc, #72]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017d1c:	689b      	ldr	r3, [r3, #8]
 8017d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	691b      	ldr	r3, [r3, #16]
 8017d26:	00db      	lsls	r3, r3, #3
 8017d28:	490e      	ldr	r1, [pc, #56]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017d2a:	4313      	orrs	r3, r2
 8017d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8017d2e:	f000 f821 	bl	8017d74 <HAL_RCC_GetSysClockFreq>
 8017d32:	4602      	mov	r2, r0
 8017d34:	4b0b      	ldr	r3, [pc, #44]	; (8017d64 <HAL_RCC_ClockConfig+0x1bc>)
 8017d36:	689b      	ldr	r3, [r3, #8]
 8017d38:	091b      	lsrs	r3, r3, #4
 8017d3a:	f003 030f 	and.w	r3, r3, #15
 8017d3e:	490a      	ldr	r1, [pc, #40]	; (8017d68 <HAL_RCC_ClockConfig+0x1c0>)
 8017d40:	5ccb      	ldrb	r3, [r1, r3]
 8017d42:	fa22 f303 	lsr.w	r3, r2, r3
 8017d46:	4a09      	ldr	r2, [pc, #36]	; (8017d6c <HAL_RCC_ClockConfig+0x1c4>)
 8017d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8017d4a:	4b09      	ldr	r3, [pc, #36]	; (8017d70 <HAL_RCC_ClockConfig+0x1c8>)
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7fb fe10 	bl	8013974 <HAL_InitTick>

  return HAL_OK;
 8017d54:	2300      	movs	r3, #0
}
 8017d56:	4618      	mov	r0, r3
 8017d58:	3710      	adds	r7, #16
 8017d5a:	46bd      	mov	sp, r7
 8017d5c:	bd80      	pop	{r7, pc}
 8017d5e:	bf00      	nop
 8017d60:	40023c00 	.word	0x40023c00
 8017d64:	40023800 	.word	0x40023800
 8017d68:	08023008 	.word	0x08023008
 8017d6c:	2000001c 	.word	0x2000001c
 8017d70:	20000020 	.word	0x20000020

08017d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017d74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017d78:	b084      	sub	sp, #16
 8017d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	607b      	str	r3, [r7, #4]
 8017d80:	2300      	movs	r3, #0
 8017d82:	60fb      	str	r3, [r7, #12]
 8017d84:	2300      	movs	r3, #0
 8017d86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8017d88:	2300      	movs	r3, #0
 8017d8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017d8c:	4b67      	ldr	r3, [pc, #412]	; (8017f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8017d8e:	689b      	ldr	r3, [r3, #8]
 8017d90:	f003 030c 	and.w	r3, r3, #12
 8017d94:	2b08      	cmp	r3, #8
 8017d96:	d00d      	beq.n	8017db4 <HAL_RCC_GetSysClockFreq+0x40>
 8017d98:	2b08      	cmp	r3, #8
 8017d9a:	f200 80bd 	bhi.w	8017f18 <HAL_RCC_GetSysClockFreq+0x1a4>
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d002      	beq.n	8017da8 <HAL_RCC_GetSysClockFreq+0x34>
 8017da2:	2b04      	cmp	r3, #4
 8017da4:	d003      	beq.n	8017dae <HAL_RCC_GetSysClockFreq+0x3a>
 8017da6:	e0b7      	b.n	8017f18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8017da8:	4b61      	ldr	r3, [pc, #388]	; (8017f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8017daa:	60bb      	str	r3, [r7, #8]
       break;
 8017dac:	e0b7      	b.n	8017f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8017dae:	4b60      	ldr	r3, [pc, #384]	; (8017f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8017db0:	60bb      	str	r3, [r7, #8]
      break;
 8017db2:	e0b4      	b.n	8017f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017db4:	4b5d      	ldr	r3, [pc, #372]	; (8017f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8017db6:	685b      	ldr	r3, [r3, #4]
 8017db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017dbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8017dbe:	4b5b      	ldr	r3, [pc, #364]	; (8017f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8017dc0:	685b      	ldr	r3, [r3, #4]
 8017dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d04d      	beq.n	8017e66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017dca:	4b58      	ldr	r3, [pc, #352]	; (8017f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	099b      	lsrs	r3, r3, #6
 8017dd0:	461a      	mov	r2, r3
 8017dd2:	f04f 0300 	mov.w	r3, #0
 8017dd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8017dda:	f04f 0100 	mov.w	r1, #0
 8017dde:	ea02 0800 	and.w	r8, r2, r0
 8017de2:	ea03 0901 	and.w	r9, r3, r1
 8017de6:	4640      	mov	r0, r8
 8017de8:	4649      	mov	r1, r9
 8017dea:	f04f 0200 	mov.w	r2, #0
 8017dee:	f04f 0300 	mov.w	r3, #0
 8017df2:	014b      	lsls	r3, r1, #5
 8017df4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8017df8:	0142      	lsls	r2, r0, #5
 8017dfa:	4610      	mov	r0, r2
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	ebb0 0008 	subs.w	r0, r0, r8
 8017e02:	eb61 0109 	sbc.w	r1, r1, r9
 8017e06:	f04f 0200 	mov.w	r2, #0
 8017e0a:	f04f 0300 	mov.w	r3, #0
 8017e0e:	018b      	lsls	r3, r1, #6
 8017e10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8017e14:	0182      	lsls	r2, r0, #6
 8017e16:	1a12      	subs	r2, r2, r0
 8017e18:	eb63 0301 	sbc.w	r3, r3, r1
 8017e1c:	f04f 0000 	mov.w	r0, #0
 8017e20:	f04f 0100 	mov.w	r1, #0
 8017e24:	00d9      	lsls	r1, r3, #3
 8017e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8017e2a:	00d0      	lsls	r0, r2, #3
 8017e2c:	4602      	mov	r2, r0
 8017e2e:	460b      	mov	r3, r1
 8017e30:	eb12 0208 	adds.w	r2, r2, r8
 8017e34:	eb43 0309 	adc.w	r3, r3, r9
 8017e38:	f04f 0000 	mov.w	r0, #0
 8017e3c:	f04f 0100 	mov.w	r1, #0
 8017e40:	0299      	lsls	r1, r3, #10
 8017e42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8017e46:	0290      	lsls	r0, r2, #10
 8017e48:	4602      	mov	r2, r0
 8017e4a:	460b      	mov	r3, r1
 8017e4c:	4610      	mov	r0, r2
 8017e4e:	4619      	mov	r1, r3
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	461a      	mov	r2, r3
 8017e54:	f04f 0300 	mov.w	r3, #0
 8017e58:	f7e8 fea8 	bl	8000bac <__aeabi_uldivmod>
 8017e5c:	4602      	mov	r2, r0
 8017e5e:	460b      	mov	r3, r1
 8017e60:	4613      	mov	r3, r2
 8017e62:	60fb      	str	r3, [r7, #12]
 8017e64:	e04a      	b.n	8017efc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017e66:	4b31      	ldr	r3, [pc, #196]	; (8017f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8017e68:	685b      	ldr	r3, [r3, #4]
 8017e6a:	099b      	lsrs	r3, r3, #6
 8017e6c:	461a      	mov	r2, r3
 8017e6e:	f04f 0300 	mov.w	r3, #0
 8017e72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8017e76:	f04f 0100 	mov.w	r1, #0
 8017e7a:	ea02 0400 	and.w	r4, r2, r0
 8017e7e:	ea03 0501 	and.w	r5, r3, r1
 8017e82:	4620      	mov	r0, r4
 8017e84:	4629      	mov	r1, r5
 8017e86:	f04f 0200 	mov.w	r2, #0
 8017e8a:	f04f 0300 	mov.w	r3, #0
 8017e8e:	014b      	lsls	r3, r1, #5
 8017e90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8017e94:	0142      	lsls	r2, r0, #5
 8017e96:	4610      	mov	r0, r2
 8017e98:	4619      	mov	r1, r3
 8017e9a:	1b00      	subs	r0, r0, r4
 8017e9c:	eb61 0105 	sbc.w	r1, r1, r5
 8017ea0:	f04f 0200 	mov.w	r2, #0
 8017ea4:	f04f 0300 	mov.w	r3, #0
 8017ea8:	018b      	lsls	r3, r1, #6
 8017eaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8017eae:	0182      	lsls	r2, r0, #6
 8017eb0:	1a12      	subs	r2, r2, r0
 8017eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8017eb6:	f04f 0000 	mov.w	r0, #0
 8017eba:	f04f 0100 	mov.w	r1, #0
 8017ebe:	00d9      	lsls	r1, r3, #3
 8017ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8017ec4:	00d0      	lsls	r0, r2, #3
 8017ec6:	4602      	mov	r2, r0
 8017ec8:	460b      	mov	r3, r1
 8017eca:	1912      	adds	r2, r2, r4
 8017ecc:	eb45 0303 	adc.w	r3, r5, r3
 8017ed0:	f04f 0000 	mov.w	r0, #0
 8017ed4:	f04f 0100 	mov.w	r1, #0
 8017ed8:	0299      	lsls	r1, r3, #10
 8017eda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8017ede:	0290      	lsls	r0, r2, #10
 8017ee0:	4602      	mov	r2, r0
 8017ee2:	460b      	mov	r3, r1
 8017ee4:	4610      	mov	r0, r2
 8017ee6:	4619      	mov	r1, r3
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	461a      	mov	r2, r3
 8017eec:	f04f 0300 	mov.w	r3, #0
 8017ef0:	f7e8 fe5c 	bl	8000bac <__aeabi_uldivmod>
 8017ef4:	4602      	mov	r2, r0
 8017ef6:	460b      	mov	r3, r1
 8017ef8:	4613      	mov	r3, r2
 8017efa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8017efc:	4b0b      	ldr	r3, [pc, #44]	; (8017f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8017efe:	685b      	ldr	r3, [r3, #4]
 8017f00:	0c1b      	lsrs	r3, r3, #16
 8017f02:	f003 0303 	and.w	r3, r3, #3
 8017f06:	3301      	adds	r3, #1
 8017f08:	005b      	lsls	r3, r3, #1
 8017f0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8017f0c:	68fa      	ldr	r2, [r7, #12]
 8017f0e:	683b      	ldr	r3, [r7, #0]
 8017f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f14:	60bb      	str	r3, [r7, #8]
      break;
 8017f16:	e002      	b.n	8017f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8017f18:	4b05      	ldr	r3, [pc, #20]	; (8017f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8017f1a:	60bb      	str	r3, [r7, #8]
      break;
 8017f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8017f1e:	68bb      	ldr	r3, [r7, #8]
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	3710      	adds	r7, #16
 8017f24:	46bd      	mov	sp, r7
 8017f26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017f2a:	bf00      	nop
 8017f2c:	40023800 	.word	0x40023800
 8017f30:	00f42400 	.word	0x00f42400

08017f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017f34:	b480      	push	{r7}
 8017f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8017f38:	4b03      	ldr	r3, [pc, #12]	; (8017f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8017f3a:	681b      	ldr	r3, [r3, #0]
}
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f44:	4770      	bx	lr
 8017f46:	bf00      	nop
 8017f48:	2000001c 	.word	0x2000001c

08017f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8017f50:	f7ff fff0 	bl	8017f34 <HAL_RCC_GetHCLKFreq>
 8017f54:	4602      	mov	r2, r0
 8017f56:	4b05      	ldr	r3, [pc, #20]	; (8017f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8017f58:	689b      	ldr	r3, [r3, #8]
 8017f5a:	0a9b      	lsrs	r3, r3, #10
 8017f5c:	f003 0307 	and.w	r3, r3, #7
 8017f60:	4903      	ldr	r1, [pc, #12]	; (8017f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8017f62:	5ccb      	ldrb	r3, [r1, r3]
 8017f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017f68:	4618      	mov	r0, r3
 8017f6a:	bd80      	pop	{r7, pc}
 8017f6c:	40023800 	.word	0x40023800
 8017f70:	08023018 	.word	0x08023018

08017f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8017f78:	f7ff ffdc 	bl	8017f34 <HAL_RCC_GetHCLKFreq>
 8017f7c:	4602      	mov	r2, r0
 8017f7e:	4b05      	ldr	r3, [pc, #20]	; (8017f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8017f80:	689b      	ldr	r3, [r3, #8]
 8017f82:	0b5b      	lsrs	r3, r3, #13
 8017f84:	f003 0307 	and.w	r3, r3, #7
 8017f88:	4903      	ldr	r1, [pc, #12]	; (8017f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8017f8a:	5ccb      	ldrb	r3, [r1, r3]
 8017f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017f90:	4618      	mov	r0, r3
 8017f92:	bd80      	pop	{r7, pc}
 8017f94:	40023800 	.word	0x40023800
 8017f98:	08023018 	.word	0x08023018

08017f9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017f9c:	b480      	push	{r7}
 8017f9e:	b083      	sub	sp, #12
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
 8017fa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	220f      	movs	r2, #15
 8017faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8017fac:	4b12      	ldr	r3, [pc, #72]	; (8017ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8017fae:	689b      	ldr	r3, [r3, #8]
 8017fb0:	f003 0203 	and.w	r2, r3, #3
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8017fb8:	4b0f      	ldr	r3, [pc, #60]	; (8017ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8017fba:	689b      	ldr	r3, [r3, #8]
 8017fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8017fc4:	4b0c      	ldr	r3, [pc, #48]	; (8017ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8017fc6:	689b      	ldr	r3, [r3, #8]
 8017fc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8017fd0:	4b09      	ldr	r3, [pc, #36]	; (8017ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8017fd2:	689b      	ldr	r3, [r3, #8]
 8017fd4:	08db      	lsrs	r3, r3, #3
 8017fd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8017fde:	4b07      	ldr	r3, [pc, #28]	; (8017ffc <HAL_RCC_GetClockConfig+0x60>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	f003 0207 	and.w	r2, r3, #7
 8017fe6:	683b      	ldr	r3, [r7, #0]
 8017fe8:	601a      	str	r2, [r3, #0]
}
 8017fea:	bf00      	nop
 8017fec:	370c      	adds	r7, #12
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff4:	4770      	bx	lr
 8017ff6:	bf00      	nop
 8017ff8:	40023800 	.word	0x40023800
 8017ffc:	40023c00 	.word	0x40023c00

08018000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d101      	bne.n	8018012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801800e:	2301      	movs	r3, #1
 8018010:	e041      	b.n	8018096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018018:	b2db      	uxtb	r3, r3
 801801a:	2b00      	cmp	r3, #0
 801801c:	d106      	bne.n	801802c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	2200      	movs	r2, #0
 8018022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	f7fb fae6 	bl	80135f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2202      	movs	r2, #2
 8018030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	681a      	ldr	r2, [r3, #0]
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	3304      	adds	r3, #4
 801803c:	4619      	mov	r1, r3
 801803e:	4610      	mov	r0, r2
 8018040:	f001 faf6 	bl	8019630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2201      	movs	r2, #1
 8018048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2201      	movs	r2, #1
 8018050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	2201      	movs	r2, #1
 8018058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2201      	movs	r2, #1
 8018060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	2201      	movs	r2, #1
 8018068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	2201      	movs	r2, #1
 8018070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	2201      	movs	r2, #1
 8018078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2201      	movs	r2, #1
 8018080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2201      	movs	r2, #1
 8018088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	2201      	movs	r2, #1
 8018090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8018094:	2300      	movs	r3, #0
}
 8018096:	4618      	mov	r0, r3
 8018098:	3708      	adds	r7, #8
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}
	...

080180a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80180a0:	b480      	push	{r7}
 80180a2:	b085      	sub	sp, #20
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80180ae:	b2db      	uxtb	r3, r3
 80180b0:	2b01      	cmp	r3, #1
 80180b2:	d001      	beq.n	80180b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80180b4:	2301      	movs	r3, #1
 80180b6:	e04e      	b.n	8018156 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	2202      	movs	r2, #2
 80180bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	68da      	ldr	r2, [r3, #12]
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	f042 0201 	orr.w	r2, r2, #1
 80180ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	4a23      	ldr	r2, [pc, #140]	; (8018164 <HAL_TIM_Base_Start_IT+0xc4>)
 80180d6:	4293      	cmp	r3, r2
 80180d8:	d022      	beq.n	8018120 <HAL_TIM_Base_Start_IT+0x80>
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80180e2:	d01d      	beq.n	8018120 <HAL_TIM_Base_Start_IT+0x80>
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	4a1f      	ldr	r2, [pc, #124]	; (8018168 <HAL_TIM_Base_Start_IT+0xc8>)
 80180ea:	4293      	cmp	r3, r2
 80180ec:	d018      	beq.n	8018120 <HAL_TIM_Base_Start_IT+0x80>
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	4a1e      	ldr	r2, [pc, #120]	; (801816c <HAL_TIM_Base_Start_IT+0xcc>)
 80180f4:	4293      	cmp	r3, r2
 80180f6:	d013      	beq.n	8018120 <HAL_TIM_Base_Start_IT+0x80>
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	4a1c      	ldr	r2, [pc, #112]	; (8018170 <HAL_TIM_Base_Start_IT+0xd0>)
 80180fe:	4293      	cmp	r3, r2
 8018100:	d00e      	beq.n	8018120 <HAL_TIM_Base_Start_IT+0x80>
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	4a1b      	ldr	r2, [pc, #108]	; (8018174 <HAL_TIM_Base_Start_IT+0xd4>)
 8018108:	4293      	cmp	r3, r2
 801810a:	d009      	beq.n	8018120 <HAL_TIM_Base_Start_IT+0x80>
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	4a19      	ldr	r2, [pc, #100]	; (8018178 <HAL_TIM_Base_Start_IT+0xd8>)
 8018112:	4293      	cmp	r3, r2
 8018114:	d004      	beq.n	8018120 <HAL_TIM_Base_Start_IT+0x80>
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	4a18      	ldr	r2, [pc, #96]	; (801817c <HAL_TIM_Base_Start_IT+0xdc>)
 801811c:	4293      	cmp	r3, r2
 801811e:	d111      	bne.n	8018144 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	689b      	ldr	r3, [r3, #8]
 8018126:	f003 0307 	and.w	r3, r3, #7
 801812a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	2b06      	cmp	r3, #6
 8018130:	d010      	beq.n	8018154 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	681a      	ldr	r2, [r3, #0]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f042 0201 	orr.w	r2, r2, #1
 8018140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018142:	e007      	b.n	8018154 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	681a      	ldr	r2, [r3, #0]
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	f042 0201 	orr.w	r2, r2, #1
 8018152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8018154:	2300      	movs	r3, #0
}
 8018156:	4618      	mov	r0, r3
 8018158:	3714      	adds	r7, #20
 801815a:	46bd      	mov	sp, r7
 801815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018160:	4770      	bx	lr
 8018162:	bf00      	nop
 8018164:	40010000 	.word	0x40010000
 8018168:	40000400 	.word	0x40000400
 801816c:	40000800 	.word	0x40000800
 8018170:	40000c00 	.word	0x40000c00
 8018174:	40010400 	.word	0x40010400
 8018178:	40014000 	.word	0x40014000
 801817c:	40001800 	.word	0x40001800

08018180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b082      	sub	sp, #8
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d101      	bne.n	8018192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801818e:	2301      	movs	r3, #1
 8018190:	e041      	b.n	8018216 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018198:	b2db      	uxtb	r3, r3
 801819a:	2b00      	cmp	r3, #0
 801819c:	d106      	bne.n	80181ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	2200      	movs	r2, #0
 80181a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80181a6:	6878      	ldr	r0, [r7, #4]
 80181a8:	f000 f839 	bl	801821e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	2202      	movs	r2, #2
 80181b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	681a      	ldr	r2, [r3, #0]
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	3304      	adds	r3, #4
 80181bc:	4619      	mov	r1, r3
 80181be:	4610      	mov	r0, r2
 80181c0:	f001 fa36 	bl	8019630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	2201      	movs	r2, #1
 80181c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	2201      	movs	r2, #1
 80181d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	2201      	movs	r2, #1
 80181d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	2201      	movs	r2, #1
 80181e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	2201      	movs	r2, #1
 80181e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	2201      	movs	r2, #1
 80181f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	2201      	movs	r2, #1
 80181f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	2201      	movs	r2, #1
 8018200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	2201      	movs	r2, #1
 8018208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	2201      	movs	r2, #1
 8018210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8018214:	2300      	movs	r3, #0
}
 8018216:	4618      	mov	r0, r3
 8018218:	3708      	adds	r7, #8
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}

0801821e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801821e:	b480      	push	{r7}
 8018220:	b083      	sub	sp, #12
 8018222:	af00      	add	r7, sp, #0
 8018224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8018226:	bf00      	nop
 8018228:	370c      	adds	r7, #12
 801822a:	46bd      	mov	sp, r7
 801822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018230:	4770      	bx	lr
	...

08018234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b084      	sub	sp, #16
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
 801823c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d109      	bne.n	8018258 <HAL_TIM_PWM_Start+0x24>
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801824a:	b2db      	uxtb	r3, r3
 801824c:	2b01      	cmp	r3, #1
 801824e:	bf14      	ite	ne
 8018250:	2301      	movne	r3, #1
 8018252:	2300      	moveq	r3, #0
 8018254:	b2db      	uxtb	r3, r3
 8018256:	e022      	b.n	801829e <HAL_TIM_PWM_Start+0x6a>
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	2b04      	cmp	r3, #4
 801825c:	d109      	bne.n	8018272 <HAL_TIM_PWM_Start+0x3e>
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8018264:	b2db      	uxtb	r3, r3
 8018266:	2b01      	cmp	r3, #1
 8018268:	bf14      	ite	ne
 801826a:	2301      	movne	r3, #1
 801826c:	2300      	moveq	r3, #0
 801826e:	b2db      	uxtb	r3, r3
 8018270:	e015      	b.n	801829e <HAL_TIM_PWM_Start+0x6a>
 8018272:	683b      	ldr	r3, [r7, #0]
 8018274:	2b08      	cmp	r3, #8
 8018276:	d109      	bne.n	801828c <HAL_TIM_PWM_Start+0x58>
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801827e:	b2db      	uxtb	r3, r3
 8018280:	2b01      	cmp	r3, #1
 8018282:	bf14      	ite	ne
 8018284:	2301      	movne	r3, #1
 8018286:	2300      	moveq	r3, #0
 8018288:	b2db      	uxtb	r3, r3
 801828a:	e008      	b.n	801829e <HAL_TIM_PWM_Start+0x6a>
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018292:	b2db      	uxtb	r3, r3
 8018294:	2b01      	cmp	r3, #1
 8018296:	bf14      	ite	ne
 8018298:	2301      	movne	r3, #1
 801829a:	2300      	moveq	r3, #0
 801829c:	b2db      	uxtb	r3, r3
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d001      	beq.n	80182a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80182a2:	2301      	movs	r3, #1
 80182a4:	e07c      	b.n	80183a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80182a6:	683b      	ldr	r3, [r7, #0]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d104      	bne.n	80182b6 <HAL_TIM_PWM_Start+0x82>
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	2202      	movs	r2, #2
 80182b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80182b4:	e013      	b.n	80182de <HAL_TIM_PWM_Start+0xaa>
 80182b6:	683b      	ldr	r3, [r7, #0]
 80182b8:	2b04      	cmp	r3, #4
 80182ba:	d104      	bne.n	80182c6 <HAL_TIM_PWM_Start+0x92>
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	2202      	movs	r2, #2
 80182c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80182c4:	e00b      	b.n	80182de <HAL_TIM_PWM_Start+0xaa>
 80182c6:	683b      	ldr	r3, [r7, #0]
 80182c8:	2b08      	cmp	r3, #8
 80182ca:	d104      	bne.n	80182d6 <HAL_TIM_PWM_Start+0xa2>
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	2202      	movs	r2, #2
 80182d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80182d4:	e003      	b.n	80182de <HAL_TIM_PWM_Start+0xaa>
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	2202      	movs	r2, #2
 80182da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	2201      	movs	r2, #1
 80182e4:	6839      	ldr	r1, [r7, #0]
 80182e6:	4618      	mov	r0, r3
 80182e8:	f001 fdb6 	bl	8019e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	4a2d      	ldr	r2, [pc, #180]	; (80183a8 <HAL_TIM_PWM_Start+0x174>)
 80182f2:	4293      	cmp	r3, r2
 80182f4:	d004      	beq.n	8018300 <HAL_TIM_PWM_Start+0xcc>
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	4a2c      	ldr	r2, [pc, #176]	; (80183ac <HAL_TIM_PWM_Start+0x178>)
 80182fc:	4293      	cmp	r3, r2
 80182fe:	d101      	bne.n	8018304 <HAL_TIM_PWM_Start+0xd0>
 8018300:	2301      	movs	r3, #1
 8018302:	e000      	b.n	8018306 <HAL_TIM_PWM_Start+0xd2>
 8018304:	2300      	movs	r3, #0
 8018306:	2b00      	cmp	r3, #0
 8018308:	d007      	beq.n	801831a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	4a22      	ldr	r2, [pc, #136]	; (80183a8 <HAL_TIM_PWM_Start+0x174>)
 8018320:	4293      	cmp	r3, r2
 8018322:	d022      	beq.n	801836a <HAL_TIM_PWM_Start+0x136>
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801832c:	d01d      	beq.n	801836a <HAL_TIM_PWM_Start+0x136>
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	4a1f      	ldr	r2, [pc, #124]	; (80183b0 <HAL_TIM_PWM_Start+0x17c>)
 8018334:	4293      	cmp	r3, r2
 8018336:	d018      	beq.n	801836a <HAL_TIM_PWM_Start+0x136>
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	4a1d      	ldr	r2, [pc, #116]	; (80183b4 <HAL_TIM_PWM_Start+0x180>)
 801833e:	4293      	cmp	r3, r2
 8018340:	d013      	beq.n	801836a <HAL_TIM_PWM_Start+0x136>
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	4a1c      	ldr	r2, [pc, #112]	; (80183b8 <HAL_TIM_PWM_Start+0x184>)
 8018348:	4293      	cmp	r3, r2
 801834a:	d00e      	beq.n	801836a <HAL_TIM_PWM_Start+0x136>
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4a16      	ldr	r2, [pc, #88]	; (80183ac <HAL_TIM_PWM_Start+0x178>)
 8018352:	4293      	cmp	r3, r2
 8018354:	d009      	beq.n	801836a <HAL_TIM_PWM_Start+0x136>
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	4a18      	ldr	r2, [pc, #96]	; (80183bc <HAL_TIM_PWM_Start+0x188>)
 801835c:	4293      	cmp	r3, r2
 801835e:	d004      	beq.n	801836a <HAL_TIM_PWM_Start+0x136>
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	4a16      	ldr	r2, [pc, #88]	; (80183c0 <HAL_TIM_PWM_Start+0x18c>)
 8018366:	4293      	cmp	r3, r2
 8018368:	d111      	bne.n	801838e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	689b      	ldr	r3, [r3, #8]
 8018370:	f003 0307 	and.w	r3, r3, #7
 8018374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	2b06      	cmp	r3, #6
 801837a:	d010      	beq.n	801839e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	681a      	ldr	r2, [r3, #0]
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	f042 0201 	orr.w	r2, r2, #1
 801838a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801838c:	e007      	b.n	801839e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	681a      	ldr	r2, [r3, #0]
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	f042 0201 	orr.w	r2, r2, #1
 801839c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801839e:	2300      	movs	r3, #0
}
 80183a0:	4618      	mov	r0, r3
 80183a2:	3710      	adds	r7, #16
 80183a4:	46bd      	mov	sp, r7
 80183a6:	bd80      	pop	{r7, pc}
 80183a8:	40010000 	.word	0x40010000
 80183ac:	40010400 	.word	0x40010400
 80183b0:	40000400 	.word	0x40000400
 80183b4:	40000800 	.word	0x40000800
 80183b8:	40000c00 	.word	0x40000c00
 80183bc:	40014000 	.word	0x40014000
 80183c0:	40001800 	.word	0x40001800

080183c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b086      	sub	sp, #24
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	60f8      	str	r0, [r7, #12]
 80183cc:	60b9      	str	r1, [r7, #8]
 80183ce:	607a      	str	r2, [r7, #4]
 80183d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80183d2:	2300      	movs	r3, #0
 80183d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d109      	bne.n	80183f0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80183e2:	b2db      	uxtb	r3, r3
 80183e4:	2b02      	cmp	r3, #2
 80183e6:	bf0c      	ite	eq
 80183e8:	2301      	moveq	r3, #1
 80183ea:	2300      	movne	r3, #0
 80183ec:	b2db      	uxtb	r3, r3
 80183ee:	e022      	b.n	8018436 <HAL_TIM_PWM_Start_DMA+0x72>
 80183f0:	68bb      	ldr	r3, [r7, #8]
 80183f2:	2b04      	cmp	r3, #4
 80183f4:	d109      	bne.n	801840a <HAL_TIM_PWM_Start_DMA+0x46>
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80183fc:	b2db      	uxtb	r3, r3
 80183fe:	2b02      	cmp	r3, #2
 8018400:	bf0c      	ite	eq
 8018402:	2301      	moveq	r3, #1
 8018404:	2300      	movne	r3, #0
 8018406:	b2db      	uxtb	r3, r3
 8018408:	e015      	b.n	8018436 <HAL_TIM_PWM_Start_DMA+0x72>
 801840a:	68bb      	ldr	r3, [r7, #8]
 801840c:	2b08      	cmp	r3, #8
 801840e:	d109      	bne.n	8018424 <HAL_TIM_PWM_Start_DMA+0x60>
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018416:	b2db      	uxtb	r3, r3
 8018418:	2b02      	cmp	r3, #2
 801841a:	bf0c      	ite	eq
 801841c:	2301      	moveq	r3, #1
 801841e:	2300      	movne	r3, #0
 8018420:	b2db      	uxtb	r3, r3
 8018422:	e008      	b.n	8018436 <HAL_TIM_PWM_Start_DMA+0x72>
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801842a:	b2db      	uxtb	r3, r3
 801842c:	2b02      	cmp	r3, #2
 801842e:	bf0c      	ite	eq
 8018430:	2301      	moveq	r3, #1
 8018432:	2300      	movne	r3, #0
 8018434:	b2db      	uxtb	r3, r3
 8018436:	2b00      	cmp	r3, #0
 8018438:	d001      	beq.n	801843e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 801843a:	2302      	movs	r3, #2
 801843c:	e171      	b.n	8018722 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801843e:	68bb      	ldr	r3, [r7, #8]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d109      	bne.n	8018458 <HAL_TIM_PWM_Start_DMA+0x94>
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801844a:	b2db      	uxtb	r3, r3
 801844c:	2b01      	cmp	r3, #1
 801844e:	bf0c      	ite	eq
 8018450:	2301      	moveq	r3, #1
 8018452:	2300      	movne	r3, #0
 8018454:	b2db      	uxtb	r3, r3
 8018456:	e022      	b.n	801849e <HAL_TIM_PWM_Start_DMA+0xda>
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	2b04      	cmp	r3, #4
 801845c:	d109      	bne.n	8018472 <HAL_TIM_PWM_Start_DMA+0xae>
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8018464:	b2db      	uxtb	r3, r3
 8018466:	2b01      	cmp	r3, #1
 8018468:	bf0c      	ite	eq
 801846a:	2301      	moveq	r3, #1
 801846c:	2300      	movne	r3, #0
 801846e:	b2db      	uxtb	r3, r3
 8018470:	e015      	b.n	801849e <HAL_TIM_PWM_Start_DMA+0xda>
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	2b08      	cmp	r3, #8
 8018476:	d109      	bne.n	801848c <HAL_TIM_PWM_Start_DMA+0xc8>
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801847e:	b2db      	uxtb	r3, r3
 8018480:	2b01      	cmp	r3, #1
 8018482:	bf0c      	ite	eq
 8018484:	2301      	moveq	r3, #1
 8018486:	2300      	movne	r3, #0
 8018488:	b2db      	uxtb	r3, r3
 801848a:	e008      	b.n	801849e <HAL_TIM_PWM_Start_DMA+0xda>
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018492:	b2db      	uxtb	r3, r3
 8018494:	2b01      	cmp	r3, #1
 8018496:	bf0c      	ite	eq
 8018498:	2301      	moveq	r3, #1
 801849a:	2300      	movne	r3, #0
 801849c:	b2db      	uxtb	r3, r3
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d024      	beq.n	80184ec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d104      	bne.n	80184b2 <HAL_TIM_PWM_Start_DMA+0xee>
 80184a8:	887b      	ldrh	r3, [r7, #2]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d001      	beq.n	80184b2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80184ae:	2301      	movs	r3, #1
 80184b0:	e137      	b.n	8018722 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80184b2:	68bb      	ldr	r3, [r7, #8]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d104      	bne.n	80184c2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	2202      	movs	r2, #2
 80184bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80184c0:	e016      	b.n	80184f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	2b04      	cmp	r3, #4
 80184c6:	d104      	bne.n	80184d2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	2202      	movs	r2, #2
 80184cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80184d0:	e00e      	b.n	80184f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	2b08      	cmp	r3, #8
 80184d6:	d104      	bne.n	80184e2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	2202      	movs	r2, #2
 80184dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80184e0:	e006      	b.n	80184f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	2202      	movs	r2, #2
 80184e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80184ea:	e001      	b.n	80184f0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80184ec:	2301      	movs	r3, #1
 80184ee:	e118      	b.n	8018722 <HAL_TIM_PWM_Start_DMA+0x35e>
 80184f0:	68bb      	ldr	r3, [r7, #8]
 80184f2:	2b0c      	cmp	r3, #12
 80184f4:	f200 80ae 	bhi.w	8018654 <HAL_TIM_PWM_Start_DMA+0x290>
 80184f8:	a201      	add	r2, pc, #4	; (adr r2, 8018500 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80184fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184fe:	bf00      	nop
 8018500:	08018535 	.word	0x08018535
 8018504:	08018655 	.word	0x08018655
 8018508:	08018655 	.word	0x08018655
 801850c:	08018655 	.word	0x08018655
 8018510:	0801857d 	.word	0x0801857d
 8018514:	08018655 	.word	0x08018655
 8018518:	08018655 	.word	0x08018655
 801851c:	08018655 	.word	0x08018655
 8018520:	080185c5 	.word	0x080185c5
 8018524:	08018655 	.word	0x08018655
 8018528:	08018655 	.word	0x08018655
 801852c:	08018655 	.word	0x08018655
 8018530:	0801860d 	.word	0x0801860d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018538:	4a7c      	ldr	r2, [pc, #496]	; (801872c <HAL_TIM_PWM_Start_DMA+0x368>)
 801853a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018540:	4a7b      	ldr	r2, [pc, #492]	; (8018730 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8018542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018548:	4a7a      	ldr	r2, [pc, #488]	; (8018734 <HAL_TIM_PWM_Start_DMA+0x370>)
 801854a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018550:	6879      	ldr	r1, [r7, #4]
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	3334      	adds	r3, #52	; 0x34
 8018558:	461a      	mov	r2, r3
 801855a:	887b      	ldrh	r3, [r7, #2]
 801855c:	f7fc fa4e 	bl	80149fc <HAL_DMA_Start_IT>
 8018560:	4603      	mov	r3, r0
 8018562:	2b00      	cmp	r3, #0
 8018564:	d001      	beq.n	801856a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8018566:	2301      	movs	r3, #1
 8018568:	e0db      	b.n	8018722 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	68da      	ldr	r2, [r3, #12]
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018578:	60da      	str	r2, [r3, #12]
      break;
 801857a:	e06e      	b.n	801865a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018580:	4a6a      	ldr	r2, [pc, #424]	; (801872c <HAL_TIM_PWM_Start_DMA+0x368>)
 8018582:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018588:	4a69      	ldr	r2, [pc, #420]	; (8018730 <HAL_TIM_PWM_Start_DMA+0x36c>)
 801858a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018590:	4a68      	ldr	r2, [pc, #416]	; (8018734 <HAL_TIM_PWM_Start_DMA+0x370>)
 8018592:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8018598:	6879      	ldr	r1, [r7, #4]
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	3338      	adds	r3, #56	; 0x38
 80185a0:	461a      	mov	r2, r3
 80185a2:	887b      	ldrh	r3, [r7, #2]
 80185a4:	f7fc fa2a 	bl	80149fc <HAL_DMA_Start_IT>
 80185a8:	4603      	mov	r3, r0
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d001      	beq.n	80185b2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80185ae:	2301      	movs	r3, #1
 80185b0:	e0b7      	b.n	8018722 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	68da      	ldr	r2, [r3, #12]
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80185c0:	60da      	str	r2, [r3, #12]
      break;
 80185c2:	e04a      	b.n	801865a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185c8:	4a58      	ldr	r2, [pc, #352]	; (801872c <HAL_TIM_PWM_Start_DMA+0x368>)
 80185ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185d0:	4a57      	ldr	r2, [pc, #348]	; (8018730 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80185d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185d8:	4a56      	ldr	r2, [pc, #344]	; (8018734 <HAL_TIM_PWM_Start_DMA+0x370>)
 80185da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80185e0:	6879      	ldr	r1, [r7, #4]
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	333c      	adds	r3, #60	; 0x3c
 80185e8:	461a      	mov	r2, r3
 80185ea:	887b      	ldrh	r3, [r7, #2]
 80185ec:	f7fc fa06 	bl	80149fc <HAL_DMA_Start_IT>
 80185f0:	4603      	mov	r3, r0
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d001      	beq.n	80185fa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80185f6:	2301      	movs	r3, #1
 80185f8:	e093      	b.n	8018722 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	68da      	ldr	r2, [r3, #12]
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018608:	60da      	str	r2, [r3, #12]
      break;
 801860a:	e026      	b.n	801865a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018610:	4a46      	ldr	r2, [pc, #280]	; (801872c <HAL_TIM_PWM_Start_DMA+0x368>)
 8018612:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018618:	4a45      	ldr	r2, [pc, #276]	; (8018730 <HAL_TIM_PWM_Start_DMA+0x36c>)
 801861a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018620:	4a44      	ldr	r2, [pc, #272]	; (8018734 <HAL_TIM_PWM_Start_DMA+0x370>)
 8018622:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018628:	6879      	ldr	r1, [r7, #4]
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	3340      	adds	r3, #64	; 0x40
 8018630:	461a      	mov	r2, r3
 8018632:	887b      	ldrh	r3, [r7, #2]
 8018634:	f7fc f9e2 	bl	80149fc <HAL_DMA_Start_IT>
 8018638:	4603      	mov	r3, r0
 801863a:	2b00      	cmp	r3, #0
 801863c:	d001      	beq.n	8018642 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801863e:	2301      	movs	r3, #1
 8018640:	e06f      	b.n	8018722 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	68da      	ldr	r2, [r3, #12]
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018650:	60da      	str	r2, [r3, #12]
      break;
 8018652:	e002      	b.n	801865a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8018654:	2301      	movs	r3, #1
 8018656:	75fb      	strb	r3, [r7, #23]
      break;
 8018658:	bf00      	nop
  }

  if (status == HAL_OK)
 801865a:	7dfb      	ldrb	r3, [r7, #23]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d15f      	bne.n	8018720 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	2201      	movs	r2, #1
 8018666:	68b9      	ldr	r1, [r7, #8]
 8018668:	4618      	mov	r0, r3
 801866a:	f001 fbf5 	bl	8019e58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	4a31      	ldr	r2, [pc, #196]	; (8018738 <HAL_TIM_PWM_Start_DMA+0x374>)
 8018674:	4293      	cmp	r3, r2
 8018676:	d004      	beq.n	8018682 <HAL_TIM_PWM_Start_DMA+0x2be>
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	4a2f      	ldr	r2, [pc, #188]	; (801873c <HAL_TIM_PWM_Start_DMA+0x378>)
 801867e:	4293      	cmp	r3, r2
 8018680:	d101      	bne.n	8018686 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8018682:	2301      	movs	r3, #1
 8018684:	e000      	b.n	8018688 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8018686:	2300      	movs	r3, #0
 8018688:	2b00      	cmp	r3, #0
 801868a:	d007      	beq.n	801869c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801869a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	4a25      	ldr	r2, [pc, #148]	; (8018738 <HAL_TIM_PWM_Start_DMA+0x374>)
 80186a2:	4293      	cmp	r3, r2
 80186a4:	d022      	beq.n	80186ec <HAL_TIM_PWM_Start_DMA+0x328>
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80186ae:	d01d      	beq.n	80186ec <HAL_TIM_PWM_Start_DMA+0x328>
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	4a22      	ldr	r2, [pc, #136]	; (8018740 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80186b6:	4293      	cmp	r3, r2
 80186b8:	d018      	beq.n	80186ec <HAL_TIM_PWM_Start_DMA+0x328>
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	4a21      	ldr	r2, [pc, #132]	; (8018744 <HAL_TIM_PWM_Start_DMA+0x380>)
 80186c0:	4293      	cmp	r3, r2
 80186c2:	d013      	beq.n	80186ec <HAL_TIM_PWM_Start_DMA+0x328>
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	4a1f      	ldr	r2, [pc, #124]	; (8018748 <HAL_TIM_PWM_Start_DMA+0x384>)
 80186ca:	4293      	cmp	r3, r2
 80186cc:	d00e      	beq.n	80186ec <HAL_TIM_PWM_Start_DMA+0x328>
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	4a1a      	ldr	r2, [pc, #104]	; (801873c <HAL_TIM_PWM_Start_DMA+0x378>)
 80186d4:	4293      	cmp	r3, r2
 80186d6:	d009      	beq.n	80186ec <HAL_TIM_PWM_Start_DMA+0x328>
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	4a1b      	ldr	r2, [pc, #108]	; (801874c <HAL_TIM_PWM_Start_DMA+0x388>)
 80186de:	4293      	cmp	r3, r2
 80186e0:	d004      	beq.n	80186ec <HAL_TIM_PWM_Start_DMA+0x328>
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	4a1a      	ldr	r2, [pc, #104]	; (8018750 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80186e8:	4293      	cmp	r3, r2
 80186ea:	d111      	bne.n	8018710 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	689b      	ldr	r3, [r3, #8]
 80186f2:	f003 0307 	and.w	r3, r3, #7
 80186f6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80186f8:	693b      	ldr	r3, [r7, #16]
 80186fa:	2b06      	cmp	r3, #6
 80186fc:	d010      	beq.n	8018720 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	681a      	ldr	r2, [r3, #0]
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	f042 0201 	orr.w	r2, r2, #1
 801870c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801870e:	e007      	b.n	8018720 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	681a      	ldr	r2, [r3, #0]
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	f042 0201 	orr.w	r2, r2, #1
 801871e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8018720:	7dfb      	ldrb	r3, [r7, #23]
}
 8018722:	4618      	mov	r0, r3
 8018724:	3718      	adds	r7, #24
 8018726:	46bd      	mov	sp, r7
 8018728:	bd80      	pop	{r7, pc}
 801872a:	bf00      	nop
 801872c:	0801951f 	.word	0x0801951f
 8018730:	080195c7 	.word	0x080195c7
 8018734:	0801948d 	.word	0x0801948d
 8018738:	40010000 	.word	0x40010000
 801873c:	40010400 	.word	0x40010400
 8018740:	40000400 	.word	0x40000400
 8018744:	40000800 	.word	0x40000800
 8018748:	40000c00 	.word	0x40000c00
 801874c:	40014000 	.word	0x40014000
 8018750:	40001800 	.word	0x40001800

08018754 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b084      	sub	sp, #16
 8018758:	af00      	add	r7, sp, #0
 801875a:	6078      	str	r0, [r7, #4]
 801875c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801875e:	2300      	movs	r3, #0
 8018760:	73fb      	strb	r3, [r7, #15]
 8018762:	683b      	ldr	r3, [r7, #0]
 8018764:	2b0c      	cmp	r3, #12
 8018766:	d855      	bhi.n	8018814 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8018768:	a201      	add	r2, pc, #4	; (adr r2, 8018770 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 801876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801876e:	bf00      	nop
 8018770:	080187a5 	.word	0x080187a5
 8018774:	08018815 	.word	0x08018815
 8018778:	08018815 	.word	0x08018815
 801877c:	08018815 	.word	0x08018815
 8018780:	080187c1 	.word	0x080187c1
 8018784:	08018815 	.word	0x08018815
 8018788:	08018815 	.word	0x08018815
 801878c:	08018815 	.word	0x08018815
 8018790:	080187dd 	.word	0x080187dd
 8018794:	08018815 	.word	0x08018815
 8018798:	08018815 	.word	0x08018815
 801879c:	08018815 	.word	0x08018815
 80187a0:	080187f9 	.word	0x080187f9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	68da      	ldr	r2, [r3, #12]
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80187b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187b8:	4618      	mov	r0, r3
 80187ba:	f7fc f9e7 	bl	8014b8c <HAL_DMA_Abort_IT>
      break;
 80187be:	e02c      	b.n	801881a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	68da      	ldr	r2, [r3, #12]
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80187ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7fc f9d9 	bl	8014b8c <HAL_DMA_Abort_IT>
      break;
 80187da:	e01e      	b.n	801881a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	68da      	ldr	r2, [r3, #12]
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80187ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187f0:	4618      	mov	r0, r3
 80187f2:	f7fc f9cb 	bl	8014b8c <HAL_DMA_Abort_IT>
      break;
 80187f6:	e010      	b.n	801881a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	68da      	ldr	r2, [r3, #12]
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018806:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801880c:	4618      	mov	r0, r3
 801880e:	f7fc f9bd 	bl	8014b8c <HAL_DMA_Abort_IT>
      break;
 8018812:	e002      	b.n	801881a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8018814:	2301      	movs	r3, #1
 8018816:	73fb      	strb	r3, [r7, #15]
      break;
 8018818:	bf00      	nop
  }

  if (status == HAL_OK)
 801881a:	7bfb      	ldrb	r3, [r7, #15]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d161      	bne.n	80188e4 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	2200      	movs	r2, #0
 8018826:	6839      	ldr	r1, [r7, #0]
 8018828:	4618      	mov	r0, r3
 801882a:	f001 fb15 	bl	8019e58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	4a2f      	ldr	r2, [pc, #188]	; (80188f0 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8018834:	4293      	cmp	r3, r2
 8018836:	d004      	beq.n	8018842 <HAL_TIM_PWM_Stop_DMA+0xee>
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	4a2d      	ldr	r2, [pc, #180]	; (80188f4 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 801883e:	4293      	cmp	r3, r2
 8018840:	d101      	bne.n	8018846 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8018842:	2301      	movs	r3, #1
 8018844:	e000      	b.n	8018848 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8018846:	2300      	movs	r3, #0
 8018848:	2b00      	cmp	r3, #0
 801884a:	d017      	beq.n	801887c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	6a1a      	ldr	r2, [r3, #32]
 8018852:	f241 1311 	movw	r3, #4369	; 0x1111
 8018856:	4013      	ands	r3, r2
 8018858:	2b00      	cmp	r3, #0
 801885a:	d10f      	bne.n	801887c <HAL_TIM_PWM_Stop_DMA+0x128>
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	6a1a      	ldr	r2, [r3, #32]
 8018862:	f240 4344 	movw	r3, #1092	; 0x444
 8018866:	4013      	ands	r3, r2
 8018868:	2b00      	cmp	r3, #0
 801886a:	d107      	bne.n	801887c <HAL_TIM_PWM_Stop_DMA+0x128>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801887a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	6a1a      	ldr	r2, [r3, #32]
 8018882:	f241 1311 	movw	r3, #4369	; 0x1111
 8018886:	4013      	ands	r3, r2
 8018888:	2b00      	cmp	r3, #0
 801888a:	d10f      	bne.n	80188ac <HAL_TIM_PWM_Stop_DMA+0x158>
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	6a1a      	ldr	r2, [r3, #32]
 8018892:	f240 4344 	movw	r3, #1092	; 0x444
 8018896:	4013      	ands	r3, r2
 8018898:	2b00      	cmp	r3, #0
 801889a:	d107      	bne.n	80188ac <HAL_TIM_PWM_Stop_DMA+0x158>
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	681a      	ldr	r2, [r3, #0]
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	f022 0201 	bic.w	r2, r2, #1
 80188aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d104      	bne.n	80188bc <HAL_TIM_PWM_Stop_DMA+0x168>
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	2201      	movs	r2, #1
 80188b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80188ba:	e013      	b.n	80188e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	2b04      	cmp	r3, #4
 80188c0:	d104      	bne.n	80188cc <HAL_TIM_PWM_Stop_DMA+0x178>
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	2201      	movs	r2, #1
 80188c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80188ca:	e00b      	b.n	80188e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80188cc:	683b      	ldr	r3, [r7, #0]
 80188ce:	2b08      	cmp	r3, #8
 80188d0:	d104      	bne.n	80188dc <HAL_TIM_PWM_Stop_DMA+0x188>
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	2201      	movs	r2, #1
 80188d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80188da:	e003      	b.n	80188e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2201      	movs	r2, #1
 80188e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80188e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80188e6:	4618      	mov	r0, r3
 80188e8:	3710      	adds	r7, #16
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}
 80188ee:	bf00      	nop
 80188f0:	40010000 	.word	0x40010000
 80188f4:	40010400 	.word	0x40010400

080188f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b082      	sub	sp, #8
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d101      	bne.n	801890a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8018906:	2301      	movs	r3, #1
 8018908:	e041      	b.n	801898e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018910:	b2db      	uxtb	r3, r3
 8018912:	2b00      	cmp	r3, #0
 8018914:	d106      	bne.n	8018924 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	2200      	movs	r2, #0
 801891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801891e:	6878      	ldr	r0, [r7, #4]
 8018920:	f000 f839 	bl	8018996 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2202      	movs	r2, #2
 8018928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681a      	ldr	r2, [r3, #0]
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	3304      	adds	r3, #4
 8018934:	4619      	mov	r1, r3
 8018936:	4610      	mov	r0, r2
 8018938:	f000 fe7a 	bl	8019630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	2201      	movs	r2, #1
 8018940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2201      	movs	r2, #1
 8018948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	2201      	movs	r2, #1
 8018950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2201      	movs	r2, #1
 8018958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	2201      	movs	r2, #1
 8018960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	2201      	movs	r2, #1
 8018968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2201      	movs	r2, #1
 8018970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	2201      	movs	r2, #1
 8018978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	2201      	movs	r2, #1
 8018980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	2201      	movs	r2, #1
 8018988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801898c:	2300      	movs	r3, #0
}
 801898e:	4618      	mov	r0, r3
 8018990:	3708      	adds	r7, #8
 8018992:	46bd      	mov	sp, r7
 8018994:	bd80      	pop	{r7, pc}

08018996 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8018996:	b480      	push	{r7}
 8018998:	b083      	sub	sp, #12
 801899a:	af00      	add	r7, sp, #0
 801899c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801899e:	bf00      	nop
 80189a0:	370c      	adds	r7, #12
 80189a2:	46bd      	mov	sp, r7
 80189a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a8:	4770      	bx	lr
	...

080189ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80189ac:	b580      	push	{r7, lr}
 80189ae:	b084      	sub	sp, #16
 80189b0:	af00      	add	r7, sp, #0
 80189b2:	6078      	str	r0, [r7, #4]
 80189b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80189b6:	2300      	movs	r3, #0
 80189b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80189ba:	683b      	ldr	r3, [r7, #0]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d104      	bne.n	80189ca <HAL_TIM_IC_Start_IT+0x1e>
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80189c6:	b2db      	uxtb	r3, r3
 80189c8:	e013      	b.n	80189f2 <HAL_TIM_IC_Start_IT+0x46>
 80189ca:	683b      	ldr	r3, [r7, #0]
 80189cc:	2b04      	cmp	r3, #4
 80189ce:	d104      	bne.n	80189da <HAL_TIM_IC_Start_IT+0x2e>
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	e00b      	b.n	80189f2 <HAL_TIM_IC_Start_IT+0x46>
 80189da:	683b      	ldr	r3, [r7, #0]
 80189dc:	2b08      	cmp	r3, #8
 80189de:	d104      	bne.n	80189ea <HAL_TIM_IC_Start_IT+0x3e>
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	e003      	b.n	80189f2 <HAL_TIM_IC_Start_IT+0x46>
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80189f0:	b2db      	uxtb	r3, r3
 80189f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80189f4:	683b      	ldr	r3, [r7, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d104      	bne.n	8018a04 <HAL_TIM_IC_Start_IT+0x58>
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018a00:	b2db      	uxtb	r3, r3
 8018a02:	e013      	b.n	8018a2c <HAL_TIM_IC_Start_IT+0x80>
 8018a04:	683b      	ldr	r3, [r7, #0]
 8018a06:	2b04      	cmp	r3, #4
 8018a08:	d104      	bne.n	8018a14 <HAL_TIM_IC_Start_IT+0x68>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018a10:	b2db      	uxtb	r3, r3
 8018a12:	e00b      	b.n	8018a2c <HAL_TIM_IC_Start_IT+0x80>
 8018a14:	683b      	ldr	r3, [r7, #0]
 8018a16:	2b08      	cmp	r3, #8
 8018a18:	d104      	bne.n	8018a24 <HAL_TIM_IC_Start_IT+0x78>
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018a20:	b2db      	uxtb	r3, r3
 8018a22:	e003      	b.n	8018a2c <HAL_TIM_IC_Start_IT+0x80>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018a2a:	b2db      	uxtb	r3, r3
 8018a2c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8018a2e:	7bbb      	ldrb	r3, [r7, #14]
 8018a30:	2b01      	cmp	r3, #1
 8018a32:	d102      	bne.n	8018a3a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8018a34:	7b7b      	ldrb	r3, [r7, #13]
 8018a36:	2b01      	cmp	r3, #1
 8018a38:	d001      	beq.n	8018a3e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	e0cc      	b.n	8018bd8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8018a3e:	683b      	ldr	r3, [r7, #0]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d104      	bne.n	8018a4e <HAL_TIM_IC_Start_IT+0xa2>
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	2202      	movs	r2, #2
 8018a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8018a4c:	e013      	b.n	8018a76 <HAL_TIM_IC_Start_IT+0xca>
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	2b04      	cmp	r3, #4
 8018a52:	d104      	bne.n	8018a5e <HAL_TIM_IC_Start_IT+0xb2>
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	2202      	movs	r2, #2
 8018a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018a5c:	e00b      	b.n	8018a76 <HAL_TIM_IC_Start_IT+0xca>
 8018a5e:	683b      	ldr	r3, [r7, #0]
 8018a60:	2b08      	cmp	r3, #8
 8018a62:	d104      	bne.n	8018a6e <HAL_TIM_IC_Start_IT+0xc2>
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	2202      	movs	r2, #2
 8018a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018a6c:	e003      	b.n	8018a76 <HAL_TIM_IC_Start_IT+0xca>
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	2202      	movs	r2, #2
 8018a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8018a76:	683b      	ldr	r3, [r7, #0]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d104      	bne.n	8018a86 <HAL_TIM_IC_Start_IT+0xda>
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	2202      	movs	r2, #2
 8018a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8018a84:	e013      	b.n	8018aae <HAL_TIM_IC_Start_IT+0x102>
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	2b04      	cmp	r3, #4
 8018a8a:	d104      	bne.n	8018a96 <HAL_TIM_IC_Start_IT+0xea>
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	2202      	movs	r2, #2
 8018a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018a94:	e00b      	b.n	8018aae <HAL_TIM_IC_Start_IT+0x102>
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	2b08      	cmp	r3, #8
 8018a9a:	d104      	bne.n	8018aa6 <HAL_TIM_IC_Start_IT+0xfa>
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2202      	movs	r2, #2
 8018aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018aa4:	e003      	b.n	8018aae <HAL_TIM_IC_Start_IT+0x102>
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	2202      	movs	r2, #2
 8018aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018aae:	683b      	ldr	r3, [r7, #0]
 8018ab0:	2b0c      	cmp	r3, #12
 8018ab2:	d841      	bhi.n	8018b38 <HAL_TIM_IC_Start_IT+0x18c>
 8018ab4:	a201      	add	r2, pc, #4	; (adr r2, 8018abc <HAL_TIM_IC_Start_IT+0x110>)
 8018ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018aba:	bf00      	nop
 8018abc:	08018af1 	.word	0x08018af1
 8018ac0:	08018b39 	.word	0x08018b39
 8018ac4:	08018b39 	.word	0x08018b39
 8018ac8:	08018b39 	.word	0x08018b39
 8018acc:	08018b03 	.word	0x08018b03
 8018ad0:	08018b39 	.word	0x08018b39
 8018ad4:	08018b39 	.word	0x08018b39
 8018ad8:	08018b39 	.word	0x08018b39
 8018adc:	08018b15 	.word	0x08018b15
 8018ae0:	08018b39 	.word	0x08018b39
 8018ae4:	08018b39 	.word	0x08018b39
 8018ae8:	08018b39 	.word	0x08018b39
 8018aec:	08018b27 	.word	0x08018b27
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	68da      	ldr	r2, [r3, #12]
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	f042 0202 	orr.w	r2, r2, #2
 8018afe:	60da      	str	r2, [r3, #12]
      break;
 8018b00:	e01d      	b.n	8018b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	68da      	ldr	r2, [r3, #12]
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	f042 0204 	orr.w	r2, r2, #4
 8018b10:	60da      	str	r2, [r3, #12]
      break;
 8018b12:	e014      	b.n	8018b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	68da      	ldr	r2, [r3, #12]
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	f042 0208 	orr.w	r2, r2, #8
 8018b22:	60da      	str	r2, [r3, #12]
      break;
 8018b24:	e00b      	b.n	8018b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	68da      	ldr	r2, [r3, #12]
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	f042 0210 	orr.w	r2, r2, #16
 8018b34:	60da      	str	r2, [r3, #12]
      break;
 8018b36:	e002      	b.n	8018b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8018b38:	2301      	movs	r3, #1
 8018b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8018b3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8018b3e:	7bfb      	ldrb	r3, [r7, #15]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d148      	bne.n	8018bd6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	2201      	movs	r2, #1
 8018b4a:	6839      	ldr	r1, [r7, #0]
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f001 f983 	bl	8019e58 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	4a22      	ldr	r2, [pc, #136]	; (8018be0 <HAL_TIM_IC_Start_IT+0x234>)
 8018b58:	4293      	cmp	r3, r2
 8018b5a:	d022      	beq.n	8018ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018b64:	d01d      	beq.n	8018ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	4a1e      	ldr	r2, [pc, #120]	; (8018be4 <HAL_TIM_IC_Start_IT+0x238>)
 8018b6c:	4293      	cmp	r3, r2
 8018b6e:	d018      	beq.n	8018ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	4a1c      	ldr	r2, [pc, #112]	; (8018be8 <HAL_TIM_IC_Start_IT+0x23c>)
 8018b76:	4293      	cmp	r3, r2
 8018b78:	d013      	beq.n	8018ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	4a1b      	ldr	r2, [pc, #108]	; (8018bec <HAL_TIM_IC_Start_IT+0x240>)
 8018b80:	4293      	cmp	r3, r2
 8018b82:	d00e      	beq.n	8018ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	4a19      	ldr	r2, [pc, #100]	; (8018bf0 <HAL_TIM_IC_Start_IT+0x244>)
 8018b8a:	4293      	cmp	r3, r2
 8018b8c:	d009      	beq.n	8018ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	4a18      	ldr	r2, [pc, #96]	; (8018bf4 <HAL_TIM_IC_Start_IT+0x248>)
 8018b94:	4293      	cmp	r3, r2
 8018b96:	d004      	beq.n	8018ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	4a16      	ldr	r2, [pc, #88]	; (8018bf8 <HAL_TIM_IC_Start_IT+0x24c>)
 8018b9e:	4293      	cmp	r3, r2
 8018ba0:	d111      	bne.n	8018bc6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	689b      	ldr	r3, [r3, #8]
 8018ba8:	f003 0307 	and.w	r3, r3, #7
 8018bac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	2b06      	cmp	r3, #6
 8018bb2:	d010      	beq.n	8018bd6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	681a      	ldr	r2, [r3, #0]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	f042 0201 	orr.w	r2, r2, #1
 8018bc2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018bc4:	e007      	b.n	8018bd6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	681a      	ldr	r2, [r3, #0]
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	f042 0201 	orr.w	r2, r2, #1
 8018bd4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8018bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bd8:	4618      	mov	r0, r3
 8018bda:	3710      	adds	r7, #16
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}
 8018be0:	40010000 	.word	0x40010000
 8018be4:	40000400 	.word	0x40000400
 8018be8:	40000800 	.word	0x40000800
 8018bec:	40000c00 	.word	0x40000c00
 8018bf0:	40010400 	.word	0x40010400
 8018bf4:	40014000 	.word	0x40014000
 8018bf8:	40001800 	.word	0x40001800

08018bfc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b084      	sub	sp, #16
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
 8018c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018c06:	2300      	movs	r3, #0
 8018c08:	73fb      	strb	r3, [r7, #15]
 8018c0a:	683b      	ldr	r3, [r7, #0]
 8018c0c:	2b0c      	cmp	r3, #12
 8018c0e:	d841      	bhi.n	8018c94 <HAL_TIM_IC_Stop_IT+0x98>
 8018c10:	a201      	add	r2, pc, #4	; (adr r2, 8018c18 <HAL_TIM_IC_Stop_IT+0x1c>)
 8018c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c16:	bf00      	nop
 8018c18:	08018c4d 	.word	0x08018c4d
 8018c1c:	08018c95 	.word	0x08018c95
 8018c20:	08018c95 	.word	0x08018c95
 8018c24:	08018c95 	.word	0x08018c95
 8018c28:	08018c5f 	.word	0x08018c5f
 8018c2c:	08018c95 	.word	0x08018c95
 8018c30:	08018c95 	.word	0x08018c95
 8018c34:	08018c95 	.word	0x08018c95
 8018c38:	08018c71 	.word	0x08018c71
 8018c3c:	08018c95 	.word	0x08018c95
 8018c40:	08018c95 	.word	0x08018c95
 8018c44:	08018c95 	.word	0x08018c95
 8018c48:	08018c83 	.word	0x08018c83
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	68da      	ldr	r2, [r3, #12]
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f022 0202 	bic.w	r2, r2, #2
 8018c5a:	60da      	str	r2, [r3, #12]
      break;
 8018c5c:	e01d      	b.n	8018c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	68da      	ldr	r2, [r3, #12]
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	f022 0204 	bic.w	r2, r2, #4
 8018c6c:	60da      	str	r2, [r3, #12]
      break;
 8018c6e:	e014      	b.n	8018c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	68da      	ldr	r2, [r3, #12]
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	f022 0208 	bic.w	r2, r2, #8
 8018c7e:	60da      	str	r2, [r3, #12]
      break;
 8018c80:	e00b      	b.n	8018c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	68da      	ldr	r2, [r3, #12]
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	f022 0210 	bic.w	r2, r2, #16
 8018c90:	60da      	str	r2, [r3, #12]
      break;
 8018c92:	e002      	b.n	8018c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8018c94:	2301      	movs	r3, #1
 8018c96:	73fb      	strb	r3, [r7, #15]
      break;
 8018c98:	bf00      	nop
  }

  if (status == HAL_OK)
 8018c9a:	7bfb      	ldrb	r3, [r7, #15]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d156      	bne.n	8018d4e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	6839      	ldr	r1, [r7, #0]
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f001 f8d5 	bl	8019e58 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	6a1a      	ldr	r2, [r3, #32]
 8018cb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8018cb8:	4013      	ands	r3, r2
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d10f      	bne.n	8018cde <HAL_TIM_IC_Stop_IT+0xe2>
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	6a1a      	ldr	r2, [r3, #32]
 8018cc4:	f240 4344 	movw	r3, #1092	; 0x444
 8018cc8:	4013      	ands	r3, r2
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d107      	bne.n	8018cde <HAL_TIM_IC_Stop_IT+0xe2>
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	681a      	ldr	r2, [r3, #0]
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	f022 0201 	bic.w	r2, r2, #1
 8018cdc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d104      	bne.n	8018cee <HAL_TIM_IC_Stop_IT+0xf2>
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2201      	movs	r2, #1
 8018ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8018cec:	e013      	b.n	8018d16 <HAL_TIM_IC_Stop_IT+0x11a>
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	2b04      	cmp	r3, #4
 8018cf2:	d104      	bne.n	8018cfe <HAL_TIM_IC_Stop_IT+0x102>
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	2201      	movs	r2, #1
 8018cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018cfc:	e00b      	b.n	8018d16 <HAL_TIM_IC_Stop_IT+0x11a>
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	2b08      	cmp	r3, #8
 8018d02:	d104      	bne.n	8018d0e <HAL_TIM_IC_Stop_IT+0x112>
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2201      	movs	r2, #1
 8018d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018d0c:	e003      	b.n	8018d16 <HAL_TIM_IC_Stop_IT+0x11a>
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	2201      	movs	r2, #1
 8018d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d104      	bne.n	8018d26 <HAL_TIM_IC_Stop_IT+0x12a>
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	2201      	movs	r2, #1
 8018d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8018d24:	e013      	b.n	8018d4e <HAL_TIM_IC_Stop_IT+0x152>
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	2b04      	cmp	r3, #4
 8018d2a:	d104      	bne.n	8018d36 <HAL_TIM_IC_Stop_IT+0x13a>
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	2201      	movs	r2, #1
 8018d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018d34:	e00b      	b.n	8018d4e <HAL_TIM_IC_Stop_IT+0x152>
 8018d36:	683b      	ldr	r3, [r7, #0]
 8018d38:	2b08      	cmp	r3, #8
 8018d3a:	d104      	bne.n	8018d46 <HAL_TIM_IC_Stop_IT+0x14a>
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	2201      	movs	r2, #1
 8018d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018d44:	e003      	b.n	8018d4e <HAL_TIM_IC_Stop_IT+0x152>
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	2201      	movs	r2, #1
 8018d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8018d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	3710      	adds	r7, #16
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd80      	pop	{r7, pc}

08018d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b082      	sub	sp, #8
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	691b      	ldr	r3, [r3, #16]
 8018d66:	f003 0302 	and.w	r3, r3, #2
 8018d6a:	2b02      	cmp	r3, #2
 8018d6c:	d122      	bne.n	8018db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	68db      	ldr	r3, [r3, #12]
 8018d74:	f003 0302 	and.w	r3, r3, #2
 8018d78:	2b02      	cmp	r3, #2
 8018d7a:	d11b      	bne.n	8018db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	f06f 0202 	mvn.w	r2, #2
 8018d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	2201      	movs	r2, #1
 8018d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	699b      	ldr	r3, [r3, #24]
 8018d92:	f003 0303 	and.w	r3, r3, #3
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d003      	beq.n	8018da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8018d9a:	6878      	ldr	r0, [r7, #4]
 8018d9c:	f7fa f9e8 	bl	8013170 <HAL_TIM_IC_CaptureCallback>
 8018da0:	e005      	b.n	8018dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018da2:	6878      	ldr	r0, [r7, #4]
 8018da4:	f000 fb4a 	bl	801943c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018da8:	6878      	ldr	r0, [r7, #4]
 8018daa:	f7ee ff33 	bl	8007c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	2200      	movs	r2, #0
 8018db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	691b      	ldr	r3, [r3, #16]
 8018dba:	f003 0304 	and.w	r3, r3, #4
 8018dbe:	2b04      	cmp	r3, #4
 8018dc0:	d122      	bne.n	8018e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	68db      	ldr	r3, [r3, #12]
 8018dc8:	f003 0304 	and.w	r3, r3, #4
 8018dcc:	2b04      	cmp	r3, #4
 8018dce:	d11b      	bne.n	8018e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	f06f 0204 	mvn.w	r2, #4
 8018dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	2202      	movs	r2, #2
 8018dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	699b      	ldr	r3, [r3, #24]
 8018de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d003      	beq.n	8018df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018dee:	6878      	ldr	r0, [r7, #4]
 8018df0:	f7fa f9be 	bl	8013170 <HAL_TIM_IC_CaptureCallback>
 8018df4:	e005      	b.n	8018e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018df6:	6878      	ldr	r0, [r7, #4]
 8018df8:	f000 fb20 	bl	801943c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018dfc:	6878      	ldr	r0, [r7, #4]
 8018dfe:	f7ee ff09 	bl	8007c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	2200      	movs	r2, #0
 8018e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	691b      	ldr	r3, [r3, #16]
 8018e0e:	f003 0308 	and.w	r3, r3, #8
 8018e12:	2b08      	cmp	r3, #8
 8018e14:	d122      	bne.n	8018e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	68db      	ldr	r3, [r3, #12]
 8018e1c:	f003 0308 	and.w	r3, r3, #8
 8018e20:	2b08      	cmp	r3, #8
 8018e22:	d11b      	bne.n	8018e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	f06f 0208 	mvn.w	r2, #8
 8018e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	2204      	movs	r2, #4
 8018e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	69db      	ldr	r3, [r3, #28]
 8018e3a:	f003 0303 	and.w	r3, r3, #3
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d003      	beq.n	8018e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018e42:	6878      	ldr	r0, [r7, #4]
 8018e44:	f7fa f994 	bl	8013170 <HAL_TIM_IC_CaptureCallback>
 8018e48:	e005      	b.n	8018e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018e4a:	6878      	ldr	r0, [r7, #4]
 8018e4c:	f000 faf6 	bl	801943c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018e50:	6878      	ldr	r0, [r7, #4]
 8018e52:	f7ee fedf 	bl	8007c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	2200      	movs	r2, #0
 8018e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	691b      	ldr	r3, [r3, #16]
 8018e62:	f003 0310 	and.w	r3, r3, #16
 8018e66:	2b10      	cmp	r3, #16
 8018e68:	d122      	bne.n	8018eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	68db      	ldr	r3, [r3, #12]
 8018e70:	f003 0310 	and.w	r3, r3, #16
 8018e74:	2b10      	cmp	r3, #16
 8018e76:	d11b      	bne.n	8018eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	f06f 0210 	mvn.w	r2, #16
 8018e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	2208      	movs	r2, #8
 8018e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	69db      	ldr	r3, [r3, #28]
 8018e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d003      	beq.n	8018e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018e96:	6878      	ldr	r0, [r7, #4]
 8018e98:	f7fa f96a 	bl	8013170 <HAL_TIM_IC_CaptureCallback>
 8018e9c:	e005      	b.n	8018eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018e9e:	6878      	ldr	r0, [r7, #4]
 8018ea0:	f000 facc 	bl	801943c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018ea4:	6878      	ldr	r0, [r7, #4]
 8018ea6:	f7ee feb5 	bl	8007c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	2200      	movs	r2, #0
 8018eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	691b      	ldr	r3, [r3, #16]
 8018eb6:	f003 0301 	and.w	r3, r3, #1
 8018eba:	2b01      	cmp	r3, #1
 8018ebc:	d10e      	bne.n	8018edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	68db      	ldr	r3, [r3, #12]
 8018ec4:	f003 0301 	and.w	r3, r3, #1
 8018ec8:	2b01      	cmp	r3, #1
 8018eca:	d107      	bne.n	8018edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	f06f 0201 	mvn.w	r2, #1
 8018ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018ed6:	6878      	ldr	r0, [r7, #4]
 8018ed8:	f7fa f9ca 	bl	8013270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	691b      	ldr	r3, [r3, #16]
 8018ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018ee6:	2b80      	cmp	r3, #128	; 0x80
 8018ee8:	d10e      	bne.n	8018f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	68db      	ldr	r3, [r3, #12]
 8018ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018ef4:	2b80      	cmp	r3, #128	; 0x80
 8018ef6:	d107      	bne.n	8018f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	f001 f854 	bl	8019fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	691b      	ldr	r3, [r3, #16]
 8018f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f12:	2b40      	cmp	r3, #64	; 0x40
 8018f14:	d10e      	bne.n	8018f34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	68db      	ldr	r3, [r3, #12]
 8018f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f20:	2b40      	cmp	r3, #64	; 0x40
 8018f22:	d107      	bne.n	8018f34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018f2e:	6878      	ldr	r0, [r7, #4]
 8018f30:	f000 fa98 	bl	8019464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	691b      	ldr	r3, [r3, #16]
 8018f3a:	f003 0320 	and.w	r3, r3, #32
 8018f3e:	2b20      	cmp	r3, #32
 8018f40:	d10e      	bne.n	8018f60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	68db      	ldr	r3, [r3, #12]
 8018f48:	f003 0320 	and.w	r3, r3, #32
 8018f4c:	2b20      	cmp	r3, #32
 8018f4e:	d107      	bne.n	8018f60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	f06f 0220 	mvn.w	r2, #32
 8018f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	f001 f81e 	bl	8019f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018f60:	bf00      	nop
 8018f62:	3708      	adds	r7, #8
 8018f64:	46bd      	mov	sp, r7
 8018f66:	bd80      	pop	{r7, pc}

08018f68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b086      	sub	sp, #24
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	60f8      	str	r0, [r7, #12]
 8018f70:	60b9      	str	r1, [r7, #8]
 8018f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018f74:	2300      	movs	r3, #0
 8018f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018f7e:	2b01      	cmp	r3, #1
 8018f80:	d101      	bne.n	8018f86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8018f82:	2302      	movs	r3, #2
 8018f84:	e088      	b.n	8019098 <HAL_TIM_IC_ConfigChannel+0x130>
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	2201      	movs	r2, #1
 8018f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d11b      	bne.n	8018fcc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	6818      	ldr	r0, [r3, #0]
 8018f98:	68bb      	ldr	r3, [r7, #8]
 8018f9a:	6819      	ldr	r1, [r3, #0]
 8018f9c:	68bb      	ldr	r3, [r7, #8]
 8018f9e:	685a      	ldr	r2, [r3, #4]
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	68db      	ldr	r3, [r3, #12]
 8018fa4:	f000 fd94 	bl	8019ad0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	699a      	ldr	r2, [r3, #24]
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	f022 020c 	bic.w	r2, r2, #12
 8018fb6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	6999      	ldr	r1, [r3, #24]
 8018fbe:	68bb      	ldr	r3, [r7, #8]
 8018fc0:	689a      	ldr	r2, [r3, #8]
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	430a      	orrs	r2, r1
 8018fc8:	619a      	str	r2, [r3, #24]
 8018fca:	e060      	b.n	801908e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	2b04      	cmp	r3, #4
 8018fd0:	d11c      	bne.n	801900c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	6818      	ldr	r0, [r3, #0]
 8018fd6:	68bb      	ldr	r3, [r7, #8]
 8018fd8:	6819      	ldr	r1, [r3, #0]
 8018fda:	68bb      	ldr	r3, [r7, #8]
 8018fdc:	685a      	ldr	r2, [r3, #4]
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	68db      	ldr	r3, [r3, #12]
 8018fe2:	f000 fe18 	bl	8019c16 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	699a      	ldr	r2, [r3, #24]
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8018ff4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	6999      	ldr	r1, [r3, #24]
 8018ffc:	68bb      	ldr	r3, [r7, #8]
 8018ffe:	689b      	ldr	r3, [r3, #8]
 8019000:	021a      	lsls	r2, r3, #8
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	430a      	orrs	r2, r1
 8019008:	619a      	str	r2, [r3, #24]
 801900a:	e040      	b.n	801908e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	2b08      	cmp	r3, #8
 8019010:	d11b      	bne.n	801904a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8019012:	68fb      	ldr	r3, [r7, #12]
 8019014:	6818      	ldr	r0, [r3, #0]
 8019016:	68bb      	ldr	r3, [r7, #8]
 8019018:	6819      	ldr	r1, [r3, #0]
 801901a:	68bb      	ldr	r3, [r7, #8]
 801901c:	685a      	ldr	r2, [r3, #4]
 801901e:	68bb      	ldr	r3, [r7, #8]
 8019020:	68db      	ldr	r3, [r3, #12]
 8019022:	f000 fe65 	bl	8019cf0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	69da      	ldr	r2, [r3, #28]
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	f022 020c 	bic.w	r2, r2, #12
 8019034:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	69d9      	ldr	r1, [r3, #28]
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	689a      	ldr	r2, [r3, #8]
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	430a      	orrs	r2, r1
 8019046:	61da      	str	r2, [r3, #28]
 8019048:	e021      	b.n	801908e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2b0c      	cmp	r3, #12
 801904e:	d11c      	bne.n	801908a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	6818      	ldr	r0, [r3, #0]
 8019054:	68bb      	ldr	r3, [r7, #8]
 8019056:	6819      	ldr	r1, [r3, #0]
 8019058:	68bb      	ldr	r3, [r7, #8]
 801905a:	685a      	ldr	r2, [r3, #4]
 801905c:	68bb      	ldr	r3, [r7, #8]
 801905e:	68db      	ldr	r3, [r3, #12]
 8019060:	f000 fe82 	bl	8019d68 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	69da      	ldr	r2, [r3, #28]
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8019072:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	69d9      	ldr	r1, [r3, #28]
 801907a:	68bb      	ldr	r3, [r7, #8]
 801907c:	689b      	ldr	r3, [r3, #8]
 801907e:	021a      	lsls	r2, r3, #8
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	430a      	orrs	r2, r1
 8019086:	61da      	str	r2, [r3, #28]
 8019088:	e001      	b.n	801908e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801908a:	2301      	movs	r3, #1
 801908c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	2200      	movs	r2, #0
 8019092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8019096:	7dfb      	ldrb	r3, [r7, #23]
}
 8019098:	4618      	mov	r0, r3
 801909a:	3718      	adds	r7, #24
 801909c:	46bd      	mov	sp, r7
 801909e:	bd80      	pop	{r7, pc}

080190a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	b086      	sub	sp, #24
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	60f8      	str	r0, [r7, #12]
 80190a8:	60b9      	str	r1, [r7, #8]
 80190aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80190ac:	2300      	movs	r3, #0
 80190ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80190b6:	2b01      	cmp	r3, #1
 80190b8:	d101      	bne.n	80190be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80190ba:	2302      	movs	r3, #2
 80190bc:	e0ae      	b.n	801921c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	2201      	movs	r2, #1
 80190c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2b0c      	cmp	r3, #12
 80190ca:	f200 809f 	bhi.w	801920c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80190ce:	a201      	add	r2, pc, #4	; (adr r2, 80190d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80190d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190d4:	08019109 	.word	0x08019109
 80190d8:	0801920d 	.word	0x0801920d
 80190dc:	0801920d 	.word	0x0801920d
 80190e0:	0801920d 	.word	0x0801920d
 80190e4:	08019149 	.word	0x08019149
 80190e8:	0801920d 	.word	0x0801920d
 80190ec:	0801920d 	.word	0x0801920d
 80190f0:	0801920d 	.word	0x0801920d
 80190f4:	0801918b 	.word	0x0801918b
 80190f8:	0801920d 	.word	0x0801920d
 80190fc:	0801920d 	.word	0x0801920d
 8019100:	0801920d 	.word	0x0801920d
 8019104:	080191cb 	.word	0x080191cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	68b9      	ldr	r1, [r7, #8]
 801910e:	4618      	mov	r0, r3
 8019110:	f000 fb2e 	bl	8019770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	699a      	ldr	r2, [r3, #24]
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	f042 0208 	orr.w	r2, r2, #8
 8019122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	699a      	ldr	r2, [r3, #24]
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	f022 0204 	bic.w	r2, r2, #4
 8019132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	6999      	ldr	r1, [r3, #24]
 801913a:	68bb      	ldr	r3, [r7, #8]
 801913c:	691a      	ldr	r2, [r3, #16]
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	430a      	orrs	r2, r1
 8019144:	619a      	str	r2, [r3, #24]
      break;
 8019146:	e064      	b.n	8019212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	68b9      	ldr	r1, [r7, #8]
 801914e:	4618      	mov	r0, r3
 8019150:	f000 fb7e 	bl	8019850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	699a      	ldr	r2, [r3, #24]
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	699a      	ldr	r2, [r3, #24]
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	6999      	ldr	r1, [r3, #24]
 801917a:	68bb      	ldr	r3, [r7, #8]
 801917c:	691b      	ldr	r3, [r3, #16]
 801917e:	021a      	lsls	r2, r3, #8
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	430a      	orrs	r2, r1
 8019186:	619a      	str	r2, [r3, #24]
      break;
 8019188:	e043      	b.n	8019212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	68b9      	ldr	r1, [r7, #8]
 8019190:	4618      	mov	r0, r3
 8019192:	f000 fbd3 	bl	801993c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	69da      	ldr	r2, [r3, #28]
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	f042 0208 	orr.w	r2, r2, #8
 80191a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	69da      	ldr	r2, [r3, #28]
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	f022 0204 	bic.w	r2, r2, #4
 80191b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	69d9      	ldr	r1, [r3, #28]
 80191bc:	68bb      	ldr	r3, [r7, #8]
 80191be:	691a      	ldr	r2, [r3, #16]
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	430a      	orrs	r2, r1
 80191c6:	61da      	str	r2, [r3, #28]
      break;
 80191c8:	e023      	b.n	8019212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	68b9      	ldr	r1, [r7, #8]
 80191d0:	4618      	mov	r0, r3
 80191d2:	f000 fc27 	bl	8019a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	69da      	ldr	r2, [r3, #28]
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80191e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	69da      	ldr	r2, [r3, #28]
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80191f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	69d9      	ldr	r1, [r3, #28]
 80191fc:	68bb      	ldr	r3, [r7, #8]
 80191fe:	691b      	ldr	r3, [r3, #16]
 8019200:	021a      	lsls	r2, r3, #8
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	430a      	orrs	r2, r1
 8019208:	61da      	str	r2, [r3, #28]
      break;
 801920a:	e002      	b.n	8019212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801920c:	2301      	movs	r3, #1
 801920e:	75fb      	strb	r3, [r7, #23]
      break;
 8019210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	2200      	movs	r2, #0
 8019216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801921a:	7dfb      	ldrb	r3, [r7, #23]
}
 801921c:	4618      	mov	r0, r3
 801921e:	3718      	adds	r7, #24
 8019220:	46bd      	mov	sp, r7
 8019222:	bd80      	pop	{r7, pc}

08019224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b084      	sub	sp, #16
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801922e:	2300      	movs	r3, #0
 8019230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019238:	2b01      	cmp	r3, #1
 801923a:	d101      	bne.n	8019240 <HAL_TIM_ConfigClockSource+0x1c>
 801923c:	2302      	movs	r3, #2
 801923e:	e0b4      	b.n	80193aa <HAL_TIM_ConfigClockSource+0x186>
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	2201      	movs	r2, #1
 8019244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	2202      	movs	r2, #2
 801924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	689b      	ldr	r3, [r3, #8]
 8019256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801925e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8019266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	68ba      	ldr	r2, [r7, #8]
 801926e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8019270:	683b      	ldr	r3, [r7, #0]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019278:	d03e      	beq.n	80192f8 <HAL_TIM_ConfigClockSource+0xd4>
 801927a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801927e:	f200 8087 	bhi.w	8019390 <HAL_TIM_ConfigClockSource+0x16c>
 8019282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019286:	f000 8086 	beq.w	8019396 <HAL_TIM_ConfigClockSource+0x172>
 801928a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801928e:	d87f      	bhi.n	8019390 <HAL_TIM_ConfigClockSource+0x16c>
 8019290:	2b70      	cmp	r3, #112	; 0x70
 8019292:	d01a      	beq.n	80192ca <HAL_TIM_ConfigClockSource+0xa6>
 8019294:	2b70      	cmp	r3, #112	; 0x70
 8019296:	d87b      	bhi.n	8019390 <HAL_TIM_ConfigClockSource+0x16c>
 8019298:	2b60      	cmp	r3, #96	; 0x60
 801929a:	d050      	beq.n	801933e <HAL_TIM_ConfigClockSource+0x11a>
 801929c:	2b60      	cmp	r3, #96	; 0x60
 801929e:	d877      	bhi.n	8019390 <HAL_TIM_ConfigClockSource+0x16c>
 80192a0:	2b50      	cmp	r3, #80	; 0x50
 80192a2:	d03c      	beq.n	801931e <HAL_TIM_ConfigClockSource+0xfa>
 80192a4:	2b50      	cmp	r3, #80	; 0x50
 80192a6:	d873      	bhi.n	8019390 <HAL_TIM_ConfigClockSource+0x16c>
 80192a8:	2b40      	cmp	r3, #64	; 0x40
 80192aa:	d058      	beq.n	801935e <HAL_TIM_ConfigClockSource+0x13a>
 80192ac:	2b40      	cmp	r3, #64	; 0x40
 80192ae:	d86f      	bhi.n	8019390 <HAL_TIM_ConfigClockSource+0x16c>
 80192b0:	2b30      	cmp	r3, #48	; 0x30
 80192b2:	d064      	beq.n	801937e <HAL_TIM_ConfigClockSource+0x15a>
 80192b4:	2b30      	cmp	r3, #48	; 0x30
 80192b6:	d86b      	bhi.n	8019390 <HAL_TIM_ConfigClockSource+0x16c>
 80192b8:	2b20      	cmp	r3, #32
 80192ba:	d060      	beq.n	801937e <HAL_TIM_ConfigClockSource+0x15a>
 80192bc:	2b20      	cmp	r3, #32
 80192be:	d867      	bhi.n	8019390 <HAL_TIM_ConfigClockSource+0x16c>
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d05c      	beq.n	801937e <HAL_TIM_ConfigClockSource+0x15a>
 80192c4:	2b10      	cmp	r3, #16
 80192c6:	d05a      	beq.n	801937e <HAL_TIM_ConfigClockSource+0x15a>
 80192c8:	e062      	b.n	8019390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	6818      	ldr	r0, [r3, #0]
 80192ce:	683b      	ldr	r3, [r7, #0]
 80192d0:	6899      	ldr	r1, [r3, #8]
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	685a      	ldr	r2, [r3, #4]
 80192d6:	683b      	ldr	r3, [r7, #0]
 80192d8:	68db      	ldr	r3, [r3, #12]
 80192da:	f000 fd9d 	bl	8019e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	689b      	ldr	r3, [r3, #8]
 80192e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80192e6:	68bb      	ldr	r3, [r7, #8]
 80192e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80192ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	68ba      	ldr	r2, [r7, #8]
 80192f4:	609a      	str	r2, [r3, #8]
      break;
 80192f6:	e04f      	b.n	8019398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	6818      	ldr	r0, [r3, #0]
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	6899      	ldr	r1, [r3, #8]
 8019300:	683b      	ldr	r3, [r7, #0]
 8019302:	685a      	ldr	r2, [r3, #4]
 8019304:	683b      	ldr	r3, [r7, #0]
 8019306:	68db      	ldr	r3, [r3, #12]
 8019308:	f000 fd86 	bl	8019e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	689a      	ldr	r2, [r3, #8]
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801931a:	609a      	str	r2, [r3, #8]
      break;
 801931c:	e03c      	b.n	8019398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	6818      	ldr	r0, [r3, #0]
 8019322:	683b      	ldr	r3, [r7, #0]
 8019324:	6859      	ldr	r1, [r3, #4]
 8019326:	683b      	ldr	r3, [r7, #0]
 8019328:	68db      	ldr	r3, [r3, #12]
 801932a:	461a      	mov	r2, r3
 801932c:	f000 fc44 	bl	8019bb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	2150      	movs	r1, #80	; 0x50
 8019336:	4618      	mov	r0, r3
 8019338:	f000 fd53 	bl	8019de2 <TIM_ITRx_SetConfig>
      break;
 801933c:	e02c      	b.n	8019398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	6818      	ldr	r0, [r3, #0]
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	6859      	ldr	r1, [r3, #4]
 8019346:	683b      	ldr	r3, [r7, #0]
 8019348:	68db      	ldr	r3, [r3, #12]
 801934a:	461a      	mov	r2, r3
 801934c:	f000 fca0 	bl	8019c90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	2160      	movs	r1, #96	; 0x60
 8019356:	4618      	mov	r0, r3
 8019358:	f000 fd43 	bl	8019de2 <TIM_ITRx_SetConfig>
      break;
 801935c:	e01c      	b.n	8019398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	6818      	ldr	r0, [r3, #0]
 8019362:	683b      	ldr	r3, [r7, #0]
 8019364:	6859      	ldr	r1, [r3, #4]
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	68db      	ldr	r3, [r3, #12]
 801936a:	461a      	mov	r2, r3
 801936c:	f000 fc24 	bl	8019bb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	2140      	movs	r1, #64	; 0x40
 8019376:	4618      	mov	r0, r3
 8019378:	f000 fd33 	bl	8019de2 <TIM_ITRx_SetConfig>
      break;
 801937c:	e00c      	b.n	8019398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	681a      	ldr	r2, [r3, #0]
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	4619      	mov	r1, r3
 8019388:	4610      	mov	r0, r2
 801938a:	f000 fd2a 	bl	8019de2 <TIM_ITRx_SetConfig>
      break;
 801938e:	e003      	b.n	8019398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8019390:	2301      	movs	r3, #1
 8019392:	73fb      	strb	r3, [r7, #15]
      break;
 8019394:	e000      	b.n	8019398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8019396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	2201      	movs	r2, #1
 801939c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	2200      	movs	r2, #0
 80193a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80193a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80193aa:	4618      	mov	r0, r3
 80193ac:	3710      	adds	r7, #16
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}
	...

080193b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80193b4:	b480      	push	{r7}
 80193b6:	b085      	sub	sp, #20
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
 80193bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80193be:	2300      	movs	r3, #0
 80193c0:	60fb      	str	r3, [r7, #12]
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	2b0c      	cmp	r3, #12
 80193c6:	d831      	bhi.n	801942c <HAL_TIM_ReadCapturedValue+0x78>
 80193c8:	a201      	add	r2, pc, #4	; (adr r2, 80193d0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80193ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193ce:	bf00      	nop
 80193d0:	08019405 	.word	0x08019405
 80193d4:	0801942d 	.word	0x0801942d
 80193d8:	0801942d 	.word	0x0801942d
 80193dc:	0801942d 	.word	0x0801942d
 80193e0:	0801940f 	.word	0x0801940f
 80193e4:	0801942d 	.word	0x0801942d
 80193e8:	0801942d 	.word	0x0801942d
 80193ec:	0801942d 	.word	0x0801942d
 80193f0:	08019419 	.word	0x08019419
 80193f4:	0801942d 	.word	0x0801942d
 80193f8:	0801942d 	.word	0x0801942d
 80193fc:	0801942d 	.word	0x0801942d
 8019400:	08019423 	.word	0x08019423
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801940a:	60fb      	str	r3, [r7, #12]

      break;
 801940c:	e00f      	b.n	801942e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019414:	60fb      	str	r3, [r7, #12]

      break;
 8019416:	e00a      	b.n	801942e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801941e:	60fb      	str	r3, [r7, #12]

      break;
 8019420:	e005      	b.n	801942e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019428:	60fb      	str	r3, [r7, #12]

      break;
 801942a:	e000      	b.n	801942e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801942c:	bf00      	nop
  }

  return tmpreg;
 801942e:	68fb      	ldr	r3, [r7, #12]
}
 8019430:	4618      	mov	r0, r3
 8019432:	3714      	adds	r7, #20
 8019434:	46bd      	mov	sp, r7
 8019436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943a:	4770      	bx	lr

0801943c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801943c:	b480      	push	{r7}
 801943e:	b083      	sub	sp, #12
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8019444:	bf00      	nop
 8019446:	370c      	adds	r7, #12
 8019448:	46bd      	mov	sp, r7
 801944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944e:	4770      	bx	lr

08019450 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8019450:	b480      	push	{r7}
 8019452:	b083      	sub	sp, #12
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8019458:	bf00      	nop
 801945a:	370c      	adds	r7, #12
 801945c:	46bd      	mov	sp, r7
 801945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019462:	4770      	bx	lr

08019464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8019464:	b480      	push	{r7}
 8019466:	b083      	sub	sp, #12
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801946c:	bf00      	nop
 801946e:	370c      	adds	r7, #12
 8019470:	46bd      	mov	sp, r7
 8019472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019476:	4770      	bx	lr

08019478 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8019478:	b480      	push	{r7}
 801947a:	b083      	sub	sp, #12
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8019480:	bf00      	nop
 8019482:	370c      	adds	r7, #12
 8019484:	46bd      	mov	sp, r7
 8019486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948a:	4770      	bx	lr

0801948c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b084      	sub	sp, #16
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019498:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801949e:	687a      	ldr	r2, [r7, #4]
 80194a0:	429a      	cmp	r2, r3
 80194a2:	d107      	bne.n	80194b4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	2201      	movs	r2, #1
 80194a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	2201      	movs	r2, #1
 80194ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80194b2:	e02a      	b.n	801950a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194b8:	687a      	ldr	r2, [r7, #4]
 80194ba:	429a      	cmp	r2, r3
 80194bc:	d107      	bne.n	80194ce <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	2202      	movs	r2, #2
 80194c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	2201      	movs	r2, #1
 80194c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80194cc:	e01d      	b.n	801950a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194d2:	687a      	ldr	r2, [r7, #4]
 80194d4:	429a      	cmp	r2, r3
 80194d6:	d107      	bne.n	80194e8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	2204      	movs	r2, #4
 80194dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	2201      	movs	r2, #1
 80194e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80194e6:	e010      	b.n	801950a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194ec:	687a      	ldr	r2, [r7, #4]
 80194ee:	429a      	cmp	r2, r3
 80194f0:	d107      	bne.n	8019502 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	2208      	movs	r2, #8
 80194f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	2201      	movs	r2, #1
 80194fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019500:	e003      	b.n	801950a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	2201      	movs	r2, #1
 8019506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801950a:	68f8      	ldr	r0, [r7, #12]
 801950c:	f7ff ffb4 	bl	8019478 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	2200      	movs	r2, #0
 8019514:	771a      	strb	r2, [r3, #28]
}
 8019516:	bf00      	nop
 8019518:	3710      	adds	r7, #16
 801951a:	46bd      	mov	sp, r7
 801951c:	bd80      	pop	{r7, pc}

0801951e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801951e:	b580      	push	{r7, lr}
 8019520:	b084      	sub	sp, #16
 8019522:	af00      	add	r7, sp, #0
 8019524:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801952a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019530:	687a      	ldr	r2, [r7, #4]
 8019532:	429a      	cmp	r2, r3
 8019534:	d10b      	bne.n	801954e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	2201      	movs	r2, #1
 801953a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	69db      	ldr	r3, [r3, #28]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d136      	bne.n	80195b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	2201      	movs	r2, #1
 8019548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801954c:	e031      	b.n	80195b2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019552:	687a      	ldr	r2, [r7, #4]
 8019554:	429a      	cmp	r2, r3
 8019556:	d10b      	bne.n	8019570 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	2202      	movs	r2, #2
 801955c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	69db      	ldr	r3, [r3, #28]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d125      	bne.n	80195b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	2201      	movs	r2, #1
 801956a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801956e:	e020      	b.n	80195b2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019574:	687a      	ldr	r2, [r7, #4]
 8019576:	429a      	cmp	r2, r3
 8019578:	d10b      	bne.n	8019592 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	2204      	movs	r2, #4
 801957e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	69db      	ldr	r3, [r3, #28]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d114      	bne.n	80195b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	2201      	movs	r2, #1
 801958c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019590:	e00f      	b.n	80195b2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019596:	687a      	ldr	r2, [r7, #4]
 8019598:	429a      	cmp	r2, r3
 801959a:	d10a      	bne.n	80195b2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	2208      	movs	r2, #8
 80195a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	69db      	ldr	r3, [r3, #28]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d103      	bne.n	80195b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	2201      	movs	r2, #1
 80195ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80195b2:	68f8      	ldr	r0, [r7, #12]
 80195b4:	f7ee fb2e 	bl	8007c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	2200      	movs	r2, #0
 80195bc:	771a      	strb	r2, [r3, #28]
}
 80195be:	bf00      	nop
 80195c0:	3710      	adds	r7, #16
 80195c2:	46bd      	mov	sp, r7
 80195c4:	bd80      	pop	{r7, pc}

080195c6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80195c6:	b580      	push	{r7, lr}
 80195c8:	b084      	sub	sp, #16
 80195ca:	af00      	add	r7, sp, #0
 80195cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195d8:	687a      	ldr	r2, [r7, #4]
 80195da:	429a      	cmp	r2, r3
 80195dc:	d103      	bne.n	80195e6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	2201      	movs	r2, #1
 80195e2:	771a      	strb	r2, [r3, #28]
 80195e4:	e019      	b.n	801961a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195ea:	687a      	ldr	r2, [r7, #4]
 80195ec:	429a      	cmp	r2, r3
 80195ee:	d103      	bne.n	80195f8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	2202      	movs	r2, #2
 80195f4:	771a      	strb	r2, [r3, #28]
 80195f6:	e010      	b.n	801961a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195fc:	687a      	ldr	r2, [r7, #4]
 80195fe:	429a      	cmp	r2, r3
 8019600:	d103      	bne.n	801960a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	2204      	movs	r2, #4
 8019606:	771a      	strb	r2, [r3, #28]
 8019608:	e007      	b.n	801961a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801960e:	687a      	ldr	r2, [r7, #4]
 8019610:	429a      	cmp	r2, r3
 8019612:	d102      	bne.n	801961a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	2208      	movs	r2, #8
 8019618:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801961a:	68f8      	ldr	r0, [r7, #12]
 801961c:	f7ff ff18 	bl	8019450 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	2200      	movs	r2, #0
 8019624:	771a      	strb	r2, [r3, #28]
}
 8019626:	bf00      	nop
 8019628:	3710      	adds	r7, #16
 801962a:	46bd      	mov	sp, r7
 801962c:	bd80      	pop	{r7, pc}
	...

08019630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8019630:	b480      	push	{r7}
 8019632:	b085      	sub	sp, #20
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
 8019638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	4a40      	ldr	r2, [pc, #256]	; (8019744 <TIM_Base_SetConfig+0x114>)
 8019644:	4293      	cmp	r3, r2
 8019646:	d013      	beq.n	8019670 <TIM_Base_SetConfig+0x40>
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801964e:	d00f      	beq.n	8019670 <TIM_Base_SetConfig+0x40>
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	4a3d      	ldr	r2, [pc, #244]	; (8019748 <TIM_Base_SetConfig+0x118>)
 8019654:	4293      	cmp	r3, r2
 8019656:	d00b      	beq.n	8019670 <TIM_Base_SetConfig+0x40>
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	4a3c      	ldr	r2, [pc, #240]	; (801974c <TIM_Base_SetConfig+0x11c>)
 801965c:	4293      	cmp	r3, r2
 801965e:	d007      	beq.n	8019670 <TIM_Base_SetConfig+0x40>
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	4a3b      	ldr	r2, [pc, #236]	; (8019750 <TIM_Base_SetConfig+0x120>)
 8019664:	4293      	cmp	r3, r2
 8019666:	d003      	beq.n	8019670 <TIM_Base_SetConfig+0x40>
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	4a3a      	ldr	r2, [pc, #232]	; (8019754 <TIM_Base_SetConfig+0x124>)
 801966c:	4293      	cmp	r3, r2
 801966e:	d108      	bne.n	8019682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019678:	683b      	ldr	r3, [r7, #0]
 801967a:	685b      	ldr	r3, [r3, #4]
 801967c:	68fa      	ldr	r2, [r7, #12]
 801967e:	4313      	orrs	r3, r2
 8019680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	4a2f      	ldr	r2, [pc, #188]	; (8019744 <TIM_Base_SetConfig+0x114>)
 8019686:	4293      	cmp	r3, r2
 8019688:	d02b      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019690:	d027      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	4a2c      	ldr	r2, [pc, #176]	; (8019748 <TIM_Base_SetConfig+0x118>)
 8019696:	4293      	cmp	r3, r2
 8019698:	d023      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	4a2b      	ldr	r2, [pc, #172]	; (801974c <TIM_Base_SetConfig+0x11c>)
 801969e:	4293      	cmp	r3, r2
 80196a0:	d01f      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	4a2a      	ldr	r2, [pc, #168]	; (8019750 <TIM_Base_SetConfig+0x120>)
 80196a6:	4293      	cmp	r3, r2
 80196a8:	d01b      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	4a29      	ldr	r2, [pc, #164]	; (8019754 <TIM_Base_SetConfig+0x124>)
 80196ae:	4293      	cmp	r3, r2
 80196b0:	d017      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	4a28      	ldr	r2, [pc, #160]	; (8019758 <TIM_Base_SetConfig+0x128>)
 80196b6:	4293      	cmp	r3, r2
 80196b8:	d013      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	4a27      	ldr	r2, [pc, #156]	; (801975c <TIM_Base_SetConfig+0x12c>)
 80196be:	4293      	cmp	r3, r2
 80196c0:	d00f      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	4a26      	ldr	r2, [pc, #152]	; (8019760 <TIM_Base_SetConfig+0x130>)
 80196c6:	4293      	cmp	r3, r2
 80196c8:	d00b      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	4a25      	ldr	r2, [pc, #148]	; (8019764 <TIM_Base_SetConfig+0x134>)
 80196ce:	4293      	cmp	r3, r2
 80196d0:	d007      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	4a24      	ldr	r2, [pc, #144]	; (8019768 <TIM_Base_SetConfig+0x138>)
 80196d6:	4293      	cmp	r3, r2
 80196d8:	d003      	beq.n	80196e2 <TIM_Base_SetConfig+0xb2>
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	4a23      	ldr	r2, [pc, #140]	; (801976c <TIM_Base_SetConfig+0x13c>)
 80196de:	4293      	cmp	r3, r2
 80196e0:	d108      	bne.n	80196f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80196ea:	683b      	ldr	r3, [r7, #0]
 80196ec:	68db      	ldr	r3, [r3, #12]
 80196ee:	68fa      	ldr	r2, [r7, #12]
 80196f0:	4313      	orrs	r3, r2
 80196f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	695b      	ldr	r3, [r3, #20]
 80196fe:	4313      	orrs	r3, r2
 8019700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	68fa      	ldr	r2, [r7, #12]
 8019706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	689a      	ldr	r2, [r3, #8]
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	681a      	ldr	r2, [r3, #0]
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	4a0a      	ldr	r2, [pc, #40]	; (8019744 <TIM_Base_SetConfig+0x114>)
 801971c:	4293      	cmp	r3, r2
 801971e:	d003      	beq.n	8019728 <TIM_Base_SetConfig+0xf8>
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	4a0c      	ldr	r2, [pc, #48]	; (8019754 <TIM_Base_SetConfig+0x124>)
 8019724:	4293      	cmp	r3, r2
 8019726:	d103      	bne.n	8019730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	691a      	ldr	r2, [r3, #16]
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	2201      	movs	r2, #1
 8019734:	615a      	str	r2, [r3, #20]
}
 8019736:	bf00      	nop
 8019738:	3714      	adds	r7, #20
 801973a:	46bd      	mov	sp, r7
 801973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019740:	4770      	bx	lr
 8019742:	bf00      	nop
 8019744:	40010000 	.word	0x40010000
 8019748:	40000400 	.word	0x40000400
 801974c:	40000800 	.word	0x40000800
 8019750:	40000c00 	.word	0x40000c00
 8019754:	40010400 	.word	0x40010400
 8019758:	40014000 	.word	0x40014000
 801975c:	40014400 	.word	0x40014400
 8019760:	40014800 	.word	0x40014800
 8019764:	40001800 	.word	0x40001800
 8019768:	40001c00 	.word	0x40001c00
 801976c:	40002000 	.word	0x40002000

08019770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019770:	b480      	push	{r7}
 8019772:	b087      	sub	sp, #28
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
 8019778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	6a1b      	ldr	r3, [r3, #32]
 801977e:	f023 0201 	bic.w	r2, r3, #1
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	6a1b      	ldr	r3, [r3, #32]
 801978a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	685b      	ldr	r3, [r3, #4]
 8019790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	699b      	ldr	r3, [r3, #24]
 8019796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801979e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	f023 0303 	bic.w	r3, r3, #3
 80197a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80197a8:	683b      	ldr	r3, [r7, #0]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	68fa      	ldr	r2, [r7, #12]
 80197ae:	4313      	orrs	r3, r2
 80197b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80197b2:	697b      	ldr	r3, [r7, #20]
 80197b4:	f023 0302 	bic.w	r3, r3, #2
 80197b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	689b      	ldr	r3, [r3, #8]
 80197be:	697a      	ldr	r2, [r7, #20]
 80197c0:	4313      	orrs	r3, r2
 80197c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	4a20      	ldr	r2, [pc, #128]	; (8019848 <TIM_OC1_SetConfig+0xd8>)
 80197c8:	4293      	cmp	r3, r2
 80197ca:	d003      	beq.n	80197d4 <TIM_OC1_SetConfig+0x64>
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	4a1f      	ldr	r2, [pc, #124]	; (801984c <TIM_OC1_SetConfig+0xdc>)
 80197d0:	4293      	cmp	r3, r2
 80197d2:	d10c      	bne.n	80197ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	f023 0308 	bic.w	r3, r3, #8
 80197da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80197dc:	683b      	ldr	r3, [r7, #0]
 80197de:	68db      	ldr	r3, [r3, #12]
 80197e0:	697a      	ldr	r2, [r7, #20]
 80197e2:	4313      	orrs	r3, r2
 80197e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80197e6:	697b      	ldr	r3, [r7, #20]
 80197e8:	f023 0304 	bic.w	r3, r3, #4
 80197ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	4a15      	ldr	r2, [pc, #84]	; (8019848 <TIM_OC1_SetConfig+0xd8>)
 80197f2:	4293      	cmp	r3, r2
 80197f4:	d003      	beq.n	80197fe <TIM_OC1_SetConfig+0x8e>
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	4a14      	ldr	r2, [pc, #80]	; (801984c <TIM_OC1_SetConfig+0xdc>)
 80197fa:	4293      	cmp	r3, r2
 80197fc:	d111      	bne.n	8019822 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80197fe:	693b      	ldr	r3, [r7, #16]
 8019800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8019806:	693b      	ldr	r3, [r7, #16]
 8019808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801980c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801980e:	683b      	ldr	r3, [r7, #0]
 8019810:	695b      	ldr	r3, [r3, #20]
 8019812:	693a      	ldr	r2, [r7, #16]
 8019814:	4313      	orrs	r3, r2
 8019816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	699b      	ldr	r3, [r3, #24]
 801981c:	693a      	ldr	r2, [r7, #16]
 801981e:	4313      	orrs	r3, r2
 8019820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	693a      	ldr	r2, [r7, #16]
 8019826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	68fa      	ldr	r2, [r7, #12]
 801982c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801982e:	683b      	ldr	r3, [r7, #0]
 8019830:	685a      	ldr	r2, [r3, #4]
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	697a      	ldr	r2, [r7, #20]
 801983a:	621a      	str	r2, [r3, #32]
}
 801983c:	bf00      	nop
 801983e:	371c      	adds	r7, #28
 8019840:	46bd      	mov	sp, r7
 8019842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019846:	4770      	bx	lr
 8019848:	40010000 	.word	0x40010000
 801984c:	40010400 	.word	0x40010400

08019850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019850:	b480      	push	{r7}
 8019852:	b087      	sub	sp, #28
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
 8019858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	6a1b      	ldr	r3, [r3, #32]
 801985e:	f023 0210 	bic.w	r2, r3, #16
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	6a1b      	ldr	r3, [r3, #32]
 801986a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	685b      	ldr	r3, [r3, #4]
 8019870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	699b      	ldr	r3, [r3, #24]
 8019876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801987e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019888:	683b      	ldr	r3, [r7, #0]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	021b      	lsls	r3, r3, #8
 801988e:	68fa      	ldr	r2, [r7, #12]
 8019890:	4313      	orrs	r3, r2
 8019892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8019894:	697b      	ldr	r3, [r7, #20]
 8019896:	f023 0320 	bic.w	r3, r3, #32
 801989a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801989c:	683b      	ldr	r3, [r7, #0]
 801989e:	689b      	ldr	r3, [r3, #8]
 80198a0:	011b      	lsls	r3, r3, #4
 80198a2:	697a      	ldr	r2, [r7, #20]
 80198a4:	4313      	orrs	r3, r2
 80198a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	4a22      	ldr	r2, [pc, #136]	; (8019934 <TIM_OC2_SetConfig+0xe4>)
 80198ac:	4293      	cmp	r3, r2
 80198ae:	d003      	beq.n	80198b8 <TIM_OC2_SetConfig+0x68>
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	4a21      	ldr	r2, [pc, #132]	; (8019938 <TIM_OC2_SetConfig+0xe8>)
 80198b4:	4293      	cmp	r3, r2
 80198b6:	d10d      	bne.n	80198d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80198b8:	697b      	ldr	r3, [r7, #20]
 80198ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80198be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80198c0:	683b      	ldr	r3, [r7, #0]
 80198c2:	68db      	ldr	r3, [r3, #12]
 80198c4:	011b      	lsls	r3, r3, #4
 80198c6:	697a      	ldr	r2, [r7, #20]
 80198c8:	4313      	orrs	r3, r2
 80198ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80198d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	4a17      	ldr	r2, [pc, #92]	; (8019934 <TIM_OC2_SetConfig+0xe4>)
 80198d8:	4293      	cmp	r3, r2
 80198da:	d003      	beq.n	80198e4 <TIM_OC2_SetConfig+0x94>
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	4a16      	ldr	r2, [pc, #88]	; (8019938 <TIM_OC2_SetConfig+0xe8>)
 80198e0:	4293      	cmp	r3, r2
 80198e2:	d113      	bne.n	801990c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80198e4:	693b      	ldr	r3, [r7, #16]
 80198e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80198ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80198ec:	693b      	ldr	r3, [r7, #16]
 80198ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80198f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80198f4:	683b      	ldr	r3, [r7, #0]
 80198f6:	695b      	ldr	r3, [r3, #20]
 80198f8:	009b      	lsls	r3, r3, #2
 80198fa:	693a      	ldr	r2, [r7, #16]
 80198fc:	4313      	orrs	r3, r2
 80198fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8019900:	683b      	ldr	r3, [r7, #0]
 8019902:	699b      	ldr	r3, [r3, #24]
 8019904:	009b      	lsls	r3, r3, #2
 8019906:	693a      	ldr	r2, [r7, #16]
 8019908:	4313      	orrs	r3, r2
 801990a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	693a      	ldr	r2, [r7, #16]
 8019910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	68fa      	ldr	r2, [r7, #12]
 8019916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8019918:	683b      	ldr	r3, [r7, #0]
 801991a:	685a      	ldr	r2, [r3, #4]
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	697a      	ldr	r2, [r7, #20]
 8019924:	621a      	str	r2, [r3, #32]
}
 8019926:	bf00      	nop
 8019928:	371c      	adds	r7, #28
 801992a:	46bd      	mov	sp, r7
 801992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019930:	4770      	bx	lr
 8019932:	bf00      	nop
 8019934:	40010000 	.word	0x40010000
 8019938:	40010400 	.word	0x40010400

0801993c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801993c:	b480      	push	{r7}
 801993e:	b087      	sub	sp, #28
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
 8019944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	6a1b      	ldr	r3, [r3, #32]
 801994a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	6a1b      	ldr	r3, [r3, #32]
 8019956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	685b      	ldr	r3, [r3, #4]
 801995c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	69db      	ldr	r3, [r3, #28]
 8019962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801996a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	f023 0303 	bic.w	r3, r3, #3
 8019972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019974:	683b      	ldr	r3, [r7, #0]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	68fa      	ldr	r2, [r7, #12]
 801997a:	4313      	orrs	r3, r2
 801997c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801997e:	697b      	ldr	r3, [r7, #20]
 8019980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8019986:	683b      	ldr	r3, [r7, #0]
 8019988:	689b      	ldr	r3, [r3, #8]
 801998a:	021b      	lsls	r3, r3, #8
 801998c:	697a      	ldr	r2, [r7, #20]
 801998e:	4313      	orrs	r3, r2
 8019990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	4a21      	ldr	r2, [pc, #132]	; (8019a1c <TIM_OC3_SetConfig+0xe0>)
 8019996:	4293      	cmp	r3, r2
 8019998:	d003      	beq.n	80199a2 <TIM_OC3_SetConfig+0x66>
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	4a20      	ldr	r2, [pc, #128]	; (8019a20 <TIM_OC3_SetConfig+0xe4>)
 801999e:	4293      	cmp	r3, r2
 80199a0:	d10d      	bne.n	80199be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80199a2:	697b      	ldr	r3, [r7, #20]
 80199a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80199a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80199aa:	683b      	ldr	r3, [r7, #0]
 80199ac:	68db      	ldr	r3, [r3, #12]
 80199ae:	021b      	lsls	r3, r3, #8
 80199b0:	697a      	ldr	r2, [r7, #20]
 80199b2:	4313      	orrs	r3, r2
 80199b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80199b6:	697b      	ldr	r3, [r7, #20]
 80199b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80199bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	4a16      	ldr	r2, [pc, #88]	; (8019a1c <TIM_OC3_SetConfig+0xe0>)
 80199c2:	4293      	cmp	r3, r2
 80199c4:	d003      	beq.n	80199ce <TIM_OC3_SetConfig+0x92>
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	4a15      	ldr	r2, [pc, #84]	; (8019a20 <TIM_OC3_SetConfig+0xe4>)
 80199ca:	4293      	cmp	r3, r2
 80199cc:	d113      	bne.n	80199f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80199ce:	693b      	ldr	r3, [r7, #16]
 80199d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80199d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80199d6:	693b      	ldr	r3, [r7, #16]
 80199d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80199dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80199de:	683b      	ldr	r3, [r7, #0]
 80199e0:	695b      	ldr	r3, [r3, #20]
 80199e2:	011b      	lsls	r3, r3, #4
 80199e4:	693a      	ldr	r2, [r7, #16]
 80199e6:	4313      	orrs	r3, r2
 80199e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80199ea:	683b      	ldr	r3, [r7, #0]
 80199ec:	699b      	ldr	r3, [r3, #24]
 80199ee:	011b      	lsls	r3, r3, #4
 80199f0:	693a      	ldr	r2, [r7, #16]
 80199f2:	4313      	orrs	r3, r2
 80199f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	693a      	ldr	r2, [r7, #16]
 80199fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	68fa      	ldr	r2, [r7, #12]
 8019a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	685a      	ldr	r2, [r3, #4]
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	697a      	ldr	r2, [r7, #20]
 8019a0e:	621a      	str	r2, [r3, #32]
}
 8019a10:	bf00      	nop
 8019a12:	371c      	adds	r7, #28
 8019a14:	46bd      	mov	sp, r7
 8019a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1a:	4770      	bx	lr
 8019a1c:	40010000 	.word	0x40010000
 8019a20:	40010400 	.word	0x40010400

08019a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019a24:	b480      	push	{r7}
 8019a26:	b087      	sub	sp, #28
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
 8019a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	6a1b      	ldr	r3, [r3, #32]
 8019a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	6a1b      	ldr	r3, [r3, #32]
 8019a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	685b      	ldr	r3, [r3, #4]
 8019a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	69db      	ldr	r3, [r3, #28]
 8019a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019a5c:	683b      	ldr	r3, [r7, #0]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	021b      	lsls	r3, r3, #8
 8019a62:	68fa      	ldr	r2, [r7, #12]
 8019a64:	4313      	orrs	r3, r2
 8019a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8019a68:	693b      	ldr	r3, [r7, #16]
 8019a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8019a70:	683b      	ldr	r3, [r7, #0]
 8019a72:	689b      	ldr	r3, [r3, #8]
 8019a74:	031b      	lsls	r3, r3, #12
 8019a76:	693a      	ldr	r2, [r7, #16]
 8019a78:	4313      	orrs	r3, r2
 8019a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	4a12      	ldr	r2, [pc, #72]	; (8019ac8 <TIM_OC4_SetConfig+0xa4>)
 8019a80:	4293      	cmp	r3, r2
 8019a82:	d003      	beq.n	8019a8c <TIM_OC4_SetConfig+0x68>
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	4a11      	ldr	r2, [pc, #68]	; (8019acc <TIM_OC4_SetConfig+0xa8>)
 8019a88:	4293      	cmp	r3, r2
 8019a8a:	d109      	bne.n	8019aa0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8019a8c:	697b      	ldr	r3, [r7, #20]
 8019a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8019a94:	683b      	ldr	r3, [r7, #0]
 8019a96:	695b      	ldr	r3, [r3, #20]
 8019a98:	019b      	lsls	r3, r3, #6
 8019a9a:	697a      	ldr	r2, [r7, #20]
 8019a9c:	4313      	orrs	r3, r2
 8019a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	697a      	ldr	r2, [r7, #20]
 8019aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	68fa      	ldr	r2, [r7, #12]
 8019aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8019aac:	683b      	ldr	r3, [r7, #0]
 8019aae:	685a      	ldr	r2, [r3, #4]
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	693a      	ldr	r2, [r7, #16]
 8019ab8:	621a      	str	r2, [r3, #32]
}
 8019aba:	bf00      	nop
 8019abc:	371c      	adds	r7, #28
 8019abe:	46bd      	mov	sp, r7
 8019ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac4:	4770      	bx	lr
 8019ac6:	bf00      	nop
 8019ac8:	40010000 	.word	0x40010000
 8019acc:	40010400 	.word	0x40010400

08019ad0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8019ad0:	b480      	push	{r7}
 8019ad2:	b087      	sub	sp, #28
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	60f8      	str	r0, [r7, #12]
 8019ad8:	60b9      	str	r1, [r7, #8]
 8019ada:	607a      	str	r2, [r7, #4]
 8019adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	6a1b      	ldr	r3, [r3, #32]
 8019ae2:	f023 0201 	bic.w	r2, r3, #1
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	699b      	ldr	r3, [r3, #24]
 8019aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	6a1b      	ldr	r3, [r3, #32]
 8019af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	4a28      	ldr	r2, [pc, #160]	; (8019b9c <TIM_TI1_SetConfig+0xcc>)
 8019afa:	4293      	cmp	r3, r2
 8019afc:	d01b      	beq.n	8019b36 <TIM_TI1_SetConfig+0x66>
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019b04:	d017      	beq.n	8019b36 <TIM_TI1_SetConfig+0x66>
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	4a25      	ldr	r2, [pc, #148]	; (8019ba0 <TIM_TI1_SetConfig+0xd0>)
 8019b0a:	4293      	cmp	r3, r2
 8019b0c:	d013      	beq.n	8019b36 <TIM_TI1_SetConfig+0x66>
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	4a24      	ldr	r2, [pc, #144]	; (8019ba4 <TIM_TI1_SetConfig+0xd4>)
 8019b12:	4293      	cmp	r3, r2
 8019b14:	d00f      	beq.n	8019b36 <TIM_TI1_SetConfig+0x66>
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	4a23      	ldr	r2, [pc, #140]	; (8019ba8 <TIM_TI1_SetConfig+0xd8>)
 8019b1a:	4293      	cmp	r3, r2
 8019b1c:	d00b      	beq.n	8019b36 <TIM_TI1_SetConfig+0x66>
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	4a22      	ldr	r2, [pc, #136]	; (8019bac <TIM_TI1_SetConfig+0xdc>)
 8019b22:	4293      	cmp	r3, r2
 8019b24:	d007      	beq.n	8019b36 <TIM_TI1_SetConfig+0x66>
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	4a21      	ldr	r2, [pc, #132]	; (8019bb0 <TIM_TI1_SetConfig+0xe0>)
 8019b2a:	4293      	cmp	r3, r2
 8019b2c:	d003      	beq.n	8019b36 <TIM_TI1_SetConfig+0x66>
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	4a20      	ldr	r2, [pc, #128]	; (8019bb4 <TIM_TI1_SetConfig+0xe4>)
 8019b32:	4293      	cmp	r3, r2
 8019b34:	d101      	bne.n	8019b3a <TIM_TI1_SetConfig+0x6a>
 8019b36:	2301      	movs	r3, #1
 8019b38:	e000      	b.n	8019b3c <TIM_TI1_SetConfig+0x6c>
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d008      	beq.n	8019b52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8019b40:	697b      	ldr	r3, [r7, #20]
 8019b42:	f023 0303 	bic.w	r3, r3, #3
 8019b46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8019b48:	697a      	ldr	r2, [r7, #20]
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	4313      	orrs	r3, r2
 8019b4e:	617b      	str	r3, [r7, #20]
 8019b50:	e003      	b.n	8019b5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8019b52:	697b      	ldr	r3, [r7, #20]
 8019b54:	f043 0301 	orr.w	r3, r3, #1
 8019b58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8019b5a:	697b      	ldr	r3, [r7, #20]
 8019b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8019b62:	683b      	ldr	r3, [r7, #0]
 8019b64:	011b      	lsls	r3, r3, #4
 8019b66:	b2db      	uxtb	r3, r3
 8019b68:	697a      	ldr	r2, [r7, #20]
 8019b6a:	4313      	orrs	r3, r2
 8019b6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019b6e:	693b      	ldr	r3, [r7, #16]
 8019b70:	f023 030a 	bic.w	r3, r3, #10
 8019b74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8019b76:	68bb      	ldr	r3, [r7, #8]
 8019b78:	f003 030a 	and.w	r3, r3, #10
 8019b7c:	693a      	ldr	r2, [r7, #16]
 8019b7e:	4313      	orrs	r3, r2
 8019b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	697a      	ldr	r2, [r7, #20]
 8019b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	693a      	ldr	r2, [r7, #16]
 8019b8c:	621a      	str	r2, [r3, #32]
}
 8019b8e:	bf00      	nop
 8019b90:	371c      	adds	r7, #28
 8019b92:	46bd      	mov	sp, r7
 8019b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b98:	4770      	bx	lr
 8019b9a:	bf00      	nop
 8019b9c:	40010000 	.word	0x40010000
 8019ba0:	40000400 	.word	0x40000400
 8019ba4:	40000800 	.word	0x40000800
 8019ba8:	40000c00 	.word	0x40000c00
 8019bac:	40010400 	.word	0x40010400
 8019bb0:	40014000 	.word	0x40014000
 8019bb4:	40001800 	.word	0x40001800

08019bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019bb8:	b480      	push	{r7}
 8019bba:	b087      	sub	sp, #28
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	60f8      	str	r0, [r7, #12]
 8019bc0:	60b9      	str	r1, [r7, #8]
 8019bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	6a1b      	ldr	r3, [r3, #32]
 8019bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	6a1b      	ldr	r3, [r3, #32]
 8019bce:	f023 0201 	bic.w	r2, r3, #1
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	699b      	ldr	r3, [r3, #24]
 8019bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8019bdc:	693b      	ldr	r3, [r7, #16]
 8019bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	011b      	lsls	r3, r3, #4
 8019be8:	693a      	ldr	r2, [r7, #16]
 8019bea:	4313      	orrs	r3, r2
 8019bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	f023 030a 	bic.w	r3, r3, #10
 8019bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8019bf6:	697a      	ldr	r2, [r7, #20]
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	4313      	orrs	r3, r2
 8019bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	693a      	ldr	r2, [r7, #16]
 8019c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	697a      	ldr	r2, [r7, #20]
 8019c08:	621a      	str	r2, [r3, #32]
}
 8019c0a:	bf00      	nop
 8019c0c:	371c      	adds	r7, #28
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c14:	4770      	bx	lr

08019c16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8019c16:	b480      	push	{r7}
 8019c18:	b087      	sub	sp, #28
 8019c1a:	af00      	add	r7, sp, #0
 8019c1c:	60f8      	str	r0, [r7, #12]
 8019c1e:	60b9      	str	r1, [r7, #8]
 8019c20:	607a      	str	r2, [r7, #4]
 8019c22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	6a1b      	ldr	r3, [r3, #32]
 8019c28:	f023 0210 	bic.w	r2, r3, #16
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	699b      	ldr	r3, [r3, #24]
 8019c34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	6a1b      	ldr	r3, [r3, #32]
 8019c3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8019c3c:	697b      	ldr	r3, [r7, #20]
 8019c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019c42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	021b      	lsls	r3, r3, #8
 8019c48:	697a      	ldr	r2, [r7, #20]
 8019c4a:	4313      	orrs	r3, r2
 8019c4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8019c4e:	697b      	ldr	r3, [r7, #20]
 8019c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	031b      	lsls	r3, r3, #12
 8019c5a:	b29b      	uxth	r3, r3
 8019c5c:	697a      	ldr	r2, [r7, #20]
 8019c5e:	4313      	orrs	r3, r2
 8019c60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019c62:	693b      	ldr	r3, [r7, #16]
 8019c64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8019c68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8019c6a:	68bb      	ldr	r3, [r7, #8]
 8019c6c:	011b      	lsls	r3, r3, #4
 8019c6e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8019c72:	693a      	ldr	r2, [r7, #16]
 8019c74:	4313      	orrs	r3, r2
 8019c76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	697a      	ldr	r2, [r7, #20]
 8019c7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	693a      	ldr	r2, [r7, #16]
 8019c82:	621a      	str	r2, [r3, #32]
}
 8019c84:	bf00      	nop
 8019c86:	371c      	adds	r7, #28
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8e:	4770      	bx	lr

08019c90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019c90:	b480      	push	{r7}
 8019c92:	b087      	sub	sp, #28
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	60f8      	str	r0, [r7, #12]
 8019c98:	60b9      	str	r1, [r7, #8]
 8019c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	6a1b      	ldr	r3, [r3, #32]
 8019ca0:	f023 0210 	bic.w	r2, r3, #16
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	699b      	ldr	r3, [r3, #24]
 8019cac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	6a1b      	ldr	r3, [r3, #32]
 8019cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8019cb4:	697b      	ldr	r3, [r7, #20]
 8019cb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019cba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	031b      	lsls	r3, r3, #12
 8019cc0:	697a      	ldr	r2, [r7, #20]
 8019cc2:	4313      	orrs	r3, r2
 8019cc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019cc6:	693b      	ldr	r3, [r7, #16]
 8019cc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8019ccc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8019cce:	68bb      	ldr	r3, [r7, #8]
 8019cd0:	011b      	lsls	r3, r3, #4
 8019cd2:	693a      	ldr	r2, [r7, #16]
 8019cd4:	4313      	orrs	r3, r2
 8019cd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	697a      	ldr	r2, [r7, #20]
 8019cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	693a      	ldr	r2, [r7, #16]
 8019ce2:	621a      	str	r2, [r3, #32]
}
 8019ce4:	bf00      	nop
 8019ce6:	371c      	adds	r7, #28
 8019ce8:	46bd      	mov	sp, r7
 8019cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cee:	4770      	bx	lr

08019cf0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8019cf0:	b480      	push	{r7}
 8019cf2:	b087      	sub	sp, #28
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	60f8      	str	r0, [r7, #12]
 8019cf8:	60b9      	str	r1, [r7, #8]
 8019cfa:	607a      	str	r2, [r7, #4]
 8019cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	6a1b      	ldr	r3, [r3, #32]
 8019d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	69db      	ldr	r3, [r3, #28]
 8019d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	6a1b      	ldr	r3, [r3, #32]
 8019d14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8019d16:	697b      	ldr	r3, [r7, #20]
 8019d18:	f023 0303 	bic.w	r3, r3, #3
 8019d1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8019d1e:	697a      	ldr	r2, [r7, #20]
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	4313      	orrs	r3, r2
 8019d24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019d2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	011b      	lsls	r3, r3, #4
 8019d32:	b2db      	uxtb	r3, r3
 8019d34:	697a      	ldr	r2, [r7, #20]
 8019d36:	4313      	orrs	r3, r2
 8019d38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8019d3a:	693b      	ldr	r3, [r7, #16]
 8019d3c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8019d40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8019d42:	68bb      	ldr	r3, [r7, #8]
 8019d44:	021b      	lsls	r3, r3, #8
 8019d46:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8019d4a:	693a      	ldr	r2, [r7, #16]
 8019d4c:	4313      	orrs	r3, r2
 8019d4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	697a      	ldr	r2, [r7, #20]
 8019d54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	693a      	ldr	r2, [r7, #16]
 8019d5a:	621a      	str	r2, [r3, #32]
}
 8019d5c:	bf00      	nop
 8019d5e:	371c      	adds	r7, #28
 8019d60:	46bd      	mov	sp, r7
 8019d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d66:	4770      	bx	lr

08019d68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8019d68:	b480      	push	{r7}
 8019d6a:	b087      	sub	sp, #28
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	60f8      	str	r0, [r7, #12]
 8019d70:	60b9      	str	r1, [r7, #8]
 8019d72:	607a      	str	r2, [r7, #4]
 8019d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	6a1b      	ldr	r3, [r3, #32]
 8019d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	69db      	ldr	r3, [r3, #28]
 8019d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	6a1b      	ldr	r3, [r3, #32]
 8019d8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8019d8e:	697b      	ldr	r3, [r7, #20]
 8019d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019d94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	021b      	lsls	r3, r3, #8
 8019d9a:	697a      	ldr	r2, [r7, #20]
 8019d9c:	4313      	orrs	r3, r2
 8019d9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8019da0:	697b      	ldr	r3, [r7, #20]
 8019da2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019da6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8019da8:	683b      	ldr	r3, [r7, #0]
 8019daa:	031b      	lsls	r3, r3, #12
 8019dac:	b29b      	uxth	r3, r3
 8019dae:	697a      	ldr	r2, [r7, #20]
 8019db0:	4313      	orrs	r3, r2
 8019db2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8019db4:	693b      	ldr	r3, [r7, #16]
 8019db6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8019dba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8019dbc:	68bb      	ldr	r3, [r7, #8]
 8019dbe:	031b      	lsls	r3, r3, #12
 8019dc0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8019dc4:	693a      	ldr	r2, [r7, #16]
 8019dc6:	4313      	orrs	r3, r2
 8019dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	697a      	ldr	r2, [r7, #20]
 8019dce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	693a      	ldr	r2, [r7, #16]
 8019dd4:	621a      	str	r2, [r3, #32]
}
 8019dd6:	bf00      	nop
 8019dd8:	371c      	adds	r7, #28
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de0:	4770      	bx	lr

08019de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8019de2:	b480      	push	{r7}
 8019de4:	b085      	sub	sp, #20
 8019de6:	af00      	add	r7, sp, #0
 8019de8:	6078      	str	r0, [r7, #4]
 8019dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	689b      	ldr	r3, [r3, #8]
 8019df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8019dfa:	683a      	ldr	r2, [r7, #0]
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	4313      	orrs	r3, r2
 8019e00:	f043 0307 	orr.w	r3, r3, #7
 8019e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	68fa      	ldr	r2, [r7, #12]
 8019e0a:	609a      	str	r2, [r3, #8]
}
 8019e0c:	bf00      	nop
 8019e0e:	3714      	adds	r7, #20
 8019e10:	46bd      	mov	sp, r7
 8019e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e16:	4770      	bx	lr

08019e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8019e18:	b480      	push	{r7}
 8019e1a:	b087      	sub	sp, #28
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	60f8      	str	r0, [r7, #12]
 8019e20:	60b9      	str	r1, [r7, #8]
 8019e22:	607a      	str	r2, [r7, #4]
 8019e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	689b      	ldr	r3, [r3, #8]
 8019e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019e2c:	697b      	ldr	r3, [r7, #20]
 8019e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8019e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8019e34:	683b      	ldr	r3, [r7, #0]
 8019e36:	021a      	lsls	r2, r3, #8
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	431a      	orrs	r2, r3
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	4313      	orrs	r3, r2
 8019e40:	697a      	ldr	r2, [r7, #20]
 8019e42:	4313      	orrs	r3, r2
 8019e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	697a      	ldr	r2, [r7, #20]
 8019e4a:	609a      	str	r2, [r3, #8]
}
 8019e4c:	bf00      	nop
 8019e4e:	371c      	adds	r7, #28
 8019e50:	46bd      	mov	sp, r7
 8019e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e56:	4770      	bx	lr

08019e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8019e58:	b480      	push	{r7}
 8019e5a:	b087      	sub	sp, #28
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	60f8      	str	r0, [r7, #12]
 8019e60:	60b9      	str	r1, [r7, #8]
 8019e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8019e64:	68bb      	ldr	r3, [r7, #8]
 8019e66:	f003 031f 	and.w	r3, r3, #31
 8019e6a:	2201      	movs	r2, #1
 8019e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8019e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	6a1a      	ldr	r2, [r3, #32]
 8019e76:	697b      	ldr	r3, [r7, #20]
 8019e78:	43db      	mvns	r3, r3
 8019e7a:	401a      	ands	r2, r3
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	6a1a      	ldr	r2, [r3, #32]
 8019e84:	68bb      	ldr	r3, [r7, #8]
 8019e86:	f003 031f 	and.w	r3, r3, #31
 8019e8a:	6879      	ldr	r1, [r7, #4]
 8019e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8019e90:	431a      	orrs	r2, r3
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	621a      	str	r2, [r3, #32]
}
 8019e96:	bf00      	nop
 8019e98:	371c      	adds	r7, #28
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea0:	4770      	bx	lr
	...

08019ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8019ea4:	b480      	push	{r7}
 8019ea6:	b085      	sub	sp, #20
 8019ea8:	af00      	add	r7, sp, #0
 8019eaa:	6078      	str	r0, [r7, #4]
 8019eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019eb4:	2b01      	cmp	r3, #1
 8019eb6:	d101      	bne.n	8019ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8019eb8:	2302      	movs	r3, #2
 8019eba:	e05a      	b.n	8019f72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2201      	movs	r2, #1
 8019ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2202      	movs	r2, #2
 8019ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	685b      	ldr	r3, [r3, #4]
 8019ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	689b      	ldr	r3, [r3, #8]
 8019eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8019ee4:	683b      	ldr	r3, [r7, #0]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	68fa      	ldr	r2, [r7, #12]
 8019eea:	4313      	orrs	r3, r2
 8019eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	68fa      	ldr	r2, [r7, #12]
 8019ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	4a21      	ldr	r2, [pc, #132]	; (8019f80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8019efc:	4293      	cmp	r3, r2
 8019efe:	d022      	beq.n	8019f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019f08:	d01d      	beq.n	8019f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	4a1d      	ldr	r2, [pc, #116]	; (8019f84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8019f10:	4293      	cmp	r3, r2
 8019f12:	d018      	beq.n	8019f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	4a1b      	ldr	r2, [pc, #108]	; (8019f88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8019f1a:	4293      	cmp	r3, r2
 8019f1c:	d013      	beq.n	8019f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	4a1a      	ldr	r2, [pc, #104]	; (8019f8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8019f24:	4293      	cmp	r3, r2
 8019f26:	d00e      	beq.n	8019f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	4a18      	ldr	r2, [pc, #96]	; (8019f90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8019f2e:	4293      	cmp	r3, r2
 8019f30:	d009      	beq.n	8019f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	4a17      	ldr	r2, [pc, #92]	; (8019f94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8019f38:	4293      	cmp	r3, r2
 8019f3a:	d004      	beq.n	8019f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	4a15      	ldr	r2, [pc, #84]	; (8019f98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8019f42:	4293      	cmp	r3, r2
 8019f44:	d10c      	bne.n	8019f60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8019f46:	68bb      	ldr	r3, [r7, #8]
 8019f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	685b      	ldr	r3, [r3, #4]
 8019f52:	68ba      	ldr	r2, [r7, #8]
 8019f54:	4313      	orrs	r3, r2
 8019f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	68ba      	ldr	r2, [r7, #8]
 8019f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	2201      	movs	r2, #1
 8019f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8019f70:	2300      	movs	r3, #0
}
 8019f72:	4618      	mov	r0, r3
 8019f74:	3714      	adds	r7, #20
 8019f76:	46bd      	mov	sp, r7
 8019f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f7c:	4770      	bx	lr
 8019f7e:	bf00      	nop
 8019f80:	40010000 	.word	0x40010000
 8019f84:	40000400 	.word	0x40000400
 8019f88:	40000800 	.word	0x40000800
 8019f8c:	40000c00 	.word	0x40000c00
 8019f90:	40010400 	.word	0x40010400
 8019f94:	40014000 	.word	0x40014000
 8019f98:	40001800 	.word	0x40001800

08019f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8019f9c:	b480      	push	{r7}
 8019f9e:	b083      	sub	sp, #12
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8019fa4:	bf00      	nop
 8019fa6:	370c      	adds	r7, #12
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fae:	4770      	bx	lr

08019fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8019fb0:	b480      	push	{r7}
 8019fb2:	b083      	sub	sp, #12
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8019fb8:	bf00      	nop
 8019fba:	370c      	adds	r7, #12
 8019fbc:	46bd      	mov	sp, r7
 8019fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc2:	4770      	bx	lr

08019fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b082      	sub	sp, #8
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d101      	bne.n	8019fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019fd2:	2301      	movs	r3, #1
 8019fd4:	e03f      	b.n	801a056 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019fdc:	b2db      	uxtb	r3, r3
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d106      	bne.n	8019ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8019fea:	6878      	ldr	r0, [r7, #4]
 8019fec:	f7f9 fc16 	bl	801381c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	2224      	movs	r2, #36	; 0x24
 8019ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	68da      	ldr	r2, [r3, #12]
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801a006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801a008:	6878      	ldr	r0, [r7, #4]
 801a00a:	f000 fe1f 	bl	801ac4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	691a      	ldr	r2, [r3, #16]
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801a01c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	695a      	ldr	r2, [r3, #20]
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801a02c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	68da      	ldr	r2, [r3, #12]
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a03c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	2200      	movs	r2, #0
 801a042:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	2220      	movs	r2, #32
 801a048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	2220      	movs	r2, #32
 801a050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801a054:	2300      	movs	r3, #0
}
 801a056:	4618      	mov	r0, r3
 801a058:	3708      	adds	r7, #8
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd80      	pop	{r7, pc}

0801a05e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a05e:	b580      	push	{r7, lr}
 801a060:	b08a      	sub	sp, #40	; 0x28
 801a062:	af02      	add	r7, sp, #8
 801a064:	60f8      	str	r0, [r7, #12]
 801a066:	60b9      	str	r1, [r7, #8]
 801a068:	603b      	str	r3, [r7, #0]
 801a06a:	4613      	mov	r3, r2
 801a06c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801a06e:	2300      	movs	r3, #0
 801a070:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a078:	b2db      	uxtb	r3, r3
 801a07a:	2b20      	cmp	r3, #32
 801a07c:	d17c      	bne.n	801a178 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801a07e:	68bb      	ldr	r3, [r7, #8]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d002      	beq.n	801a08a <HAL_UART_Transmit+0x2c>
 801a084:	88fb      	ldrh	r3, [r7, #6]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d101      	bne.n	801a08e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801a08a:	2301      	movs	r3, #1
 801a08c:	e075      	b.n	801a17a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a094:	2b01      	cmp	r3, #1
 801a096:	d101      	bne.n	801a09c <HAL_UART_Transmit+0x3e>
 801a098:	2302      	movs	r3, #2
 801a09a:	e06e      	b.n	801a17a <HAL_UART_Transmit+0x11c>
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	2201      	movs	r2, #1
 801a0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	2221      	movs	r2, #33	; 0x21
 801a0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801a0b2:	f7f9 fd9f 	bl	8013bf4 <HAL_GetTick>
 801a0b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	88fa      	ldrh	r2, [r7, #6]
 801a0bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	88fa      	ldrh	r2, [r7, #6]
 801a0c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	689b      	ldr	r3, [r3, #8]
 801a0c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a0cc:	d108      	bne.n	801a0e0 <HAL_UART_Transmit+0x82>
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	691b      	ldr	r3, [r3, #16]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d104      	bne.n	801a0e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801a0da:	68bb      	ldr	r3, [r7, #8]
 801a0dc:	61bb      	str	r3, [r7, #24]
 801a0de:	e003      	b.n	801a0e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801a0e0:	68bb      	ldr	r3, [r7, #8]
 801a0e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801a0f0:	e02a      	b.n	801a148 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801a0f2:	683b      	ldr	r3, [r7, #0]
 801a0f4:	9300      	str	r3, [sp, #0]
 801a0f6:	697b      	ldr	r3, [r7, #20]
 801a0f8:	2200      	movs	r2, #0
 801a0fa:	2180      	movs	r1, #128	; 0x80
 801a0fc:	68f8      	ldr	r0, [r7, #12]
 801a0fe:	f000 fb63 	bl	801a7c8 <UART_WaitOnFlagUntilTimeout>
 801a102:	4603      	mov	r3, r0
 801a104:	2b00      	cmp	r3, #0
 801a106:	d001      	beq.n	801a10c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801a108:	2303      	movs	r3, #3
 801a10a:	e036      	b.n	801a17a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801a10c:	69fb      	ldr	r3, [r7, #28]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d10b      	bne.n	801a12a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801a112:	69bb      	ldr	r3, [r7, #24]
 801a114:	881b      	ldrh	r3, [r3, #0]
 801a116:	461a      	mov	r2, r3
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a120:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801a122:	69bb      	ldr	r3, [r7, #24]
 801a124:	3302      	adds	r3, #2
 801a126:	61bb      	str	r3, [r7, #24]
 801a128:	e007      	b.n	801a13a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801a12a:	69fb      	ldr	r3, [r7, #28]
 801a12c:	781a      	ldrb	r2, [r3, #0]
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801a134:	69fb      	ldr	r3, [r7, #28]
 801a136:	3301      	adds	r3, #1
 801a138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a13e:	b29b      	uxth	r3, r3
 801a140:	3b01      	subs	r3, #1
 801a142:	b29a      	uxth	r2, r3
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d1cf      	bne.n	801a0f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801a152:	683b      	ldr	r3, [r7, #0]
 801a154:	9300      	str	r3, [sp, #0]
 801a156:	697b      	ldr	r3, [r7, #20]
 801a158:	2200      	movs	r2, #0
 801a15a:	2140      	movs	r1, #64	; 0x40
 801a15c:	68f8      	ldr	r0, [r7, #12]
 801a15e:	f000 fb33 	bl	801a7c8 <UART_WaitOnFlagUntilTimeout>
 801a162:	4603      	mov	r3, r0
 801a164:	2b00      	cmp	r3, #0
 801a166:	d001      	beq.n	801a16c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801a168:	2303      	movs	r3, #3
 801a16a:	e006      	b.n	801a17a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	2220      	movs	r2, #32
 801a170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801a174:	2300      	movs	r3, #0
 801a176:	e000      	b.n	801a17a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801a178:	2302      	movs	r3, #2
  }
}
 801a17a:	4618      	mov	r0, r3
 801a17c:	3720      	adds	r7, #32
 801a17e:	46bd      	mov	sp, r7
 801a180:	bd80      	pop	{r7, pc}

0801a182 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a182:	b480      	push	{r7}
 801a184:	b085      	sub	sp, #20
 801a186:	af00      	add	r7, sp, #0
 801a188:	60f8      	str	r0, [r7, #12]
 801a18a:	60b9      	str	r1, [r7, #8]
 801a18c:	4613      	mov	r3, r2
 801a18e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a196:	b2db      	uxtb	r3, r3
 801a198:	2b20      	cmp	r3, #32
 801a19a:	d130      	bne.n	801a1fe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d002      	beq.n	801a1a8 <HAL_UART_Transmit_IT+0x26>
 801a1a2:	88fb      	ldrh	r3, [r7, #6]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d101      	bne.n	801a1ac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801a1a8:	2301      	movs	r3, #1
 801a1aa:	e029      	b.n	801a200 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a1b2:	2b01      	cmp	r3, #1
 801a1b4:	d101      	bne.n	801a1ba <HAL_UART_Transmit_IT+0x38>
 801a1b6:	2302      	movs	r3, #2
 801a1b8:	e022      	b.n	801a200 <HAL_UART_Transmit_IT+0x7e>
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	2201      	movs	r2, #1
 801a1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	68ba      	ldr	r2, [r7, #8]
 801a1c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	88fa      	ldrh	r2, [r7, #6]
 801a1cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	88fa      	ldrh	r2, [r7, #6]
 801a1d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	2221      	movs	r2, #33	; 0x21
 801a1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	2200      	movs	r2, #0
 801a1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	68da      	ldr	r2, [r3, #12]
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801a1f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	e000      	b.n	801a200 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 801a1fe:	2302      	movs	r3, #2
  }
}
 801a200:	4618      	mov	r0, r3
 801a202:	3714      	adds	r7, #20
 801a204:	46bd      	mov	sp, r7
 801a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20a:	4770      	bx	lr

0801a20c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a20c:	b580      	push	{r7, lr}
 801a20e:	b084      	sub	sp, #16
 801a210:	af00      	add	r7, sp, #0
 801a212:	60f8      	str	r0, [r7, #12]
 801a214:	60b9      	str	r1, [r7, #8]
 801a216:	4613      	mov	r3, r2
 801a218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a220:	b2db      	uxtb	r3, r3
 801a222:	2b20      	cmp	r3, #32
 801a224:	d11d      	bne.n	801a262 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801a226:	68bb      	ldr	r3, [r7, #8]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d002      	beq.n	801a232 <HAL_UART_Receive_IT+0x26>
 801a22c:	88fb      	ldrh	r3, [r7, #6]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d101      	bne.n	801a236 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801a232:	2301      	movs	r3, #1
 801a234:	e016      	b.n	801a264 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a23c:	2b01      	cmp	r3, #1
 801a23e:	d101      	bne.n	801a244 <HAL_UART_Receive_IT+0x38>
 801a240:	2302      	movs	r3, #2
 801a242:	e00f      	b.n	801a264 <HAL_UART_Receive_IT+0x58>
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	2201      	movs	r2, #1
 801a248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	2200      	movs	r2, #0
 801a250:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801a252:	88fb      	ldrh	r3, [r7, #6]
 801a254:	461a      	mov	r2, r3
 801a256:	68b9      	ldr	r1, [r7, #8]
 801a258:	68f8      	ldr	r0, [r7, #12]
 801a25a:	f000 fb23 	bl	801a8a4 <UART_Start_Receive_IT>
 801a25e:	4603      	mov	r3, r0
 801a260:	e000      	b.n	801a264 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 801a262:	2302      	movs	r3, #2
  }
}
 801a264:	4618      	mov	r0, r3
 801a266:	3710      	adds	r7, #16
 801a268:	46bd      	mov	sp, r7
 801a26a:	bd80      	pop	{r7, pc}

0801a26c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b0ba      	sub	sp, #232	; 0xe8
 801a270:	af00      	add	r7, sp, #0
 801a272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	68db      	ldr	r3, [r3, #12]
 801a284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	695b      	ldr	r3, [r3, #20]
 801a28e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801a292:	2300      	movs	r3, #0
 801a294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801a298:	2300      	movs	r3, #0
 801a29a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801a29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a2a2:	f003 030f 	and.w	r3, r3, #15
 801a2a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801a2aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d10f      	bne.n	801a2d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801a2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a2b6:	f003 0320 	and.w	r3, r3, #32
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d009      	beq.n	801a2d2 <HAL_UART_IRQHandler+0x66>
 801a2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a2c2:	f003 0320 	and.w	r3, r3, #32
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d003      	beq.n	801a2d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f000 fc03 	bl	801aad6 <UART_Receive_IT>
      return;
 801a2d0:	e256      	b.n	801a780 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801a2d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	f000 80de 	beq.w	801a498 <HAL_UART_IRQHandler+0x22c>
 801a2dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a2e0:	f003 0301 	and.w	r3, r3, #1
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d106      	bne.n	801a2f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801a2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a2ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	f000 80d1 	beq.w	801a498 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801a2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a2fa:	f003 0301 	and.w	r3, r3, #1
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d00b      	beq.n	801a31a <HAL_UART_IRQHandler+0xae>
 801a302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d005      	beq.n	801a31a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a312:	f043 0201 	orr.w	r2, r3, #1
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801a31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a31e:	f003 0304 	and.w	r3, r3, #4
 801a322:	2b00      	cmp	r3, #0
 801a324:	d00b      	beq.n	801a33e <HAL_UART_IRQHandler+0xd2>
 801a326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a32a:	f003 0301 	and.w	r3, r3, #1
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d005      	beq.n	801a33e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a336:	f043 0202 	orr.w	r2, r3, #2
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801a33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a342:	f003 0302 	and.w	r3, r3, #2
 801a346:	2b00      	cmp	r3, #0
 801a348:	d00b      	beq.n	801a362 <HAL_UART_IRQHandler+0xf6>
 801a34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a34e:	f003 0301 	and.w	r3, r3, #1
 801a352:	2b00      	cmp	r3, #0
 801a354:	d005      	beq.n	801a362 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a35a:	f043 0204 	orr.w	r2, r3, #4
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801a362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a366:	f003 0308 	and.w	r3, r3, #8
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d011      	beq.n	801a392 <HAL_UART_IRQHandler+0x126>
 801a36e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a372:	f003 0320 	and.w	r3, r3, #32
 801a376:	2b00      	cmp	r3, #0
 801a378:	d105      	bne.n	801a386 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801a37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a37e:	f003 0301 	and.w	r3, r3, #1
 801a382:	2b00      	cmp	r3, #0
 801a384:	d005      	beq.n	801a392 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a38a:	f043 0208 	orr.w	r2, r3, #8
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a396:	2b00      	cmp	r3, #0
 801a398:	f000 81ed 	beq.w	801a776 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801a39c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a3a0:	f003 0320 	and.w	r3, r3, #32
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d008      	beq.n	801a3ba <HAL_UART_IRQHandler+0x14e>
 801a3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a3ac:	f003 0320 	and.w	r3, r3, #32
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d002      	beq.n	801a3ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801a3b4:	6878      	ldr	r0, [r7, #4]
 801a3b6:	f000 fb8e 	bl	801aad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	695b      	ldr	r3, [r3, #20]
 801a3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a3c4:	2b40      	cmp	r3, #64	; 0x40
 801a3c6:	bf0c      	ite	eq
 801a3c8:	2301      	moveq	r3, #1
 801a3ca:	2300      	movne	r3, #0
 801a3cc:	b2db      	uxtb	r3, r3
 801a3ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3d6:	f003 0308 	and.w	r3, r3, #8
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d103      	bne.n	801a3e6 <HAL_UART_IRQHandler+0x17a>
 801a3de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d04f      	beq.n	801a486 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801a3e6:	6878      	ldr	r0, [r7, #4]
 801a3e8:	f000 fa96 	bl	801a918 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	695b      	ldr	r3, [r3, #20]
 801a3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a3f6:	2b40      	cmp	r3, #64	; 0x40
 801a3f8:	d141      	bne.n	801a47e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	3314      	adds	r3, #20
 801a400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a408:	e853 3f00 	ldrex	r3, [r3]
 801a40c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801a410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	3314      	adds	r3, #20
 801a422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801a426:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801a42a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a42e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801a432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801a436:	e841 2300 	strex	r3, r2, [r1]
 801a43a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801a43e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a442:	2b00      	cmp	r3, #0
 801a444:	d1d9      	bne.n	801a3fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d013      	beq.n	801a476 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a452:	4a7d      	ldr	r2, [pc, #500]	; (801a648 <HAL_UART_IRQHandler+0x3dc>)
 801a454:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a45a:	4618      	mov	r0, r3
 801a45c:	f7fa fb96 	bl	8014b8c <HAL_DMA_Abort_IT>
 801a460:	4603      	mov	r3, r0
 801a462:	2b00      	cmp	r3, #0
 801a464:	d016      	beq.n	801a494 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a46c:	687a      	ldr	r2, [r7, #4]
 801a46e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801a470:	4610      	mov	r0, r2
 801a472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a474:	e00e      	b.n	801a494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	f000 f990 	bl	801a79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a47c:	e00a      	b.n	801a494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a47e:	6878      	ldr	r0, [r7, #4]
 801a480:	f000 f98c 	bl	801a79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a484:	e006      	b.n	801a494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801a486:	6878      	ldr	r0, [r7, #4]
 801a488:	f000 f988 	bl	801a79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	2200      	movs	r2, #0
 801a490:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801a492:	e170      	b.n	801a776 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a494:	bf00      	nop
    return;
 801a496:	e16e      	b.n	801a776 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a49c:	2b01      	cmp	r3, #1
 801a49e:	f040 814a 	bne.w	801a736 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801a4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a4a6:	f003 0310 	and.w	r3, r3, #16
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	f000 8143 	beq.w	801a736 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801a4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a4b4:	f003 0310 	and.w	r3, r3, #16
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	f000 813c 	beq.w	801a736 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801a4be:	2300      	movs	r3, #0
 801a4c0:	60bb      	str	r3, [r7, #8]
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	60bb      	str	r3, [r7, #8]
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	685b      	ldr	r3, [r3, #4]
 801a4d0:	60bb      	str	r3, [r7, #8]
 801a4d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	695b      	ldr	r3, [r3, #20]
 801a4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a4de:	2b40      	cmp	r3, #64	; 0x40
 801a4e0:	f040 80b4 	bne.w	801a64c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	685b      	ldr	r3, [r3, #4]
 801a4ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801a4f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	f000 8140 	beq.w	801a77a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801a4fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801a502:	429a      	cmp	r2, r3
 801a504:	f080 8139 	bcs.w	801a77a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801a50e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a514:	69db      	ldr	r3, [r3, #28]
 801a516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a51a:	f000 8088 	beq.w	801a62e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	330c      	adds	r3, #12
 801a524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a52c:	e853 3f00 	ldrex	r3, [r3]
 801a530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801a534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a53c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	330c      	adds	r3, #12
 801a546:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801a54a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801a54e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a552:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801a556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801a55a:	e841 2300 	strex	r3, r2, [r1]
 801a55e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801a562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a566:	2b00      	cmp	r3, #0
 801a568:	d1d9      	bne.n	801a51e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	3314      	adds	r3, #20
 801a570:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a574:	e853 3f00 	ldrex	r3, [r3]
 801a578:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801a57a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a57c:	f023 0301 	bic.w	r3, r3, #1
 801a580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	3314      	adds	r3, #20
 801a58a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801a58e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801a592:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a594:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801a596:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801a59a:	e841 2300 	strex	r3, r2, [r1]
 801a59e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801a5a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d1e1      	bne.n	801a56a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	3314      	adds	r3, #20
 801a5ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a5b0:	e853 3f00 	ldrex	r3, [r3]
 801a5b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801a5b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a5b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a5bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	3314      	adds	r3, #20
 801a5c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801a5ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 801a5cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a5ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801a5d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a5d2:	e841 2300 	strex	r3, r2, [r1]
 801a5d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801a5d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d1e3      	bne.n	801a5a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	2220      	movs	r2, #32
 801a5e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	330c      	adds	r3, #12
 801a5f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5f6:	e853 3f00 	ldrex	r3, [r3]
 801a5fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801a5fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5fe:	f023 0310 	bic.w	r3, r3, #16
 801a602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	330c      	adds	r3, #12
 801a60c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801a610:	65ba      	str	r2, [r7, #88]	; 0x58
 801a612:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a614:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a616:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a618:	e841 2300 	strex	r3, r2, [r1]
 801a61c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801a61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a620:	2b00      	cmp	r3, #0
 801a622:	d1e3      	bne.n	801a5ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a628:	4618      	mov	r0, r3
 801a62a:	f7fa fa3f 	bl	8014aac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801a636:	b29b      	uxth	r3, r3
 801a638:	1ad3      	subs	r3, r2, r3
 801a63a:	b29b      	uxth	r3, r3
 801a63c:	4619      	mov	r1, r3
 801a63e:	6878      	ldr	r0, [r7, #4]
 801a640:	f000 f8b6 	bl	801a7b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801a644:	e099      	b.n	801a77a <HAL_UART_IRQHandler+0x50e>
 801a646:	bf00      	nop
 801a648:	0801a9df 	.word	0x0801a9df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801a654:	b29b      	uxth	r3, r3
 801a656:	1ad3      	subs	r3, r2, r3
 801a658:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801a660:	b29b      	uxth	r3, r3
 801a662:	2b00      	cmp	r3, #0
 801a664:	f000 808b 	beq.w	801a77e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801a668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	f000 8086 	beq.w	801a77e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	330c      	adds	r3, #12
 801a678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a67c:	e853 3f00 	ldrex	r3, [r3]
 801a680:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801a682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801a688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	330c      	adds	r3, #12
 801a692:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801a696:	647a      	str	r2, [r7, #68]	; 0x44
 801a698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a69a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a69c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a69e:	e841 2300 	strex	r3, r2, [r1]
 801a6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801a6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d1e3      	bne.n	801a672 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	3314      	adds	r3, #20
 801a6b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6b4:	e853 3f00 	ldrex	r3, [r3]
 801a6b8:	623b      	str	r3, [r7, #32]
   return(result);
 801a6ba:	6a3b      	ldr	r3, [r7, #32]
 801a6bc:	f023 0301 	bic.w	r3, r3, #1
 801a6c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	3314      	adds	r3, #20
 801a6ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801a6ce:	633a      	str	r2, [r7, #48]	; 0x30
 801a6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a6d6:	e841 2300 	strex	r3, r2, [r1]
 801a6da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d1e3      	bne.n	801a6aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	2220      	movs	r2, #32
 801a6e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	330c      	adds	r3, #12
 801a6f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6f8:	693b      	ldr	r3, [r7, #16]
 801a6fa:	e853 3f00 	ldrex	r3, [r3]
 801a6fe:	60fb      	str	r3, [r7, #12]
   return(result);
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	f023 0310 	bic.w	r3, r3, #16
 801a706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	330c      	adds	r3, #12
 801a710:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801a714:	61fa      	str	r2, [r7, #28]
 801a716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a718:	69b9      	ldr	r1, [r7, #24]
 801a71a:	69fa      	ldr	r2, [r7, #28]
 801a71c:	e841 2300 	strex	r3, r2, [r1]
 801a720:	617b      	str	r3, [r7, #20]
   return(result);
 801a722:	697b      	ldr	r3, [r7, #20]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d1e3      	bne.n	801a6f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801a728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801a72c:	4619      	mov	r1, r3
 801a72e:	6878      	ldr	r0, [r7, #4]
 801a730:	f000 f83e 	bl	801a7b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801a734:	e023      	b.n	801a77e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801a736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d009      	beq.n	801a756 <HAL_UART_IRQHandler+0x4ea>
 801a742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d003      	beq.n	801a756 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801a74e:	6878      	ldr	r0, [r7, #4]
 801a750:	f000 f959 	bl	801aa06 <UART_Transmit_IT>
    return;
 801a754:	e014      	b.n	801a780 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801a756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a75a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d00e      	beq.n	801a780 <HAL_UART_IRQHandler+0x514>
 801a762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d008      	beq.n	801a780 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801a76e:	6878      	ldr	r0, [r7, #4]
 801a770:	f000 f999 	bl	801aaa6 <UART_EndTransmit_IT>
    return;
 801a774:	e004      	b.n	801a780 <HAL_UART_IRQHandler+0x514>
    return;
 801a776:	bf00      	nop
 801a778:	e002      	b.n	801a780 <HAL_UART_IRQHandler+0x514>
      return;
 801a77a:	bf00      	nop
 801a77c:	e000      	b.n	801a780 <HAL_UART_IRQHandler+0x514>
      return;
 801a77e:	bf00      	nop
  }
}
 801a780:	37e8      	adds	r7, #232	; 0xe8
 801a782:	46bd      	mov	sp, r7
 801a784:	bd80      	pop	{r7, pc}
 801a786:	bf00      	nop

0801a788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a788:	b480      	push	{r7}
 801a78a:	b083      	sub	sp, #12
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801a790:	bf00      	nop
 801a792:	370c      	adds	r7, #12
 801a794:	46bd      	mov	sp, r7
 801a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a79a:	4770      	bx	lr

0801a79c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801a79c:	b480      	push	{r7}
 801a79e:	b083      	sub	sp, #12
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801a7a4:	bf00      	nop
 801a7a6:	370c      	adds	r7, #12
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ae:	4770      	bx	lr

0801a7b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a7b0:	b480      	push	{r7}
 801a7b2:	b083      	sub	sp, #12
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	6078      	str	r0, [r7, #4]
 801a7b8:	460b      	mov	r3, r1
 801a7ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a7bc:	bf00      	nop
 801a7be:	370c      	adds	r7, #12
 801a7c0:	46bd      	mov	sp, r7
 801a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c6:	4770      	bx	lr

0801a7c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	b090      	sub	sp, #64	; 0x40
 801a7cc:	af00      	add	r7, sp, #0
 801a7ce:	60f8      	str	r0, [r7, #12]
 801a7d0:	60b9      	str	r1, [r7, #8]
 801a7d2:	603b      	str	r3, [r7, #0]
 801a7d4:	4613      	mov	r3, r2
 801a7d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a7d8:	e050      	b.n	801a87c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a7da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7e0:	d04c      	beq.n	801a87c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801a7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d007      	beq.n	801a7f8 <UART_WaitOnFlagUntilTimeout+0x30>
 801a7e8:	f7f9 fa04 	bl	8013bf4 <HAL_GetTick>
 801a7ec:	4602      	mov	r2, r0
 801a7ee:	683b      	ldr	r3, [r7, #0]
 801a7f0:	1ad3      	subs	r3, r2, r3
 801a7f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a7f4:	429a      	cmp	r2, r3
 801a7f6:	d241      	bcs.n	801a87c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	330c      	adds	r3, #12
 801a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a802:	e853 3f00 	ldrex	r3, [r3]
 801a806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a80a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801a80e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	330c      	adds	r3, #12
 801a816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a818:	637a      	str	r2, [r7, #52]	; 0x34
 801a81a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a81c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a820:	e841 2300 	strex	r3, r2, [r1]
 801a824:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d1e5      	bne.n	801a7f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	3314      	adds	r3, #20
 801a832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	e853 3f00 	ldrex	r3, [r3]
 801a83a:	613b      	str	r3, [r7, #16]
   return(result);
 801a83c:	693b      	ldr	r3, [r7, #16]
 801a83e:	f023 0301 	bic.w	r3, r3, #1
 801a842:	63bb      	str	r3, [r7, #56]	; 0x38
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	3314      	adds	r3, #20
 801a84a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a84c:	623a      	str	r2, [r7, #32]
 801a84e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a850:	69f9      	ldr	r1, [r7, #28]
 801a852:	6a3a      	ldr	r2, [r7, #32]
 801a854:	e841 2300 	strex	r3, r2, [r1]
 801a858:	61bb      	str	r3, [r7, #24]
   return(result);
 801a85a:	69bb      	ldr	r3, [r7, #24]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d1e5      	bne.n	801a82c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	2220      	movs	r2, #32
 801a864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	2220      	movs	r2, #32
 801a86c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	2200      	movs	r2, #0
 801a874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801a878:	2303      	movs	r3, #3
 801a87a:	e00f      	b.n	801a89c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	681a      	ldr	r2, [r3, #0]
 801a882:	68bb      	ldr	r3, [r7, #8]
 801a884:	4013      	ands	r3, r2
 801a886:	68ba      	ldr	r2, [r7, #8]
 801a888:	429a      	cmp	r2, r3
 801a88a:	bf0c      	ite	eq
 801a88c:	2301      	moveq	r3, #1
 801a88e:	2300      	movne	r3, #0
 801a890:	b2db      	uxtb	r3, r3
 801a892:	461a      	mov	r2, r3
 801a894:	79fb      	ldrb	r3, [r7, #7]
 801a896:	429a      	cmp	r2, r3
 801a898:	d09f      	beq.n	801a7da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801a89a:	2300      	movs	r3, #0
}
 801a89c:	4618      	mov	r0, r3
 801a89e:	3740      	adds	r7, #64	; 0x40
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	bd80      	pop	{r7, pc}

0801a8a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a8a4:	b480      	push	{r7}
 801a8a6:	b085      	sub	sp, #20
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	60f8      	str	r0, [r7, #12]
 801a8ac:	60b9      	str	r1, [r7, #8]
 801a8ae:	4613      	mov	r3, r2
 801a8b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	68ba      	ldr	r2, [r7, #8]
 801a8b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801a8b8:	68fb      	ldr	r3, [r7, #12]
 801a8ba:	88fa      	ldrh	r2, [r7, #6]
 801a8bc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	88fa      	ldrh	r2, [r7, #6]
 801a8c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	2222      	movs	r2, #34	; 0x22
 801a8ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	2200      	movs	r2, #0
 801a8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	68da      	ldr	r2, [r3, #12]
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a8e8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	695a      	ldr	r2, [r3, #20]
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	f042 0201 	orr.w	r2, r2, #1
 801a8f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	68da      	ldr	r2, [r3, #12]
 801a900:	68fb      	ldr	r3, [r7, #12]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	f042 0220 	orr.w	r2, r2, #32
 801a908:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801a90a:	2300      	movs	r3, #0
}
 801a90c:	4618      	mov	r0, r3
 801a90e:	3714      	adds	r7, #20
 801a910:	46bd      	mov	sp, r7
 801a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a916:	4770      	bx	lr

0801a918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a918:	b480      	push	{r7}
 801a91a:	b095      	sub	sp, #84	; 0x54
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	330c      	adds	r3, #12
 801a926:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a92a:	e853 3f00 	ldrex	r3, [r3]
 801a92e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a932:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801a936:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	330c      	adds	r3, #12
 801a93e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a940:	643a      	str	r2, [r7, #64]	; 0x40
 801a942:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a944:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a948:	e841 2300 	strex	r3, r2, [r1]
 801a94c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a950:	2b00      	cmp	r3, #0
 801a952:	d1e5      	bne.n	801a920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	3314      	adds	r3, #20
 801a95a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a95c:	6a3b      	ldr	r3, [r7, #32]
 801a95e:	e853 3f00 	ldrex	r3, [r3]
 801a962:	61fb      	str	r3, [r7, #28]
   return(result);
 801a964:	69fb      	ldr	r3, [r7, #28]
 801a966:	f023 0301 	bic.w	r3, r3, #1
 801a96a:	64bb      	str	r3, [r7, #72]	; 0x48
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	3314      	adds	r3, #20
 801a972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a974:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a97a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a97c:	e841 2300 	strex	r3, r2, [r1]
 801a980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a984:	2b00      	cmp	r3, #0
 801a986:	d1e5      	bne.n	801a954 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a98c:	2b01      	cmp	r3, #1
 801a98e:	d119      	bne.n	801a9c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	330c      	adds	r3, #12
 801a996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	e853 3f00 	ldrex	r3, [r3]
 801a99e:	60bb      	str	r3, [r7, #8]
   return(result);
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	f023 0310 	bic.w	r3, r3, #16
 801a9a6:	647b      	str	r3, [r7, #68]	; 0x44
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	330c      	adds	r3, #12
 801a9ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a9b0:	61ba      	str	r2, [r7, #24]
 801a9b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9b4:	6979      	ldr	r1, [r7, #20]
 801a9b6:	69ba      	ldr	r2, [r7, #24]
 801a9b8:	e841 2300 	strex	r3, r2, [r1]
 801a9bc:	613b      	str	r3, [r7, #16]
   return(result);
 801a9be:	693b      	ldr	r3, [r7, #16]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d1e5      	bne.n	801a990 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	2220      	movs	r2, #32
 801a9c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 801a9d2:	bf00      	nop
 801a9d4:	3754      	adds	r7, #84	; 0x54
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9dc:	4770      	bx	lr

0801a9de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a9de:	b580      	push	{r7, lr}
 801a9e0:	b084      	sub	sp, #16
 801a9e2:	af00      	add	r7, sp, #0
 801a9e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a9f8:	68f8      	ldr	r0, [r7, #12]
 801a9fa:	f7ff fecf 	bl	801a79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a9fe:	bf00      	nop
 801aa00:	3710      	adds	r7, #16
 801aa02:	46bd      	mov	sp, r7
 801aa04:	bd80      	pop	{r7, pc}

0801aa06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801aa06:	b480      	push	{r7}
 801aa08:	b085      	sub	sp, #20
 801aa0a:	af00      	add	r7, sp, #0
 801aa0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801aa14:	b2db      	uxtb	r3, r3
 801aa16:	2b21      	cmp	r3, #33	; 0x21
 801aa18:	d13e      	bne.n	801aa98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	689b      	ldr	r3, [r3, #8]
 801aa1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801aa22:	d114      	bne.n	801aa4e <UART_Transmit_IT+0x48>
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	691b      	ldr	r3, [r3, #16]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d110      	bne.n	801aa4e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	6a1b      	ldr	r3, [r3, #32]
 801aa30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	881b      	ldrh	r3, [r3, #0]
 801aa36:	461a      	mov	r2, r3
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801aa40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	6a1b      	ldr	r3, [r3, #32]
 801aa46:	1c9a      	adds	r2, r3, #2
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	621a      	str	r2, [r3, #32]
 801aa4c:	e008      	b.n	801aa60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6a1b      	ldr	r3, [r3, #32]
 801aa52:	1c59      	adds	r1, r3, #1
 801aa54:	687a      	ldr	r2, [r7, #4]
 801aa56:	6211      	str	r1, [r2, #32]
 801aa58:	781a      	ldrb	r2, [r3, #0]
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801aa64:	b29b      	uxth	r3, r3
 801aa66:	3b01      	subs	r3, #1
 801aa68:	b29b      	uxth	r3, r3
 801aa6a:	687a      	ldr	r2, [r7, #4]
 801aa6c:	4619      	mov	r1, r3
 801aa6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d10f      	bne.n	801aa94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	68da      	ldr	r2, [r3, #12]
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801aa82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	68da      	ldr	r2, [r3, #12]
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aa92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801aa94:	2300      	movs	r3, #0
 801aa96:	e000      	b.n	801aa9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801aa98:	2302      	movs	r3, #2
  }
}
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	3714      	adds	r7, #20
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa4:	4770      	bx	lr

0801aaa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801aaa6:	b580      	push	{r7, lr}
 801aaa8:	b082      	sub	sp, #8
 801aaaa:	af00      	add	r7, sp, #0
 801aaac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	68da      	ldr	r2, [r3, #12]
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801aabc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	2220      	movs	r2, #32
 801aac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801aac6:	6878      	ldr	r0, [r7, #4]
 801aac8:	f7ff fe5e 	bl	801a788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801aacc:	2300      	movs	r3, #0
}
 801aace:	4618      	mov	r0, r3
 801aad0:	3708      	adds	r7, #8
 801aad2:	46bd      	mov	sp, r7
 801aad4:	bd80      	pop	{r7, pc}

0801aad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801aad6:	b580      	push	{r7, lr}
 801aad8:	b08c      	sub	sp, #48	; 0x30
 801aada:	af00      	add	r7, sp, #0
 801aadc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801aae4:	b2db      	uxtb	r3, r3
 801aae6:	2b22      	cmp	r3, #34	; 0x22
 801aae8:	f040 80ab 	bne.w	801ac42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	689b      	ldr	r3, [r3, #8]
 801aaf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801aaf4:	d117      	bne.n	801ab26 <UART_Receive_IT+0x50>
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	691b      	ldr	r3, [r3, #16]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d113      	bne.n	801ab26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801aafe:	2300      	movs	r3, #0
 801ab00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	685b      	ldr	r3, [r3, #4]
 801ab0e:	b29b      	uxth	r3, r3
 801ab10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ab14:	b29a      	uxth	r2, r3
 801ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab1e:	1c9a      	adds	r2, r3, #2
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	629a      	str	r2, [r3, #40]	; 0x28
 801ab24:	e026      	b.n	801ab74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	689b      	ldr	r3, [r3, #8]
 801ab34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ab38:	d007      	beq.n	801ab4a <UART_Receive_IT+0x74>
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	689b      	ldr	r3, [r3, #8]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d10a      	bne.n	801ab58 <UART_Receive_IT+0x82>
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	691b      	ldr	r3, [r3, #16]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d106      	bne.n	801ab58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	685b      	ldr	r3, [r3, #4]
 801ab50:	b2da      	uxtb	r2, r3
 801ab52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab54:	701a      	strb	r2, [r3, #0]
 801ab56:	e008      	b.n	801ab6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	685b      	ldr	r3, [r3, #4]
 801ab5e:	b2db      	uxtb	r3, r3
 801ab60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ab64:	b2da      	uxtb	r2, r3
 801ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab6e:	1c5a      	adds	r2, r3, #1
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801ab78:	b29b      	uxth	r3, r3
 801ab7a:	3b01      	subs	r3, #1
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	687a      	ldr	r2, [r7, #4]
 801ab80:	4619      	mov	r1, r3
 801ab82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d15a      	bne.n	801ac3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	68da      	ldr	r2, [r3, #12]
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	f022 0220 	bic.w	r2, r2, #32
 801ab96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	68da      	ldr	r2, [r3, #12]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801aba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	695a      	ldr	r2, [r3, #20]
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	f022 0201 	bic.w	r2, r2, #1
 801abb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	2220      	movs	r2, #32
 801abbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801abc4:	2b01      	cmp	r3, #1
 801abc6:	d135      	bne.n	801ac34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	2200      	movs	r2, #0
 801abcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	330c      	adds	r3, #12
 801abd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801abd6:	697b      	ldr	r3, [r7, #20]
 801abd8:	e853 3f00 	ldrex	r3, [r3]
 801abdc:	613b      	str	r3, [r7, #16]
   return(result);
 801abde:	693b      	ldr	r3, [r7, #16]
 801abe0:	f023 0310 	bic.w	r3, r3, #16
 801abe4:	627b      	str	r3, [r7, #36]	; 0x24
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	330c      	adds	r3, #12
 801abec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801abee:	623a      	str	r2, [r7, #32]
 801abf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801abf2:	69f9      	ldr	r1, [r7, #28]
 801abf4:	6a3a      	ldr	r2, [r7, #32]
 801abf6:	e841 2300 	strex	r3, r2, [r1]
 801abfa:	61bb      	str	r3, [r7, #24]
   return(result);
 801abfc:	69bb      	ldr	r3, [r7, #24]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d1e5      	bne.n	801abce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	f003 0310 	and.w	r3, r3, #16
 801ac0c:	2b10      	cmp	r3, #16
 801ac0e:	d10a      	bne.n	801ac26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801ac10:	2300      	movs	r3, #0
 801ac12:	60fb      	str	r3, [r7, #12]
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	60fb      	str	r3, [r7, #12]
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	685b      	ldr	r3, [r3, #4]
 801ac22:	60fb      	str	r3, [r7, #12]
 801ac24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801ac2a:	4619      	mov	r1, r3
 801ac2c:	6878      	ldr	r0, [r7, #4]
 801ac2e:	f7ff fdbf 	bl	801a7b0 <HAL_UARTEx_RxEventCallback>
 801ac32:	e002      	b.n	801ac3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801ac34:	6878      	ldr	r0, [r7, #4]
 801ac36:	f7e9 fd3b 	bl	80046b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	e002      	b.n	801ac44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801ac3e:	2300      	movs	r3, #0
 801ac40:	e000      	b.n	801ac44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801ac42:	2302      	movs	r3, #2
  }
}
 801ac44:	4618      	mov	r0, r3
 801ac46:	3730      	adds	r7, #48	; 0x30
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	bd80      	pop	{r7, pc}

0801ac4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac50:	b09f      	sub	sp, #124	; 0x7c
 801ac52:	af00      	add	r7, sp, #0
 801ac54:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801ac56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	691b      	ldr	r3, [r3, #16]
 801ac5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801ac60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac62:	68d9      	ldr	r1, [r3, #12]
 801ac64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac66:	681a      	ldr	r2, [r3, #0]
 801ac68:	ea40 0301 	orr.w	r3, r0, r1
 801ac6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801ac6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac70:	689a      	ldr	r2, [r3, #8]
 801ac72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac74:	691b      	ldr	r3, [r3, #16]
 801ac76:	431a      	orrs	r2, r3
 801ac78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac7a:	695b      	ldr	r3, [r3, #20]
 801ac7c:	431a      	orrs	r2, r3
 801ac7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac80:	69db      	ldr	r3, [r3, #28]
 801ac82:	4313      	orrs	r3, r2
 801ac84:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 801ac86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	68db      	ldr	r3, [r3, #12]
 801ac8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801ac90:	f021 010c 	bic.w	r1, r1, #12
 801ac94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ac96:	681a      	ldr	r2, [r3, #0]
 801ac98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ac9a:	430b      	orrs	r3, r1
 801ac9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801ac9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	695b      	ldr	r3, [r3, #20]
 801aca4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801aca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801acaa:	6999      	ldr	r1, [r3, #24]
 801acac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801acae:	681a      	ldr	r2, [r3, #0]
 801acb0:	ea40 0301 	orr.w	r3, r0, r1
 801acb4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801acb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801acb8:	681a      	ldr	r2, [r3, #0]
 801acba:	4bc5      	ldr	r3, [pc, #788]	; (801afd0 <UART_SetConfig+0x384>)
 801acbc:	429a      	cmp	r2, r3
 801acbe:	d004      	beq.n	801acca <UART_SetConfig+0x7e>
 801acc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801acc2:	681a      	ldr	r2, [r3, #0]
 801acc4:	4bc3      	ldr	r3, [pc, #780]	; (801afd4 <UART_SetConfig+0x388>)
 801acc6:	429a      	cmp	r2, r3
 801acc8:	d103      	bne.n	801acd2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801acca:	f7fd f953 	bl	8017f74 <HAL_RCC_GetPCLK2Freq>
 801acce:	6778      	str	r0, [r7, #116]	; 0x74
 801acd0:	e002      	b.n	801acd8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801acd2:	f7fd f93b 	bl	8017f4c <HAL_RCC_GetPCLK1Freq>
 801acd6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801acd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801acda:	69db      	ldr	r3, [r3, #28]
 801acdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ace0:	f040 80b6 	bne.w	801ae50 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801ace4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ace6:	461c      	mov	r4, r3
 801ace8:	f04f 0500 	mov.w	r5, #0
 801acec:	4622      	mov	r2, r4
 801acee:	462b      	mov	r3, r5
 801acf0:	1891      	adds	r1, r2, r2
 801acf2:	6439      	str	r1, [r7, #64]	; 0x40
 801acf4:	415b      	adcs	r3, r3
 801acf6:	647b      	str	r3, [r7, #68]	; 0x44
 801acf8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801acfc:	1912      	adds	r2, r2, r4
 801acfe:	eb45 0303 	adc.w	r3, r5, r3
 801ad02:	f04f 0000 	mov.w	r0, #0
 801ad06:	f04f 0100 	mov.w	r1, #0
 801ad0a:	00d9      	lsls	r1, r3, #3
 801ad0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801ad10:	00d0      	lsls	r0, r2, #3
 801ad12:	4602      	mov	r2, r0
 801ad14:	460b      	mov	r3, r1
 801ad16:	1911      	adds	r1, r2, r4
 801ad18:	6639      	str	r1, [r7, #96]	; 0x60
 801ad1a:	416b      	adcs	r3, r5
 801ad1c:	667b      	str	r3, [r7, #100]	; 0x64
 801ad1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ad20:	685b      	ldr	r3, [r3, #4]
 801ad22:	461a      	mov	r2, r3
 801ad24:	f04f 0300 	mov.w	r3, #0
 801ad28:	1891      	adds	r1, r2, r2
 801ad2a:	63b9      	str	r1, [r7, #56]	; 0x38
 801ad2c:	415b      	adcs	r3, r3
 801ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ad30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801ad34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801ad38:	f7e5 ff38 	bl	8000bac <__aeabi_uldivmod>
 801ad3c:	4602      	mov	r2, r0
 801ad3e:	460b      	mov	r3, r1
 801ad40:	4ba5      	ldr	r3, [pc, #660]	; (801afd8 <UART_SetConfig+0x38c>)
 801ad42:	fba3 2302 	umull	r2, r3, r3, r2
 801ad46:	095b      	lsrs	r3, r3, #5
 801ad48:	011e      	lsls	r6, r3, #4
 801ad4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ad4c:	461c      	mov	r4, r3
 801ad4e:	f04f 0500 	mov.w	r5, #0
 801ad52:	4622      	mov	r2, r4
 801ad54:	462b      	mov	r3, r5
 801ad56:	1891      	adds	r1, r2, r2
 801ad58:	6339      	str	r1, [r7, #48]	; 0x30
 801ad5a:	415b      	adcs	r3, r3
 801ad5c:	637b      	str	r3, [r7, #52]	; 0x34
 801ad5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801ad62:	1912      	adds	r2, r2, r4
 801ad64:	eb45 0303 	adc.w	r3, r5, r3
 801ad68:	f04f 0000 	mov.w	r0, #0
 801ad6c:	f04f 0100 	mov.w	r1, #0
 801ad70:	00d9      	lsls	r1, r3, #3
 801ad72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801ad76:	00d0      	lsls	r0, r2, #3
 801ad78:	4602      	mov	r2, r0
 801ad7a:	460b      	mov	r3, r1
 801ad7c:	1911      	adds	r1, r2, r4
 801ad7e:	65b9      	str	r1, [r7, #88]	; 0x58
 801ad80:	416b      	adcs	r3, r5
 801ad82:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ad84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ad86:	685b      	ldr	r3, [r3, #4]
 801ad88:	461a      	mov	r2, r3
 801ad8a:	f04f 0300 	mov.w	r3, #0
 801ad8e:	1891      	adds	r1, r2, r2
 801ad90:	62b9      	str	r1, [r7, #40]	; 0x28
 801ad92:	415b      	adcs	r3, r3
 801ad94:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ad96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ad9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801ad9e:	f7e5 ff05 	bl	8000bac <__aeabi_uldivmod>
 801ada2:	4602      	mov	r2, r0
 801ada4:	460b      	mov	r3, r1
 801ada6:	4b8c      	ldr	r3, [pc, #560]	; (801afd8 <UART_SetConfig+0x38c>)
 801ada8:	fba3 1302 	umull	r1, r3, r3, r2
 801adac:	095b      	lsrs	r3, r3, #5
 801adae:	2164      	movs	r1, #100	; 0x64
 801adb0:	fb01 f303 	mul.w	r3, r1, r3
 801adb4:	1ad3      	subs	r3, r2, r3
 801adb6:	00db      	lsls	r3, r3, #3
 801adb8:	3332      	adds	r3, #50	; 0x32
 801adba:	4a87      	ldr	r2, [pc, #540]	; (801afd8 <UART_SetConfig+0x38c>)
 801adbc:	fba2 2303 	umull	r2, r3, r2, r3
 801adc0:	095b      	lsrs	r3, r3, #5
 801adc2:	005b      	lsls	r3, r3, #1
 801adc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801adc8:	441e      	add	r6, r3
 801adca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801adcc:	4618      	mov	r0, r3
 801adce:	f04f 0100 	mov.w	r1, #0
 801add2:	4602      	mov	r2, r0
 801add4:	460b      	mov	r3, r1
 801add6:	1894      	adds	r4, r2, r2
 801add8:	623c      	str	r4, [r7, #32]
 801adda:	415b      	adcs	r3, r3
 801addc:	627b      	str	r3, [r7, #36]	; 0x24
 801adde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801ade2:	1812      	adds	r2, r2, r0
 801ade4:	eb41 0303 	adc.w	r3, r1, r3
 801ade8:	f04f 0400 	mov.w	r4, #0
 801adec:	f04f 0500 	mov.w	r5, #0
 801adf0:	00dd      	lsls	r5, r3, #3
 801adf2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801adf6:	00d4      	lsls	r4, r2, #3
 801adf8:	4622      	mov	r2, r4
 801adfa:	462b      	mov	r3, r5
 801adfc:	1814      	adds	r4, r2, r0
 801adfe:	653c      	str	r4, [r7, #80]	; 0x50
 801ae00:	414b      	adcs	r3, r1
 801ae02:	657b      	str	r3, [r7, #84]	; 0x54
 801ae04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae06:	685b      	ldr	r3, [r3, #4]
 801ae08:	461a      	mov	r2, r3
 801ae0a:	f04f 0300 	mov.w	r3, #0
 801ae0e:	1891      	adds	r1, r2, r2
 801ae10:	61b9      	str	r1, [r7, #24]
 801ae12:	415b      	adcs	r3, r3
 801ae14:	61fb      	str	r3, [r7, #28]
 801ae16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ae1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801ae1e:	f7e5 fec5 	bl	8000bac <__aeabi_uldivmod>
 801ae22:	4602      	mov	r2, r0
 801ae24:	460b      	mov	r3, r1
 801ae26:	4b6c      	ldr	r3, [pc, #432]	; (801afd8 <UART_SetConfig+0x38c>)
 801ae28:	fba3 1302 	umull	r1, r3, r3, r2
 801ae2c:	095b      	lsrs	r3, r3, #5
 801ae2e:	2164      	movs	r1, #100	; 0x64
 801ae30:	fb01 f303 	mul.w	r3, r1, r3
 801ae34:	1ad3      	subs	r3, r2, r3
 801ae36:	00db      	lsls	r3, r3, #3
 801ae38:	3332      	adds	r3, #50	; 0x32
 801ae3a:	4a67      	ldr	r2, [pc, #412]	; (801afd8 <UART_SetConfig+0x38c>)
 801ae3c:	fba2 2303 	umull	r2, r3, r2, r3
 801ae40:	095b      	lsrs	r3, r3, #5
 801ae42:	f003 0207 	and.w	r2, r3, #7
 801ae46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	4432      	add	r2, r6
 801ae4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801ae4e:	e0b9      	b.n	801afc4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801ae50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae52:	461c      	mov	r4, r3
 801ae54:	f04f 0500 	mov.w	r5, #0
 801ae58:	4622      	mov	r2, r4
 801ae5a:	462b      	mov	r3, r5
 801ae5c:	1891      	adds	r1, r2, r2
 801ae5e:	6139      	str	r1, [r7, #16]
 801ae60:	415b      	adcs	r3, r3
 801ae62:	617b      	str	r3, [r7, #20]
 801ae64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ae68:	1912      	adds	r2, r2, r4
 801ae6a:	eb45 0303 	adc.w	r3, r5, r3
 801ae6e:	f04f 0000 	mov.w	r0, #0
 801ae72:	f04f 0100 	mov.w	r1, #0
 801ae76:	00d9      	lsls	r1, r3, #3
 801ae78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801ae7c:	00d0      	lsls	r0, r2, #3
 801ae7e:	4602      	mov	r2, r0
 801ae80:	460b      	mov	r3, r1
 801ae82:	eb12 0804 	adds.w	r8, r2, r4
 801ae86:	eb43 0905 	adc.w	r9, r3, r5
 801ae8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae8c:	685b      	ldr	r3, [r3, #4]
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f04f 0100 	mov.w	r1, #0
 801ae94:	f04f 0200 	mov.w	r2, #0
 801ae98:	f04f 0300 	mov.w	r3, #0
 801ae9c:	008b      	lsls	r3, r1, #2
 801ae9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801aea2:	0082      	lsls	r2, r0, #2
 801aea4:	4640      	mov	r0, r8
 801aea6:	4649      	mov	r1, r9
 801aea8:	f7e5 fe80 	bl	8000bac <__aeabi_uldivmod>
 801aeac:	4602      	mov	r2, r0
 801aeae:	460b      	mov	r3, r1
 801aeb0:	4b49      	ldr	r3, [pc, #292]	; (801afd8 <UART_SetConfig+0x38c>)
 801aeb2:	fba3 2302 	umull	r2, r3, r3, r2
 801aeb6:	095b      	lsrs	r3, r3, #5
 801aeb8:	011e      	lsls	r6, r3, #4
 801aeba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aebc:	4618      	mov	r0, r3
 801aebe:	f04f 0100 	mov.w	r1, #0
 801aec2:	4602      	mov	r2, r0
 801aec4:	460b      	mov	r3, r1
 801aec6:	1894      	adds	r4, r2, r2
 801aec8:	60bc      	str	r4, [r7, #8]
 801aeca:	415b      	adcs	r3, r3
 801aecc:	60fb      	str	r3, [r7, #12]
 801aece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801aed2:	1812      	adds	r2, r2, r0
 801aed4:	eb41 0303 	adc.w	r3, r1, r3
 801aed8:	f04f 0400 	mov.w	r4, #0
 801aedc:	f04f 0500 	mov.w	r5, #0
 801aee0:	00dd      	lsls	r5, r3, #3
 801aee2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801aee6:	00d4      	lsls	r4, r2, #3
 801aee8:	4622      	mov	r2, r4
 801aeea:	462b      	mov	r3, r5
 801aeec:	1814      	adds	r4, r2, r0
 801aeee:	64bc      	str	r4, [r7, #72]	; 0x48
 801aef0:	414b      	adcs	r3, r1
 801aef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801aef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aef6:	685b      	ldr	r3, [r3, #4]
 801aef8:	4618      	mov	r0, r3
 801aefa:	f04f 0100 	mov.w	r1, #0
 801aefe:	f04f 0200 	mov.w	r2, #0
 801af02:	f04f 0300 	mov.w	r3, #0
 801af06:	008b      	lsls	r3, r1, #2
 801af08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801af0c:	0082      	lsls	r2, r0, #2
 801af0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801af12:	f7e5 fe4b 	bl	8000bac <__aeabi_uldivmod>
 801af16:	4602      	mov	r2, r0
 801af18:	460b      	mov	r3, r1
 801af1a:	4b2f      	ldr	r3, [pc, #188]	; (801afd8 <UART_SetConfig+0x38c>)
 801af1c:	fba3 1302 	umull	r1, r3, r3, r2
 801af20:	095b      	lsrs	r3, r3, #5
 801af22:	2164      	movs	r1, #100	; 0x64
 801af24:	fb01 f303 	mul.w	r3, r1, r3
 801af28:	1ad3      	subs	r3, r2, r3
 801af2a:	011b      	lsls	r3, r3, #4
 801af2c:	3332      	adds	r3, #50	; 0x32
 801af2e:	4a2a      	ldr	r2, [pc, #168]	; (801afd8 <UART_SetConfig+0x38c>)
 801af30:	fba2 2303 	umull	r2, r3, r2, r3
 801af34:	095b      	lsrs	r3, r3, #5
 801af36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801af3a:	441e      	add	r6, r3
 801af3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af3e:	4618      	mov	r0, r3
 801af40:	f04f 0100 	mov.w	r1, #0
 801af44:	4602      	mov	r2, r0
 801af46:	460b      	mov	r3, r1
 801af48:	1894      	adds	r4, r2, r2
 801af4a:	603c      	str	r4, [r7, #0]
 801af4c:	415b      	adcs	r3, r3
 801af4e:	607b      	str	r3, [r7, #4]
 801af50:	e9d7 2300 	ldrd	r2, r3, [r7]
 801af54:	1812      	adds	r2, r2, r0
 801af56:	eb41 0303 	adc.w	r3, r1, r3
 801af5a:	f04f 0400 	mov.w	r4, #0
 801af5e:	f04f 0500 	mov.w	r5, #0
 801af62:	00dd      	lsls	r5, r3, #3
 801af64:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801af68:	00d4      	lsls	r4, r2, #3
 801af6a:	4622      	mov	r2, r4
 801af6c:	462b      	mov	r3, r5
 801af6e:	eb12 0a00 	adds.w	sl, r2, r0
 801af72:	eb43 0b01 	adc.w	fp, r3, r1
 801af76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801af78:	685b      	ldr	r3, [r3, #4]
 801af7a:	4618      	mov	r0, r3
 801af7c:	f04f 0100 	mov.w	r1, #0
 801af80:	f04f 0200 	mov.w	r2, #0
 801af84:	f04f 0300 	mov.w	r3, #0
 801af88:	008b      	lsls	r3, r1, #2
 801af8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801af8e:	0082      	lsls	r2, r0, #2
 801af90:	4650      	mov	r0, sl
 801af92:	4659      	mov	r1, fp
 801af94:	f7e5 fe0a 	bl	8000bac <__aeabi_uldivmod>
 801af98:	4602      	mov	r2, r0
 801af9a:	460b      	mov	r3, r1
 801af9c:	4b0e      	ldr	r3, [pc, #56]	; (801afd8 <UART_SetConfig+0x38c>)
 801af9e:	fba3 1302 	umull	r1, r3, r3, r2
 801afa2:	095b      	lsrs	r3, r3, #5
 801afa4:	2164      	movs	r1, #100	; 0x64
 801afa6:	fb01 f303 	mul.w	r3, r1, r3
 801afaa:	1ad3      	subs	r3, r2, r3
 801afac:	011b      	lsls	r3, r3, #4
 801afae:	3332      	adds	r3, #50	; 0x32
 801afb0:	4a09      	ldr	r2, [pc, #36]	; (801afd8 <UART_SetConfig+0x38c>)
 801afb2:	fba2 2303 	umull	r2, r3, r2, r3
 801afb6:	095b      	lsrs	r3, r3, #5
 801afb8:	f003 020f 	and.w	r2, r3, #15
 801afbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	4432      	add	r2, r6
 801afc2:	609a      	str	r2, [r3, #8]
}
 801afc4:	bf00      	nop
 801afc6:	377c      	adds	r7, #124	; 0x7c
 801afc8:	46bd      	mov	sp, r7
 801afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afce:	bf00      	nop
 801afd0:	40011000 	.word	0x40011000
 801afd4:	40011400 	.word	0x40011400
 801afd8:	51eb851f 	.word	0x51eb851f

0801afdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801afdc:	b084      	sub	sp, #16
 801afde:	b580      	push	{r7, lr}
 801afe0:	b084      	sub	sp, #16
 801afe2:	af00      	add	r7, sp, #0
 801afe4:	6078      	str	r0, [r7, #4]
 801afe6:	f107 001c 	add.w	r0, r7, #28
 801afea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aff0:	2b01      	cmp	r3, #1
 801aff2:	d122      	bne.n	801b03a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	68db      	ldr	r3, [r3, #12]
 801b004:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801b008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b00c:	687a      	ldr	r2, [r7, #4]
 801b00e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	68db      	ldr	r3, [r3, #12]
 801b014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801b01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b01e:	2b01      	cmp	r3, #1
 801b020:	d105      	bne.n	801b02e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	68db      	ldr	r3, [r3, #12]
 801b026:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801b02e:	6878      	ldr	r0, [r7, #4]
 801b030:	f001 fb1c 	bl	801c66c <USB_CoreReset>
 801b034:	4603      	mov	r3, r0
 801b036:	73fb      	strb	r3, [r7, #15]
 801b038:	e01a      	b.n	801b070 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	68db      	ldr	r3, [r3, #12]
 801b03e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801b046:	6878      	ldr	r0, [r7, #4]
 801b048:	f001 fb10 	bl	801c66c <USB_CoreReset>
 801b04c:	4603      	mov	r3, r0
 801b04e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801b050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b052:	2b00      	cmp	r3, #0
 801b054:	d106      	bne.n	801b064 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b05a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	639a      	str	r2, [r3, #56]	; 0x38
 801b062:	e005      	b.n	801b070 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b068:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b072:	2b01      	cmp	r3, #1
 801b074:	d10b      	bne.n	801b08e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	689b      	ldr	r3, [r3, #8]
 801b07a:	f043 0206 	orr.w	r2, r3, #6
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	689b      	ldr	r3, [r3, #8]
 801b086:	f043 0220 	orr.w	r2, r3, #32
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801b08e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b090:	4618      	mov	r0, r3
 801b092:	3710      	adds	r7, #16
 801b094:	46bd      	mov	sp, r7
 801b096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b09a:	b004      	add	sp, #16
 801b09c:	4770      	bx	lr
	...

0801b0a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801b0a0:	b480      	push	{r7}
 801b0a2:	b087      	sub	sp, #28
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	60f8      	str	r0, [r7, #12]
 801b0a8:	60b9      	str	r1, [r7, #8]
 801b0aa:	4613      	mov	r3, r2
 801b0ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801b0ae:	79fb      	ldrb	r3, [r7, #7]
 801b0b0:	2b02      	cmp	r3, #2
 801b0b2:	d165      	bne.n	801b180 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801b0b4:	68bb      	ldr	r3, [r7, #8]
 801b0b6:	4a41      	ldr	r2, [pc, #260]	; (801b1bc <USB_SetTurnaroundTime+0x11c>)
 801b0b8:	4293      	cmp	r3, r2
 801b0ba:	d906      	bls.n	801b0ca <USB_SetTurnaroundTime+0x2a>
 801b0bc:	68bb      	ldr	r3, [r7, #8]
 801b0be:	4a40      	ldr	r2, [pc, #256]	; (801b1c0 <USB_SetTurnaroundTime+0x120>)
 801b0c0:	4293      	cmp	r3, r2
 801b0c2:	d202      	bcs.n	801b0ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801b0c4:	230f      	movs	r3, #15
 801b0c6:	617b      	str	r3, [r7, #20]
 801b0c8:	e062      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801b0ca:	68bb      	ldr	r3, [r7, #8]
 801b0cc:	4a3c      	ldr	r2, [pc, #240]	; (801b1c0 <USB_SetTurnaroundTime+0x120>)
 801b0ce:	4293      	cmp	r3, r2
 801b0d0:	d306      	bcc.n	801b0e0 <USB_SetTurnaroundTime+0x40>
 801b0d2:	68bb      	ldr	r3, [r7, #8]
 801b0d4:	4a3b      	ldr	r2, [pc, #236]	; (801b1c4 <USB_SetTurnaroundTime+0x124>)
 801b0d6:	4293      	cmp	r3, r2
 801b0d8:	d202      	bcs.n	801b0e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801b0da:	230e      	movs	r3, #14
 801b0dc:	617b      	str	r3, [r7, #20]
 801b0de:	e057      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	4a38      	ldr	r2, [pc, #224]	; (801b1c4 <USB_SetTurnaroundTime+0x124>)
 801b0e4:	4293      	cmp	r3, r2
 801b0e6:	d306      	bcc.n	801b0f6 <USB_SetTurnaroundTime+0x56>
 801b0e8:	68bb      	ldr	r3, [r7, #8]
 801b0ea:	4a37      	ldr	r2, [pc, #220]	; (801b1c8 <USB_SetTurnaroundTime+0x128>)
 801b0ec:	4293      	cmp	r3, r2
 801b0ee:	d202      	bcs.n	801b0f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801b0f0:	230d      	movs	r3, #13
 801b0f2:	617b      	str	r3, [r7, #20]
 801b0f4:	e04c      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801b0f6:	68bb      	ldr	r3, [r7, #8]
 801b0f8:	4a33      	ldr	r2, [pc, #204]	; (801b1c8 <USB_SetTurnaroundTime+0x128>)
 801b0fa:	4293      	cmp	r3, r2
 801b0fc:	d306      	bcc.n	801b10c <USB_SetTurnaroundTime+0x6c>
 801b0fe:	68bb      	ldr	r3, [r7, #8]
 801b100:	4a32      	ldr	r2, [pc, #200]	; (801b1cc <USB_SetTurnaroundTime+0x12c>)
 801b102:	4293      	cmp	r3, r2
 801b104:	d802      	bhi.n	801b10c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801b106:	230c      	movs	r3, #12
 801b108:	617b      	str	r3, [r7, #20]
 801b10a:	e041      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801b10c:	68bb      	ldr	r3, [r7, #8]
 801b10e:	4a2f      	ldr	r2, [pc, #188]	; (801b1cc <USB_SetTurnaroundTime+0x12c>)
 801b110:	4293      	cmp	r3, r2
 801b112:	d906      	bls.n	801b122 <USB_SetTurnaroundTime+0x82>
 801b114:	68bb      	ldr	r3, [r7, #8]
 801b116:	4a2e      	ldr	r2, [pc, #184]	; (801b1d0 <USB_SetTurnaroundTime+0x130>)
 801b118:	4293      	cmp	r3, r2
 801b11a:	d802      	bhi.n	801b122 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801b11c:	230b      	movs	r3, #11
 801b11e:	617b      	str	r3, [r7, #20]
 801b120:	e036      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801b122:	68bb      	ldr	r3, [r7, #8]
 801b124:	4a2a      	ldr	r2, [pc, #168]	; (801b1d0 <USB_SetTurnaroundTime+0x130>)
 801b126:	4293      	cmp	r3, r2
 801b128:	d906      	bls.n	801b138 <USB_SetTurnaroundTime+0x98>
 801b12a:	68bb      	ldr	r3, [r7, #8]
 801b12c:	4a29      	ldr	r2, [pc, #164]	; (801b1d4 <USB_SetTurnaroundTime+0x134>)
 801b12e:	4293      	cmp	r3, r2
 801b130:	d802      	bhi.n	801b138 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801b132:	230a      	movs	r3, #10
 801b134:	617b      	str	r3, [r7, #20]
 801b136:	e02b      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801b138:	68bb      	ldr	r3, [r7, #8]
 801b13a:	4a26      	ldr	r2, [pc, #152]	; (801b1d4 <USB_SetTurnaroundTime+0x134>)
 801b13c:	4293      	cmp	r3, r2
 801b13e:	d906      	bls.n	801b14e <USB_SetTurnaroundTime+0xae>
 801b140:	68bb      	ldr	r3, [r7, #8]
 801b142:	4a25      	ldr	r2, [pc, #148]	; (801b1d8 <USB_SetTurnaroundTime+0x138>)
 801b144:	4293      	cmp	r3, r2
 801b146:	d202      	bcs.n	801b14e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801b148:	2309      	movs	r3, #9
 801b14a:	617b      	str	r3, [r7, #20]
 801b14c:	e020      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801b14e:	68bb      	ldr	r3, [r7, #8]
 801b150:	4a21      	ldr	r2, [pc, #132]	; (801b1d8 <USB_SetTurnaroundTime+0x138>)
 801b152:	4293      	cmp	r3, r2
 801b154:	d306      	bcc.n	801b164 <USB_SetTurnaroundTime+0xc4>
 801b156:	68bb      	ldr	r3, [r7, #8]
 801b158:	4a20      	ldr	r2, [pc, #128]	; (801b1dc <USB_SetTurnaroundTime+0x13c>)
 801b15a:	4293      	cmp	r3, r2
 801b15c:	d802      	bhi.n	801b164 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801b15e:	2308      	movs	r3, #8
 801b160:	617b      	str	r3, [r7, #20]
 801b162:	e015      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801b164:	68bb      	ldr	r3, [r7, #8]
 801b166:	4a1d      	ldr	r2, [pc, #116]	; (801b1dc <USB_SetTurnaroundTime+0x13c>)
 801b168:	4293      	cmp	r3, r2
 801b16a:	d906      	bls.n	801b17a <USB_SetTurnaroundTime+0xda>
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	4a1c      	ldr	r2, [pc, #112]	; (801b1e0 <USB_SetTurnaroundTime+0x140>)
 801b170:	4293      	cmp	r3, r2
 801b172:	d202      	bcs.n	801b17a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801b174:	2307      	movs	r3, #7
 801b176:	617b      	str	r3, [r7, #20]
 801b178:	e00a      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801b17a:	2306      	movs	r3, #6
 801b17c:	617b      	str	r3, [r7, #20]
 801b17e:	e007      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801b180:	79fb      	ldrb	r3, [r7, #7]
 801b182:	2b00      	cmp	r3, #0
 801b184:	d102      	bne.n	801b18c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801b186:	2309      	movs	r3, #9
 801b188:	617b      	str	r3, [r7, #20]
 801b18a:	e001      	b.n	801b190 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801b18c:	2309      	movs	r3, #9
 801b18e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	68db      	ldr	r3, [r3, #12]
 801b194:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	68da      	ldr	r2, [r3, #12]
 801b1a0:	697b      	ldr	r3, [r7, #20]
 801b1a2:	029b      	lsls	r3, r3, #10
 801b1a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801b1a8:	431a      	orrs	r2, r3
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801b1ae:	2300      	movs	r3, #0
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	371c      	adds	r7, #28
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ba:	4770      	bx	lr
 801b1bc:	00d8acbf 	.word	0x00d8acbf
 801b1c0:	00e4e1c0 	.word	0x00e4e1c0
 801b1c4:	00f42400 	.word	0x00f42400
 801b1c8:	01067380 	.word	0x01067380
 801b1cc:	011a499f 	.word	0x011a499f
 801b1d0:	01312cff 	.word	0x01312cff
 801b1d4:	014ca43f 	.word	0x014ca43f
 801b1d8:	016e3600 	.word	0x016e3600
 801b1dc:	01a6ab1f 	.word	0x01a6ab1f
 801b1e0:	01e84800 	.word	0x01e84800

0801b1e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b1e4:	b480      	push	{r7}
 801b1e6:	b083      	sub	sp, #12
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	689b      	ldr	r3, [r3, #8]
 801b1f0:	f043 0201 	orr.w	r2, r3, #1
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b1f8:	2300      	movs	r3, #0
}
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	370c      	adds	r7, #12
 801b1fe:	46bd      	mov	sp, r7
 801b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b204:	4770      	bx	lr

0801b206 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b206:	b480      	push	{r7}
 801b208:	b083      	sub	sp, #12
 801b20a:	af00      	add	r7, sp, #0
 801b20c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	689b      	ldr	r3, [r3, #8]
 801b212:	f023 0201 	bic.w	r2, r3, #1
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b21a:	2300      	movs	r3, #0
}
 801b21c:	4618      	mov	r0, r3
 801b21e:	370c      	adds	r7, #12
 801b220:	46bd      	mov	sp, r7
 801b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b226:	4770      	bx	lr

0801b228 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b084      	sub	sp, #16
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
 801b230:	460b      	mov	r3, r1
 801b232:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801b234:	2300      	movs	r3, #0
 801b236:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	68db      	ldr	r3, [r3, #12]
 801b23c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801b244:	78fb      	ldrb	r3, [r7, #3]
 801b246:	2b01      	cmp	r3, #1
 801b248:	d115      	bne.n	801b276 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	68db      	ldr	r3, [r3, #12]
 801b24e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801b256:	2001      	movs	r0, #1
 801b258:	f7f8 fcd8 	bl	8013c0c <HAL_Delay>
      ms++;
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	3301      	adds	r3, #1
 801b260:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801b262:	6878      	ldr	r0, [r7, #4]
 801b264:	f001 f972 	bl	801c54c <USB_GetMode>
 801b268:	4603      	mov	r3, r0
 801b26a:	2b01      	cmp	r3, #1
 801b26c:	d01e      	beq.n	801b2ac <USB_SetCurrentMode+0x84>
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	2b31      	cmp	r3, #49	; 0x31
 801b272:	d9f0      	bls.n	801b256 <USB_SetCurrentMode+0x2e>
 801b274:	e01a      	b.n	801b2ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801b276:	78fb      	ldrb	r3, [r7, #3]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d115      	bne.n	801b2a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	68db      	ldr	r3, [r3, #12]
 801b280:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801b288:	2001      	movs	r0, #1
 801b28a:	f7f8 fcbf 	bl	8013c0c <HAL_Delay>
      ms++;
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	3301      	adds	r3, #1
 801b292:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801b294:	6878      	ldr	r0, [r7, #4]
 801b296:	f001 f959 	bl	801c54c <USB_GetMode>
 801b29a:	4603      	mov	r3, r0
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d005      	beq.n	801b2ac <USB_SetCurrentMode+0x84>
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	2b31      	cmp	r3, #49	; 0x31
 801b2a4:	d9f0      	bls.n	801b288 <USB_SetCurrentMode+0x60>
 801b2a6:	e001      	b.n	801b2ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801b2a8:	2301      	movs	r3, #1
 801b2aa:	e005      	b.n	801b2b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	2b32      	cmp	r3, #50	; 0x32
 801b2b0:	d101      	bne.n	801b2b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801b2b2:	2301      	movs	r3, #1
 801b2b4:	e000      	b.n	801b2b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801b2b6:	2300      	movs	r3, #0
}
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	3710      	adds	r7, #16
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	bd80      	pop	{r7, pc}

0801b2c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b2c0:	b084      	sub	sp, #16
 801b2c2:	b580      	push	{r7, lr}
 801b2c4:	b086      	sub	sp, #24
 801b2c6:	af00      	add	r7, sp, #0
 801b2c8:	6078      	str	r0, [r7, #4]
 801b2ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b2ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801b2da:	2300      	movs	r3, #0
 801b2dc:	613b      	str	r3, [r7, #16]
 801b2de:	e009      	b.n	801b2f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801b2e0:	687a      	ldr	r2, [r7, #4]
 801b2e2:	693b      	ldr	r3, [r7, #16]
 801b2e4:	3340      	adds	r3, #64	; 0x40
 801b2e6:	009b      	lsls	r3, r3, #2
 801b2e8:	4413      	add	r3, r2
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	3301      	adds	r3, #1
 801b2f2:	613b      	str	r3, [r7, #16]
 801b2f4:	693b      	ldr	r3, [r7, #16]
 801b2f6:	2b0e      	cmp	r3, #14
 801b2f8:	d9f2      	bls.n	801b2e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801b2fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d11c      	bne.n	801b33a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b306:	685b      	ldr	r3, [r3, #4]
 801b308:	68fa      	ldr	r2, [r7, #12]
 801b30a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b30e:	f043 0302 	orr.w	r3, r3, #2
 801b312:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b318:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b324:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b330:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	639a      	str	r2, [r3, #56]	; 0x38
 801b338:	e00b      	b.n	801b352 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b33e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b34a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b358:	461a      	mov	r2, r3
 801b35a:	2300      	movs	r3, #0
 801b35c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b364:	4619      	mov	r1, r3
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b36c:	461a      	mov	r2, r3
 801b36e:	680b      	ldr	r3, [r1, #0]
 801b370:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b374:	2b01      	cmp	r3, #1
 801b376:	d10c      	bne.n	801b392 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d104      	bne.n	801b388 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801b37e:	2100      	movs	r1, #0
 801b380:	6878      	ldr	r0, [r7, #4]
 801b382:	f000 f945 	bl	801b610 <USB_SetDevSpeed>
 801b386:	e008      	b.n	801b39a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801b388:	2101      	movs	r1, #1
 801b38a:	6878      	ldr	r0, [r7, #4]
 801b38c:	f000 f940 	bl	801b610 <USB_SetDevSpeed>
 801b390:	e003      	b.n	801b39a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801b392:	2103      	movs	r1, #3
 801b394:	6878      	ldr	r0, [r7, #4]
 801b396:	f000 f93b 	bl	801b610 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801b39a:	2110      	movs	r1, #16
 801b39c:	6878      	ldr	r0, [r7, #4]
 801b39e:	f000 f8f3 	bl	801b588 <USB_FlushTxFifo>
 801b3a2:	4603      	mov	r3, r0
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d001      	beq.n	801b3ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 801b3a8:	2301      	movs	r3, #1
 801b3aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801b3ac:	6878      	ldr	r0, [r7, #4]
 801b3ae:	f000 f90f 	bl	801b5d0 <USB_FlushRxFifo>
 801b3b2:	4603      	mov	r3, r0
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d001      	beq.n	801b3bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 801b3b8:	2301      	movs	r3, #1
 801b3ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801b3bc:	68fb      	ldr	r3, [r7, #12]
 801b3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b3c2:	461a      	mov	r2, r3
 801b3c4:	2300      	movs	r3, #0
 801b3c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b3ce:	461a      	mov	r2, r3
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b3da:	461a      	mov	r2, r3
 801b3dc:	2300      	movs	r3, #0
 801b3de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	613b      	str	r3, [r7, #16]
 801b3e4:	e043      	b.n	801b46e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b3e6:	693b      	ldr	r3, [r7, #16]
 801b3e8:	015a      	lsls	r2, r3, #5
 801b3ea:	68fb      	ldr	r3, [r7, #12]
 801b3ec:	4413      	add	r3, r2
 801b3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b3f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b3fc:	d118      	bne.n	801b430 <USB_DevInit+0x170>
    {
      if (i == 0U)
 801b3fe:	693b      	ldr	r3, [r7, #16]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d10a      	bne.n	801b41a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801b404:	693b      	ldr	r3, [r7, #16]
 801b406:	015a      	lsls	r2, r3, #5
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	4413      	add	r3, r2
 801b40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b410:	461a      	mov	r2, r3
 801b412:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b416:	6013      	str	r3, [r2, #0]
 801b418:	e013      	b.n	801b442 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801b41a:	693b      	ldr	r3, [r7, #16]
 801b41c:	015a      	lsls	r2, r3, #5
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	4413      	add	r3, r2
 801b422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b426:	461a      	mov	r2, r3
 801b428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801b42c:	6013      	str	r3, [r2, #0]
 801b42e:	e008      	b.n	801b442 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801b430:	693b      	ldr	r3, [r7, #16]
 801b432:	015a      	lsls	r2, r3, #5
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	4413      	add	r3, r2
 801b438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b43c:	461a      	mov	r2, r3
 801b43e:	2300      	movs	r3, #0
 801b440:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801b442:	693b      	ldr	r3, [r7, #16]
 801b444:	015a      	lsls	r2, r3, #5
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	4413      	add	r3, r2
 801b44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b44e:	461a      	mov	r2, r3
 801b450:	2300      	movs	r3, #0
 801b452:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801b454:	693b      	ldr	r3, [r7, #16]
 801b456:	015a      	lsls	r2, r3, #5
 801b458:	68fb      	ldr	r3, [r7, #12]
 801b45a:	4413      	add	r3, r2
 801b45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b460:	461a      	mov	r2, r3
 801b462:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801b466:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b468:	693b      	ldr	r3, [r7, #16]
 801b46a:	3301      	adds	r3, #1
 801b46c:	613b      	str	r3, [r7, #16]
 801b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b470:	693a      	ldr	r2, [r7, #16]
 801b472:	429a      	cmp	r2, r3
 801b474:	d3b7      	bcc.n	801b3e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b476:	2300      	movs	r3, #0
 801b478:	613b      	str	r3, [r7, #16]
 801b47a:	e043      	b.n	801b504 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b47c:	693b      	ldr	r3, [r7, #16]
 801b47e:	015a      	lsls	r2, r3, #5
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	4413      	add	r3, r2
 801b484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b48e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b492:	d118      	bne.n	801b4c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 801b494:	693b      	ldr	r3, [r7, #16]
 801b496:	2b00      	cmp	r3, #0
 801b498:	d10a      	bne.n	801b4b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801b49a:	693b      	ldr	r3, [r7, #16]
 801b49c:	015a      	lsls	r2, r3, #5
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	4413      	add	r3, r2
 801b4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b4a6:	461a      	mov	r2, r3
 801b4a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b4ac:	6013      	str	r3, [r2, #0]
 801b4ae:	e013      	b.n	801b4d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801b4b0:	693b      	ldr	r3, [r7, #16]
 801b4b2:	015a      	lsls	r2, r3, #5
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	4413      	add	r3, r2
 801b4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b4bc:	461a      	mov	r2, r3
 801b4be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801b4c2:	6013      	str	r3, [r2, #0]
 801b4c4:	e008      	b.n	801b4d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801b4c6:	693b      	ldr	r3, [r7, #16]
 801b4c8:	015a      	lsls	r2, r3, #5
 801b4ca:	68fb      	ldr	r3, [r7, #12]
 801b4cc:	4413      	add	r3, r2
 801b4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b4d2:	461a      	mov	r2, r3
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801b4d8:	693b      	ldr	r3, [r7, #16]
 801b4da:	015a      	lsls	r2, r3, #5
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	4413      	add	r3, r2
 801b4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b4e4:	461a      	mov	r2, r3
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801b4ea:	693b      	ldr	r3, [r7, #16]
 801b4ec:	015a      	lsls	r2, r3, #5
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	4413      	add	r3, r2
 801b4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b4f6:	461a      	mov	r2, r3
 801b4f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801b4fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b4fe:	693b      	ldr	r3, [r7, #16]
 801b500:	3301      	adds	r3, #1
 801b502:	613b      	str	r3, [r7, #16]
 801b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b506:	693a      	ldr	r2, [r7, #16]
 801b508:	429a      	cmp	r2, r3
 801b50a:	d3b7      	bcc.n	801b47c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b512:	691b      	ldr	r3, [r3, #16]
 801b514:	68fa      	ldr	r2, [r7, #12]
 801b516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b51a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b51e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	2200      	movs	r2, #0
 801b524:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801b52c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b530:	2b00      	cmp	r3, #0
 801b532:	d105      	bne.n	801b540 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	699b      	ldr	r3, [r3, #24]
 801b538:	f043 0210 	orr.w	r2, r3, #16
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	699a      	ldr	r2, [r3, #24]
 801b544:	4b0f      	ldr	r3, [pc, #60]	; (801b584 <USB_DevInit+0x2c4>)
 801b546:	4313      	orrs	r3, r2
 801b548:	687a      	ldr	r2, [r7, #4]
 801b54a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801b54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d005      	beq.n	801b55e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	699b      	ldr	r3, [r3, #24]
 801b556:	f043 0208 	orr.w	r2, r3, #8
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801b55e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b560:	2b01      	cmp	r3, #1
 801b562:	d107      	bne.n	801b574 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	699b      	ldr	r3, [r3, #24]
 801b568:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b56c:	f043 0304 	orr.w	r3, r3, #4
 801b570:	687a      	ldr	r2, [r7, #4]
 801b572:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801b574:	7dfb      	ldrb	r3, [r7, #23]
}
 801b576:	4618      	mov	r0, r3
 801b578:	3718      	adds	r7, #24
 801b57a:	46bd      	mov	sp, r7
 801b57c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b580:	b004      	add	sp, #16
 801b582:	4770      	bx	lr
 801b584:	803c3800 	.word	0x803c3800

0801b588 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801b588:	b480      	push	{r7}
 801b58a:	b085      	sub	sp, #20
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	6078      	str	r0, [r7, #4]
 801b590:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801b592:	2300      	movs	r3, #0
 801b594:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801b596:	683b      	ldr	r3, [r7, #0]
 801b598:	019b      	lsls	r3, r3, #6
 801b59a:	f043 0220 	orr.w	r2, r3, #32
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	3301      	adds	r3, #1
 801b5a6:	60fb      	str	r3, [r7, #12]
 801b5a8:	4a08      	ldr	r2, [pc, #32]	; (801b5cc <USB_FlushTxFifo+0x44>)
 801b5aa:	4293      	cmp	r3, r2
 801b5ac:	d901      	bls.n	801b5b2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801b5ae:	2303      	movs	r3, #3
 801b5b0:	e006      	b.n	801b5c0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	691b      	ldr	r3, [r3, #16]
 801b5b6:	f003 0320 	and.w	r3, r3, #32
 801b5ba:	2b20      	cmp	r3, #32
 801b5bc:	d0f1      	beq.n	801b5a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801b5be:	2300      	movs	r3, #0
}
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	3714      	adds	r7, #20
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ca:	4770      	bx	lr
 801b5cc:	00030d40 	.word	0x00030d40

0801b5d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801b5d0:	b480      	push	{r7}
 801b5d2:	b085      	sub	sp, #20
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801b5d8:	2300      	movs	r3, #0
 801b5da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	2210      	movs	r2, #16
 801b5e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	3301      	adds	r3, #1
 801b5e6:	60fb      	str	r3, [r7, #12]
 801b5e8:	4a08      	ldr	r2, [pc, #32]	; (801b60c <USB_FlushRxFifo+0x3c>)
 801b5ea:	4293      	cmp	r3, r2
 801b5ec:	d901      	bls.n	801b5f2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801b5ee:	2303      	movs	r3, #3
 801b5f0:	e006      	b.n	801b600 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	691b      	ldr	r3, [r3, #16]
 801b5f6:	f003 0310 	and.w	r3, r3, #16
 801b5fa:	2b10      	cmp	r3, #16
 801b5fc:	d0f1      	beq.n	801b5e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801b5fe:	2300      	movs	r3, #0
}
 801b600:	4618      	mov	r0, r3
 801b602:	3714      	adds	r7, #20
 801b604:	46bd      	mov	sp, r7
 801b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b60a:	4770      	bx	lr
 801b60c:	00030d40 	.word	0x00030d40

0801b610 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801b610:	b480      	push	{r7}
 801b612:	b085      	sub	sp, #20
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
 801b618:	460b      	mov	r3, r1
 801b61a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b626:	681a      	ldr	r2, [r3, #0]
 801b628:	78fb      	ldrb	r3, [r7, #3]
 801b62a:	68f9      	ldr	r1, [r7, #12]
 801b62c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b630:	4313      	orrs	r3, r2
 801b632:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801b634:	2300      	movs	r3, #0
}
 801b636:	4618      	mov	r0, r3
 801b638:	3714      	adds	r7, #20
 801b63a:	46bd      	mov	sp, r7
 801b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b640:	4770      	bx	lr

0801b642 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801b642:	b480      	push	{r7}
 801b644:	b087      	sub	sp, #28
 801b646:	af00      	add	r7, sp, #0
 801b648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801b64e:	693b      	ldr	r3, [r7, #16]
 801b650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b654:	689b      	ldr	r3, [r3, #8]
 801b656:	f003 0306 	and.w	r3, r3, #6
 801b65a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d102      	bne.n	801b668 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801b662:	2300      	movs	r3, #0
 801b664:	75fb      	strb	r3, [r7, #23]
 801b666:	e00a      	b.n	801b67e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	2b02      	cmp	r3, #2
 801b66c:	d002      	beq.n	801b674 <USB_GetDevSpeed+0x32>
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	2b06      	cmp	r3, #6
 801b672:	d102      	bne.n	801b67a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801b674:	2302      	movs	r3, #2
 801b676:	75fb      	strb	r3, [r7, #23]
 801b678:	e001      	b.n	801b67e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801b67a:	230f      	movs	r3, #15
 801b67c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801b67e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b680:	4618      	mov	r0, r3
 801b682:	371c      	adds	r7, #28
 801b684:	46bd      	mov	sp, r7
 801b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b68a:	4770      	bx	lr

0801b68c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b68c:	b480      	push	{r7}
 801b68e:	b085      	sub	sp, #20
 801b690:	af00      	add	r7, sp, #0
 801b692:	6078      	str	r0, [r7, #4]
 801b694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b69a:	683b      	ldr	r3, [r7, #0]
 801b69c:	781b      	ldrb	r3, [r3, #0]
 801b69e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b6a0:	683b      	ldr	r3, [r7, #0]
 801b6a2:	785b      	ldrb	r3, [r3, #1]
 801b6a4:	2b01      	cmp	r3, #1
 801b6a6:	d13a      	bne.n	801b71e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b6ae:	69da      	ldr	r2, [r3, #28]
 801b6b0:	683b      	ldr	r3, [r7, #0]
 801b6b2:	781b      	ldrb	r3, [r3, #0]
 801b6b4:	f003 030f 	and.w	r3, r3, #15
 801b6b8:	2101      	movs	r1, #1
 801b6ba:	fa01 f303 	lsl.w	r3, r1, r3
 801b6be:	b29b      	uxth	r3, r3
 801b6c0:	68f9      	ldr	r1, [r7, #12]
 801b6c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b6c6:	4313      	orrs	r3, r2
 801b6c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801b6ca:	68bb      	ldr	r3, [r7, #8]
 801b6cc:	015a      	lsls	r2, r3, #5
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	4413      	add	r3, r2
 801b6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d155      	bne.n	801b78c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b6e0:	68bb      	ldr	r3, [r7, #8]
 801b6e2:	015a      	lsls	r2, r3, #5
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	4413      	add	r3, r2
 801b6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6ec:	681a      	ldr	r2, [r3, #0]
 801b6ee:	683b      	ldr	r3, [r7, #0]
 801b6f0:	689b      	ldr	r3, [r3, #8]
 801b6f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b6f6:	683b      	ldr	r3, [r7, #0]
 801b6f8:	78db      	ldrb	r3, [r3, #3]
 801b6fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b6fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b6fe:	68bb      	ldr	r3, [r7, #8]
 801b700:	059b      	lsls	r3, r3, #22
 801b702:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b704:	4313      	orrs	r3, r2
 801b706:	68ba      	ldr	r2, [r7, #8]
 801b708:	0151      	lsls	r1, r2, #5
 801b70a:	68fa      	ldr	r2, [r7, #12]
 801b70c:	440a      	add	r2, r1
 801b70e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b71a:	6013      	str	r3, [r2, #0]
 801b71c:	e036      	b.n	801b78c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b724:	69da      	ldr	r2, [r3, #28]
 801b726:	683b      	ldr	r3, [r7, #0]
 801b728:	781b      	ldrb	r3, [r3, #0]
 801b72a:	f003 030f 	and.w	r3, r3, #15
 801b72e:	2101      	movs	r1, #1
 801b730:	fa01 f303 	lsl.w	r3, r1, r3
 801b734:	041b      	lsls	r3, r3, #16
 801b736:	68f9      	ldr	r1, [r7, #12]
 801b738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b73c:	4313      	orrs	r3, r2
 801b73e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	015a      	lsls	r2, r3, #5
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	4413      	add	r3, r2
 801b748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b752:	2b00      	cmp	r3, #0
 801b754:	d11a      	bne.n	801b78c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b756:	68bb      	ldr	r3, [r7, #8]
 801b758:	015a      	lsls	r2, r3, #5
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	4413      	add	r3, r2
 801b75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b762:	681a      	ldr	r2, [r3, #0]
 801b764:	683b      	ldr	r3, [r7, #0]
 801b766:	689b      	ldr	r3, [r3, #8]
 801b768:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801b76c:	683b      	ldr	r3, [r7, #0]
 801b76e:	78db      	ldrb	r3, [r3, #3]
 801b770:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b772:	430b      	orrs	r3, r1
 801b774:	4313      	orrs	r3, r2
 801b776:	68ba      	ldr	r2, [r7, #8]
 801b778:	0151      	lsls	r1, r2, #5
 801b77a:	68fa      	ldr	r2, [r7, #12]
 801b77c:	440a      	add	r2, r1
 801b77e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b78a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801b78c:	2300      	movs	r3, #0
}
 801b78e:	4618      	mov	r0, r3
 801b790:	3714      	adds	r7, #20
 801b792:	46bd      	mov	sp, r7
 801b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b798:	4770      	bx	lr
	...

0801b79c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b79c:	b480      	push	{r7}
 801b79e:	b085      	sub	sp, #20
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
 801b7a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b7aa:	683b      	ldr	r3, [r7, #0]
 801b7ac:	781b      	ldrb	r3, [r3, #0]
 801b7ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b7b0:	683b      	ldr	r3, [r7, #0]
 801b7b2:	785b      	ldrb	r3, [r3, #1]
 801b7b4:	2b01      	cmp	r3, #1
 801b7b6:	d161      	bne.n	801b87c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b7b8:	68bb      	ldr	r3, [r7, #8]
 801b7ba:	015a      	lsls	r2, r3, #5
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	4413      	add	r3, r2
 801b7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b7ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b7ce:	d11f      	bne.n	801b810 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801b7d0:	68bb      	ldr	r3, [r7, #8]
 801b7d2:	015a      	lsls	r2, r3, #5
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	4413      	add	r3, r2
 801b7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	68ba      	ldr	r2, [r7, #8]
 801b7e0:	0151      	lsls	r1, r2, #5
 801b7e2:	68fa      	ldr	r2, [r7, #12]
 801b7e4:	440a      	add	r2, r1
 801b7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b7ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801b7ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801b7f0:	68bb      	ldr	r3, [r7, #8]
 801b7f2:	015a      	lsls	r2, r3, #5
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	4413      	add	r3, r2
 801b7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	68ba      	ldr	r2, [r7, #8]
 801b800:	0151      	lsls	r1, r2, #5
 801b802:	68fa      	ldr	r2, [r7, #12]
 801b804:	440a      	add	r2, r1
 801b806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b80a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b80e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b818:	683b      	ldr	r3, [r7, #0]
 801b81a:	781b      	ldrb	r3, [r3, #0]
 801b81c:	f003 030f 	and.w	r3, r3, #15
 801b820:	2101      	movs	r1, #1
 801b822:	fa01 f303 	lsl.w	r3, r1, r3
 801b826:	b29b      	uxth	r3, r3
 801b828:	43db      	mvns	r3, r3
 801b82a:	68f9      	ldr	r1, [r7, #12]
 801b82c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b830:	4013      	ands	r3, r2
 801b832:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b83a:	69da      	ldr	r2, [r3, #28]
 801b83c:	683b      	ldr	r3, [r7, #0]
 801b83e:	781b      	ldrb	r3, [r3, #0]
 801b840:	f003 030f 	and.w	r3, r3, #15
 801b844:	2101      	movs	r1, #1
 801b846:	fa01 f303 	lsl.w	r3, r1, r3
 801b84a:	b29b      	uxth	r3, r3
 801b84c:	43db      	mvns	r3, r3
 801b84e:	68f9      	ldr	r1, [r7, #12]
 801b850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b854:	4013      	ands	r3, r2
 801b856:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801b858:	68bb      	ldr	r3, [r7, #8]
 801b85a:	015a      	lsls	r2, r3, #5
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	4413      	add	r3, r2
 801b860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b864:	681a      	ldr	r2, [r3, #0]
 801b866:	68bb      	ldr	r3, [r7, #8]
 801b868:	0159      	lsls	r1, r3, #5
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	440b      	add	r3, r1
 801b86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b872:	4619      	mov	r1, r3
 801b874:	4b35      	ldr	r3, [pc, #212]	; (801b94c <USB_DeactivateEndpoint+0x1b0>)
 801b876:	4013      	ands	r3, r2
 801b878:	600b      	str	r3, [r1, #0]
 801b87a:	e060      	b.n	801b93e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b87c:	68bb      	ldr	r3, [r7, #8]
 801b87e:	015a      	lsls	r2, r3, #5
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	4413      	add	r3, r2
 801b884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b88e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b892:	d11f      	bne.n	801b8d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801b894:	68bb      	ldr	r3, [r7, #8]
 801b896:	015a      	lsls	r2, r3, #5
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	4413      	add	r3, r2
 801b89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	68ba      	ldr	r2, [r7, #8]
 801b8a4:	0151      	lsls	r1, r2, #5
 801b8a6:	68fa      	ldr	r2, [r7, #12]
 801b8a8:	440a      	add	r2, r1
 801b8aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b8ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801b8b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801b8b4:	68bb      	ldr	r3, [r7, #8]
 801b8b6:	015a      	lsls	r2, r3, #5
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	4413      	add	r3, r2
 801b8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	68ba      	ldr	r2, [r7, #8]
 801b8c4:	0151      	lsls	r1, r2, #5
 801b8c6:	68fa      	ldr	r2, [r7, #12]
 801b8c8:	440a      	add	r2, r1
 801b8ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b8ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b8d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b8da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b8dc:	683b      	ldr	r3, [r7, #0]
 801b8de:	781b      	ldrb	r3, [r3, #0]
 801b8e0:	f003 030f 	and.w	r3, r3, #15
 801b8e4:	2101      	movs	r1, #1
 801b8e6:	fa01 f303 	lsl.w	r3, r1, r3
 801b8ea:	041b      	lsls	r3, r3, #16
 801b8ec:	43db      	mvns	r3, r3
 801b8ee:	68f9      	ldr	r1, [r7, #12]
 801b8f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b8f4:	4013      	ands	r3, r2
 801b8f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b8fe:	69da      	ldr	r2, [r3, #28]
 801b900:	683b      	ldr	r3, [r7, #0]
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	f003 030f 	and.w	r3, r3, #15
 801b908:	2101      	movs	r1, #1
 801b90a:	fa01 f303 	lsl.w	r3, r1, r3
 801b90e:	041b      	lsls	r3, r3, #16
 801b910:	43db      	mvns	r3, r3
 801b912:	68f9      	ldr	r1, [r7, #12]
 801b914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b918:	4013      	ands	r3, r2
 801b91a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801b91c:	68bb      	ldr	r3, [r7, #8]
 801b91e:	015a      	lsls	r2, r3, #5
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	4413      	add	r3, r2
 801b924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b928:	681a      	ldr	r2, [r3, #0]
 801b92a:	68bb      	ldr	r3, [r7, #8]
 801b92c:	0159      	lsls	r1, r3, #5
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	440b      	add	r3, r1
 801b932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b936:	4619      	mov	r1, r3
 801b938:	4b05      	ldr	r3, [pc, #20]	; (801b950 <USB_DeactivateEndpoint+0x1b4>)
 801b93a:	4013      	ands	r3, r2
 801b93c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801b93e:	2300      	movs	r3, #0
}
 801b940:	4618      	mov	r0, r3
 801b942:	3714      	adds	r7, #20
 801b944:	46bd      	mov	sp, r7
 801b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b94a:	4770      	bx	lr
 801b94c:	ec337800 	.word	0xec337800
 801b950:	eff37800 	.word	0xeff37800

0801b954 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b954:	b580      	push	{r7, lr}
 801b956:	b08a      	sub	sp, #40	; 0x28
 801b958:	af02      	add	r7, sp, #8
 801b95a:	60f8      	str	r0, [r7, #12]
 801b95c:	60b9      	str	r1, [r7, #8]
 801b95e:	4613      	mov	r3, r2
 801b960:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801b966:	68bb      	ldr	r3, [r7, #8]
 801b968:	781b      	ldrb	r3, [r3, #0]
 801b96a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	785b      	ldrb	r3, [r3, #1]
 801b970:	2b01      	cmp	r3, #1
 801b972:	f040 815c 	bne.w	801bc2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b976:	68bb      	ldr	r3, [r7, #8]
 801b978:	695b      	ldr	r3, [r3, #20]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d132      	bne.n	801b9e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b97e:	69bb      	ldr	r3, [r7, #24]
 801b980:	015a      	lsls	r2, r3, #5
 801b982:	69fb      	ldr	r3, [r7, #28]
 801b984:	4413      	add	r3, r2
 801b986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b98a:	691b      	ldr	r3, [r3, #16]
 801b98c:	69ba      	ldr	r2, [r7, #24]
 801b98e:	0151      	lsls	r1, r2, #5
 801b990:	69fa      	ldr	r2, [r7, #28]
 801b992:	440a      	add	r2, r1
 801b994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b998:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801b99c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801b9a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b9a2:	69bb      	ldr	r3, [r7, #24]
 801b9a4:	015a      	lsls	r2, r3, #5
 801b9a6:	69fb      	ldr	r3, [r7, #28]
 801b9a8:	4413      	add	r3, r2
 801b9aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9ae:	691b      	ldr	r3, [r3, #16]
 801b9b0:	69ba      	ldr	r2, [r7, #24]
 801b9b2:	0151      	lsls	r1, r2, #5
 801b9b4:	69fa      	ldr	r2, [r7, #28]
 801b9b6:	440a      	add	r2, r1
 801b9b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b9c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b9c2:	69bb      	ldr	r3, [r7, #24]
 801b9c4:	015a      	lsls	r2, r3, #5
 801b9c6:	69fb      	ldr	r3, [r7, #28]
 801b9c8:	4413      	add	r3, r2
 801b9ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9ce:	691b      	ldr	r3, [r3, #16]
 801b9d0:	69ba      	ldr	r2, [r7, #24]
 801b9d2:	0151      	lsls	r1, r2, #5
 801b9d4:	69fa      	ldr	r2, [r7, #28]
 801b9d6:	440a      	add	r2, r1
 801b9d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9dc:	0cdb      	lsrs	r3, r3, #19
 801b9de:	04db      	lsls	r3, r3, #19
 801b9e0:	6113      	str	r3, [r2, #16]
 801b9e2:	e074      	b.n	801bace <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b9e4:	69bb      	ldr	r3, [r7, #24]
 801b9e6:	015a      	lsls	r2, r3, #5
 801b9e8:	69fb      	ldr	r3, [r7, #28]
 801b9ea:	4413      	add	r3, r2
 801b9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9f0:	691b      	ldr	r3, [r3, #16]
 801b9f2:	69ba      	ldr	r2, [r7, #24]
 801b9f4:	0151      	lsls	r1, r2, #5
 801b9f6:	69fa      	ldr	r2, [r7, #28]
 801b9f8:	440a      	add	r2, r1
 801b9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9fe:	0cdb      	lsrs	r3, r3, #19
 801ba00:	04db      	lsls	r3, r3, #19
 801ba02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ba04:	69bb      	ldr	r3, [r7, #24]
 801ba06:	015a      	lsls	r2, r3, #5
 801ba08:	69fb      	ldr	r3, [r7, #28]
 801ba0a:	4413      	add	r3, r2
 801ba0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba10:	691b      	ldr	r3, [r3, #16]
 801ba12:	69ba      	ldr	r2, [r7, #24]
 801ba14:	0151      	lsls	r1, r2, #5
 801ba16:	69fa      	ldr	r2, [r7, #28]
 801ba18:	440a      	add	r2, r1
 801ba1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ba22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ba26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801ba28:	69bb      	ldr	r3, [r7, #24]
 801ba2a:	015a      	lsls	r2, r3, #5
 801ba2c:	69fb      	ldr	r3, [r7, #28]
 801ba2e:	4413      	add	r3, r2
 801ba30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba34:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801ba36:	68bb      	ldr	r3, [r7, #8]
 801ba38:	6959      	ldr	r1, [r3, #20]
 801ba3a:	68bb      	ldr	r3, [r7, #8]
 801ba3c:	689b      	ldr	r3, [r3, #8]
 801ba3e:	440b      	add	r3, r1
 801ba40:	1e59      	subs	r1, r3, #1
 801ba42:	68bb      	ldr	r3, [r7, #8]
 801ba44:	689b      	ldr	r3, [r3, #8]
 801ba46:	fbb1 f3f3 	udiv	r3, r1, r3
 801ba4a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801ba4c:	4b9d      	ldr	r3, [pc, #628]	; (801bcc4 <USB_EPStartXfer+0x370>)
 801ba4e:	400b      	ands	r3, r1
 801ba50:	69b9      	ldr	r1, [r7, #24]
 801ba52:	0148      	lsls	r0, r1, #5
 801ba54:	69f9      	ldr	r1, [r7, #28]
 801ba56:	4401      	add	r1, r0
 801ba58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ba5c:	4313      	orrs	r3, r2
 801ba5e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ba60:	69bb      	ldr	r3, [r7, #24]
 801ba62:	015a      	lsls	r2, r3, #5
 801ba64:	69fb      	ldr	r3, [r7, #28]
 801ba66:	4413      	add	r3, r2
 801ba68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba6c:	691a      	ldr	r2, [r3, #16]
 801ba6e:	68bb      	ldr	r3, [r7, #8]
 801ba70:	695b      	ldr	r3, [r3, #20]
 801ba72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ba76:	69b9      	ldr	r1, [r7, #24]
 801ba78:	0148      	lsls	r0, r1, #5
 801ba7a:	69f9      	ldr	r1, [r7, #28]
 801ba7c:	4401      	add	r1, r0
 801ba7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ba82:	4313      	orrs	r3, r2
 801ba84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801ba86:	68bb      	ldr	r3, [r7, #8]
 801ba88:	78db      	ldrb	r3, [r3, #3]
 801ba8a:	2b01      	cmp	r3, #1
 801ba8c:	d11f      	bne.n	801bace <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801ba8e:	69bb      	ldr	r3, [r7, #24]
 801ba90:	015a      	lsls	r2, r3, #5
 801ba92:	69fb      	ldr	r3, [r7, #28]
 801ba94:	4413      	add	r3, r2
 801ba96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba9a:	691b      	ldr	r3, [r3, #16]
 801ba9c:	69ba      	ldr	r2, [r7, #24]
 801ba9e:	0151      	lsls	r1, r2, #5
 801baa0:	69fa      	ldr	r2, [r7, #28]
 801baa2:	440a      	add	r2, r1
 801baa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801baa8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801baac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801baae:	69bb      	ldr	r3, [r7, #24]
 801bab0:	015a      	lsls	r2, r3, #5
 801bab2:	69fb      	ldr	r3, [r7, #28]
 801bab4:	4413      	add	r3, r2
 801bab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801baba:	691b      	ldr	r3, [r3, #16]
 801babc:	69ba      	ldr	r2, [r7, #24]
 801babe:	0151      	lsls	r1, r2, #5
 801bac0:	69fa      	ldr	r2, [r7, #28]
 801bac2:	440a      	add	r2, r1
 801bac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801bacc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801bace:	79fb      	ldrb	r3, [r7, #7]
 801bad0:	2b01      	cmp	r3, #1
 801bad2:	d14b      	bne.n	801bb6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801bad4:	68bb      	ldr	r3, [r7, #8]
 801bad6:	691b      	ldr	r3, [r3, #16]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d009      	beq.n	801baf0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801badc:	69bb      	ldr	r3, [r7, #24]
 801bade:	015a      	lsls	r2, r3, #5
 801bae0:	69fb      	ldr	r3, [r7, #28]
 801bae2:	4413      	add	r3, r2
 801bae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bae8:	461a      	mov	r2, r3
 801baea:	68bb      	ldr	r3, [r7, #8]
 801baec:	691b      	ldr	r3, [r3, #16]
 801baee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801baf0:	68bb      	ldr	r3, [r7, #8]
 801baf2:	78db      	ldrb	r3, [r3, #3]
 801baf4:	2b01      	cmp	r3, #1
 801baf6:	d128      	bne.n	801bb4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801baf8:	69fb      	ldr	r3, [r7, #28]
 801bafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bafe:	689b      	ldr	r3, [r3, #8]
 801bb00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d110      	bne.n	801bb2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801bb08:	69bb      	ldr	r3, [r7, #24]
 801bb0a:	015a      	lsls	r2, r3, #5
 801bb0c:	69fb      	ldr	r3, [r7, #28]
 801bb0e:	4413      	add	r3, r2
 801bb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	69ba      	ldr	r2, [r7, #24]
 801bb18:	0151      	lsls	r1, r2, #5
 801bb1a:	69fa      	ldr	r2, [r7, #28]
 801bb1c:	440a      	add	r2, r1
 801bb1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bb22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801bb26:	6013      	str	r3, [r2, #0]
 801bb28:	e00f      	b.n	801bb4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801bb2a:	69bb      	ldr	r3, [r7, #24]
 801bb2c:	015a      	lsls	r2, r3, #5
 801bb2e:	69fb      	ldr	r3, [r7, #28]
 801bb30:	4413      	add	r3, r2
 801bb32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	69ba      	ldr	r2, [r7, #24]
 801bb3a:	0151      	lsls	r1, r2, #5
 801bb3c:	69fa      	ldr	r2, [r7, #28]
 801bb3e:	440a      	add	r2, r1
 801bb40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bb44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bb48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bb4a:	69bb      	ldr	r3, [r7, #24]
 801bb4c:	015a      	lsls	r2, r3, #5
 801bb4e:	69fb      	ldr	r3, [r7, #28]
 801bb50:	4413      	add	r3, r2
 801bb52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	69ba      	ldr	r2, [r7, #24]
 801bb5a:	0151      	lsls	r1, r2, #5
 801bb5c:	69fa      	ldr	r2, [r7, #28]
 801bb5e:	440a      	add	r2, r1
 801bb60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bb64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bb68:	6013      	str	r3, [r2, #0]
 801bb6a:	e12f      	b.n	801bdcc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bb6c:	69bb      	ldr	r3, [r7, #24]
 801bb6e:	015a      	lsls	r2, r3, #5
 801bb70:	69fb      	ldr	r3, [r7, #28]
 801bb72:	4413      	add	r3, r2
 801bb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	69ba      	ldr	r2, [r7, #24]
 801bb7c:	0151      	lsls	r1, r2, #5
 801bb7e:	69fa      	ldr	r2, [r7, #28]
 801bb80:	440a      	add	r2, r1
 801bb82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bb86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bb8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801bb8c:	68bb      	ldr	r3, [r7, #8]
 801bb8e:	78db      	ldrb	r3, [r3, #3]
 801bb90:	2b01      	cmp	r3, #1
 801bb92:	d015      	beq.n	801bbc0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801bb94:	68bb      	ldr	r3, [r7, #8]
 801bb96:	695b      	ldr	r3, [r3, #20]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	f000 8117 	beq.w	801bdcc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801bb9e:	69fb      	ldr	r3, [r7, #28]
 801bba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801bba6:	68bb      	ldr	r3, [r7, #8]
 801bba8:	781b      	ldrb	r3, [r3, #0]
 801bbaa:	f003 030f 	and.w	r3, r3, #15
 801bbae:	2101      	movs	r1, #1
 801bbb0:	fa01 f303 	lsl.w	r3, r1, r3
 801bbb4:	69f9      	ldr	r1, [r7, #28]
 801bbb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801bbba:	4313      	orrs	r3, r2
 801bbbc:	634b      	str	r3, [r1, #52]	; 0x34
 801bbbe:	e105      	b.n	801bdcc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801bbc0:	69fb      	ldr	r3, [r7, #28]
 801bbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bbc6:	689b      	ldr	r3, [r3, #8]
 801bbc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d110      	bne.n	801bbf2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801bbd0:	69bb      	ldr	r3, [r7, #24]
 801bbd2:	015a      	lsls	r2, r3, #5
 801bbd4:	69fb      	ldr	r3, [r7, #28]
 801bbd6:	4413      	add	r3, r2
 801bbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	69ba      	ldr	r2, [r7, #24]
 801bbe0:	0151      	lsls	r1, r2, #5
 801bbe2:	69fa      	ldr	r2, [r7, #28]
 801bbe4:	440a      	add	r2, r1
 801bbe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bbea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801bbee:	6013      	str	r3, [r2, #0]
 801bbf0:	e00f      	b.n	801bc12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801bbf2:	69bb      	ldr	r3, [r7, #24]
 801bbf4:	015a      	lsls	r2, r3, #5
 801bbf6:	69fb      	ldr	r3, [r7, #28]
 801bbf8:	4413      	add	r3, r2
 801bbfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	69ba      	ldr	r2, [r7, #24]
 801bc02:	0151      	lsls	r1, r2, #5
 801bc04:	69fa      	ldr	r2, [r7, #28]
 801bc06:	440a      	add	r2, r1
 801bc08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bc0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bc10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801bc12:	68bb      	ldr	r3, [r7, #8]
 801bc14:	68d9      	ldr	r1, [r3, #12]
 801bc16:	68bb      	ldr	r3, [r7, #8]
 801bc18:	781a      	ldrb	r2, [r3, #0]
 801bc1a:	68bb      	ldr	r3, [r7, #8]
 801bc1c:	695b      	ldr	r3, [r3, #20]
 801bc1e:	b298      	uxth	r0, r3
 801bc20:	79fb      	ldrb	r3, [r7, #7]
 801bc22:	9300      	str	r3, [sp, #0]
 801bc24:	4603      	mov	r3, r0
 801bc26:	68f8      	ldr	r0, [r7, #12]
 801bc28:	f000 fa2b 	bl	801c082 <USB_WritePacket>
 801bc2c:	e0ce      	b.n	801bdcc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801bc2e:	69bb      	ldr	r3, [r7, #24]
 801bc30:	015a      	lsls	r2, r3, #5
 801bc32:	69fb      	ldr	r3, [r7, #28]
 801bc34:	4413      	add	r3, r2
 801bc36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc3a:	691b      	ldr	r3, [r3, #16]
 801bc3c:	69ba      	ldr	r2, [r7, #24]
 801bc3e:	0151      	lsls	r1, r2, #5
 801bc40:	69fa      	ldr	r2, [r7, #28]
 801bc42:	440a      	add	r2, r1
 801bc44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bc48:	0cdb      	lsrs	r3, r3, #19
 801bc4a:	04db      	lsls	r3, r3, #19
 801bc4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801bc4e:	69bb      	ldr	r3, [r7, #24]
 801bc50:	015a      	lsls	r2, r3, #5
 801bc52:	69fb      	ldr	r3, [r7, #28]
 801bc54:	4413      	add	r3, r2
 801bc56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc5a:	691b      	ldr	r3, [r3, #16]
 801bc5c:	69ba      	ldr	r2, [r7, #24]
 801bc5e:	0151      	lsls	r1, r2, #5
 801bc60:	69fa      	ldr	r2, [r7, #28]
 801bc62:	440a      	add	r2, r1
 801bc64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bc68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801bc6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801bc70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801bc72:	68bb      	ldr	r3, [r7, #8]
 801bc74:	695b      	ldr	r3, [r3, #20]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d126      	bne.n	801bcc8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801bc7a:	69bb      	ldr	r3, [r7, #24]
 801bc7c:	015a      	lsls	r2, r3, #5
 801bc7e:	69fb      	ldr	r3, [r7, #28]
 801bc80:	4413      	add	r3, r2
 801bc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc86:	691a      	ldr	r2, [r3, #16]
 801bc88:	68bb      	ldr	r3, [r7, #8]
 801bc8a:	689b      	ldr	r3, [r3, #8]
 801bc8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bc90:	69b9      	ldr	r1, [r7, #24]
 801bc92:	0148      	lsls	r0, r1, #5
 801bc94:	69f9      	ldr	r1, [r7, #28]
 801bc96:	4401      	add	r1, r0
 801bc98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bc9c:	4313      	orrs	r3, r2
 801bc9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801bca0:	69bb      	ldr	r3, [r7, #24]
 801bca2:	015a      	lsls	r2, r3, #5
 801bca4:	69fb      	ldr	r3, [r7, #28]
 801bca6:	4413      	add	r3, r2
 801bca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bcac:	691b      	ldr	r3, [r3, #16]
 801bcae:	69ba      	ldr	r2, [r7, #24]
 801bcb0:	0151      	lsls	r1, r2, #5
 801bcb2:	69fa      	ldr	r2, [r7, #28]
 801bcb4:	440a      	add	r2, r1
 801bcb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bcba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bcbe:	6113      	str	r3, [r2, #16]
 801bcc0:	e036      	b.n	801bd30 <USB_EPStartXfer+0x3dc>
 801bcc2:	bf00      	nop
 801bcc4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801bcc8:	68bb      	ldr	r3, [r7, #8]
 801bcca:	695a      	ldr	r2, [r3, #20]
 801bccc:	68bb      	ldr	r3, [r7, #8]
 801bcce:	689b      	ldr	r3, [r3, #8]
 801bcd0:	4413      	add	r3, r2
 801bcd2:	1e5a      	subs	r2, r3, #1
 801bcd4:	68bb      	ldr	r3, [r7, #8]
 801bcd6:	689b      	ldr	r3, [r3, #8]
 801bcd8:	fbb2 f3f3 	udiv	r3, r2, r3
 801bcdc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801bcde:	69bb      	ldr	r3, [r7, #24]
 801bce0:	015a      	lsls	r2, r3, #5
 801bce2:	69fb      	ldr	r3, [r7, #28]
 801bce4:	4413      	add	r3, r2
 801bce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bcea:	691a      	ldr	r2, [r3, #16]
 801bcec:	8afb      	ldrh	r3, [r7, #22]
 801bcee:	04d9      	lsls	r1, r3, #19
 801bcf0:	4b39      	ldr	r3, [pc, #228]	; (801bdd8 <USB_EPStartXfer+0x484>)
 801bcf2:	400b      	ands	r3, r1
 801bcf4:	69b9      	ldr	r1, [r7, #24]
 801bcf6:	0148      	lsls	r0, r1, #5
 801bcf8:	69f9      	ldr	r1, [r7, #28]
 801bcfa:	4401      	add	r1, r0
 801bcfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bd00:	4313      	orrs	r3, r2
 801bd02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801bd04:	69bb      	ldr	r3, [r7, #24]
 801bd06:	015a      	lsls	r2, r3, #5
 801bd08:	69fb      	ldr	r3, [r7, #28]
 801bd0a:	4413      	add	r3, r2
 801bd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd10:	691a      	ldr	r2, [r3, #16]
 801bd12:	68bb      	ldr	r3, [r7, #8]
 801bd14:	689b      	ldr	r3, [r3, #8]
 801bd16:	8af9      	ldrh	r1, [r7, #22]
 801bd18:	fb01 f303 	mul.w	r3, r1, r3
 801bd1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bd20:	69b9      	ldr	r1, [r7, #24]
 801bd22:	0148      	lsls	r0, r1, #5
 801bd24:	69f9      	ldr	r1, [r7, #28]
 801bd26:	4401      	add	r1, r0
 801bd28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bd2c:	4313      	orrs	r3, r2
 801bd2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801bd30:	79fb      	ldrb	r3, [r7, #7]
 801bd32:	2b01      	cmp	r3, #1
 801bd34:	d10d      	bne.n	801bd52 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801bd36:	68bb      	ldr	r3, [r7, #8]
 801bd38:	68db      	ldr	r3, [r3, #12]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d009      	beq.n	801bd52 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801bd3e:	68bb      	ldr	r3, [r7, #8]
 801bd40:	68d9      	ldr	r1, [r3, #12]
 801bd42:	69bb      	ldr	r3, [r7, #24]
 801bd44:	015a      	lsls	r2, r3, #5
 801bd46:	69fb      	ldr	r3, [r7, #28]
 801bd48:	4413      	add	r3, r2
 801bd4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd4e:	460a      	mov	r2, r1
 801bd50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801bd52:	68bb      	ldr	r3, [r7, #8]
 801bd54:	78db      	ldrb	r3, [r3, #3]
 801bd56:	2b01      	cmp	r3, #1
 801bd58:	d128      	bne.n	801bdac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801bd5a:	69fb      	ldr	r3, [r7, #28]
 801bd5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bd60:	689b      	ldr	r3, [r3, #8]
 801bd62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d110      	bne.n	801bd8c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801bd6a:	69bb      	ldr	r3, [r7, #24]
 801bd6c:	015a      	lsls	r2, r3, #5
 801bd6e:	69fb      	ldr	r3, [r7, #28]
 801bd70:	4413      	add	r3, r2
 801bd72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	69ba      	ldr	r2, [r7, #24]
 801bd7a:	0151      	lsls	r1, r2, #5
 801bd7c:	69fa      	ldr	r2, [r7, #28]
 801bd7e:	440a      	add	r2, r1
 801bd80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801bd88:	6013      	str	r3, [r2, #0]
 801bd8a:	e00f      	b.n	801bdac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801bd8c:	69bb      	ldr	r3, [r7, #24]
 801bd8e:	015a      	lsls	r2, r3, #5
 801bd90:	69fb      	ldr	r3, [r7, #28]
 801bd92:	4413      	add	r3, r2
 801bd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	69ba      	ldr	r2, [r7, #24]
 801bd9c:	0151      	lsls	r1, r2, #5
 801bd9e:	69fa      	ldr	r2, [r7, #28]
 801bda0:	440a      	add	r2, r1
 801bda2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bda6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bdaa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801bdac:	69bb      	ldr	r3, [r7, #24]
 801bdae:	015a      	lsls	r2, r3, #5
 801bdb0:	69fb      	ldr	r3, [r7, #28]
 801bdb2:	4413      	add	r3, r2
 801bdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	69ba      	ldr	r2, [r7, #24]
 801bdbc:	0151      	lsls	r1, r2, #5
 801bdbe:	69fa      	ldr	r2, [r7, #28]
 801bdc0:	440a      	add	r2, r1
 801bdc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bdc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bdca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bdcc:	2300      	movs	r3, #0
}
 801bdce:	4618      	mov	r0, r3
 801bdd0:	3720      	adds	r7, #32
 801bdd2:	46bd      	mov	sp, r7
 801bdd4:	bd80      	pop	{r7, pc}
 801bdd6:	bf00      	nop
 801bdd8:	1ff80000 	.word	0x1ff80000

0801bddc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801bddc:	b480      	push	{r7}
 801bdde:	b087      	sub	sp, #28
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	60f8      	str	r0, [r7, #12]
 801bde4:	60b9      	str	r1, [r7, #8]
 801bde6:	4613      	mov	r3, r2
 801bde8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801bdee:	68bb      	ldr	r3, [r7, #8]
 801bdf0:	781b      	ldrb	r3, [r3, #0]
 801bdf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801bdf4:	68bb      	ldr	r3, [r7, #8]
 801bdf6:	785b      	ldrb	r3, [r3, #1]
 801bdf8:	2b01      	cmp	r3, #1
 801bdfa:	f040 80cd 	bne.w	801bf98 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801bdfe:	68bb      	ldr	r3, [r7, #8]
 801be00:	695b      	ldr	r3, [r3, #20]
 801be02:	2b00      	cmp	r3, #0
 801be04:	d132      	bne.n	801be6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801be06:	693b      	ldr	r3, [r7, #16]
 801be08:	015a      	lsls	r2, r3, #5
 801be0a:	697b      	ldr	r3, [r7, #20]
 801be0c:	4413      	add	r3, r2
 801be0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801be12:	691b      	ldr	r3, [r3, #16]
 801be14:	693a      	ldr	r2, [r7, #16]
 801be16:	0151      	lsls	r1, r2, #5
 801be18:	697a      	ldr	r2, [r7, #20]
 801be1a:	440a      	add	r2, r1
 801be1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801be20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801be24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801be28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801be2a:	693b      	ldr	r3, [r7, #16]
 801be2c:	015a      	lsls	r2, r3, #5
 801be2e:	697b      	ldr	r3, [r7, #20]
 801be30:	4413      	add	r3, r2
 801be32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801be36:	691b      	ldr	r3, [r3, #16]
 801be38:	693a      	ldr	r2, [r7, #16]
 801be3a:	0151      	lsls	r1, r2, #5
 801be3c:	697a      	ldr	r2, [r7, #20]
 801be3e:	440a      	add	r2, r1
 801be40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801be44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801be48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801be4a:	693b      	ldr	r3, [r7, #16]
 801be4c:	015a      	lsls	r2, r3, #5
 801be4e:	697b      	ldr	r3, [r7, #20]
 801be50:	4413      	add	r3, r2
 801be52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801be56:	691b      	ldr	r3, [r3, #16]
 801be58:	693a      	ldr	r2, [r7, #16]
 801be5a:	0151      	lsls	r1, r2, #5
 801be5c:	697a      	ldr	r2, [r7, #20]
 801be5e:	440a      	add	r2, r1
 801be60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801be64:	0cdb      	lsrs	r3, r3, #19
 801be66:	04db      	lsls	r3, r3, #19
 801be68:	6113      	str	r3, [r2, #16]
 801be6a:	e04e      	b.n	801bf0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801be6c:	693b      	ldr	r3, [r7, #16]
 801be6e:	015a      	lsls	r2, r3, #5
 801be70:	697b      	ldr	r3, [r7, #20]
 801be72:	4413      	add	r3, r2
 801be74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801be78:	691b      	ldr	r3, [r3, #16]
 801be7a:	693a      	ldr	r2, [r7, #16]
 801be7c:	0151      	lsls	r1, r2, #5
 801be7e:	697a      	ldr	r2, [r7, #20]
 801be80:	440a      	add	r2, r1
 801be82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801be86:	0cdb      	lsrs	r3, r3, #19
 801be88:	04db      	lsls	r3, r3, #19
 801be8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801be8c:	693b      	ldr	r3, [r7, #16]
 801be8e:	015a      	lsls	r2, r3, #5
 801be90:	697b      	ldr	r3, [r7, #20]
 801be92:	4413      	add	r3, r2
 801be94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801be98:	691b      	ldr	r3, [r3, #16]
 801be9a:	693a      	ldr	r2, [r7, #16]
 801be9c:	0151      	lsls	r1, r2, #5
 801be9e:	697a      	ldr	r2, [r7, #20]
 801bea0:	440a      	add	r2, r1
 801bea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801beaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801beae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801beb0:	68bb      	ldr	r3, [r7, #8]
 801beb2:	695a      	ldr	r2, [r3, #20]
 801beb4:	68bb      	ldr	r3, [r7, #8]
 801beb6:	689b      	ldr	r3, [r3, #8]
 801beb8:	429a      	cmp	r2, r3
 801beba:	d903      	bls.n	801bec4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801bebc:	68bb      	ldr	r3, [r7, #8]
 801bebe:	689a      	ldr	r2, [r3, #8]
 801bec0:	68bb      	ldr	r3, [r7, #8]
 801bec2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801bec4:	693b      	ldr	r3, [r7, #16]
 801bec6:	015a      	lsls	r2, r3, #5
 801bec8:	697b      	ldr	r3, [r7, #20]
 801beca:	4413      	add	r3, r2
 801becc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bed0:	691b      	ldr	r3, [r3, #16]
 801bed2:	693a      	ldr	r2, [r7, #16]
 801bed4:	0151      	lsls	r1, r2, #5
 801bed6:	697a      	ldr	r2, [r7, #20]
 801bed8:	440a      	add	r2, r1
 801beda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801bee4:	693b      	ldr	r3, [r7, #16]
 801bee6:	015a      	lsls	r2, r3, #5
 801bee8:	697b      	ldr	r3, [r7, #20]
 801beea:	4413      	add	r3, r2
 801beec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bef0:	691a      	ldr	r2, [r3, #16]
 801bef2:	68bb      	ldr	r3, [r7, #8]
 801bef4:	695b      	ldr	r3, [r3, #20]
 801bef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801befa:	6939      	ldr	r1, [r7, #16]
 801befc:	0148      	lsls	r0, r1, #5
 801befe:	6979      	ldr	r1, [r7, #20]
 801bf00:	4401      	add	r1, r0
 801bf02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801bf06:	4313      	orrs	r3, r2
 801bf08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801bf0a:	79fb      	ldrb	r3, [r7, #7]
 801bf0c:	2b01      	cmp	r3, #1
 801bf0e:	d11e      	bne.n	801bf4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801bf10:	68bb      	ldr	r3, [r7, #8]
 801bf12:	691b      	ldr	r3, [r3, #16]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d009      	beq.n	801bf2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801bf18:	693b      	ldr	r3, [r7, #16]
 801bf1a:	015a      	lsls	r2, r3, #5
 801bf1c:	697b      	ldr	r3, [r7, #20]
 801bf1e:	4413      	add	r3, r2
 801bf20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bf24:	461a      	mov	r2, r3
 801bf26:	68bb      	ldr	r3, [r7, #8]
 801bf28:	691b      	ldr	r3, [r3, #16]
 801bf2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bf2c:	693b      	ldr	r3, [r7, #16]
 801bf2e:	015a      	lsls	r2, r3, #5
 801bf30:	697b      	ldr	r3, [r7, #20]
 801bf32:	4413      	add	r3, r2
 801bf34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	693a      	ldr	r2, [r7, #16]
 801bf3c:	0151      	lsls	r1, r2, #5
 801bf3e:	697a      	ldr	r2, [r7, #20]
 801bf40:	440a      	add	r2, r1
 801bf42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bf46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bf4a:	6013      	str	r3, [r2, #0]
 801bf4c:	e092      	b.n	801c074 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bf4e:	693b      	ldr	r3, [r7, #16]
 801bf50:	015a      	lsls	r2, r3, #5
 801bf52:	697b      	ldr	r3, [r7, #20]
 801bf54:	4413      	add	r3, r2
 801bf56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	693a      	ldr	r2, [r7, #16]
 801bf5e:	0151      	lsls	r1, r2, #5
 801bf60:	697a      	ldr	r2, [r7, #20]
 801bf62:	440a      	add	r2, r1
 801bf64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bf68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bf6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801bf6e:	68bb      	ldr	r3, [r7, #8]
 801bf70:	695b      	ldr	r3, [r3, #20]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d07e      	beq.n	801c074 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801bf76:	697b      	ldr	r3, [r7, #20]
 801bf78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bf7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801bf7e:	68bb      	ldr	r3, [r7, #8]
 801bf80:	781b      	ldrb	r3, [r3, #0]
 801bf82:	f003 030f 	and.w	r3, r3, #15
 801bf86:	2101      	movs	r1, #1
 801bf88:	fa01 f303 	lsl.w	r3, r1, r3
 801bf8c:	6979      	ldr	r1, [r7, #20]
 801bf8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801bf92:	4313      	orrs	r3, r2
 801bf94:	634b      	str	r3, [r1, #52]	; 0x34
 801bf96:	e06d      	b.n	801c074 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801bf98:	693b      	ldr	r3, [r7, #16]
 801bf9a:	015a      	lsls	r2, r3, #5
 801bf9c:	697b      	ldr	r3, [r7, #20]
 801bf9e:	4413      	add	r3, r2
 801bfa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bfa4:	691b      	ldr	r3, [r3, #16]
 801bfa6:	693a      	ldr	r2, [r7, #16]
 801bfa8:	0151      	lsls	r1, r2, #5
 801bfaa:	697a      	ldr	r2, [r7, #20]
 801bfac:	440a      	add	r2, r1
 801bfae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bfb2:	0cdb      	lsrs	r3, r3, #19
 801bfb4:	04db      	lsls	r3, r3, #19
 801bfb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801bfb8:	693b      	ldr	r3, [r7, #16]
 801bfba:	015a      	lsls	r2, r3, #5
 801bfbc:	697b      	ldr	r3, [r7, #20]
 801bfbe:	4413      	add	r3, r2
 801bfc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bfc4:	691b      	ldr	r3, [r3, #16]
 801bfc6:	693a      	ldr	r2, [r7, #16]
 801bfc8:	0151      	lsls	r1, r2, #5
 801bfca:	697a      	ldr	r2, [r7, #20]
 801bfcc:	440a      	add	r2, r1
 801bfce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bfd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801bfd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801bfda:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801bfdc:	68bb      	ldr	r3, [r7, #8]
 801bfde:	695b      	ldr	r3, [r3, #20]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d003      	beq.n	801bfec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801bfe4:	68bb      	ldr	r3, [r7, #8]
 801bfe6:	689a      	ldr	r2, [r3, #8]
 801bfe8:	68bb      	ldr	r3, [r7, #8]
 801bfea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801bfec:	693b      	ldr	r3, [r7, #16]
 801bfee:	015a      	lsls	r2, r3, #5
 801bff0:	697b      	ldr	r3, [r7, #20]
 801bff2:	4413      	add	r3, r2
 801bff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bff8:	691b      	ldr	r3, [r3, #16]
 801bffa:	693a      	ldr	r2, [r7, #16]
 801bffc:	0151      	lsls	r1, r2, #5
 801bffe:	697a      	ldr	r2, [r7, #20]
 801c000:	440a      	add	r2, r1
 801c002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c00a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801c00c:	693b      	ldr	r3, [r7, #16]
 801c00e:	015a      	lsls	r2, r3, #5
 801c010:	697b      	ldr	r3, [r7, #20]
 801c012:	4413      	add	r3, r2
 801c014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c018:	691a      	ldr	r2, [r3, #16]
 801c01a:	68bb      	ldr	r3, [r7, #8]
 801c01c:	689b      	ldr	r3, [r3, #8]
 801c01e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c022:	6939      	ldr	r1, [r7, #16]
 801c024:	0148      	lsls	r0, r1, #5
 801c026:	6979      	ldr	r1, [r7, #20]
 801c028:	4401      	add	r1, r0
 801c02a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801c02e:	4313      	orrs	r3, r2
 801c030:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801c032:	79fb      	ldrb	r3, [r7, #7]
 801c034:	2b01      	cmp	r3, #1
 801c036:	d10d      	bne.n	801c054 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801c038:	68bb      	ldr	r3, [r7, #8]
 801c03a:	68db      	ldr	r3, [r3, #12]
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d009      	beq.n	801c054 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801c040:	68bb      	ldr	r3, [r7, #8]
 801c042:	68d9      	ldr	r1, [r3, #12]
 801c044:	693b      	ldr	r3, [r7, #16]
 801c046:	015a      	lsls	r2, r3, #5
 801c048:	697b      	ldr	r3, [r7, #20]
 801c04a:	4413      	add	r3, r2
 801c04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c050:	460a      	mov	r2, r1
 801c052:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801c054:	693b      	ldr	r3, [r7, #16]
 801c056:	015a      	lsls	r2, r3, #5
 801c058:	697b      	ldr	r3, [r7, #20]
 801c05a:	4413      	add	r3, r2
 801c05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	693a      	ldr	r2, [r7, #16]
 801c064:	0151      	lsls	r1, r2, #5
 801c066:	697a      	ldr	r2, [r7, #20]
 801c068:	440a      	add	r2, r1
 801c06a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c06e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801c072:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c074:	2300      	movs	r3, #0
}
 801c076:	4618      	mov	r0, r3
 801c078:	371c      	adds	r7, #28
 801c07a:	46bd      	mov	sp, r7
 801c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c080:	4770      	bx	lr

0801c082 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801c082:	b480      	push	{r7}
 801c084:	b089      	sub	sp, #36	; 0x24
 801c086:	af00      	add	r7, sp, #0
 801c088:	60f8      	str	r0, [r7, #12]
 801c08a:	60b9      	str	r1, [r7, #8]
 801c08c:	4611      	mov	r1, r2
 801c08e:	461a      	mov	r2, r3
 801c090:	460b      	mov	r3, r1
 801c092:	71fb      	strb	r3, [r7, #7]
 801c094:	4613      	mov	r3, r2
 801c096:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801c09c:	68bb      	ldr	r3, [r7, #8]
 801c09e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801c0a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d123      	bne.n	801c0f0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801c0a8:	88bb      	ldrh	r3, [r7, #4]
 801c0aa:	3303      	adds	r3, #3
 801c0ac:	089b      	lsrs	r3, r3, #2
 801c0ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	61bb      	str	r3, [r7, #24]
 801c0b4:	e018      	b.n	801c0e8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801c0b6:	79fb      	ldrb	r3, [r7, #7]
 801c0b8:	031a      	lsls	r2, r3, #12
 801c0ba:	697b      	ldr	r3, [r7, #20]
 801c0bc:	4413      	add	r3, r2
 801c0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801c0c2:	461a      	mov	r2, r3
 801c0c4:	69fb      	ldr	r3, [r7, #28]
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 801c0ca:	69fb      	ldr	r3, [r7, #28]
 801c0cc:	3301      	adds	r3, #1
 801c0ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801c0d0:	69fb      	ldr	r3, [r7, #28]
 801c0d2:	3301      	adds	r3, #1
 801c0d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801c0d6:	69fb      	ldr	r3, [r7, #28]
 801c0d8:	3301      	adds	r3, #1
 801c0da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801c0dc:	69fb      	ldr	r3, [r7, #28]
 801c0de:	3301      	adds	r3, #1
 801c0e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801c0e2:	69bb      	ldr	r3, [r7, #24]
 801c0e4:	3301      	adds	r3, #1
 801c0e6:	61bb      	str	r3, [r7, #24]
 801c0e8:	69ba      	ldr	r2, [r7, #24]
 801c0ea:	693b      	ldr	r3, [r7, #16]
 801c0ec:	429a      	cmp	r2, r3
 801c0ee:	d3e2      	bcc.n	801c0b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801c0f0:	2300      	movs	r3, #0
}
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	3724      	adds	r7, #36	; 0x24
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0fc:	4770      	bx	lr

0801c0fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801c0fe:	b480      	push	{r7}
 801c100:	b08b      	sub	sp, #44	; 0x2c
 801c102:	af00      	add	r7, sp, #0
 801c104:	60f8      	str	r0, [r7, #12]
 801c106:	60b9      	str	r1, [r7, #8]
 801c108:	4613      	mov	r3, r2
 801c10a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801c110:	68bb      	ldr	r3, [r7, #8]
 801c112:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801c114:	88fb      	ldrh	r3, [r7, #6]
 801c116:	089b      	lsrs	r3, r3, #2
 801c118:	b29b      	uxth	r3, r3
 801c11a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801c11c:	88fb      	ldrh	r3, [r7, #6]
 801c11e:	f003 0303 	and.w	r3, r3, #3
 801c122:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801c124:	2300      	movs	r3, #0
 801c126:	623b      	str	r3, [r7, #32]
 801c128:	e014      	b.n	801c154 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801c12a:	69bb      	ldr	r3, [r7, #24]
 801c12c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801c130:	681a      	ldr	r2, [r3, #0]
 801c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c134:	601a      	str	r2, [r3, #0]
    pDest++;
 801c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c138:	3301      	adds	r3, #1
 801c13a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801c13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c13e:	3301      	adds	r3, #1
 801c140:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c144:	3301      	adds	r3, #1
 801c146:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c14a:	3301      	adds	r3, #1
 801c14c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801c14e:	6a3b      	ldr	r3, [r7, #32]
 801c150:	3301      	adds	r3, #1
 801c152:	623b      	str	r3, [r7, #32]
 801c154:	6a3a      	ldr	r2, [r7, #32]
 801c156:	697b      	ldr	r3, [r7, #20]
 801c158:	429a      	cmp	r2, r3
 801c15a:	d3e6      	bcc.n	801c12a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801c15c:	8bfb      	ldrh	r3, [r7, #30]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d01e      	beq.n	801c1a0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801c162:	2300      	movs	r3, #0
 801c164:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801c166:	69bb      	ldr	r3, [r7, #24]
 801c168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801c16c:	461a      	mov	r2, r3
 801c16e:	f107 0310 	add.w	r3, r7, #16
 801c172:	6812      	ldr	r2, [r2, #0]
 801c174:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801c176:	693a      	ldr	r2, [r7, #16]
 801c178:	6a3b      	ldr	r3, [r7, #32]
 801c17a:	b2db      	uxtb	r3, r3
 801c17c:	00db      	lsls	r3, r3, #3
 801c17e:	fa22 f303 	lsr.w	r3, r2, r3
 801c182:	b2da      	uxtb	r2, r3
 801c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c186:	701a      	strb	r2, [r3, #0]
      i++;
 801c188:	6a3b      	ldr	r3, [r7, #32]
 801c18a:	3301      	adds	r3, #1
 801c18c:	623b      	str	r3, [r7, #32]
      pDest++;
 801c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c190:	3301      	adds	r3, #1
 801c192:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801c194:	8bfb      	ldrh	r3, [r7, #30]
 801c196:	3b01      	subs	r3, #1
 801c198:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801c19a:	8bfb      	ldrh	r3, [r7, #30]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d1ea      	bne.n	801c176 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	372c      	adds	r7, #44	; 0x2c
 801c1a6:	46bd      	mov	sp, r7
 801c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ac:	4770      	bx	lr

0801c1ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801c1ae:	b480      	push	{r7}
 801c1b0:	b085      	sub	sp, #20
 801c1b2:	af00      	add	r7, sp, #0
 801c1b4:	6078      	str	r0, [r7, #4]
 801c1b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c1bc:	683b      	ldr	r3, [r7, #0]
 801c1be:	781b      	ldrb	r3, [r3, #0]
 801c1c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801c1c2:	683b      	ldr	r3, [r7, #0]
 801c1c4:	785b      	ldrb	r3, [r3, #1]
 801c1c6:	2b01      	cmp	r3, #1
 801c1c8:	d12c      	bne.n	801c224 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801c1ca:	68bb      	ldr	r3, [r7, #8]
 801c1cc:	015a      	lsls	r2, r3, #5
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	4413      	add	r3, r2
 801c1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	db12      	blt.n	801c202 <USB_EPSetStall+0x54>
 801c1dc:	68bb      	ldr	r3, [r7, #8]
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d00f      	beq.n	801c202 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801c1e2:	68bb      	ldr	r3, [r7, #8]
 801c1e4:	015a      	lsls	r2, r3, #5
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	4413      	add	r3, r2
 801c1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	68ba      	ldr	r2, [r7, #8]
 801c1f2:	0151      	lsls	r1, r2, #5
 801c1f4:	68fa      	ldr	r2, [r7, #12]
 801c1f6:	440a      	add	r2, r1
 801c1f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c1fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801c200:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801c202:	68bb      	ldr	r3, [r7, #8]
 801c204:	015a      	lsls	r2, r3, #5
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	4413      	add	r3, r2
 801c20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	68ba      	ldr	r2, [r7, #8]
 801c212:	0151      	lsls	r1, r2, #5
 801c214:	68fa      	ldr	r2, [r7, #12]
 801c216:	440a      	add	r2, r1
 801c218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c21c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c220:	6013      	str	r3, [r2, #0]
 801c222:	e02b      	b.n	801c27c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801c224:	68bb      	ldr	r3, [r7, #8]
 801c226:	015a      	lsls	r2, r3, #5
 801c228:	68fb      	ldr	r3, [r7, #12]
 801c22a:	4413      	add	r3, r2
 801c22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	2b00      	cmp	r3, #0
 801c234:	db12      	blt.n	801c25c <USB_EPSetStall+0xae>
 801c236:	68bb      	ldr	r3, [r7, #8]
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d00f      	beq.n	801c25c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801c23c:	68bb      	ldr	r3, [r7, #8]
 801c23e:	015a      	lsls	r2, r3, #5
 801c240:	68fb      	ldr	r3, [r7, #12]
 801c242:	4413      	add	r3, r2
 801c244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	68ba      	ldr	r2, [r7, #8]
 801c24c:	0151      	lsls	r1, r2, #5
 801c24e:	68fa      	ldr	r2, [r7, #12]
 801c250:	440a      	add	r2, r1
 801c252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801c25a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801c25c:	68bb      	ldr	r3, [r7, #8]
 801c25e:	015a      	lsls	r2, r3, #5
 801c260:	68fb      	ldr	r3, [r7, #12]
 801c262:	4413      	add	r3, r2
 801c264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	68ba      	ldr	r2, [r7, #8]
 801c26c:	0151      	lsls	r1, r2, #5
 801c26e:	68fa      	ldr	r2, [r7, #12]
 801c270:	440a      	add	r2, r1
 801c272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c27a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c27c:	2300      	movs	r3, #0
}
 801c27e:	4618      	mov	r0, r3
 801c280:	3714      	adds	r7, #20
 801c282:	46bd      	mov	sp, r7
 801c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c288:	4770      	bx	lr

0801c28a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801c28a:	b480      	push	{r7}
 801c28c:	b085      	sub	sp, #20
 801c28e:	af00      	add	r7, sp, #0
 801c290:	6078      	str	r0, [r7, #4]
 801c292:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c298:	683b      	ldr	r3, [r7, #0]
 801c29a:	781b      	ldrb	r3, [r3, #0]
 801c29c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801c29e:	683b      	ldr	r3, [r7, #0]
 801c2a0:	785b      	ldrb	r3, [r3, #1]
 801c2a2:	2b01      	cmp	r3, #1
 801c2a4:	d128      	bne.n	801c2f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801c2a6:	68bb      	ldr	r3, [r7, #8]
 801c2a8:	015a      	lsls	r2, r3, #5
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	4413      	add	r3, r2
 801c2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	68ba      	ldr	r2, [r7, #8]
 801c2b6:	0151      	lsls	r1, r2, #5
 801c2b8:	68fa      	ldr	r2, [r7, #12]
 801c2ba:	440a      	add	r2, r1
 801c2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c2c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c2c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c2c6:	683b      	ldr	r3, [r7, #0]
 801c2c8:	78db      	ldrb	r3, [r3, #3]
 801c2ca:	2b03      	cmp	r3, #3
 801c2cc:	d003      	beq.n	801c2d6 <USB_EPClearStall+0x4c>
 801c2ce:	683b      	ldr	r3, [r7, #0]
 801c2d0:	78db      	ldrb	r3, [r3, #3]
 801c2d2:	2b02      	cmp	r3, #2
 801c2d4:	d138      	bne.n	801c348 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	015a      	lsls	r2, r3, #5
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	4413      	add	r3, r2
 801c2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	68ba      	ldr	r2, [r7, #8]
 801c2e6:	0151      	lsls	r1, r2, #5
 801c2e8:	68fa      	ldr	r2, [r7, #12]
 801c2ea:	440a      	add	r2, r1
 801c2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c2f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c2f4:	6013      	str	r3, [r2, #0]
 801c2f6:	e027      	b.n	801c348 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801c2f8:	68bb      	ldr	r3, [r7, #8]
 801c2fa:	015a      	lsls	r2, r3, #5
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	4413      	add	r3, r2
 801c300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	68ba      	ldr	r2, [r7, #8]
 801c308:	0151      	lsls	r1, r2, #5
 801c30a:	68fa      	ldr	r2, [r7, #12]
 801c30c:	440a      	add	r2, r1
 801c30e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c312:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c316:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c318:	683b      	ldr	r3, [r7, #0]
 801c31a:	78db      	ldrb	r3, [r3, #3]
 801c31c:	2b03      	cmp	r3, #3
 801c31e:	d003      	beq.n	801c328 <USB_EPClearStall+0x9e>
 801c320:	683b      	ldr	r3, [r7, #0]
 801c322:	78db      	ldrb	r3, [r3, #3]
 801c324:	2b02      	cmp	r3, #2
 801c326:	d10f      	bne.n	801c348 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c328:	68bb      	ldr	r3, [r7, #8]
 801c32a:	015a      	lsls	r2, r3, #5
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	4413      	add	r3, r2
 801c330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	68ba      	ldr	r2, [r7, #8]
 801c338:	0151      	lsls	r1, r2, #5
 801c33a:	68fa      	ldr	r2, [r7, #12]
 801c33c:	440a      	add	r2, r1
 801c33e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c346:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801c348:	2300      	movs	r3, #0
}
 801c34a:	4618      	mov	r0, r3
 801c34c:	3714      	adds	r7, #20
 801c34e:	46bd      	mov	sp, r7
 801c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c354:	4770      	bx	lr

0801c356 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801c356:	b480      	push	{r7}
 801c358:	b085      	sub	sp, #20
 801c35a:	af00      	add	r7, sp, #0
 801c35c:	6078      	str	r0, [r7, #4]
 801c35e:	460b      	mov	r3, r1
 801c360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	68fa      	ldr	r2, [r7, #12]
 801c370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c374:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801c378:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c380:	681a      	ldr	r2, [r3, #0]
 801c382:	78fb      	ldrb	r3, [r7, #3]
 801c384:	011b      	lsls	r3, r3, #4
 801c386:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801c38a:	68f9      	ldr	r1, [r7, #12]
 801c38c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c390:	4313      	orrs	r3, r2
 801c392:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801c394:	2300      	movs	r3, #0
}
 801c396:	4618      	mov	r0, r3
 801c398:	3714      	adds	r7, #20
 801c39a:	46bd      	mov	sp, r7
 801c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3a0:	4770      	bx	lr

0801c3a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801c3a2:	b480      	push	{r7}
 801c3a4:	b085      	sub	sp, #20
 801c3a6:	af00      	add	r7, sp, #0
 801c3a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	68fa      	ldr	r2, [r7, #12]
 801c3b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c3bc:	f023 0303 	bic.w	r3, r3, #3
 801c3c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c3c8:	685b      	ldr	r3, [r3, #4]
 801c3ca:	68fa      	ldr	r2, [r7, #12]
 801c3cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c3d0:	f023 0302 	bic.w	r3, r3, #2
 801c3d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c3d6:	2300      	movs	r3, #0
}
 801c3d8:	4618      	mov	r0, r3
 801c3da:	3714      	adds	r7, #20
 801c3dc:	46bd      	mov	sp, r7
 801c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3e2:	4770      	bx	lr

0801c3e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801c3e4:	b480      	push	{r7}
 801c3e6:	b085      	sub	sp, #20
 801c3e8:	af00      	add	r7, sp, #0
 801c3ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	68fa      	ldr	r2, [r7, #12]
 801c3fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c3fe:	f023 0303 	bic.w	r3, r3, #3
 801c402:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c40a:	685b      	ldr	r3, [r3, #4]
 801c40c:	68fa      	ldr	r2, [r7, #12]
 801c40e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c412:	f043 0302 	orr.w	r3, r3, #2
 801c416:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c418:	2300      	movs	r3, #0
}
 801c41a:	4618      	mov	r0, r3
 801c41c:	3714      	adds	r7, #20
 801c41e:	46bd      	mov	sp, r7
 801c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c424:	4770      	bx	lr

0801c426 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801c426:	b480      	push	{r7}
 801c428:	b085      	sub	sp, #20
 801c42a:	af00      	add	r7, sp, #0
 801c42c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	695b      	ldr	r3, [r3, #20]
 801c432:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	699b      	ldr	r3, [r3, #24]
 801c438:	68fa      	ldr	r2, [r7, #12]
 801c43a:	4013      	ands	r3, r2
 801c43c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801c43e:	68fb      	ldr	r3, [r7, #12]
}
 801c440:	4618      	mov	r0, r3
 801c442:	3714      	adds	r7, #20
 801c444:	46bd      	mov	sp, r7
 801c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c44a:	4770      	bx	lr

0801c44c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801c44c:	b480      	push	{r7}
 801c44e:	b085      	sub	sp, #20
 801c450:	af00      	add	r7, sp, #0
 801c452:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c45e:	699b      	ldr	r3, [r3, #24]
 801c460:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c468:	69db      	ldr	r3, [r3, #28]
 801c46a:	68ba      	ldr	r2, [r7, #8]
 801c46c:	4013      	ands	r3, r2
 801c46e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801c470:	68bb      	ldr	r3, [r7, #8]
 801c472:	0c1b      	lsrs	r3, r3, #16
}
 801c474:	4618      	mov	r0, r3
 801c476:	3714      	adds	r7, #20
 801c478:	46bd      	mov	sp, r7
 801c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c47e:	4770      	bx	lr

0801c480 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801c480:	b480      	push	{r7}
 801c482:	b085      	sub	sp, #20
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c492:	699b      	ldr	r3, [r3, #24]
 801c494:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c49c:	69db      	ldr	r3, [r3, #28]
 801c49e:	68ba      	ldr	r2, [r7, #8]
 801c4a0:	4013      	ands	r3, r2
 801c4a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801c4a4:	68bb      	ldr	r3, [r7, #8]
 801c4a6:	b29b      	uxth	r3, r3
}
 801c4a8:	4618      	mov	r0, r3
 801c4aa:	3714      	adds	r7, #20
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4b2:	4770      	bx	lr

0801c4b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c4b4:	b480      	push	{r7}
 801c4b6:	b085      	sub	sp, #20
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
 801c4bc:	460b      	mov	r3, r1
 801c4be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801c4c4:	78fb      	ldrb	r3, [r7, #3]
 801c4c6:	015a      	lsls	r2, r3, #5
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	4413      	add	r3, r2
 801c4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c4d0:	689b      	ldr	r3, [r3, #8]
 801c4d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c4da:	695b      	ldr	r3, [r3, #20]
 801c4dc:	68ba      	ldr	r2, [r7, #8]
 801c4de:	4013      	ands	r3, r2
 801c4e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c4e2:	68bb      	ldr	r3, [r7, #8]
}
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	3714      	adds	r7, #20
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ee:	4770      	bx	lr

0801c4f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c4f0:	b480      	push	{r7}
 801c4f2:	b087      	sub	sp, #28
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	6078      	str	r0, [r7, #4]
 801c4f8:	460b      	mov	r3, r1
 801c4fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801c500:	697b      	ldr	r3, [r7, #20]
 801c502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c506:	691b      	ldr	r3, [r3, #16]
 801c508:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801c50a:	697b      	ldr	r3, [r7, #20]
 801c50c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c512:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801c514:	78fb      	ldrb	r3, [r7, #3]
 801c516:	f003 030f 	and.w	r3, r3, #15
 801c51a:	68fa      	ldr	r2, [r7, #12]
 801c51c:	fa22 f303 	lsr.w	r3, r2, r3
 801c520:	01db      	lsls	r3, r3, #7
 801c522:	b2db      	uxtb	r3, r3
 801c524:	693a      	ldr	r2, [r7, #16]
 801c526:	4313      	orrs	r3, r2
 801c528:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801c52a:	78fb      	ldrb	r3, [r7, #3]
 801c52c:	015a      	lsls	r2, r3, #5
 801c52e:	697b      	ldr	r3, [r7, #20]
 801c530:	4413      	add	r3, r2
 801c532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c536:	689b      	ldr	r3, [r3, #8]
 801c538:	693a      	ldr	r2, [r7, #16]
 801c53a:	4013      	ands	r3, r2
 801c53c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c53e:	68bb      	ldr	r3, [r7, #8]
}
 801c540:	4618      	mov	r0, r3
 801c542:	371c      	adds	r7, #28
 801c544:	46bd      	mov	sp, r7
 801c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c54a:	4770      	bx	lr

0801c54c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801c54c:	b480      	push	{r7}
 801c54e:	b083      	sub	sp, #12
 801c550:	af00      	add	r7, sp, #0
 801c552:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	695b      	ldr	r3, [r3, #20]
 801c558:	f003 0301 	and.w	r3, r3, #1
}
 801c55c:	4618      	mov	r0, r3
 801c55e:	370c      	adds	r7, #12
 801c560:	46bd      	mov	sp, r7
 801c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c566:	4770      	bx	lr

0801c568 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801c568:	b480      	push	{r7}
 801c56a:	b085      	sub	sp, #20
 801c56c:	af00      	add	r7, sp, #0
 801c56e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	68fa      	ldr	r2, [r7, #12]
 801c57e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c582:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801c586:	f023 0307 	bic.w	r3, r3, #7
 801c58a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c592:	685b      	ldr	r3, [r3, #4]
 801c594:	68fa      	ldr	r2, [r7, #12]
 801c596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c59a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c59e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c5a0:	2300      	movs	r3, #0
}
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	3714      	adds	r7, #20
 801c5a6:	46bd      	mov	sp, r7
 801c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ac:	4770      	bx	lr
	...

0801c5b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801c5b0:	b480      	push	{r7}
 801c5b2:	b087      	sub	sp, #28
 801c5b4:	af00      	add	r7, sp, #0
 801c5b6:	60f8      	str	r0, [r7, #12]
 801c5b8:	460b      	mov	r3, r1
 801c5ba:	607a      	str	r2, [r7, #4]
 801c5bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	333c      	adds	r3, #60	; 0x3c
 801c5c6:	3304      	adds	r3, #4
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801c5cc:	693b      	ldr	r3, [r7, #16]
 801c5ce:	4a26      	ldr	r2, [pc, #152]	; (801c668 <USB_EP0_OutStart+0xb8>)
 801c5d0:	4293      	cmp	r3, r2
 801c5d2:	d90a      	bls.n	801c5ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801c5d4:	697b      	ldr	r3, [r7, #20]
 801c5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c5e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c5e4:	d101      	bne.n	801c5ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	e037      	b.n	801c65a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801c5ea:	697b      	ldr	r3, [r7, #20]
 801c5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c5f0:	461a      	mov	r2, r3
 801c5f2:	2300      	movs	r3, #0
 801c5f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801c5f6:	697b      	ldr	r3, [r7, #20]
 801c5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c5fc:	691b      	ldr	r3, [r3, #16]
 801c5fe:	697a      	ldr	r2, [r7, #20]
 801c600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801c60a:	697b      	ldr	r3, [r7, #20]
 801c60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c610:	691b      	ldr	r3, [r3, #16]
 801c612:	697a      	ldr	r2, [r7, #20]
 801c614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c618:	f043 0318 	orr.w	r3, r3, #24
 801c61c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801c61e:	697b      	ldr	r3, [r7, #20]
 801c620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c624:	691b      	ldr	r3, [r3, #16]
 801c626:	697a      	ldr	r2, [r7, #20]
 801c628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c62c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801c630:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801c632:	7afb      	ldrb	r3, [r7, #11]
 801c634:	2b01      	cmp	r3, #1
 801c636:	d10f      	bne.n	801c658 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801c638:	697b      	ldr	r3, [r7, #20]
 801c63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c63e:	461a      	mov	r2, r3
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801c644:	697b      	ldr	r3, [r7, #20]
 801c646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	697a      	ldr	r2, [r7, #20]
 801c64e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c652:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801c656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c658:	2300      	movs	r3, #0
}
 801c65a:	4618      	mov	r0, r3
 801c65c:	371c      	adds	r7, #28
 801c65e:	46bd      	mov	sp, r7
 801c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c664:	4770      	bx	lr
 801c666:	bf00      	nop
 801c668:	4f54300a 	.word	0x4f54300a

0801c66c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801c66c:	b480      	push	{r7}
 801c66e:	b085      	sub	sp, #20
 801c670:	af00      	add	r7, sp, #0
 801c672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801c674:	2300      	movs	r3, #0
 801c676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	3301      	adds	r3, #1
 801c67c:	60fb      	str	r3, [r7, #12]
 801c67e:	4a13      	ldr	r2, [pc, #76]	; (801c6cc <USB_CoreReset+0x60>)
 801c680:	4293      	cmp	r3, r2
 801c682:	d901      	bls.n	801c688 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801c684:	2303      	movs	r3, #3
 801c686:	e01a      	b.n	801c6be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	691b      	ldr	r3, [r3, #16]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	daf3      	bge.n	801c678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801c690:	2300      	movs	r3, #0
 801c692:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	691b      	ldr	r3, [r3, #16]
 801c698:	f043 0201 	orr.w	r2, r3, #1
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	3301      	adds	r3, #1
 801c6a4:	60fb      	str	r3, [r7, #12]
 801c6a6:	4a09      	ldr	r2, [pc, #36]	; (801c6cc <USB_CoreReset+0x60>)
 801c6a8:	4293      	cmp	r3, r2
 801c6aa:	d901      	bls.n	801c6b0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801c6ac:	2303      	movs	r3, #3
 801c6ae:	e006      	b.n	801c6be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	691b      	ldr	r3, [r3, #16]
 801c6b4:	f003 0301 	and.w	r3, r3, #1
 801c6b8:	2b01      	cmp	r3, #1
 801c6ba:	d0f1      	beq.n	801c6a0 <USB_CoreReset+0x34>

  return HAL_OK;
 801c6bc:	2300      	movs	r3, #0
}
 801c6be:	4618      	mov	r0, r3
 801c6c0:	3714      	adds	r7, #20
 801c6c2:	46bd      	mov	sp, r7
 801c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6c8:	4770      	bx	lr
 801c6ca:	bf00      	nop
 801c6cc:	00030d40 	.word	0x00030d40

0801c6d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c6d0:	b580      	push	{r7, lr}
 801c6d2:	b084      	sub	sp, #16
 801c6d4:	af00      	add	r7, sp, #0
 801c6d6:	6078      	str	r0, [r7, #4]
 801c6d8:	460b      	mov	r3, r1
 801c6da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801c6dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801c6e0:	f005 f9d8 	bl	8021a94 <USBD_static_malloc>
 801c6e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d105      	bne.n	801c6f8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801c6f4:	2302      	movs	r3, #2
 801c6f6:	e066      	b.n	801c7c6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	68fa      	ldr	r2, [r7, #12]
 801c6fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	7c1b      	ldrb	r3, [r3, #16]
 801c704:	2b00      	cmp	r3, #0
 801c706:	d119      	bne.n	801c73c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801c708:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c70c:	2202      	movs	r2, #2
 801c70e:	2181      	movs	r1, #129	; 0x81
 801c710:	6878      	ldr	r0, [r7, #4]
 801c712:	f005 f89c 	bl	802184e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	2201      	movs	r2, #1
 801c71a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801c71c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c720:	2202      	movs	r2, #2
 801c722:	2101      	movs	r1, #1
 801c724:	6878      	ldr	r0, [r7, #4]
 801c726:	f005 f892 	bl	802184e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	2201      	movs	r2, #1
 801c72e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	2210      	movs	r2, #16
 801c736:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801c73a:	e016      	b.n	801c76a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801c73c:	2340      	movs	r3, #64	; 0x40
 801c73e:	2202      	movs	r2, #2
 801c740:	2181      	movs	r1, #129	; 0x81
 801c742:	6878      	ldr	r0, [r7, #4]
 801c744:	f005 f883 	bl	802184e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	2201      	movs	r2, #1
 801c74c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801c74e:	2340      	movs	r3, #64	; 0x40
 801c750:	2202      	movs	r2, #2
 801c752:	2101      	movs	r1, #1
 801c754:	6878      	ldr	r0, [r7, #4]
 801c756:	f005 f87a 	bl	802184e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	2201      	movs	r2, #1
 801c75e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	2210      	movs	r2, #16
 801c766:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801c76a:	2308      	movs	r3, #8
 801c76c:	2203      	movs	r2, #3
 801c76e:	2182      	movs	r1, #130	; 0x82
 801c770:	6878      	ldr	r0, [r7, #4]
 801c772:	f005 f86c 	bl	802184e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	2201      	movs	r2, #1
 801c77a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	2200      	movs	r2, #0
 801c78c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	2200      	movs	r2, #0
 801c794:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	7c1b      	ldrb	r3, [r3, #16]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d109      	bne.n	801c7b4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c7a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c7aa:	2101      	movs	r1, #1
 801c7ac:	6878      	ldr	r0, [r7, #4]
 801c7ae:	f005 f93d 	bl	8021a2c <USBD_LL_PrepareReceive>
 801c7b2:	e007      	b.n	801c7c4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c7ba:	2340      	movs	r3, #64	; 0x40
 801c7bc:	2101      	movs	r1, #1
 801c7be:	6878      	ldr	r0, [r7, #4]
 801c7c0:	f005 f934 	bl	8021a2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801c7c4:	2300      	movs	r3, #0
}
 801c7c6:	4618      	mov	r0, r3
 801c7c8:	3710      	adds	r7, #16
 801c7ca:	46bd      	mov	sp, r7
 801c7cc:	bd80      	pop	{r7, pc}

0801c7ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c7ce:	b580      	push	{r7, lr}
 801c7d0:	b082      	sub	sp, #8
 801c7d2:	af00      	add	r7, sp, #0
 801c7d4:	6078      	str	r0, [r7, #4]
 801c7d6:	460b      	mov	r3, r1
 801c7d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801c7da:	2181      	movs	r1, #129	; 0x81
 801c7dc:	6878      	ldr	r0, [r7, #4]
 801c7de:	f005 f85c 	bl	802189a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	2200      	movs	r2, #0
 801c7e6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801c7e8:	2101      	movs	r1, #1
 801c7ea:	6878      	ldr	r0, [r7, #4]
 801c7ec:	f005 f855 	bl	802189a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801c7f8:	2182      	movs	r1, #130	; 0x82
 801c7fa:	6878      	ldr	r0, [r7, #4]
 801c7fc:	f005 f84d 	bl	802189a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	2200      	movs	r2, #0
 801c804:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	2200      	movs	r2, #0
 801c80c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c816:	2b00      	cmp	r3, #0
 801c818:	d00e      	beq.n	801c838 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c820:	685b      	ldr	r3, [r3, #4]
 801c822:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c82a:	4618      	mov	r0, r3
 801c82c:	f005 f940 	bl	8021ab0 <USBD_static_free>
    pdev->pClassData = NULL;
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	2200      	movs	r2, #0
 801c834:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801c838:	2300      	movs	r3, #0
}
 801c83a:	4618      	mov	r0, r3
 801c83c:	3708      	adds	r7, #8
 801c83e:	46bd      	mov	sp, r7
 801c840:	bd80      	pop	{r7, pc}
	...

0801c844 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801c844:	b580      	push	{r7, lr}
 801c846:	b086      	sub	sp, #24
 801c848:	af00      	add	r7, sp, #0
 801c84a:	6078      	str	r0, [r7, #4]
 801c84c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c854:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801c856:	2300      	movs	r3, #0
 801c858:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801c85a:	2300      	movs	r3, #0
 801c85c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801c85e:	2300      	movs	r3, #0
 801c860:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801c862:	693b      	ldr	r3, [r7, #16]
 801c864:	2b00      	cmp	r3, #0
 801c866:	d101      	bne.n	801c86c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801c868:	2303      	movs	r3, #3
 801c86a:	e0af      	b.n	801c9cc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c86c:	683b      	ldr	r3, [r7, #0]
 801c86e:	781b      	ldrb	r3, [r3, #0]
 801c870:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c874:	2b00      	cmp	r3, #0
 801c876:	d03f      	beq.n	801c8f8 <USBD_CDC_Setup+0xb4>
 801c878:	2b20      	cmp	r3, #32
 801c87a:	f040 809f 	bne.w	801c9bc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801c87e:	683b      	ldr	r3, [r7, #0]
 801c880:	88db      	ldrh	r3, [r3, #6]
 801c882:	2b00      	cmp	r3, #0
 801c884:	d02e      	beq.n	801c8e4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801c886:	683b      	ldr	r3, [r7, #0]
 801c888:	781b      	ldrb	r3, [r3, #0]
 801c88a:	b25b      	sxtb	r3, r3
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	da16      	bge.n	801c8be <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c896:	689b      	ldr	r3, [r3, #8]
 801c898:	683a      	ldr	r2, [r7, #0]
 801c89a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801c89c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c89e:	683a      	ldr	r2, [r7, #0]
 801c8a0:	88d2      	ldrh	r2, [r2, #6]
 801c8a2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801c8a4:	683b      	ldr	r3, [r7, #0]
 801c8a6:	88db      	ldrh	r3, [r3, #6]
 801c8a8:	2b07      	cmp	r3, #7
 801c8aa:	bf28      	it	cs
 801c8ac:	2307      	movcs	r3, #7
 801c8ae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801c8b0:	693b      	ldr	r3, [r7, #16]
 801c8b2:	89fa      	ldrh	r2, [r7, #14]
 801c8b4:	4619      	mov	r1, r3
 801c8b6:	6878      	ldr	r0, [r7, #4]
 801c8b8:	f001 fb19 	bl	801deee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801c8bc:	e085      	b.n	801c9ca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801c8be:	683b      	ldr	r3, [r7, #0]
 801c8c0:	785a      	ldrb	r2, [r3, #1]
 801c8c2:	693b      	ldr	r3, [r7, #16]
 801c8c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801c8c8:	683b      	ldr	r3, [r7, #0]
 801c8ca:	88db      	ldrh	r3, [r3, #6]
 801c8cc:	b2da      	uxtb	r2, r3
 801c8ce:	693b      	ldr	r3, [r7, #16]
 801c8d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801c8d4:	6939      	ldr	r1, [r7, #16]
 801c8d6:	683b      	ldr	r3, [r7, #0]
 801c8d8:	88db      	ldrh	r3, [r3, #6]
 801c8da:	461a      	mov	r2, r3
 801c8dc:	6878      	ldr	r0, [r7, #4]
 801c8de:	f001 fb32 	bl	801df46 <USBD_CtlPrepareRx>
      break;
 801c8e2:	e072      	b.n	801c9ca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c8ea:	689b      	ldr	r3, [r3, #8]
 801c8ec:	683a      	ldr	r2, [r7, #0]
 801c8ee:	7850      	ldrb	r0, [r2, #1]
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	6839      	ldr	r1, [r7, #0]
 801c8f4:	4798      	blx	r3
      break;
 801c8f6:	e068      	b.n	801c9ca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c8f8:	683b      	ldr	r3, [r7, #0]
 801c8fa:	785b      	ldrb	r3, [r3, #1]
 801c8fc:	2b0b      	cmp	r3, #11
 801c8fe:	d852      	bhi.n	801c9a6 <USBD_CDC_Setup+0x162>
 801c900:	a201      	add	r2, pc, #4	; (adr r2, 801c908 <USBD_CDC_Setup+0xc4>)
 801c902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c906:	bf00      	nop
 801c908:	0801c939 	.word	0x0801c939
 801c90c:	0801c9b5 	.word	0x0801c9b5
 801c910:	0801c9a7 	.word	0x0801c9a7
 801c914:	0801c9a7 	.word	0x0801c9a7
 801c918:	0801c9a7 	.word	0x0801c9a7
 801c91c:	0801c9a7 	.word	0x0801c9a7
 801c920:	0801c9a7 	.word	0x0801c9a7
 801c924:	0801c9a7 	.word	0x0801c9a7
 801c928:	0801c9a7 	.word	0x0801c9a7
 801c92c:	0801c9a7 	.word	0x0801c9a7
 801c930:	0801c963 	.word	0x0801c963
 801c934:	0801c98d 	.word	0x0801c98d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c93e:	b2db      	uxtb	r3, r3
 801c940:	2b03      	cmp	r3, #3
 801c942:	d107      	bne.n	801c954 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801c944:	f107 030a 	add.w	r3, r7, #10
 801c948:	2202      	movs	r2, #2
 801c94a:	4619      	mov	r1, r3
 801c94c:	6878      	ldr	r0, [r7, #4]
 801c94e:	f001 face 	bl	801deee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c952:	e032      	b.n	801c9ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801c954:	6839      	ldr	r1, [r7, #0]
 801c956:	6878      	ldr	r0, [r7, #4]
 801c958:	f001 fa58 	bl	801de0c <USBD_CtlError>
            ret = USBD_FAIL;
 801c95c:	2303      	movs	r3, #3
 801c95e:	75fb      	strb	r3, [r7, #23]
          break;
 801c960:	e02b      	b.n	801c9ba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c968:	b2db      	uxtb	r3, r3
 801c96a:	2b03      	cmp	r3, #3
 801c96c:	d107      	bne.n	801c97e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801c96e:	f107 030d 	add.w	r3, r7, #13
 801c972:	2201      	movs	r2, #1
 801c974:	4619      	mov	r1, r3
 801c976:	6878      	ldr	r0, [r7, #4]
 801c978:	f001 fab9 	bl	801deee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c97c:	e01d      	b.n	801c9ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801c97e:	6839      	ldr	r1, [r7, #0]
 801c980:	6878      	ldr	r0, [r7, #4]
 801c982:	f001 fa43 	bl	801de0c <USBD_CtlError>
            ret = USBD_FAIL;
 801c986:	2303      	movs	r3, #3
 801c988:	75fb      	strb	r3, [r7, #23]
          break;
 801c98a:	e016      	b.n	801c9ba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c992:	b2db      	uxtb	r3, r3
 801c994:	2b03      	cmp	r3, #3
 801c996:	d00f      	beq.n	801c9b8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801c998:	6839      	ldr	r1, [r7, #0]
 801c99a:	6878      	ldr	r0, [r7, #4]
 801c99c:	f001 fa36 	bl	801de0c <USBD_CtlError>
            ret = USBD_FAIL;
 801c9a0:	2303      	movs	r3, #3
 801c9a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801c9a4:	e008      	b.n	801c9b8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801c9a6:	6839      	ldr	r1, [r7, #0]
 801c9a8:	6878      	ldr	r0, [r7, #4]
 801c9aa:	f001 fa2f 	bl	801de0c <USBD_CtlError>
          ret = USBD_FAIL;
 801c9ae:	2303      	movs	r3, #3
 801c9b0:	75fb      	strb	r3, [r7, #23]
          break;
 801c9b2:	e002      	b.n	801c9ba <USBD_CDC_Setup+0x176>
          break;
 801c9b4:	bf00      	nop
 801c9b6:	e008      	b.n	801c9ca <USBD_CDC_Setup+0x186>
          break;
 801c9b8:	bf00      	nop
      }
      break;
 801c9ba:	e006      	b.n	801c9ca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801c9bc:	6839      	ldr	r1, [r7, #0]
 801c9be:	6878      	ldr	r0, [r7, #4]
 801c9c0:	f001 fa24 	bl	801de0c <USBD_CtlError>
      ret = USBD_FAIL;
 801c9c4:	2303      	movs	r3, #3
 801c9c6:	75fb      	strb	r3, [r7, #23]
      break;
 801c9c8:	bf00      	nop
  }

  return (uint8_t)ret;
 801c9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 801c9cc:	4618      	mov	r0, r3
 801c9ce:	3718      	adds	r7, #24
 801c9d0:	46bd      	mov	sp, r7
 801c9d2:	bd80      	pop	{r7, pc}

0801c9d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c9d4:	b580      	push	{r7, lr}
 801c9d6:	b084      	sub	sp, #16
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	6078      	str	r0, [r7, #4]
 801c9dc:	460b      	mov	r3, r1
 801c9de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c9e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d101      	bne.n	801c9f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801c9f2:	2303      	movs	r3, #3
 801c9f4:	e04f      	b.n	801ca96 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c9fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801c9fe:	78fa      	ldrb	r2, [r7, #3]
 801ca00:	6879      	ldr	r1, [r7, #4]
 801ca02:	4613      	mov	r3, r2
 801ca04:	009b      	lsls	r3, r3, #2
 801ca06:	4413      	add	r3, r2
 801ca08:	009b      	lsls	r3, r3, #2
 801ca0a:	440b      	add	r3, r1
 801ca0c:	3318      	adds	r3, #24
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d029      	beq.n	801ca68 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801ca14:	78fa      	ldrb	r2, [r7, #3]
 801ca16:	6879      	ldr	r1, [r7, #4]
 801ca18:	4613      	mov	r3, r2
 801ca1a:	009b      	lsls	r3, r3, #2
 801ca1c:	4413      	add	r3, r2
 801ca1e:	009b      	lsls	r3, r3, #2
 801ca20:	440b      	add	r3, r1
 801ca22:	3318      	adds	r3, #24
 801ca24:	681a      	ldr	r2, [r3, #0]
 801ca26:	78f9      	ldrb	r1, [r7, #3]
 801ca28:	68f8      	ldr	r0, [r7, #12]
 801ca2a:	460b      	mov	r3, r1
 801ca2c:	00db      	lsls	r3, r3, #3
 801ca2e:	1a5b      	subs	r3, r3, r1
 801ca30:	009b      	lsls	r3, r3, #2
 801ca32:	4403      	add	r3, r0
 801ca34:	3344      	adds	r3, #68	; 0x44
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	fbb2 f1f3 	udiv	r1, r2, r3
 801ca3c:	fb03 f301 	mul.w	r3, r3, r1
 801ca40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d110      	bne.n	801ca68 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801ca46:	78fa      	ldrb	r2, [r7, #3]
 801ca48:	6879      	ldr	r1, [r7, #4]
 801ca4a:	4613      	mov	r3, r2
 801ca4c:	009b      	lsls	r3, r3, #2
 801ca4e:	4413      	add	r3, r2
 801ca50:	009b      	lsls	r3, r3, #2
 801ca52:	440b      	add	r3, r1
 801ca54:	3318      	adds	r3, #24
 801ca56:	2200      	movs	r2, #0
 801ca58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ca5a:	78f9      	ldrb	r1, [r7, #3]
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	2200      	movs	r2, #0
 801ca60:	6878      	ldr	r0, [r7, #4]
 801ca62:	f004 ffc2 	bl	80219ea <USBD_LL_Transmit>
 801ca66:	e015      	b.n	801ca94 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801ca68:	68bb      	ldr	r3, [r7, #8]
 801ca6a:	2200      	movs	r2, #0
 801ca6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ca76:	691b      	ldr	r3, [r3, #16]
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d00b      	beq.n	801ca94 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ca82:	691b      	ldr	r3, [r3, #16]
 801ca84:	68ba      	ldr	r2, [r7, #8]
 801ca86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801ca8a:	68ba      	ldr	r2, [r7, #8]
 801ca8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801ca90:	78fa      	ldrb	r2, [r7, #3]
 801ca92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801ca94:	2300      	movs	r3, #0
}
 801ca96:	4618      	mov	r0, r3
 801ca98:	3710      	adds	r7, #16
 801ca9a:	46bd      	mov	sp, r7
 801ca9c:	bd80      	pop	{r7, pc}

0801ca9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ca9e:	b580      	push	{r7, lr}
 801caa0:	b084      	sub	sp, #16
 801caa2:	af00      	add	r7, sp, #0
 801caa4:	6078      	str	r0, [r7, #4]
 801caa6:	460b      	mov	r3, r1
 801caa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cab0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d101      	bne.n	801cac0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801cabc:	2303      	movs	r3, #3
 801cabe:	e015      	b.n	801caec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801cac0:	78fb      	ldrb	r3, [r7, #3]
 801cac2:	4619      	mov	r1, r3
 801cac4:	6878      	ldr	r0, [r7, #4]
 801cac6:	f004 ffd2 	bl	8021a6e <USBD_LL_GetRxDataSize>
 801caca:	4602      	mov	r2, r0
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cad8:	68db      	ldr	r3, [r3, #12]
 801cada:	68fa      	ldr	r2, [r7, #12]
 801cadc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801cae0:	68fa      	ldr	r2, [r7, #12]
 801cae2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801cae6:	4611      	mov	r1, r2
 801cae8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801caea:	2300      	movs	r3, #0
}
 801caec:	4618      	mov	r0, r3
 801caee:	3710      	adds	r7, #16
 801caf0:	46bd      	mov	sp, r7
 801caf2:	bd80      	pop	{r7, pc}

0801caf4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801caf4:	b580      	push	{r7, lr}
 801caf6:	b084      	sub	sp, #16
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cb02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d101      	bne.n	801cb0e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801cb0a:	2303      	movs	r3, #3
 801cb0c:	e01b      	b.n	801cb46 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d015      	beq.n	801cb44 <USBD_CDC_EP0_RxReady+0x50>
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801cb1e:	2bff      	cmp	r3, #255	; 0xff
 801cb20:	d010      	beq.n	801cb44 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cb28:	689b      	ldr	r3, [r3, #8]
 801cb2a:	68fa      	ldr	r2, [r7, #12]
 801cb2c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801cb30:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801cb32:	68fa      	ldr	r2, [r7, #12]
 801cb34:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801cb38:	b292      	uxth	r2, r2
 801cb3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801cb3c:	68fb      	ldr	r3, [r7, #12]
 801cb3e:	22ff      	movs	r2, #255	; 0xff
 801cb40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801cb44:	2300      	movs	r3, #0
}
 801cb46:	4618      	mov	r0, r3
 801cb48:	3710      	adds	r7, #16
 801cb4a:	46bd      	mov	sp, r7
 801cb4c:	bd80      	pop	{r7, pc}
	...

0801cb50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801cb50:	b480      	push	{r7}
 801cb52:	b083      	sub	sp, #12
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	2243      	movs	r2, #67	; 0x43
 801cb5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801cb5e:	4b03      	ldr	r3, [pc, #12]	; (801cb6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801cb60:	4618      	mov	r0, r3
 801cb62:	370c      	adds	r7, #12
 801cb64:	46bd      	mov	sp, r7
 801cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb6a:	4770      	bx	lr
 801cb6c:	200000b0 	.word	0x200000b0

0801cb70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801cb70:	b480      	push	{r7}
 801cb72:	b083      	sub	sp, #12
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	2243      	movs	r2, #67	; 0x43
 801cb7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801cb7e:	4b03      	ldr	r3, [pc, #12]	; (801cb8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801cb80:	4618      	mov	r0, r3
 801cb82:	370c      	adds	r7, #12
 801cb84:	46bd      	mov	sp, r7
 801cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8a:	4770      	bx	lr
 801cb8c:	2000006c 	.word	0x2000006c

0801cb90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801cb90:	b480      	push	{r7}
 801cb92:	b083      	sub	sp, #12
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	2243      	movs	r2, #67	; 0x43
 801cb9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801cb9e:	4b03      	ldr	r3, [pc, #12]	; (801cbac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801cba0:	4618      	mov	r0, r3
 801cba2:	370c      	adds	r7, #12
 801cba4:	46bd      	mov	sp, r7
 801cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbaa:	4770      	bx	lr
 801cbac:	200000f4 	.word	0x200000f4

0801cbb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801cbb0:	b480      	push	{r7}
 801cbb2:	b083      	sub	sp, #12
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	220a      	movs	r2, #10
 801cbbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801cbbe:	4b03      	ldr	r3, [pc, #12]	; (801cbcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	370c      	adds	r7, #12
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbca:	4770      	bx	lr
 801cbcc:	20000028 	.word	0x20000028

0801cbd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801cbd0:	b480      	push	{r7}
 801cbd2:	b083      	sub	sp, #12
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	6078      	str	r0, [r7, #4]
 801cbd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801cbda:	683b      	ldr	r3, [r7, #0]
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d101      	bne.n	801cbe4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801cbe0:	2303      	movs	r3, #3
 801cbe2:	e004      	b.n	801cbee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	683a      	ldr	r2, [r7, #0]
 801cbe8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801cbec:	2300      	movs	r3, #0
}
 801cbee:	4618      	mov	r0, r3
 801cbf0:	370c      	adds	r7, #12
 801cbf2:	46bd      	mov	sp, r7
 801cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbf8:	4770      	bx	lr

0801cbfa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801cbfa:	b480      	push	{r7}
 801cbfc:	b087      	sub	sp, #28
 801cbfe:	af00      	add	r7, sp, #0
 801cc00:	60f8      	str	r0, [r7, #12]
 801cc02:	60b9      	str	r1, [r7, #8]
 801cc04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cc0c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801cc0e:	697b      	ldr	r3, [r7, #20]
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d101      	bne.n	801cc18 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801cc14:	2303      	movs	r3, #3
 801cc16:	e008      	b.n	801cc2a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801cc18:	697b      	ldr	r3, [r7, #20]
 801cc1a:	68ba      	ldr	r2, [r7, #8]
 801cc1c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801cc20:	697b      	ldr	r3, [r7, #20]
 801cc22:	687a      	ldr	r2, [r7, #4]
 801cc24:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801cc28:	2300      	movs	r3, #0
}
 801cc2a:	4618      	mov	r0, r3
 801cc2c:	371c      	adds	r7, #28
 801cc2e:	46bd      	mov	sp, r7
 801cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc34:	4770      	bx	lr

0801cc36 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801cc36:	b480      	push	{r7}
 801cc38:	b085      	sub	sp, #20
 801cc3a:	af00      	add	r7, sp, #0
 801cc3c:	6078      	str	r0, [r7, #4]
 801cc3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cc46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d101      	bne.n	801cc52 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801cc4e:	2303      	movs	r3, #3
 801cc50:	e004      	b.n	801cc5c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	683a      	ldr	r2, [r7, #0]
 801cc56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801cc5a:	2300      	movs	r3, #0
}
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	3714      	adds	r7, #20
 801cc60:	46bd      	mov	sp, r7
 801cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc66:	4770      	bx	lr

0801cc68 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801cc68:	b580      	push	{r7, lr}
 801cc6a:	b084      	sub	sp, #16
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cc76:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801cc78:	2301      	movs	r3, #1
 801cc7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d101      	bne.n	801cc8a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801cc86:	2303      	movs	r3, #3
 801cc88:	e01a      	b.n	801ccc0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801cc8a:	68bb      	ldr	r3, [r7, #8]
 801cc8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d114      	bne.n	801ccbe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801cc94:	68bb      	ldr	r3, [r7, #8]
 801cc96:	2201      	movs	r2, #1
 801cc98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801cc9c:	68bb      	ldr	r3, [r7, #8]
 801cc9e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801cca6:	68bb      	ldr	r3, [r7, #8]
 801cca8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801ccac:	68bb      	ldr	r3, [r7, #8]
 801ccae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801ccb2:	2181      	movs	r1, #129	; 0x81
 801ccb4:	6878      	ldr	r0, [r7, #4]
 801ccb6:	f004 fe98 	bl	80219ea <USBD_LL_Transmit>

    ret = USBD_OK;
 801ccba:	2300      	movs	r3, #0
 801ccbc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801ccbe:	7bfb      	ldrb	r3, [r7, #15]
}
 801ccc0:	4618      	mov	r0, r3
 801ccc2:	3710      	adds	r7, #16
 801ccc4:	46bd      	mov	sp, r7
 801ccc6:	bd80      	pop	{r7, pc}

0801ccc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801ccc8:	b580      	push	{r7, lr}
 801ccca:	b084      	sub	sp, #16
 801cccc:	af00      	add	r7, sp, #0
 801ccce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ccd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d101      	bne.n	801cce6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801cce2:	2303      	movs	r3, #3
 801cce4:	e016      	b.n	801cd14 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	7c1b      	ldrb	r3, [r3, #16]
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d109      	bne.n	801cd02 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ccf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ccf8:	2101      	movs	r1, #1
 801ccfa:	6878      	ldr	r0, [r7, #4]
 801ccfc:	f004 fe96 	bl	8021a2c <USBD_LL_PrepareReceive>
 801cd00:	e007      	b.n	801cd12 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801cd08:	2340      	movs	r3, #64	; 0x40
 801cd0a:	2101      	movs	r1, #1
 801cd0c:	6878      	ldr	r0, [r7, #4]
 801cd0e:	f004 fe8d 	bl	8021a2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801cd12:	2300      	movs	r3, #0
}
 801cd14:	4618      	mov	r0, r3
 801cd16:	3710      	adds	r7, #16
 801cd18:	46bd      	mov	sp, r7
 801cd1a:	bd80      	pop	{r7, pc}

0801cd1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b086      	sub	sp, #24
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	60f8      	str	r0, [r7, #12]
 801cd24:	60b9      	str	r1, [r7, #8]
 801cd26:	4613      	mov	r3, r2
 801cd28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801cd2a:	68fb      	ldr	r3, [r7, #12]
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d101      	bne.n	801cd34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801cd30:	2303      	movs	r3, #3
 801cd32:	e01f      	b.n	801cd74 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801cd34:	68fb      	ldr	r3, [r7, #12]
 801cd36:	2200      	movs	r2, #0
 801cd38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	2200      	movs	r2, #0
 801cd40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	2200      	movs	r2, #0
 801cd48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801cd4c:	68bb      	ldr	r3, [r7, #8]
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d003      	beq.n	801cd5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801cd52:	68fb      	ldr	r3, [r7, #12]
 801cd54:	68ba      	ldr	r2, [r7, #8]
 801cd56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801cd5a:	68fb      	ldr	r3, [r7, #12]
 801cd5c:	2201      	movs	r2, #1
 801cd5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	79fa      	ldrb	r2, [r7, #7]
 801cd66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801cd68:	68f8      	ldr	r0, [r7, #12]
 801cd6a:	f004 fd09 	bl	8021780 <USBD_LL_Init>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	75fb      	strb	r3, [r7, #23]

  return ret;
 801cd72:	7dfb      	ldrb	r3, [r7, #23]
}
 801cd74:	4618      	mov	r0, r3
 801cd76:	3718      	adds	r7, #24
 801cd78:	46bd      	mov	sp, r7
 801cd7a:	bd80      	pop	{r7, pc}

0801cd7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801cd7c:	b580      	push	{r7, lr}
 801cd7e:	b084      	sub	sp, #16
 801cd80:	af00      	add	r7, sp, #0
 801cd82:	6078      	str	r0, [r7, #4]
 801cd84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801cd86:	2300      	movs	r3, #0
 801cd88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801cd8a:	683b      	ldr	r3, [r7, #0]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d101      	bne.n	801cd94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801cd90:	2303      	movs	r3, #3
 801cd92:	e016      	b.n	801cdc2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	683a      	ldr	r2, [r7, #0]
 801cd98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d00b      	beq.n	801cdc0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cdb0:	f107 020e 	add.w	r2, r7, #14
 801cdb4:	4610      	mov	r0, r2
 801cdb6:	4798      	blx	r3
 801cdb8:	4602      	mov	r2, r0
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801cdc0:	2300      	movs	r3, #0
}
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	3710      	adds	r7, #16
 801cdc6:	46bd      	mov	sp, r7
 801cdc8:	bd80      	pop	{r7, pc}

0801cdca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801cdca:	b580      	push	{r7, lr}
 801cdcc:	b082      	sub	sp, #8
 801cdce:	af00      	add	r7, sp, #0
 801cdd0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801cdd2:	6878      	ldr	r0, [r7, #4]
 801cdd4:	f004 fd20 	bl	8021818 <USBD_LL_Start>
 801cdd8:	4603      	mov	r3, r0
}
 801cdda:	4618      	mov	r0, r3
 801cddc:	3708      	adds	r7, #8
 801cdde:	46bd      	mov	sp, r7
 801cde0:	bd80      	pop	{r7, pc}

0801cde2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801cde2:	b480      	push	{r7}
 801cde4:	b083      	sub	sp, #12
 801cde6:	af00      	add	r7, sp, #0
 801cde8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801cdea:	2300      	movs	r3, #0
}
 801cdec:	4618      	mov	r0, r3
 801cdee:	370c      	adds	r7, #12
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdf6:	4770      	bx	lr

0801cdf8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	b084      	sub	sp, #16
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	6078      	str	r0, [r7, #4]
 801ce00:	460b      	mov	r3, r1
 801ce02:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801ce04:	2303      	movs	r3, #3
 801ce06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d009      	beq.n	801ce26 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	78fa      	ldrb	r2, [r7, #3]
 801ce1c:	4611      	mov	r1, r2
 801ce1e:	6878      	ldr	r0, [r7, #4]
 801ce20:	4798      	blx	r3
 801ce22:	4603      	mov	r3, r0
 801ce24:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801ce26:	7bfb      	ldrb	r3, [r7, #15]
}
 801ce28:	4618      	mov	r0, r3
 801ce2a:	3710      	adds	r7, #16
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd80      	pop	{r7, pc}

0801ce30 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b082      	sub	sp, #8
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	6078      	str	r0, [r7, #4]
 801ce38:	460b      	mov	r3, r1
 801ce3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d007      	beq.n	801ce56 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ce4c:	685b      	ldr	r3, [r3, #4]
 801ce4e:	78fa      	ldrb	r2, [r7, #3]
 801ce50:	4611      	mov	r1, r2
 801ce52:	6878      	ldr	r0, [r7, #4]
 801ce54:	4798      	blx	r3
  }

  return USBD_OK;
 801ce56:	2300      	movs	r3, #0
}
 801ce58:	4618      	mov	r0, r3
 801ce5a:	3708      	adds	r7, #8
 801ce5c:	46bd      	mov	sp, r7
 801ce5e:	bd80      	pop	{r7, pc}

0801ce60 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801ce60:	b580      	push	{r7, lr}
 801ce62:	b084      	sub	sp, #16
 801ce64:	af00      	add	r7, sp, #0
 801ce66:	6078      	str	r0, [r7, #4]
 801ce68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ce70:	6839      	ldr	r1, [r7, #0]
 801ce72:	4618      	mov	r0, r3
 801ce74:	f000 ff90 	bl	801dd98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	2201      	movs	r2, #1
 801ce7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801ce86:	461a      	mov	r2, r3
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801ce94:	f003 031f 	and.w	r3, r3, #31
 801ce98:	2b02      	cmp	r3, #2
 801ce9a:	d01a      	beq.n	801ced2 <USBD_LL_SetupStage+0x72>
 801ce9c:	2b02      	cmp	r3, #2
 801ce9e:	d822      	bhi.n	801cee6 <USBD_LL_SetupStage+0x86>
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d002      	beq.n	801ceaa <USBD_LL_SetupStage+0x4a>
 801cea4:	2b01      	cmp	r3, #1
 801cea6:	d00a      	beq.n	801cebe <USBD_LL_SetupStage+0x5e>
 801cea8:	e01d      	b.n	801cee6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ceb0:	4619      	mov	r1, r3
 801ceb2:	6878      	ldr	r0, [r7, #4]
 801ceb4:	f000 fa62 	bl	801d37c <USBD_StdDevReq>
 801ceb8:	4603      	mov	r3, r0
 801ceba:	73fb      	strb	r3, [r7, #15]
      break;
 801cebc:	e020      	b.n	801cf00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801cec4:	4619      	mov	r1, r3
 801cec6:	6878      	ldr	r0, [r7, #4]
 801cec8:	f000 fac6 	bl	801d458 <USBD_StdItfReq>
 801cecc:	4603      	mov	r3, r0
 801cece:	73fb      	strb	r3, [r7, #15]
      break;
 801ced0:	e016      	b.n	801cf00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ced8:	4619      	mov	r1, r3
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f000 fb05 	bl	801d4ea <USBD_StdEPReq>
 801cee0:	4603      	mov	r3, r0
 801cee2:	73fb      	strb	r3, [r7, #15]
      break;
 801cee4:	e00c      	b.n	801cf00 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801ceec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801cef0:	b2db      	uxtb	r3, r3
 801cef2:	4619      	mov	r1, r3
 801cef4:	6878      	ldr	r0, [r7, #4]
 801cef6:	f004 fcef 	bl	80218d8 <USBD_LL_StallEP>
 801cefa:	4603      	mov	r3, r0
 801cefc:	73fb      	strb	r3, [r7, #15]
      break;
 801cefe:	bf00      	nop
  }

  return ret;
 801cf00:	7bfb      	ldrb	r3, [r7, #15]
}
 801cf02:	4618      	mov	r0, r3
 801cf04:	3710      	adds	r7, #16
 801cf06:	46bd      	mov	sp, r7
 801cf08:	bd80      	pop	{r7, pc}

0801cf0a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801cf0a:	b580      	push	{r7, lr}
 801cf0c:	b086      	sub	sp, #24
 801cf0e:	af00      	add	r7, sp, #0
 801cf10:	60f8      	str	r0, [r7, #12]
 801cf12:	460b      	mov	r3, r1
 801cf14:	607a      	str	r2, [r7, #4]
 801cf16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801cf18:	7afb      	ldrb	r3, [r7, #11]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d138      	bne.n	801cf90 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801cf1e:	68fb      	ldr	r3, [r7, #12]
 801cf20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801cf24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801cf2c:	2b03      	cmp	r3, #3
 801cf2e:	d14a      	bne.n	801cfc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801cf30:	693b      	ldr	r3, [r7, #16]
 801cf32:	689a      	ldr	r2, [r3, #8]
 801cf34:	693b      	ldr	r3, [r7, #16]
 801cf36:	68db      	ldr	r3, [r3, #12]
 801cf38:	429a      	cmp	r2, r3
 801cf3a:	d913      	bls.n	801cf64 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801cf3c:	693b      	ldr	r3, [r7, #16]
 801cf3e:	689a      	ldr	r2, [r3, #8]
 801cf40:	693b      	ldr	r3, [r7, #16]
 801cf42:	68db      	ldr	r3, [r3, #12]
 801cf44:	1ad2      	subs	r2, r2, r3
 801cf46:	693b      	ldr	r3, [r7, #16]
 801cf48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801cf4a:	693b      	ldr	r3, [r7, #16]
 801cf4c:	68da      	ldr	r2, [r3, #12]
 801cf4e:	693b      	ldr	r3, [r7, #16]
 801cf50:	689b      	ldr	r3, [r3, #8]
 801cf52:	4293      	cmp	r3, r2
 801cf54:	bf28      	it	cs
 801cf56:	4613      	movcs	r3, r2
 801cf58:	461a      	mov	r2, r3
 801cf5a:	6879      	ldr	r1, [r7, #4]
 801cf5c:	68f8      	ldr	r0, [r7, #12]
 801cf5e:	f001 f80f 	bl	801df80 <USBD_CtlContinueRx>
 801cf62:	e030      	b.n	801cfc6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cf64:	68fb      	ldr	r3, [r7, #12]
 801cf66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cf6a:	b2db      	uxtb	r3, r3
 801cf6c:	2b03      	cmp	r3, #3
 801cf6e:	d10b      	bne.n	801cf88 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cf76:	691b      	ldr	r3, [r3, #16]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d005      	beq.n	801cf88 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cf82:	691b      	ldr	r3, [r3, #16]
 801cf84:	68f8      	ldr	r0, [r7, #12]
 801cf86:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801cf88:	68f8      	ldr	r0, [r7, #12]
 801cf8a:	f001 f80a 	bl	801dfa2 <USBD_CtlSendStatus>
 801cf8e:	e01a      	b.n	801cfc6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cf96:	b2db      	uxtb	r3, r3
 801cf98:	2b03      	cmp	r3, #3
 801cf9a:	d114      	bne.n	801cfc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cfa2:	699b      	ldr	r3, [r3, #24]
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d00e      	beq.n	801cfc6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cfae:	699b      	ldr	r3, [r3, #24]
 801cfb0:	7afa      	ldrb	r2, [r7, #11]
 801cfb2:	4611      	mov	r1, r2
 801cfb4:	68f8      	ldr	r0, [r7, #12]
 801cfb6:	4798      	blx	r3
 801cfb8:	4603      	mov	r3, r0
 801cfba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801cfbc:	7dfb      	ldrb	r3, [r7, #23]
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	d001      	beq.n	801cfc6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801cfc2:	7dfb      	ldrb	r3, [r7, #23]
 801cfc4:	e000      	b.n	801cfc8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801cfc6:	2300      	movs	r3, #0
}
 801cfc8:	4618      	mov	r0, r3
 801cfca:	3718      	adds	r7, #24
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	bd80      	pop	{r7, pc}

0801cfd0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b086      	sub	sp, #24
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	60f8      	str	r0, [r7, #12]
 801cfd8:	460b      	mov	r3, r1
 801cfda:	607a      	str	r2, [r7, #4]
 801cfdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801cfde:	7afb      	ldrb	r3, [r7, #11]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d16b      	bne.n	801d0bc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	3314      	adds	r3, #20
 801cfe8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801cff0:	2b02      	cmp	r3, #2
 801cff2:	d156      	bne.n	801d0a2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801cff4:	693b      	ldr	r3, [r7, #16]
 801cff6:	689a      	ldr	r2, [r3, #8]
 801cff8:	693b      	ldr	r3, [r7, #16]
 801cffa:	68db      	ldr	r3, [r3, #12]
 801cffc:	429a      	cmp	r2, r3
 801cffe:	d914      	bls.n	801d02a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801d000:	693b      	ldr	r3, [r7, #16]
 801d002:	689a      	ldr	r2, [r3, #8]
 801d004:	693b      	ldr	r3, [r7, #16]
 801d006:	68db      	ldr	r3, [r3, #12]
 801d008:	1ad2      	subs	r2, r2, r3
 801d00a:	693b      	ldr	r3, [r7, #16]
 801d00c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801d00e:	693b      	ldr	r3, [r7, #16]
 801d010:	689b      	ldr	r3, [r3, #8]
 801d012:	461a      	mov	r2, r3
 801d014:	6879      	ldr	r1, [r7, #4]
 801d016:	68f8      	ldr	r0, [r7, #12]
 801d018:	f000 ff84 	bl	801df24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d01c:	2300      	movs	r3, #0
 801d01e:	2200      	movs	r2, #0
 801d020:	2100      	movs	r1, #0
 801d022:	68f8      	ldr	r0, [r7, #12]
 801d024:	f004 fd02 	bl	8021a2c <USBD_LL_PrepareReceive>
 801d028:	e03b      	b.n	801d0a2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801d02a:	693b      	ldr	r3, [r7, #16]
 801d02c:	68da      	ldr	r2, [r3, #12]
 801d02e:	693b      	ldr	r3, [r7, #16]
 801d030:	689b      	ldr	r3, [r3, #8]
 801d032:	429a      	cmp	r2, r3
 801d034:	d11c      	bne.n	801d070 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801d036:	693b      	ldr	r3, [r7, #16]
 801d038:	685a      	ldr	r2, [r3, #4]
 801d03a:	693b      	ldr	r3, [r7, #16]
 801d03c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801d03e:	429a      	cmp	r2, r3
 801d040:	d316      	bcc.n	801d070 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801d042:	693b      	ldr	r3, [r7, #16]
 801d044:	685a      	ldr	r2, [r3, #4]
 801d046:	68fb      	ldr	r3, [r7, #12]
 801d048:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801d04c:	429a      	cmp	r2, r3
 801d04e:	d20f      	bcs.n	801d070 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801d050:	2200      	movs	r2, #0
 801d052:	2100      	movs	r1, #0
 801d054:	68f8      	ldr	r0, [r7, #12]
 801d056:	f000 ff65 	bl	801df24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	2200      	movs	r2, #0
 801d05e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d062:	2300      	movs	r3, #0
 801d064:	2200      	movs	r2, #0
 801d066:	2100      	movs	r1, #0
 801d068:	68f8      	ldr	r0, [r7, #12]
 801d06a:	f004 fcdf 	bl	8021a2c <USBD_LL_PrepareReceive>
 801d06e:	e018      	b.n	801d0a2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d076:	b2db      	uxtb	r3, r3
 801d078:	2b03      	cmp	r3, #3
 801d07a:	d10b      	bne.n	801d094 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801d07c:	68fb      	ldr	r3, [r7, #12]
 801d07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d082:	68db      	ldr	r3, [r3, #12]
 801d084:	2b00      	cmp	r3, #0
 801d086:	d005      	beq.n	801d094 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801d088:	68fb      	ldr	r3, [r7, #12]
 801d08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d08e:	68db      	ldr	r3, [r3, #12]
 801d090:	68f8      	ldr	r0, [r7, #12]
 801d092:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801d094:	2180      	movs	r1, #128	; 0x80
 801d096:	68f8      	ldr	r0, [r7, #12]
 801d098:	f004 fc1e 	bl	80218d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801d09c:	68f8      	ldr	r0, [r7, #12]
 801d09e:	f000 ff93 	bl	801dfc8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801d0a2:	68fb      	ldr	r3, [r7, #12]
 801d0a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801d0a8:	2b01      	cmp	r3, #1
 801d0aa:	d122      	bne.n	801d0f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801d0ac:	68f8      	ldr	r0, [r7, #12]
 801d0ae:	f7ff fe98 	bl	801cde2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801d0b2:	68fb      	ldr	r3, [r7, #12]
 801d0b4:	2200      	movs	r2, #0
 801d0b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801d0ba:	e01a      	b.n	801d0f2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d0bc:	68fb      	ldr	r3, [r7, #12]
 801d0be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d0c2:	b2db      	uxtb	r3, r3
 801d0c4:	2b03      	cmp	r3, #3
 801d0c6:	d114      	bne.n	801d0f2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d0ce:	695b      	ldr	r3, [r3, #20]
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d00e      	beq.n	801d0f2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801d0d4:	68fb      	ldr	r3, [r7, #12]
 801d0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d0da:	695b      	ldr	r3, [r3, #20]
 801d0dc:	7afa      	ldrb	r2, [r7, #11]
 801d0de:	4611      	mov	r1, r2
 801d0e0:	68f8      	ldr	r0, [r7, #12]
 801d0e2:	4798      	blx	r3
 801d0e4:	4603      	mov	r3, r0
 801d0e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801d0e8:	7dfb      	ldrb	r3, [r7, #23]
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d001      	beq.n	801d0f2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801d0ee:	7dfb      	ldrb	r3, [r7, #23]
 801d0f0:	e000      	b.n	801d0f4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801d0f2:	2300      	movs	r3, #0
}
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	3718      	adds	r7, #24
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	bd80      	pop	{r7, pc}

0801d0fc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801d0fc:	b580      	push	{r7, lr}
 801d0fe:	b082      	sub	sp, #8
 801d100:	af00      	add	r7, sp, #0
 801d102:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	2201      	movs	r2, #1
 801d108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	2200      	movs	r2, #0
 801d110:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	2200      	movs	r2, #0
 801d118:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	2200      	movs	r2, #0
 801d11e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d101      	bne.n	801d130 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801d12c:	2303      	movs	r3, #3
 801d12e:	e02f      	b.n	801d190 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d136:	2b00      	cmp	r3, #0
 801d138:	d00f      	beq.n	801d15a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d140:	685b      	ldr	r3, [r3, #4]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d009      	beq.n	801d15a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d14c:	685b      	ldr	r3, [r3, #4]
 801d14e:	687a      	ldr	r2, [r7, #4]
 801d150:	6852      	ldr	r2, [r2, #4]
 801d152:	b2d2      	uxtb	r2, r2
 801d154:	4611      	mov	r1, r2
 801d156:	6878      	ldr	r0, [r7, #4]
 801d158:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801d15a:	2340      	movs	r3, #64	; 0x40
 801d15c:	2200      	movs	r2, #0
 801d15e:	2100      	movs	r1, #0
 801d160:	6878      	ldr	r0, [r7, #4]
 801d162:	f004 fb74 	bl	802184e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	2201      	movs	r2, #1
 801d16a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	2240      	movs	r2, #64	; 0x40
 801d172:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801d176:	2340      	movs	r3, #64	; 0x40
 801d178:	2200      	movs	r2, #0
 801d17a:	2180      	movs	r1, #128	; 0x80
 801d17c:	6878      	ldr	r0, [r7, #4]
 801d17e:	f004 fb66 	bl	802184e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	2201      	movs	r2, #1
 801d186:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	2240      	movs	r2, #64	; 0x40
 801d18c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801d18e:	2300      	movs	r3, #0
}
 801d190:	4618      	mov	r0, r3
 801d192:	3708      	adds	r7, #8
 801d194:	46bd      	mov	sp, r7
 801d196:	bd80      	pop	{r7, pc}

0801d198 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801d198:	b480      	push	{r7}
 801d19a:	b083      	sub	sp, #12
 801d19c:	af00      	add	r7, sp, #0
 801d19e:	6078      	str	r0, [r7, #4]
 801d1a0:	460b      	mov	r3, r1
 801d1a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	78fa      	ldrb	r2, [r7, #3]
 801d1a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801d1aa:	2300      	movs	r3, #0
}
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	370c      	adds	r7, #12
 801d1b0:	46bd      	mov	sp, r7
 801d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1b6:	4770      	bx	lr

0801d1b8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801d1b8:	b480      	push	{r7}
 801d1ba:	b083      	sub	sp, #12
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d1c6:	b2da      	uxtb	r2, r3
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	2204      	movs	r2, #4
 801d1d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801d1d6:	2300      	movs	r3, #0
}
 801d1d8:	4618      	mov	r0, r3
 801d1da:	370c      	adds	r7, #12
 801d1dc:	46bd      	mov	sp, r7
 801d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1e2:	4770      	bx	lr

0801d1e4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801d1e4:	b480      	push	{r7}
 801d1e6:	b083      	sub	sp, #12
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d1f2:	b2db      	uxtb	r3, r3
 801d1f4:	2b04      	cmp	r3, #4
 801d1f6:	d106      	bne.n	801d206 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801d1fe:	b2da      	uxtb	r2, r3
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801d206:	2300      	movs	r3, #0
}
 801d208:	4618      	mov	r0, r3
 801d20a:	370c      	adds	r7, #12
 801d20c:	46bd      	mov	sp, r7
 801d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d212:	4770      	bx	lr

0801d214 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801d214:	b580      	push	{r7, lr}
 801d216:	b082      	sub	sp, #8
 801d218:	af00      	add	r7, sp, #0
 801d21a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d222:	2b00      	cmp	r3, #0
 801d224:	d101      	bne.n	801d22a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801d226:	2303      	movs	r3, #3
 801d228:	e012      	b.n	801d250 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d230:	b2db      	uxtb	r3, r3
 801d232:	2b03      	cmp	r3, #3
 801d234:	d10b      	bne.n	801d24e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d23c:	69db      	ldr	r3, [r3, #28]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d005      	beq.n	801d24e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d248:	69db      	ldr	r3, [r3, #28]
 801d24a:	6878      	ldr	r0, [r7, #4]
 801d24c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801d24e:	2300      	movs	r3, #0
}
 801d250:	4618      	mov	r0, r3
 801d252:	3708      	adds	r7, #8
 801d254:	46bd      	mov	sp, r7
 801d256:	bd80      	pop	{r7, pc}

0801d258 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801d258:	b580      	push	{r7, lr}
 801d25a:	b082      	sub	sp, #8
 801d25c:	af00      	add	r7, sp, #0
 801d25e:	6078      	str	r0, [r7, #4]
 801d260:	460b      	mov	r3, r1
 801d262:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d101      	bne.n	801d272 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801d26e:	2303      	movs	r3, #3
 801d270:	e014      	b.n	801d29c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d278:	b2db      	uxtb	r3, r3
 801d27a:	2b03      	cmp	r3, #3
 801d27c:	d10d      	bne.n	801d29a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d284:	6a1b      	ldr	r3, [r3, #32]
 801d286:	2b00      	cmp	r3, #0
 801d288:	d007      	beq.n	801d29a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d290:	6a1b      	ldr	r3, [r3, #32]
 801d292:	78fa      	ldrb	r2, [r7, #3]
 801d294:	4611      	mov	r1, r2
 801d296:	6878      	ldr	r0, [r7, #4]
 801d298:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801d29a:	2300      	movs	r3, #0
}
 801d29c:	4618      	mov	r0, r3
 801d29e:	3708      	adds	r7, #8
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	bd80      	pop	{r7, pc}

0801d2a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801d2a4:	b580      	push	{r7, lr}
 801d2a6:	b082      	sub	sp, #8
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	6078      	str	r0, [r7, #4]
 801d2ac:	460b      	mov	r3, r1
 801d2ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d101      	bne.n	801d2be <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801d2ba:	2303      	movs	r3, #3
 801d2bc:	e014      	b.n	801d2e8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d2c4:	b2db      	uxtb	r3, r3
 801d2c6:	2b03      	cmp	r3, #3
 801d2c8:	d10d      	bne.n	801d2e6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d007      	beq.n	801d2e6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2de:	78fa      	ldrb	r2, [r7, #3]
 801d2e0:	4611      	mov	r1, r2
 801d2e2:	6878      	ldr	r0, [r7, #4]
 801d2e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801d2e6:	2300      	movs	r3, #0
}
 801d2e8:	4618      	mov	r0, r3
 801d2ea:	3708      	adds	r7, #8
 801d2ec:	46bd      	mov	sp, r7
 801d2ee:	bd80      	pop	{r7, pc}

0801d2f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801d2f0:	b480      	push	{r7}
 801d2f2:	b083      	sub	sp, #12
 801d2f4:	af00      	add	r7, sp, #0
 801d2f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801d2f8:	2300      	movs	r3, #0
}
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	370c      	adds	r7, #12
 801d2fe:	46bd      	mov	sp, r7
 801d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d304:	4770      	bx	lr

0801d306 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801d306:	b580      	push	{r7, lr}
 801d308:	b082      	sub	sp, #8
 801d30a:	af00      	add	r7, sp, #0
 801d30c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	2201      	movs	r2, #1
 801d312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d009      	beq.n	801d334 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d326:	685b      	ldr	r3, [r3, #4]
 801d328:	687a      	ldr	r2, [r7, #4]
 801d32a:	6852      	ldr	r2, [r2, #4]
 801d32c:	b2d2      	uxtb	r2, r2
 801d32e:	4611      	mov	r1, r2
 801d330:	6878      	ldr	r0, [r7, #4]
 801d332:	4798      	blx	r3
  }

  return USBD_OK;
 801d334:	2300      	movs	r3, #0
}
 801d336:	4618      	mov	r0, r3
 801d338:	3708      	adds	r7, #8
 801d33a:	46bd      	mov	sp, r7
 801d33c:	bd80      	pop	{r7, pc}

0801d33e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801d33e:	b480      	push	{r7}
 801d340:	b087      	sub	sp, #28
 801d342:	af00      	add	r7, sp, #0
 801d344:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801d34a:	697b      	ldr	r3, [r7, #20]
 801d34c:	781b      	ldrb	r3, [r3, #0]
 801d34e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801d350:	697b      	ldr	r3, [r7, #20]
 801d352:	3301      	adds	r3, #1
 801d354:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801d356:	697b      	ldr	r3, [r7, #20]
 801d358:	781b      	ldrb	r3, [r3, #0]
 801d35a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801d35c:	8a3b      	ldrh	r3, [r7, #16]
 801d35e:	021b      	lsls	r3, r3, #8
 801d360:	b21a      	sxth	r2, r3
 801d362:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d366:	4313      	orrs	r3, r2
 801d368:	b21b      	sxth	r3, r3
 801d36a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801d36c:	89fb      	ldrh	r3, [r7, #14]
}
 801d36e:	4618      	mov	r0, r3
 801d370:	371c      	adds	r7, #28
 801d372:	46bd      	mov	sp, r7
 801d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d378:	4770      	bx	lr
	...

0801d37c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b084      	sub	sp, #16
 801d380:	af00      	add	r7, sp, #0
 801d382:	6078      	str	r0, [r7, #4]
 801d384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801d386:	2300      	movs	r3, #0
 801d388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d38a:	683b      	ldr	r3, [r7, #0]
 801d38c:	781b      	ldrb	r3, [r3, #0]
 801d38e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d392:	2b40      	cmp	r3, #64	; 0x40
 801d394:	d005      	beq.n	801d3a2 <USBD_StdDevReq+0x26>
 801d396:	2b40      	cmp	r3, #64	; 0x40
 801d398:	d853      	bhi.n	801d442 <USBD_StdDevReq+0xc6>
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d00b      	beq.n	801d3b6 <USBD_StdDevReq+0x3a>
 801d39e:	2b20      	cmp	r3, #32
 801d3a0:	d14f      	bne.n	801d442 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d3a8:	689b      	ldr	r3, [r3, #8]
 801d3aa:	6839      	ldr	r1, [r7, #0]
 801d3ac:	6878      	ldr	r0, [r7, #4]
 801d3ae:	4798      	blx	r3
 801d3b0:	4603      	mov	r3, r0
 801d3b2:	73fb      	strb	r3, [r7, #15]
      break;
 801d3b4:	e04a      	b.n	801d44c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801d3b6:	683b      	ldr	r3, [r7, #0]
 801d3b8:	785b      	ldrb	r3, [r3, #1]
 801d3ba:	2b09      	cmp	r3, #9
 801d3bc:	d83b      	bhi.n	801d436 <USBD_StdDevReq+0xba>
 801d3be:	a201      	add	r2, pc, #4	; (adr r2, 801d3c4 <USBD_StdDevReq+0x48>)
 801d3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d3c4:	0801d419 	.word	0x0801d419
 801d3c8:	0801d42d 	.word	0x0801d42d
 801d3cc:	0801d437 	.word	0x0801d437
 801d3d0:	0801d423 	.word	0x0801d423
 801d3d4:	0801d437 	.word	0x0801d437
 801d3d8:	0801d3f7 	.word	0x0801d3f7
 801d3dc:	0801d3ed 	.word	0x0801d3ed
 801d3e0:	0801d437 	.word	0x0801d437
 801d3e4:	0801d40f 	.word	0x0801d40f
 801d3e8:	0801d401 	.word	0x0801d401
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801d3ec:	6839      	ldr	r1, [r7, #0]
 801d3ee:	6878      	ldr	r0, [r7, #4]
 801d3f0:	f000 f9de 	bl	801d7b0 <USBD_GetDescriptor>
          break;
 801d3f4:	e024      	b.n	801d440 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801d3f6:	6839      	ldr	r1, [r7, #0]
 801d3f8:	6878      	ldr	r0, [r7, #4]
 801d3fa:	f000 fb43 	bl	801da84 <USBD_SetAddress>
          break;
 801d3fe:	e01f      	b.n	801d440 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801d400:	6839      	ldr	r1, [r7, #0]
 801d402:	6878      	ldr	r0, [r7, #4]
 801d404:	f000 fb82 	bl	801db0c <USBD_SetConfig>
 801d408:	4603      	mov	r3, r0
 801d40a:	73fb      	strb	r3, [r7, #15]
          break;
 801d40c:	e018      	b.n	801d440 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801d40e:	6839      	ldr	r1, [r7, #0]
 801d410:	6878      	ldr	r0, [r7, #4]
 801d412:	f000 fc21 	bl	801dc58 <USBD_GetConfig>
          break;
 801d416:	e013      	b.n	801d440 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801d418:	6839      	ldr	r1, [r7, #0]
 801d41a:	6878      	ldr	r0, [r7, #4]
 801d41c:	f000 fc52 	bl	801dcc4 <USBD_GetStatus>
          break;
 801d420:	e00e      	b.n	801d440 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801d422:	6839      	ldr	r1, [r7, #0]
 801d424:	6878      	ldr	r0, [r7, #4]
 801d426:	f000 fc81 	bl	801dd2c <USBD_SetFeature>
          break;
 801d42a:	e009      	b.n	801d440 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801d42c:	6839      	ldr	r1, [r7, #0]
 801d42e:	6878      	ldr	r0, [r7, #4]
 801d430:	f000 fc90 	bl	801dd54 <USBD_ClrFeature>
          break;
 801d434:	e004      	b.n	801d440 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801d436:	6839      	ldr	r1, [r7, #0]
 801d438:	6878      	ldr	r0, [r7, #4]
 801d43a:	f000 fce7 	bl	801de0c <USBD_CtlError>
          break;
 801d43e:	bf00      	nop
      }
      break;
 801d440:	e004      	b.n	801d44c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801d442:	6839      	ldr	r1, [r7, #0]
 801d444:	6878      	ldr	r0, [r7, #4]
 801d446:	f000 fce1 	bl	801de0c <USBD_CtlError>
      break;
 801d44a:	bf00      	nop
  }

  return ret;
 801d44c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d44e:	4618      	mov	r0, r3
 801d450:	3710      	adds	r7, #16
 801d452:	46bd      	mov	sp, r7
 801d454:	bd80      	pop	{r7, pc}
 801d456:	bf00      	nop

0801d458 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d458:	b580      	push	{r7, lr}
 801d45a:	b084      	sub	sp, #16
 801d45c:	af00      	add	r7, sp, #0
 801d45e:	6078      	str	r0, [r7, #4]
 801d460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801d462:	2300      	movs	r3, #0
 801d464:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d466:	683b      	ldr	r3, [r7, #0]
 801d468:	781b      	ldrb	r3, [r3, #0]
 801d46a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d46e:	2b40      	cmp	r3, #64	; 0x40
 801d470:	d005      	beq.n	801d47e <USBD_StdItfReq+0x26>
 801d472:	2b40      	cmp	r3, #64	; 0x40
 801d474:	d82f      	bhi.n	801d4d6 <USBD_StdItfReq+0x7e>
 801d476:	2b00      	cmp	r3, #0
 801d478:	d001      	beq.n	801d47e <USBD_StdItfReq+0x26>
 801d47a:	2b20      	cmp	r3, #32
 801d47c:	d12b      	bne.n	801d4d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d484:	b2db      	uxtb	r3, r3
 801d486:	3b01      	subs	r3, #1
 801d488:	2b02      	cmp	r3, #2
 801d48a:	d81d      	bhi.n	801d4c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801d48c:	683b      	ldr	r3, [r7, #0]
 801d48e:	889b      	ldrh	r3, [r3, #4]
 801d490:	b2db      	uxtb	r3, r3
 801d492:	2b01      	cmp	r3, #1
 801d494:	d813      	bhi.n	801d4be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d49c:	689b      	ldr	r3, [r3, #8]
 801d49e:	6839      	ldr	r1, [r7, #0]
 801d4a0:	6878      	ldr	r0, [r7, #4]
 801d4a2:	4798      	blx	r3
 801d4a4:	4603      	mov	r3, r0
 801d4a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801d4a8:	683b      	ldr	r3, [r7, #0]
 801d4aa:	88db      	ldrh	r3, [r3, #6]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d110      	bne.n	801d4d2 <USBD_StdItfReq+0x7a>
 801d4b0:	7bfb      	ldrb	r3, [r7, #15]
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d10d      	bne.n	801d4d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801d4b6:	6878      	ldr	r0, [r7, #4]
 801d4b8:	f000 fd73 	bl	801dfa2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801d4bc:	e009      	b.n	801d4d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801d4be:	6839      	ldr	r1, [r7, #0]
 801d4c0:	6878      	ldr	r0, [r7, #4]
 801d4c2:	f000 fca3 	bl	801de0c <USBD_CtlError>
          break;
 801d4c6:	e004      	b.n	801d4d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801d4c8:	6839      	ldr	r1, [r7, #0]
 801d4ca:	6878      	ldr	r0, [r7, #4]
 801d4cc:	f000 fc9e 	bl	801de0c <USBD_CtlError>
          break;
 801d4d0:	e000      	b.n	801d4d4 <USBD_StdItfReq+0x7c>
          break;
 801d4d2:	bf00      	nop
      }
      break;
 801d4d4:	e004      	b.n	801d4e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801d4d6:	6839      	ldr	r1, [r7, #0]
 801d4d8:	6878      	ldr	r0, [r7, #4]
 801d4da:	f000 fc97 	bl	801de0c <USBD_CtlError>
      break;
 801d4de:	bf00      	nop
  }

  return ret;
 801d4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	3710      	adds	r7, #16
 801d4e6:	46bd      	mov	sp, r7
 801d4e8:	bd80      	pop	{r7, pc}

0801d4ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d4ea:	b580      	push	{r7, lr}
 801d4ec:	b084      	sub	sp, #16
 801d4ee:	af00      	add	r7, sp, #0
 801d4f0:	6078      	str	r0, [r7, #4]
 801d4f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801d4f8:	683b      	ldr	r3, [r7, #0]
 801d4fa:	889b      	ldrh	r3, [r3, #4]
 801d4fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d4fe:	683b      	ldr	r3, [r7, #0]
 801d500:	781b      	ldrb	r3, [r3, #0]
 801d502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d506:	2b40      	cmp	r3, #64	; 0x40
 801d508:	d007      	beq.n	801d51a <USBD_StdEPReq+0x30>
 801d50a:	2b40      	cmp	r3, #64	; 0x40
 801d50c:	f200 8145 	bhi.w	801d79a <USBD_StdEPReq+0x2b0>
 801d510:	2b00      	cmp	r3, #0
 801d512:	d00c      	beq.n	801d52e <USBD_StdEPReq+0x44>
 801d514:	2b20      	cmp	r3, #32
 801d516:	f040 8140 	bne.w	801d79a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d520:	689b      	ldr	r3, [r3, #8]
 801d522:	6839      	ldr	r1, [r7, #0]
 801d524:	6878      	ldr	r0, [r7, #4]
 801d526:	4798      	blx	r3
 801d528:	4603      	mov	r3, r0
 801d52a:	73fb      	strb	r3, [r7, #15]
      break;
 801d52c:	e13a      	b.n	801d7a4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801d52e:	683b      	ldr	r3, [r7, #0]
 801d530:	785b      	ldrb	r3, [r3, #1]
 801d532:	2b03      	cmp	r3, #3
 801d534:	d007      	beq.n	801d546 <USBD_StdEPReq+0x5c>
 801d536:	2b03      	cmp	r3, #3
 801d538:	f300 8129 	bgt.w	801d78e <USBD_StdEPReq+0x2a4>
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	d07f      	beq.n	801d640 <USBD_StdEPReq+0x156>
 801d540:	2b01      	cmp	r3, #1
 801d542:	d03c      	beq.n	801d5be <USBD_StdEPReq+0xd4>
 801d544:	e123      	b.n	801d78e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d54c:	b2db      	uxtb	r3, r3
 801d54e:	2b02      	cmp	r3, #2
 801d550:	d002      	beq.n	801d558 <USBD_StdEPReq+0x6e>
 801d552:	2b03      	cmp	r3, #3
 801d554:	d016      	beq.n	801d584 <USBD_StdEPReq+0x9a>
 801d556:	e02c      	b.n	801d5b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d558:	7bbb      	ldrb	r3, [r7, #14]
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d00d      	beq.n	801d57a <USBD_StdEPReq+0x90>
 801d55e:	7bbb      	ldrb	r3, [r7, #14]
 801d560:	2b80      	cmp	r3, #128	; 0x80
 801d562:	d00a      	beq.n	801d57a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801d564:	7bbb      	ldrb	r3, [r7, #14]
 801d566:	4619      	mov	r1, r3
 801d568:	6878      	ldr	r0, [r7, #4]
 801d56a:	f004 f9b5 	bl	80218d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801d56e:	2180      	movs	r1, #128	; 0x80
 801d570:	6878      	ldr	r0, [r7, #4]
 801d572:	f004 f9b1 	bl	80218d8 <USBD_LL_StallEP>
 801d576:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801d578:	e020      	b.n	801d5bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801d57a:	6839      	ldr	r1, [r7, #0]
 801d57c:	6878      	ldr	r0, [r7, #4]
 801d57e:	f000 fc45 	bl	801de0c <USBD_CtlError>
              break;
 801d582:	e01b      	b.n	801d5bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801d584:	683b      	ldr	r3, [r7, #0]
 801d586:	885b      	ldrh	r3, [r3, #2]
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d10e      	bne.n	801d5aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801d58c:	7bbb      	ldrb	r3, [r7, #14]
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d00b      	beq.n	801d5aa <USBD_StdEPReq+0xc0>
 801d592:	7bbb      	ldrb	r3, [r7, #14]
 801d594:	2b80      	cmp	r3, #128	; 0x80
 801d596:	d008      	beq.n	801d5aa <USBD_StdEPReq+0xc0>
 801d598:	683b      	ldr	r3, [r7, #0]
 801d59a:	88db      	ldrh	r3, [r3, #6]
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d104      	bne.n	801d5aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801d5a0:	7bbb      	ldrb	r3, [r7, #14]
 801d5a2:	4619      	mov	r1, r3
 801d5a4:	6878      	ldr	r0, [r7, #4]
 801d5a6:	f004 f997 	bl	80218d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801d5aa:	6878      	ldr	r0, [r7, #4]
 801d5ac:	f000 fcf9 	bl	801dfa2 <USBD_CtlSendStatus>

              break;
 801d5b0:	e004      	b.n	801d5bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801d5b2:	6839      	ldr	r1, [r7, #0]
 801d5b4:	6878      	ldr	r0, [r7, #4]
 801d5b6:	f000 fc29 	bl	801de0c <USBD_CtlError>
              break;
 801d5ba:	bf00      	nop
          }
          break;
 801d5bc:	e0ec      	b.n	801d798 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d5c4:	b2db      	uxtb	r3, r3
 801d5c6:	2b02      	cmp	r3, #2
 801d5c8:	d002      	beq.n	801d5d0 <USBD_StdEPReq+0xe6>
 801d5ca:	2b03      	cmp	r3, #3
 801d5cc:	d016      	beq.n	801d5fc <USBD_StdEPReq+0x112>
 801d5ce:	e030      	b.n	801d632 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d5d0:	7bbb      	ldrb	r3, [r7, #14]
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	d00d      	beq.n	801d5f2 <USBD_StdEPReq+0x108>
 801d5d6:	7bbb      	ldrb	r3, [r7, #14]
 801d5d8:	2b80      	cmp	r3, #128	; 0x80
 801d5da:	d00a      	beq.n	801d5f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801d5dc:	7bbb      	ldrb	r3, [r7, #14]
 801d5de:	4619      	mov	r1, r3
 801d5e0:	6878      	ldr	r0, [r7, #4]
 801d5e2:	f004 f979 	bl	80218d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801d5e6:	2180      	movs	r1, #128	; 0x80
 801d5e8:	6878      	ldr	r0, [r7, #4]
 801d5ea:	f004 f975 	bl	80218d8 <USBD_LL_StallEP>
 801d5ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801d5f0:	e025      	b.n	801d63e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801d5f2:	6839      	ldr	r1, [r7, #0]
 801d5f4:	6878      	ldr	r0, [r7, #4]
 801d5f6:	f000 fc09 	bl	801de0c <USBD_CtlError>
              break;
 801d5fa:	e020      	b.n	801d63e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801d5fc:	683b      	ldr	r3, [r7, #0]
 801d5fe:	885b      	ldrh	r3, [r3, #2]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d11b      	bne.n	801d63c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801d604:	7bbb      	ldrb	r3, [r7, #14]
 801d606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d004      	beq.n	801d618 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801d60e:	7bbb      	ldrb	r3, [r7, #14]
 801d610:	4619      	mov	r1, r3
 801d612:	6878      	ldr	r0, [r7, #4]
 801d614:	f004 f97f 	bl	8021916 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801d618:	6878      	ldr	r0, [r7, #4]
 801d61a:	f000 fcc2 	bl	801dfa2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d624:	689b      	ldr	r3, [r3, #8]
 801d626:	6839      	ldr	r1, [r7, #0]
 801d628:	6878      	ldr	r0, [r7, #4]
 801d62a:	4798      	blx	r3
 801d62c:	4603      	mov	r3, r0
 801d62e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801d630:	e004      	b.n	801d63c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801d632:	6839      	ldr	r1, [r7, #0]
 801d634:	6878      	ldr	r0, [r7, #4]
 801d636:	f000 fbe9 	bl	801de0c <USBD_CtlError>
              break;
 801d63a:	e000      	b.n	801d63e <USBD_StdEPReq+0x154>
              break;
 801d63c:	bf00      	nop
          }
          break;
 801d63e:	e0ab      	b.n	801d798 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d646:	b2db      	uxtb	r3, r3
 801d648:	2b02      	cmp	r3, #2
 801d64a:	d002      	beq.n	801d652 <USBD_StdEPReq+0x168>
 801d64c:	2b03      	cmp	r3, #3
 801d64e:	d032      	beq.n	801d6b6 <USBD_StdEPReq+0x1cc>
 801d650:	e097      	b.n	801d782 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d652:	7bbb      	ldrb	r3, [r7, #14]
 801d654:	2b00      	cmp	r3, #0
 801d656:	d007      	beq.n	801d668 <USBD_StdEPReq+0x17e>
 801d658:	7bbb      	ldrb	r3, [r7, #14]
 801d65a:	2b80      	cmp	r3, #128	; 0x80
 801d65c:	d004      	beq.n	801d668 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801d65e:	6839      	ldr	r1, [r7, #0]
 801d660:	6878      	ldr	r0, [r7, #4]
 801d662:	f000 fbd3 	bl	801de0c <USBD_CtlError>
                break;
 801d666:	e091      	b.n	801d78c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	da0b      	bge.n	801d688 <USBD_StdEPReq+0x19e>
 801d670:	7bbb      	ldrb	r3, [r7, #14]
 801d672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d676:	4613      	mov	r3, r2
 801d678:	009b      	lsls	r3, r3, #2
 801d67a:	4413      	add	r3, r2
 801d67c:	009b      	lsls	r3, r3, #2
 801d67e:	3310      	adds	r3, #16
 801d680:	687a      	ldr	r2, [r7, #4]
 801d682:	4413      	add	r3, r2
 801d684:	3304      	adds	r3, #4
 801d686:	e00b      	b.n	801d6a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801d688:	7bbb      	ldrb	r3, [r7, #14]
 801d68a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d68e:	4613      	mov	r3, r2
 801d690:	009b      	lsls	r3, r3, #2
 801d692:	4413      	add	r3, r2
 801d694:	009b      	lsls	r3, r3, #2
 801d696:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801d69a:	687a      	ldr	r2, [r7, #4]
 801d69c:	4413      	add	r3, r2
 801d69e:	3304      	adds	r3, #4
 801d6a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801d6a2:	68bb      	ldr	r3, [r7, #8]
 801d6a4:	2200      	movs	r2, #0
 801d6a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801d6a8:	68bb      	ldr	r3, [r7, #8]
 801d6aa:	2202      	movs	r2, #2
 801d6ac:	4619      	mov	r1, r3
 801d6ae:	6878      	ldr	r0, [r7, #4]
 801d6b0:	f000 fc1d 	bl	801deee <USBD_CtlSendData>
              break;
 801d6b4:	e06a      	b.n	801d78c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801d6b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	da11      	bge.n	801d6e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801d6be:	7bbb      	ldrb	r3, [r7, #14]
 801d6c0:	f003 020f 	and.w	r2, r3, #15
 801d6c4:	6879      	ldr	r1, [r7, #4]
 801d6c6:	4613      	mov	r3, r2
 801d6c8:	009b      	lsls	r3, r3, #2
 801d6ca:	4413      	add	r3, r2
 801d6cc:	009b      	lsls	r3, r3, #2
 801d6ce:	440b      	add	r3, r1
 801d6d0:	3324      	adds	r3, #36	; 0x24
 801d6d2:	881b      	ldrh	r3, [r3, #0]
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d117      	bne.n	801d708 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801d6d8:	6839      	ldr	r1, [r7, #0]
 801d6da:	6878      	ldr	r0, [r7, #4]
 801d6dc:	f000 fb96 	bl	801de0c <USBD_CtlError>
                  break;
 801d6e0:	e054      	b.n	801d78c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801d6e2:	7bbb      	ldrb	r3, [r7, #14]
 801d6e4:	f003 020f 	and.w	r2, r3, #15
 801d6e8:	6879      	ldr	r1, [r7, #4]
 801d6ea:	4613      	mov	r3, r2
 801d6ec:	009b      	lsls	r3, r3, #2
 801d6ee:	4413      	add	r3, r2
 801d6f0:	009b      	lsls	r3, r3, #2
 801d6f2:	440b      	add	r3, r1
 801d6f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801d6f8:	881b      	ldrh	r3, [r3, #0]
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d104      	bne.n	801d708 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801d6fe:	6839      	ldr	r1, [r7, #0]
 801d700:	6878      	ldr	r0, [r7, #4]
 801d702:	f000 fb83 	bl	801de0c <USBD_CtlError>
                  break;
 801d706:	e041      	b.n	801d78c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	da0b      	bge.n	801d728 <USBD_StdEPReq+0x23e>
 801d710:	7bbb      	ldrb	r3, [r7, #14]
 801d712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d716:	4613      	mov	r3, r2
 801d718:	009b      	lsls	r3, r3, #2
 801d71a:	4413      	add	r3, r2
 801d71c:	009b      	lsls	r3, r3, #2
 801d71e:	3310      	adds	r3, #16
 801d720:	687a      	ldr	r2, [r7, #4]
 801d722:	4413      	add	r3, r2
 801d724:	3304      	adds	r3, #4
 801d726:	e00b      	b.n	801d740 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801d728:	7bbb      	ldrb	r3, [r7, #14]
 801d72a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d72e:	4613      	mov	r3, r2
 801d730:	009b      	lsls	r3, r3, #2
 801d732:	4413      	add	r3, r2
 801d734:	009b      	lsls	r3, r3, #2
 801d736:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801d73a:	687a      	ldr	r2, [r7, #4]
 801d73c:	4413      	add	r3, r2
 801d73e:	3304      	adds	r3, #4
 801d740:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801d742:	7bbb      	ldrb	r3, [r7, #14]
 801d744:	2b00      	cmp	r3, #0
 801d746:	d002      	beq.n	801d74e <USBD_StdEPReq+0x264>
 801d748:	7bbb      	ldrb	r3, [r7, #14]
 801d74a:	2b80      	cmp	r3, #128	; 0x80
 801d74c:	d103      	bne.n	801d756 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801d74e:	68bb      	ldr	r3, [r7, #8]
 801d750:	2200      	movs	r2, #0
 801d752:	601a      	str	r2, [r3, #0]
 801d754:	e00e      	b.n	801d774 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801d756:	7bbb      	ldrb	r3, [r7, #14]
 801d758:	4619      	mov	r1, r3
 801d75a:	6878      	ldr	r0, [r7, #4]
 801d75c:	f004 f8fa 	bl	8021954 <USBD_LL_IsStallEP>
 801d760:	4603      	mov	r3, r0
 801d762:	2b00      	cmp	r3, #0
 801d764:	d003      	beq.n	801d76e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801d766:	68bb      	ldr	r3, [r7, #8]
 801d768:	2201      	movs	r2, #1
 801d76a:	601a      	str	r2, [r3, #0]
 801d76c:	e002      	b.n	801d774 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801d76e:	68bb      	ldr	r3, [r7, #8]
 801d770:	2200      	movs	r2, #0
 801d772:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801d774:	68bb      	ldr	r3, [r7, #8]
 801d776:	2202      	movs	r2, #2
 801d778:	4619      	mov	r1, r3
 801d77a:	6878      	ldr	r0, [r7, #4]
 801d77c:	f000 fbb7 	bl	801deee <USBD_CtlSendData>
              break;
 801d780:	e004      	b.n	801d78c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801d782:	6839      	ldr	r1, [r7, #0]
 801d784:	6878      	ldr	r0, [r7, #4]
 801d786:	f000 fb41 	bl	801de0c <USBD_CtlError>
              break;
 801d78a:	bf00      	nop
          }
          break;
 801d78c:	e004      	b.n	801d798 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801d78e:	6839      	ldr	r1, [r7, #0]
 801d790:	6878      	ldr	r0, [r7, #4]
 801d792:	f000 fb3b 	bl	801de0c <USBD_CtlError>
          break;
 801d796:	bf00      	nop
      }
      break;
 801d798:	e004      	b.n	801d7a4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801d79a:	6839      	ldr	r1, [r7, #0]
 801d79c:	6878      	ldr	r0, [r7, #4]
 801d79e:	f000 fb35 	bl	801de0c <USBD_CtlError>
      break;
 801d7a2:	bf00      	nop
  }

  return ret;
 801d7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d7a6:	4618      	mov	r0, r3
 801d7a8:	3710      	adds	r7, #16
 801d7aa:	46bd      	mov	sp, r7
 801d7ac:	bd80      	pop	{r7, pc}
	...

0801d7b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d7b0:	b580      	push	{r7, lr}
 801d7b2:	b084      	sub	sp, #16
 801d7b4:	af00      	add	r7, sp, #0
 801d7b6:	6078      	str	r0, [r7, #4]
 801d7b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801d7ba:	2300      	movs	r3, #0
 801d7bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801d7be:	2300      	movs	r3, #0
 801d7c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801d7c2:	2300      	movs	r3, #0
 801d7c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801d7c6:	683b      	ldr	r3, [r7, #0]
 801d7c8:	885b      	ldrh	r3, [r3, #2]
 801d7ca:	0a1b      	lsrs	r3, r3, #8
 801d7cc:	b29b      	uxth	r3, r3
 801d7ce:	3b01      	subs	r3, #1
 801d7d0:	2b06      	cmp	r3, #6
 801d7d2:	f200 8128 	bhi.w	801da26 <USBD_GetDescriptor+0x276>
 801d7d6:	a201      	add	r2, pc, #4	; (adr r2, 801d7dc <USBD_GetDescriptor+0x2c>)
 801d7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d7dc:	0801d7f9 	.word	0x0801d7f9
 801d7e0:	0801d811 	.word	0x0801d811
 801d7e4:	0801d851 	.word	0x0801d851
 801d7e8:	0801da27 	.word	0x0801da27
 801d7ec:	0801da27 	.word	0x0801da27
 801d7f0:	0801d9c7 	.word	0x0801d9c7
 801d7f4:	0801d9f3 	.word	0x0801d9f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	687a      	ldr	r2, [r7, #4]
 801d802:	7c12      	ldrb	r2, [r2, #16]
 801d804:	f107 0108 	add.w	r1, r7, #8
 801d808:	4610      	mov	r0, r2
 801d80a:	4798      	blx	r3
 801d80c:	60f8      	str	r0, [r7, #12]
      break;
 801d80e:	e112      	b.n	801da36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	7c1b      	ldrb	r3, [r3, #16]
 801d814:	2b00      	cmp	r3, #0
 801d816:	d10d      	bne.n	801d834 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d820:	f107 0208 	add.w	r2, r7, #8
 801d824:	4610      	mov	r0, r2
 801d826:	4798      	blx	r3
 801d828:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	3301      	adds	r3, #1
 801d82e:	2202      	movs	r2, #2
 801d830:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801d832:	e100      	b.n	801da36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d83c:	f107 0208 	add.w	r2, r7, #8
 801d840:	4610      	mov	r0, r2
 801d842:	4798      	blx	r3
 801d844:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	3301      	adds	r3, #1
 801d84a:	2202      	movs	r2, #2
 801d84c:	701a      	strb	r2, [r3, #0]
      break;
 801d84e:	e0f2      	b.n	801da36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801d850:	683b      	ldr	r3, [r7, #0]
 801d852:	885b      	ldrh	r3, [r3, #2]
 801d854:	b2db      	uxtb	r3, r3
 801d856:	2b05      	cmp	r3, #5
 801d858:	f200 80ac 	bhi.w	801d9b4 <USBD_GetDescriptor+0x204>
 801d85c:	a201      	add	r2, pc, #4	; (adr r2, 801d864 <USBD_GetDescriptor+0xb4>)
 801d85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d862:	bf00      	nop
 801d864:	0801d87d 	.word	0x0801d87d
 801d868:	0801d8b1 	.word	0x0801d8b1
 801d86c:	0801d8e5 	.word	0x0801d8e5
 801d870:	0801d919 	.word	0x0801d919
 801d874:	0801d94d 	.word	0x0801d94d
 801d878:	0801d981 	.word	0x0801d981
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d882:	685b      	ldr	r3, [r3, #4]
 801d884:	2b00      	cmp	r3, #0
 801d886:	d00b      	beq.n	801d8a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d88e:	685b      	ldr	r3, [r3, #4]
 801d890:	687a      	ldr	r2, [r7, #4]
 801d892:	7c12      	ldrb	r2, [r2, #16]
 801d894:	f107 0108 	add.w	r1, r7, #8
 801d898:	4610      	mov	r0, r2
 801d89a:	4798      	blx	r3
 801d89c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d89e:	e091      	b.n	801d9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d8a0:	6839      	ldr	r1, [r7, #0]
 801d8a2:	6878      	ldr	r0, [r7, #4]
 801d8a4:	f000 fab2 	bl	801de0c <USBD_CtlError>
            err++;
 801d8a8:	7afb      	ldrb	r3, [r7, #11]
 801d8aa:	3301      	adds	r3, #1
 801d8ac:	72fb      	strb	r3, [r7, #11]
          break;
 801d8ae:	e089      	b.n	801d9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d8b6:	689b      	ldr	r3, [r3, #8]
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d00b      	beq.n	801d8d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d8c2:	689b      	ldr	r3, [r3, #8]
 801d8c4:	687a      	ldr	r2, [r7, #4]
 801d8c6:	7c12      	ldrb	r2, [r2, #16]
 801d8c8:	f107 0108 	add.w	r1, r7, #8
 801d8cc:	4610      	mov	r0, r2
 801d8ce:	4798      	blx	r3
 801d8d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d8d2:	e077      	b.n	801d9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d8d4:	6839      	ldr	r1, [r7, #0]
 801d8d6:	6878      	ldr	r0, [r7, #4]
 801d8d8:	f000 fa98 	bl	801de0c <USBD_CtlError>
            err++;
 801d8dc:	7afb      	ldrb	r3, [r7, #11]
 801d8de:	3301      	adds	r3, #1
 801d8e0:	72fb      	strb	r3, [r7, #11]
          break;
 801d8e2:	e06f      	b.n	801d9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d8ea:	68db      	ldr	r3, [r3, #12]
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d00b      	beq.n	801d908 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d8f6:	68db      	ldr	r3, [r3, #12]
 801d8f8:	687a      	ldr	r2, [r7, #4]
 801d8fa:	7c12      	ldrb	r2, [r2, #16]
 801d8fc:	f107 0108 	add.w	r1, r7, #8
 801d900:	4610      	mov	r0, r2
 801d902:	4798      	blx	r3
 801d904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d906:	e05d      	b.n	801d9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d908:	6839      	ldr	r1, [r7, #0]
 801d90a:	6878      	ldr	r0, [r7, #4]
 801d90c:	f000 fa7e 	bl	801de0c <USBD_CtlError>
            err++;
 801d910:	7afb      	ldrb	r3, [r7, #11]
 801d912:	3301      	adds	r3, #1
 801d914:	72fb      	strb	r3, [r7, #11]
          break;
 801d916:	e055      	b.n	801d9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d91e:	691b      	ldr	r3, [r3, #16]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d00b      	beq.n	801d93c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d92a:	691b      	ldr	r3, [r3, #16]
 801d92c:	687a      	ldr	r2, [r7, #4]
 801d92e:	7c12      	ldrb	r2, [r2, #16]
 801d930:	f107 0108 	add.w	r1, r7, #8
 801d934:	4610      	mov	r0, r2
 801d936:	4798      	blx	r3
 801d938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d93a:	e043      	b.n	801d9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d93c:	6839      	ldr	r1, [r7, #0]
 801d93e:	6878      	ldr	r0, [r7, #4]
 801d940:	f000 fa64 	bl	801de0c <USBD_CtlError>
            err++;
 801d944:	7afb      	ldrb	r3, [r7, #11]
 801d946:	3301      	adds	r3, #1
 801d948:	72fb      	strb	r3, [r7, #11]
          break;
 801d94a:	e03b      	b.n	801d9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d952:	695b      	ldr	r3, [r3, #20]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d00b      	beq.n	801d970 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d95e:	695b      	ldr	r3, [r3, #20]
 801d960:	687a      	ldr	r2, [r7, #4]
 801d962:	7c12      	ldrb	r2, [r2, #16]
 801d964:	f107 0108 	add.w	r1, r7, #8
 801d968:	4610      	mov	r0, r2
 801d96a:	4798      	blx	r3
 801d96c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d96e:	e029      	b.n	801d9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d970:	6839      	ldr	r1, [r7, #0]
 801d972:	6878      	ldr	r0, [r7, #4]
 801d974:	f000 fa4a 	bl	801de0c <USBD_CtlError>
            err++;
 801d978:	7afb      	ldrb	r3, [r7, #11]
 801d97a:	3301      	adds	r3, #1
 801d97c:	72fb      	strb	r3, [r7, #11]
          break;
 801d97e:	e021      	b.n	801d9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d986:	699b      	ldr	r3, [r3, #24]
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d00b      	beq.n	801d9a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d992:	699b      	ldr	r3, [r3, #24]
 801d994:	687a      	ldr	r2, [r7, #4]
 801d996:	7c12      	ldrb	r2, [r2, #16]
 801d998:	f107 0108 	add.w	r1, r7, #8
 801d99c:	4610      	mov	r0, r2
 801d99e:	4798      	blx	r3
 801d9a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d9a2:	e00f      	b.n	801d9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d9a4:	6839      	ldr	r1, [r7, #0]
 801d9a6:	6878      	ldr	r0, [r7, #4]
 801d9a8:	f000 fa30 	bl	801de0c <USBD_CtlError>
            err++;
 801d9ac:	7afb      	ldrb	r3, [r7, #11]
 801d9ae:	3301      	adds	r3, #1
 801d9b0:	72fb      	strb	r3, [r7, #11]
          break;
 801d9b2:	e007      	b.n	801d9c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801d9b4:	6839      	ldr	r1, [r7, #0]
 801d9b6:	6878      	ldr	r0, [r7, #4]
 801d9b8:	f000 fa28 	bl	801de0c <USBD_CtlError>
          err++;
 801d9bc:	7afb      	ldrb	r3, [r7, #11]
 801d9be:	3301      	adds	r3, #1
 801d9c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801d9c2:	bf00      	nop
      }
      break;
 801d9c4:	e037      	b.n	801da36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	7c1b      	ldrb	r3, [r3, #16]
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d109      	bne.n	801d9e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9d6:	f107 0208 	add.w	r2, r7, #8
 801d9da:	4610      	mov	r0, r2
 801d9dc:	4798      	blx	r3
 801d9de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d9e0:	e029      	b.n	801da36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d9e2:	6839      	ldr	r1, [r7, #0]
 801d9e4:	6878      	ldr	r0, [r7, #4]
 801d9e6:	f000 fa11 	bl	801de0c <USBD_CtlError>
        err++;
 801d9ea:	7afb      	ldrb	r3, [r7, #11]
 801d9ec:	3301      	adds	r3, #1
 801d9ee:	72fb      	strb	r3, [r7, #11]
      break;
 801d9f0:	e021      	b.n	801da36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	7c1b      	ldrb	r3, [r3, #16]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d10d      	bne.n	801da16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801da00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da02:	f107 0208 	add.w	r2, r7, #8
 801da06:	4610      	mov	r0, r2
 801da08:	4798      	blx	r3
 801da0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	3301      	adds	r3, #1
 801da10:	2207      	movs	r2, #7
 801da12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801da14:	e00f      	b.n	801da36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801da16:	6839      	ldr	r1, [r7, #0]
 801da18:	6878      	ldr	r0, [r7, #4]
 801da1a:	f000 f9f7 	bl	801de0c <USBD_CtlError>
        err++;
 801da1e:	7afb      	ldrb	r3, [r7, #11]
 801da20:	3301      	adds	r3, #1
 801da22:	72fb      	strb	r3, [r7, #11]
      break;
 801da24:	e007      	b.n	801da36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801da26:	6839      	ldr	r1, [r7, #0]
 801da28:	6878      	ldr	r0, [r7, #4]
 801da2a:	f000 f9ef 	bl	801de0c <USBD_CtlError>
      err++;
 801da2e:	7afb      	ldrb	r3, [r7, #11]
 801da30:	3301      	adds	r3, #1
 801da32:	72fb      	strb	r3, [r7, #11]
      break;
 801da34:	bf00      	nop
  }

  if (err != 0U)
 801da36:	7afb      	ldrb	r3, [r7, #11]
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d11e      	bne.n	801da7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801da3c:	683b      	ldr	r3, [r7, #0]
 801da3e:	88db      	ldrh	r3, [r3, #6]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d016      	beq.n	801da72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801da44:	893b      	ldrh	r3, [r7, #8]
 801da46:	2b00      	cmp	r3, #0
 801da48:	d00e      	beq.n	801da68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801da4a:	683b      	ldr	r3, [r7, #0]
 801da4c:	88da      	ldrh	r2, [r3, #6]
 801da4e:	893b      	ldrh	r3, [r7, #8]
 801da50:	4293      	cmp	r3, r2
 801da52:	bf28      	it	cs
 801da54:	4613      	movcs	r3, r2
 801da56:	b29b      	uxth	r3, r3
 801da58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801da5a:	893b      	ldrh	r3, [r7, #8]
 801da5c:	461a      	mov	r2, r3
 801da5e:	68f9      	ldr	r1, [r7, #12]
 801da60:	6878      	ldr	r0, [r7, #4]
 801da62:	f000 fa44 	bl	801deee <USBD_CtlSendData>
 801da66:	e009      	b.n	801da7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801da68:	6839      	ldr	r1, [r7, #0]
 801da6a:	6878      	ldr	r0, [r7, #4]
 801da6c:	f000 f9ce 	bl	801de0c <USBD_CtlError>
 801da70:	e004      	b.n	801da7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801da72:	6878      	ldr	r0, [r7, #4]
 801da74:	f000 fa95 	bl	801dfa2 <USBD_CtlSendStatus>
 801da78:	e000      	b.n	801da7c <USBD_GetDescriptor+0x2cc>
    return;
 801da7a:	bf00      	nop
  }
}
 801da7c:	3710      	adds	r7, #16
 801da7e:	46bd      	mov	sp, r7
 801da80:	bd80      	pop	{r7, pc}
 801da82:	bf00      	nop

0801da84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801da84:	b580      	push	{r7, lr}
 801da86:	b084      	sub	sp, #16
 801da88:	af00      	add	r7, sp, #0
 801da8a:	6078      	str	r0, [r7, #4]
 801da8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801da8e:	683b      	ldr	r3, [r7, #0]
 801da90:	889b      	ldrh	r3, [r3, #4]
 801da92:	2b00      	cmp	r3, #0
 801da94:	d131      	bne.n	801dafa <USBD_SetAddress+0x76>
 801da96:	683b      	ldr	r3, [r7, #0]
 801da98:	88db      	ldrh	r3, [r3, #6]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d12d      	bne.n	801dafa <USBD_SetAddress+0x76>
 801da9e:	683b      	ldr	r3, [r7, #0]
 801daa0:	885b      	ldrh	r3, [r3, #2]
 801daa2:	2b7f      	cmp	r3, #127	; 0x7f
 801daa4:	d829      	bhi.n	801dafa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801daa6:	683b      	ldr	r3, [r7, #0]
 801daa8:	885b      	ldrh	r3, [r3, #2]
 801daaa:	b2db      	uxtb	r3, r3
 801daac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dab0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dab8:	b2db      	uxtb	r3, r3
 801daba:	2b03      	cmp	r3, #3
 801dabc:	d104      	bne.n	801dac8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801dabe:	6839      	ldr	r1, [r7, #0]
 801dac0:	6878      	ldr	r0, [r7, #4]
 801dac2:	f000 f9a3 	bl	801de0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dac6:	e01d      	b.n	801db04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	7bfa      	ldrb	r2, [r7, #15]
 801dacc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801dad0:	7bfb      	ldrb	r3, [r7, #15]
 801dad2:	4619      	mov	r1, r3
 801dad4:	6878      	ldr	r0, [r7, #4]
 801dad6:	f003 ff69 	bl	80219ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801dada:	6878      	ldr	r0, [r7, #4]
 801dadc:	f000 fa61 	bl	801dfa2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801dae0:	7bfb      	ldrb	r3, [r7, #15]
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d004      	beq.n	801daf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	2202      	movs	r2, #2
 801daea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801daee:	e009      	b.n	801db04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	2201      	movs	r2, #1
 801daf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801daf8:	e004      	b.n	801db04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801dafa:	6839      	ldr	r1, [r7, #0]
 801dafc:	6878      	ldr	r0, [r7, #4]
 801dafe:	f000 f985 	bl	801de0c <USBD_CtlError>
  }
}
 801db02:	bf00      	nop
 801db04:	bf00      	nop
 801db06:	3710      	adds	r7, #16
 801db08:	46bd      	mov	sp, r7
 801db0a:	bd80      	pop	{r7, pc}

0801db0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801db0c:	b580      	push	{r7, lr}
 801db0e:	b084      	sub	sp, #16
 801db10:	af00      	add	r7, sp, #0
 801db12:	6078      	str	r0, [r7, #4]
 801db14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801db16:	2300      	movs	r3, #0
 801db18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801db1a:	683b      	ldr	r3, [r7, #0]
 801db1c:	885b      	ldrh	r3, [r3, #2]
 801db1e:	b2da      	uxtb	r2, r3
 801db20:	4b4c      	ldr	r3, [pc, #304]	; (801dc54 <USBD_SetConfig+0x148>)
 801db22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801db24:	4b4b      	ldr	r3, [pc, #300]	; (801dc54 <USBD_SetConfig+0x148>)
 801db26:	781b      	ldrb	r3, [r3, #0]
 801db28:	2b01      	cmp	r3, #1
 801db2a:	d905      	bls.n	801db38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801db2c:	6839      	ldr	r1, [r7, #0]
 801db2e:	6878      	ldr	r0, [r7, #4]
 801db30:	f000 f96c 	bl	801de0c <USBD_CtlError>
    return USBD_FAIL;
 801db34:	2303      	movs	r3, #3
 801db36:	e088      	b.n	801dc4a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801db3e:	b2db      	uxtb	r3, r3
 801db40:	2b02      	cmp	r3, #2
 801db42:	d002      	beq.n	801db4a <USBD_SetConfig+0x3e>
 801db44:	2b03      	cmp	r3, #3
 801db46:	d025      	beq.n	801db94 <USBD_SetConfig+0x88>
 801db48:	e071      	b.n	801dc2e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801db4a:	4b42      	ldr	r3, [pc, #264]	; (801dc54 <USBD_SetConfig+0x148>)
 801db4c:	781b      	ldrb	r3, [r3, #0]
 801db4e:	2b00      	cmp	r3, #0
 801db50:	d01c      	beq.n	801db8c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801db52:	4b40      	ldr	r3, [pc, #256]	; (801dc54 <USBD_SetConfig+0x148>)
 801db54:	781b      	ldrb	r3, [r3, #0]
 801db56:	461a      	mov	r2, r3
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801db5c:	4b3d      	ldr	r3, [pc, #244]	; (801dc54 <USBD_SetConfig+0x148>)
 801db5e:	781b      	ldrb	r3, [r3, #0]
 801db60:	4619      	mov	r1, r3
 801db62:	6878      	ldr	r0, [r7, #4]
 801db64:	f7ff f948 	bl	801cdf8 <USBD_SetClassConfig>
 801db68:	4603      	mov	r3, r0
 801db6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801db6c:	7bfb      	ldrb	r3, [r7, #15]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d004      	beq.n	801db7c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801db72:	6839      	ldr	r1, [r7, #0]
 801db74:	6878      	ldr	r0, [r7, #4]
 801db76:	f000 f949 	bl	801de0c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801db7a:	e065      	b.n	801dc48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801db7c:	6878      	ldr	r0, [r7, #4]
 801db7e:	f000 fa10 	bl	801dfa2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	2203      	movs	r2, #3
 801db86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801db8a:	e05d      	b.n	801dc48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801db8c:	6878      	ldr	r0, [r7, #4]
 801db8e:	f000 fa08 	bl	801dfa2 <USBD_CtlSendStatus>
      break;
 801db92:	e059      	b.n	801dc48 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801db94:	4b2f      	ldr	r3, [pc, #188]	; (801dc54 <USBD_SetConfig+0x148>)
 801db96:	781b      	ldrb	r3, [r3, #0]
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d112      	bne.n	801dbc2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	2202      	movs	r2, #2
 801dba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801dba4:	4b2b      	ldr	r3, [pc, #172]	; (801dc54 <USBD_SetConfig+0x148>)
 801dba6:	781b      	ldrb	r3, [r3, #0]
 801dba8:	461a      	mov	r2, r3
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801dbae:	4b29      	ldr	r3, [pc, #164]	; (801dc54 <USBD_SetConfig+0x148>)
 801dbb0:	781b      	ldrb	r3, [r3, #0]
 801dbb2:	4619      	mov	r1, r3
 801dbb4:	6878      	ldr	r0, [r7, #4]
 801dbb6:	f7ff f93b 	bl	801ce30 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801dbba:	6878      	ldr	r0, [r7, #4]
 801dbbc:	f000 f9f1 	bl	801dfa2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801dbc0:	e042      	b.n	801dc48 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801dbc2:	4b24      	ldr	r3, [pc, #144]	; (801dc54 <USBD_SetConfig+0x148>)
 801dbc4:	781b      	ldrb	r3, [r3, #0]
 801dbc6:	461a      	mov	r2, r3
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	685b      	ldr	r3, [r3, #4]
 801dbcc:	429a      	cmp	r2, r3
 801dbce:	d02a      	beq.n	801dc26 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	685b      	ldr	r3, [r3, #4]
 801dbd4:	b2db      	uxtb	r3, r3
 801dbd6:	4619      	mov	r1, r3
 801dbd8:	6878      	ldr	r0, [r7, #4]
 801dbda:	f7ff f929 	bl	801ce30 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801dbde:	4b1d      	ldr	r3, [pc, #116]	; (801dc54 <USBD_SetConfig+0x148>)
 801dbe0:	781b      	ldrb	r3, [r3, #0]
 801dbe2:	461a      	mov	r2, r3
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801dbe8:	4b1a      	ldr	r3, [pc, #104]	; (801dc54 <USBD_SetConfig+0x148>)
 801dbea:	781b      	ldrb	r3, [r3, #0]
 801dbec:	4619      	mov	r1, r3
 801dbee:	6878      	ldr	r0, [r7, #4]
 801dbf0:	f7ff f902 	bl	801cdf8 <USBD_SetClassConfig>
 801dbf4:	4603      	mov	r3, r0
 801dbf6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801dbf8:	7bfb      	ldrb	r3, [r7, #15]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d00f      	beq.n	801dc1e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801dbfe:	6839      	ldr	r1, [r7, #0]
 801dc00:	6878      	ldr	r0, [r7, #4]
 801dc02:	f000 f903 	bl	801de0c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	685b      	ldr	r3, [r3, #4]
 801dc0a:	b2db      	uxtb	r3, r3
 801dc0c:	4619      	mov	r1, r3
 801dc0e:	6878      	ldr	r0, [r7, #4]
 801dc10:	f7ff f90e 	bl	801ce30 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	2202      	movs	r2, #2
 801dc18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801dc1c:	e014      	b.n	801dc48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801dc1e:	6878      	ldr	r0, [r7, #4]
 801dc20:	f000 f9bf 	bl	801dfa2 <USBD_CtlSendStatus>
      break;
 801dc24:	e010      	b.n	801dc48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801dc26:	6878      	ldr	r0, [r7, #4]
 801dc28:	f000 f9bb 	bl	801dfa2 <USBD_CtlSendStatus>
      break;
 801dc2c:	e00c      	b.n	801dc48 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801dc2e:	6839      	ldr	r1, [r7, #0]
 801dc30:	6878      	ldr	r0, [r7, #4]
 801dc32:	f000 f8eb 	bl	801de0c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801dc36:	4b07      	ldr	r3, [pc, #28]	; (801dc54 <USBD_SetConfig+0x148>)
 801dc38:	781b      	ldrb	r3, [r3, #0]
 801dc3a:	4619      	mov	r1, r3
 801dc3c:	6878      	ldr	r0, [r7, #4]
 801dc3e:	f7ff f8f7 	bl	801ce30 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801dc42:	2303      	movs	r3, #3
 801dc44:	73fb      	strb	r3, [r7, #15]
      break;
 801dc46:	bf00      	nop
  }

  return ret;
 801dc48:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc4a:	4618      	mov	r0, r3
 801dc4c:	3710      	adds	r7, #16
 801dc4e:	46bd      	mov	sp, r7
 801dc50:	bd80      	pop	{r7, pc}
 801dc52:	bf00      	nop
 801dc54:	200008bc 	.word	0x200008bc

0801dc58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801dc58:	b580      	push	{r7, lr}
 801dc5a:	b082      	sub	sp, #8
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	6078      	str	r0, [r7, #4]
 801dc60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801dc62:	683b      	ldr	r3, [r7, #0]
 801dc64:	88db      	ldrh	r3, [r3, #6]
 801dc66:	2b01      	cmp	r3, #1
 801dc68:	d004      	beq.n	801dc74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801dc6a:	6839      	ldr	r1, [r7, #0]
 801dc6c:	6878      	ldr	r0, [r7, #4]
 801dc6e:	f000 f8cd 	bl	801de0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801dc72:	e023      	b.n	801dcbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dc7a:	b2db      	uxtb	r3, r3
 801dc7c:	2b02      	cmp	r3, #2
 801dc7e:	dc02      	bgt.n	801dc86 <USBD_GetConfig+0x2e>
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	dc03      	bgt.n	801dc8c <USBD_GetConfig+0x34>
 801dc84:	e015      	b.n	801dcb2 <USBD_GetConfig+0x5a>
 801dc86:	2b03      	cmp	r3, #3
 801dc88:	d00b      	beq.n	801dca2 <USBD_GetConfig+0x4a>
 801dc8a:	e012      	b.n	801dcb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	2200      	movs	r2, #0
 801dc90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	3308      	adds	r3, #8
 801dc96:	2201      	movs	r2, #1
 801dc98:	4619      	mov	r1, r3
 801dc9a:	6878      	ldr	r0, [r7, #4]
 801dc9c:	f000 f927 	bl	801deee <USBD_CtlSendData>
        break;
 801dca0:	e00c      	b.n	801dcbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	3304      	adds	r3, #4
 801dca6:	2201      	movs	r2, #1
 801dca8:	4619      	mov	r1, r3
 801dcaa:	6878      	ldr	r0, [r7, #4]
 801dcac:	f000 f91f 	bl	801deee <USBD_CtlSendData>
        break;
 801dcb0:	e004      	b.n	801dcbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801dcb2:	6839      	ldr	r1, [r7, #0]
 801dcb4:	6878      	ldr	r0, [r7, #4]
 801dcb6:	f000 f8a9 	bl	801de0c <USBD_CtlError>
        break;
 801dcba:	bf00      	nop
}
 801dcbc:	bf00      	nop
 801dcbe:	3708      	adds	r7, #8
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	bd80      	pop	{r7, pc}

0801dcc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b082      	sub	sp, #8
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
 801dccc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dcd4:	b2db      	uxtb	r3, r3
 801dcd6:	3b01      	subs	r3, #1
 801dcd8:	2b02      	cmp	r3, #2
 801dcda:	d81e      	bhi.n	801dd1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801dcdc:	683b      	ldr	r3, [r7, #0]
 801dcde:	88db      	ldrh	r3, [r3, #6]
 801dce0:	2b02      	cmp	r3, #2
 801dce2:	d004      	beq.n	801dcee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801dce4:	6839      	ldr	r1, [r7, #0]
 801dce6:	6878      	ldr	r0, [r7, #4]
 801dce8:	f000 f890 	bl	801de0c <USBD_CtlError>
        break;
 801dcec:	e01a      	b.n	801dd24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	2201      	movs	r2, #1
 801dcf2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	d005      	beq.n	801dd0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801dcfe:	687b      	ldr	r3, [r7, #4]
 801dd00:	68db      	ldr	r3, [r3, #12]
 801dd02:	f043 0202 	orr.w	r2, r3, #2
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	330c      	adds	r3, #12
 801dd0e:	2202      	movs	r2, #2
 801dd10:	4619      	mov	r1, r3
 801dd12:	6878      	ldr	r0, [r7, #4]
 801dd14:	f000 f8eb 	bl	801deee <USBD_CtlSendData>
      break;
 801dd18:	e004      	b.n	801dd24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801dd1a:	6839      	ldr	r1, [r7, #0]
 801dd1c:	6878      	ldr	r0, [r7, #4]
 801dd1e:	f000 f875 	bl	801de0c <USBD_CtlError>
      break;
 801dd22:	bf00      	nop
  }
}
 801dd24:	bf00      	nop
 801dd26:	3708      	adds	r7, #8
 801dd28:	46bd      	mov	sp, r7
 801dd2a:	bd80      	pop	{r7, pc}

0801dd2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801dd2c:	b580      	push	{r7, lr}
 801dd2e:	b082      	sub	sp, #8
 801dd30:	af00      	add	r7, sp, #0
 801dd32:	6078      	str	r0, [r7, #4]
 801dd34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801dd36:	683b      	ldr	r3, [r7, #0]
 801dd38:	885b      	ldrh	r3, [r3, #2]
 801dd3a:	2b01      	cmp	r3, #1
 801dd3c:	d106      	bne.n	801dd4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	2201      	movs	r2, #1
 801dd42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801dd46:	6878      	ldr	r0, [r7, #4]
 801dd48:	f000 f92b 	bl	801dfa2 <USBD_CtlSendStatus>
  }
}
 801dd4c:	bf00      	nop
 801dd4e:	3708      	adds	r7, #8
 801dd50:	46bd      	mov	sp, r7
 801dd52:	bd80      	pop	{r7, pc}

0801dd54 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801dd54:	b580      	push	{r7, lr}
 801dd56:	b082      	sub	sp, #8
 801dd58:	af00      	add	r7, sp, #0
 801dd5a:	6078      	str	r0, [r7, #4]
 801dd5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801dd5e:	687b      	ldr	r3, [r7, #4]
 801dd60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dd64:	b2db      	uxtb	r3, r3
 801dd66:	3b01      	subs	r3, #1
 801dd68:	2b02      	cmp	r3, #2
 801dd6a:	d80b      	bhi.n	801dd84 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801dd6c:	683b      	ldr	r3, [r7, #0]
 801dd6e:	885b      	ldrh	r3, [r3, #2]
 801dd70:	2b01      	cmp	r3, #1
 801dd72:	d10c      	bne.n	801dd8e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	2200      	movs	r2, #0
 801dd78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801dd7c:	6878      	ldr	r0, [r7, #4]
 801dd7e:	f000 f910 	bl	801dfa2 <USBD_CtlSendStatus>
      }
      break;
 801dd82:	e004      	b.n	801dd8e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801dd84:	6839      	ldr	r1, [r7, #0]
 801dd86:	6878      	ldr	r0, [r7, #4]
 801dd88:	f000 f840 	bl	801de0c <USBD_CtlError>
      break;
 801dd8c:	e000      	b.n	801dd90 <USBD_ClrFeature+0x3c>
      break;
 801dd8e:	bf00      	nop
  }
}
 801dd90:	bf00      	nop
 801dd92:	3708      	adds	r7, #8
 801dd94:	46bd      	mov	sp, r7
 801dd96:	bd80      	pop	{r7, pc}

0801dd98 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801dd98:	b580      	push	{r7, lr}
 801dd9a:	b084      	sub	sp, #16
 801dd9c:	af00      	add	r7, sp, #0
 801dd9e:	6078      	str	r0, [r7, #4]
 801dda0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801dda2:	683b      	ldr	r3, [r7, #0]
 801dda4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	781a      	ldrb	r2, [r3, #0]
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801ddae:	68fb      	ldr	r3, [r7, #12]
 801ddb0:	3301      	adds	r3, #1
 801ddb2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	781a      	ldrb	r2, [r3, #0]
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	3301      	adds	r3, #1
 801ddc0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801ddc2:	68f8      	ldr	r0, [r7, #12]
 801ddc4:	f7ff fabb 	bl	801d33e <SWAPBYTE>
 801ddc8:	4603      	mov	r3, r0
 801ddca:	461a      	mov	r2, r3
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	3301      	adds	r3, #1
 801ddd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801ddd6:	68fb      	ldr	r3, [r7, #12]
 801ddd8:	3301      	adds	r3, #1
 801ddda:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801dddc:	68f8      	ldr	r0, [r7, #12]
 801ddde:	f7ff faae 	bl	801d33e <SWAPBYTE>
 801dde2:	4603      	mov	r3, r0
 801dde4:	461a      	mov	r2, r3
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801ddea:	68fb      	ldr	r3, [r7, #12]
 801ddec:	3301      	adds	r3, #1
 801ddee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	3301      	adds	r3, #1
 801ddf4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801ddf6:	68f8      	ldr	r0, [r7, #12]
 801ddf8:	f7ff faa1 	bl	801d33e <SWAPBYTE>
 801ddfc:	4603      	mov	r3, r0
 801ddfe:	461a      	mov	r2, r3
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	80da      	strh	r2, [r3, #6]
}
 801de04:	bf00      	nop
 801de06:	3710      	adds	r7, #16
 801de08:	46bd      	mov	sp, r7
 801de0a:	bd80      	pop	{r7, pc}

0801de0c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801de0c:	b580      	push	{r7, lr}
 801de0e:	b082      	sub	sp, #8
 801de10:	af00      	add	r7, sp, #0
 801de12:	6078      	str	r0, [r7, #4]
 801de14:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801de16:	2180      	movs	r1, #128	; 0x80
 801de18:	6878      	ldr	r0, [r7, #4]
 801de1a:	f003 fd5d 	bl	80218d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801de1e:	2100      	movs	r1, #0
 801de20:	6878      	ldr	r0, [r7, #4]
 801de22:	f003 fd59 	bl	80218d8 <USBD_LL_StallEP>
}
 801de26:	bf00      	nop
 801de28:	3708      	adds	r7, #8
 801de2a:	46bd      	mov	sp, r7
 801de2c:	bd80      	pop	{r7, pc}

0801de2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801de2e:	b580      	push	{r7, lr}
 801de30:	b086      	sub	sp, #24
 801de32:	af00      	add	r7, sp, #0
 801de34:	60f8      	str	r0, [r7, #12]
 801de36:	60b9      	str	r1, [r7, #8]
 801de38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801de3a:	2300      	movs	r3, #0
 801de3c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801de3e:	68fb      	ldr	r3, [r7, #12]
 801de40:	2b00      	cmp	r3, #0
 801de42:	d036      	beq.n	801deb2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801de48:	6938      	ldr	r0, [r7, #16]
 801de4a:	f000 f836 	bl	801deba <USBD_GetLen>
 801de4e:	4603      	mov	r3, r0
 801de50:	3301      	adds	r3, #1
 801de52:	b29b      	uxth	r3, r3
 801de54:	005b      	lsls	r3, r3, #1
 801de56:	b29a      	uxth	r2, r3
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801de5c:	7dfb      	ldrb	r3, [r7, #23]
 801de5e:	68ba      	ldr	r2, [r7, #8]
 801de60:	4413      	add	r3, r2
 801de62:	687a      	ldr	r2, [r7, #4]
 801de64:	7812      	ldrb	r2, [r2, #0]
 801de66:	701a      	strb	r2, [r3, #0]
  idx++;
 801de68:	7dfb      	ldrb	r3, [r7, #23]
 801de6a:	3301      	adds	r3, #1
 801de6c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801de6e:	7dfb      	ldrb	r3, [r7, #23]
 801de70:	68ba      	ldr	r2, [r7, #8]
 801de72:	4413      	add	r3, r2
 801de74:	2203      	movs	r2, #3
 801de76:	701a      	strb	r2, [r3, #0]
  idx++;
 801de78:	7dfb      	ldrb	r3, [r7, #23]
 801de7a:	3301      	adds	r3, #1
 801de7c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801de7e:	e013      	b.n	801dea8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801de80:	7dfb      	ldrb	r3, [r7, #23]
 801de82:	68ba      	ldr	r2, [r7, #8]
 801de84:	4413      	add	r3, r2
 801de86:	693a      	ldr	r2, [r7, #16]
 801de88:	7812      	ldrb	r2, [r2, #0]
 801de8a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801de8c:	693b      	ldr	r3, [r7, #16]
 801de8e:	3301      	adds	r3, #1
 801de90:	613b      	str	r3, [r7, #16]
    idx++;
 801de92:	7dfb      	ldrb	r3, [r7, #23]
 801de94:	3301      	adds	r3, #1
 801de96:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801de98:	7dfb      	ldrb	r3, [r7, #23]
 801de9a:	68ba      	ldr	r2, [r7, #8]
 801de9c:	4413      	add	r3, r2
 801de9e:	2200      	movs	r2, #0
 801dea0:	701a      	strb	r2, [r3, #0]
    idx++;
 801dea2:	7dfb      	ldrb	r3, [r7, #23]
 801dea4:	3301      	adds	r3, #1
 801dea6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801dea8:	693b      	ldr	r3, [r7, #16]
 801deaa:	781b      	ldrb	r3, [r3, #0]
 801deac:	2b00      	cmp	r3, #0
 801deae:	d1e7      	bne.n	801de80 <USBD_GetString+0x52>
 801deb0:	e000      	b.n	801deb4 <USBD_GetString+0x86>
    return;
 801deb2:	bf00      	nop
  }
}
 801deb4:	3718      	adds	r7, #24
 801deb6:	46bd      	mov	sp, r7
 801deb8:	bd80      	pop	{r7, pc}

0801deba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801deba:	b480      	push	{r7}
 801debc:	b085      	sub	sp, #20
 801debe:	af00      	add	r7, sp, #0
 801dec0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801dec2:	2300      	movs	r3, #0
 801dec4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801deca:	e005      	b.n	801ded8 <USBD_GetLen+0x1e>
  {
    len++;
 801decc:	7bfb      	ldrb	r3, [r7, #15]
 801dece:	3301      	adds	r3, #1
 801ded0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801ded2:	68bb      	ldr	r3, [r7, #8]
 801ded4:	3301      	adds	r3, #1
 801ded6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801ded8:	68bb      	ldr	r3, [r7, #8]
 801deda:	781b      	ldrb	r3, [r3, #0]
 801dedc:	2b00      	cmp	r3, #0
 801dede:	d1f5      	bne.n	801decc <USBD_GetLen+0x12>
  }

  return len;
 801dee0:	7bfb      	ldrb	r3, [r7, #15]
}
 801dee2:	4618      	mov	r0, r3
 801dee4:	3714      	adds	r7, #20
 801dee6:	46bd      	mov	sp, r7
 801dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deec:	4770      	bx	lr

0801deee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801deee:	b580      	push	{r7, lr}
 801def0:	b084      	sub	sp, #16
 801def2:	af00      	add	r7, sp, #0
 801def4:	60f8      	str	r0, [r7, #12]
 801def6:	60b9      	str	r1, [r7, #8]
 801def8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	2202      	movs	r2, #2
 801defe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	687a      	ldr	r2, [r7, #4]
 801df06:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	687a      	ldr	r2, [r7, #4]
 801df0c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	68ba      	ldr	r2, [r7, #8]
 801df12:	2100      	movs	r1, #0
 801df14:	68f8      	ldr	r0, [r7, #12]
 801df16:	f003 fd68 	bl	80219ea <USBD_LL_Transmit>

  return USBD_OK;
 801df1a:	2300      	movs	r3, #0
}
 801df1c:	4618      	mov	r0, r3
 801df1e:	3710      	adds	r7, #16
 801df20:	46bd      	mov	sp, r7
 801df22:	bd80      	pop	{r7, pc}

0801df24 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801df24:	b580      	push	{r7, lr}
 801df26:	b084      	sub	sp, #16
 801df28:	af00      	add	r7, sp, #0
 801df2a:	60f8      	str	r0, [r7, #12]
 801df2c:	60b9      	str	r1, [r7, #8]
 801df2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	68ba      	ldr	r2, [r7, #8]
 801df34:	2100      	movs	r1, #0
 801df36:	68f8      	ldr	r0, [r7, #12]
 801df38:	f003 fd57 	bl	80219ea <USBD_LL_Transmit>

  return USBD_OK;
 801df3c:	2300      	movs	r3, #0
}
 801df3e:	4618      	mov	r0, r3
 801df40:	3710      	adds	r7, #16
 801df42:	46bd      	mov	sp, r7
 801df44:	bd80      	pop	{r7, pc}

0801df46 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801df46:	b580      	push	{r7, lr}
 801df48:	b084      	sub	sp, #16
 801df4a:	af00      	add	r7, sp, #0
 801df4c:	60f8      	str	r0, [r7, #12]
 801df4e:	60b9      	str	r1, [r7, #8]
 801df50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801df52:	68fb      	ldr	r3, [r7, #12]
 801df54:	2203      	movs	r2, #3
 801df56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	687a      	ldr	r2, [r7, #4]
 801df5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	687a      	ldr	r2, [r7, #4]
 801df66:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	68ba      	ldr	r2, [r7, #8]
 801df6e:	2100      	movs	r1, #0
 801df70:	68f8      	ldr	r0, [r7, #12]
 801df72:	f003 fd5b 	bl	8021a2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801df76:	2300      	movs	r3, #0
}
 801df78:	4618      	mov	r0, r3
 801df7a:	3710      	adds	r7, #16
 801df7c:	46bd      	mov	sp, r7
 801df7e:	bd80      	pop	{r7, pc}

0801df80 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801df80:	b580      	push	{r7, lr}
 801df82:	b084      	sub	sp, #16
 801df84:	af00      	add	r7, sp, #0
 801df86:	60f8      	str	r0, [r7, #12]
 801df88:	60b9      	str	r1, [r7, #8]
 801df8a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	68ba      	ldr	r2, [r7, #8]
 801df90:	2100      	movs	r1, #0
 801df92:	68f8      	ldr	r0, [r7, #12]
 801df94:	f003 fd4a 	bl	8021a2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801df98:	2300      	movs	r3, #0
}
 801df9a:	4618      	mov	r0, r3
 801df9c:	3710      	adds	r7, #16
 801df9e:	46bd      	mov	sp, r7
 801dfa0:	bd80      	pop	{r7, pc}

0801dfa2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801dfa2:	b580      	push	{r7, lr}
 801dfa4:	b082      	sub	sp, #8
 801dfa6:	af00      	add	r7, sp, #0
 801dfa8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	2204      	movs	r2, #4
 801dfae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801dfb2:	2300      	movs	r3, #0
 801dfb4:	2200      	movs	r2, #0
 801dfb6:	2100      	movs	r1, #0
 801dfb8:	6878      	ldr	r0, [r7, #4]
 801dfba:	f003 fd16 	bl	80219ea <USBD_LL_Transmit>

  return USBD_OK;
 801dfbe:	2300      	movs	r3, #0
}
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	3708      	adds	r7, #8
 801dfc4:	46bd      	mov	sp, r7
 801dfc6:	bd80      	pop	{r7, pc}

0801dfc8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801dfc8:	b580      	push	{r7, lr}
 801dfca:	b082      	sub	sp, #8
 801dfcc:	af00      	add	r7, sp, #0
 801dfce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	2205      	movs	r2, #5
 801dfd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801dfd8:	2300      	movs	r3, #0
 801dfda:	2200      	movs	r2, #0
 801dfdc:	2100      	movs	r1, #0
 801dfde:	6878      	ldr	r0, [r7, #4]
 801dfe0:	f003 fd24 	bl	8021a2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801dfe4:	2300      	movs	r3, #0
}
 801dfe6:	4618      	mov	r0, r3
 801dfe8:	3708      	adds	r7, #8
 801dfea:	46bd      	mov	sp, r7
 801dfec:	bd80      	pop	{r7, pc}

0801dfee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801dfee:	b480      	push	{r7}
 801dff0:	b083      	sub	sp, #12
 801dff2:	af00      	add	r7, sp, #0
 801dff4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	f103 0208 	add.w	r2, r3, #8
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	f04f 32ff 	mov.w	r2, #4294967295
 801e006:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	f103 0208 	add.w	r2, r3, #8
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	f103 0208 	add.w	r2, r3, #8
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	2200      	movs	r2, #0
 801e020:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801e022:	bf00      	nop
 801e024:	370c      	adds	r7, #12
 801e026:	46bd      	mov	sp, r7
 801e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e02c:	4770      	bx	lr

0801e02e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801e02e:	b480      	push	{r7}
 801e030:	b083      	sub	sp, #12
 801e032:	af00      	add	r7, sp, #0
 801e034:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	2200      	movs	r2, #0
 801e03a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801e03c:	bf00      	nop
 801e03e:	370c      	adds	r7, #12
 801e040:	46bd      	mov	sp, r7
 801e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e046:	4770      	bx	lr

0801e048 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e048:	b480      	push	{r7}
 801e04a:	b085      	sub	sp, #20
 801e04c:	af00      	add	r7, sp, #0
 801e04e:	6078      	str	r0, [r7, #4]
 801e050:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	685b      	ldr	r3, [r3, #4]
 801e056:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801e058:	683b      	ldr	r3, [r7, #0]
 801e05a:	68fa      	ldr	r2, [r7, #12]
 801e05c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801e05e:	68fb      	ldr	r3, [r7, #12]
 801e060:	689a      	ldr	r2, [r3, #8]
 801e062:	683b      	ldr	r3, [r7, #0]
 801e064:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	689b      	ldr	r3, [r3, #8]
 801e06a:	683a      	ldr	r2, [r7, #0]
 801e06c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	683a      	ldr	r2, [r7, #0]
 801e072:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801e074:	683b      	ldr	r3, [r7, #0]
 801e076:	687a      	ldr	r2, [r7, #4]
 801e078:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	681b      	ldr	r3, [r3, #0]
 801e07e:	1c5a      	adds	r2, r3, #1
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	601a      	str	r2, [r3, #0]
}
 801e084:	bf00      	nop
 801e086:	3714      	adds	r7, #20
 801e088:	46bd      	mov	sp, r7
 801e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e08e:	4770      	bx	lr

0801e090 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e090:	b480      	push	{r7}
 801e092:	b085      	sub	sp, #20
 801e094:	af00      	add	r7, sp, #0
 801e096:	6078      	str	r0, [r7, #4]
 801e098:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801e09a:	683b      	ldr	r3, [r7, #0]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801e0a0:	68bb      	ldr	r3, [r7, #8]
 801e0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e0a6:	d103      	bne.n	801e0b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	691b      	ldr	r3, [r3, #16]
 801e0ac:	60fb      	str	r3, [r7, #12]
 801e0ae:	e00c      	b.n	801e0ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	3308      	adds	r3, #8
 801e0b4:	60fb      	str	r3, [r7, #12]
 801e0b6:	e002      	b.n	801e0be <vListInsert+0x2e>
 801e0b8:	68fb      	ldr	r3, [r7, #12]
 801e0ba:	685b      	ldr	r3, [r3, #4]
 801e0bc:	60fb      	str	r3, [r7, #12]
 801e0be:	68fb      	ldr	r3, [r7, #12]
 801e0c0:	685b      	ldr	r3, [r3, #4]
 801e0c2:	681b      	ldr	r3, [r3, #0]
 801e0c4:	68ba      	ldr	r2, [r7, #8]
 801e0c6:	429a      	cmp	r2, r3
 801e0c8:	d2f6      	bcs.n	801e0b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	685a      	ldr	r2, [r3, #4]
 801e0ce:	683b      	ldr	r3, [r7, #0]
 801e0d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801e0d2:	683b      	ldr	r3, [r7, #0]
 801e0d4:	685b      	ldr	r3, [r3, #4]
 801e0d6:	683a      	ldr	r2, [r7, #0]
 801e0d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801e0da:	683b      	ldr	r3, [r7, #0]
 801e0dc:	68fa      	ldr	r2, [r7, #12]
 801e0de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	683a      	ldr	r2, [r7, #0]
 801e0e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801e0e6:	683b      	ldr	r3, [r7, #0]
 801e0e8:	687a      	ldr	r2, [r7, #4]
 801e0ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	1c5a      	adds	r2, r3, #1
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	601a      	str	r2, [r3, #0]
}
 801e0f6:	bf00      	nop
 801e0f8:	3714      	adds	r7, #20
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e100:	4770      	bx	lr

0801e102 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801e102:	b480      	push	{r7}
 801e104:	b085      	sub	sp, #20
 801e106:	af00      	add	r7, sp, #0
 801e108:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	691b      	ldr	r3, [r3, #16]
 801e10e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	685b      	ldr	r3, [r3, #4]
 801e114:	687a      	ldr	r2, [r7, #4]
 801e116:	6892      	ldr	r2, [r2, #8]
 801e118:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	689b      	ldr	r3, [r3, #8]
 801e11e:	687a      	ldr	r2, [r7, #4]
 801e120:	6852      	ldr	r2, [r2, #4]
 801e122:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	685b      	ldr	r3, [r3, #4]
 801e128:	687a      	ldr	r2, [r7, #4]
 801e12a:	429a      	cmp	r2, r3
 801e12c:	d103      	bne.n	801e136 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	689a      	ldr	r2, [r3, #8]
 801e132:	68fb      	ldr	r3, [r7, #12]
 801e134:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	2200      	movs	r2, #0
 801e13a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801e13c:	68fb      	ldr	r3, [r7, #12]
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	1e5a      	subs	r2, r3, #1
 801e142:	68fb      	ldr	r3, [r7, #12]
 801e144:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801e146:	68fb      	ldr	r3, [r7, #12]
 801e148:	681b      	ldr	r3, [r3, #0]
}
 801e14a:	4618      	mov	r0, r3
 801e14c:	3714      	adds	r7, #20
 801e14e:	46bd      	mov	sp, r7
 801e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e154:	4770      	bx	lr
	...

0801e158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801e158:	b580      	push	{r7, lr}
 801e15a:	b084      	sub	sp, #16
 801e15c:	af00      	add	r7, sp, #0
 801e15e:	6078      	str	r0, [r7, #4]
 801e160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801e166:	68fb      	ldr	r3, [r7, #12]
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d10a      	bne.n	801e182 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801e16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e170:	f383 8811 	msr	BASEPRI, r3
 801e174:	f3bf 8f6f 	isb	sy
 801e178:	f3bf 8f4f 	dsb	sy
 801e17c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801e17e:	bf00      	nop
 801e180:	e7fe      	b.n	801e180 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801e182:	f002 fc67 	bl	8020a54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	681a      	ldr	r2, [r3, #0]
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e18e:	68f9      	ldr	r1, [r7, #12]
 801e190:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801e192:	fb01 f303 	mul.w	r3, r1, r3
 801e196:	441a      	add	r2, r3
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801e19c:	68fb      	ldr	r3, [r7, #12]
 801e19e:	2200      	movs	r2, #0
 801e1a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	681a      	ldr	r2, [r3, #0]
 801e1a6:	68fb      	ldr	r3, [r7, #12]
 801e1a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	681a      	ldr	r2, [r3, #0]
 801e1ae:	68fb      	ldr	r3, [r7, #12]
 801e1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e1b2:	3b01      	subs	r3, #1
 801e1b4:	68f9      	ldr	r1, [r7, #12]
 801e1b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801e1b8:	fb01 f303 	mul.w	r3, r1, r3
 801e1bc:	441a      	add	r2, r3
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801e1c2:	68fb      	ldr	r3, [r7, #12]
 801e1c4:	22ff      	movs	r2, #255	; 0xff
 801e1c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	22ff      	movs	r2, #255	; 0xff
 801e1ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801e1d2:	683b      	ldr	r3, [r7, #0]
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	d114      	bne.n	801e202 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e1d8:	68fb      	ldr	r3, [r7, #12]
 801e1da:	691b      	ldr	r3, [r3, #16]
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d01a      	beq.n	801e216 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	3310      	adds	r3, #16
 801e1e4:	4618      	mov	r0, r3
 801e1e6:	f001 fbfb 	bl	801f9e0 <xTaskRemoveFromEventList>
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d012      	beq.n	801e216 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801e1f0:	4b0c      	ldr	r3, [pc, #48]	; (801e224 <xQueueGenericReset+0xcc>)
 801e1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e1f6:	601a      	str	r2, [r3, #0]
 801e1f8:	f3bf 8f4f 	dsb	sy
 801e1fc:	f3bf 8f6f 	isb	sy
 801e200:	e009      	b.n	801e216 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801e202:	68fb      	ldr	r3, [r7, #12]
 801e204:	3310      	adds	r3, #16
 801e206:	4618      	mov	r0, r3
 801e208:	f7ff fef1 	bl	801dfee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801e20c:	68fb      	ldr	r3, [r7, #12]
 801e20e:	3324      	adds	r3, #36	; 0x24
 801e210:	4618      	mov	r0, r3
 801e212:	f7ff feec 	bl	801dfee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801e216:	f002 fc4d 	bl	8020ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801e21a:	2301      	movs	r3, #1
}
 801e21c:	4618      	mov	r0, r3
 801e21e:	3710      	adds	r7, #16
 801e220:	46bd      	mov	sp, r7
 801e222:	bd80      	pop	{r7, pc}
 801e224:	e000ed04 	.word	0xe000ed04

0801e228 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801e228:	b580      	push	{r7, lr}
 801e22a:	b08e      	sub	sp, #56	; 0x38
 801e22c:	af02      	add	r7, sp, #8
 801e22e:	60f8      	str	r0, [r7, #12]
 801e230:	60b9      	str	r1, [r7, #8]
 801e232:	607a      	str	r2, [r7, #4]
 801e234:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d10a      	bne.n	801e252 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e240:	f383 8811 	msr	BASEPRI, r3
 801e244:	f3bf 8f6f 	isb	sy
 801e248:	f3bf 8f4f 	dsb	sy
 801e24c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801e24e:	bf00      	nop
 801e250:	e7fe      	b.n	801e250 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801e252:	683b      	ldr	r3, [r7, #0]
 801e254:	2b00      	cmp	r3, #0
 801e256:	d10a      	bne.n	801e26e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801e258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e25c:	f383 8811 	msr	BASEPRI, r3
 801e260:	f3bf 8f6f 	isb	sy
 801e264:	f3bf 8f4f 	dsb	sy
 801e268:	627b      	str	r3, [r7, #36]	; 0x24
}
 801e26a:	bf00      	nop
 801e26c:	e7fe      	b.n	801e26c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	2b00      	cmp	r3, #0
 801e272:	d002      	beq.n	801e27a <xQueueGenericCreateStatic+0x52>
 801e274:	68bb      	ldr	r3, [r7, #8]
 801e276:	2b00      	cmp	r3, #0
 801e278:	d001      	beq.n	801e27e <xQueueGenericCreateStatic+0x56>
 801e27a:	2301      	movs	r3, #1
 801e27c:	e000      	b.n	801e280 <xQueueGenericCreateStatic+0x58>
 801e27e:	2300      	movs	r3, #0
 801e280:	2b00      	cmp	r3, #0
 801e282:	d10a      	bne.n	801e29a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801e284:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e288:	f383 8811 	msr	BASEPRI, r3
 801e28c:	f3bf 8f6f 	isb	sy
 801e290:	f3bf 8f4f 	dsb	sy
 801e294:	623b      	str	r3, [r7, #32]
}
 801e296:	bf00      	nop
 801e298:	e7fe      	b.n	801e298 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	d102      	bne.n	801e2a6 <xQueueGenericCreateStatic+0x7e>
 801e2a0:	68bb      	ldr	r3, [r7, #8]
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d101      	bne.n	801e2aa <xQueueGenericCreateStatic+0x82>
 801e2a6:	2301      	movs	r3, #1
 801e2a8:	e000      	b.n	801e2ac <xQueueGenericCreateStatic+0x84>
 801e2aa:	2300      	movs	r3, #0
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d10a      	bne.n	801e2c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e2b4:	f383 8811 	msr	BASEPRI, r3
 801e2b8:	f3bf 8f6f 	isb	sy
 801e2bc:	f3bf 8f4f 	dsb	sy
 801e2c0:	61fb      	str	r3, [r7, #28]
}
 801e2c2:	bf00      	nop
 801e2c4:	e7fe      	b.n	801e2c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801e2c6:	2348      	movs	r3, #72	; 0x48
 801e2c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801e2ca:	697b      	ldr	r3, [r7, #20]
 801e2cc:	2b48      	cmp	r3, #72	; 0x48
 801e2ce:	d00a      	beq.n	801e2e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801e2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e2d4:	f383 8811 	msr	BASEPRI, r3
 801e2d8:	f3bf 8f6f 	isb	sy
 801e2dc:	f3bf 8f4f 	dsb	sy
 801e2e0:	61bb      	str	r3, [r7, #24]
}
 801e2e2:	bf00      	nop
 801e2e4:	e7fe      	b.n	801e2e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801e2e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801e2e8:	683b      	ldr	r3, [r7, #0]
 801e2ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d00d      	beq.n	801e30e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2f4:	2201      	movs	r2, #1
 801e2f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801e2fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e300:	9300      	str	r3, [sp, #0]
 801e302:	4613      	mov	r3, r2
 801e304:	687a      	ldr	r2, [r7, #4]
 801e306:	68b9      	ldr	r1, [r7, #8]
 801e308:	68f8      	ldr	r0, [r7, #12]
 801e30a:	f000 f83f 	bl	801e38c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801e30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801e310:	4618      	mov	r0, r3
 801e312:	3730      	adds	r7, #48	; 0x30
 801e314:	46bd      	mov	sp, r7
 801e316:	bd80      	pop	{r7, pc}

0801e318 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801e318:	b580      	push	{r7, lr}
 801e31a:	b08a      	sub	sp, #40	; 0x28
 801e31c:	af02      	add	r7, sp, #8
 801e31e:	60f8      	str	r0, [r7, #12]
 801e320:	60b9      	str	r1, [r7, #8]
 801e322:	4613      	mov	r3, r2
 801e324:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d10a      	bne.n	801e342 <xQueueGenericCreate+0x2a>
	__asm volatile
 801e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e330:	f383 8811 	msr	BASEPRI, r3
 801e334:	f3bf 8f6f 	isb	sy
 801e338:	f3bf 8f4f 	dsb	sy
 801e33c:	613b      	str	r3, [r7, #16]
}
 801e33e:	bf00      	nop
 801e340:	e7fe      	b.n	801e340 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	68ba      	ldr	r2, [r7, #8]
 801e346:	fb02 f303 	mul.w	r3, r2, r3
 801e34a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801e34c:	69fb      	ldr	r3, [r7, #28]
 801e34e:	3348      	adds	r3, #72	; 0x48
 801e350:	4618      	mov	r0, r3
 801e352:	f002 fca1 	bl	8020c98 <pvPortMalloc>
 801e356:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801e358:	69bb      	ldr	r3, [r7, #24]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d011      	beq.n	801e382 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801e35e:	69bb      	ldr	r3, [r7, #24]
 801e360:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801e362:	697b      	ldr	r3, [r7, #20]
 801e364:	3348      	adds	r3, #72	; 0x48
 801e366:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801e368:	69bb      	ldr	r3, [r7, #24]
 801e36a:	2200      	movs	r2, #0
 801e36c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801e370:	79fa      	ldrb	r2, [r7, #7]
 801e372:	69bb      	ldr	r3, [r7, #24]
 801e374:	9300      	str	r3, [sp, #0]
 801e376:	4613      	mov	r3, r2
 801e378:	697a      	ldr	r2, [r7, #20]
 801e37a:	68b9      	ldr	r1, [r7, #8]
 801e37c:	68f8      	ldr	r0, [r7, #12]
 801e37e:	f000 f805 	bl	801e38c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801e382:	69bb      	ldr	r3, [r7, #24]
	}
 801e384:	4618      	mov	r0, r3
 801e386:	3720      	adds	r7, #32
 801e388:	46bd      	mov	sp, r7
 801e38a:	bd80      	pop	{r7, pc}

0801e38c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b084      	sub	sp, #16
 801e390:	af00      	add	r7, sp, #0
 801e392:	60f8      	str	r0, [r7, #12]
 801e394:	60b9      	str	r1, [r7, #8]
 801e396:	607a      	str	r2, [r7, #4]
 801e398:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801e39a:	68bb      	ldr	r3, [r7, #8]
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d103      	bne.n	801e3a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801e3a0:	69bb      	ldr	r3, [r7, #24]
 801e3a2:	69ba      	ldr	r2, [r7, #24]
 801e3a4:	601a      	str	r2, [r3, #0]
 801e3a6:	e002      	b.n	801e3ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801e3a8:	69bb      	ldr	r3, [r7, #24]
 801e3aa:	687a      	ldr	r2, [r7, #4]
 801e3ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801e3ae:	69bb      	ldr	r3, [r7, #24]
 801e3b0:	68fa      	ldr	r2, [r7, #12]
 801e3b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801e3b4:	69bb      	ldr	r3, [r7, #24]
 801e3b6:	68ba      	ldr	r2, [r7, #8]
 801e3b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801e3ba:	2101      	movs	r1, #1
 801e3bc:	69b8      	ldr	r0, [r7, #24]
 801e3be:	f7ff fecb 	bl	801e158 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801e3c2:	bf00      	nop
 801e3c4:	3710      	adds	r7, #16
 801e3c6:	46bd      	mov	sp, r7
 801e3c8:	bd80      	pop	{r7, pc}
	...

0801e3cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801e3cc:	b580      	push	{r7, lr}
 801e3ce:	b08e      	sub	sp, #56	; 0x38
 801e3d0:	af00      	add	r7, sp, #0
 801e3d2:	60f8      	str	r0, [r7, #12]
 801e3d4:	60b9      	str	r1, [r7, #8]
 801e3d6:	607a      	str	r2, [r7, #4]
 801e3d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801e3da:	2300      	movs	r3, #0
 801e3dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801e3de:	68fb      	ldr	r3, [r7, #12]
 801e3e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801e3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d10a      	bne.n	801e3fe <xQueueGenericSend+0x32>
	__asm volatile
 801e3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e3ec:	f383 8811 	msr	BASEPRI, r3
 801e3f0:	f3bf 8f6f 	isb	sy
 801e3f4:	f3bf 8f4f 	dsb	sy
 801e3f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801e3fa:	bf00      	nop
 801e3fc:	e7fe      	b.n	801e3fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e3fe:	68bb      	ldr	r3, [r7, #8]
 801e400:	2b00      	cmp	r3, #0
 801e402:	d103      	bne.n	801e40c <xQueueGenericSend+0x40>
 801e404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e408:	2b00      	cmp	r3, #0
 801e40a:	d101      	bne.n	801e410 <xQueueGenericSend+0x44>
 801e40c:	2301      	movs	r3, #1
 801e40e:	e000      	b.n	801e412 <xQueueGenericSend+0x46>
 801e410:	2300      	movs	r3, #0
 801e412:	2b00      	cmp	r3, #0
 801e414:	d10a      	bne.n	801e42c <xQueueGenericSend+0x60>
	__asm volatile
 801e416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e41a:	f383 8811 	msr	BASEPRI, r3
 801e41e:	f3bf 8f6f 	isb	sy
 801e422:	f3bf 8f4f 	dsb	sy
 801e426:	627b      	str	r3, [r7, #36]	; 0x24
}
 801e428:	bf00      	nop
 801e42a:	e7fe      	b.n	801e42a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801e42c:	683b      	ldr	r3, [r7, #0]
 801e42e:	2b02      	cmp	r3, #2
 801e430:	d103      	bne.n	801e43a <xQueueGenericSend+0x6e>
 801e432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e436:	2b01      	cmp	r3, #1
 801e438:	d101      	bne.n	801e43e <xQueueGenericSend+0x72>
 801e43a:	2301      	movs	r3, #1
 801e43c:	e000      	b.n	801e440 <xQueueGenericSend+0x74>
 801e43e:	2300      	movs	r3, #0
 801e440:	2b00      	cmp	r3, #0
 801e442:	d10a      	bne.n	801e45a <xQueueGenericSend+0x8e>
	__asm volatile
 801e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e448:	f383 8811 	msr	BASEPRI, r3
 801e44c:	f3bf 8f6f 	isb	sy
 801e450:	f3bf 8f4f 	dsb	sy
 801e454:	623b      	str	r3, [r7, #32]
}
 801e456:	bf00      	nop
 801e458:	e7fe      	b.n	801e458 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e45a:	f001 fc7d 	bl	801fd58 <xTaskGetSchedulerState>
 801e45e:	4603      	mov	r3, r0
 801e460:	2b00      	cmp	r3, #0
 801e462:	d102      	bne.n	801e46a <xQueueGenericSend+0x9e>
 801e464:	687b      	ldr	r3, [r7, #4]
 801e466:	2b00      	cmp	r3, #0
 801e468:	d101      	bne.n	801e46e <xQueueGenericSend+0xa2>
 801e46a:	2301      	movs	r3, #1
 801e46c:	e000      	b.n	801e470 <xQueueGenericSend+0xa4>
 801e46e:	2300      	movs	r3, #0
 801e470:	2b00      	cmp	r3, #0
 801e472:	d10a      	bne.n	801e48a <xQueueGenericSend+0xbe>
	__asm volatile
 801e474:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e478:	f383 8811 	msr	BASEPRI, r3
 801e47c:	f3bf 8f6f 	isb	sy
 801e480:	f3bf 8f4f 	dsb	sy
 801e484:	61fb      	str	r3, [r7, #28]
}
 801e486:	bf00      	nop
 801e488:	e7fe      	b.n	801e488 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801e48a:	f002 fae3 	bl	8020a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801e48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e496:	429a      	cmp	r2, r3
 801e498:	d302      	bcc.n	801e4a0 <xQueueGenericSend+0xd4>
 801e49a:	683b      	ldr	r3, [r7, #0]
 801e49c:	2b02      	cmp	r3, #2
 801e49e:	d129      	bne.n	801e4f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801e4a0:	683a      	ldr	r2, [r7, #0]
 801e4a2:	68b9      	ldr	r1, [r7, #8]
 801e4a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e4a6:	f000 fb2f 	bl	801eb08 <prvCopyDataToQueue>
 801e4aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d010      	beq.n	801e4d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4b6:	3324      	adds	r3, #36	; 0x24
 801e4b8:	4618      	mov	r0, r3
 801e4ba:	f001 fa91 	bl	801f9e0 <xTaskRemoveFromEventList>
 801e4be:	4603      	mov	r3, r0
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d013      	beq.n	801e4ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801e4c4:	4b3f      	ldr	r3, [pc, #252]	; (801e5c4 <xQueueGenericSend+0x1f8>)
 801e4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e4ca:	601a      	str	r2, [r3, #0]
 801e4cc:	f3bf 8f4f 	dsb	sy
 801e4d0:	f3bf 8f6f 	isb	sy
 801e4d4:	e00a      	b.n	801e4ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d007      	beq.n	801e4ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801e4dc:	4b39      	ldr	r3, [pc, #228]	; (801e5c4 <xQueueGenericSend+0x1f8>)
 801e4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e4e2:	601a      	str	r2, [r3, #0]
 801e4e4:	f3bf 8f4f 	dsb	sy
 801e4e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801e4ec:	f002 fae2 	bl	8020ab4 <vPortExitCritical>
				return pdPASS;
 801e4f0:	2301      	movs	r3, #1
 801e4f2:	e063      	b.n	801e5bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d103      	bne.n	801e502 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801e4fa:	f002 fadb 	bl	8020ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801e4fe:	2300      	movs	r3, #0
 801e500:	e05c      	b.n	801e5bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e504:	2b00      	cmp	r3, #0
 801e506:	d106      	bne.n	801e516 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e508:	f107 0314 	add.w	r3, r7, #20
 801e50c:	4618      	mov	r0, r3
 801e50e:	f001 fac9 	bl	801faa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e512:	2301      	movs	r3, #1
 801e514:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e516:	f002 facd 	bl	8020ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e51a:	f001 f843 	bl	801f5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e51e:	f002 fa99 	bl	8020a54 <vPortEnterCritical>
 801e522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e528:	b25b      	sxtb	r3, r3
 801e52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e52e:	d103      	bne.n	801e538 <xQueueGenericSend+0x16c>
 801e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e532:	2200      	movs	r2, #0
 801e534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e53a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e53e:	b25b      	sxtb	r3, r3
 801e540:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e544:	d103      	bne.n	801e54e <xQueueGenericSend+0x182>
 801e546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e548:	2200      	movs	r2, #0
 801e54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e54e:	f002 fab1 	bl	8020ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801e552:	1d3a      	adds	r2, r7, #4
 801e554:	f107 0314 	add.w	r3, r7, #20
 801e558:	4611      	mov	r1, r2
 801e55a:	4618      	mov	r0, r3
 801e55c:	f001 fab8 	bl	801fad0 <xTaskCheckForTimeOut>
 801e560:	4603      	mov	r3, r0
 801e562:	2b00      	cmp	r3, #0
 801e564:	d124      	bne.n	801e5b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801e566:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e568:	f000 fbc6 	bl	801ecf8 <prvIsQueueFull>
 801e56c:	4603      	mov	r3, r0
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d018      	beq.n	801e5a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e574:	3310      	adds	r3, #16
 801e576:	687a      	ldr	r2, [r7, #4]
 801e578:	4611      	mov	r1, r2
 801e57a:	4618      	mov	r0, r3
 801e57c:	f001 f9e0 	bl	801f940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801e580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e582:	f000 fb51 	bl	801ec28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801e586:	f001 f81b 	bl	801f5c0 <xTaskResumeAll>
 801e58a:	4603      	mov	r3, r0
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	f47f af7c 	bne.w	801e48a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801e592:	4b0c      	ldr	r3, [pc, #48]	; (801e5c4 <xQueueGenericSend+0x1f8>)
 801e594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e598:	601a      	str	r2, [r3, #0]
 801e59a:	f3bf 8f4f 	dsb	sy
 801e59e:	f3bf 8f6f 	isb	sy
 801e5a2:	e772      	b.n	801e48a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801e5a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e5a6:	f000 fb3f 	bl	801ec28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801e5aa:	f001 f809 	bl	801f5c0 <xTaskResumeAll>
 801e5ae:	e76c      	b.n	801e48a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801e5b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e5b2:	f000 fb39 	bl	801ec28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801e5b6:	f001 f803 	bl	801f5c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801e5ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801e5bc:	4618      	mov	r0, r3
 801e5be:	3738      	adds	r7, #56	; 0x38
 801e5c0:	46bd      	mov	sp, r7
 801e5c2:	bd80      	pop	{r7, pc}
 801e5c4:	e000ed04 	.word	0xe000ed04

0801e5c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801e5c8:	b580      	push	{r7, lr}
 801e5ca:	b090      	sub	sp, #64	; 0x40
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	60f8      	str	r0, [r7, #12]
 801e5d0:	60b9      	str	r1, [r7, #8]
 801e5d2:	607a      	str	r2, [r7, #4]
 801e5d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801e5d6:	68fb      	ldr	r3, [r7, #12]
 801e5d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801e5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d10a      	bne.n	801e5f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801e5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e5e4:	f383 8811 	msr	BASEPRI, r3
 801e5e8:	f3bf 8f6f 	isb	sy
 801e5ec:	f3bf 8f4f 	dsb	sy
 801e5f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801e5f2:	bf00      	nop
 801e5f4:	e7fe      	b.n	801e5f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e5f6:	68bb      	ldr	r3, [r7, #8]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d103      	bne.n	801e604 <xQueueGenericSendFromISR+0x3c>
 801e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e600:	2b00      	cmp	r3, #0
 801e602:	d101      	bne.n	801e608 <xQueueGenericSendFromISR+0x40>
 801e604:	2301      	movs	r3, #1
 801e606:	e000      	b.n	801e60a <xQueueGenericSendFromISR+0x42>
 801e608:	2300      	movs	r3, #0
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d10a      	bne.n	801e624 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801e60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e612:	f383 8811 	msr	BASEPRI, r3
 801e616:	f3bf 8f6f 	isb	sy
 801e61a:	f3bf 8f4f 	dsb	sy
 801e61e:	627b      	str	r3, [r7, #36]	; 0x24
}
 801e620:	bf00      	nop
 801e622:	e7fe      	b.n	801e622 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801e624:	683b      	ldr	r3, [r7, #0]
 801e626:	2b02      	cmp	r3, #2
 801e628:	d103      	bne.n	801e632 <xQueueGenericSendFromISR+0x6a>
 801e62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e62e:	2b01      	cmp	r3, #1
 801e630:	d101      	bne.n	801e636 <xQueueGenericSendFromISR+0x6e>
 801e632:	2301      	movs	r3, #1
 801e634:	e000      	b.n	801e638 <xQueueGenericSendFromISR+0x70>
 801e636:	2300      	movs	r3, #0
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d10a      	bne.n	801e652 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801e63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e640:	f383 8811 	msr	BASEPRI, r3
 801e644:	f3bf 8f6f 	isb	sy
 801e648:	f3bf 8f4f 	dsb	sy
 801e64c:	623b      	str	r3, [r7, #32]
}
 801e64e:	bf00      	nop
 801e650:	e7fe      	b.n	801e650 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801e652:	f002 fae1 	bl	8020c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801e656:	f3ef 8211 	mrs	r2, BASEPRI
 801e65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e65e:	f383 8811 	msr	BASEPRI, r3
 801e662:	f3bf 8f6f 	isb	sy
 801e666:	f3bf 8f4f 	dsb	sy
 801e66a:	61fa      	str	r2, [r7, #28]
 801e66c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801e66e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801e670:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801e672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e67a:	429a      	cmp	r2, r3
 801e67c:	d302      	bcc.n	801e684 <xQueueGenericSendFromISR+0xbc>
 801e67e:	683b      	ldr	r3, [r7, #0]
 801e680:	2b02      	cmp	r3, #2
 801e682:	d12f      	bne.n	801e6e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801e684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e692:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801e694:	683a      	ldr	r2, [r7, #0]
 801e696:	68b9      	ldr	r1, [r7, #8]
 801e698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e69a:	f000 fa35 	bl	801eb08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801e69e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801e6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e6a6:	d112      	bne.n	801e6ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d016      	beq.n	801e6de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e6b2:	3324      	adds	r3, #36	; 0x24
 801e6b4:	4618      	mov	r0, r3
 801e6b6:	f001 f993 	bl	801f9e0 <xTaskRemoveFromEventList>
 801e6ba:	4603      	mov	r3, r0
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	d00e      	beq.n	801e6de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d00b      	beq.n	801e6de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	2201      	movs	r2, #1
 801e6ca:	601a      	str	r2, [r3, #0]
 801e6cc:	e007      	b.n	801e6de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801e6ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801e6d2:	3301      	adds	r3, #1
 801e6d4:	b2db      	uxtb	r3, r3
 801e6d6:	b25a      	sxtb	r2, r3
 801e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e6da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801e6de:	2301      	movs	r3, #1
 801e6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801e6e2:	e001      	b.n	801e6e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801e6e4:	2300      	movs	r3, #0
 801e6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801e6ec:	697b      	ldr	r3, [r7, #20]
 801e6ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801e6f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801e6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801e6f6:	4618      	mov	r0, r3
 801e6f8:	3740      	adds	r7, #64	; 0x40
 801e6fa:	46bd      	mov	sp, r7
 801e6fc:	bd80      	pop	{r7, pc}
	...

0801e700 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801e700:	b580      	push	{r7, lr}
 801e702:	b08c      	sub	sp, #48	; 0x30
 801e704:	af00      	add	r7, sp, #0
 801e706:	60f8      	str	r0, [r7, #12]
 801e708:	60b9      	str	r1, [r7, #8]
 801e70a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801e70c:	2300      	movs	r3, #0
 801e70e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801e710:	68fb      	ldr	r3, [r7, #12]
 801e712:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801e714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e716:	2b00      	cmp	r3, #0
 801e718:	d10a      	bne.n	801e730 <xQueueReceive+0x30>
	__asm volatile
 801e71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e71e:	f383 8811 	msr	BASEPRI, r3
 801e722:	f3bf 8f6f 	isb	sy
 801e726:	f3bf 8f4f 	dsb	sy
 801e72a:	623b      	str	r3, [r7, #32]
}
 801e72c:	bf00      	nop
 801e72e:	e7fe      	b.n	801e72e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e730:	68bb      	ldr	r3, [r7, #8]
 801e732:	2b00      	cmp	r3, #0
 801e734:	d103      	bne.n	801e73e <xQueueReceive+0x3e>
 801e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d101      	bne.n	801e742 <xQueueReceive+0x42>
 801e73e:	2301      	movs	r3, #1
 801e740:	e000      	b.n	801e744 <xQueueReceive+0x44>
 801e742:	2300      	movs	r3, #0
 801e744:	2b00      	cmp	r3, #0
 801e746:	d10a      	bne.n	801e75e <xQueueReceive+0x5e>
	__asm volatile
 801e748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e74c:	f383 8811 	msr	BASEPRI, r3
 801e750:	f3bf 8f6f 	isb	sy
 801e754:	f3bf 8f4f 	dsb	sy
 801e758:	61fb      	str	r3, [r7, #28]
}
 801e75a:	bf00      	nop
 801e75c:	e7fe      	b.n	801e75c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e75e:	f001 fafb 	bl	801fd58 <xTaskGetSchedulerState>
 801e762:	4603      	mov	r3, r0
 801e764:	2b00      	cmp	r3, #0
 801e766:	d102      	bne.n	801e76e <xQueueReceive+0x6e>
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	2b00      	cmp	r3, #0
 801e76c:	d101      	bne.n	801e772 <xQueueReceive+0x72>
 801e76e:	2301      	movs	r3, #1
 801e770:	e000      	b.n	801e774 <xQueueReceive+0x74>
 801e772:	2300      	movs	r3, #0
 801e774:	2b00      	cmp	r3, #0
 801e776:	d10a      	bne.n	801e78e <xQueueReceive+0x8e>
	__asm volatile
 801e778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e77c:	f383 8811 	msr	BASEPRI, r3
 801e780:	f3bf 8f6f 	isb	sy
 801e784:	f3bf 8f4f 	dsb	sy
 801e788:	61bb      	str	r3, [r7, #24]
}
 801e78a:	bf00      	nop
 801e78c:	e7fe      	b.n	801e78c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801e78e:	f002 f961 	bl	8020a54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e796:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d01f      	beq.n	801e7de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801e79e:	68b9      	ldr	r1, [r7, #8]
 801e7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e7a2:	f000 fa1b 	bl	801ebdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801e7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7a8:	1e5a      	subs	r2, r3, #1
 801e7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7b0:	691b      	ldr	r3, [r3, #16]
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d00f      	beq.n	801e7d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7b8:	3310      	adds	r3, #16
 801e7ba:	4618      	mov	r0, r3
 801e7bc:	f001 f910 	bl	801f9e0 <xTaskRemoveFromEventList>
 801e7c0:	4603      	mov	r3, r0
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d007      	beq.n	801e7d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801e7c6:	4b3d      	ldr	r3, [pc, #244]	; (801e8bc <xQueueReceive+0x1bc>)
 801e7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e7cc:	601a      	str	r2, [r3, #0]
 801e7ce:	f3bf 8f4f 	dsb	sy
 801e7d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801e7d6:	f002 f96d 	bl	8020ab4 <vPortExitCritical>
				return pdPASS;
 801e7da:	2301      	movs	r3, #1
 801e7dc:	e069      	b.n	801e8b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	d103      	bne.n	801e7ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801e7e4:	f002 f966 	bl	8020ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801e7e8:	2300      	movs	r3, #0
 801e7ea:	e062      	b.n	801e8b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d106      	bne.n	801e800 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e7f2:	f107 0310 	add.w	r3, r7, #16
 801e7f6:	4618      	mov	r0, r3
 801e7f8:	f001 f954 	bl	801faa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e7fc:	2301      	movs	r3, #1
 801e7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e800:	f002 f958 	bl	8020ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e804:	f000 fece 	bl	801f5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e808:	f002 f924 	bl	8020a54 <vPortEnterCritical>
 801e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e80e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e812:	b25b      	sxtb	r3, r3
 801e814:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e818:	d103      	bne.n	801e822 <xQueueReceive+0x122>
 801e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e81c:	2200      	movs	r2, #0
 801e81e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e828:	b25b      	sxtb	r3, r3
 801e82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e82e:	d103      	bne.n	801e838 <xQueueReceive+0x138>
 801e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e832:	2200      	movs	r2, #0
 801e834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e838:	f002 f93c 	bl	8020ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801e83c:	1d3a      	adds	r2, r7, #4
 801e83e:	f107 0310 	add.w	r3, r7, #16
 801e842:	4611      	mov	r1, r2
 801e844:	4618      	mov	r0, r3
 801e846:	f001 f943 	bl	801fad0 <xTaskCheckForTimeOut>
 801e84a:	4603      	mov	r3, r0
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d123      	bne.n	801e898 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e852:	f000 fa3b 	bl	801eccc <prvIsQueueEmpty>
 801e856:	4603      	mov	r3, r0
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d017      	beq.n	801e88c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e85e:	3324      	adds	r3, #36	; 0x24
 801e860:	687a      	ldr	r2, [r7, #4]
 801e862:	4611      	mov	r1, r2
 801e864:	4618      	mov	r0, r3
 801e866:	f001 f86b 	bl	801f940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801e86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e86c:	f000 f9dc 	bl	801ec28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801e870:	f000 fea6 	bl	801f5c0 <xTaskResumeAll>
 801e874:	4603      	mov	r3, r0
 801e876:	2b00      	cmp	r3, #0
 801e878:	d189      	bne.n	801e78e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801e87a:	4b10      	ldr	r3, [pc, #64]	; (801e8bc <xQueueReceive+0x1bc>)
 801e87c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e880:	601a      	str	r2, [r3, #0]
 801e882:	f3bf 8f4f 	dsb	sy
 801e886:	f3bf 8f6f 	isb	sy
 801e88a:	e780      	b.n	801e78e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801e88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e88e:	f000 f9cb 	bl	801ec28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801e892:	f000 fe95 	bl	801f5c0 <xTaskResumeAll>
 801e896:	e77a      	b.n	801e78e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801e898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e89a:	f000 f9c5 	bl	801ec28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801e89e:	f000 fe8f 	bl	801f5c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e8a4:	f000 fa12 	bl	801eccc <prvIsQueueEmpty>
 801e8a8:	4603      	mov	r3, r0
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	f43f af6f 	beq.w	801e78e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801e8b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801e8b2:	4618      	mov	r0, r3
 801e8b4:	3730      	adds	r7, #48	; 0x30
 801e8b6:	46bd      	mov	sp, r7
 801e8b8:	bd80      	pop	{r7, pc}
 801e8ba:	bf00      	nop
 801e8bc:	e000ed04 	.word	0xe000ed04

0801e8c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801e8c0:	b580      	push	{r7, lr}
 801e8c2:	b08e      	sub	sp, #56	; 0x38
 801e8c4:	af00      	add	r7, sp, #0
 801e8c6:	6078      	str	r0, [r7, #4]
 801e8c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801e8d2:	2300      	movs	r3, #0
 801e8d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801e8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d10a      	bne.n	801e8f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801e8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e8e0:	f383 8811 	msr	BASEPRI, r3
 801e8e4:	f3bf 8f6f 	isb	sy
 801e8e8:	f3bf 8f4f 	dsb	sy
 801e8ec:	623b      	str	r3, [r7, #32]
}
 801e8ee:	bf00      	nop
 801e8f0:	e7fe      	b.n	801e8f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d00a      	beq.n	801e910 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e8fe:	f383 8811 	msr	BASEPRI, r3
 801e902:	f3bf 8f6f 	isb	sy
 801e906:	f3bf 8f4f 	dsb	sy
 801e90a:	61fb      	str	r3, [r7, #28]
}
 801e90c:	bf00      	nop
 801e90e:	e7fe      	b.n	801e90e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e910:	f001 fa22 	bl	801fd58 <xTaskGetSchedulerState>
 801e914:	4603      	mov	r3, r0
 801e916:	2b00      	cmp	r3, #0
 801e918:	d102      	bne.n	801e920 <xQueueSemaphoreTake+0x60>
 801e91a:	683b      	ldr	r3, [r7, #0]
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d101      	bne.n	801e924 <xQueueSemaphoreTake+0x64>
 801e920:	2301      	movs	r3, #1
 801e922:	e000      	b.n	801e926 <xQueueSemaphoreTake+0x66>
 801e924:	2300      	movs	r3, #0
 801e926:	2b00      	cmp	r3, #0
 801e928:	d10a      	bne.n	801e940 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801e92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e92e:	f383 8811 	msr	BASEPRI, r3
 801e932:	f3bf 8f6f 	isb	sy
 801e936:	f3bf 8f4f 	dsb	sy
 801e93a:	61bb      	str	r3, [r7, #24]
}
 801e93c:	bf00      	nop
 801e93e:	e7fe      	b.n	801e93e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801e940:	f002 f888 	bl	8020a54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801e944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e948:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801e94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	d024      	beq.n	801e99a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801e950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e952:	1e5a      	subs	r2, r3, #1
 801e954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e956:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d104      	bne.n	801e96a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801e960:	f001 fba2 	bl	80200a8 <pvTaskIncrementMutexHeldCount>
 801e964:	4602      	mov	r2, r0
 801e966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e968:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e96c:	691b      	ldr	r3, [r3, #16]
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d00f      	beq.n	801e992 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e974:	3310      	adds	r3, #16
 801e976:	4618      	mov	r0, r3
 801e978:	f001 f832 	bl	801f9e0 <xTaskRemoveFromEventList>
 801e97c:	4603      	mov	r3, r0
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d007      	beq.n	801e992 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801e982:	4b54      	ldr	r3, [pc, #336]	; (801ead4 <xQueueSemaphoreTake+0x214>)
 801e984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e988:	601a      	str	r2, [r3, #0]
 801e98a:	f3bf 8f4f 	dsb	sy
 801e98e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801e992:	f002 f88f 	bl	8020ab4 <vPortExitCritical>
				return pdPASS;
 801e996:	2301      	movs	r3, #1
 801e998:	e097      	b.n	801eaca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e99a:	683b      	ldr	r3, [r7, #0]
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d111      	bne.n	801e9c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d00a      	beq.n	801e9bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801e9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e9aa:	f383 8811 	msr	BASEPRI, r3
 801e9ae:	f3bf 8f6f 	isb	sy
 801e9b2:	f3bf 8f4f 	dsb	sy
 801e9b6:	617b      	str	r3, [r7, #20]
}
 801e9b8:	bf00      	nop
 801e9ba:	e7fe      	b.n	801e9ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801e9bc:	f002 f87a 	bl	8020ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801e9c0:	2300      	movs	r3, #0
 801e9c2:	e082      	b.n	801eaca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e9c6:	2b00      	cmp	r3, #0
 801e9c8:	d106      	bne.n	801e9d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e9ca:	f107 030c 	add.w	r3, r7, #12
 801e9ce:	4618      	mov	r0, r3
 801e9d0:	f001 f868 	bl	801faa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e9d4:	2301      	movs	r3, #1
 801e9d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e9d8:	f002 f86c 	bl	8020ab4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e9dc:	f000 fde2 	bl	801f5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e9e0:	f002 f838 	bl	8020a54 <vPortEnterCritical>
 801e9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e9e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e9ea:	b25b      	sxtb	r3, r3
 801e9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e9f0:	d103      	bne.n	801e9fa <xQueueSemaphoreTake+0x13a>
 801e9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e9f4:	2200      	movs	r2, #0
 801e9f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e9fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ea00:	b25b      	sxtb	r3, r3
 801ea02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea06:	d103      	bne.n	801ea10 <xQueueSemaphoreTake+0x150>
 801ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea0a:	2200      	movs	r2, #0
 801ea0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ea10:	f002 f850 	bl	8020ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ea14:	463a      	mov	r2, r7
 801ea16:	f107 030c 	add.w	r3, r7, #12
 801ea1a:	4611      	mov	r1, r2
 801ea1c:	4618      	mov	r0, r3
 801ea1e:	f001 f857 	bl	801fad0 <xTaskCheckForTimeOut>
 801ea22:	4603      	mov	r3, r0
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d132      	bne.n	801ea8e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ea28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ea2a:	f000 f94f 	bl	801eccc <prvIsQueueEmpty>
 801ea2e:	4603      	mov	r3, r0
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	d026      	beq.n	801ea82 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ea34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d109      	bne.n	801ea50 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801ea3c:	f002 f80a 	bl	8020a54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea42:	689b      	ldr	r3, [r3, #8]
 801ea44:	4618      	mov	r0, r3
 801ea46:	f001 f9a5 	bl	801fd94 <xTaskPriorityInherit>
 801ea4a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801ea4c:	f002 f832 	bl	8020ab4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801ea50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea52:	3324      	adds	r3, #36	; 0x24
 801ea54:	683a      	ldr	r2, [r7, #0]
 801ea56:	4611      	mov	r1, r2
 801ea58:	4618      	mov	r0, r3
 801ea5a:	f000 ff71 	bl	801f940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801ea5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ea60:	f000 f8e2 	bl	801ec28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801ea64:	f000 fdac 	bl	801f5c0 <xTaskResumeAll>
 801ea68:	4603      	mov	r3, r0
 801ea6a:	2b00      	cmp	r3, #0
 801ea6c:	f47f af68 	bne.w	801e940 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801ea70:	4b18      	ldr	r3, [pc, #96]	; (801ead4 <xQueueSemaphoreTake+0x214>)
 801ea72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ea76:	601a      	str	r2, [r3, #0]
 801ea78:	f3bf 8f4f 	dsb	sy
 801ea7c:	f3bf 8f6f 	isb	sy
 801ea80:	e75e      	b.n	801e940 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801ea82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ea84:	f000 f8d0 	bl	801ec28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801ea88:	f000 fd9a 	bl	801f5c0 <xTaskResumeAll>
 801ea8c:	e758      	b.n	801e940 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801ea8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ea90:	f000 f8ca 	bl	801ec28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801ea94:	f000 fd94 	bl	801f5c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ea98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ea9a:	f000 f917 	bl	801eccc <prvIsQueueEmpty>
 801ea9e:	4603      	mov	r3, r0
 801eaa0:	2b00      	cmp	r3, #0
 801eaa2:	f43f af4d 	beq.w	801e940 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	d00d      	beq.n	801eac8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801eaac:	f001 ffd2 	bl	8020a54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801eab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801eab2:	f000 f811 	bl	801ead8 <prvGetDisinheritPriorityAfterTimeout>
 801eab6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801eab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eaba:	689b      	ldr	r3, [r3, #8]
 801eabc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801eabe:	4618      	mov	r0, r3
 801eac0:	f001 fa64 	bl	801ff8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801eac4:	f001 fff6 	bl	8020ab4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801eac8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801eaca:	4618      	mov	r0, r3
 801eacc:	3738      	adds	r7, #56	; 0x38
 801eace:	46bd      	mov	sp, r7
 801ead0:	bd80      	pop	{r7, pc}
 801ead2:	bf00      	nop
 801ead4:	e000ed04 	.word	0xe000ed04

0801ead8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801ead8:	b480      	push	{r7}
 801eada:	b085      	sub	sp, #20
 801eadc:	af00      	add	r7, sp, #0
 801eade:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d006      	beq.n	801eaf6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	f1c3 0307 	rsb	r3, r3, #7
 801eaf2:	60fb      	str	r3, [r7, #12]
 801eaf4:	e001      	b.n	801eafa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801eaf6:	2300      	movs	r3, #0
 801eaf8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801eafa:	68fb      	ldr	r3, [r7, #12]
	}
 801eafc:	4618      	mov	r0, r3
 801eafe:	3714      	adds	r7, #20
 801eb00:	46bd      	mov	sp, r7
 801eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb06:	4770      	bx	lr

0801eb08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801eb08:	b580      	push	{r7, lr}
 801eb0a:	b086      	sub	sp, #24
 801eb0c:	af00      	add	r7, sp, #0
 801eb0e:	60f8      	str	r0, [r7, #12]
 801eb10:	60b9      	str	r1, [r7, #8]
 801eb12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801eb14:	2300      	movs	r3, #0
 801eb16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801eb18:	68fb      	ldr	r3, [r7, #12]
 801eb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801eb1e:	68fb      	ldr	r3, [r7, #12]
 801eb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	d10d      	bne.n	801eb42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801eb26:	68fb      	ldr	r3, [r7, #12]
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d14d      	bne.n	801ebca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801eb2e:	68fb      	ldr	r3, [r7, #12]
 801eb30:	689b      	ldr	r3, [r3, #8]
 801eb32:	4618      	mov	r0, r3
 801eb34:	f001 f9a4 	bl	801fe80 <xTaskPriorityDisinherit>
 801eb38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	2200      	movs	r2, #0
 801eb3e:	609a      	str	r2, [r3, #8]
 801eb40:	e043      	b.n	801ebca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d119      	bne.n	801eb7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801eb48:	68fb      	ldr	r3, [r7, #12]
 801eb4a:	6858      	ldr	r0, [r3, #4]
 801eb4c:	68fb      	ldr	r3, [r7, #12]
 801eb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb50:	461a      	mov	r2, r3
 801eb52:	68b9      	ldr	r1, [r7, #8]
 801eb54:	f003 f806 	bl	8021b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801eb58:	68fb      	ldr	r3, [r7, #12]
 801eb5a:	685a      	ldr	r2, [r3, #4]
 801eb5c:	68fb      	ldr	r3, [r7, #12]
 801eb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb60:	441a      	add	r2, r3
 801eb62:	68fb      	ldr	r3, [r7, #12]
 801eb64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801eb66:	68fb      	ldr	r3, [r7, #12]
 801eb68:	685a      	ldr	r2, [r3, #4]
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	689b      	ldr	r3, [r3, #8]
 801eb6e:	429a      	cmp	r2, r3
 801eb70:	d32b      	bcc.n	801ebca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801eb72:	68fb      	ldr	r3, [r7, #12]
 801eb74:	681a      	ldr	r2, [r3, #0]
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	605a      	str	r2, [r3, #4]
 801eb7a:	e026      	b.n	801ebca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801eb7c:	68fb      	ldr	r3, [r7, #12]
 801eb7e:	68d8      	ldr	r0, [r3, #12]
 801eb80:	68fb      	ldr	r3, [r7, #12]
 801eb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb84:	461a      	mov	r2, r3
 801eb86:	68b9      	ldr	r1, [r7, #8]
 801eb88:	f002 ffec 	bl	8021b64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	68da      	ldr	r2, [r3, #12]
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb94:	425b      	negs	r3, r3
 801eb96:	441a      	add	r2, r3
 801eb98:	68fb      	ldr	r3, [r7, #12]
 801eb9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801eb9c:	68fb      	ldr	r3, [r7, #12]
 801eb9e:	68da      	ldr	r2, [r3, #12]
 801eba0:	68fb      	ldr	r3, [r7, #12]
 801eba2:	681b      	ldr	r3, [r3, #0]
 801eba4:	429a      	cmp	r2, r3
 801eba6:	d207      	bcs.n	801ebb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801eba8:	68fb      	ldr	r3, [r7, #12]
 801ebaa:	689a      	ldr	r2, [r3, #8]
 801ebac:	68fb      	ldr	r3, [r7, #12]
 801ebae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ebb0:	425b      	negs	r3, r3
 801ebb2:	441a      	add	r2, r3
 801ebb4:	68fb      	ldr	r3, [r7, #12]
 801ebb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	2b02      	cmp	r3, #2
 801ebbc:	d105      	bne.n	801ebca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ebbe:	693b      	ldr	r3, [r7, #16]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d002      	beq.n	801ebca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801ebc4:	693b      	ldr	r3, [r7, #16]
 801ebc6:	3b01      	subs	r3, #1
 801ebc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801ebca:	693b      	ldr	r3, [r7, #16]
 801ebcc:	1c5a      	adds	r2, r3, #1
 801ebce:	68fb      	ldr	r3, [r7, #12]
 801ebd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801ebd2:	697b      	ldr	r3, [r7, #20]
}
 801ebd4:	4618      	mov	r0, r3
 801ebd6:	3718      	adds	r7, #24
 801ebd8:	46bd      	mov	sp, r7
 801ebda:	bd80      	pop	{r7, pc}

0801ebdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801ebdc:	b580      	push	{r7, lr}
 801ebde:	b082      	sub	sp, #8
 801ebe0:	af00      	add	r7, sp, #0
 801ebe2:	6078      	str	r0, [r7, #4]
 801ebe4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d018      	beq.n	801ec20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	68da      	ldr	r2, [r3, #12]
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ebf6:	441a      	add	r2, r3
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	68da      	ldr	r2, [r3, #12]
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	689b      	ldr	r3, [r3, #8]
 801ec04:	429a      	cmp	r2, r3
 801ec06:	d303      	bcc.n	801ec10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	681a      	ldr	r2, [r3, #0]
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801ec10:	687b      	ldr	r3, [r7, #4]
 801ec12:	68d9      	ldr	r1, [r3, #12]
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec18:	461a      	mov	r2, r3
 801ec1a:	6838      	ldr	r0, [r7, #0]
 801ec1c:	f002 ffa2 	bl	8021b64 <memcpy>
	}
}
 801ec20:	bf00      	nop
 801ec22:	3708      	adds	r7, #8
 801ec24:	46bd      	mov	sp, r7
 801ec26:	bd80      	pop	{r7, pc}

0801ec28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801ec28:	b580      	push	{r7, lr}
 801ec2a:	b084      	sub	sp, #16
 801ec2c:	af00      	add	r7, sp, #0
 801ec2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801ec30:	f001 ff10 	bl	8020a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ec3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ec3c:	e011      	b.n	801ec62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	d012      	beq.n	801ec6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	3324      	adds	r3, #36	; 0x24
 801ec4a:	4618      	mov	r0, r3
 801ec4c:	f000 fec8 	bl	801f9e0 <xTaskRemoveFromEventList>
 801ec50:	4603      	mov	r3, r0
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d001      	beq.n	801ec5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801ec56:	f000 ff9d 	bl	801fb94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801ec5a:	7bfb      	ldrb	r3, [r7, #15]
 801ec5c:	3b01      	subs	r3, #1
 801ec5e:	b2db      	uxtb	r3, r3
 801ec60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ec62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	dce9      	bgt.n	801ec3e <prvUnlockQueue+0x16>
 801ec6a:	e000      	b.n	801ec6e <prvUnlockQueue+0x46>
					break;
 801ec6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801ec6e:	687b      	ldr	r3, [r7, #4]
 801ec70:	22ff      	movs	r2, #255	; 0xff
 801ec72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801ec76:	f001 ff1d 	bl	8020ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801ec7a:	f001 feeb 	bl	8020a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ec84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ec86:	e011      	b.n	801ecac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	691b      	ldr	r3, [r3, #16]
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d012      	beq.n	801ecb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	3310      	adds	r3, #16
 801ec94:	4618      	mov	r0, r3
 801ec96:	f000 fea3 	bl	801f9e0 <xTaskRemoveFromEventList>
 801ec9a:	4603      	mov	r3, r0
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	d001      	beq.n	801eca4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801eca0:	f000 ff78 	bl	801fb94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801eca4:	7bbb      	ldrb	r3, [r7, #14]
 801eca6:	3b01      	subs	r3, #1
 801eca8:	b2db      	uxtb	r3, r3
 801ecaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ecac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	dce9      	bgt.n	801ec88 <prvUnlockQueue+0x60>
 801ecb4:	e000      	b.n	801ecb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801ecb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	22ff      	movs	r2, #255	; 0xff
 801ecbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801ecc0:	f001 fef8 	bl	8020ab4 <vPortExitCritical>
}
 801ecc4:	bf00      	nop
 801ecc6:	3710      	adds	r7, #16
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	bd80      	pop	{r7, pc}

0801eccc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801eccc:	b580      	push	{r7, lr}
 801ecce:	b084      	sub	sp, #16
 801ecd0:	af00      	add	r7, sp, #0
 801ecd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ecd4:	f001 febe 	bl	8020a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d102      	bne.n	801ece6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801ece0:	2301      	movs	r3, #1
 801ece2:	60fb      	str	r3, [r7, #12]
 801ece4:	e001      	b.n	801ecea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801ece6:	2300      	movs	r3, #0
 801ece8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ecea:	f001 fee3 	bl	8020ab4 <vPortExitCritical>

	return xReturn;
 801ecee:	68fb      	ldr	r3, [r7, #12]
}
 801ecf0:	4618      	mov	r0, r3
 801ecf2:	3710      	adds	r7, #16
 801ecf4:	46bd      	mov	sp, r7
 801ecf6:	bd80      	pop	{r7, pc}

0801ecf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801ecf8:	b580      	push	{r7, lr}
 801ecfa:	b084      	sub	sp, #16
 801ecfc:	af00      	add	r7, sp, #0
 801ecfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ed00:	f001 fea8 	bl	8020a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ed0c:	429a      	cmp	r2, r3
 801ed0e:	d102      	bne.n	801ed16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801ed10:	2301      	movs	r3, #1
 801ed12:	60fb      	str	r3, [r7, #12]
 801ed14:	e001      	b.n	801ed1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801ed16:	2300      	movs	r3, #0
 801ed18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ed1a:	f001 fecb 	bl	8020ab4 <vPortExitCritical>

	return xReturn;
 801ed1e:	68fb      	ldr	r3, [r7, #12]
}
 801ed20:	4618      	mov	r0, r3
 801ed22:	3710      	adds	r7, #16
 801ed24:	46bd      	mov	sp, r7
 801ed26:	bd80      	pop	{r7, pc}

0801ed28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801ed28:	b480      	push	{r7}
 801ed2a:	b085      	sub	sp, #20
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	6078      	str	r0, [r7, #4]
 801ed30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ed32:	2300      	movs	r3, #0
 801ed34:	60fb      	str	r3, [r7, #12]
 801ed36:	e014      	b.n	801ed62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801ed38:	4a0f      	ldr	r2, [pc, #60]	; (801ed78 <vQueueAddToRegistry+0x50>)
 801ed3a:	68fb      	ldr	r3, [r7, #12]
 801ed3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	d10b      	bne.n	801ed5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801ed44:	490c      	ldr	r1, [pc, #48]	; (801ed78 <vQueueAddToRegistry+0x50>)
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	683a      	ldr	r2, [r7, #0]
 801ed4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801ed4e:	4a0a      	ldr	r2, [pc, #40]	; (801ed78 <vQueueAddToRegistry+0x50>)
 801ed50:	68fb      	ldr	r3, [r7, #12]
 801ed52:	00db      	lsls	r3, r3, #3
 801ed54:	4413      	add	r3, r2
 801ed56:	687a      	ldr	r2, [r7, #4]
 801ed58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801ed5a:	e006      	b.n	801ed6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ed5c:	68fb      	ldr	r3, [r7, #12]
 801ed5e:	3301      	adds	r3, #1
 801ed60:	60fb      	str	r3, [r7, #12]
 801ed62:	68fb      	ldr	r3, [r7, #12]
 801ed64:	2b07      	cmp	r3, #7
 801ed66:	d9e7      	bls.n	801ed38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801ed68:	bf00      	nop
 801ed6a:	bf00      	nop
 801ed6c:	3714      	adds	r7, #20
 801ed6e:	46bd      	mov	sp, r7
 801ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed74:	4770      	bx	lr
 801ed76:	bf00      	nop
 801ed78:	20014abc 	.word	0x20014abc

0801ed7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ed7c:	b580      	push	{r7, lr}
 801ed7e:	b086      	sub	sp, #24
 801ed80:	af00      	add	r7, sp, #0
 801ed82:	60f8      	str	r0, [r7, #12]
 801ed84:	60b9      	str	r1, [r7, #8]
 801ed86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801ed88:	68fb      	ldr	r3, [r7, #12]
 801ed8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801ed8c:	f001 fe62 	bl	8020a54 <vPortEnterCritical>
 801ed90:	697b      	ldr	r3, [r7, #20]
 801ed92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ed96:	b25b      	sxtb	r3, r3
 801ed98:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ed9c:	d103      	bne.n	801eda6 <vQueueWaitForMessageRestricted+0x2a>
 801ed9e:	697b      	ldr	r3, [r7, #20]
 801eda0:	2200      	movs	r2, #0
 801eda2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801eda6:	697b      	ldr	r3, [r7, #20]
 801eda8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801edac:	b25b      	sxtb	r3, r3
 801edae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801edb2:	d103      	bne.n	801edbc <vQueueWaitForMessageRestricted+0x40>
 801edb4:	697b      	ldr	r3, [r7, #20]
 801edb6:	2200      	movs	r2, #0
 801edb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801edbc:	f001 fe7a 	bl	8020ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801edc0:	697b      	ldr	r3, [r7, #20]
 801edc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d106      	bne.n	801edd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801edc8:	697b      	ldr	r3, [r7, #20]
 801edca:	3324      	adds	r3, #36	; 0x24
 801edcc:	687a      	ldr	r2, [r7, #4]
 801edce:	68b9      	ldr	r1, [r7, #8]
 801edd0:	4618      	mov	r0, r3
 801edd2:	f000 fdd9 	bl	801f988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801edd6:	6978      	ldr	r0, [r7, #20]
 801edd8:	f7ff ff26 	bl	801ec28 <prvUnlockQueue>
	}
 801eddc:	bf00      	nop
 801edde:	3718      	adds	r7, #24
 801ede0:	46bd      	mov	sp, r7
 801ede2:	bd80      	pop	{r7, pc}

0801ede4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801ede4:	b580      	push	{r7, lr}
 801ede6:	b08e      	sub	sp, #56	; 0x38
 801ede8:	af04      	add	r7, sp, #16
 801edea:	60f8      	str	r0, [r7, #12]
 801edec:	60b9      	str	r1, [r7, #8]
 801edee:	607a      	str	r2, [r7, #4]
 801edf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801edf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801edf4:	2b00      	cmp	r3, #0
 801edf6:	d10a      	bne.n	801ee0e <xTaskCreateStatic+0x2a>
	__asm volatile
 801edf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801edfc:	f383 8811 	msr	BASEPRI, r3
 801ee00:	f3bf 8f6f 	isb	sy
 801ee04:	f3bf 8f4f 	dsb	sy
 801ee08:	623b      	str	r3, [r7, #32]
}
 801ee0a:	bf00      	nop
 801ee0c:	e7fe      	b.n	801ee0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801ee0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d10a      	bne.n	801ee2a <xTaskCreateStatic+0x46>
	__asm volatile
 801ee14:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee18:	f383 8811 	msr	BASEPRI, r3
 801ee1c:	f3bf 8f6f 	isb	sy
 801ee20:	f3bf 8f4f 	dsb	sy
 801ee24:	61fb      	str	r3, [r7, #28]
}
 801ee26:	bf00      	nop
 801ee28:	e7fe      	b.n	801ee28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801ee2a:	2354      	movs	r3, #84	; 0x54
 801ee2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801ee2e:	693b      	ldr	r3, [r7, #16]
 801ee30:	2b54      	cmp	r3, #84	; 0x54
 801ee32:	d00a      	beq.n	801ee4a <xTaskCreateStatic+0x66>
	__asm volatile
 801ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee38:	f383 8811 	msr	BASEPRI, r3
 801ee3c:	f3bf 8f6f 	isb	sy
 801ee40:	f3bf 8f4f 	dsb	sy
 801ee44:	61bb      	str	r3, [r7, #24]
}
 801ee46:	bf00      	nop
 801ee48:	e7fe      	b.n	801ee48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ee4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801ee4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d01e      	beq.n	801ee90 <xTaskCreateStatic+0xac>
 801ee52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d01b      	beq.n	801ee90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801ee5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ee60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee64:	2202      	movs	r2, #2
 801ee66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ee6a:	2300      	movs	r3, #0
 801ee6c:	9303      	str	r3, [sp, #12]
 801ee6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee70:	9302      	str	r3, [sp, #8]
 801ee72:	f107 0314 	add.w	r3, r7, #20
 801ee76:	9301      	str	r3, [sp, #4]
 801ee78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee7a:	9300      	str	r3, [sp, #0]
 801ee7c:	683b      	ldr	r3, [r7, #0]
 801ee7e:	687a      	ldr	r2, [r7, #4]
 801ee80:	68b9      	ldr	r1, [r7, #8]
 801ee82:	68f8      	ldr	r0, [r7, #12]
 801ee84:	f000 f850 	bl	801ef28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ee88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ee8a:	f000 f8d5 	bl	801f038 <prvAddNewTaskToReadyList>
 801ee8e:	e001      	b.n	801ee94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801ee90:	2300      	movs	r3, #0
 801ee92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801ee94:	697b      	ldr	r3, [r7, #20]
	}
 801ee96:	4618      	mov	r0, r3
 801ee98:	3728      	adds	r7, #40	; 0x28
 801ee9a:	46bd      	mov	sp, r7
 801ee9c:	bd80      	pop	{r7, pc}

0801ee9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801ee9e:	b580      	push	{r7, lr}
 801eea0:	b08c      	sub	sp, #48	; 0x30
 801eea2:	af04      	add	r7, sp, #16
 801eea4:	60f8      	str	r0, [r7, #12]
 801eea6:	60b9      	str	r1, [r7, #8]
 801eea8:	603b      	str	r3, [r7, #0]
 801eeaa:	4613      	mov	r3, r2
 801eeac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801eeae:	88fb      	ldrh	r3, [r7, #6]
 801eeb0:	009b      	lsls	r3, r3, #2
 801eeb2:	4618      	mov	r0, r3
 801eeb4:	f001 fef0 	bl	8020c98 <pvPortMalloc>
 801eeb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801eeba:	697b      	ldr	r3, [r7, #20]
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	d00e      	beq.n	801eede <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801eec0:	2054      	movs	r0, #84	; 0x54
 801eec2:	f001 fee9 	bl	8020c98 <pvPortMalloc>
 801eec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801eec8:	69fb      	ldr	r3, [r7, #28]
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	d003      	beq.n	801eed6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801eece:	69fb      	ldr	r3, [r7, #28]
 801eed0:	697a      	ldr	r2, [r7, #20]
 801eed2:	631a      	str	r2, [r3, #48]	; 0x30
 801eed4:	e005      	b.n	801eee2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801eed6:	6978      	ldr	r0, [r7, #20]
 801eed8:	f001 ffaa 	bl	8020e30 <vPortFree>
 801eedc:	e001      	b.n	801eee2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801eede:	2300      	movs	r3, #0
 801eee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801eee2:	69fb      	ldr	r3, [r7, #28]
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	d017      	beq.n	801ef18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801eee8:	69fb      	ldr	r3, [r7, #28]
 801eeea:	2200      	movs	r2, #0
 801eeec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801eef0:	88fa      	ldrh	r2, [r7, #6]
 801eef2:	2300      	movs	r3, #0
 801eef4:	9303      	str	r3, [sp, #12]
 801eef6:	69fb      	ldr	r3, [r7, #28]
 801eef8:	9302      	str	r3, [sp, #8]
 801eefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eefc:	9301      	str	r3, [sp, #4]
 801eefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef00:	9300      	str	r3, [sp, #0]
 801ef02:	683b      	ldr	r3, [r7, #0]
 801ef04:	68b9      	ldr	r1, [r7, #8]
 801ef06:	68f8      	ldr	r0, [r7, #12]
 801ef08:	f000 f80e 	bl	801ef28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ef0c:	69f8      	ldr	r0, [r7, #28]
 801ef0e:	f000 f893 	bl	801f038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801ef12:	2301      	movs	r3, #1
 801ef14:	61bb      	str	r3, [r7, #24]
 801ef16:	e002      	b.n	801ef1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801ef18:	f04f 33ff 	mov.w	r3, #4294967295
 801ef1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801ef1e:	69bb      	ldr	r3, [r7, #24]
	}
 801ef20:	4618      	mov	r0, r3
 801ef22:	3720      	adds	r7, #32
 801ef24:	46bd      	mov	sp, r7
 801ef26:	bd80      	pop	{r7, pc}

0801ef28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801ef28:	b580      	push	{r7, lr}
 801ef2a:	b088      	sub	sp, #32
 801ef2c:	af00      	add	r7, sp, #0
 801ef2e:	60f8      	str	r0, [r7, #12]
 801ef30:	60b9      	str	r1, [r7, #8]
 801ef32:	607a      	str	r2, [r7, #4]
 801ef34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ef40:	3b01      	subs	r3, #1
 801ef42:	009b      	lsls	r3, r3, #2
 801ef44:	4413      	add	r3, r2
 801ef46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ef48:	69bb      	ldr	r3, [r7, #24]
 801ef4a:	f023 0307 	bic.w	r3, r3, #7
 801ef4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ef50:	69bb      	ldr	r3, [r7, #24]
 801ef52:	f003 0307 	and.w	r3, r3, #7
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d00a      	beq.n	801ef70 <prvInitialiseNewTask+0x48>
	__asm volatile
 801ef5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ef5e:	f383 8811 	msr	BASEPRI, r3
 801ef62:	f3bf 8f6f 	isb	sy
 801ef66:	f3bf 8f4f 	dsb	sy
 801ef6a:	617b      	str	r3, [r7, #20]
}
 801ef6c:	bf00      	nop
 801ef6e:	e7fe      	b.n	801ef6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801ef70:	68bb      	ldr	r3, [r7, #8]
 801ef72:	2b00      	cmp	r3, #0
 801ef74:	d01f      	beq.n	801efb6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ef76:	2300      	movs	r3, #0
 801ef78:	61fb      	str	r3, [r7, #28]
 801ef7a:	e012      	b.n	801efa2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801ef7c:	68ba      	ldr	r2, [r7, #8]
 801ef7e:	69fb      	ldr	r3, [r7, #28]
 801ef80:	4413      	add	r3, r2
 801ef82:	7819      	ldrb	r1, [r3, #0]
 801ef84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ef86:	69fb      	ldr	r3, [r7, #28]
 801ef88:	4413      	add	r3, r2
 801ef8a:	3334      	adds	r3, #52	; 0x34
 801ef8c:	460a      	mov	r2, r1
 801ef8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801ef90:	68ba      	ldr	r2, [r7, #8]
 801ef92:	69fb      	ldr	r3, [r7, #28]
 801ef94:	4413      	add	r3, r2
 801ef96:	781b      	ldrb	r3, [r3, #0]
 801ef98:	2b00      	cmp	r3, #0
 801ef9a:	d006      	beq.n	801efaa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ef9c:	69fb      	ldr	r3, [r7, #28]
 801ef9e:	3301      	adds	r3, #1
 801efa0:	61fb      	str	r3, [r7, #28]
 801efa2:	69fb      	ldr	r3, [r7, #28]
 801efa4:	2b0f      	cmp	r3, #15
 801efa6:	d9e9      	bls.n	801ef7c <prvInitialiseNewTask+0x54>
 801efa8:	e000      	b.n	801efac <prvInitialiseNewTask+0x84>
			{
				break;
 801efaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801efac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efae:	2200      	movs	r2, #0
 801efb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801efb4:	e003      	b.n	801efbe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efb8:	2200      	movs	r2, #0
 801efba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801efc0:	2b06      	cmp	r3, #6
 801efc2:	d901      	bls.n	801efc8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801efc4:	2306      	movs	r3, #6
 801efc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801efcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801efce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801efd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801efd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efd6:	2200      	movs	r2, #0
 801efd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801efda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efdc:	3304      	adds	r3, #4
 801efde:	4618      	mov	r0, r3
 801efe0:	f7ff f825 	bl	801e02e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efe6:	3318      	adds	r3, #24
 801efe8:	4618      	mov	r0, r3
 801efea:	f7ff f820 	bl	801e02e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801efee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eff2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801eff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eff6:	f1c3 0207 	rsb	r2, r3, #7
 801effa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801effc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f002:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801f004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f006:	2200      	movs	r2, #0
 801f008:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801f00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f00c:	2200      	movs	r2, #0
 801f00e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801f012:	683a      	ldr	r2, [r7, #0]
 801f014:	68f9      	ldr	r1, [r7, #12]
 801f016:	69b8      	ldr	r0, [r7, #24]
 801f018:	f001 fbf2 	bl	8020800 <pxPortInitialiseStack>
 801f01c:	4602      	mov	r2, r0
 801f01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f020:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801f022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f024:	2b00      	cmp	r3, #0
 801f026:	d002      	beq.n	801f02e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801f028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f02a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f02c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f02e:	bf00      	nop
 801f030:	3720      	adds	r7, #32
 801f032:	46bd      	mov	sp, r7
 801f034:	bd80      	pop	{r7, pc}
	...

0801f038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801f038:	b580      	push	{r7, lr}
 801f03a:	b082      	sub	sp, #8
 801f03c:	af00      	add	r7, sp, #0
 801f03e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801f040:	f001 fd08 	bl	8020a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801f044:	4b2a      	ldr	r3, [pc, #168]	; (801f0f0 <prvAddNewTaskToReadyList+0xb8>)
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	3301      	adds	r3, #1
 801f04a:	4a29      	ldr	r2, [pc, #164]	; (801f0f0 <prvAddNewTaskToReadyList+0xb8>)
 801f04c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801f04e:	4b29      	ldr	r3, [pc, #164]	; (801f0f4 <prvAddNewTaskToReadyList+0xbc>)
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	2b00      	cmp	r3, #0
 801f054:	d109      	bne.n	801f06a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801f056:	4a27      	ldr	r2, [pc, #156]	; (801f0f4 <prvAddNewTaskToReadyList+0xbc>)
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801f05c:	4b24      	ldr	r3, [pc, #144]	; (801f0f0 <prvAddNewTaskToReadyList+0xb8>)
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	2b01      	cmp	r3, #1
 801f062:	d110      	bne.n	801f086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801f064:	f000 fdba 	bl	801fbdc <prvInitialiseTaskLists>
 801f068:	e00d      	b.n	801f086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801f06a:	4b23      	ldr	r3, [pc, #140]	; (801f0f8 <prvAddNewTaskToReadyList+0xc0>)
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	2b00      	cmp	r3, #0
 801f070:	d109      	bne.n	801f086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801f072:	4b20      	ldr	r3, [pc, #128]	; (801f0f4 <prvAddNewTaskToReadyList+0xbc>)
 801f074:	681b      	ldr	r3, [r3, #0]
 801f076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f07c:	429a      	cmp	r2, r3
 801f07e:	d802      	bhi.n	801f086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801f080:	4a1c      	ldr	r2, [pc, #112]	; (801f0f4 <prvAddNewTaskToReadyList+0xbc>)
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801f086:	4b1d      	ldr	r3, [pc, #116]	; (801f0fc <prvAddNewTaskToReadyList+0xc4>)
 801f088:	681b      	ldr	r3, [r3, #0]
 801f08a:	3301      	adds	r3, #1
 801f08c:	4a1b      	ldr	r2, [pc, #108]	; (801f0fc <prvAddNewTaskToReadyList+0xc4>)
 801f08e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f094:	2201      	movs	r2, #1
 801f096:	409a      	lsls	r2, r3
 801f098:	4b19      	ldr	r3, [pc, #100]	; (801f100 <prvAddNewTaskToReadyList+0xc8>)
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	4313      	orrs	r3, r2
 801f09e:	4a18      	ldr	r2, [pc, #96]	; (801f100 <prvAddNewTaskToReadyList+0xc8>)
 801f0a0:	6013      	str	r3, [r2, #0]
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f0a6:	4613      	mov	r3, r2
 801f0a8:	009b      	lsls	r3, r3, #2
 801f0aa:	4413      	add	r3, r2
 801f0ac:	009b      	lsls	r3, r3, #2
 801f0ae:	4a15      	ldr	r2, [pc, #84]	; (801f104 <prvAddNewTaskToReadyList+0xcc>)
 801f0b0:	441a      	add	r2, r3
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	3304      	adds	r3, #4
 801f0b6:	4619      	mov	r1, r3
 801f0b8:	4610      	mov	r0, r2
 801f0ba:	f7fe ffc5 	bl	801e048 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801f0be:	f001 fcf9 	bl	8020ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801f0c2:	4b0d      	ldr	r3, [pc, #52]	; (801f0f8 <prvAddNewTaskToReadyList+0xc0>)
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d00e      	beq.n	801f0e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801f0ca:	4b0a      	ldr	r3, [pc, #40]	; (801f0f4 <prvAddNewTaskToReadyList+0xbc>)
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0d4:	429a      	cmp	r2, r3
 801f0d6:	d207      	bcs.n	801f0e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801f0d8:	4b0b      	ldr	r3, [pc, #44]	; (801f108 <prvAddNewTaskToReadyList+0xd0>)
 801f0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f0de:	601a      	str	r2, [r3, #0]
 801f0e0:	f3bf 8f4f 	dsb	sy
 801f0e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f0e8:	bf00      	nop
 801f0ea:	3708      	adds	r7, #8
 801f0ec:	46bd      	mov	sp, r7
 801f0ee:	bd80      	pop	{r7, pc}
 801f0f0:	200009c0 	.word	0x200009c0
 801f0f4:	200008c0 	.word	0x200008c0
 801f0f8:	200009cc 	.word	0x200009cc
 801f0fc:	200009dc 	.word	0x200009dc
 801f100:	200009c8 	.word	0x200009c8
 801f104:	200008c4 	.word	0x200008c4
 801f108:	e000ed04 	.word	0xe000ed04

0801f10c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801f10c:	b580      	push	{r7, lr}
 801f10e:	b084      	sub	sp, #16
 801f110:	af00      	add	r7, sp, #0
 801f112:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801f114:	f001 fc9e 	bl	8020a54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	d102      	bne.n	801f124 <vTaskDelete+0x18>
 801f11e:	4b39      	ldr	r3, [pc, #228]	; (801f204 <vTaskDelete+0xf8>)
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	e000      	b.n	801f126 <vTaskDelete+0x1a>
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f128:	68fb      	ldr	r3, [r7, #12]
 801f12a:	3304      	adds	r3, #4
 801f12c:	4618      	mov	r0, r3
 801f12e:	f7fe ffe8 	bl	801e102 <uxListRemove>
 801f132:	4603      	mov	r3, r0
 801f134:	2b00      	cmp	r3, #0
 801f136:	d115      	bne.n	801f164 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801f138:	68fb      	ldr	r3, [r7, #12]
 801f13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f13c:	4932      	ldr	r1, [pc, #200]	; (801f208 <vTaskDelete+0xfc>)
 801f13e:	4613      	mov	r3, r2
 801f140:	009b      	lsls	r3, r3, #2
 801f142:	4413      	add	r3, r2
 801f144:	009b      	lsls	r3, r3, #2
 801f146:	440b      	add	r3, r1
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d10a      	bne.n	801f164 <vTaskDelete+0x58>
 801f14e:	68fb      	ldr	r3, [r7, #12]
 801f150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f152:	2201      	movs	r2, #1
 801f154:	fa02 f303 	lsl.w	r3, r2, r3
 801f158:	43da      	mvns	r2, r3
 801f15a:	4b2c      	ldr	r3, [pc, #176]	; (801f20c <vTaskDelete+0x100>)
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	4013      	ands	r3, r2
 801f160:	4a2a      	ldr	r2, [pc, #168]	; (801f20c <vTaskDelete+0x100>)
 801f162:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801f164:	68fb      	ldr	r3, [r7, #12]
 801f166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d004      	beq.n	801f176 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f16c:	68fb      	ldr	r3, [r7, #12]
 801f16e:	3318      	adds	r3, #24
 801f170:	4618      	mov	r0, r3
 801f172:	f7fe ffc6 	bl	801e102 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801f176:	4b26      	ldr	r3, [pc, #152]	; (801f210 <vTaskDelete+0x104>)
 801f178:	681b      	ldr	r3, [r3, #0]
 801f17a:	3301      	adds	r3, #1
 801f17c:	4a24      	ldr	r2, [pc, #144]	; (801f210 <vTaskDelete+0x104>)
 801f17e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801f180:	4b20      	ldr	r3, [pc, #128]	; (801f204 <vTaskDelete+0xf8>)
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	68fa      	ldr	r2, [r7, #12]
 801f186:	429a      	cmp	r2, r3
 801f188:	d10b      	bne.n	801f1a2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801f18a:	68fb      	ldr	r3, [r7, #12]
 801f18c:	3304      	adds	r3, #4
 801f18e:	4619      	mov	r1, r3
 801f190:	4820      	ldr	r0, [pc, #128]	; (801f214 <vTaskDelete+0x108>)
 801f192:	f7fe ff59 	bl	801e048 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801f196:	4b20      	ldr	r3, [pc, #128]	; (801f218 <vTaskDelete+0x10c>)
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	3301      	adds	r3, #1
 801f19c:	4a1e      	ldr	r2, [pc, #120]	; (801f218 <vTaskDelete+0x10c>)
 801f19e:	6013      	str	r3, [r2, #0]
 801f1a0:	e009      	b.n	801f1b6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801f1a2:	4b1e      	ldr	r3, [pc, #120]	; (801f21c <vTaskDelete+0x110>)
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	3b01      	subs	r3, #1
 801f1a8:	4a1c      	ldr	r2, [pc, #112]	; (801f21c <vTaskDelete+0x110>)
 801f1aa:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801f1ac:	68f8      	ldr	r0, [r7, #12]
 801f1ae:	f000 fd83 	bl	801fcb8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801f1b2:	f000 fdb1 	bl	801fd18 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801f1b6:	f001 fc7d 	bl	8020ab4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801f1ba:	4b19      	ldr	r3, [pc, #100]	; (801f220 <vTaskDelete+0x114>)
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d01b      	beq.n	801f1fa <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 801f1c2:	4b10      	ldr	r3, [pc, #64]	; (801f204 <vTaskDelete+0xf8>)
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	68fa      	ldr	r2, [r7, #12]
 801f1c8:	429a      	cmp	r2, r3
 801f1ca:	d116      	bne.n	801f1fa <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801f1cc:	4b15      	ldr	r3, [pc, #84]	; (801f224 <vTaskDelete+0x118>)
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d00a      	beq.n	801f1ea <vTaskDelete+0xde>
	__asm volatile
 801f1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1d8:	f383 8811 	msr	BASEPRI, r3
 801f1dc:	f3bf 8f6f 	isb	sy
 801f1e0:	f3bf 8f4f 	dsb	sy
 801f1e4:	60bb      	str	r3, [r7, #8]
}
 801f1e6:	bf00      	nop
 801f1e8:	e7fe      	b.n	801f1e8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 801f1ea:	4b0f      	ldr	r3, [pc, #60]	; (801f228 <vTaskDelete+0x11c>)
 801f1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f1f0:	601a      	str	r2, [r3, #0]
 801f1f2:	f3bf 8f4f 	dsb	sy
 801f1f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801f1fa:	bf00      	nop
 801f1fc:	3710      	adds	r7, #16
 801f1fe:	46bd      	mov	sp, r7
 801f200:	bd80      	pop	{r7, pc}
 801f202:	bf00      	nop
 801f204:	200008c0 	.word	0x200008c0
 801f208:	200008c4 	.word	0x200008c4
 801f20c:	200009c8 	.word	0x200009c8
 801f210:	200009dc 	.word	0x200009dc
 801f214:	20000994 	.word	0x20000994
 801f218:	200009a8 	.word	0x200009a8
 801f21c:	200009c0 	.word	0x200009c0
 801f220:	200009cc 	.word	0x200009cc
 801f224:	200009e8 	.word	0x200009e8
 801f228:	e000ed04 	.word	0xe000ed04

0801f22c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801f22c:	b580      	push	{r7, lr}
 801f22e:	b084      	sub	sp, #16
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801f234:	2300      	movs	r3, #0
 801f236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	d017      	beq.n	801f26e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801f23e:	4b13      	ldr	r3, [pc, #76]	; (801f28c <vTaskDelay+0x60>)
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	2b00      	cmp	r3, #0
 801f244:	d00a      	beq.n	801f25c <vTaskDelay+0x30>
	__asm volatile
 801f246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f24a:	f383 8811 	msr	BASEPRI, r3
 801f24e:	f3bf 8f6f 	isb	sy
 801f252:	f3bf 8f4f 	dsb	sy
 801f256:	60bb      	str	r3, [r7, #8]
}
 801f258:	bf00      	nop
 801f25a:	e7fe      	b.n	801f25a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801f25c:	f000 f9a2 	bl	801f5a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801f260:	2100      	movs	r1, #0
 801f262:	6878      	ldr	r0, [r7, #4]
 801f264:	f000 ff34 	bl	80200d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801f268:	f000 f9aa 	bl	801f5c0 <xTaskResumeAll>
 801f26c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	2b00      	cmp	r3, #0
 801f272:	d107      	bne.n	801f284 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801f274:	4b06      	ldr	r3, [pc, #24]	; (801f290 <vTaskDelay+0x64>)
 801f276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f27a:	601a      	str	r2, [r3, #0]
 801f27c:	f3bf 8f4f 	dsb	sy
 801f280:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f284:	bf00      	nop
 801f286:	3710      	adds	r7, #16
 801f288:	46bd      	mov	sp, r7
 801f28a:	bd80      	pop	{r7, pc}
 801f28c:	200009e8 	.word	0x200009e8
 801f290:	e000ed04 	.word	0xe000ed04

0801f294 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801f294:	b580      	push	{r7, lr}
 801f296:	b084      	sub	sp, #16
 801f298:	af00      	add	r7, sp, #0
 801f29a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801f29c:	f001 fbda 	bl	8020a54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	d102      	bne.n	801f2ac <vTaskSuspend+0x18>
 801f2a6:	4b3c      	ldr	r3, [pc, #240]	; (801f398 <vTaskSuspend+0x104>)
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	e000      	b.n	801f2ae <vTaskSuspend+0x1a>
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f2b0:	68fb      	ldr	r3, [r7, #12]
 801f2b2:	3304      	adds	r3, #4
 801f2b4:	4618      	mov	r0, r3
 801f2b6:	f7fe ff24 	bl	801e102 <uxListRemove>
 801f2ba:	4603      	mov	r3, r0
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	d115      	bne.n	801f2ec <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801f2c0:	68fb      	ldr	r3, [r7, #12]
 801f2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f2c4:	4935      	ldr	r1, [pc, #212]	; (801f39c <vTaskSuspend+0x108>)
 801f2c6:	4613      	mov	r3, r2
 801f2c8:	009b      	lsls	r3, r3, #2
 801f2ca:	4413      	add	r3, r2
 801f2cc:	009b      	lsls	r3, r3, #2
 801f2ce:	440b      	add	r3, r1
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d10a      	bne.n	801f2ec <vTaskSuspend+0x58>
 801f2d6:	68fb      	ldr	r3, [r7, #12]
 801f2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f2da:	2201      	movs	r2, #1
 801f2dc:	fa02 f303 	lsl.w	r3, r2, r3
 801f2e0:	43da      	mvns	r2, r3
 801f2e2:	4b2f      	ldr	r3, [pc, #188]	; (801f3a0 <vTaskSuspend+0x10c>)
 801f2e4:	681b      	ldr	r3, [r3, #0]
 801f2e6:	4013      	ands	r3, r2
 801f2e8:	4a2d      	ldr	r2, [pc, #180]	; (801f3a0 <vTaskSuspend+0x10c>)
 801f2ea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801f2ec:	68fb      	ldr	r3, [r7, #12]
 801f2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	d004      	beq.n	801f2fe <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f2f4:	68fb      	ldr	r3, [r7, #12]
 801f2f6:	3318      	adds	r3, #24
 801f2f8:	4618      	mov	r0, r3
 801f2fa:	f7fe ff02 	bl	801e102 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801f2fe:	68fb      	ldr	r3, [r7, #12]
 801f300:	3304      	adds	r3, #4
 801f302:	4619      	mov	r1, r3
 801f304:	4827      	ldr	r0, [pc, #156]	; (801f3a4 <vTaskSuspend+0x110>)
 801f306:	f7fe fe9f 	bl	801e048 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801f30a:	68fb      	ldr	r3, [r7, #12]
 801f30c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801f310:	b2db      	uxtb	r3, r3
 801f312:	2b01      	cmp	r3, #1
 801f314:	d103      	bne.n	801f31e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	2200      	movs	r2, #0
 801f31a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801f31e:	f001 fbc9 	bl	8020ab4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801f322:	4b21      	ldr	r3, [pc, #132]	; (801f3a8 <vTaskSuspend+0x114>)
 801f324:	681b      	ldr	r3, [r3, #0]
 801f326:	2b00      	cmp	r3, #0
 801f328:	d005      	beq.n	801f336 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801f32a:	f001 fb93 	bl	8020a54 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801f32e:	f000 fcf3 	bl	801fd18 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801f332:	f001 fbbf 	bl	8020ab4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801f336:	4b18      	ldr	r3, [pc, #96]	; (801f398 <vTaskSuspend+0x104>)
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	68fa      	ldr	r2, [r7, #12]
 801f33c:	429a      	cmp	r2, r3
 801f33e:	d127      	bne.n	801f390 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 801f340:	4b19      	ldr	r3, [pc, #100]	; (801f3a8 <vTaskSuspend+0x114>)
 801f342:	681b      	ldr	r3, [r3, #0]
 801f344:	2b00      	cmp	r3, #0
 801f346:	d017      	beq.n	801f378 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801f348:	4b18      	ldr	r3, [pc, #96]	; (801f3ac <vTaskSuspend+0x118>)
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d00a      	beq.n	801f366 <vTaskSuspend+0xd2>
	__asm volatile
 801f350:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f354:	f383 8811 	msr	BASEPRI, r3
 801f358:	f3bf 8f6f 	isb	sy
 801f35c:	f3bf 8f4f 	dsb	sy
 801f360:	60bb      	str	r3, [r7, #8]
}
 801f362:	bf00      	nop
 801f364:	e7fe      	b.n	801f364 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801f366:	4b12      	ldr	r3, [pc, #72]	; (801f3b0 <vTaskSuspend+0x11c>)
 801f368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f36c:	601a      	str	r2, [r3, #0]
 801f36e:	f3bf 8f4f 	dsb	sy
 801f372:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f376:	e00b      	b.n	801f390 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801f378:	4b0a      	ldr	r3, [pc, #40]	; (801f3a4 <vTaskSuspend+0x110>)
 801f37a:	681a      	ldr	r2, [r3, #0]
 801f37c:	4b0d      	ldr	r3, [pc, #52]	; (801f3b4 <vTaskSuspend+0x120>)
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	429a      	cmp	r2, r3
 801f382:	d103      	bne.n	801f38c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 801f384:	4b04      	ldr	r3, [pc, #16]	; (801f398 <vTaskSuspend+0x104>)
 801f386:	2200      	movs	r2, #0
 801f388:	601a      	str	r2, [r3, #0]
	}
 801f38a:	e001      	b.n	801f390 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 801f38c:	f000 fa7c 	bl	801f888 <vTaskSwitchContext>
	}
 801f390:	bf00      	nop
 801f392:	3710      	adds	r7, #16
 801f394:	46bd      	mov	sp, r7
 801f396:	bd80      	pop	{r7, pc}
 801f398:	200008c0 	.word	0x200008c0
 801f39c:	200008c4 	.word	0x200008c4
 801f3a0:	200009c8 	.word	0x200009c8
 801f3a4:	200009ac 	.word	0x200009ac
 801f3a8:	200009cc 	.word	0x200009cc
 801f3ac:	200009e8 	.word	0x200009e8
 801f3b0:	e000ed04 	.word	0xe000ed04
 801f3b4:	200009c0 	.word	0x200009c0

0801f3b8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801f3b8:	b480      	push	{r7}
 801f3ba:	b087      	sub	sp, #28
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801f3c0:	2300      	movs	r3, #0
 801f3c2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	2b00      	cmp	r3, #0
 801f3cc:	d10a      	bne.n	801f3e4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801f3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f3d2:	f383 8811 	msr	BASEPRI, r3
 801f3d6:	f3bf 8f6f 	isb	sy
 801f3da:	f3bf 8f4f 	dsb	sy
 801f3de:	60fb      	str	r3, [r7, #12]
}
 801f3e0:	bf00      	nop
 801f3e2:	e7fe      	b.n	801f3e2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801f3e4:	693b      	ldr	r3, [r7, #16]
 801f3e6:	695b      	ldr	r3, [r3, #20]
 801f3e8:	4a0a      	ldr	r2, [pc, #40]	; (801f414 <prvTaskIsTaskSuspended+0x5c>)
 801f3ea:	4293      	cmp	r3, r2
 801f3ec:	d10a      	bne.n	801f404 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801f3ee:	693b      	ldr	r3, [r7, #16]
 801f3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f3f2:	4a09      	ldr	r2, [pc, #36]	; (801f418 <prvTaskIsTaskSuspended+0x60>)
 801f3f4:	4293      	cmp	r3, r2
 801f3f6:	d005      	beq.n	801f404 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801f3f8:	693b      	ldr	r3, [r7, #16]
 801f3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d101      	bne.n	801f404 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801f400:	2301      	movs	r3, #1
 801f402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801f404:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801f406:	4618      	mov	r0, r3
 801f408:	371c      	adds	r7, #28
 801f40a:	46bd      	mov	sp, r7
 801f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f410:	4770      	bx	lr
 801f412:	bf00      	nop
 801f414:	200009ac 	.word	0x200009ac
 801f418:	20000980 	.word	0x20000980

0801f41c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801f41c:	b580      	push	{r7, lr}
 801f41e:	b084      	sub	sp, #16
 801f420:	af00      	add	r7, sp, #0
 801f422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	2b00      	cmp	r3, #0
 801f42c:	d10a      	bne.n	801f444 <vTaskResume+0x28>
	__asm volatile
 801f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f432:	f383 8811 	msr	BASEPRI, r3
 801f436:	f3bf 8f6f 	isb	sy
 801f43a:	f3bf 8f4f 	dsb	sy
 801f43e:	60bb      	str	r3, [r7, #8]
}
 801f440:	bf00      	nop
 801f442:	e7fe      	b.n	801f442 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801f444:	4b20      	ldr	r3, [pc, #128]	; (801f4c8 <vTaskResume+0xac>)
 801f446:	681b      	ldr	r3, [r3, #0]
 801f448:	68fa      	ldr	r2, [r7, #12]
 801f44a:	429a      	cmp	r2, r3
 801f44c:	d037      	beq.n	801f4be <vTaskResume+0xa2>
 801f44e:	68fb      	ldr	r3, [r7, #12]
 801f450:	2b00      	cmp	r3, #0
 801f452:	d034      	beq.n	801f4be <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 801f454:	f001 fafe 	bl	8020a54 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801f458:	68f8      	ldr	r0, [r7, #12]
 801f45a:	f7ff ffad 	bl	801f3b8 <prvTaskIsTaskSuspended>
 801f45e:	4603      	mov	r3, r0
 801f460:	2b00      	cmp	r3, #0
 801f462:	d02a      	beq.n	801f4ba <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	3304      	adds	r3, #4
 801f468:	4618      	mov	r0, r3
 801f46a:	f7fe fe4a 	bl	801e102 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801f46e:	68fb      	ldr	r3, [r7, #12]
 801f470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f472:	2201      	movs	r2, #1
 801f474:	409a      	lsls	r2, r3
 801f476:	4b15      	ldr	r3, [pc, #84]	; (801f4cc <vTaskResume+0xb0>)
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	4313      	orrs	r3, r2
 801f47c:	4a13      	ldr	r2, [pc, #76]	; (801f4cc <vTaskResume+0xb0>)
 801f47e:	6013      	str	r3, [r2, #0]
 801f480:	68fb      	ldr	r3, [r7, #12]
 801f482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f484:	4613      	mov	r3, r2
 801f486:	009b      	lsls	r3, r3, #2
 801f488:	4413      	add	r3, r2
 801f48a:	009b      	lsls	r3, r3, #2
 801f48c:	4a10      	ldr	r2, [pc, #64]	; (801f4d0 <vTaskResume+0xb4>)
 801f48e:	441a      	add	r2, r3
 801f490:	68fb      	ldr	r3, [r7, #12]
 801f492:	3304      	adds	r3, #4
 801f494:	4619      	mov	r1, r3
 801f496:	4610      	mov	r0, r2
 801f498:	f7fe fdd6 	bl	801e048 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801f49c:	68fb      	ldr	r3, [r7, #12]
 801f49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f4a0:	4b09      	ldr	r3, [pc, #36]	; (801f4c8 <vTaskResume+0xac>)
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4a6:	429a      	cmp	r2, r3
 801f4a8:	d307      	bcc.n	801f4ba <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801f4aa:	4b0a      	ldr	r3, [pc, #40]	; (801f4d4 <vTaskResume+0xb8>)
 801f4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f4b0:	601a      	str	r2, [r3, #0]
 801f4b2:	f3bf 8f4f 	dsb	sy
 801f4b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801f4ba:	f001 fafb 	bl	8020ab4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f4be:	bf00      	nop
 801f4c0:	3710      	adds	r7, #16
 801f4c2:	46bd      	mov	sp, r7
 801f4c4:	bd80      	pop	{r7, pc}
 801f4c6:	bf00      	nop
 801f4c8:	200008c0 	.word	0x200008c0
 801f4cc:	200009c8 	.word	0x200009c8
 801f4d0:	200008c4 	.word	0x200008c4
 801f4d4:	e000ed04 	.word	0xe000ed04

0801f4d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801f4d8:	b580      	push	{r7, lr}
 801f4da:	b08a      	sub	sp, #40	; 0x28
 801f4dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801f4de:	2300      	movs	r3, #0
 801f4e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801f4e2:	2300      	movs	r3, #0
 801f4e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801f4e6:	463a      	mov	r2, r7
 801f4e8:	1d39      	adds	r1, r7, #4
 801f4ea:	f107 0308 	add.w	r3, r7, #8
 801f4ee:	4618      	mov	r0, r3
 801f4f0:	f7f3 fa08 	bl	8012904 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801f4f4:	6839      	ldr	r1, [r7, #0]
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	68ba      	ldr	r2, [r7, #8]
 801f4fa:	9202      	str	r2, [sp, #8]
 801f4fc:	9301      	str	r3, [sp, #4]
 801f4fe:	2300      	movs	r3, #0
 801f500:	9300      	str	r3, [sp, #0]
 801f502:	2300      	movs	r3, #0
 801f504:	460a      	mov	r2, r1
 801f506:	4921      	ldr	r1, [pc, #132]	; (801f58c <vTaskStartScheduler+0xb4>)
 801f508:	4821      	ldr	r0, [pc, #132]	; (801f590 <vTaskStartScheduler+0xb8>)
 801f50a:	f7ff fc6b 	bl	801ede4 <xTaskCreateStatic>
 801f50e:	4603      	mov	r3, r0
 801f510:	4a20      	ldr	r2, [pc, #128]	; (801f594 <vTaskStartScheduler+0xbc>)
 801f512:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801f514:	4b1f      	ldr	r3, [pc, #124]	; (801f594 <vTaskStartScheduler+0xbc>)
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d002      	beq.n	801f522 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801f51c:	2301      	movs	r3, #1
 801f51e:	617b      	str	r3, [r7, #20]
 801f520:	e001      	b.n	801f526 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801f522:	2300      	movs	r3, #0
 801f524:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801f526:	697b      	ldr	r3, [r7, #20]
 801f528:	2b01      	cmp	r3, #1
 801f52a:	d102      	bne.n	801f532 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801f52c:	f000 fe36 	bl	802019c <xTimerCreateTimerTask>
 801f530:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801f532:	697b      	ldr	r3, [r7, #20]
 801f534:	2b01      	cmp	r3, #1
 801f536:	d116      	bne.n	801f566 <vTaskStartScheduler+0x8e>
	__asm volatile
 801f538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f53c:	f383 8811 	msr	BASEPRI, r3
 801f540:	f3bf 8f6f 	isb	sy
 801f544:	f3bf 8f4f 	dsb	sy
 801f548:	613b      	str	r3, [r7, #16]
}
 801f54a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801f54c:	4b12      	ldr	r3, [pc, #72]	; (801f598 <vTaskStartScheduler+0xc0>)
 801f54e:	f04f 32ff 	mov.w	r2, #4294967295
 801f552:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801f554:	4b11      	ldr	r3, [pc, #68]	; (801f59c <vTaskStartScheduler+0xc4>)
 801f556:	2201      	movs	r2, #1
 801f558:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801f55a:	4b11      	ldr	r3, [pc, #68]	; (801f5a0 <vTaskStartScheduler+0xc8>)
 801f55c:	2200      	movs	r2, #0
 801f55e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801f560:	f001 f9d6 	bl	8020910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801f564:	e00e      	b.n	801f584 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801f566:	697b      	ldr	r3, [r7, #20]
 801f568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f56c:	d10a      	bne.n	801f584 <vTaskStartScheduler+0xac>
	__asm volatile
 801f56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f572:	f383 8811 	msr	BASEPRI, r3
 801f576:	f3bf 8f6f 	isb	sy
 801f57a:	f3bf 8f4f 	dsb	sy
 801f57e:	60fb      	str	r3, [r7, #12]
}
 801f580:	bf00      	nop
 801f582:	e7fe      	b.n	801f582 <vTaskStartScheduler+0xaa>
}
 801f584:	bf00      	nop
 801f586:	3718      	adds	r7, #24
 801f588:	46bd      	mov	sp, r7
 801f58a:	bd80      	pop	{r7, pc}
 801f58c:	08022fa8 	.word	0x08022fa8
 801f590:	0801fbad 	.word	0x0801fbad
 801f594:	200009e4 	.word	0x200009e4
 801f598:	200009e0 	.word	0x200009e0
 801f59c:	200009cc 	.word	0x200009cc
 801f5a0:	200009c4 	.word	0x200009c4

0801f5a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801f5a4:	b480      	push	{r7}
 801f5a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801f5a8:	4b04      	ldr	r3, [pc, #16]	; (801f5bc <vTaskSuspendAll+0x18>)
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	3301      	adds	r3, #1
 801f5ae:	4a03      	ldr	r2, [pc, #12]	; (801f5bc <vTaskSuspendAll+0x18>)
 801f5b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801f5b2:	bf00      	nop
 801f5b4:	46bd      	mov	sp, r7
 801f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ba:	4770      	bx	lr
 801f5bc:	200009e8 	.word	0x200009e8

0801f5c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801f5c0:	b580      	push	{r7, lr}
 801f5c2:	b084      	sub	sp, #16
 801f5c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801f5c6:	2300      	movs	r3, #0
 801f5c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801f5ca:	2300      	movs	r3, #0
 801f5cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801f5ce:	4b41      	ldr	r3, [pc, #260]	; (801f6d4 <xTaskResumeAll+0x114>)
 801f5d0:	681b      	ldr	r3, [r3, #0]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d10a      	bne.n	801f5ec <xTaskResumeAll+0x2c>
	__asm volatile
 801f5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f5da:	f383 8811 	msr	BASEPRI, r3
 801f5de:	f3bf 8f6f 	isb	sy
 801f5e2:	f3bf 8f4f 	dsb	sy
 801f5e6:	603b      	str	r3, [r7, #0]
}
 801f5e8:	bf00      	nop
 801f5ea:	e7fe      	b.n	801f5ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801f5ec:	f001 fa32 	bl	8020a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801f5f0:	4b38      	ldr	r3, [pc, #224]	; (801f6d4 <xTaskResumeAll+0x114>)
 801f5f2:	681b      	ldr	r3, [r3, #0]
 801f5f4:	3b01      	subs	r3, #1
 801f5f6:	4a37      	ldr	r2, [pc, #220]	; (801f6d4 <xTaskResumeAll+0x114>)
 801f5f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f5fa:	4b36      	ldr	r3, [pc, #216]	; (801f6d4 <xTaskResumeAll+0x114>)
 801f5fc:	681b      	ldr	r3, [r3, #0]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d161      	bne.n	801f6c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801f602:	4b35      	ldr	r3, [pc, #212]	; (801f6d8 <xTaskResumeAll+0x118>)
 801f604:	681b      	ldr	r3, [r3, #0]
 801f606:	2b00      	cmp	r3, #0
 801f608:	d05d      	beq.n	801f6c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801f60a:	e02e      	b.n	801f66a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f60c:	4b33      	ldr	r3, [pc, #204]	; (801f6dc <xTaskResumeAll+0x11c>)
 801f60e:	68db      	ldr	r3, [r3, #12]
 801f610:	68db      	ldr	r3, [r3, #12]
 801f612:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f614:	68fb      	ldr	r3, [r7, #12]
 801f616:	3318      	adds	r3, #24
 801f618:	4618      	mov	r0, r3
 801f61a:	f7fe fd72 	bl	801e102 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f61e:	68fb      	ldr	r3, [r7, #12]
 801f620:	3304      	adds	r3, #4
 801f622:	4618      	mov	r0, r3
 801f624:	f7fe fd6d 	bl	801e102 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f62c:	2201      	movs	r2, #1
 801f62e:	409a      	lsls	r2, r3
 801f630:	4b2b      	ldr	r3, [pc, #172]	; (801f6e0 <xTaskResumeAll+0x120>)
 801f632:	681b      	ldr	r3, [r3, #0]
 801f634:	4313      	orrs	r3, r2
 801f636:	4a2a      	ldr	r2, [pc, #168]	; (801f6e0 <xTaskResumeAll+0x120>)
 801f638:	6013      	str	r3, [r2, #0]
 801f63a:	68fb      	ldr	r3, [r7, #12]
 801f63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f63e:	4613      	mov	r3, r2
 801f640:	009b      	lsls	r3, r3, #2
 801f642:	4413      	add	r3, r2
 801f644:	009b      	lsls	r3, r3, #2
 801f646:	4a27      	ldr	r2, [pc, #156]	; (801f6e4 <xTaskResumeAll+0x124>)
 801f648:	441a      	add	r2, r3
 801f64a:	68fb      	ldr	r3, [r7, #12]
 801f64c:	3304      	adds	r3, #4
 801f64e:	4619      	mov	r1, r3
 801f650:	4610      	mov	r0, r2
 801f652:	f7fe fcf9 	bl	801e048 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801f656:	68fb      	ldr	r3, [r7, #12]
 801f658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f65a:	4b23      	ldr	r3, [pc, #140]	; (801f6e8 <xTaskResumeAll+0x128>)
 801f65c:	681b      	ldr	r3, [r3, #0]
 801f65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f660:	429a      	cmp	r2, r3
 801f662:	d302      	bcc.n	801f66a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801f664:	4b21      	ldr	r3, [pc, #132]	; (801f6ec <xTaskResumeAll+0x12c>)
 801f666:	2201      	movs	r2, #1
 801f668:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801f66a:	4b1c      	ldr	r3, [pc, #112]	; (801f6dc <xTaskResumeAll+0x11c>)
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d1cc      	bne.n	801f60c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801f672:	68fb      	ldr	r3, [r7, #12]
 801f674:	2b00      	cmp	r3, #0
 801f676:	d001      	beq.n	801f67c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801f678:	f000 fb4e 	bl	801fd18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801f67c:	4b1c      	ldr	r3, [pc, #112]	; (801f6f0 <xTaskResumeAll+0x130>)
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	2b00      	cmp	r3, #0
 801f686:	d010      	beq.n	801f6aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801f688:	f000 f846 	bl	801f718 <xTaskIncrementTick>
 801f68c:	4603      	mov	r3, r0
 801f68e:	2b00      	cmp	r3, #0
 801f690:	d002      	beq.n	801f698 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801f692:	4b16      	ldr	r3, [pc, #88]	; (801f6ec <xTaskResumeAll+0x12c>)
 801f694:	2201      	movs	r2, #1
 801f696:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801f698:	687b      	ldr	r3, [r7, #4]
 801f69a:	3b01      	subs	r3, #1
 801f69c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d1f1      	bne.n	801f688 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801f6a4:	4b12      	ldr	r3, [pc, #72]	; (801f6f0 <xTaskResumeAll+0x130>)
 801f6a6:	2200      	movs	r2, #0
 801f6a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801f6aa:	4b10      	ldr	r3, [pc, #64]	; (801f6ec <xTaskResumeAll+0x12c>)
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d009      	beq.n	801f6c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801f6b2:	2301      	movs	r3, #1
 801f6b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801f6b6:	4b0f      	ldr	r3, [pc, #60]	; (801f6f4 <xTaskResumeAll+0x134>)
 801f6b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f6bc:	601a      	str	r2, [r3, #0]
 801f6be:	f3bf 8f4f 	dsb	sy
 801f6c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801f6c6:	f001 f9f5 	bl	8020ab4 <vPortExitCritical>

	return xAlreadyYielded;
 801f6ca:	68bb      	ldr	r3, [r7, #8]
}
 801f6cc:	4618      	mov	r0, r3
 801f6ce:	3710      	adds	r7, #16
 801f6d0:	46bd      	mov	sp, r7
 801f6d2:	bd80      	pop	{r7, pc}
 801f6d4:	200009e8 	.word	0x200009e8
 801f6d8:	200009c0 	.word	0x200009c0
 801f6dc:	20000980 	.word	0x20000980
 801f6e0:	200009c8 	.word	0x200009c8
 801f6e4:	200008c4 	.word	0x200008c4
 801f6e8:	200008c0 	.word	0x200008c0
 801f6ec:	200009d4 	.word	0x200009d4
 801f6f0:	200009d0 	.word	0x200009d0
 801f6f4:	e000ed04 	.word	0xe000ed04

0801f6f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801f6f8:	b480      	push	{r7}
 801f6fa:	b083      	sub	sp, #12
 801f6fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801f6fe:	4b05      	ldr	r3, [pc, #20]	; (801f714 <xTaskGetTickCount+0x1c>)
 801f700:	681b      	ldr	r3, [r3, #0]
 801f702:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801f704:	687b      	ldr	r3, [r7, #4]
}
 801f706:	4618      	mov	r0, r3
 801f708:	370c      	adds	r7, #12
 801f70a:	46bd      	mov	sp, r7
 801f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f710:	4770      	bx	lr
 801f712:	bf00      	nop
 801f714:	200009c4 	.word	0x200009c4

0801f718 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801f718:	b580      	push	{r7, lr}
 801f71a:	b086      	sub	sp, #24
 801f71c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801f71e:	2300      	movs	r3, #0
 801f720:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f722:	4b4e      	ldr	r3, [pc, #312]	; (801f85c <xTaskIncrementTick+0x144>)
 801f724:	681b      	ldr	r3, [r3, #0]
 801f726:	2b00      	cmp	r3, #0
 801f728:	f040 808e 	bne.w	801f848 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801f72c:	4b4c      	ldr	r3, [pc, #304]	; (801f860 <xTaskIncrementTick+0x148>)
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	3301      	adds	r3, #1
 801f732:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801f734:	4a4a      	ldr	r2, [pc, #296]	; (801f860 <xTaskIncrementTick+0x148>)
 801f736:	693b      	ldr	r3, [r7, #16]
 801f738:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801f73a:	693b      	ldr	r3, [r7, #16]
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d120      	bne.n	801f782 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801f740:	4b48      	ldr	r3, [pc, #288]	; (801f864 <xTaskIncrementTick+0x14c>)
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	681b      	ldr	r3, [r3, #0]
 801f746:	2b00      	cmp	r3, #0
 801f748:	d00a      	beq.n	801f760 <xTaskIncrementTick+0x48>
	__asm volatile
 801f74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f74e:	f383 8811 	msr	BASEPRI, r3
 801f752:	f3bf 8f6f 	isb	sy
 801f756:	f3bf 8f4f 	dsb	sy
 801f75a:	603b      	str	r3, [r7, #0]
}
 801f75c:	bf00      	nop
 801f75e:	e7fe      	b.n	801f75e <xTaskIncrementTick+0x46>
 801f760:	4b40      	ldr	r3, [pc, #256]	; (801f864 <xTaskIncrementTick+0x14c>)
 801f762:	681b      	ldr	r3, [r3, #0]
 801f764:	60fb      	str	r3, [r7, #12]
 801f766:	4b40      	ldr	r3, [pc, #256]	; (801f868 <xTaskIncrementTick+0x150>)
 801f768:	681b      	ldr	r3, [r3, #0]
 801f76a:	4a3e      	ldr	r2, [pc, #248]	; (801f864 <xTaskIncrementTick+0x14c>)
 801f76c:	6013      	str	r3, [r2, #0]
 801f76e:	4a3e      	ldr	r2, [pc, #248]	; (801f868 <xTaskIncrementTick+0x150>)
 801f770:	68fb      	ldr	r3, [r7, #12]
 801f772:	6013      	str	r3, [r2, #0]
 801f774:	4b3d      	ldr	r3, [pc, #244]	; (801f86c <xTaskIncrementTick+0x154>)
 801f776:	681b      	ldr	r3, [r3, #0]
 801f778:	3301      	adds	r3, #1
 801f77a:	4a3c      	ldr	r2, [pc, #240]	; (801f86c <xTaskIncrementTick+0x154>)
 801f77c:	6013      	str	r3, [r2, #0]
 801f77e:	f000 facb 	bl	801fd18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801f782:	4b3b      	ldr	r3, [pc, #236]	; (801f870 <xTaskIncrementTick+0x158>)
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	693a      	ldr	r2, [r7, #16]
 801f788:	429a      	cmp	r2, r3
 801f78a:	d348      	bcc.n	801f81e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f78c:	4b35      	ldr	r3, [pc, #212]	; (801f864 <xTaskIncrementTick+0x14c>)
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	681b      	ldr	r3, [r3, #0]
 801f792:	2b00      	cmp	r3, #0
 801f794:	d104      	bne.n	801f7a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f796:	4b36      	ldr	r3, [pc, #216]	; (801f870 <xTaskIncrementTick+0x158>)
 801f798:	f04f 32ff 	mov.w	r2, #4294967295
 801f79c:	601a      	str	r2, [r3, #0]
					break;
 801f79e:	e03e      	b.n	801f81e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f7a0:	4b30      	ldr	r3, [pc, #192]	; (801f864 <xTaskIncrementTick+0x14c>)
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	68db      	ldr	r3, [r3, #12]
 801f7a6:	68db      	ldr	r3, [r3, #12]
 801f7a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801f7aa:	68bb      	ldr	r3, [r7, #8]
 801f7ac:	685b      	ldr	r3, [r3, #4]
 801f7ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801f7b0:	693a      	ldr	r2, [r7, #16]
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	429a      	cmp	r2, r3
 801f7b6:	d203      	bcs.n	801f7c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801f7b8:	4a2d      	ldr	r2, [pc, #180]	; (801f870 <xTaskIncrementTick+0x158>)
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801f7be:	e02e      	b.n	801f81e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f7c0:	68bb      	ldr	r3, [r7, #8]
 801f7c2:	3304      	adds	r3, #4
 801f7c4:	4618      	mov	r0, r3
 801f7c6:	f7fe fc9c 	bl	801e102 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801f7ca:	68bb      	ldr	r3, [r7, #8]
 801f7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d004      	beq.n	801f7dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f7d2:	68bb      	ldr	r3, [r7, #8]
 801f7d4:	3318      	adds	r3, #24
 801f7d6:	4618      	mov	r0, r3
 801f7d8:	f7fe fc93 	bl	801e102 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801f7dc:	68bb      	ldr	r3, [r7, #8]
 801f7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f7e0:	2201      	movs	r2, #1
 801f7e2:	409a      	lsls	r2, r3
 801f7e4:	4b23      	ldr	r3, [pc, #140]	; (801f874 <xTaskIncrementTick+0x15c>)
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	4313      	orrs	r3, r2
 801f7ea:	4a22      	ldr	r2, [pc, #136]	; (801f874 <xTaskIncrementTick+0x15c>)
 801f7ec:	6013      	str	r3, [r2, #0]
 801f7ee:	68bb      	ldr	r3, [r7, #8]
 801f7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f7f2:	4613      	mov	r3, r2
 801f7f4:	009b      	lsls	r3, r3, #2
 801f7f6:	4413      	add	r3, r2
 801f7f8:	009b      	lsls	r3, r3, #2
 801f7fa:	4a1f      	ldr	r2, [pc, #124]	; (801f878 <xTaskIncrementTick+0x160>)
 801f7fc:	441a      	add	r2, r3
 801f7fe:	68bb      	ldr	r3, [r7, #8]
 801f800:	3304      	adds	r3, #4
 801f802:	4619      	mov	r1, r3
 801f804:	4610      	mov	r0, r2
 801f806:	f7fe fc1f 	bl	801e048 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801f80a:	68bb      	ldr	r3, [r7, #8]
 801f80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f80e:	4b1b      	ldr	r3, [pc, #108]	; (801f87c <xTaskIncrementTick+0x164>)
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f814:	429a      	cmp	r2, r3
 801f816:	d3b9      	bcc.n	801f78c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801f818:	2301      	movs	r3, #1
 801f81a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f81c:	e7b6      	b.n	801f78c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801f81e:	4b17      	ldr	r3, [pc, #92]	; (801f87c <xTaskIncrementTick+0x164>)
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f824:	4914      	ldr	r1, [pc, #80]	; (801f878 <xTaskIncrementTick+0x160>)
 801f826:	4613      	mov	r3, r2
 801f828:	009b      	lsls	r3, r3, #2
 801f82a:	4413      	add	r3, r2
 801f82c:	009b      	lsls	r3, r3, #2
 801f82e:	440b      	add	r3, r1
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	2b01      	cmp	r3, #1
 801f834:	d901      	bls.n	801f83a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801f836:	2301      	movs	r3, #1
 801f838:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801f83a:	4b11      	ldr	r3, [pc, #68]	; (801f880 <xTaskIncrementTick+0x168>)
 801f83c:	681b      	ldr	r3, [r3, #0]
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d007      	beq.n	801f852 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801f842:	2301      	movs	r3, #1
 801f844:	617b      	str	r3, [r7, #20]
 801f846:	e004      	b.n	801f852 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801f848:	4b0e      	ldr	r3, [pc, #56]	; (801f884 <xTaskIncrementTick+0x16c>)
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	3301      	adds	r3, #1
 801f84e:	4a0d      	ldr	r2, [pc, #52]	; (801f884 <xTaskIncrementTick+0x16c>)
 801f850:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801f852:	697b      	ldr	r3, [r7, #20]
}
 801f854:	4618      	mov	r0, r3
 801f856:	3718      	adds	r7, #24
 801f858:	46bd      	mov	sp, r7
 801f85a:	bd80      	pop	{r7, pc}
 801f85c:	200009e8 	.word	0x200009e8
 801f860:	200009c4 	.word	0x200009c4
 801f864:	20000978 	.word	0x20000978
 801f868:	2000097c 	.word	0x2000097c
 801f86c:	200009d8 	.word	0x200009d8
 801f870:	200009e0 	.word	0x200009e0
 801f874:	200009c8 	.word	0x200009c8
 801f878:	200008c4 	.word	0x200008c4
 801f87c:	200008c0 	.word	0x200008c0
 801f880:	200009d4 	.word	0x200009d4
 801f884:	200009d0 	.word	0x200009d0

0801f888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801f888:	b480      	push	{r7}
 801f88a:	b087      	sub	sp, #28
 801f88c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801f88e:	4b27      	ldr	r3, [pc, #156]	; (801f92c <vTaskSwitchContext+0xa4>)
 801f890:	681b      	ldr	r3, [r3, #0]
 801f892:	2b00      	cmp	r3, #0
 801f894:	d003      	beq.n	801f89e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801f896:	4b26      	ldr	r3, [pc, #152]	; (801f930 <vTaskSwitchContext+0xa8>)
 801f898:	2201      	movs	r2, #1
 801f89a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801f89c:	e03f      	b.n	801f91e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801f89e:	4b24      	ldr	r3, [pc, #144]	; (801f930 <vTaskSwitchContext+0xa8>)
 801f8a0:	2200      	movs	r2, #0
 801f8a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f8a4:	4b23      	ldr	r3, [pc, #140]	; (801f934 <vTaskSwitchContext+0xac>)
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801f8aa:	68fb      	ldr	r3, [r7, #12]
 801f8ac:	fab3 f383 	clz	r3, r3
 801f8b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801f8b2:	7afb      	ldrb	r3, [r7, #11]
 801f8b4:	f1c3 031f 	rsb	r3, r3, #31
 801f8b8:	617b      	str	r3, [r7, #20]
 801f8ba:	491f      	ldr	r1, [pc, #124]	; (801f938 <vTaskSwitchContext+0xb0>)
 801f8bc:	697a      	ldr	r2, [r7, #20]
 801f8be:	4613      	mov	r3, r2
 801f8c0:	009b      	lsls	r3, r3, #2
 801f8c2:	4413      	add	r3, r2
 801f8c4:	009b      	lsls	r3, r3, #2
 801f8c6:	440b      	add	r3, r1
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	2b00      	cmp	r3, #0
 801f8cc:	d10a      	bne.n	801f8e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 801f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f8d2:	f383 8811 	msr	BASEPRI, r3
 801f8d6:	f3bf 8f6f 	isb	sy
 801f8da:	f3bf 8f4f 	dsb	sy
 801f8de:	607b      	str	r3, [r7, #4]
}
 801f8e0:	bf00      	nop
 801f8e2:	e7fe      	b.n	801f8e2 <vTaskSwitchContext+0x5a>
 801f8e4:	697a      	ldr	r2, [r7, #20]
 801f8e6:	4613      	mov	r3, r2
 801f8e8:	009b      	lsls	r3, r3, #2
 801f8ea:	4413      	add	r3, r2
 801f8ec:	009b      	lsls	r3, r3, #2
 801f8ee:	4a12      	ldr	r2, [pc, #72]	; (801f938 <vTaskSwitchContext+0xb0>)
 801f8f0:	4413      	add	r3, r2
 801f8f2:	613b      	str	r3, [r7, #16]
 801f8f4:	693b      	ldr	r3, [r7, #16]
 801f8f6:	685b      	ldr	r3, [r3, #4]
 801f8f8:	685a      	ldr	r2, [r3, #4]
 801f8fa:	693b      	ldr	r3, [r7, #16]
 801f8fc:	605a      	str	r2, [r3, #4]
 801f8fe:	693b      	ldr	r3, [r7, #16]
 801f900:	685a      	ldr	r2, [r3, #4]
 801f902:	693b      	ldr	r3, [r7, #16]
 801f904:	3308      	adds	r3, #8
 801f906:	429a      	cmp	r2, r3
 801f908:	d104      	bne.n	801f914 <vTaskSwitchContext+0x8c>
 801f90a:	693b      	ldr	r3, [r7, #16]
 801f90c:	685b      	ldr	r3, [r3, #4]
 801f90e:	685a      	ldr	r2, [r3, #4]
 801f910:	693b      	ldr	r3, [r7, #16]
 801f912:	605a      	str	r2, [r3, #4]
 801f914:	693b      	ldr	r3, [r7, #16]
 801f916:	685b      	ldr	r3, [r3, #4]
 801f918:	68db      	ldr	r3, [r3, #12]
 801f91a:	4a08      	ldr	r2, [pc, #32]	; (801f93c <vTaskSwitchContext+0xb4>)
 801f91c:	6013      	str	r3, [r2, #0]
}
 801f91e:	bf00      	nop
 801f920:	371c      	adds	r7, #28
 801f922:	46bd      	mov	sp, r7
 801f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f928:	4770      	bx	lr
 801f92a:	bf00      	nop
 801f92c:	200009e8 	.word	0x200009e8
 801f930:	200009d4 	.word	0x200009d4
 801f934:	200009c8 	.word	0x200009c8
 801f938:	200008c4 	.word	0x200008c4
 801f93c:	200008c0 	.word	0x200008c0

0801f940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801f940:	b580      	push	{r7, lr}
 801f942:	b084      	sub	sp, #16
 801f944:	af00      	add	r7, sp, #0
 801f946:	6078      	str	r0, [r7, #4]
 801f948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801f94a:	687b      	ldr	r3, [r7, #4]
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	d10a      	bne.n	801f966 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801f950:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f954:	f383 8811 	msr	BASEPRI, r3
 801f958:	f3bf 8f6f 	isb	sy
 801f95c:	f3bf 8f4f 	dsb	sy
 801f960:	60fb      	str	r3, [r7, #12]
}
 801f962:	bf00      	nop
 801f964:	e7fe      	b.n	801f964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801f966:	4b07      	ldr	r3, [pc, #28]	; (801f984 <vTaskPlaceOnEventList+0x44>)
 801f968:	681b      	ldr	r3, [r3, #0]
 801f96a:	3318      	adds	r3, #24
 801f96c:	4619      	mov	r1, r3
 801f96e:	6878      	ldr	r0, [r7, #4]
 801f970:	f7fe fb8e 	bl	801e090 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801f974:	2101      	movs	r1, #1
 801f976:	6838      	ldr	r0, [r7, #0]
 801f978:	f000 fbaa 	bl	80200d0 <prvAddCurrentTaskToDelayedList>
}
 801f97c:	bf00      	nop
 801f97e:	3710      	adds	r7, #16
 801f980:	46bd      	mov	sp, r7
 801f982:	bd80      	pop	{r7, pc}
 801f984:	200008c0 	.word	0x200008c0

0801f988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801f988:	b580      	push	{r7, lr}
 801f98a:	b086      	sub	sp, #24
 801f98c:	af00      	add	r7, sp, #0
 801f98e:	60f8      	str	r0, [r7, #12]
 801f990:	60b9      	str	r1, [r7, #8]
 801f992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801f994:	68fb      	ldr	r3, [r7, #12]
 801f996:	2b00      	cmp	r3, #0
 801f998:	d10a      	bne.n	801f9b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801f99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f99e:	f383 8811 	msr	BASEPRI, r3
 801f9a2:	f3bf 8f6f 	isb	sy
 801f9a6:	f3bf 8f4f 	dsb	sy
 801f9aa:	617b      	str	r3, [r7, #20]
}
 801f9ac:	bf00      	nop
 801f9ae:	e7fe      	b.n	801f9ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801f9b0:	4b0a      	ldr	r3, [pc, #40]	; (801f9dc <vTaskPlaceOnEventListRestricted+0x54>)
 801f9b2:	681b      	ldr	r3, [r3, #0]
 801f9b4:	3318      	adds	r3, #24
 801f9b6:	4619      	mov	r1, r3
 801f9b8:	68f8      	ldr	r0, [r7, #12]
 801f9ba:	f7fe fb45 	bl	801e048 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	2b00      	cmp	r3, #0
 801f9c2:	d002      	beq.n	801f9ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801f9c4:	f04f 33ff 	mov.w	r3, #4294967295
 801f9c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801f9ca:	6879      	ldr	r1, [r7, #4]
 801f9cc:	68b8      	ldr	r0, [r7, #8]
 801f9ce:	f000 fb7f 	bl	80200d0 <prvAddCurrentTaskToDelayedList>
	}
 801f9d2:	bf00      	nop
 801f9d4:	3718      	adds	r7, #24
 801f9d6:	46bd      	mov	sp, r7
 801f9d8:	bd80      	pop	{r7, pc}
 801f9da:	bf00      	nop
 801f9dc:	200008c0 	.word	0x200008c0

0801f9e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801f9e0:	b580      	push	{r7, lr}
 801f9e2:	b086      	sub	sp, #24
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	68db      	ldr	r3, [r3, #12]
 801f9ec:	68db      	ldr	r3, [r3, #12]
 801f9ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801f9f0:	693b      	ldr	r3, [r7, #16]
 801f9f2:	2b00      	cmp	r3, #0
 801f9f4:	d10a      	bne.n	801fa0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801f9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f9fa:	f383 8811 	msr	BASEPRI, r3
 801f9fe:	f3bf 8f6f 	isb	sy
 801fa02:	f3bf 8f4f 	dsb	sy
 801fa06:	60fb      	str	r3, [r7, #12]
}
 801fa08:	bf00      	nop
 801fa0a:	e7fe      	b.n	801fa0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801fa0c:	693b      	ldr	r3, [r7, #16]
 801fa0e:	3318      	adds	r3, #24
 801fa10:	4618      	mov	r0, r3
 801fa12:	f7fe fb76 	bl	801e102 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801fa16:	4b1d      	ldr	r3, [pc, #116]	; (801fa8c <xTaskRemoveFromEventList+0xac>)
 801fa18:	681b      	ldr	r3, [r3, #0]
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	d11c      	bne.n	801fa58 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801fa1e:	693b      	ldr	r3, [r7, #16]
 801fa20:	3304      	adds	r3, #4
 801fa22:	4618      	mov	r0, r3
 801fa24:	f7fe fb6d 	bl	801e102 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801fa28:	693b      	ldr	r3, [r7, #16]
 801fa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fa2c:	2201      	movs	r2, #1
 801fa2e:	409a      	lsls	r2, r3
 801fa30:	4b17      	ldr	r3, [pc, #92]	; (801fa90 <xTaskRemoveFromEventList+0xb0>)
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	4313      	orrs	r3, r2
 801fa36:	4a16      	ldr	r2, [pc, #88]	; (801fa90 <xTaskRemoveFromEventList+0xb0>)
 801fa38:	6013      	str	r3, [r2, #0]
 801fa3a:	693b      	ldr	r3, [r7, #16]
 801fa3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fa3e:	4613      	mov	r3, r2
 801fa40:	009b      	lsls	r3, r3, #2
 801fa42:	4413      	add	r3, r2
 801fa44:	009b      	lsls	r3, r3, #2
 801fa46:	4a13      	ldr	r2, [pc, #76]	; (801fa94 <xTaskRemoveFromEventList+0xb4>)
 801fa48:	441a      	add	r2, r3
 801fa4a:	693b      	ldr	r3, [r7, #16]
 801fa4c:	3304      	adds	r3, #4
 801fa4e:	4619      	mov	r1, r3
 801fa50:	4610      	mov	r0, r2
 801fa52:	f7fe faf9 	bl	801e048 <vListInsertEnd>
 801fa56:	e005      	b.n	801fa64 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801fa58:	693b      	ldr	r3, [r7, #16]
 801fa5a:	3318      	adds	r3, #24
 801fa5c:	4619      	mov	r1, r3
 801fa5e:	480e      	ldr	r0, [pc, #56]	; (801fa98 <xTaskRemoveFromEventList+0xb8>)
 801fa60:	f7fe faf2 	bl	801e048 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801fa64:	693b      	ldr	r3, [r7, #16]
 801fa66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fa68:	4b0c      	ldr	r3, [pc, #48]	; (801fa9c <xTaskRemoveFromEventList+0xbc>)
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fa6e:	429a      	cmp	r2, r3
 801fa70:	d905      	bls.n	801fa7e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801fa72:	2301      	movs	r3, #1
 801fa74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801fa76:	4b0a      	ldr	r3, [pc, #40]	; (801faa0 <xTaskRemoveFromEventList+0xc0>)
 801fa78:	2201      	movs	r2, #1
 801fa7a:	601a      	str	r2, [r3, #0]
 801fa7c:	e001      	b.n	801fa82 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801fa7e:	2300      	movs	r3, #0
 801fa80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801fa82:	697b      	ldr	r3, [r7, #20]
}
 801fa84:	4618      	mov	r0, r3
 801fa86:	3718      	adds	r7, #24
 801fa88:	46bd      	mov	sp, r7
 801fa8a:	bd80      	pop	{r7, pc}
 801fa8c:	200009e8 	.word	0x200009e8
 801fa90:	200009c8 	.word	0x200009c8
 801fa94:	200008c4 	.word	0x200008c4
 801fa98:	20000980 	.word	0x20000980
 801fa9c:	200008c0 	.word	0x200008c0
 801faa0:	200009d4 	.word	0x200009d4

0801faa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801faa4:	b480      	push	{r7}
 801faa6:	b083      	sub	sp, #12
 801faa8:	af00      	add	r7, sp, #0
 801faaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801faac:	4b06      	ldr	r3, [pc, #24]	; (801fac8 <vTaskInternalSetTimeOutState+0x24>)
 801faae:	681a      	ldr	r2, [r3, #0]
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801fab4:	4b05      	ldr	r3, [pc, #20]	; (801facc <vTaskInternalSetTimeOutState+0x28>)
 801fab6:	681a      	ldr	r2, [r3, #0]
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	605a      	str	r2, [r3, #4]
}
 801fabc:	bf00      	nop
 801fabe:	370c      	adds	r7, #12
 801fac0:	46bd      	mov	sp, r7
 801fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fac6:	4770      	bx	lr
 801fac8:	200009d8 	.word	0x200009d8
 801facc:	200009c4 	.word	0x200009c4

0801fad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801fad0:	b580      	push	{r7, lr}
 801fad2:	b088      	sub	sp, #32
 801fad4:	af00      	add	r7, sp, #0
 801fad6:	6078      	str	r0, [r7, #4]
 801fad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	2b00      	cmp	r3, #0
 801fade:	d10a      	bne.n	801faf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801fae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fae4:	f383 8811 	msr	BASEPRI, r3
 801fae8:	f3bf 8f6f 	isb	sy
 801faec:	f3bf 8f4f 	dsb	sy
 801faf0:	613b      	str	r3, [r7, #16]
}
 801faf2:	bf00      	nop
 801faf4:	e7fe      	b.n	801faf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801faf6:	683b      	ldr	r3, [r7, #0]
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d10a      	bne.n	801fb12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801fafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb00:	f383 8811 	msr	BASEPRI, r3
 801fb04:	f3bf 8f6f 	isb	sy
 801fb08:	f3bf 8f4f 	dsb	sy
 801fb0c:	60fb      	str	r3, [r7, #12]
}
 801fb0e:	bf00      	nop
 801fb10:	e7fe      	b.n	801fb10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801fb12:	f000 ff9f 	bl	8020a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801fb16:	4b1d      	ldr	r3, [pc, #116]	; (801fb8c <xTaskCheckForTimeOut+0xbc>)
 801fb18:	681b      	ldr	r3, [r3, #0]
 801fb1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	685b      	ldr	r3, [r3, #4]
 801fb20:	69ba      	ldr	r2, [r7, #24]
 801fb22:	1ad3      	subs	r3, r2, r3
 801fb24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801fb26:	683b      	ldr	r3, [r7, #0]
 801fb28:	681b      	ldr	r3, [r3, #0]
 801fb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb2e:	d102      	bne.n	801fb36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801fb30:	2300      	movs	r3, #0
 801fb32:	61fb      	str	r3, [r7, #28]
 801fb34:	e023      	b.n	801fb7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	681a      	ldr	r2, [r3, #0]
 801fb3a:	4b15      	ldr	r3, [pc, #84]	; (801fb90 <xTaskCheckForTimeOut+0xc0>)
 801fb3c:	681b      	ldr	r3, [r3, #0]
 801fb3e:	429a      	cmp	r2, r3
 801fb40:	d007      	beq.n	801fb52 <xTaskCheckForTimeOut+0x82>
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	685b      	ldr	r3, [r3, #4]
 801fb46:	69ba      	ldr	r2, [r7, #24]
 801fb48:	429a      	cmp	r2, r3
 801fb4a:	d302      	bcc.n	801fb52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801fb4c:	2301      	movs	r3, #1
 801fb4e:	61fb      	str	r3, [r7, #28]
 801fb50:	e015      	b.n	801fb7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801fb52:	683b      	ldr	r3, [r7, #0]
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	697a      	ldr	r2, [r7, #20]
 801fb58:	429a      	cmp	r2, r3
 801fb5a:	d20b      	bcs.n	801fb74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801fb5c:	683b      	ldr	r3, [r7, #0]
 801fb5e:	681a      	ldr	r2, [r3, #0]
 801fb60:	697b      	ldr	r3, [r7, #20]
 801fb62:	1ad2      	subs	r2, r2, r3
 801fb64:	683b      	ldr	r3, [r7, #0]
 801fb66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801fb68:	6878      	ldr	r0, [r7, #4]
 801fb6a:	f7ff ff9b 	bl	801faa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801fb6e:	2300      	movs	r3, #0
 801fb70:	61fb      	str	r3, [r7, #28]
 801fb72:	e004      	b.n	801fb7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801fb74:	683b      	ldr	r3, [r7, #0]
 801fb76:	2200      	movs	r2, #0
 801fb78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801fb7a:	2301      	movs	r3, #1
 801fb7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801fb7e:	f000 ff99 	bl	8020ab4 <vPortExitCritical>

	return xReturn;
 801fb82:	69fb      	ldr	r3, [r7, #28]
}
 801fb84:	4618      	mov	r0, r3
 801fb86:	3720      	adds	r7, #32
 801fb88:	46bd      	mov	sp, r7
 801fb8a:	bd80      	pop	{r7, pc}
 801fb8c:	200009c4 	.word	0x200009c4
 801fb90:	200009d8 	.word	0x200009d8

0801fb94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801fb94:	b480      	push	{r7}
 801fb96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801fb98:	4b03      	ldr	r3, [pc, #12]	; (801fba8 <vTaskMissedYield+0x14>)
 801fb9a:	2201      	movs	r2, #1
 801fb9c:	601a      	str	r2, [r3, #0]
}
 801fb9e:	bf00      	nop
 801fba0:	46bd      	mov	sp, r7
 801fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fba6:	4770      	bx	lr
 801fba8:	200009d4 	.word	0x200009d4

0801fbac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801fbac:	b580      	push	{r7, lr}
 801fbae:	b082      	sub	sp, #8
 801fbb0:	af00      	add	r7, sp, #0
 801fbb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801fbb4:	f000 f852 	bl	801fc5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801fbb8:	4b06      	ldr	r3, [pc, #24]	; (801fbd4 <prvIdleTask+0x28>)
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	2b01      	cmp	r3, #1
 801fbbe:	d9f9      	bls.n	801fbb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 801fbc0:	4b05      	ldr	r3, [pc, #20]	; (801fbd8 <prvIdleTask+0x2c>)
 801fbc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fbc6:	601a      	str	r2, [r3, #0]
 801fbc8:	f3bf 8f4f 	dsb	sy
 801fbcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801fbd0:	e7f0      	b.n	801fbb4 <prvIdleTask+0x8>
 801fbd2:	bf00      	nop
 801fbd4:	200008c4 	.word	0x200008c4
 801fbd8:	e000ed04 	.word	0xe000ed04

0801fbdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801fbdc:	b580      	push	{r7, lr}
 801fbde:	b082      	sub	sp, #8
 801fbe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801fbe2:	2300      	movs	r3, #0
 801fbe4:	607b      	str	r3, [r7, #4]
 801fbe6:	e00c      	b.n	801fc02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801fbe8:	687a      	ldr	r2, [r7, #4]
 801fbea:	4613      	mov	r3, r2
 801fbec:	009b      	lsls	r3, r3, #2
 801fbee:	4413      	add	r3, r2
 801fbf0:	009b      	lsls	r3, r3, #2
 801fbf2:	4a12      	ldr	r2, [pc, #72]	; (801fc3c <prvInitialiseTaskLists+0x60>)
 801fbf4:	4413      	add	r3, r2
 801fbf6:	4618      	mov	r0, r3
 801fbf8:	f7fe f9f9 	bl	801dfee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	3301      	adds	r3, #1
 801fc00:	607b      	str	r3, [r7, #4]
 801fc02:	687b      	ldr	r3, [r7, #4]
 801fc04:	2b06      	cmp	r3, #6
 801fc06:	d9ef      	bls.n	801fbe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801fc08:	480d      	ldr	r0, [pc, #52]	; (801fc40 <prvInitialiseTaskLists+0x64>)
 801fc0a:	f7fe f9f0 	bl	801dfee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801fc0e:	480d      	ldr	r0, [pc, #52]	; (801fc44 <prvInitialiseTaskLists+0x68>)
 801fc10:	f7fe f9ed 	bl	801dfee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801fc14:	480c      	ldr	r0, [pc, #48]	; (801fc48 <prvInitialiseTaskLists+0x6c>)
 801fc16:	f7fe f9ea 	bl	801dfee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801fc1a:	480c      	ldr	r0, [pc, #48]	; (801fc4c <prvInitialiseTaskLists+0x70>)
 801fc1c:	f7fe f9e7 	bl	801dfee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801fc20:	480b      	ldr	r0, [pc, #44]	; (801fc50 <prvInitialiseTaskLists+0x74>)
 801fc22:	f7fe f9e4 	bl	801dfee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801fc26:	4b0b      	ldr	r3, [pc, #44]	; (801fc54 <prvInitialiseTaskLists+0x78>)
 801fc28:	4a05      	ldr	r2, [pc, #20]	; (801fc40 <prvInitialiseTaskLists+0x64>)
 801fc2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801fc2c:	4b0a      	ldr	r3, [pc, #40]	; (801fc58 <prvInitialiseTaskLists+0x7c>)
 801fc2e:	4a05      	ldr	r2, [pc, #20]	; (801fc44 <prvInitialiseTaskLists+0x68>)
 801fc30:	601a      	str	r2, [r3, #0]
}
 801fc32:	bf00      	nop
 801fc34:	3708      	adds	r7, #8
 801fc36:	46bd      	mov	sp, r7
 801fc38:	bd80      	pop	{r7, pc}
 801fc3a:	bf00      	nop
 801fc3c:	200008c4 	.word	0x200008c4
 801fc40:	20000950 	.word	0x20000950
 801fc44:	20000964 	.word	0x20000964
 801fc48:	20000980 	.word	0x20000980
 801fc4c:	20000994 	.word	0x20000994
 801fc50:	200009ac 	.word	0x200009ac
 801fc54:	20000978 	.word	0x20000978
 801fc58:	2000097c 	.word	0x2000097c

0801fc5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801fc5c:	b580      	push	{r7, lr}
 801fc5e:	b082      	sub	sp, #8
 801fc60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801fc62:	e019      	b.n	801fc98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801fc64:	f000 fef6 	bl	8020a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fc68:	4b10      	ldr	r3, [pc, #64]	; (801fcac <prvCheckTasksWaitingTermination+0x50>)
 801fc6a:	68db      	ldr	r3, [r3, #12]
 801fc6c:	68db      	ldr	r3, [r3, #12]
 801fc6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	3304      	adds	r3, #4
 801fc74:	4618      	mov	r0, r3
 801fc76:	f7fe fa44 	bl	801e102 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801fc7a:	4b0d      	ldr	r3, [pc, #52]	; (801fcb0 <prvCheckTasksWaitingTermination+0x54>)
 801fc7c:	681b      	ldr	r3, [r3, #0]
 801fc7e:	3b01      	subs	r3, #1
 801fc80:	4a0b      	ldr	r2, [pc, #44]	; (801fcb0 <prvCheckTasksWaitingTermination+0x54>)
 801fc82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801fc84:	4b0b      	ldr	r3, [pc, #44]	; (801fcb4 <prvCheckTasksWaitingTermination+0x58>)
 801fc86:	681b      	ldr	r3, [r3, #0]
 801fc88:	3b01      	subs	r3, #1
 801fc8a:	4a0a      	ldr	r2, [pc, #40]	; (801fcb4 <prvCheckTasksWaitingTermination+0x58>)
 801fc8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801fc8e:	f000 ff11 	bl	8020ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801fc92:	6878      	ldr	r0, [r7, #4]
 801fc94:	f000 f810 	bl	801fcb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801fc98:	4b06      	ldr	r3, [pc, #24]	; (801fcb4 <prvCheckTasksWaitingTermination+0x58>)
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d1e1      	bne.n	801fc64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801fca0:	bf00      	nop
 801fca2:	bf00      	nop
 801fca4:	3708      	adds	r7, #8
 801fca6:	46bd      	mov	sp, r7
 801fca8:	bd80      	pop	{r7, pc}
 801fcaa:	bf00      	nop
 801fcac:	20000994 	.word	0x20000994
 801fcb0:	200009c0 	.word	0x200009c0
 801fcb4:	200009a8 	.word	0x200009a8

0801fcb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801fcb8:	b580      	push	{r7, lr}
 801fcba:	b084      	sub	sp, #16
 801fcbc:	af00      	add	r7, sp, #0
 801fcbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d108      	bne.n	801fcdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fcce:	4618      	mov	r0, r3
 801fcd0:	f001 f8ae 	bl	8020e30 <vPortFree>
				vPortFree( pxTCB );
 801fcd4:	6878      	ldr	r0, [r7, #4]
 801fcd6:	f001 f8ab 	bl	8020e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801fcda:	e018      	b.n	801fd0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801fce2:	2b01      	cmp	r3, #1
 801fce4:	d103      	bne.n	801fcee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801fce6:	6878      	ldr	r0, [r7, #4]
 801fce8:	f001 f8a2 	bl	8020e30 <vPortFree>
	}
 801fcec:	e00f      	b.n	801fd0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801fcf4:	2b02      	cmp	r3, #2
 801fcf6:	d00a      	beq.n	801fd0e <prvDeleteTCB+0x56>
	__asm volatile
 801fcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fcfc:	f383 8811 	msr	BASEPRI, r3
 801fd00:	f3bf 8f6f 	isb	sy
 801fd04:	f3bf 8f4f 	dsb	sy
 801fd08:	60fb      	str	r3, [r7, #12]
}
 801fd0a:	bf00      	nop
 801fd0c:	e7fe      	b.n	801fd0c <prvDeleteTCB+0x54>
	}
 801fd0e:	bf00      	nop
 801fd10:	3710      	adds	r7, #16
 801fd12:	46bd      	mov	sp, r7
 801fd14:	bd80      	pop	{r7, pc}
	...

0801fd18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801fd18:	b480      	push	{r7}
 801fd1a:	b083      	sub	sp, #12
 801fd1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801fd1e:	4b0c      	ldr	r3, [pc, #48]	; (801fd50 <prvResetNextTaskUnblockTime+0x38>)
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	d104      	bne.n	801fd32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801fd28:	4b0a      	ldr	r3, [pc, #40]	; (801fd54 <prvResetNextTaskUnblockTime+0x3c>)
 801fd2a:	f04f 32ff 	mov.w	r2, #4294967295
 801fd2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801fd30:	e008      	b.n	801fd44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fd32:	4b07      	ldr	r3, [pc, #28]	; (801fd50 <prvResetNextTaskUnblockTime+0x38>)
 801fd34:	681b      	ldr	r3, [r3, #0]
 801fd36:	68db      	ldr	r3, [r3, #12]
 801fd38:	68db      	ldr	r3, [r3, #12]
 801fd3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	685b      	ldr	r3, [r3, #4]
 801fd40:	4a04      	ldr	r2, [pc, #16]	; (801fd54 <prvResetNextTaskUnblockTime+0x3c>)
 801fd42:	6013      	str	r3, [r2, #0]
}
 801fd44:	bf00      	nop
 801fd46:	370c      	adds	r7, #12
 801fd48:	46bd      	mov	sp, r7
 801fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd4e:	4770      	bx	lr
 801fd50:	20000978 	.word	0x20000978
 801fd54:	200009e0 	.word	0x200009e0

0801fd58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801fd58:	b480      	push	{r7}
 801fd5a:	b083      	sub	sp, #12
 801fd5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801fd5e:	4b0b      	ldr	r3, [pc, #44]	; (801fd8c <xTaskGetSchedulerState+0x34>)
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	d102      	bne.n	801fd6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801fd66:	2301      	movs	r3, #1
 801fd68:	607b      	str	r3, [r7, #4]
 801fd6a:	e008      	b.n	801fd7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801fd6c:	4b08      	ldr	r3, [pc, #32]	; (801fd90 <xTaskGetSchedulerState+0x38>)
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d102      	bne.n	801fd7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801fd74:	2302      	movs	r3, #2
 801fd76:	607b      	str	r3, [r7, #4]
 801fd78:	e001      	b.n	801fd7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801fd7a:	2300      	movs	r3, #0
 801fd7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801fd7e:	687b      	ldr	r3, [r7, #4]
	}
 801fd80:	4618      	mov	r0, r3
 801fd82:	370c      	adds	r7, #12
 801fd84:	46bd      	mov	sp, r7
 801fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd8a:	4770      	bx	lr
 801fd8c:	200009cc 	.word	0x200009cc
 801fd90:	200009e8 	.word	0x200009e8

0801fd94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801fd94:	b580      	push	{r7, lr}
 801fd96:	b084      	sub	sp, #16
 801fd98:	af00      	add	r7, sp, #0
 801fd9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801fda0:	2300      	movs	r3, #0
 801fda2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	d05e      	beq.n	801fe68 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801fdaa:	68bb      	ldr	r3, [r7, #8]
 801fdac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fdae:	4b31      	ldr	r3, [pc, #196]	; (801fe74 <xTaskPriorityInherit+0xe0>)
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdb4:	429a      	cmp	r2, r3
 801fdb6:	d24e      	bcs.n	801fe56 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801fdb8:	68bb      	ldr	r3, [r7, #8]
 801fdba:	699b      	ldr	r3, [r3, #24]
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	db06      	blt.n	801fdce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801fdc0:	4b2c      	ldr	r3, [pc, #176]	; (801fe74 <xTaskPriorityInherit+0xe0>)
 801fdc2:	681b      	ldr	r3, [r3, #0]
 801fdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdc6:	f1c3 0207 	rsb	r2, r3, #7
 801fdca:	68bb      	ldr	r3, [r7, #8]
 801fdcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801fdce:	68bb      	ldr	r3, [r7, #8]
 801fdd0:	6959      	ldr	r1, [r3, #20]
 801fdd2:	68bb      	ldr	r3, [r7, #8]
 801fdd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fdd6:	4613      	mov	r3, r2
 801fdd8:	009b      	lsls	r3, r3, #2
 801fdda:	4413      	add	r3, r2
 801fddc:	009b      	lsls	r3, r3, #2
 801fdde:	4a26      	ldr	r2, [pc, #152]	; (801fe78 <xTaskPriorityInherit+0xe4>)
 801fde0:	4413      	add	r3, r2
 801fde2:	4299      	cmp	r1, r3
 801fde4:	d12f      	bne.n	801fe46 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801fde6:	68bb      	ldr	r3, [r7, #8]
 801fde8:	3304      	adds	r3, #4
 801fdea:	4618      	mov	r0, r3
 801fdec:	f7fe f989 	bl	801e102 <uxListRemove>
 801fdf0:	4603      	mov	r3, r0
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	d10a      	bne.n	801fe0c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801fdf6:	68bb      	ldr	r3, [r7, #8]
 801fdf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdfa:	2201      	movs	r2, #1
 801fdfc:	fa02 f303 	lsl.w	r3, r2, r3
 801fe00:	43da      	mvns	r2, r3
 801fe02:	4b1e      	ldr	r3, [pc, #120]	; (801fe7c <xTaskPriorityInherit+0xe8>)
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	4013      	ands	r3, r2
 801fe08:	4a1c      	ldr	r2, [pc, #112]	; (801fe7c <xTaskPriorityInherit+0xe8>)
 801fe0a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801fe0c:	4b19      	ldr	r3, [pc, #100]	; (801fe74 <xTaskPriorityInherit+0xe0>)
 801fe0e:	681b      	ldr	r3, [r3, #0]
 801fe10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe12:	68bb      	ldr	r3, [r7, #8]
 801fe14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801fe16:	68bb      	ldr	r3, [r7, #8]
 801fe18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe1a:	2201      	movs	r2, #1
 801fe1c:	409a      	lsls	r2, r3
 801fe1e:	4b17      	ldr	r3, [pc, #92]	; (801fe7c <xTaskPriorityInherit+0xe8>)
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	4313      	orrs	r3, r2
 801fe24:	4a15      	ldr	r2, [pc, #84]	; (801fe7c <xTaskPriorityInherit+0xe8>)
 801fe26:	6013      	str	r3, [r2, #0]
 801fe28:	68bb      	ldr	r3, [r7, #8]
 801fe2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe2c:	4613      	mov	r3, r2
 801fe2e:	009b      	lsls	r3, r3, #2
 801fe30:	4413      	add	r3, r2
 801fe32:	009b      	lsls	r3, r3, #2
 801fe34:	4a10      	ldr	r2, [pc, #64]	; (801fe78 <xTaskPriorityInherit+0xe4>)
 801fe36:	441a      	add	r2, r3
 801fe38:	68bb      	ldr	r3, [r7, #8]
 801fe3a:	3304      	adds	r3, #4
 801fe3c:	4619      	mov	r1, r3
 801fe3e:	4610      	mov	r0, r2
 801fe40:	f7fe f902 	bl	801e048 <vListInsertEnd>
 801fe44:	e004      	b.n	801fe50 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801fe46:	4b0b      	ldr	r3, [pc, #44]	; (801fe74 <xTaskPriorityInherit+0xe0>)
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe4c:	68bb      	ldr	r3, [r7, #8]
 801fe4e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801fe50:	2301      	movs	r3, #1
 801fe52:	60fb      	str	r3, [r7, #12]
 801fe54:	e008      	b.n	801fe68 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801fe56:	68bb      	ldr	r3, [r7, #8]
 801fe58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fe5a:	4b06      	ldr	r3, [pc, #24]	; (801fe74 <xTaskPriorityInherit+0xe0>)
 801fe5c:	681b      	ldr	r3, [r3, #0]
 801fe5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe60:	429a      	cmp	r2, r3
 801fe62:	d201      	bcs.n	801fe68 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801fe64:	2301      	movs	r3, #1
 801fe66:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801fe68:	68fb      	ldr	r3, [r7, #12]
	}
 801fe6a:	4618      	mov	r0, r3
 801fe6c:	3710      	adds	r7, #16
 801fe6e:	46bd      	mov	sp, r7
 801fe70:	bd80      	pop	{r7, pc}
 801fe72:	bf00      	nop
 801fe74:	200008c0 	.word	0x200008c0
 801fe78:	200008c4 	.word	0x200008c4
 801fe7c:	200009c8 	.word	0x200009c8

0801fe80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801fe80:	b580      	push	{r7, lr}
 801fe82:	b086      	sub	sp, #24
 801fe84:	af00      	add	r7, sp, #0
 801fe86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801fe8c:	2300      	movs	r3, #0
 801fe8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	d06e      	beq.n	801ff74 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801fe96:	4b3a      	ldr	r3, [pc, #232]	; (801ff80 <xTaskPriorityDisinherit+0x100>)
 801fe98:	681b      	ldr	r3, [r3, #0]
 801fe9a:	693a      	ldr	r2, [r7, #16]
 801fe9c:	429a      	cmp	r2, r3
 801fe9e:	d00a      	beq.n	801feb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801fea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fea4:	f383 8811 	msr	BASEPRI, r3
 801fea8:	f3bf 8f6f 	isb	sy
 801feac:	f3bf 8f4f 	dsb	sy
 801feb0:	60fb      	str	r3, [r7, #12]
}
 801feb2:	bf00      	nop
 801feb4:	e7fe      	b.n	801feb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801feb6:	693b      	ldr	r3, [r7, #16]
 801feb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801feba:	2b00      	cmp	r3, #0
 801febc:	d10a      	bne.n	801fed4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801febe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fec2:	f383 8811 	msr	BASEPRI, r3
 801fec6:	f3bf 8f6f 	isb	sy
 801feca:	f3bf 8f4f 	dsb	sy
 801fece:	60bb      	str	r3, [r7, #8]
}
 801fed0:	bf00      	nop
 801fed2:	e7fe      	b.n	801fed2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801fed4:	693b      	ldr	r3, [r7, #16]
 801fed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fed8:	1e5a      	subs	r2, r3, #1
 801feda:	693b      	ldr	r3, [r7, #16]
 801fedc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801fede:	693b      	ldr	r3, [r7, #16]
 801fee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fee2:	693b      	ldr	r3, [r7, #16]
 801fee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fee6:	429a      	cmp	r2, r3
 801fee8:	d044      	beq.n	801ff74 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801feea:	693b      	ldr	r3, [r7, #16]
 801feec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d140      	bne.n	801ff74 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801fef2:	693b      	ldr	r3, [r7, #16]
 801fef4:	3304      	adds	r3, #4
 801fef6:	4618      	mov	r0, r3
 801fef8:	f7fe f903 	bl	801e102 <uxListRemove>
 801fefc:	4603      	mov	r3, r0
 801fefe:	2b00      	cmp	r3, #0
 801ff00:	d115      	bne.n	801ff2e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801ff02:	693b      	ldr	r3, [r7, #16]
 801ff04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ff06:	491f      	ldr	r1, [pc, #124]	; (801ff84 <xTaskPriorityDisinherit+0x104>)
 801ff08:	4613      	mov	r3, r2
 801ff0a:	009b      	lsls	r3, r3, #2
 801ff0c:	4413      	add	r3, r2
 801ff0e:	009b      	lsls	r3, r3, #2
 801ff10:	440b      	add	r3, r1
 801ff12:	681b      	ldr	r3, [r3, #0]
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d10a      	bne.n	801ff2e <xTaskPriorityDisinherit+0xae>
 801ff18:	693b      	ldr	r3, [r7, #16]
 801ff1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff1c:	2201      	movs	r2, #1
 801ff1e:	fa02 f303 	lsl.w	r3, r2, r3
 801ff22:	43da      	mvns	r2, r3
 801ff24:	4b18      	ldr	r3, [pc, #96]	; (801ff88 <xTaskPriorityDisinherit+0x108>)
 801ff26:	681b      	ldr	r3, [r3, #0]
 801ff28:	4013      	ands	r3, r2
 801ff2a:	4a17      	ldr	r2, [pc, #92]	; (801ff88 <xTaskPriorityDisinherit+0x108>)
 801ff2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ff2e:	693b      	ldr	r3, [r7, #16]
 801ff30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ff32:	693b      	ldr	r3, [r7, #16]
 801ff34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ff36:	693b      	ldr	r3, [r7, #16]
 801ff38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff3a:	f1c3 0207 	rsb	r2, r3, #7
 801ff3e:	693b      	ldr	r3, [r7, #16]
 801ff40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801ff42:	693b      	ldr	r3, [r7, #16]
 801ff44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff46:	2201      	movs	r2, #1
 801ff48:	409a      	lsls	r2, r3
 801ff4a:	4b0f      	ldr	r3, [pc, #60]	; (801ff88 <xTaskPriorityDisinherit+0x108>)
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	4313      	orrs	r3, r2
 801ff50:	4a0d      	ldr	r2, [pc, #52]	; (801ff88 <xTaskPriorityDisinherit+0x108>)
 801ff52:	6013      	str	r3, [r2, #0]
 801ff54:	693b      	ldr	r3, [r7, #16]
 801ff56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ff58:	4613      	mov	r3, r2
 801ff5a:	009b      	lsls	r3, r3, #2
 801ff5c:	4413      	add	r3, r2
 801ff5e:	009b      	lsls	r3, r3, #2
 801ff60:	4a08      	ldr	r2, [pc, #32]	; (801ff84 <xTaskPriorityDisinherit+0x104>)
 801ff62:	441a      	add	r2, r3
 801ff64:	693b      	ldr	r3, [r7, #16]
 801ff66:	3304      	adds	r3, #4
 801ff68:	4619      	mov	r1, r3
 801ff6a:	4610      	mov	r0, r2
 801ff6c:	f7fe f86c 	bl	801e048 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801ff70:	2301      	movs	r3, #1
 801ff72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ff74:	697b      	ldr	r3, [r7, #20]
	}
 801ff76:	4618      	mov	r0, r3
 801ff78:	3718      	adds	r7, #24
 801ff7a:	46bd      	mov	sp, r7
 801ff7c:	bd80      	pop	{r7, pc}
 801ff7e:	bf00      	nop
 801ff80:	200008c0 	.word	0x200008c0
 801ff84:	200008c4 	.word	0x200008c4
 801ff88:	200009c8 	.word	0x200009c8

0801ff8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801ff8c:	b580      	push	{r7, lr}
 801ff8e:	b088      	sub	sp, #32
 801ff90:	af00      	add	r7, sp, #0
 801ff92:	6078      	str	r0, [r7, #4]
 801ff94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801ff96:	687b      	ldr	r3, [r7, #4]
 801ff98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801ff9a:	2301      	movs	r3, #1
 801ff9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	2b00      	cmp	r3, #0
 801ffa2:	d077      	beq.n	8020094 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801ffa4:	69bb      	ldr	r3, [r7, #24]
 801ffa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d10a      	bne.n	801ffc2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801ffac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ffb0:	f383 8811 	msr	BASEPRI, r3
 801ffb4:	f3bf 8f6f 	isb	sy
 801ffb8:	f3bf 8f4f 	dsb	sy
 801ffbc:	60fb      	str	r3, [r7, #12]
}
 801ffbe:	bf00      	nop
 801ffc0:	e7fe      	b.n	801ffc0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801ffc2:	69bb      	ldr	r3, [r7, #24]
 801ffc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ffc6:	683a      	ldr	r2, [r7, #0]
 801ffc8:	429a      	cmp	r2, r3
 801ffca:	d902      	bls.n	801ffd2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801ffcc:	683b      	ldr	r3, [r7, #0]
 801ffce:	61fb      	str	r3, [r7, #28]
 801ffd0:	e002      	b.n	801ffd8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801ffd2:	69bb      	ldr	r3, [r7, #24]
 801ffd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ffd6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801ffd8:	69bb      	ldr	r3, [r7, #24]
 801ffda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ffdc:	69fa      	ldr	r2, [r7, #28]
 801ffde:	429a      	cmp	r2, r3
 801ffe0:	d058      	beq.n	8020094 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801ffe2:	69bb      	ldr	r3, [r7, #24]
 801ffe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ffe6:	697a      	ldr	r2, [r7, #20]
 801ffe8:	429a      	cmp	r2, r3
 801ffea:	d153      	bne.n	8020094 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801ffec:	4b2b      	ldr	r3, [pc, #172]	; (802009c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	69ba      	ldr	r2, [r7, #24]
 801fff2:	429a      	cmp	r2, r3
 801fff4:	d10a      	bne.n	802000c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fffa:	f383 8811 	msr	BASEPRI, r3
 801fffe:	f3bf 8f6f 	isb	sy
 8020002:	f3bf 8f4f 	dsb	sy
 8020006:	60bb      	str	r3, [r7, #8]
}
 8020008:	bf00      	nop
 802000a:	e7fe      	b.n	802000a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 802000c:	69bb      	ldr	r3, [r7, #24]
 802000e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020010:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8020012:	69bb      	ldr	r3, [r7, #24]
 8020014:	69fa      	ldr	r2, [r7, #28]
 8020016:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8020018:	69bb      	ldr	r3, [r7, #24]
 802001a:	699b      	ldr	r3, [r3, #24]
 802001c:	2b00      	cmp	r3, #0
 802001e:	db04      	blt.n	802002a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020020:	69fb      	ldr	r3, [r7, #28]
 8020022:	f1c3 0207 	rsb	r2, r3, #7
 8020026:	69bb      	ldr	r3, [r7, #24]
 8020028:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 802002a:	69bb      	ldr	r3, [r7, #24]
 802002c:	6959      	ldr	r1, [r3, #20]
 802002e:	693a      	ldr	r2, [r7, #16]
 8020030:	4613      	mov	r3, r2
 8020032:	009b      	lsls	r3, r3, #2
 8020034:	4413      	add	r3, r2
 8020036:	009b      	lsls	r3, r3, #2
 8020038:	4a19      	ldr	r2, [pc, #100]	; (80200a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 802003a:	4413      	add	r3, r2
 802003c:	4299      	cmp	r1, r3
 802003e:	d129      	bne.n	8020094 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020040:	69bb      	ldr	r3, [r7, #24]
 8020042:	3304      	adds	r3, #4
 8020044:	4618      	mov	r0, r3
 8020046:	f7fe f85c 	bl	801e102 <uxListRemove>
 802004a:	4603      	mov	r3, r0
 802004c:	2b00      	cmp	r3, #0
 802004e:	d10a      	bne.n	8020066 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8020050:	69bb      	ldr	r3, [r7, #24]
 8020052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020054:	2201      	movs	r2, #1
 8020056:	fa02 f303 	lsl.w	r3, r2, r3
 802005a:	43da      	mvns	r2, r3
 802005c:	4b11      	ldr	r3, [pc, #68]	; (80200a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 802005e:	681b      	ldr	r3, [r3, #0]
 8020060:	4013      	ands	r3, r2
 8020062:	4a10      	ldr	r2, [pc, #64]	; (80200a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8020064:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8020066:	69bb      	ldr	r3, [r7, #24]
 8020068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802006a:	2201      	movs	r2, #1
 802006c:	409a      	lsls	r2, r3
 802006e:	4b0d      	ldr	r3, [pc, #52]	; (80200a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8020070:	681b      	ldr	r3, [r3, #0]
 8020072:	4313      	orrs	r3, r2
 8020074:	4a0b      	ldr	r2, [pc, #44]	; (80200a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8020076:	6013      	str	r3, [r2, #0]
 8020078:	69bb      	ldr	r3, [r7, #24]
 802007a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802007c:	4613      	mov	r3, r2
 802007e:	009b      	lsls	r3, r3, #2
 8020080:	4413      	add	r3, r2
 8020082:	009b      	lsls	r3, r3, #2
 8020084:	4a06      	ldr	r2, [pc, #24]	; (80200a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8020086:	441a      	add	r2, r3
 8020088:	69bb      	ldr	r3, [r7, #24]
 802008a:	3304      	adds	r3, #4
 802008c:	4619      	mov	r1, r3
 802008e:	4610      	mov	r0, r2
 8020090:	f7fd ffda 	bl	801e048 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8020094:	bf00      	nop
 8020096:	3720      	adds	r7, #32
 8020098:	46bd      	mov	sp, r7
 802009a:	bd80      	pop	{r7, pc}
 802009c:	200008c0 	.word	0x200008c0
 80200a0:	200008c4 	.word	0x200008c4
 80200a4:	200009c8 	.word	0x200009c8

080200a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80200a8:	b480      	push	{r7}
 80200aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80200ac:	4b07      	ldr	r3, [pc, #28]	; (80200cc <pvTaskIncrementMutexHeldCount+0x24>)
 80200ae:	681b      	ldr	r3, [r3, #0]
 80200b0:	2b00      	cmp	r3, #0
 80200b2:	d004      	beq.n	80200be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80200b4:	4b05      	ldr	r3, [pc, #20]	; (80200cc <pvTaskIncrementMutexHeldCount+0x24>)
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80200ba:	3201      	adds	r2, #1
 80200bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80200be:	4b03      	ldr	r3, [pc, #12]	; (80200cc <pvTaskIncrementMutexHeldCount+0x24>)
 80200c0:	681b      	ldr	r3, [r3, #0]
	}
 80200c2:	4618      	mov	r0, r3
 80200c4:	46bd      	mov	sp, r7
 80200c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200ca:	4770      	bx	lr
 80200cc:	200008c0 	.word	0x200008c0

080200d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80200d0:	b580      	push	{r7, lr}
 80200d2:	b084      	sub	sp, #16
 80200d4:	af00      	add	r7, sp, #0
 80200d6:	6078      	str	r0, [r7, #4]
 80200d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80200da:	4b29      	ldr	r3, [pc, #164]	; (8020180 <prvAddCurrentTaskToDelayedList+0xb0>)
 80200dc:	681b      	ldr	r3, [r3, #0]
 80200de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80200e0:	4b28      	ldr	r3, [pc, #160]	; (8020184 <prvAddCurrentTaskToDelayedList+0xb4>)
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	3304      	adds	r3, #4
 80200e6:	4618      	mov	r0, r3
 80200e8:	f7fe f80b 	bl	801e102 <uxListRemove>
 80200ec:	4603      	mov	r3, r0
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d10b      	bne.n	802010a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80200f2:	4b24      	ldr	r3, [pc, #144]	; (8020184 <prvAddCurrentTaskToDelayedList+0xb4>)
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80200f8:	2201      	movs	r2, #1
 80200fa:	fa02 f303 	lsl.w	r3, r2, r3
 80200fe:	43da      	mvns	r2, r3
 8020100:	4b21      	ldr	r3, [pc, #132]	; (8020188 <prvAddCurrentTaskToDelayedList+0xb8>)
 8020102:	681b      	ldr	r3, [r3, #0]
 8020104:	4013      	ands	r3, r2
 8020106:	4a20      	ldr	r2, [pc, #128]	; (8020188 <prvAddCurrentTaskToDelayedList+0xb8>)
 8020108:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020110:	d10a      	bne.n	8020128 <prvAddCurrentTaskToDelayedList+0x58>
 8020112:	683b      	ldr	r3, [r7, #0]
 8020114:	2b00      	cmp	r3, #0
 8020116:	d007      	beq.n	8020128 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020118:	4b1a      	ldr	r3, [pc, #104]	; (8020184 <prvAddCurrentTaskToDelayedList+0xb4>)
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	3304      	adds	r3, #4
 802011e:	4619      	mov	r1, r3
 8020120:	481a      	ldr	r0, [pc, #104]	; (802018c <prvAddCurrentTaskToDelayedList+0xbc>)
 8020122:	f7fd ff91 	bl	801e048 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8020126:	e026      	b.n	8020176 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8020128:	68fa      	ldr	r2, [r7, #12]
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	4413      	add	r3, r2
 802012e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8020130:	4b14      	ldr	r3, [pc, #80]	; (8020184 <prvAddCurrentTaskToDelayedList+0xb4>)
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	68ba      	ldr	r2, [r7, #8]
 8020136:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8020138:	68ba      	ldr	r2, [r7, #8]
 802013a:	68fb      	ldr	r3, [r7, #12]
 802013c:	429a      	cmp	r2, r3
 802013e:	d209      	bcs.n	8020154 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020140:	4b13      	ldr	r3, [pc, #76]	; (8020190 <prvAddCurrentTaskToDelayedList+0xc0>)
 8020142:	681a      	ldr	r2, [r3, #0]
 8020144:	4b0f      	ldr	r3, [pc, #60]	; (8020184 <prvAddCurrentTaskToDelayedList+0xb4>)
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	3304      	adds	r3, #4
 802014a:	4619      	mov	r1, r3
 802014c:	4610      	mov	r0, r2
 802014e:	f7fd ff9f 	bl	801e090 <vListInsert>
}
 8020152:	e010      	b.n	8020176 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020154:	4b0f      	ldr	r3, [pc, #60]	; (8020194 <prvAddCurrentTaskToDelayedList+0xc4>)
 8020156:	681a      	ldr	r2, [r3, #0]
 8020158:	4b0a      	ldr	r3, [pc, #40]	; (8020184 <prvAddCurrentTaskToDelayedList+0xb4>)
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	3304      	adds	r3, #4
 802015e:	4619      	mov	r1, r3
 8020160:	4610      	mov	r0, r2
 8020162:	f7fd ff95 	bl	801e090 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8020166:	4b0c      	ldr	r3, [pc, #48]	; (8020198 <prvAddCurrentTaskToDelayedList+0xc8>)
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	68ba      	ldr	r2, [r7, #8]
 802016c:	429a      	cmp	r2, r3
 802016e:	d202      	bcs.n	8020176 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8020170:	4a09      	ldr	r2, [pc, #36]	; (8020198 <prvAddCurrentTaskToDelayedList+0xc8>)
 8020172:	68bb      	ldr	r3, [r7, #8]
 8020174:	6013      	str	r3, [r2, #0]
}
 8020176:	bf00      	nop
 8020178:	3710      	adds	r7, #16
 802017a:	46bd      	mov	sp, r7
 802017c:	bd80      	pop	{r7, pc}
 802017e:	bf00      	nop
 8020180:	200009c4 	.word	0x200009c4
 8020184:	200008c0 	.word	0x200008c0
 8020188:	200009c8 	.word	0x200009c8
 802018c:	200009ac 	.word	0x200009ac
 8020190:	2000097c 	.word	0x2000097c
 8020194:	20000978 	.word	0x20000978
 8020198:	200009e0 	.word	0x200009e0

0802019c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 802019c:	b580      	push	{r7, lr}
 802019e:	b08a      	sub	sp, #40	; 0x28
 80201a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80201a2:	2300      	movs	r3, #0
 80201a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80201a6:	f000 faeb 	bl	8020780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80201aa:	4b1c      	ldr	r3, [pc, #112]	; (802021c <xTimerCreateTimerTask+0x80>)
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	d021      	beq.n	80201f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80201b2:	2300      	movs	r3, #0
 80201b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80201b6:	2300      	movs	r3, #0
 80201b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80201ba:	1d3a      	adds	r2, r7, #4
 80201bc:	f107 0108 	add.w	r1, r7, #8
 80201c0:	f107 030c 	add.w	r3, r7, #12
 80201c4:	4618      	mov	r0, r3
 80201c6:	f7f2 fbb7 	bl	8012938 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80201ca:	6879      	ldr	r1, [r7, #4]
 80201cc:	68bb      	ldr	r3, [r7, #8]
 80201ce:	68fa      	ldr	r2, [r7, #12]
 80201d0:	9202      	str	r2, [sp, #8]
 80201d2:	9301      	str	r3, [sp, #4]
 80201d4:	2302      	movs	r3, #2
 80201d6:	9300      	str	r3, [sp, #0]
 80201d8:	2300      	movs	r3, #0
 80201da:	460a      	mov	r2, r1
 80201dc:	4910      	ldr	r1, [pc, #64]	; (8020220 <xTimerCreateTimerTask+0x84>)
 80201de:	4811      	ldr	r0, [pc, #68]	; (8020224 <xTimerCreateTimerTask+0x88>)
 80201e0:	f7fe fe00 	bl	801ede4 <xTaskCreateStatic>
 80201e4:	4603      	mov	r3, r0
 80201e6:	4a10      	ldr	r2, [pc, #64]	; (8020228 <xTimerCreateTimerTask+0x8c>)
 80201e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80201ea:	4b0f      	ldr	r3, [pc, #60]	; (8020228 <xTimerCreateTimerTask+0x8c>)
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d001      	beq.n	80201f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80201f2:	2301      	movs	r3, #1
 80201f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80201f6:	697b      	ldr	r3, [r7, #20]
 80201f8:	2b00      	cmp	r3, #0
 80201fa:	d10a      	bne.n	8020212 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80201fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020200:	f383 8811 	msr	BASEPRI, r3
 8020204:	f3bf 8f6f 	isb	sy
 8020208:	f3bf 8f4f 	dsb	sy
 802020c:	613b      	str	r3, [r7, #16]
}
 802020e:	bf00      	nop
 8020210:	e7fe      	b.n	8020210 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8020212:	697b      	ldr	r3, [r7, #20]
}
 8020214:	4618      	mov	r0, r3
 8020216:	3718      	adds	r7, #24
 8020218:	46bd      	mov	sp, r7
 802021a:	bd80      	pop	{r7, pc}
 802021c:	20000a1c 	.word	0x20000a1c
 8020220:	08022fb0 	.word	0x08022fb0
 8020224:	08020361 	.word	0x08020361
 8020228:	20000a20 	.word	0x20000a20

0802022c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802022c:	b580      	push	{r7, lr}
 802022e:	b08a      	sub	sp, #40	; 0x28
 8020230:	af00      	add	r7, sp, #0
 8020232:	60f8      	str	r0, [r7, #12]
 8020234:	60b9      	str	r1, [r7, #8]
 8020236:	607a      	str	r2, [r7, #4]
 8020238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802023a:	2300      	movs	r3, #0
 802023c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802023e:	68fb      	ldr	r3, [r7, #12]
 8020240:	2b00      	cmp	r3, #0
 8020242:	d10a      	bne.n	802025a <xTimerGenericCommand+0x2e>
	__asm volatile
 8020244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020248:	f383 8811 	msr	BASEPRI, r3
 802024c:	f3bf 8f6f 	isb	sy
 8020250:	f3bf 8f4f 	dsb	sy
 8020254:	623b      	str	r3, [r7, #32]
}
 8020256:	bf00      	nop
 8020258:	e7fe      	b.n	8020258 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802025a:	4b1a      	ldr	r3, [pc, #104]	; (80202c4 <xTimerGenericCommand+0x98>)
 802025c:	681b      	ldr	r3, [r3, #0]
 802025e:	2b00      	cmp	r3, #0
 8020260:	d02a      	beq.n	80202b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8020262:	68bb      	ldr	r3, [r7, #8]
 8020264:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802026a:	68fb      	ldr	r3, [r7, #12]
 802026c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802026e:	68bb      	ldr	r3, [r7, #8]
 8020270:	2b05      	cmp	r3, #5
 8020272:	dc18      	bgt.n	80202a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8020274:	f7ff fd70 	bl	801fd58 <xTaskGetSchedulerState>
 8020278:	4603      	mov	r3, r0
 802027a:	2b02      	cmp	r3, #2
 802027c:	d109      	bne.n	8020292 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802027e:	4b11      	ldr	r3, [pc, #68]	; (80202c4 <xTimerGenericCommand+0x98>)
 8020280:	6818      	ldr	r0, [r3, #0]
 8020282:	f107 0114 	add.w	r1, r7, #20
 8020286:	2300      	movs	r3, #0
 8020288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802028a:	f7fe f89f 	bl	801e3cc <xQueueGenericSend>
 802028e:	6278      	str	r0, [r7, #36]	; 0x24
 8020290:	e012      	b.n	80202b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8020292:	4b0c      	ldr	r3, [pc, #48]	; (80202c4 <xTimerGenericCommand+0x98>)
 8020294:	6818      	ldr	r0, [r3, #0]
 8020296:	f107 0114 	add.w	r1, r7, #20
 802029a:	2300      	movs	r3, #0
 802029c:	2200      	movs	r2, #0
 802029e:	f7fe f895 	bl	801e3cc <xQueueGenericSend>
 80202a2:	6278      	str	r0, [r7, #36]	; 0x24
 80202a4:	e008      	b.n	80202b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80202a6:	4b07      	ldr	r3, [pc, #28]	; (80202c4 <xTimerGenericCommand+0x98>)
 80202a8:	6818      	ldr	r0, [r3, #0]
 80202aa:	f107 0114 	add.w	r1, r7, #20
 80202ae:	2300      	movs	r3, #0
 80202b0:	683a      	ldr	r2, [r7, #0]
 80202b2:	f7fe f989 	bl	801e5c8 <xQueueGenericSendFromISR>
 80202b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80202b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80202ba:	4618      	mov	r0, r3
 80202bc:	3728      	adds	r7, #40	; 0x28
 80202be:	46bd      	mov	sp, r7
 80202c0:	bd80      	pop	{r7, pc}
 80202c2:	bf00      	nop
 80202c4:	20000a1c 	.word	0x20000a1c

080202c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80202c8:	b580      	push	{r7, lr}
 80202ca:	b088      	sub	sp, #32
 80202cc:	af02      	add	r7, sp, #8
 80202ce:	6078      	str	r0, [r7, #4]
 80202d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80202d2:	4b22      	ldr	r3, [pc, #136]	; (802035c <prvProcessExpiredTimer+0x94>)
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	68db      	ldr	r3, [r3, #12]
 80202d8:	68db      	ldr	r3, [r3, #12]
 80202da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80202dc:	697b      	ldr	r3, [r7, #20]
 80202de:	3304      	adds	r3, #4
 80202e0:	4618      	mov	r0, r3
 80202e2:	f7fd ff0e 	bl	801e102 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80202e6:	697b      	ldr	r3, [r7, #20]
 80202e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80202ec:	f003 0304 	and.w	r3, r3, #4
 80202f0:	2b00      	cmp	r3, #0
 80202f2:	d022      	beq.n	802033a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80202f4:	697b      	ldr	r3, [r7, #20]
 80202f6:	699a      	ldr	r2, [r3, #24]
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	18d1      	adds	r1, r2, r3
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	683a      	ldr	r2, [r7, #0]
 8020300:	6978      	ldr	r0, [r7, #20]
 8020302:	f000 f8d1 	bl	80204a8 <prvInsertTimerInActiveList>
 8020306:	4603      	mov	r3, r0
 8020308:	2b00      	cmp	r3, #0
 802030a:	d01f      	beq.n	802034c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802030c:	2300      	movs	r3, #0
 802030e:	9300      	str	r3, [sp, #0]
 8020310:	2300      	movs	r3, #0
 8020312:	687a      	ldr	r2, [r7, #4]
 8020314:	2100      	movs	r1, #0
 8020316:	6978      	ldr	r0, [r7, #20]
 8020318:	f7ff ff88 	bl	802022c <xTimerGenericCommand>
 802031c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802031e:	693b      	ldr	r3, [r7, #16]
 8020320:	2b00      	cmp	r3, #0
 8020322:	d113      	bne.n	802034c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8020324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020328:	f383 8811 	msr	BASEPRI, r3
 802032c:	f3bf 8f6f 	isb	sy
 8020330:	f3bf 8f4f 	dsb	sy
 8020334:	60fb      	str	r3, [r7, #12]
}
 8020336:	bf00      	nop
 8020338:	e7fe      	b.n	8020338 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802033a:	697b      	ldr	r3, [r7, #20]
 802033c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020340:	f023 0301 	bic.w	r3, r3, #1
 8020344:	b2da      	uxtb	r2, r3
 8020346:	697b      	ldr	r3, [r7, #20]
 8020348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802034c:	697b      	ldr	r3, [r7, #20]
 802034e:	6a1b      	ldr	r3, [r3, #32]
 8020350:	6978      	ldr	r0, [r7, #20]
 8020352:	4798      	blx	r3
}
 8020354:	bf00      	nop
 8020356:	3718      	adds	r7, #24
 8020358:	46bd      	mov	sp, r7
 802035a:	bd80      	pop	{r7, pc}
 802035c:	20000a14 	.word	0x20000a14

08020360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8020360:	b580      	push	{r7, lr}
 8020362:	b084      	sub	sp, #16
 8020364:	af00      	add	r7, sp, #0
 8020366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020368:	f107 0308 	add.w	r3, r7, #8
 802036c:	4618      	mov	r0, r3
 802036e:	f000 f857 	bl	8020420 <prvGetNextExpireTime>
 8020372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8020374:	68bb      	ldr	r3, [r7, #8]
 8020376:	4619      	mov	r1, r3
 8020378:	68f8      	ldr	r0, [r7, #12]
 802037a:	f000 f803 	bl	8020384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 802037e:	f000 f8d5 	bl	802052c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020382:	e7f1      	b.n	8020368 <prvTimerTask+0x8>

08020384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8020384:	b580      	push	{r7, lr}
 8020386:	b084      	sub	sp, #16
 8020388:	af00      	add	r7, sp, #0
 802038a:	6078      	str	r0, [r7, #4]
 802038c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 802038e:	f7ff f909 	bl	801f5a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8020392:	f107 0308 	add.w	r3, r7, #8
 8020396:	4618      	mov	r0, r3
 8020398:	f000 f866 	bl	8020468 <prvSampleTimeNow>
 802039c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 802039e:	68bb      	ldr	r3, [r7, #8]
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	d130      	bne.n	8020406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80203a4:	683b      	ldr	r3, [r7, #0]
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	d10a      	bne.n	80203c0 <prvProcessTimerOrBlockTask+0x3c>
 80203aa:	687a      	ldr	r2, [r7, #4]
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	429a      	cmp	r2, r3
 80203b0:	d806      	bhi.n	80203c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80203b2:	f7ff f905 	bl	801f5c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80203b6:	68f9      	ldr	r1, [r7, #12]
 80203b8:	6878      	ldr	r0, [r7, #4]
 80203ba:	f7ff ff85 	bl	80202c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80203be:	e024      	b.n	802040a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80203c0:	683b      	ldr	r3, [r7, #0]
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d008      	beq.n	80203d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80203c6:	4b13      	ldr	r3, [pc, #76]	; (8020414 <prvProcessTimerOrBlockTask+0x90>)
 80203c8:	681b      	ldr	r3, [r3, #0]
 80203ca:	681b      	ldr	r3, [r3, #0]
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	d101      	bne.n	80203d4 <prvProcessTimerOrBlockTask+0x50>
 80203d0:	2301      	movs	r3, #1
 80203d2:	e000      	b.n	80203d6 <prvProcessTimerOrBlockTask+0x52>
 80203d4:	2300      	movs	r3, #0
 80203d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80203d8:	4b0f      	ldr	r3, [pc, #60]	; (8020418 <prvProcessTimerOrBlockTask+0x94>)
 80203da:	6818      	ldr	r0, [r3, #0]
 80203dc:	687a      	ldr	r2, [r7, #4]
 80203de:	68fb      	ldr	r3, [r7, #12]
 80203e0:	1ad3      	subs	r3, r2, r3
 80203e2:	683a      	ldr	r2, [r7, #0]
 80203e4:	4619      	mov	r1, r3
 80203e6:	f7fe fcc9 	bl	801ed7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80203ea:	f7ff f8e9 	bl	801f5c0 <xTaskResumeAll>
 80203ee:	4603      	mov	r3, r0
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	d10a      	bne.n	802040a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80203f4:	4b09      	ldr	r3, [pc, #36]	; (802041c <prvProcessTimerOrBlockTask+0x98>)
 80203f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80203fa:	601a      	str	r2, [r3, #0]
 80203fc:	f3bf 8f4f 	dsb	sy
 8020400:	f3bf 8f6f 	isb	sy
}
 8020404:	e001      	b.n	802040a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8020406:	f7ff f8db 	bl	801f5c0 <xTaskResumeAll>
}
 802040a:	bf00      	nop
 802040c:	3710      	adds	r7, #16
 802040e:	46bd      	mov	sp, r7
 8020410:	bd80      	pop	{r7, pc}
 8020412:	bf00      	nop
 8020414:	20000a18 	.word	0x20000a18
 8020418:	20000a1c 	.word	0x20000a1c
 802041c:	e000ed04 	.word	0xe000ed04

08020420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8020420:	b480      	push	{r7}
 8020422:	b085      	sub	sp, #20
 8020424:	af00      	add	r7, sp, #0
 8020426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8020428:	4b0e      	ldr	r3, [pc, #56]	; (8020464 <prvGetNextExpireTime+0x44>)
 802042a:	681b      	ldr	r3, [r3, #0]
 802042c:	681b      	ldr	r3, [r3, #0]
 802042e:	2b00      	cmp	r3, #0
 8020430:	d101      	bne.n	8020436 <prvGetNextExpireTime+0x16>
 8020432:	2201      	movs	r2, #1
 8020434:	e000      	b.n	8020438 <prvGetNextExpireTime+0x18>
 8020436:	2200      	movs	r2, #0
 8020438:	687b      	ldr	r3, [r7, #4]
 802043a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	681b      	ldr	r3, [r3, #0]
 8020440:	2b00      	cmp	r3, #0
 8020442:	d105      	bne.n	8020450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020444:	4b07      	ldr	r3, [pc, #28]	; (8020464 <prvGetNextExpireTime+0x44>)
 8020446:	681b      	ldr	r3, [r3, #0]
 8020448:	68db      	ldr	r3, [r3, #12]
 802044a:	681b      	ldr	r3, [r3, #0]
 802044c:	60fb      	str	r3, [r7, #12]
 802044e:	e001      	b.n	8020454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8020450:	2300      	movs	r3, #0
 8020452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8020454:	68fb      	ldr	r3, [r7, #12]
}
 8020456:	4618      	mov	r0, r3
 8020458:	3714      	adds	r7, #20
 802045a:	46bd      	mov	sp, r7
 802045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020460:	4770      	bx	lr
 8020462:	bf00      	nop
 8020464:	20000a14 	.word	0x20000a14

08020468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8020468:	b580      	push	{r7, lr}
 802046a:	b084      	sub	sp, #16
 802046c:	af00      	add	r7, sp, #0
 802046e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8020470:	f7ff f942 	bl	801f6f8 <xTaskGetTickCount>
 8020474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8020476:	4b0b      	ldr	r3, [pc, #44]	; (80204a4 <prvSampleTimeNow+0x3c>)
 8020478:	681b      	ldr	r3, [r3, #0]
 802047a:	68fa      	ldr	r2, [r7, #12]
 802047c:	429a      	cmp	r2, r3
 802047e:	d205      	bcs.n	802048c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8020480:	f000 f91a 	bl	80206b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	2201      	movs	r2, #1
 8020488:	601a      	str	r2, [r3, #0]
 802048a:	e002      	b.n	8020492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	2200      	movs	r2, #0
 8020490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8020492:	4a04      	ldr	r2, [pc, #16]	; (80204a4 <prvSampleTimeNow+0x3c>)
 8020494:	68fb      	ldr	r3, [r7, #12]
 8020496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8020498:	68fb      	ldr	r3, [r7, #12]
}
 802049a:	4618      	mov	r0, r3
 802049c:	3710      	adds	r7, #16
 802049e:	46bd      	mov	sp, r7
 80204a0:	bd80      	pop	{r7, pc}
 80204a2:	bf00      	nop
 80204a4:	20000a24 	.word	0x20000a24

080204a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80204a8:	b580      	push	{r7, lr}
 80204aa:	b086      	sub	sp, #24
 80204ac:	af00      	add	r7, sp, #0
 80204ae:	60f8      	str	r0, [r7, #12]
 80204b0:	60b9      	str	r1, [r7, #8]
 80204b2:	607a      	str	r2, [r7, #4]
 80204b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80204b6:	2300      	movs	r3, #0
 80204b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80204ba:	68fb      	ldr	r3, [r7, #12]
 80204bc:	68ba      	ldr	r2, [r7, #8]
 80204be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	68fa      	ldr	r2, [r7, #12]
 80204c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80204c6:	68ba      	ldr	r2, [r7, #8]
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	429a      	cmp	r2, r3
 80204cc:	d812      	bhi.n	80204f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80204ce:	687a      	ldr	r2, [r7, #4]
 80204d0:	683b      	ldr	r3, [r7, #0]
 80204d2:	1ad2      	subs	r2, r2, r3
 80204d4:	68fb      	ldr	r3, [r7, #12]
 80204d6:	699b      	ldr	r3, [r3, #24]
 80204d8:	429a      	cmp	r2, r3
 80204da:	d302      	bcc.n	80204e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80204dc:	2301      	movs	r3, #1
 80204de:	617b      	str	r3, [r7, #20]
 80204e0:	e01b      	b.n	802051a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80204e2:	4b10      	ldr	r3, [pc, #64]	; (8020524 <prvInsertTimerInActiveList+0x7c>)
 80204e4:	681a      	ldr	r2, [r3, #0]
 80204e6:	68fb      	ldr	r3, [r7, #12]
 80204e8:	3304      	adds	r3, #4
 80204ea:	4619      	mov	r1, r3
 80204ec:	4610      	mov	r0, r2
 80204ee:	f7fd fdcf 	bl	801e090 <vListInsert>
 80204f2:	e012      	b.n	802051a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80204f4:	687a      	ldr	r2, [r7, #4]
 80204f6:	683b      	ldr	r3, [r7, #0]
 80204f8:	429a      	cmp	r2, r3
 80204fa:	d206      	bcs.n	802050a <prvInsertTimerInActiveList+0x62>
 80204fc:	68ba      	ldr	r2, [r7, #8]
 80204fe:	683b      	ldr	r3, [r7, #0]
 8020500:	429a      	cmp	r2, r3
 8020502:	d302      	bcc.n	802050a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8020504:	2301      	movs	r3, #1
 8020506:	617b      	str	r3, [r7, #20]
 8020508:	e007      	b.n	802051a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802050a:	4b07      	ldr	r3, [pc, #28]	; (8020528 <prvInsertTimerInActiveList+0x80>)
 802050c:	681a      	ldr	r2, [r3, #0]
 802050e:	68fb      	ldr	r3, [r7, #12]
 8020510:	3304      	adds	r3, #4
 8020512:	4619      	mov	r1, r3
 8020514:	4610      	mov	r0, r2
 8020516:	f7fd fdbb 	bl	801e090 <vListInsert>
		}
	}

	return xProcessTimerNow;
 802051a:	697b      	ldr	r3, [r7, #20]
}
 802051c:	4618      	mov	r0, r3
 802051e:	3718      	adds	r7, #24
 8020520:	46bd      	mov	sp, r7
 8020522:	bd80      	pop	{r7, pc}
 8020524:	20000a18 	.word	0x20000a18
 8020528:	20000a14 	.word	0x20000a14

0802052c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802052c:	b580      	push	{r7, lr}
 802052e:	b08c      	sub	sp, #48	; 0x30
 8020530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8020532:	e0ae      	b.n	8020692 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8020534:	68bb      	ldr	r3, [r7, #8]
 8020536:	2b00      	cmp	r3, #0
 8020538:	f2c0 80aa 	blt.w	8020690 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802053c:	693b      	ldr	r3, [r7, #16]
 802053e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8020540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020542:	695b      	ldr	r3, [r3, #20]
 8020544:	2b00      	cmp	r3, #0
 8020546:	d004      	beq.n	8020552 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802054a:	3304      	adds	r3, #4
 802054c:	4618      	mov	r0, r3
 802054e:	f7fd fdd8 	bl	801e102 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8020552:	1d3b      	adds	r3, r7, #4
 8020554:	4618      	mov	r0, r3
 8020556:	f7ff ff87 	bl	8020468 <prvSampleTimeNow>
 802055a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 802055c:	68bb      	ldr	r3, [r7, #8]
 802055e:	2b09      	cmp	r3, #9
 8020560:	f200 8097 	bhi.w	8020692 <prvProcessReceivedCommands+0x166>
 8020564:	a201      	add	r2, pc, #4	; (adr r2, 802056c <prvProcessReceivedCommands+0x40>)
 8020566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802056a:	bf00      	nop
 802056c:	08020595 	.word	0x08020595
 8020570:	08020595 	.word	0x08020595
 8020574:	08020595 	.word	0x08020595
 8020578:	08020609 	.word	0x08020609
 802057c:	0802061d 	.word	0x0802061d
 8020580:	08020667 	.word	0x08020667
 8020584:	08020595 	.word	0x08020595
 8020588:	08020595 	.word	0x08020595
 802058c:	08020609 	.word	0x08020609
 8020590:	0802061d 	.word	0x0802061d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8020594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020596:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802059a:	f043 0301 	orr.w	r3, r3, #1
 802059e:	b2da      	uxtb	r2, r3
 80205a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80205a6:	68fa      	ldr	r2, [r7, #12]
 80205a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205aa:	699b      	ldr	r3, [r3, #24]
 80205ac:	18d1      	adds	r1, r2, r3
 80205ae:	68fb      	ldr	r3, [r7, #12]
 80205b0:	6a3a      	ldr	r2, [r7, #32]
 80205b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80205b4:	f7ff ff78 	bl	80204a8 <prvInsertTimerInActiveList>
 80205b8:	4603      	mov	r3, r0
 80205ba:	2b00      	cmp	r3, #0
 80205bc:	d069      	beq.n	8020692 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80205be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205c0:	6a1b      	ldr	r3, [r3, #32]
 80205c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80205c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80205c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80205cc:	f003 0304 	and.w	r3, r3, #4
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d05e      	beq.n	8020692 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80205d4:	68fa      	ldr	r2, [r7, #12]
 80205d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205d8:	699b      	ldr	r3, [r3, #24]
 80205da:	441a      	add	r2, r3
 80205dc:	2300      	movs	r3, #0
 80205de:	9300      	str	r3, [sp, #0]
 80205e0:	2300      	movs	r3, #0
 80205e2:	2100      	movs	r1, #0
 80205e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80205e6:	f7ff fe21 	bl	802022c <xTimerGenericCommand>
 80205ea:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80205ec:	69fb      	ldr	r3, [r7, #28]
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d14f      	bne.n	8020692 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80205f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80205f6:	f383 8811 	msr	BASEPRI, r3
 80205fa:	f3bf 8f6f 	isb	sy
 80205fe:	f3bf 8f4f 	dsb	sy
 8020602:	61bb      	str	r3, [r7, #24]
}
 8020604:	bf00      	nop
 8020606:	e7fe      	b.n	8020606 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8020608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802060a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802060e:	f023 0301 	bic.w	r3, r3, #1
 8020612:	b2da      	uxtb	r2, r3
 8020614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 802061a:	e03a      	b.n	8020692 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802061e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020622:	f043 0301 	orr.w	r3, r3, #1
 8020626:	b2da      	uxtb	r2, r3
 8020628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802062a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 802062e:	68fa      	ldr	r2, [r7, #12]
 8020630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020632:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8020634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020636:	699b      	ldr	r3, [r3, #24]
 8020638:	2b00      	cmp	r3, #0
 802063a:	d10a      	bne.n	8020652 <prvProcessReceivedCommands+0x126>
	__asm volatile
 802063c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020640:	f383 8811 	msr	BASEPRI, r3
 8020644:	f3bf 8f6f 	isb	sy
 8020648:	f3bf 8f4f 	dsb	sy
 802064c:	617b      	str	r3, [r7, #20]
}
 802064e:	bf00      	nop
 8020650:	e7fe      	b.n	8020650 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8020652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020654:	699a      	ldr	r2, [r3, #24]
 8020656:	6a3b      	ldr	r3, [r7, #32]
 8020658:	18d1      	adds	r1, r2, r3
 802065a:	6a3b      	ldr	r3, [r7, #32]
 802065c:	6a3a      	ldr	r2, [r7, #32]
 802065e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020660:	f7ff ff22 	bl	80204a8 <prvInsertTimerInActiveList>
					break;
 8020664:	e015      	b.n	8020692 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8020666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020668:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802066c:	f003 0302 	and.w	r3, r3, #2
 8020670:	2b00      	cmp	r3, #0
 8020672:	d103      	bne.n	802067c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8020674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020676:	f000 fbdb 	bl	8020e30 <vPortFree>
 802067a:	e00a      	b.n	8020692 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802067e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020682:	f023 0301 	bic.w	r3, r3, #1
 8020686:	b2da      	uxtb	r2, r3
 8020688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802068a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802068e:	e000      	b.n	8020692 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8020690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8020692:	4b08      	ldr	r3, [pc, #32]	; (80206b4 <prvProcessReceivedCommands+0x188>)
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	f107 0108 	add.w	r1, r7, #8
 802069a:	2200      	movs	r2, #0
 802069c:	4618      	mov	r0, r3
 802069e:	f7fe f82f 	bl	801e700 <xQueueReceive>
 80206a2:	4603      	mov	r3, r0
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	f47f af45 	bne.w	8020534 <prvProcessReceivedCommands+0x8>
	}
}
 80206aa:	bf00      	nop
 80206ac:	bf00      	nop
 80206ae:	3728      	adds	r7, #40	; 0x28
 80206b0:	46bd      	mov	sp, r7
 80206b2:	bd80      	pop	{r7, pc}
 80206b4:	20000a1c 	.word	0x20000a1c

080206b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80206b8:	b580      	push	{r7, lr}
 80206ba:	b088      	sub	sp, #32
 80206bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80206be:	e048      	b.n	8020752 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80206c0:	4b2d      	ldr	r3, [pc, #180]	; (8020778 <prvSwitchTimerLists+0xc0>)
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	68db      	ldr	r3, [r3, #12]
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80206ca:	4b2b      	ldr	r3, [pc, #172]	; (8020778 <prvSwitchTimerLists+0xc0>)
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	68db      	ldr	r3, [r3, #12]
 80206d0:	68db      	ldr	r3, [r3, #12]
 80206d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	3304      	adds	r3, #4
 80206d8:	4618      	mov	r0, r3
 80206da:	f7fd fd12 	bl	801e102 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80206de:	68fb      	ldr	r3, [r7, #12]
 80206e0:	6a1b      	ldr	r3, [r3, #32]
 80206e2:	68f8      	ldr	r0, [r7, #12]
 80206e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80206ec:	f003 0304 	and.w	r3, r3, #4
 80206f0:	2b00      	cmp	r3, #0
 80206f2:	d02e      	beq.n	8020752 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80206f4:	68fb      	ldr	r3, [r7, #12]
 80206f6:	699b      	ldr	r3, [r3, #24]
 80206f8:	693a      	ldr	r2, [r7, #16]
 80206fa:	4413      	add	r3, r2
 80206fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80206fe:	68ba      	ldr	r2, [r7, #8]
 8020700:	693b      	ldr	r3, [r7, #16]
 8020702:	429a      	cmp	r2, r3
 8020704:	d90e      	bls.n	8020724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8020706:	68fb      	ldr	r3, [r7, #12]
 8020708:	68ba      	ldr	r2, [r7, #8]
 802070a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802070c:	68fb      	ldr	r3, [r7, #12]
 802070e:	68fa      	ldr	r2, [r7, #12]
 8020710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8020712:	4b19      	ldr	r3, [pc, #100]	; (8020778 <prvSwitchTimerLists+0xc0>)
 8020714:	681a      	ldr	r2, [r3, #0]
 8020716:	68fb      	ldr	r3, [r7, #12]
 8020718:	3304      	adds	r3, #4
 802071a:	4619      	mov	r1, r3
 802071c:	4610      	mov	r0, r2
 802071e:	f7fd fcb7 	bl	801e090 <vListInsert>
 8020722:	e016      	b.n	8020752 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020724:	2300      	movs	r3, #0
 8020726:	9300      	str	r3, [sp, #0]
 8020728:	2300      	movs	r3, #0
 802072a:	693a      	ldr	r2, [r7, #16]
 802072c:	2100      	movs	r1, #0
 802072e:	68f8      	ldr	r0, [r7, #12]
 8020730:	f7ff fd7c 	bl	802022c <xTimerGenericCommand>
 8020734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	2b00      	cmp	r3, #0
 802073a:	d10a      	bne.n	8020752 <prvSwitchTimerLists+0x9a>
	__asm volatile
 802073c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020740:	f383 8811 	msr	BASEPRI, r3
 8020744:	f3bf 8f6f 	isb	sy
 8020748:	f3bf 8f4f 	dsb	sy
 802074c:	603b      	str	r3, [r7, #0]
}
 802074e:	bf00      	nop
 8020750:	e7fe      	b.n	8020750 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8020752:	4b09      	ldr	r3, [pc, #36]	; (8020778 <prvSwitchTimerLists+0xc0>)
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	2b00      	cmp	r3, #0
 802075a:	d1b1      	bne.n	80206c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802075c:	4b06      	ldr	r3, [pc, #24]	; (8020778 <prvSwitchTimerLists+0xc0>)
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8020762:	4b06      	ldr	r3, [pc, #24]	; (802077c <prvSwitchTimerLists+0xc4>)
 8020764:	681b      	ldr	r3, [r3, #0]
 8020766:	4a04      	ldr	r2, [pc, #16]	; (8020778 <prvSwitchTimerLists+0xc0>)
 8020768:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802076a:	4a04      	ldr	r2, [pc, #16]	; (802077c <prvSwitchTimerLists+0xc4>)
 802076c:	697b      	ldr	r3, [r7, #20]
 802076e:	6013      	str	r3, [r2, #0]
}
 8020770:	bf00      	nop
 8020772:	3718      	adds	r7, #24
 8020774:	46bd      	mov	sp, r7
 8020776:	bd80      	pop	{r7, pc}
 8020778:	20000a14 	.word	0x20000a14
 802077c:	20000a18 	.word	0x20000a18

08020780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8020780:	b580      	push	{r7, lr}
 8020782:	b082      	sub	sp, #8
 8020784:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8020786:	f000 f965 	bl	8020a54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802078a:	4b15      	ldr	r3, [pc, #84]	; (80207e0 <prvCheckForValidListAndQueue+0x60>)
 802078c:	681b      	ldr	r3, [r3, #0]
 802078e:	2b00      	cmp	r3, #0
 8020790:	d120      	bne.n	80207d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8020792:	4814      	ldr	r0, [pc, #80]	; (80207e4 <prvCheckForValidListAndQueue+0x64>)
 8020794:	f7fd fc2b 	bl	801dfee <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8020798:	4813      	ldr	r0, [pc, #76]	; (80207e8 <prvCheckForValidListAndQueue+0x68>)
 802079a:	f7fd fc28 	bl	801dfee <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802079e:	4b13      	ldr	r3, [pc, #76]	; (80207ec <prvCheckForValidListAndQueue+0x6c>)
 80207a0:	4a10      	ldr	r2, [pc, #64]	; (80207e4 <prvCheckForValidListAndQueue+0x64>)
 80207a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80207a4:	4b12      	ldr	r3, [pc, #72]	; (80207f0 <prvCheckForValidListAndQueue+0x70>)
 80207a6:	4a10      	ldr	r2, [pc, #64]	; (80207e8 <prvCheckForValidListAndQueue+0x68>)
 80207a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80207aa:	2300      	movs	r3, #0
 80207ac:	9300      	str	r3, [sp, #0]
 80207ae:	4b11      	ldr	r3, [pc, #68]	; (80207f4 <prvCheckForValidListAndQueue+0x74>)
 80207b0:	4a11      	ldr	r2, [pc, #68]	; (80207f8 <prvCheckForValidListAndQueue+0x78>)
 80207b2:	210c      	movs	r1, #12
 80207b4:	200a      	movs	r0, #10
 80207b6:	f7fd fd37 	bl	801e228 <xQueueGenericCreateStatic>
 80207ba:	4603      	mov	r3, r0
 80207bc:	4a08      	ldr	r2, [pc, #32]	; (80207e0 <prvCheckForValidListAndQueue+0x60>)
 80207be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80207c0:	4b07      	ldr	r3, [pc, #28]	; (80207e0 <prvCheckForValidListAndQueue+0x60>)
 80207c2:	681b      	ldr	r3, [r3, #0]
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	d005      	beq.n	80207d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80207c8:	4b05      	ldr	r3, [pc, #20]	; (80207e0 <prvCheckForValidListAndQueue+0x60>)
 80207ca:	681b      	ldr	r3, [r3, #0]
 80207cc:	490b      	ldr	r1, [pc, #44]	; (80207fc <prvCheckForValidListAndQueue+0x7c>)
 80207ce:	4618      	mov	r0, r3
 80207d0:	f7fe faaa 	bl	801ed28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80207d4:	f000 f96e 	bl	8020ab4 <vPortExitCritical>
}
 80207d8:	bf00      	nop
 80207da:	46bd      	mov	sp, r7
 80207dc:	bd80      	pop	{r7, pc}
 80207de:	bf00      	nop
 80207e0:	20000a1c 	.word	0x20000a1c
 80207e4:	200009ec 	.word	0x200009ec
 80207e8:	20000a00 	.word	0x20000a00
 80207ec:	20000a14 	.word	0x20000a14
 80207f0:	20000a18 	.word	0x20000a18
 80207f4:	20000aa0 	.word	0x20000aa0
 80207f8:	20000a28 	.word	0x20000a28
 80207fc:	08022fb8 	.word	0x08022fb8

08020800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8020800:	b480      	push	{r7}
 8020802:	b085      	sub	sp, #20
 8020804:	af00      	add	r7, sp, #0
 8020806:	60f8      	str	r0, [r7, #12]
 8020808:	60b9      	str	r1, [r7, #8]
 802080a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 802080c:	68fb      	ldr	r3, [r7, #12]
 802080e:	3b04      	subs	r3, #4
 8020810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8020812:	68fb      	ldr	r3, [r7, #12]
 8020814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8020818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	3b04      	subs	r3, #4
 802081e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8020820:	68bb      	ldr	r3, [r7, #8]
 8020822:	f023 0201 	bic.w	r2, r3, #1
 8020826:	68fb      	ldr	r3, [r7, #12]
 8020828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802082a:	68fb      	ldr	r3, [r7, #12]
 802082c:	3b04      	subs	r3, #4
 802082e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8020830:	4a0c      	ldr	r2, [pc, #48]	; (8020864 <pxPortInitialiseStack+0x64>)
 8020832:	68fb      	ldr	r3, [r7, #12]
 8020834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8020836:	68fb      	ldr	r3, [r7, #12]
 8020838:	3b14      	subs	r3, #20
 802083a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 802083c:	687a      	ldr	r2, [r7, #4]
 802083e:	68fb      	ldr	r3, [r7, #12]
 8020840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8020842:	68fb      	ldr	r3, [r7, #12]
 8020844:	3b04      	subs	r3, #4
 8020846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8020848:	68fb      	ldr	r3, [r7, #12]
 802084a:	f06f 0202 	mvn.w	r2, #2
 802084e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8020850:	68fb      	ldr	r3, [r7, #12]
 8020852:	3b20      	subs	r3, #32
 8020854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8020856:	68fb      	ldr	r3, [r7, #12]
}
 8020858:	4618      	mov	r0, r3
 802085a:	3714      	adds	r7, #20
 802085c:	46bd      	mov	sp, r7
 802085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020862:	4770      	bx	lr
 8020864:	08020869 	.word	0x08020869

08020868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8020868:	b480      	push	{r7}
 802086a:	b085      	sub	sp, #20
 802086c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802086e:	2300      	movs	r3, #0
 8020870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8020872:	4b12      	ldr	r3, [pc, #72]	; (80208bc <prvTaskExitError+0x54>)
 8020874:	681b      	ldr	r3, [r3, #0]
 8020876:	f1b3 3fff 	cmp.w	r3, #4294967295
 802087a:	d00a      	beq.n	8020892 <prvTaskExitError+0x2a>
	__asm volatile
 802087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020880:	f383 8811 	msr	BASEPRI, r3
 8020884:	f3bf 8f6f 	isb	sy
 8020888:	f3bf 8f4f 	dsb	sy
 802088c:	60fb      	str	r3, [r7, #12]
}
 802088e:	bf00      	nop
 8020890:	e7fe      	b.n	8020890 <prvTaskExitError+0x28>
	__asm volatile
 8020892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020896:	f383 8811 	msr	BASEPRI, r3
 802089a:	f3bf 8f6f 	isb	sy
 802089e:	f3bf 8f4f 	dsb	sy
 80208a2:	60bb      	str	r3, [r7, #8]
}
 80208a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80208a6:	bf00      	nop
 80208a8:	687b      	ldr	r3, [r7, #4]
 80208aa:	2b00      	cmp	r3, #0
 80208ac:	d0fc      	beq.n	80208a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80208ae:	bf00      	nop
 80208b0:	bf00      	nop
 80208b2:	3714      	adds	r7, #20
 80208b4:	46bd      	mov	sp, r7
 80208b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ba:	4770      	bx	lr
 80208bc:	20000138 	.word	0x20000138

080208c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80208c0:	4b07      	ldr	r3, [pc, #28]	; (80208e0 <pxCurrentTCBConst2>)
 80208c2:	6819      	ldr	r1, [r3, #0]
 80208c4:	6808      	ldr	r0, [r1, #0]
 80208c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208ca:	f380 8809 	msr	PSP, r0
 80208ce:	f3bf 8f6f 	isb	sy
 80208d2:	f04f 0000 	mov.w	r0, #0
 80208d6:	f380 8811 	msr	BASEPRI, r0
 80208da:	4770      	bx	lr
 80208dc:	f3af 8000 	nop.w

080208e0 <pxCurrentTCBConst2>:
 80208e0:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80208e4:	bf00      	nop
 80208e6:	bf00      	nop

080208e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80208e8:	4808      	ldr	r0, [pc, #32]	; (802090c <prvPortStartFirstTask+0x24>)
 80208ea:	6800      	ldr	r0, [r0, #0]
 80208ec:	6800      	ldr	r0, [r0, #0]
 80208ee:	f380 8808 	msr	MSP, r0
 80208f2:	f04f 0000 	mov.w	r0, #0
 80208f6:	f380 8814 	msr	CONTROL, r0
 80208fa:	b662      	cpsie	i
 80208fc:	b661      	cpsie	f
 80208fe:	f3bf 8f4f 	dsb	sy
 8020902:	f3bf 8f6f 	isb	sy
 8020906:	df00      	svc	0
 8020908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802090a:	bf00      	nop
 802090c:	e000ed08 	.word	0xe000ed08

08020910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8020910:	b580      	push	{r7, lr}
 8020912:	b086      	sub	sp, #24
 8020914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8020916:	4b46      	ldr	r3, [pc, #280]	; (8020a30 <xPortStartScheduler+0x120>)
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	4a46      	ldr	r2, [pc, #280]	; (8020a34 <xPortStartScheduler+0x124>)
 802091c:	4293      	cmp	r3, r2
 802091e:	d10a      	bne.n	8020936 <xPortStartScheduler+0x26>
	__asm volatile
 8020920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020924:	f383 8811 	msr	BASEPRI, r3
 8020928:	f3bf 8f6f 	isb	sy
 802092c:	f3bf 8f4f 	dsb	sy
 8020930:	613b      	str	r3, [r7, #16]
}
 8020932:	bf00      	nop
 8020934:	e7fe      	b.n	8020934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8020936:	4b3e      	ldr	r3, [pc, #248]	; (8020a30 <xPortStartScheduler+0x120>)
 8020938:	681b      	ldr	r3, [r3, #0]
 802093a:	4a3f      	ldr	r2, [pc, #252]	; (8020a38 <xPortStartScheduler+0x128>)
 802093c:	4293      	cmp	r3, r2
 802093e:	d10a      	bne.n	8020956 <xPortStartScheduler+0x46>
	__asm volatile
 8020940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020944:	f383 8811 	msr	BASEPRI, r3
 8020948:	f3bf 8f6f 	isb	sy
 802094c:	f3bf 8f4f 	dsb	sy
 8020950:	60fb      	str	r3, [r7, #12]
}
 8020952:	bf00      	nop
 8020954:	e7fe      	b.n	8020954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8020956:	4b39      	ldr	r3, [pc, #228]	; (8020a3c <xPortStartScheduler+0x12c>)
 8020958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802095a:	697b      	ldr	r3, [r7, #20]
 802095c:	781b      	ldrb	r3, [r3, #0]
 802095e:	b2db      	uxtb	r3, r3
 8020960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8020962:	697b      	ldr	r3, [r7, #20]
 8020964:	22ff      	movs	r2, #255	; 0xff
 8020966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8020968:	697b      	ldr	r3, [r7, #20]
 802096a:	781b      	ldrb	r3, [r3, #0]
 802096c:	b2db      	uxtb	r3, r3
 802096e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8020970:	78fb      	ldrb	r3, [r7, #3]
 8020972:	b2db      	uxtb	r3, r3
 8020974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8020978:	b2da      	uxtb	r2, r3
 802097a:	4b31      	ldr	r3, [pc, #196]	; (8020a40 <xPortStartScheduler+0x130>)
 802097c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802097e:	4b31      	ldr	r3, [pc, #196]	; (8020a44 <xPortStartScheduler+0x134>)
 8020980:	2207      	movs	r2, #7
 8020982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8020984:	e009      	b.n	802099a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8020986:	4b2f      	ldr	r3, [pc, #188]	; (8020a44 <xPortStartScheduler+0x134>)
 8020988:	681b      	ldr	r3, [r3, #0]
 802098a:	3b01      	subs	r3, #1
 802098c:	4a2d      	ldr	r2, [pc, #180]	; (8020a44 <xPortStartScheduler+0x134>)
 802098e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8020990:	78fb      	ldrb	r3, [r7, #3]
 8020992:	b2db      	uxtb	r3, r3
 8020994:	005b      	lsls	r3, r3, #1
 8020996:	b2db      	uxtb	r3, r3
 8020998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802099a:	78fb      	ldrb	r3, [r7, #3]
 802099c:	b2db      	uxtb	r3, r3
 802099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80209a2:	2b80      	cmp	r3, #128	; 0x80
 80209a4:	d0ef      	beq.n	8020986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80209a6:	4b27      	ldr	r3, [pc, #156]	; (8020a44 <xPortStartScheduler+0x134>)
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	f1c3 0307 	rsb	r3, r3, #7
 80209ae:	2b04      	cmp	r3, #4
 80209b0:	d00a      	beq.n	80209c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80209b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80209b6:	f383 8811 	msr	BASEPRI, r3
 80209ba:	f3bf 8f6f 	isb	sy
 80209be:	f3bf 8f4f 	dsb	sy
 80209c2:	60bb      	str	r3, [r7, #8]
}
 80209c4:	bf00      	nop
 80209c6:	e7fe      	b.n	80209c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80209c8:	4b1e      	ldr	r3, [pc, #120]	; (8020a44 <xPortStartScheduler+0x134>)
 80209ca:	681b      	ldr	r3, [r3, #0]
 80209cc:	021b      	lsls	r3, r3, #8
 80209ce:	4a1d      	ldr	r2, [pc, #116]	; (8020a44 <xPortStartScheduler+0x134>)
 80209d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80209d2:	4b1c      	ldr	r3, [pc, #112]	; (8020a44 <xPortStartScheduler+0x134>)
 80209d4:	681b      	ldr	r3, [r3, #0]
 80209d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80209da:	4a1a      	ldr	r2, [pc, #104]	; (8020a44 <xPortStartScheduler+0x134>)
 80209dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80209de:	687b      	ldr	r3, [r7, #4]
 80209e0:	b2da      	uxtb	r2, r3
 80209e2:	697b      	ldr	r3, [r7, #20]
 80209e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80209e6:	4b18      	ldr	r3, [pc, #96]	; (8020a48 <xPortStartScheduler+0x138>)
 80209e8:	681b      	ldr	r3, [r3, #0]
 80209ea:	4a17      	ldr	r2, [pc, #92]	; (8020a48 <xPortStartScheduler+0x138>)
 80209ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80209f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80209f2:	4b15      	ldr	r3, [pc, #84]	; (8020a48 <xPortStartScheduler+0x138>)
 80209f4:	681b      	ldr	r3, [r3, #0]
 80209f6:	4a14      	ldr	r2, [pc, #80]	; (8020a48 <xPortStartScheduler+0x138>)
 80209f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80209fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80209fe:	f000 f8dd 	bl	8020bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8020a02:	4b12      	ldr	r3, [pc, #72]	; (8020a4c <xPortStartScheduler+0x13c>)
 8020a04:	2200      	movs	r2, #0
 8020a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8020a08:	f000 f8fc 	bl	8020c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8020a0c:	4b10      	ldr	r3, [pc, #64]	; (8020a50 <xPortStartScheduler+0x140>)
 8020a0e:	681b      	ldr	r3, [r3, #0]
 8020a10:	4a0f      	ldr	r2, [pc, #60]	; (8020a50 <xPortStartScheduler+0x140>)
 8020a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8020a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8020a18:	f7ff ff66 	bl	80208e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8020a1c:	f7fe ff34 	bl	801f888 <vTaskSwitchContext>
	prvTaskExitError();
 8020a20:	f7ff ff22 	bl	8020868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8020a24:	2300      	movs	r3, #0
}
 8020a26:	4618      	mov	r0, r3
 8020a28:	3718      	adds	r7, #24
 8020a2a:	46bd      	mov	sp, r7
 8020a2c:	bd80      	pop	{r7, pc}
 8020a2e:	bf00      	nop
 8020a30:	e000ed00 	.word	0xe000ed00
 8020a34:	410fc271 	.word	0x410fc271
 8020a38:	410fc270 	.word	0x410fc270
 8020a3c:	e000e400 	.word	0xe000e400
 8020a40:	20000ae8 	.word	0x20000ae8
 8020a44:	20000aec 	.word	0x20000aec
 8020a48:	e000ed20 	.word	0xe000ed20
 8020a4c:	20000138 	.word	0x20000138
 8020a50:	e000ef34 	.word	0xe000ef34

08020a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8020a54:	b480      	push	{r7}
 8020a56:	b083      	sub	sp, #12
 8020a58:	af00      	add	r7, sp, #0
	__asm volatile
 8020a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a5e:	f383 8811 	msr	BASEPRI, r3
 8020a62:	f3bf 8f6f 	isb	sy
 8020a66:	f3bf 8f4f 	dsb	sy
 8020a6a:	607b      	str	r3, [r7, #4]
}
 8020a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8020a6e:	4b0f      	ldr	r3, [pc, #60]	; (8020aac <vPortEnterCritical+0x58>)
 8020a70:	681b      	ldr	r3, [r3, #0]
 8020a72:	3301      	adds	r3, #1
 8020a74:	4a0d      	ldr	r2, [pc, #52]	; (8020aac <vPortEnterCritical+0x58>)
 8020a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8020a78:	4b0c      	ldr	r3, [pc, #48]	; (8020aac <vPortEnterCritical+0x58>)
 8020a7a:	681b      	ldr	r3, [r3, #0]
 8020a7c:	2b01      	cmp	r3, #1
 8020a7e:	d10f      	bne.n	8020aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8020a80:	4b0b      	ldr	r3, [pc, #44]	; (8020ab0 <vPortEnterCritical+0x5c>)
 8020a82:	681b      	ldr	r3, [r3, #0]
 8020a84:	b2db      	uxtb	r3, r3
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	d00a      	beq.n	8020aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8020a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a8e:	f383 8811 	msr	BASEPRI, r3
 8020a92:	f3bf 8f6f 	isb	sy
 8020a96:	f3bf 8f4f 	dsb	sy
 8020a9a:	603b      	str	r3, [r7, #0]
}
 8020a9c:	bf00      	nop
 8020a9e:	e7fe      	b.n	8020a9e <vPortEnterCritical+0x4a>
	}
}
 8020aa0:	bf00      	nop
 8020aa2:	370c      	adds	r7, #12
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aaa:	4770      	bx	lr
 8020aac:	20000138 	.word	0x20000138
 8020ab0:	e000ed04 	.word	0xe000ed04

08020ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8020ab4:	b480      	push	{r7}
 8020ab6:	b083      	sub	sp, #12
 8020ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8020aba:	4b12      	ldr	r3, [pc, #72]	; (8020b04 <vPortExitCritical+0x50>)
 8020abc:	681b      	ldr	r3, [r3, #0]
 8020abe:	2b00      	cmp	r3, #0
 8020ac0:	d10a      	bne.n	8020ad8 <vPortExitCritical+0x24>
	__asm volatile
 8020ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ac6:	f383 8811 	msr	BASEPRI, r3
 8020aca:	f3bf 8f6f 	isb	sy
 8020ace:	f3bf 8f4f 	dsb	sy
 8020ad2:	607b      	str	r3, [r7, #4]
}
 8020ad4:	bf00      	nop
 8020ad6:	e7fe      	b.n	8020ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8020ad8:	4b0a      	ldr	r3, [pc, #40]	; (8020b04 <vPortExitCritical+0x50>)
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	3b01      	subs	r3, #1
 8020ade:	4a09      	ldr	r2, [pc, #36]	; (8020b04 <vPortExitCritical+0x50>)
 8020ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8020ae2:	4b08      	ldr	r3, [pc, #32]	; (8020b04 <vPortExitCritical+0x50>)
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d105      	bne.n	8020af6 <vPortExitCritical+0x42>
 8020aea:	2300      	movs	r3, #0
 8020aec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8020aee:	683b      	ldr	r3, [r7, #0]
 8020af0:	f383 8811 	msr	BASEPRI, r3
}
 8020af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8020af6:	bf00      	nop
 8020af8:	370c      	adds	r7, #12
 8020afa:	46bd      	mov	sp, r7
 8020afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b00:	4770      	bx	lr
 8020b02:	bf00      	nop
 8020b04:	20000138 	.word	0x20000138
	...

08020b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8020b10:	f3ef 8009 	mrs	r0, PSP
 8020b14:	f3bf 8f6f 	isb	sy
 8020b18:	4b15      	ldr	r3, [pc, #84]	; (8020b70 <pxCurrentTCBConst>)
 8020b1a:	681a      	ldr	r2, [r3, #0]
 8020b1c:	f01e 0f10 	tst.w	lr, #16
 8020b20:	bf08      	it	eq
 8020b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8020b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b2a:	6010      	str	r0, [r2, #0]
 8020b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8020b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8020b34:	f380 8811 	msr	BASEPRI, r0
 8020b38:	f3bf 8f4f 	dsb	sy
 8020b3c:	f3bf 8f6f 	isb	sy
 8020b40:	f7fe fea2 	bl	801f888 <vTaskSwitchContext>
 8020b44:	f04f 0000 	mov.w	r0, #0
 8020b48:	f380 8811 	msr	BASEPRI, r0
 8020b4c:	bc09      	pop	{r0, r3}
 8020b4e:	6819      	ldr	r1, [r3, #0]
 8020b50:	6808      	ldr	r0, [r1, #0]
 8020b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b56:	f01e 0f10 	tst.w	lr, #16
 8020b5a:	bf08      	it	eq
 8020b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8020b60:	f380 8809 	msr	PSP, r0
 8020b64:	f3bf 8f6f 	isb	sy
 8020b68:	4770      	bx	lr
 8020b6a:	bf00      	nop
 8020b6c:	f3af 8000 	nop.w

08020b70 <pxCurrentTCBConst>:
 8020b70:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8020b74:	bf00      	nop
 8020b76:	bf00      	nop

08020b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8020b78:	b580      	push	{r7, lr}
 8020b7a:	b082      	sub	sp, #8
 8020b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8020b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b82:	f383 8811 	msr	BASEPRI, r3
 8020b86:	f3bf 8f6f 	isb	sy
 8020b8a:	f3bf 8f4f 	dsb	sy
 8020b8e:	607b      	str	r3, [r7, #4]
}
 8020b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8020b92:	f7fe fdc1 	bl	801f718 <xTaskIncrementTick>
 8020b96:	4603      	mov	r3, r0
 8020b98:	2b00      	cmp	r3, #0
 8020b9a:	d003      	beq.n	8020ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8020b9c:	4b06      	ldr	r3, [pc, #24]	; (8020bb8 <SysTick_Handler+0x40>)
 8020b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020ba2:	601a      	str	r2, [r3, #0]
 8020ba4:	2300      	movs	r3, #0
 8020ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8020ba8:	683b      	ldr	r3, [r7, #0]
 8020baa:	f383 8811 	msr	BASEPRI, r3
}
 8020bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8020bb0:	bf00      	nop
 8020bb2:	3708      	adds	r7, #8
 8020bb4:	46bd      	mov	sp, r7
 8020bb6:	bd80      	pop	{r7, pc}
 8020bb8:	e000ed04 	.word	0xe000ed04

08020bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8020bbc:	b480      	push	{r7}
 8020bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8020bc0:	4b0b      	ldr	r3, [pc, #44]	; (8020bf0 <vPortSetupTimerInterrupt+0x34>)
 8020bc2:	2200      	movs	r2, #0
 8020bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8020bc6:	4b0b      	ldr	r3, [pc, #44]	; (8020bf4 <vPortSetupTimerInterrupt+0x38>)
 8020bc8:	2200      	movs	r2, #0
 8020bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8020bcc:	4b0a      	ldr	r3, [pc, #40]	; (8020bf8 <vPortSetupTimerInterrupt+0x3c>)
 8020bce:	681b      	ldr	r3, [r3, #0]
 8020bd0:	4a0a      	ldr	r2, [pc, #40]	; (8020bfc <vPortSetupTimerInterrupt+0x40>)
 8020bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8020bd6:	099b      	lsrs	r3, r3, #6
 8020bd8:	4a09      	ldr	r2, [pc, #36]	; (8020c00 <vPortSetupTimerInterrupt+0x44>)
 8020bda:	3b01      	subs	r3, #1
 8020bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8020bde:	4b04      	ldr	r3, [pc, #16]	; (8020bf0 <vPortSetupTimerInterrupt+0x34>)
 8020be0:	2207      	movs	r2, #7
 8020be2:	601a      	str	r2, [r3, #0]
}
 8020be4:	bf00      	nop
 8020be6:	46bd      	mov	sp, r7
 8020be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bec:	4770      	bx	lr
 8020bee:	bf00      	nop
 8020bf0:	e000e010 	.word	0xe000e010
 8020bf4:	e000e018 	.word	0xe000e018
 8020bf8:	2000001c 	.word	0x2000001c
 8020bfc:	10624dd3 	.word	0x10624dd3
 8020c00:	e000e014 	.word	0xe000e014

08020c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8020c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8020c14 <vPortEnableVFP+0x10>
 8020c08:	6801      	ldr	r1, [r0, #0]
 8020c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020c0e:	6001      	str	r1, [r0, #0]
 8020c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8020c12:	bf00      	nop
 8020c14:	e000ed88 	.word	0xe000ed88

08020c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8020c18:	b480      	push	{r7}
 8020c1a:	b085      	sub	sp, #20
 8020c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8020c1e:	f3ef 8305 	mrs	r3, IPSR
 8020c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8020c24:	68fb      	ldr	r3, [r7, #12]
 8020c26:	2b0f      	cmp	r3, #15
 8020c28:	d914      	bls.n	8020c54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8020c2a:	4a17      	ldr	r2, [pc, #92]	; (8020c88 <vPortValidateInterruptPriority+0x70>)
 8020c2c:	68fb      	ldr	r3, [r7, #12]
 8020c2e:	4413      	add	r3, r2
 8020c30:	781b      	ldrb	r3, [r3, #0]
 8020c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8020c34:	4b15      	ldr	r3, [pc, #84]	; (8020c8c <vPortValidateInterruptPriority+0x74>)
 8020c36:	781b      	ldrb	r3, [r3, #0]
 8020c38:	7afa      	ldrb	r2, [r7, #11]
 8020c3a:	429a      	cmp	r2, r3
 8020c3c:	d20a      	bcs.n	8020c54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8020c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c42:	f383 8811 	msr	BASEPRI, r3
 8020c46:	f3bf 8f6f 	isb	sy
 8020c4a:	f3bf 8f4f 	dsb	sy
 8020c4e:	607b      	str	r3, [r7, #4]
}
 8020c50:	bf00      	nop
 8020c52:	e7fe      	b.n	8020c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8020c54:	4b0e      	ldr	r3, [pc, #56]	; (8020c90 <vPortValidateInterruptPriority+0x78>)
 8020c56:	681b      	ldr	r3, [r3, #0]
 8020c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8020c5c:	4b0d      	ldr	r3, [pc, #52]	; (8020c94 <vPortValidateInterruptPriority+0x7c>)
 8020c5e:	681b      	ldr	r3, [r3, #0]
 8020c60:	429a      	cmp	r2, r3
 8020c62:	d90a      	bls.n	8020c7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8020c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c68:	f383 8811 	msr	BASEPRI, r3
 8020c6c:	f3bf 8f6f 	isb	sy
 8020c70:	f3bf 8f4f 	dsb	sy
 8020c74:	603b      	str	r3, [r7, #0]
}
 8020c76:	bf00      	nop
 8020c78:	e7fe      	b.n	8020c78 <vPortValidateInterruptPriority+0x60>
	}
 8020c7a:	bf00      	nop
 8020c7c:	3714      	adds	r7, #20
 8020c7e:	46bd      	mov	sp, r7
 8020c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c84:	4770      	bx	lr
 8020c86:	bf00      	nop
 8020c88:	e000e3f0 	.word	0xe000e3f0
 8020c8c:	20000ae8 	.word	0x20000ae8
 8020c90:	e000ed0c 	.word	0xe000ed0c
 8020c94:	20000aec 	.word	0x20000aec

08020c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8020c98:	b580      	push	{r7, lr}
 8020c9a:	b08a      	sub	sp, #40	; 0x28
 8020c9c:	af00      	add	r7, sp, #0
 8020c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8020ca0:	2300      	movs	r3, #0
 8020ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8020ca4:	f7fe fc7e 	bl	801f5a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8020ca8:	4b5b      	ldr	r3, [pc, #364]	; (8020e18 <pvPortMalloc+0x180>)
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d101      	bne.n	8020cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8020cb0:	f000 f92c 	bl	8020f0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8020cb4:	4b59      	ldr	r3, [pc, #356]	; (8020e1c <pvPortMalloc+0x184>)
 8020cb6:	681a      	ldr	r2, [r3, #0]
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	4013      	ands	r3, r2
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	f040 8093 	bne.w	8020de8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	d01d      	beq.n	8020d04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8020cc8:	2208      	movs	r2, #8
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	4413      	add	r3, r2
 8020cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	f003 0307 	and.w	r3, r3, #7
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	d014      	beq.n	8020d04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	f023 0307 	bic.w	r3, r3, #7
 8020ce0:	3308      	adds	r3, #8
 8020ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020ce4:	687b      	ldr	r3, [r7, #4]
 8020ce6:	f003 0307 	and.w	r3, r3, #7
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	d00a      	beq.n	8020d04 <pvPortMalloc+0x6c>
	__asm volatile
 8020cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020cf2:	f383 8811 	msr	BASEPRI, r3
 8020cf6:	f3bf 8f6f 	isb	sy
 8020cfa:	f3bf 8f4f 	dsb	sy
 8020cfe:	617b      	str	r3, [r7, #20]
}
 8020d00:	bf00      	nop
 8020d02:	e7fe      	b.n	8020d02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8020d04:	687b      	ldr	r3, [r7, #4]
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d06e      	beq.n	8020de8 <pvPortMalloc+0x150>
 8020d0a:	4b45      	ldr	r3, [pc, #276]	; (8020e20 <pvPortMalloc+0x188>)
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	687a      	ldr	r2, [r7, #4]
 8020d10:	429a      	cmp	r2, r3
 8020d12:	d869      	bhi.n	8020de8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8020d14:	4b43      	ldr	r3, [pc, #268]	; (8020e24 <pvPortMalloc+0x18c>)
 8020d16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8020d18:	4b42      	ldr	r3, [pc, #264]	; (8020e24 <pvPortMalloc+0x18c>)
 8020d1a:	681b      	ldr	r3, [r3, #0]
 8020d1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8020d1e:	e004      	b.n	8020d2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8020d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8020d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d26:	681b      	ldr	r3, [r3, #0]
 8020d28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8020d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d2c:	685b      	ldr	r3, [r3, #4]
 8020d2e:	687a      	ldr	r2, [r7, #4]
 8020d30:	429a      	cmp	r2, r3
 8020d32:	d903      	bls.n	8020d3c <pvPortMalloc+0xa4>
 8020d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d36:	681b      	ldr	r3, [r3, #0]
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d1f1      	bne.n	8020d20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8020d3c:	4b36      	ldr	r3, [pc, #216]	; (8020e18 <pvPortMalloc+0x180>)
 8020d3e:	681b      	ldr	r3, [r3, #0]
 8020d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020d42:	429a      	cmp	r2, r3
 8020d44:	d050      	beq.n	8020de8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8020d46:	6a3b      	ldr	r3, [r7, #32]
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	2208      	movs	r2, #8
 8020d4c:	4413      	add	r3, r2
 8020d4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8020d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d52:	681a      	ldr	r2, [r3, #0]
 8020d54:	6a3b      	ldr	r3, [r7, #32]
 8020d56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8020d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d5a:	685a      	ldr	r2, [r3, #4]
 8020d5c:	687b      	ldr	r3, [r7, #4]
 8020d5e:	1ad2      	subs	r2, r2, r3
 8020d60:	2308      	movs	r3, #8
 8020d62:	005b      	lsls	r3, r3, #1
 8020d64:	429a      	cmp	r2, r3
 8020d66:	d91f      	bls.n	8020da8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8020d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020d6a:	687b      	ldr	r3, [r7, #4]
 8020d6c:	4413      	add	r3, r2
 8020d6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020d70:	69bb      	ldr	r3, [r7, #24]
 8020d72:	f003 0307 	and.w	r3, r3, #7
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d00a      	beq.n	8020d90 <pvPortMalloc+0xf8>
	__asm volatile
 8020d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d7e:	f383 8811 	msr	BASEPRI, r3
 8020d82:	f3bf 8f6f 	isb	sy
 8020d86:	f3bf 8f4f 	dsb	sy
 8020d8a:	613b      	str	r3, [r7, #16]
}
 8020d8c:	bf00      	nop
 8020d8e:	e7fe      	b.n	8020d8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8020d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d92:	685a      	ldr	r2, [r3, #4]
 8020d94:	687b      	ldr	r3, [r7, #4]
 8020d96:	1ad2      	subs	r2, r2, r3
 8020d98:	69bb      	ldr	r3, [r7, #24]
 8020d9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8020d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d9e:	687a      	ldr	r2, [r7, #4]
 8020da0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8020da2:	69b8      	ldr	r0, [r7, #24]
 8020da4:	f000 f914 	bl	8020fd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8020da8:	4b1d      	ldr	r3, [pc, #116]	; (8020e20 <pvPortMalloc+0x188>)
 8020daa:	681a      	ldr	r2, [r3, #0]
 8020dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dae:	685b      	ldr	r3, [r3, #4]
 8020db0:	1ad3      	subs	r3, r2, r3
 8020db2:	4a1b      	ldr	r2, [pc, #108]	; (8020e20 <pvPortMalloc+0x188>)
 8020db4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8020db6:	4b1a      	ldr	r3, [pc, #104]	; (8020e20 <pvPortMalloc+0x188>)
 8020db8:	681a      	ldr	r2, [r3, #0]
 8020dba:	4b1b      	ldr	r3, [pc, #108]	; (8020e28 <pvPortMalloc+0x190>)
 8020dbc:	681b      	ldr	r3, [r3, #0]
 8020dbe:	429a      	cmp	r2, r3
 8020dc0:	d203      	bcs.n	8020dca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8020dc2:	4b17      	ldr	r3, [pc, #92]	; (8020e20 <pvPortMalloc+0x188>)
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	4a18      	ldr	r2, [pc, #96]	; (8020e28 <pvPortMalloc+0x190>)
 8020dc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8020dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dcc:	685a      	ldr	r2, [r3, #4]
 8020dce:	4b13      	ldr	r3, [pc, #76]	; (8020e1c <pvPortMalloc+0x184>)
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	431a      	orrs	r2, r3
 8020dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8020dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dda:	2200      	movs	r2, #0
 8020ddc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8020dde:	4b13      	ldr	r3, [pc, #76]	; (8020e2c <pvPortMalloc+0x194>)
 8020de0:	681b      	ldr	r3, [r3, #0]
 8020de2:	3301      	adds	r3, #1
 8020de4:	4a11      	ldr	r2, [pc, #68]	; (8020e2c <pvPortMalloc+0x194>)
 8020de6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8020de8:	f7fe fbea 	bl	801f5c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8020dec:	69fb      	ldr	r3, [r7, #28]
 8020dee:	f003 0307 	and.w	r3, r3, #7
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	d00a      	beq.n	8020e0c <pvPortMalloc+0x174>
	__asm volatile
 8020df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020dfa:	f383 8811 	msr	BASEPRI, r3
 8020dfe:	f3bf 8f6f 	isb	sy
 8020e02:	f3bf 8f4f 	dsb	sy
 8020e06:	60fb      	str	r3, [r7, #12]
}
 8020e08:	bf00      	nop
 8020e0a:	e7fe      	b.n	8020e0a <pvPortMalloc+0x172>
	return pvReturn;
 8020e0c:	69fb      	ldr	r3, [r7, #28]
}
 8020e0e:	4618      	mov	r0, r3
 8020e10:	3728      	adds	r7, #40	; 0x28
 8020e12:	46bd      	mov	sp, r7
 8020e14:	bd80      	pop	{r7, pc}
 8020e16:	bf00      	nop
 8020e18:	200136f8 	.word	0x200136f8
 8020e1c:	2001370c 	.word	0x2001370c
 8020e20:	200136fc 	.word	0x200136fc
 8020e24:	200136f0 	.word	0x200136f0
 8020e28:	20013700 	.word	0x20013700
 8020e2c:	20013704 	.word	0x20013704

08020e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8020e30:	b580      	push	{r7, lr}
 8020e32:	b086      	sub	sp, #24
 8020e34:	af00      	add	r7, sp, #0
 8020e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d04d      	beq.n	8020ede <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8020e42:	2308      	movs	r3, #8
 8020e44:	425b      	negs	r3, r3
 8020e46:	697a      	ldr	r2, [r7, #20]
 8020e48:	4413      	add	r3, r2
 8020e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8020e4c:	697b      	ldr	r3, [r7, #20]
 8020e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8020e50:	693b      	ldr	r3, [r7, #16]
 8020e52:	685a      	ldr	r2, [r3, #4]
 8020e54:	4b24      	ldr	r3, [pc, #144]	; (8020ee8 <vPortFree+0xb8>)
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	4013      	ands	r3, r2
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	d10a      	bne.n	8020e74 <vPortFree+0x44>
	__asm volatile
 8020e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e62:	f383 8811 	msr	BASEPRI, r3
 8020e66:	f3bf 8f6f 	isb	sy
 8020e6a:	f3bf 8f4f 	dsb	sy
 8020e6e:	60fb      	str	r3, [r7, #12]
}
 8020e70:	bf00      	nop
 8020e72:	e7fe      	b.n	8020e72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8020e74:	693b      	ldr	r3, [r7, #16]
 8020e76:	681b      	ldr	r3, [r3, #0]
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d00a      	beq.n	8020e92 <vPortFree+0x62>
	__asm volatile
 8020e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e80:	f383 8811 	msr	BASEPRI, r3
 8020e84:	f3bf 8f6f 	isb	sy
 8020e88:	f3bf 8f4f 	dsb	sy
 8020e8c:	60bb      	str	r3, [r7, #8]
}
 8020e8e:	bf00      	nop
 8020e90:	e7fe      	b.n	8020e90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8020e92:	693b      	ldr	r3, [r7, #16]
 8020e94:	685a      	ldr	r2, [r3, #4]
 8020e96:	4b14      	ldr	r3, [pc, #80]	; (8020ee8 <vPortFree+0xb8>)
 8020e98:	681b      	ldr	r3, [r3, #0]
 8020e9a:	4013      	ands	r3, r2
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	d01e      	beq.n	8020ede <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8020ea0:	693b      	ldr	r3, [r7, #16]
 8020ea2:	681b      	ldr	r3, [r3, #0]
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d11a      	bne.n	8020ede <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8020ea8:	693b      	ldr	r3, [r7, #16]
 8020eaa:	685a      	ldr	r2, [r3, #4]
 8020eac:	4b0e      	ldr	r3, [pc, #56]	; (8020ee8 <vPortFree+0xb8>)
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	43db      	mvns	r3, r3
 8020eb2:	401a      	ands	r2, r3
 8020eb4:	693b      	ldr	r3, [r7, #16]
 8020eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8020eb8:	f7fe fb74 	bl	801f5a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8020ebc:	693b      	ldr	r3, [r7, #16]
 8020ebe:	685a      	ldr	r2, [r3, #4]
 8020ec0:	4b0a      	ldr	r3, [pc, #40]	; (8020eec <vPortFree+0xbc>)
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	4413      	add	r3, r2
 8020ec6:	4a09      	ldr	r2, [pc, #36]	; (8020eec <vPortFree+0xbc>)
 8020ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8020eca:	6938      	ldr	r0, [r7, #16]
 8020ecc:	f000 f880 	bl	8020fd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8020ed0:	4b07      	ldr	r3, [pc, #28]	; (8020ef0 <vPortFree+0xc0>)
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	3301      	adds	r3, #1
 8020ed6:	4a06      	ldr	r2, [pc, #24]	; (8020ef0 <vPortFree+0xc0>)
 8020ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8020eda:	f7fe fb71 	bl	801f5c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8020ede:	bf00      	nop
 8020ee0:	3718      	adds	r7, #24
 8020ee2:	46bd      	mov	sp, r7
 8020ee4:	bd80      	pop	{r7, pc}
 8020ee6:	bf00      	nop
 8020ee8:	2001370c 	.word	0x2001370c
 8020eec:	200136fc 	.word	0x200136fc
 8020ef0:	20013708 	.word	0x20013708

08020ef4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8020ef4:	b480      	push	{r7}
 8020ef6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8020ef8:	4b03      	ldr	r3, [pc, #12]	; (8020f08 <xPortGetFreeHeapSize+0x14>)
 8020efa:	681b      	ldr	r3, [r3, #0]
}
 8020efc:	4618      	mov	r0, r3
 8020efe:	46bd      	mov	sp, r7
 8020f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f04:	4770      	bx	lr
 8020f06:	bf00      	nop
 8020f08:	200136fc 	.word	0x200136fc

08020f0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8020f0c:	b480      	push	{r7}
 8020f0e:	b085      	sub	sp, #20
 8020f10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8020f12:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8020f16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8020f18:	4b27      	ldr	r3, [pc, #156]	; (8020fb8 <prvHeapInit+0xac>)
 8020f1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8020f1c:	68fb      	ldr	r3, [r7, #12]
 8020f1e:	f003 0307 	and.w	r3, r3, #7
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d00c      	beq.n	8020f40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8020f26:	68fb      	ldr	r3, [r7, #12]
 8020f28:	3307      	adds	r3, #7
 8020f2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8020f2c:	68fb      	ldr	r3, [r7, #12]
 8020f2e:	f023 0307 	bic.w	r3, r3, #7
 8020f32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8020f34:	68ba      	ldr	r2, [r7, #8]
 8020f36:	68fb      	ldr	r3, [r7, #12]
 8020f38:	1ad3      	subs	r3, r2, r3
 8020f3a:	4a1f      	ldr	r2, [pc, #124]	; (8020fb8 <prvHeapInit+0xac>)
 8020f3c:	4413      	add	r3, r2
 8020f3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8020f40:	68fb      	ldr	r3, [r7, #12]
 8020f42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8020f44:	4a1d      	ldr	r2, [pc, #116]	; (8020fbc <prvHeapInit+0xb0>)
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8020f4a:	4b1c      	ldr	r3, [pc, #112]	; (8020fbc <prvHeapInit+0xb0>)
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8020f50:	687b      	ldr	r3, [r7, #4]
 8020f52:	68ba      	ldr	r2, [r7, #8]
 8020f54:	4413      	add	r3, r2
 8020f56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8020f58:	2208      	movs	r2, #8
 8020f5a:	68fb      	ldr	r3, [r7, #12]
 8020f5c:	1a9b      	subs	r3, r3, r2
 8020f5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8020f60:	68fb      	ldr	r3, [r7, #12]
 8020f62:	f023 0307 	bic.w	r3, r3, #7
 8020f66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8020f68:	68fb      	ldr	r3, [r7, #12]
 8020f6a:	4a15      	ldr	r2, [pc, #84]	; (8020fc0 <prvHeapInit+0xb4>)
 8020f6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8020f6e:	4b14      	ldr	r3, [pc, #80]	; (8020fc0 <prvHeapInit+0xb4>)
 8020f70:	681b      	ldr	r3, [r3, #0]
 8020f72:	2200      	movs	r2, #0
 8020f74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8020f76:	4b12      	ldr	r3, [pc, #72]	; (8020fc0 <prvHeapInit+0xb4>)
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	2200      	movs	r2, #0
 8020f7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8020f7e:	687b      	ldr	r3, [r7, #4]
 8020f80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8020f82:	683b      	ldr	r3, [r7, #0]
 8020f84:	68fa      	ldr	r2, [r7, #12]
 8020f86:	1ad2      	subs	r2, r2, r3
 8020f88:	683b      	ldr	r3, [r7, #0]
 8020f8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8020f8c:	4b0c      	ldr	r3, [pc, #48]	; (8020fc0 <prvHeapInit+0xb4>)
 8020f8e:	681a      	ldr	r2, [r3, #0]
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8020f94:	683b      	ldr	r3, [r7, #0]
 8020f96:	685b      	ldr	r3, [r3, #4]
 8020f98:	4a0a      	ldr	r2, [pc, #40]	; (8020fc4 <prvHeapInit+0xb8>)
 8020f9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8020f9c:	683b      	ldr	r3, [r7, #0]
 8020f9e:	685b      	ldr	r3, [r3, #4]
 8020fa0:	4a09      	ldr	r2, [pc, #36]	; (8020fc8 <prvHeapInit+0xbc>)
 8020fa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8020fa4:	4b09      	ldr	r3, [pc, #36]	; (8020fcc <prvHeapInit+0xc0>)
 8020fa6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020faa:	601a      	str	r2, [r3, #0]
}
 8020fac:	bf00      	nop
 8020fae:	3714      	adds	r7, #20
 8020fb0:	46bd      	mov	sp, r7
 8020fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fb6:	4770      	bx	lr
 8020fb8:	20000af0 	.word	0x20000af0
 8020fbc:	200136f0 	.word	0x200136f0
 8020fc0:	200136f8 	.word	0x200136f8
 8020fc4:	20013700 	.word	0x20013700
 8020fc8:	200136fc 	.word	0x200136fc
 8020fcc:	2001370c 	.word	0x2001370c

08020fd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8020fd0:	b480      	push	{r7}
 8020fd2:	b085      	sub	sp, #20
 8020fd4:	af00      	add	r7, sp, #0
 8020fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8020fd8:	4b28      	ldr	r3, [pc, #160]	; (802107c <prvInsertBlockIntoFreeList+0xac>)
 8020fda:	60fb      	str	r3, [r7, #12]
 8020fdc:	e002      	b.n	8020fe4 <prvInsertBlockIntoFreeList+0x14>
 8020fde:	68fb      	ldr	r3, [r7, #12]
 8020fe0:	681b      	ldr	r3, [r3, #0]
 8020fe2:	60fb      	str	r3, [r7, #12]
 8020fe4:	68fb      	ldr	r3, [r7, #12]
 8020fe6:	681b      	ldr	r3, [r3, #0]
 8020fe8:	687a      	ldr	r2, [r7, #4]
 8020fea:	429a      	cmp	r2, r3
 8020fec:	d8f7      	bhi.n	8020fde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8020fee:	68fb      	ldr	r3, [r7, #12]
 8020ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8020ff2:	68fb      	ldr	r3, [r7, #12]
 8020ff4:	685b      	ldr	r3, [r3, #4]
 8020ff6:	68ba      	ldr	r2, [r7, #8]
 8020ff8:	4413      	add	r3, r2
 8020ffa:	687a      	ldr	r2, [r7, #4]
 8020ffc:	429a      	cmp	r2, r3
 8020ffe:	d108      	bne.n	8021012 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8021000:	68fb      	ldr	r3, [r7, #12]
 8021002:	685a      	ldr	r2, [r3, #4]
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	685b      	ldr	r3, [r3, #4]
 8021008:	441a      	add	r2, r3
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 802100e:	68fb      	ldr	r3, [r7, #12]
 8021010:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8021012:	687b      	ldr	r3, [r7, #4]
 8021014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	685b      	ldr	r3, [r3, #4]
 802101a:	68ba      	ldr	r2, [r7, #8]
 802101c:	441a      	add	r2, r3
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	681b      	ldr	r3, [r3, #0]
 8021022:	429a      	cmp	r2, r3
 8021024:	d118      	bne.n	8021058 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8021026:	68fb      	ldr	r3, [r7, #12]
 8021028:	681a      	ldr	r2, [r3, #0]
 802102a:	4b15      	ldr	r3, [pc, #84]	; (8021080 <prvInsertBlockIntoFreeList+0xb0>)
 802102c:	681b      	ldr	r3, [r3, #0]
 802102e:	429a      	cmp	r2, r3
 8021030:	d00d      	beq.n	802104e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8021032:	687b      	ldr	r3, [r7, #4]
 8021034:	685a      	ldr	r2, [r3, #4]
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	681b      	ldr	r3, [r3, #0]
 802103a:	685b      	ldr	r3, [r3, #4]
 802103c:	441a      	add	r2, r3
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8021042:	68fb      	ldr	r3, [r7, #12]
 8021044:	681b      	ldr	r3, [r3, #0]
 8021046:	681a      	ldr	r2, [r3, #0]
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	601a      	str	r2, [r3, #0]
 802104c:	e008      	b.n	8021060 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 802104e:	4b0c      	ldr	r3, [pc, #48]	; (8021080 <prvInsertBlockIntoFreeList+0xb0>)
 8021050:	681a      	ldr	r2, [r3, #0]
 8021052:	687b      	ldr	r3, [r7, #4]
 8021054:	601a      	str	r2, [r3, #0]
 8021056:	e003      	b.n	8021060 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8021058:	68fb      	ldr	r3, [r7, #12]
 802105a:	681a      	ldr	r2, [r3, #0]
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8021060:	68fa      	ldr	r2, [r7, #12]
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	429a      	cmp	r2, r3
 8021066:	d002      	beq.n	802106e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8021068:	68fb      	ldr	r3, [r7, #12]
 802106a:	687a      	ldr	r2, [r7, #4]
 802106c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802106e:	bf00      	nop
 8021070:	3714      	adds	r7, #20
 8021072:	46bd      	mov	sp, r7
 8021074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021078:	4770      	bx	lr
 802107a:	bf00      	nop
 802107c:	200136f0 	.word	0x200136f0
 8021080:	200136f8 	.word	0x200136f8

08021084 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8021084:	b580      	push	{r7, lr}
 8021086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8021088:	2200      	movs	r2, #0
 802108a:	4912      	ldr	r1, [pc, #72]	; (80210d4 <MX_USB_DEVICE_Init+0x50>)
 802108c:	4812      	ldr	r0, [pc, #72]	; (80210d8 <MX_USB_DEVICE_Init+0x54>)
 802108e:	f7fb fe45 	bl	801cd1c <USBD_Init>
 8021092:	4603      	mov	r3, r0
 8021094:	2b00      	cmp	r3, #0
 8021096:	d001      	beq.n	802109c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8021098:	f7f2 f8fc 	bl	8013294 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802109c:	490f      	ldr	r1, [pc, #60]	; (80210dc <MX_USB_DEVICE_Init+0x58>)
 802109e:	480e      	ldr	r0, [pc, #56]	; (80210d8 <MX_USB_DEVICE_Init+0x54>)
 80210a0:	f7fb fe6c 	bl	801cd7c <USBD_RegisterClass>
 80210a4:	4603      	mov	r3, r0
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	d001      	beq.n	80210ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80210aa:	f7f2 f8f3 	bl	8013294 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80210ae:	490c      	ldr	r1, [pc, #48]	; (80210e0 <MX_USB_DEVICE_Init+0x5c>)
 80210b0:	4809      	ldr	r0, [pc, #36]	; (80210d8 <MX_USB_DEVICE_Init+0x54>)
 80210b2:	f7fb fd8d 	bl	801cbd0 <USBD_CDC_RegisterInterface>
 80210b6:	4603      	mov	r3, r0
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d001      	beq.n	80210c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80210bc:	f7f2 f8ea 	bl	8013294 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80210c0:	4805      	ldr	r0, [pc, #20]	; (80210d8 <MX_USB_DEVICE_Init+0x54>)
 80210c2:	f7fb fe82 	bl	801cdca <USBD_Start>
 80210c6:	4603      	mov	r3, r0
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d001      	beq.n	80210d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80210cc:	f7f2 f8e2 	bl	8013294 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80210d0:	bf00      	nop
 80210d2:	bd80      	pop	{r7, pc}
 80210d4:	20000150 	.word	0x20000150
 80210d8:	20014afc 	.word	0x20014afc
 80210dc:	20000034 	.word	0x20000034
 80210e0:	2000013c 	.word	0x2000013c

080210e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80210e4:	b580      	push	{r7, lr}
 80210e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80210e8:	2200      	movs	r2, #0
 80210ea:	4905      	ldr	r1, [pc, #20]	; (8021100 <CDC_Init_FS+0x1c>)
 80210ec:	4805      	ldr	r0, [pc, #20]	; (8021104 <CDC_Init_FS+0x20>)
 80210ee:	f7fb fd84 	bl	801cbfa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80210f2:	4905      	ldr	r1, [pc, #20]	; (8021108 <CDC_Init_FS+0x24>)
 80210f4:	4803      	ldr	r0, [pc, #12]	; (8021104 <CDC_Init_FS+0x20>)
 80210f6:	f7fb fd9e 	bl	801cc36 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80210fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80210fc:	4618      	mov	r0, r3
 80210fe:	bd80      	pop	{r7, pc}
 8021100:	200155cc 	.word	0x200155cc
 8021104:	20014afc 	.word	0x20014afc
 8021108:	20014dcc 	.word	0x20014dcc

0802110c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 802110c:	b480      	push	{r7}
 802110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8021110:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8021112:	4618      	mov	r0, r3
 8021114:	46bd      	mov	sp, r7
 8021116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802111a:	4770      	bx	lr

0802111c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 802111c:	b480      	push	{r7}
 802111e:	b083      	sub	sp, #12
 8021120:	af00      	add	r7, sp, #0
 8021122:	4603      	mov	r3, r0
 8021124:	6039      	str	r1, [r7, #0]
 8021126:	71fb      	strb	r3, [r7, #7]
 8021128:	4613      	mov	r3, r2
 802112a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 802112c:	79fb      	ldrb	r3, [r7, #7]
 802112e:	2b23      	cmp	r3, #35	; 0x23
 8021130:	d84a      	bhi.n	80211c8 <CDC_Control_FS+0xac>
 8021132:	a201      	add	r2, pc, #4	; (adr r2, 8021138 <CDC_Control_FS+0x1c>)
 8021134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021138:	080211c9 	.word	0x080211c9
 802113c:	080211c9 	.word	0x080211c9
 8021140:	080211c9 	.word	0x080211c9
 8021144:	080211c9 	.word	0x080211c9
 8021148:	080211c9 	.word	0x080211c9
 802114c:	080211c9 	.word	0x080211c9
 8021150:	080211c9 	.word	0x080211c9
 8021154:	080211c9 	.word	0x080211c9
 8021158:	080211c9 	.word	0x080211c9
 802115c:	080211c9 	.word	0x080211c9
 8021160:	080211c9 	.word	0x080211c9
 8021164:	080211c9 	.word	0x080211c9
 8021168:	080211c9 	.word	0x080211c9
 802116c:	080211c9 	.word	0x080211c9
 8021170:	080211c9 	.word	0x080211c9
 8021174:	080211c9 	.word	0x080211c9
 8021178:	080211c9 	.word	0x080211c9
 802117c:	080211c9 	.word	0x080211c9
 8021180:	080211c9 	.word	0x080211c9
 8021184:	080211c9 	.word	0x080211c9
 8021188:	080211c9 	.word	0x080211c9
 802118c:	080211c9 	.word	0x080211c9
 8021190:	080211c9 	.word	0x080211c9
 8021194:	080211c9 	.word	0x080211c9
 8021198:	080211c9 	.word	0x080211c9
 802119c:	080211c9 	.word	0x080211c9
 80211a0:	080211c9 	.word	0x080211c9
 80211a4:	080211c9 	.word	0x080211c9
 80211a8:	080211c9 	.word	0x080211c9
 80211ac:	080211c9 	.word	0x080211c9
 80211b0:	080211c9 	.word	0x080211c9
 80211b4:	080211c9 	.word	0x080211c9
 80211b8:	080211c9 	.word	0x080211c9
 80211bc:	080211c9 	.word	0x080211c9
 80211c0:	080211c9 	.word	0x080211c9
 80211c4:	080211c9 	.word	0x080211c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80211c8:	bf00      	nop
  }

  return (USBD_OK);
 80211ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80211cc:	4618      	mov	r0, r3
 80211ce:	370c      	adds	r7, #12
 80211d0:	46bd      	mov	sp, r7
 80211d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d6:	4770      	bx	lr

080211d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80211d8:	b580      	push	{r7, lr}
 80211da:	b084      	sub	sp, #16
 80211dc:	af00      	add	r7, sp, #0
 80211de:	6078      	str	r0, [r7, #4]
 80211e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80211e2:	6879      	ldr	r1, [r7, #4]
 80211e4:	481b      	ldr	r0, [pc, #108]	; (8021254 <CDC_Receive_FS+0x7c>)
 80211e6:	f7fb fd26 	bl	801cc36 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80211ea:	481a      	ldr	r0, [pc, #104]	; (8021254 <CDC_Receive_FS+0x7c>)
 80211ec:	f7fb fd6c 	bl	801ccc8 <USBD_CDC_ReceivePacket>


  memset (Bluetooth_Parameter.Bluetooth_RX_BUF, '\0', 20);  // clear the buffer
 80211f0:	2214      	movs	r2, #20
 80211f2:	2100      	movs	r1, #0
 80211f4:	4818      	ldr	r0, [pc, #96]	; (8021258 <CDC_Receive_FS+0x80>)
 80211f6:	f000 fcc3 	bl	8021b80 <memset>
  uint8_t len = (uint8_t)*Len;
 80211fa:	683b      	ldr	r3, [r7, #0]
 80211fc:	681b      	ldr	r3, [r3, #0]
 80211fe:	73fb      	strb	r3, [r7, #15]
  memcpy(Bluetooth_Parameter.Bluetooth_RX_BUF, Buf, len);  // copy the data to the buffer
 8021200:	7bfb      	ldrb	r3, [r7, #15]
 8021202:	461a      	mov	r2, r3
 8021204:	6879      	ldr	r1, [r7, #4]
 8021206:	4814      	ldr	r0, [pc, #80]	; (8021258 <CDC_Receive_FS+0x80>)
 8021208:	f000 fcac 	bl	8021b64 <memcpy>


  if(len==20)
 802120c:	7bfb      	ldrb	r3, [r7, #15]
 802120e:	2b14      	cmp	r3, #20
 8021210:	d114      	bne.n	802123c <CDC_Receive_FS+0x64>
  {
  	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8021212:	2300      	movs	r3, #0
 8021214:	60bb      	str	r3, [r7, #8]
  	xQueueSendToFrontFromISR(Bluetooth_Receive, &(Bluetooth_Parameter.Bluetooth_RX_BUF), &xHigherPriorityTaskWoken);
 8021216:	4b11      	ldr	r3, [pc, #68]	; (802125c <CDC_Receive_FS+0x84>)
 8021218:	6818      	ldr	r0, [r3, #0]
 802121a:	f107 0208 	add.w	r2, r7, #8
 802121e:	2301      	movs	r3, #1
 8021220:	490d      	ldr	r1, [pc, #52]	; (8021258 <CDC_Receive_FS+0x80>)
 8021222:	f7fd f9d1 	bl	801e5c8 <xQueueGenericSendFromISR>
  	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8021226:	68bb      	ldr	r3, [r7, #8]
 8021228:	2b00      	cmp	r3, #0
 802122a:	d007      	beq.n	802123c <CDC_Receive_FS+0x64>
 802122c:	4b0c      	ldr	r3, [pc, #48]	; (8021260 <CDC_Receive_FS+0x88>)
 802122e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021232:	601a      	str	r2, [r3, #0]
 8021234:	f3bf 8f4f 	dsb	sy
 8021238:	f3bf 8f6f 	isb	sy
  }

  memset(Buf, '\0', len);   // clear the Buf also
 802123c:	7bfb      	ldrb	r3, [r7, #15]
 802123e:	461a      	mov	r2, r3
 8021240:	2100      	movs	r1, #0
 8021242:	6878      	ldr	r0, [r7, #4]
 8021244:	f000 fc9c 	bl	8021b80 <memset>


  return (USBD_OK);
 8021248:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802124a:	4618      	mov	r0, r3
 802124c:	3710      	adds	r7, #16
 802124e:	46bd      	mov	sp, r7
 8021250:	bd80      	pop	{r7, pc}
 8021252:	bf00      	nop
 8021254:	20014afc 	.word	0x20014afc
 8021258:	2001395a 	.word	0x2001395a
 802125c:	20013af4 	.word	0x20013af4
 8021260:	e000ed04 	.word	0xe000ed04

08021264 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8021264:	b580      	push	{r7, lr}
 8021266:	b084      	sub	sp, #16
 8021268:	af00      	add	r7, sp, #0
 802126a:	6078      	str	r0, [r7, #4]
 802126c:	460b      	mov	r3, r1
 802126e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8021270:	2300      	movs	r3, #0
 8021272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8021274:	4b0d      	ldr	r3, [pc, #52]	; (80212ac <CDC_Transmit_FS+0x48>)
 8021276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802127a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 802127c:	68bb      	ldr	r3, [r7, #8]
 802127e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8021282:	2b00      	cmp	r3, #0
 8021284:	d001      	beq.n	802128a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8021286:	2301      	movs	r3, #1
 8021288:	e00b      	b.n	80212a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 802128a:	887b      	ldrh	r3, [r7, #2]
 802128c:	461a      	mov	r2, r3
 802128e:	6879      	ldr	r1, [r7, #4]
 8021290:	4806      	ldr	r0, [pc, #24]	; (80212ac <CDC_Transmit_FS+0x48>)
 8021292:	f7fb fcb2 	bl	801cbfa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8021296:	4805      	ldr	r0, [pc, #20]	; (80212ac <CDC_Transmit_FS+0x48>)
 8021298:	f7fb fce6 	bl	801cc68 <USBD_CDC_TransmitPacket>
 802129c:	4603      	mov	r3, r0
 802129e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80212a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80212a2:	4618      	mov	r0, r3
 80212a4:	3710      	adds	r7, #16
 80212a6:	46bd      	mov	sp, r7
 80212a8:	bd80      	pop	{r7, pc}
 80212aa:	bf00      	nop
 80212ac:	20014afc 	.word	0x20014afc

080212b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80212b0:	b480      	push	{r7}
 80212b2:	b087      	sub	sp, #28
 80212b4:	af00      	add	r7, sp, #0
 80212b6:	60f8      	str	r0, [r7, #12]
 80212b8:	60b9      	str	r1, [r7, #8]
 80212ba:	4613      	mov	r3, r2
 80212bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80212be:	2300      	movs	r3, #0
 80212c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80212c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80212c6:	4618      	mov	r0, r3
 80212c8:	371c      	adds	r7, #28
 80212ca:	46bd      	mov	sp, r7
 80212cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212d0:	4770      	bx	lr
	...

080212d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80212d4:	b480      	push	{r7}
 80212d6:	b083      	sub	sp, #12
 80212d8:	af00      	add	r7, sp, #0
 80212da:	4603      	mov	r3, r0
 80212dc:	6039      	str	r1, [r7, #0]
 80212de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80212e0:	683b      	ldr	r3, [r7, #0]
 80212e2:	2212      	movs	r2, #18
 80212e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80212e6:	4b03      	ldr	r3, [pc, #12]	; (80212f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80212e8:	4618      	mov	r0, r3
 80212ea:	370c      	adds	r7, #12
 80212ec:	46bd      	mov	sp, r7
 80212ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212f2:	4770      	bx	lr
 80212f4:	2000016c 	.word	0x2000016c

080212f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80212f8:	b480      	push	{r7}
 80212fa:	b083      	sub	sp, #12
 80212fc:	af00      	add	r7, sp, #0
 80212fe:	4603      	mov	r3, r0
 8021300:	6039      	str	r1, [r7, #0]
 8021302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8021304:	683b      	ldr	r3, [r7, #0]
 8021306:	2204      	movs	r2, #4
 8021308:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802130a:	4b03      	ldr	r3, [pc, #12]	; (8021318 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802130c:	4618      	mov	r0, r3
 802130e:	370c      	adds	r7, #12
 8021310:	46bd      	mov	sp, r7
 8021312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021316:	4770      	bx	lr
 8021318:	20000180 	.word	0x20000180

0802131c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802131c:	b580      	push	{r7, lr}
 802131e:	b082      	sub	sp, #8
 8021320:	af00      	add	r7, sp, #0
 8021322:	4603      	mov	r3, r0
 8021324:	6039      	str	r1, [r7, #0]
 8021326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8021328:	79fb      	ldrb	r3, [r7, #7]
 802132a:	2b00      	cmp	r3, #0
 802132c:	d105      	bne.n	802133a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802132e:	683a      	ldr	r2, [r7, #0]
 8021330:	4907      	ldr	r1, [pc, #28]	; (8021350 <USBD_FS_ProductStrDescriptor+0x34>)
 8021332:	4808      	ldr	r0, [pc, #32]	; (8021354 <USBD_FS_ProductStrDescriptor+0x38>)
 8021334:	f7fc fd7b 	bl	801de2e <USBD_GetString>
 8021338:	e004      	b.n	8021344 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802133a:	683a      	ldr	r2, [r7, #0]
 802133c:	4904      	ldr	r1, [pc, #16]	; (8021350 <USBD_FS_ProductStrDescriptor+0x34>)
 802133e:	4805      	ldr	r0, [pc, #20]	; (8021354 <USBD_FS_ProductStrDescriptor+0x38>)
 8021340:	f7fc fd75 	bl	801de2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8021344:	4b02      	ldr	r3, [pc, #8]	; (8021350 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8021346:	4618      	mov	r0, r3
 8021348:	3708      	adds	r7, #8
 802134a:	46bd      	mov	sp, r7
 802134c:	bd80      	pop	{r7, pc}
 802134e:	bf00      	nop
 8021350:	20015dcc 	.word	0x20015dcc
 8021354:	08022fc0 	.word	0x08022fc0

08021358 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021358:	b580      	push	{r7, lr}
 802135a:	b082      	sub	sp, #8
 802135c:	af00      	add	r7, sp, #0
 802135e:	4603      	mov	r3, r0
 8021360:	6039      	str	r1, [r7, #0]
 8021362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021364:	683a      	ldr	r2, [r7, #0]
 8021366:	4904      	ldr	r1, [pc, #16]	; (8021378 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8021368:	4804      	ldr	r0, [pc, #16]	; (802137c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802136a:	f7fc fd60 	bl	801de2e <USBD_GetString>
  return USBD_StrDesc;
 802136e:	4b02      	ldr	r3, [pc, #8]	; (8021378 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8021370:	4618      	mov	r0, r3
 8021372:	3708      	adds	r7, #8
 8021374:	46bd      	mov	sp, r7
 8021376:	bd80      	pop	{r7, pc}
 8021378:	20015dcc 	.word	0x20015dcc
 802137c:	08022fd8 	.word	0x08022fd8

08021380 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021380:	b580      	push	{r7, lr}
 8021382:	b082      	sub	sp, #8
 8021384:	af00      	add	r7, sp, #0
 8021386:	4603      	mov	r3, r0
 8021388:	6039      	str	r1, [r7, #0]
 802138a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802138c:	683b      	ldr	r3, [r7, #0]
 802138e:	221a      	movs	r2, #26
 8021390:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8021392:	f000 f843 	bl	802141c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8021396:	4b02      	ldr	r3, [pc, #8]	; (80213a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8021398:	4618      	mov	r0, r3
 802139a:	3708      	adds	r7, #8
 802139c:	46bd      	mov	sp, r7
 802139e:	bd80      	pop	{r7, pc}
 80213a0:	20000184 	.word	0x20000184

080213a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80213a4:	b580      	push	{r7, lr}
 80213a6:	b082      	sub	sp, #8
 80213a8:	af00      	add	r7, sp, #0
 80213aa:	4603      	mov	r3, r0
 80213ac:	6039      	str	r1, [r7, #0]
 80213ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80213b0:	79fb      	ldrb	r3, [r7, #7]
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d105      	bne.n	80213c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80213b6:	683a      	ldr	r2, [r7, #0]
 80213b8:	4907      	ldr	r1, [pc, #28]	; (80213d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80213ba:	4808      	ldr	r0, [pc, #32]	; (80213dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80213bc:	f7fc fd37 	bl	801de2e <USBD_GetString>
 80213c0:	e004      	b.n	80213cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80213c2:	683a      	ldr	r2, [r7, #0]
 80213c4:	4904      	ldr	r1, [pc, #16]	; (80213d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80213c6:	4805      	ldr	r0, [pc, #20]	; (80213dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80213c8:	f7fc fd31 	bl	801de2e <USBD_GetString>
  }
  return USBD_StrDesc;
 80213cc:	4b02      	ldr	r3, [pc, #8]	; (80213d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80213ce:	4618      	mov	r0, r3
 80213d0:	3708      	adds	r7, #8
 80213d2:	46bd      	mov	sp, r7
 80213d4:	bd80      	pop	{r7, pc}
 80213d6:	bf00      	nop
 80213d8:	20015dcc 	.word	0x20015dcc
 80213dc:	08022fec 	.word	0x08022fec

080213e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80213e0:	b580      	push	{r7, lr}
 80213e2:	b082      	sub	sp, #8
 80213e4:	af00      	add	r7, sp, #0
 80213e6:	4603      	mov	r3, r0
 80213e8:	6039      	str	r1, [r7, #0]
 80213ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80213ec:	79fb      	ldrb	r3, [r7, #7]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d105      	bne.n	80213fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80213f2:	683a      	ldr	r2, [r7, #0]
 80213f4:	4907      	ldr	r1, [pc, #28]	; (8021414 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80213f6:	4808      	ldr	r0, [pc, #32]	; (8021418 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80213f8:	f7fc fd19 	bl	801de2e <USBD_GetString>
 80213fc:	e004      	b.n	8021408 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80213fe:	683a      	ldr	r2, [r7, #0]
 8021400:	4904      	ldr	r1, [pc, #16]	; (8021414 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8021402:	4805      	ldr	r0, [pc, #20]	; (8021418 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8021404:	f7fc fd13 	bl	801de2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8021408:	4b02      	ldr	r3, [pc, #8]	; (8021414 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 802140a:	4618      	mov	r0, r3
 802140c:	3708      	adds	r7, #8
 802140e:	46bd      	mov	sp, r7
 8021410:	bd80      	pop	{r7, pc}
 8021412:	bf00      	nop
 8021414:	20015dcc 	.word	0x20015dcc
 8021418:	08022ff8 	.word	0x08022ff8

0802141c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 802141c:	b580      	push	{r7, lr}
 802141e:	b084      	sub	sp, #16
 8021420:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8021422:	4b0f      	ldr	r3, [pc, #60]	; (8021460 <Get_SerialNum+0x44>)
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8021428:	4b0e      	ldr	r3, [pc, #56]	; (8021464 <Get_SerialNum+0x48>)
 802142a:	681b      	ldr	r3, [r3, #0]
 802142c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802142e:	4b0e      	ldr	r3, [pc, #56]	; (8021468 <Get_SerialNum+0x4c>)
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8021434:	68fa      	ldr	r2, [r7, #12]
 8021436:	687b      	ldr	r3, [r7, #4]
 8021438:	4413      	add	r3, r2
 802143a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 802143c:	68fb      	ldr	r3, [r7, #12]
 802143e:	2b00      	cmp	r3, #0
 8021440:	d009      	beq.n	8021456 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8021442:	2208      	movs	r2, #8
 8021444:	4909      	ldr	r1, [pc, #36]	; (802146c <Get_SerialNum+0x50>)
 8021446:	68f8      	ldr	r0, [r7, #12]
 8021448:	f000 f814 	bl	8021474 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802144c:	2204      	movs	r2, #4
 802144e:	4908      	ldr	r1, [pc, #32]	; (8021470 <Get_SerialNum+0x54>)
 8021450:	68b8      	ldr	r0, [r7, #8]
 8021452:	f000 f80f 	bl	8021474 <IntToUnicode>
  }
}
 8021456:	bf00      	nop
 8021458:	3710      	adds	r7, #16
 802145a:	46bd      	mov	sp, r7
 802145c:	bd80      	pop	{r7, pc}
 802145e:	bf00      	nop
 8021460:	1fff7a10 	.word	0x1fff7a10
 8021464:	1fff7a14 	.word	0x1fff7a14
 8021468:	1fff7a18 	.word	0x1fff7a18
 802146c:	20000186 	.word	0x20000186
 8021470:	20000196 	.word	0x20000196

08021474 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8021474:	b480      	push	{r7}
 8021476:	b087      	sub	sp, #28
 8021478:	af00      	add	r7, sp, #0
 802147a:	60f8      	str	r0, [r7, #12]
 802147c:	60b9      	str	r1, [r7, #8]
 802147e:	4613      	mov	r3, r2
 8021480:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8021482:	2300      	movs	r3, #0
 8021484:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8021486:	2300      	movs	r3, #0
 8021488:	75fb      	strb	r3, [r7, #23]
 802148a:	e027      	b.n	80214dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 802148c:	68fb      	ldr	r3, [r7, #12]
 802148e:	0f1b      	lsrs	r3, r3, #28
 8021490:	2b09      	cmp	r3, #9
 8021492:	d80b      	bhi.n	80214ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8021494:	68fb      	ldr	r3, [r7, #12]
 8021496:	0f1b      	lsrs	r3, r3, #28
 8021498:	b2da      	uxtb	r2, r3
 802149a:	7dfb      	ldrb	r3, [r7, #23]
 802149c:	005b      	lsls	r3, r3, #1
 802149e:	4619      	mov	r1, r3
 80214a0:	68bb      	ldr	r3, [r7, #8]
 80214a2:	440b      	add	r3, r1
 80214a4:	3230      	adds	r2, #48	; 0x30
 80214a6:	b2d2      	uxtb	r2, r2
 80214a8:	701a      	strb	r2, [r3, #0]
 80214aa:	e00a      	b.n	80214c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80214ac:	68fb      	ldr	r3, [r7, #12]
 80214ae:	0f1b      	lsrs	r3, r3, #28
 80214b0:	b2da      	uxtb	r2, r3
 80214b2:	7dfb      	ldrb	r3, [r7, #23]
 80214b4:	005b      	lsls	r3, r3, #1
 80214b6:	4619      	mov	r1, r3
 80214b8:	68bb      	ldr	r3, [r7, #8]
 80214ba:	440b      	add	r3, r1
 80214bc:	3237      	adds	r2, #55	; 0x37
 80214be:	b2d2      	uxtb	r2, r2
 80214c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80214c2:	68fb      	ldr	r3, [r7, #12]
 80214c4:	011b      	lsls	r3, r3, #4
 80214c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80214c8:	7dfb      	ldrb	r3, [r7, #23]
 80214ca:	005b      	lsls	r3, r3, #1
 80214cc:	3301      	adds	r3, #1
 80214ce:	68ba      	ldr	r2, [r7, #8]
 80214d0:	4413      	add	r3, r2
 80214d2:	2200      	movs	r2, #0
 80214d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80214d6:	7dfb      	ldrb	r3, [r7, #23]
 80214d8:	3301      	adds	r3, #1
 80214da:	75fb      	strb	r3, [r7, #23]
 80214dc:	7dfa      	ldrb	r2, [r7, #23]
 80214de:	79fb      	ldrb	r3, [r7, #7]
 80214e0:	429a      	cmp	r2, r3
 80214e2:	d3d3      	bcc.n	802148c <IntToUnicode+0x18>
  }
}
 80214e4:	bf00      	nop
 80214e6:	bf00      	nop
 80214e8:	371c      	adds	r7, #28
 80214ea:	46bd      	mov	sp, r7
 80214ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214f0:	4770      	bx	lr
	...

080214f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80214f4:	b580      	push	{r7, lr}
 80214f6:	b08a      	sub	sp, #40	; 0x28
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80214fc:	f107 0314 	add.w	r3, r7, #20
 8021500:	2200      	movs	r2, #0
 8021502:	601a      	str	r2, [r3, #0]
 8021504:	605a      	str	r2, [r3, #4]
 8021506:	609a      	str	r2, [r3, #8]
 8021508:	60da      	str	r2, [r3, #12]
 802150a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8021514:	d13a      	bne.n	802158c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021516:	2300      	movs	r3, #0
 8021518:	613b      	str	r3, [r7, #16]
 802151a:	4b1e      	ldr	r3, [pc, #120]	; (8021594 <HAL_PCD_MspInit+0xa0>)
 802151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802151e:	4a1d      	ldr	r2, [pc, #116]	; (8021594 <HAL_PCD_MspInit+0xa0>)
 8021520:	f043 0301 	orr.w	r3, r3, #1
 8021524:	6313      	str	r3, [r2, #48]	; 0x30
 8021526:	4b1b      	ldr	r3, [pc, #108]	; (8021594 <HAL_PCD_MspInit+0xa0>)
 8021528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802152a:	f003 0301 	and.w	r3, r3, #1
 802152e:	613b      	str	r3, [r7, #16]
 8021530:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8021532:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8021536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021538:	2302      	movs	r3, #2
 802153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802153c:	2300      	movs	r3, #0
 802153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021540:	2303      	movs	r3, #3
 8021542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8021544:	230a      	movs	r3, #10
 8021546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021548:	f107 0314 	add.w	r3, r7, #20
 802154c:	4619      	mov	r1, r3
 802154e:	4812      	ldr	r0, [pc, #72]	; (8021598 <HAL_PCD_MspInit+0xa4>)
 8021550:	f7f3 fda8 	bl	80150a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8021554:	4b0f      	ldr	r3, [pc, #60]	; (8021594 <HAL_PCD_MspInit+0xa0>)
 8021556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021558:	4a0e      	ldr	r2, [pc, #56]	; (8021594 <HAL_PCD_MspInit+0xa0>)
 802155a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802155e:	6353      	str	r3, [r2, #52]	; 0x34
 8021560:	2300      	movs	r3, #0
 8021562:	60fb      	str	r3, [r7, #12]
 8021564:	4b0b      	ldr	r3, [pc, #44]	; (8021594 <HAL_PCD_MspInit+0xa0>)
 8021566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021568:	4a0a      	ldr	r2, [pc, #40]	; (8021594 <HAL_PCD_MspInit+0xa0>)
 802156a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802156e:	6453      	str	r3, [r2, #68]	; 0x44
 8021570:	4b08      	ldr	r3, [pc, #32]	; (8021594 <HAL_PCD_MspInit+0xa0>)
 8021572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021578:	60fb      	str	r3, [r7, #12]
 802157a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 802157c:	2200      	movs	r2, #0
 802157e:	2105      	movs	r1, #5
 8021580:	2043      	movs	r0, #67	; 0x43
 8021582:	f7f3 f831 	bl	80145e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8021586:	2043      	movs	r0, #67	; 0x43
 8021588:	f7f3 f84a 	bl	8014620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 802158c:	bf00      	nop
 802158e:	3728      	adds	r7, #40	; 0x28
 8021590:	46bd      	mov	sp, r7
 8021592:	bd80      	pop	{r7, pc}
 8021594:	40023800 	.word	0x40023800
 8021598:	40020000 	.word	0x40020000

0802159c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802159c:	b580      	push	{r7, lr}
 802159e:	b082      	sub	sp, #8
 80215a0:	af00      	add	r7, sp, #0
 80215a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80215a4:	687b      	ldr	r3, [r7, #4]
 80215a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80215b0:	4619      	mov	r1, r3
 80215b2:	4610      	mov	r0, r2
 80215b4:	f7fb fc54 	bl	801ce60 <USBD_LL_SetupStage>
}
 80215b8:	bf00      	nop
 80215ba:	3708      	adds	r7, #8
 80215bc:	46bd      	mov	sp, r7
 80215be:	bd80      	pop	{r7, pc}

080215c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80215c0:	b580      	push	{r7, lr}
 80215c2:	b082      	sub	sp, #8
 80215c4:	af00      	add	r7, sp, #0
 80215c6:	6078      	str	r0, [r7, #4]
 80215c8:	460b      	mov	r3, r1
 80215ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80215d2:	78fa      	ldrb	r2, [r7, #3]
 80215d4:	6879      	ldr	r1, [r7, #4]
 80215d6:	4613      	mov	r3, r2
 80215d8:	00db      	lsls	r3, r3, #3
 80215da:	1a9b      	subs	r3, r3, r2
 80215dc:	009b      	lsls	r3, r3, #2
 80215de:	440b      	add	r3, r1
 80215e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80215e4:	681a      	ldr	r2, [r3, #0]
 80215e6:	78fb      	ldrb	r3, [r7, #3]
 80215e8:	4619      	mov	r1, r3
 80215ea:	f7fb fc8e 	bl	801cf0a <USBD_LL_DataOutStage>
}
 80215ee:	bf00      	nop
 80215f0:	3708      	adds	r7, #8
 80215f2:	46bd      	mov	sp, r7
 80215f4:	bd80      	pop	{r7, pc}

080215f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80215f6:	b580      	push	{r7, lr}
 80215f8:	b082      	sub	sp, #8
 80215fa:	af00      	add	r7, sp, #0
 80215fc:	6078      	str	r0, [r7, #4]
 80215fe:	460b      	mov	r3, r1
 8021600:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8021602:	687b      	ldr	r3, [r7, #4]
 8021604:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8021608:	78fa      	ldrb	r2, [r7, #3]
 802160a:	6879      	ldr	r1, [r7, #4]
 802160c:	4613      	mov	r3, r2
 802160e:	00db      	lsls	r3, r3, #3
 8021610:	1a9b      	subs	r3, r3, r2
 8021612:	009b      	lsls	r3, r3, #2
 8021614:	440b      	add	r3, r1
 8021616:	3348      	adds	r3, #72	; 0x48
 8021618:	681a      	ldr	r2, [r3, #0]
 802161a:	78fb      	ldrb	r3, [r7, #3]
 802161c:	4619      	mov	r1, r3
 802161e:	f7fb fcd7 	bl	801cfd0 <USBD_LL_DataInStage>
}
 8021622:	bf00      	nop
 8021624:	3708      	adds	r7, #8
 8021626:	46bd      	mov	sp, r7
 8021628:	bd80      	pop	{r7, pc}

0802162a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802162a:	b580      	push	{r7, lr}
 802162c:	b082      	sub	sp, #8
 802162e:	af00      	add	r7, sp, #0
 8021630:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021638:	4618      	mov	r0, r3
 802163a:	f7fb fdeb 	bl	801d214 <USBD_LL_SOF>
}
 802163e:	bf00      	nop
 8021640:	3708      	adds	r7, #8
 8021642:	46bd      	mov	sp, r7
 8021644:	bd80      	pop	{r7, pc}

08021646 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021646:	b580      	push	{r7, lr}
 8021648:	b084      	sub	sp, #16
 802164a:	af00      	add	r7, sp, #0
 802164c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802164e:	2301      	movs	r3, #1
 8021650:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	68db      	ldr	r3, [r3, #12]
 8021656:	2b00      	cmp	r3, #0
 8021658:	d102      	bne.n	8021660 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 802165a:	2300      	movs	r3, #0
 802165c:	73fb      	strb	r3, [r7, #15]
 802165e:	e008      	b.n	8021672 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8021660:	687b      	ldr	r3, [r7, #4]
 8021662:	68db      	ldr	r3, [r3, #12]
 8021664:	2b02      	cmp	r3, #2
 8021666:	d102      	bne.n	802166e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8021668:	2301      	movs	r3, #1
 802166a:	73fb      	strb	r3, [r7, #15]
 802166c:	e001      	b.n	8021672 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 802166e:	f7f1 fe11 	bl	8013294 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021678:	7bfa      	ldrb	r2, [r7, #15]
 802167a:	4611      	mov	r1, r2
 802167c:	4618      	mov	r0, r3
 802167e:	f7fb fd8b 	bl	801d198 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021682:	687b      	ldr	r3, [r7, #4]
 8021684:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021688:	4618      	mov	r0, r3
 802168a:	f7fb fd37 	bl	801d0fc <USBD_LL_Reset>
}
 802168e:	bf00      	nop
 8021690:	3710      	adds	r7, #16
 8021692:	46bd      	mov	sp, r7
 8021694:	bd80      	pop	{r7, pc}
	...

08021698 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021698:	b580      	push	{r7, lr}
 802169a:	b082      	sub	sp, #8
 802169c:	af00      	add	r7, sp, #0
 802169e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80216a0:	687b      	ldr	r3, [r7, #4]
 80216a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80216a6:	4618      	mov	r0, r3
 80216a8:	f7fb fd86 	bl	801d1b8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	681b      	ldr	r3, [r3, #0]
 80216b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	687a      	ldr	r2, [r7, #4]
 80216b8:	6812      	ldr	r2, [r2, #0]
 80216ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80216be:	f043 0301 	orr.w	r3, r3, #1
 80216c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80216c4:	687b      	ldr	r3, [r7, #4]
 80216c6:	6a1b      	ldr	r3, [r3, #32]
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d005      	beq.n	80216d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80216cc:	4b04      	ldr	r3, [pc, #16]	; (80216e0 <HAL_PCD_SuspendCallback+0x48>)
 80216ce:	691b      	ldr	r3, [r3, #16]
 80216d0:	4a03      	ldr	r2, [pc, #12]	; (80216e0 <HAL_PCD_SuspendCallback+0x48>)
 80216d2:	f043 0306 	orr.w	r3, r3, #6
 80216d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80216d8:	bf00      	nop
 80216da:	3708      	adds	r7, #8
 80216dc:	46bd      	mov	sp, r7
 80216de:	bd80      	pop	{r7, pc}
 80216e0:	e000ed00 	.word	0xe000ed00

080216e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80216e4:	b580      	push	{r7, lr}
 80216e6:	b082      	sub	sp, #8
 80216e8:	af00      	add	r7, sp, #0
 80216ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80216f2:	4618      	mov	r0, r3
 80216f4:	f7fb fd76 	bl	801d1e4 <USBD_LL_Resume>
}
 80216f8:	bf00      	nop
 80216fa:	3708      	adds	r7, #8
 80216fc:	46bd      	mov	sp, r7
 80216fe:	bd80      	pop	{r7, pc}

08021700 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021700:	b580      	push	{r7, lr}
 8021702:	b082      	sub	sp, #8
 8021704:	af00      	add	r7, sp, #0
 8021706:	6078      	str	r0, [r7, #4]
 8021708:	460b      	mov	r3, r1
 802170a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021712:	78fa      	ldrb	r2, [r7, #3]
 8021714:	4611      	mov	r1, r2
 8021716:	4618      	mov	r0, r3
 8021718:	f7fb fdc4 	bl	801d2a4 <USBD_LL_IsoOUTIncomplete>
}
 802171c:	bf00      	nop
 802171e:	3708      	adds	r7, #8
 8021720:	46bd      	mov	sp, r7
 8021722:	bd80      	pop	{r7, pc}

08021724 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021724:	b580      	push	{r7, lr}
 8021726:	b082      	sub	sp, #8
 8021728:	af00      	add	r7, sp, #0
 802172a:	6078      	str	r0, [r7, #4]
 802172c:	460b      	mov	r3, r1
 802172e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8021730:	687b      	ldr	r3, [r7, #4]
 8021732:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021736:	78fa      	ldrb	r2, [r7, #3]
 8021738:	4611      	mov	r1, r2
 802173a:	4618      	mov	r0, r3
 802173c:	f7fb fd8c 	bl	801d258 <USBD_LL_IsoINIncomplete>
}
 8021740:	bf00      	nop
 8021742:	3708      	adds	r7, #8
 8021744:	46bd      	mov	sp, r7
 8021746:	bd80      	pop	{r7, pc}

08021748 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021748:	b580      	push	{r7, lr}
 802174a:	b082      	sub	sp, #8
 802174c:	af00      	add	r7, sp, #0
 802174e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8021750:	687b      	ldr	r3, [r7, #4]
 8021752:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021756:	4618      	mov	r0, r3
 8021758:	f7fb fdca 	bl	801d2f0 <USBD_LL_DevConnected>
}
 802175c:	bf00      	nop
 802175e:	3708      	adds	r7, #8
 8021760:	46bd      	mov	sp, r7
 8021762:	bd80      	pop	{r7, pc}

08021764 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021764:	b580      	push	{r7, lr}
 8021766:	b082      	sub	sp, #8
 8021768:	af00      	add	r7, sp, #0
 802176a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021772:	4618      	mov	r0, r3
 8021774:	f7fb fdc7 	bl	801d306 <USBD_LL_DevDisconnected>
}
 8021778:	bf00      	nop
 802177a:	3708      	adds	r7, #8
 802177c:	46bd      	mov	sp, r7
 802177e:	bd80      	pop	{r7, pc}

08021780 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8021780:	b580      	push	{r7, lr}
 8021782:	b082      	sub	sp, #8
 8021784:	af00      	add	r7, sp, #0
 8021786:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	781b      	ldrb	r3, [r3, #0]
 802178c:	2b00      	cmp	r3, #0
 802178e:	d13c      	bne.n	802180a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8021790:	4a20      	ldr	r2, [pc, #128]	; (8021814 <USBD_LL_Init+0x94>)
 8021792:	687b      	ldr	r3, [r7, #4]
 8021794:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	4a1e      	ldr	r2, [pc, #120]	; (8021814 <USBD_LL_Init+0x94>)
 802179c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80217a0:	4b1c      	ldr	r3, [pc, #112]	; (8021814 <USBD_LL_Init+0x94>)
 80217a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80217a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80217a8:	4b1a      	ldr	r3, [pc, #104]	; (8021814 <USBD_LL_Init+0x94>)
 80217aa:	2204      	movs	r2, #4
 80217ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80217ae:	4b19      	ldr	r3, [pc, #100]	; (8021814 <USBD_LL_Init+0x94>)
 80217b0:	2202      	movs	r2, #2
 80217b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80217b4:	4b17      	ldr	r3, [pc, #92]	; (8021814 <USBD_LL_Init+0x94>)
 80217b6:	2200      	movs	r2, #0
 80217b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80217ba:	4b16      	ldr	r3, [pc, #88]	; (8021814 <USBD_LL_Init+0x94>)
 80217bc:	2202      	movs	r2, #2
 80217be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80217c0:	4b14      	ldr	r3, [pc, #80]	; (8021814 <USBD_LL_Init+0x94>)
 80217c2:	2200      	movs	r2, #0
 80217c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80217c6:	4b13      	ldr	r3, [pc, #76]	; (8021814 <USBD_LL_Init+0x94>)
 80217c8:	2200      	movs	r2, #0
 80217ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80217cc:	4b11      	ldr	r3, [pc, #68]	; (8021814 <USBD_LL_Init+0x94>)
 80217ce:	2200      	movs	r2, #0
 80217d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80217d2:	4b10      	ldr	r3, [pc, #64]	; (8021814 <USBD_LL_Init+0x94>)
 80217d4:	2200      	movs	r2, #0
 80217d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80217d8:	4b0e      	ldr	r3, [pc, #56]	; (8021814 <USBD_LL_Init+0x94>)
 80217da:	2200      	movs	r2, #0
 80217dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80217de:	480d      	ldr	r0, [pc, #52]	; (8021814 <USBD_LL_Init+0x94>)
 80217e0:	f7f4 fde7 	bl	80163b2 <HAL_PCD_Init>
 80217e4:	4603      	mov	r3, r0
 80217e6:	2b00      	cmp	r3, #0
 80217e8:	d001      	beq.n	80217ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80217ea:	f7f1 fd53 	bl	8013294 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80217ee:	2180      	movs	r1, #128	; 0x80
 80217f0:	4808      	ldr	r0, [pc, #32]	; (8021814 <USBD_LL_Init+0x94>)
 80217f2:	f7f5 ff44 	bl	801767e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80217f6:	2240      	movs	r2, #64	; 0x40
 80217f8:	2100      	movs	r1, #0
 80217fa:	4806      	ldr	r0, [pc, #24]	; (8021814 <USBD_LL_Init+0x94>)
 80217fc:	f7f5 fef8 	bl	80175f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8021800:	2280      	movs	r2, #128	; 0x80
 8021802:	2101      	movs	r1, #1
 8021804:	4803      	ldr	r0, [pc, #12]	; (8021814 <USBD_LL_Init+0x94>)
 8021806:	f7f5 fef3 	bl	80175f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 802180a:	2300      	movs	r3, #0
}
 802180c:	4618      	mov	r0, r3
 802180e:	3708      	adds	r7, #8
 8021810:	46bd      	mov	sp, r7
 8021812:	bd80      	pop	{r7, pc}
 8021814:	20015fcc 	.word	0x20015fcc

08021818 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8021818:	b580      	push	{r7, lr}
 802181a:	b084      	sub	sp, #16
 802181c:	af00      	add	r7, sp, #0
 802181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021820:	2300      	movs	r3, #0
 8021822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021824:	2300      	movs	r3, #0
 8021826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8021828:	687b      	ldr	r3, [r7, #4]
 802182a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802182e:	4618      	mov	r0, r3
 8021830:	f7f4 fedc 	bl	80165ec <HAL_PCD_Start>
 8021834:	4603      	mov	r3, r0
 8021836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021838:	7bfb      	ldrb	r3, [r7, #15]
 802183a:	4618      	mov	r0, r3
 802183c:	f000 f942 	bl	8021ac4 <USBD_Get_USB_Status>
 8021840:	4603      	mov	r3, r0
 8021842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021844:	7bbb      	ldrb	r3, [r7, #14]
}
 8021846:	4618      	mov	r0, r3
 8021848:	3710      	adds	r7, #16
 802184a:	46bd      	mov	sp, r7
 802184c:	bd80      	pop	{r7, pc}

0802184e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802184e:	b580      	push	{r7, lr}
 8021850:	b084      	sub	sp, #16
 8021852:	af00      	add	r7, sp, #0
 8021854:	6078      	str	r0, [r7, #4]
 8021856:	4608      	mov	r0, r1
 8021858:	4611      	mov	r1, r2
 802185a:	461a      	mov	r2, r3
 802185c:	4603      	mov	r3, r0
 802185e:	70fb      	strb	r3, [r7, #3]
 8021860:	460b      	mov	r3, r1
 8021862:	70bb      	strb	r3, [r7, #2]
 8021864:	4613      	mov	r3, r2
 8021866:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021868:	2300      	movs	r3, #0
 802186a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802186c:	2300      	movs	r3, #0
 802186e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8021876:	78bb      	ldrb	r3, [r7, #2]
 8021878:	883a      	ldrh	r2, [r7, #0]
 802187a:	78f9      	ldrb	r1, [r7, #3]
 802187c:	f7f5 fac0 	bl	8016e00 <HAL_PCD_EP_Open>
 8021880:	4603      	mov	r3, r0
 8021882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021884:	7bfb      	ldrb	r3, [r7, #15]
 8021886:	4618      	mov	r0, r3
 8021888:	f000 f91c 	bl	8021ac4 <USBD_Get_USB_Status>
 802188c:	4603      	mov	r3, r0
 802188e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021890:	7bbb      	ldrb	r3, [r7, #14]
}
 8021892:	4618      	mov	r0, r3
 8021894:	3710      	adds	r7, #16
 8021896:	46bd      	mov	sp, r7
 8021898:	bd80      	pop	{r7, pc}

0802189a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802189a:	b580      	push	{r7, lr}
 802189c:	b084      	sub	sp, #16
 802189e:	af00      	add	r7, sp, #0
 80218a0:	6078      	str	r0, [r7, #4]
 80218a2:	460b      	mov	r3, r1
 80218a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80218a6:	2300      	movs	r3, #0
 80218a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80218aa:	2300      	movs	r3, #0
 80218ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80218b4:	78fa      	ldrb	r2, [r7, #3]
 80218b6:	4611      	mov	r1, r2
 80218b8:	4618      	mov	r0, r3
 80218ba:	f7f5 fb09 	bl	8016ed0 <HAL_PCD_EP_Close>
 80218be:	4603      	mov	r3, r0
 80218c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80218c2:	7bfb      	ldrb	r3, [r7, #15]
 80218c4:	4618      	mov	r0, r3
 80218c6:	f000 f8fd 	bl	8021ac4 <USBD_Get_USB_Status>
 80218ca:	4603      	mov	r3, r0
 80218cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80218ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80218d0:	4618      	mov	r0, r3
 80218d2:	3710      	adds	r7, #16
 80218d4:	46bd      	mov	sp, r7
 80218d6:	bd80      	pop	{r7, pc}

080218d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80218d8:	b580      	push	{r7, lr}
 80218da:	b084      	sub	sp, #16
 80218dc:	af00      	add	r7, sp, #0
 80218de:	6078      	str	r0, [r7, #4]
 80218e0:	460b      	mov	r3, r1
 80218e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80218e4:	2300      	movs	r3, #0
 80218e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80218e8:	2300      	movs	r3, #0
 80218ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80218f2:	78fa      	ldrb	r2, [r7, #3]
 80218f4:	4611      	mov	r1, r2
 80218f6:	4618      	mov	r0, r3
 80218f8:	f7f5 fbe1 	bl	80170be <HAL_PCD_EP_SetStall>
 80218fc:	4603      	mov	r3, r0
 80218fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021900:	7bfb      	ldrb	r3, [r7, #15]
 8021902:	4618      	mov	r0, r3
 8021904:	f000 f8de 	bl	8021ac4 <USBD_Get_USB_Status>
 8021908:	4603      	mov	r3, r0
 802190a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802190c:	7bbb      	ldrb	r3, [r7, #14]
}
 802190e:	4618      	mov	r0, r3
 8021910:	3710      	adds	r7, #16
 8021912:	46bd      	mov	sp, r7
 8021914:	bd80      	pop	{r7, pc}

08021916 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021916:	b580      	push	{r7, lr}
 8021918:	b084      	sub	sp, #16
 802191a:	af00      	add	r7, sp, #0
 802191c:	6078      	str	r0, [r7, #4]
 802191e:	460b      	mov	r3, r1
 8021920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021922:	2300      	movs	r3, #0
 8021924:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021926:	2300      	movs	r3, #0
 8021928:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021930:	78fa      	ldrb	r2, [r7, #3]
 8021932:	4611      	mov	r1, r2
 8021934:	4618      	mov	r0, r3
 8021936:	f7f5 fc26 	bl	8017186 <HAL_PCD_EP_ClrStall>
 802193a:	4603      	mov	r3, r0
 802193c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802193e:	7bfb      	ldrb	r3, [r7, #15]
 8021940:	4618      	mov	r0, r3
 8021942:	f000 f8bf 	bl	8021ac4 <USBD_Get_USB_Status>
 8021946:	4603      	mov	r3, r0
 8021948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802194a:	7bbb      	ldrb	r3, [r7, #14]
}
 802194c:	4618      	mov	r0, r3
 802194e:	3710      	adds	r7, #16
 8021950:	46bd      	mov	sp, r7
 8021952:	bd80      	pop	{r7, pc}

08021954 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021954:	b480      	push	{r7}
 8021956:	b085      	sub	sp, #20
 8021958:	af00      	add	r7, sp, #0
 802195a:	6078      	str	r0, [r7, #4]
 802195c:	460b      	mov	r3, r1
 802195e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021966:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8021968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802196c:	2b00      	cmp	r3, #0
 802196e:	da0b      	bge.n	8021988 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8021970:	78fb      	ldrb	r3, [r7, #3]
 8021972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021976:	68f9      	ldr	r1, [r7, #12]
 8021978:	4613      	mov	r3, r2
 802197a:	00db      	lsls	r3, r3, #3
 802197c:	1a9b      	subs	r3, r3, r2
 802197e:	009b      	lsls	r3, r3, #2
 8021980:	440b      	add	r3, r1
 8021982:	333e      	adds	r3, #62	; 0x3e
 8021984:	781b      	ldrb	r3, [r3, #0]
 8021986:	e00b      	b.n	80219a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8021988:	78fb      	ldrb	r3, [r7, #3]
 802198a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802198e:	68f9      	ldr	r1, [r7, #12]
 8021990:	4613      	mov	r3, r2
 8021992:	00db      	lsls	r3, r3, #3
 8021994:	1a9b      	subs	r3, r3, r2
 8021996:	009b      	lsls	r3, r3, #2
 8021998:	440b      	add	r3, r1
 802199a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802199e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80219a0:	4618      	mov	r0, r3
 80219a2:	3714      	adds	r7, #20
 80219a4:	46bd      	mov	sp, r7
 80219a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219aa:	4770      	bx	lr

080219ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80219ac:	b580      	push	{r7, lr}
 80219ae:	b084      	sub	sp, #16
 80219b0:	af00      	add	r7, sp, #0
 80219b2:	6078      	str	r0, [r7, #4]
 80219b4:	460b      	mov	r3, r1
 80219b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80219b8:	2300      	movs	r3, #0
 80219ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80219bc:	2300      	movs	r3, #0
 80219be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80219c6:	78fa      	ldrb	r2, [r7, #3]
 80219c8:	4611      	mov	r1, r2
 80219ca:	4618      	mov	r0, r3
 80219cc:	f7f5 f9f3 	bl	8016db6 <HAL_PCD_SetAddress>
 80219d0:	4603      	mov	r3, r0
 80219d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80219d4:	7bfb      	ldrb	r3, [r7, #15]
 80219d6:	4618      	mov	r0, r3
 80219d8:	f000 f874 	bl	8021ac4 <USBD_Get_USB_Status>
 80219dc:	4603      	mov	r3, r0
 80219de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80219e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80219e2:	4618      	mov	r0, r3
 80219e4:	3710      	adds	r7, #16
 80219e6:	46bd      	mov	sp, r7
 80219e8:	bd80      	pop	{r7, pc}

080219ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80219ea:	b580      	push	{r7, lr}
 80219ec:	b086      	sub	sp, #24
 80219ee:	af00      	add	r7, sp, #0
 80219f0:	60f8      	str	r0, [r7, #12]
 80219f2:	607a      	str	r2, [r7, #4]
 80219f4:	603b      	str	r3, [r7, #0]
 80219f6:	460b      	mov	r3, r1
 80219f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80219fa:	2300      	movs	r3, #0
 80219fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80219fe:	2300      	movs	r3, #0
 8021a00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021a02:	68fb      	ldr	r3, [r7, #12]
 8021a04:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8021a08:	7af9      	ldrb	r1, [r7, #11]
 8021a0a:	683b      	ldr	r3, [r7, #0]
 8021a0c:	687a      	ldr	r2, [r7, #4]
 8021a0e:	f7f5 fb0c 	bl	801702a <HAL_PCD_EP_Transmit>
 8021a12:	4603      	mov	r3, r0
 8021a14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021a16:	7dfb      	ldrb	r3, [r7, #23]
 8021a18:	4618      	mov	r0, r3
 8021a1a:	f000 f853 	bl	8021ac4 <USBD_Get_USB_Status>
 8021a1e:	4603      	mov	r3, r0
 8021a20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8021a22:	7dbb      	ldrb	r3, [r7, #22]
}
 8021a24:	4618      	mov	r0, r3
 8021a26:	3718      	adds	r7, #24
 8021a28:	46bd      	mov	sp, r7
 8021a2a:	bd80      	pop	{r7, pc}

08021a2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8021a2c:	b580      	push	{r7, lr}
 8021a2e:	b086      	sub	sp, #24
 8021a30:	af00      	add	r7, sp, #0
 8021a32:	60f8      	str	r0, [r7, #12]
 8021a34:	607a      	str	r2, [r7, #4]
 8021a36:	603b      	str	r3, [r7, #0]
 8021a38:	460b      	mov	r3, r1
 8021a3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021a3c:	2300      	movs	r3, #0
 8021a3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021a40:	2300      	movs	r3, #0
 8021a42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021a44:	68fb      	ldr	r3, [r7, #12]
 8021a46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8021a4a:	7af9      	ldrb	r1, [r7, #11]
 8021a4c:	683b      	ldr	r3, [r7, #0]
 8021a4e:	687a      	ldr	r2, [r7, #4]
 8021a50:	f7f5 fa88 	bl	8016f64 <HAL_PCD_EP_Receive>
 8021a54:	4603      	mov	r3, r0
 8021a56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021a58:	7dfb      	ldrb	r3, [r7, #23]
 8021a5a:	4618      	mov	r0, r3
 8021a5c:	f000 f832 	bl	8021ac4 <USBD_Get_USB_Status>
 8021a60:	4603      	mov	r3, r0
 8021a62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8021a64:	7dbb      	ldrb	r3, [r7, #22]
}
 8021a66:	4618      	mov	r0, r3
 8021a68:	3718      	adds	r7, #24
 8021a6a:	46bd      	mov	sp, r7
 8021a6c:	bd80      	pop	{r7, pc}

08021a6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021a6e:	b580      	push	{r7, lr}
 8021a70:	b082      	sub	sp, #8
 8021a72:	af00      	add	r7, sp, #0
 8021a74:	6078      	str	r0, [r7, #4]
 8021a76:	460b      	mov	r3, r1
 8021a78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021a80:	78fa      	ldrb	r2, [r7, #3]
 8021a82:	4611      	mov	r1, r2
 8021a84:	4618      	mov	r0, r3
 8021a86:	f7f5 fab8 	bl	8016ffa <HAL_PCD_EP_GetRxCount>
 8021a8a:	4603      	mov	r3, r0
}
 8021a8c:	4618      	mov	r0, r3
 8021a8e:	3708      	adds	r7, #8
 8021a90:	46bd      	mov	sp, r7
 8021a92:	bd80      	pop	{r7, pc}

08021a94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8021a94:	b480      	push	{r7}
 8021a96:	b083      	sub	sp, #12
 8021a98:	af00      	add	r7, sp, #0
 8021a9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8021a9c:	4b03      	ldr	r3, [pc, #12]	; (8021aac <USBD_static_malloc+0x18>)
}
 8021a9e:	4618      	mov	r0, r3
 8021aa0:	370c      	adds	r7, #12
 8021aa2:	46bd      	mov	sp, r7
 8021aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021aa8:	4770      	bx	lr
 8021aaa:	bf00      	nop
 8021aac:	20013710 	.word	0x20013710

08021ab0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8021ab0:	b480      	push	{r7}
 8021ab2:	b083      	sub	sp, #12
 8021ab4:	af00      	add	r7, sp, #0
 8021ab6:	6078      	str	r0, [r7, #4]

}
 8021ab8:	bf00      	nop
 8021aba:	370c      	adds	r7, #12
 8021abc:	46bd      	mov	sp, r7
 8021abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ac2:	4770      	bx	lr

08021ac4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8021ac4:	b480      	push	{r7}
 8021ac6:	b085      	sub	sp, #20
 8021ac8:	af00      	add	r7, sp, #0
 8021aca:	4603      	mov	r3, r0
 8021acc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021ace:	2300      	movs	r3, #0
 8021ad0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8021ad2:	79fb      	ldrb	r3, [r7, #7]
 8021ad4:	2b03      	cmp	r3, #3
 8021ad6:	d817      	bhi.n	8021b08 <USBD_Get_USB_Status+0x44>
 8021ad8:	a201      	add	r2, pc, #4	; (adr r2, 8021ae0 <USBD_Get_USB_Status+0x1c>)
 8021ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ade:	bf00      	nop
 8021ae0:	08021af1 	.word	0x08021af1
 8021ae4:	08021af7 	.word	0x08021af7
 8021ae8:	08021afd 	.word	0x08021afd
 8021aec:	08021b03 	.word	0x08021b03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8021af0:	2300      	movs	r3, #0
 8021af2:	73fb      	strb	r3, [r7, #15]
    break;
 8021af4:	e00b      	b.n	8021b0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8021af6:	2303      	movs	r3, #3
 8021af8:	73fb      	strb	r3, [r7, #15]
    break;
 8021afa:	e008      	b.n	8021b0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8021afc:	2301      	movs	r3, #1
 8021afe:	73fb      	strb	r3, [r7, #15]
    break;
 8021b00:	e005      	b.n	8021b0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8021b02:	2303      	movs	r3, #3
 8021b04:	73fb      	strb	r3, [r7, #15]
    break;
 8021b06:	e002      	b.n	8021b0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8021b08:	2303      	movs	r3, #3
 8021b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8021b0c:	bf00      	nop
  }
  return usb_status;
 8021b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8021b10:	4618      	mov	r0, r3
 8021b12:	3714      	adds	r7, #20
 8021b14:	46bd      	mov	sp, r7
 8021b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b1a:	4770      	bx	lr

08021b1c <__libc_init_array>:
 8021b1c:	b570      	push	{r4, r5, r6, lr}
 8021b1e:	4d0d      	ldr	r5, [pc, #52]	; (8021b54 <__libc_init_array+0x38>)
 8021b20:	4c0d      	ldr	r4, [pc, #52]	; (8021b58 <__libc_init_array+0x3c>)
 8021b22:	1b64      	subs	r4, r4, r5
 8021b24:	10a4      	asrs	r4, r4, #2
 8021b26:	2600      	movs	r6, #0
 8021b28:	42a6      	cmp	r6, r4
 8021b2a:	d109      	bne.n	8021b40 <__libc_init_array+0x24>
 8021b2c:	4d0b      	ldr	r5, [pc, #44]	; (8021b5c <__libc_init_array+0x40>)
 8021b2e:	4c0c      	ldr	r4, [pc, #48]	; (8021b60 <__libc_init_array+0x44>)
 8021b30:	f001 f8dc 	bl	8022cec <_init>
 8021b34:	1b64      	subs	r4, r4, r5
 8021b36:	10a4      	asrs	r4, r4, #2
 8021b38:	2600      	movs	r6, #0
 8021b3a:	42a6      	cmp	r6, r4
 8021b3c:	d105      	bne.n	8021b4a <__libc_init_array+0x2e>
 8021b3e:	bd70      	pop	{r4, r5, r6, pc}
 8021b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8021b44:	4798      	blx	r3
 8021b46:	3601      	adds	r6, #1
 8021b48:	e7ee      	b.n	8021b28 <__libc_init_array+0xc>
 8021b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8021b4e:	4798      	blx	r3
 8021b50:	3601      	adds	r6, #1
 8021b52:	e7f2      	b.n	8021b3a <__libc_init_array+0x1e>
 8021b54:	08023208 	.word	0x08023208
 8021b58:	08023208 	.word	0x08023208
 8021b5c:	08023208 	.word	0x08023208
 8021b60:	0802320c 	.word	0x0802320c

08021b64 <memcpy>:
 8021b64:	440a      	add	r2, r1
 8021b66:	4291      	cmp	r1, r2
 8021b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8021b6c:	d100      	bne.n	8021b70 <memcpy+0xc>
 8021b6e:	4770      	bx	lr
 8021b70:	b510      	push	{r4, lr}
 8021b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021b7a:	4291      	cmp	r1, r2
 8021b7c:	d1f9      	bne.n	8021b72 <memcpy+0xe>
 8021b7e:	bd10      	pop	{r4, pc}

08021b80 <memset>:
 8021b80:	4402      	add	r2, r0
 8021b82:	4603      	mov	r3, r0
 8021b84:	4293      	cmp	r3, r2
 8021b86:	d100      	bne.n	8021b8a <memset+0xa>
 8021b88:	4770      	bx	lr
 8021b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8021b8e:	e7f9      	b.n	8021b84 <memset+0x4>

08021b90 <modf>:
 8021b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b92:	ec55 4b10 	vmov	r4, r5, d0
 8021b96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8021b9a:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8021b9e:	2e13      	cmp	r6, #19
 8021ba0:	dc24      	bgt.n	8021bec <modf+0x5c>
 8021ba2:	2e00      	cmp	r6, #0
 8021ba4:	da07      	bge.n	8021bb6 <modf+0x26>
 8021ba6:	2600      	movs	r6, #0
 8021ba8:	f005 4700 	and.w	r7, r5, #2147483648	; 0x80000000
 8021bac:	e9c0 6700 	strd	r6, r7, [r0]
 8021bb0:	ec45 4b10 	vmov	d0, r4, r5
 8021bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021bb6:	491a      	ldr	r1, [pc, #104]	; (8021c20 <modf+0x90>)
 8021bb8:	4131      	asrs	r1, r6
 8021bba:	ea05 0601 	and.w	r6, r5, r1
 8021bbe:	ea56 0204 	orrs.w	r2, r6, r4
 8021bc2:	d105      	bne.n	8021bd0 <modf+0x40>
 8021bc4:	ed80 0b00 	vstr	d0, [r0]
 8021bc8:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8021bcc:	4614      	mov	r4, r2
 8021bce:	e7ef      	b.n	8021bb0 <modf+0x20>
 8021bd0:	2600      	movs	r6, #0
 8021bd2:	ea25 0701 	bic.w	r7, r5, r1
 8021bd6:	4632      	mov	r2, r6
 8021bd8:	463b      	mov	r3, r7
 8021bda:	e9c0 2300 	strd	r2, r3, [r0]
 8021bde:	4629      	mov	r1, r5
 8021be0:	4620      	mov	r0, r4
 8021be2:	f7de faf9 	bl	80001d8 <__aeabi_dsub>
 8021be6:	4604      	mov	r4, r0
 8021be8:	460d      	mov	r5, r1
 8021bea:	e7e1      	b.n	8021bb0 <modf+0x20>
 8021bec:	2e33      	cmp	r6, #51	; 0x33
 8021bee:	dd05      	ble.n	8021bfc <modf+0x6c>
 8021bf0:	ed80 0b00 	vstr	d0, [r0]
 8021bf4:	2400      	movs	r4, #0
 8021bf6:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8021bfa:	e7d9      	b.n	8021bb0 <modf+0x20>
 8021bfc:	f2a1 4613 	subw	r6, r1, #1043	; 0x413
 8021c00:	f04f 31ff 	mov.w	r1, #4294967295
 8021c04:	40f1      	lsrs	r1, r6
 8021c06:	ea11 0604 	ands.w	r6, r1, r4
 8021c0a:	d105      	bne.n	8021c18 <modf+0x88>
 8021c0c:	ed80 0b00 	vstr	d0, [r0]
 8021c10:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8021c14:	4634      	mov	r4, r6
 8021c16:	e7cb      	b.n	8021bb0 <modf+0x20>
 8021c18:	462f      	mov	r7, r5
 8021c1a:	ea24 0601 	bic.w	r6, r4, r1
 8021c1e:	e7da      	b.n	8021bd6 <modf+0x46>
 8021c20:	000fffff 	.word	0x000fffff
 8021c24:	00000000 	.word	0x00000000

08021c28 <tan>:
 8021c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021c2a:	ec53 2b10 	vmov	r2, r3, d0
 8021c2e:	4814      	ldr	r0, [pc, #80]	; (8021c80 <tan+0x58>)
 8021c30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8021c34:	4281      	cmp	r1, r0
 8021c36:	dc05      	bgt.n	8021c44 <tan+0x1c>
 8021c38:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8021c78 <tan+0x50>
 8021c3c:	2001      	movs	r0, #1
 8021c3e:	f000 fd6f 	bl	8022720 <__kernel_tan>
 8021c42:	e009      	b.n	8021c58 <tan+0x30>
 8021c44:	480f      	ldr	r0, [pc, #60]	; (8021c84 <tan+0x5c>)
 8021c46:	4281      	cmp	r1, r0
 8021c48:	dd09      	ble.n	8021c5e <tan+0x36>
 8021c4a:	ee10 0a10 	vmov	r0, s0
 8021c4e:	4619      	mov	r1, r3
 8021c50:	f7de fac2 	bl	80001d8 <__aeabi_dsub>
 8021c54:	ec41 0b10 	vmov	d0, r0, r1
 8021c58:	b005      	add	sp, #20
 8021c5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8021c5e:	4668      	mov	r0, sp
 8021c60:	f000 f812 	bl	8021c88 <__ieee754_rem_pio2>
 8021c64:	0040      	lsls	r0, r0, #1
 8021c66:	f000 0002 	and.w	r0, r0, #2
 8021c6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021c6e:	ed9d 0b00 	vldr	d0, [sp]
 8021c72:	f1c0 0001 	rsb	r0, r0, #1
 8021c76:	e7e2      	b.n	8021c3e <tan+0x16>
	...
 8021c80:	3fe921fb 	.word	0x3fe921fb
 8021c84:	7fefffff 	.word	0x7fefffff

08021c88 <__ieee754_rem_pio2>:
 8021c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c8c:	ed2d 8b02 	vpush	{d8}
 8021c90:	ec55 4b10 	vmov	r4, r5, d0
 8021c94:	4bca      	ldr	r3, [pc, #808]	; (8021fc0 <__ieee754_rem_pio2+0x338>)
 8021c96:	b08b      	sub	sp, #44	; 0x2c
 8021c98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8021c9c:	4598      	cmp	r8, r3
 8021c9e:	4682      	mov	sl, r0
 8021ca0:	9502      	str	r5, [sp, #8]
 8021ca2:	dc08      	bgt.n	8021cb6 <__ieee754_rem_pio2+0x2e>
 8021ca4:	2200      	movs	r2, #0
 8021ca6:	2300      	movs	r3, #0
 8021ca8:	ed80 0b00 	vstr	d0, [r0]
 8021cac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8021cb0:	f04f 0b00 	mov.w	fp, #0
 8021cb4:	e028      	b.n	8021d08 <__ieee754_rem_pio2+0x80>
 8021cb6:	4bc3      	ldr	r3, [pc, #780]	; (8021fc4 <__ieee754_rem_pio2+0x33c>)
 8021cb8:	4598      	cmp	r8, r3
 8021cba:	dc78      	bgt.n	8021dae <__ieee754_rem_pio2+0x126>
 8021cbc:	9b02      	ldr	r3, [sp, #8]
 8021cbe:	4ec2      	ldr	r6, [pc, #776]	; (8021fc8 <__ieee754_rem_pio2+0x340>)
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	ee10 0a10 	vmov	r0, s0
 8021cc6:	a3b0      	add	r3, pc, #704	; (adr r3, 8021f88 <__ieee754_rem_pio2+0x300>)
 8021cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ccc:	4629      	mov	r1, r5
 8021cce:	dd39      	ble.n	8021d44 <__ieee754_rem_pio2+0xbc>
 8021cd0:	f7de fa82 	bl	80001d8 <__aeabi_dsub>
 8021cd4:	45b0      	cmp	r8, r6
 8021cd6:	4604      	mov	r4, r0
 8021cd8:	460d      	mov	r5, r1
 8021cda:	d01b      	beq.n	8021d14 <__ieee754_rem_pio2+0x8c>
 8021cdc:	a3ac      	add	r3, pc, #688	; (adr r3, 8021f90 <__ieee754_rem_pio2+0x308>)
 8021cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ce2:	f7de fa79 	bl	80001d8 <__aeabi_dsub>
 8021ce6:	4602      	mov	r2, r0
 8021ce8:	460b      	mov	r3, r1
 8021cea:	e9ca 2300 	strd	r2, r3, [sl]
 8021cee:	4620      	mov	r0, r4
 8021cf0:	4629      	mov	r1, r5
 8021cf2:	f7de fa71 	bl	80001d8 <__aeabi_dsub>
 8021cf6:	a3a6      	add	r3, pc, #664	; (adr r3, 8021f90 <__ieee754_rem_pio2+0x308>)
 8021cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cfc:	f7de fa6c 	bl	80001d8 <__aeabi_dsub>
 8021d00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021d04:	f04f 0b01 	mov.w	fp, #1
 8021d08:	4658      	mov	r0, fp
 8021d0a:	b00b      	add	sp, #44	; 0x2c
 8021d0c:	ecbd 8b02 	vpop	{d8}
 8021d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d14:	a3a0      	add	r3, pc, #640	; (adr r3, 8021f98 <__ieee754_rem_pio2+0x310>)
 8021d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d1a:	f7de fa5d 	bl	80001d8 <__aeabi_dsub>
 8021d1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8021fa0 <__ieee754_rem_pio2+0x318>)
 8021d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d24:	4604      	mov	r4, r0
 8021d26:	460d      	mov	r5, r1
 8021d28:	f7de fa56 	bl	80001d8 <__aeabi_dsub>
 8021d2c:	4602      	mov	r2, r0
 8021d2e:	460b      	mov	r3, r1
 8021d30:	e9ca 2300 	strd	r2, r3, [sl]
 8021d34:	4620      	mov	r0, r4
 8021d36:	4629      	mov	r1, r5
 8021d38:	f7de fa4e 	bl	80001d8 <__aeabi_dsub>
 8021d3c:	a398      	add	r3, pc, #608	; (adr r3, 8021fa0 <__ieee754_rem_pio2+0x318>)
 8021d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d42:	e7db      	b.n	8021cfc <__ieee754_rem_pio2+0x74>
 8021d44:	f7de fa4a 	bl	80001dc <__adddf3>
 8021d48:	45b0      	cmp	r8, r6
 8021d4a:	4604      	mov	r4, r0
 8021d4c:	460d      	mov	r5, r1
 8021d4e:	d016      	beq.n	8021d7e <__ieee754_rem_pio2+0xf6>
 8021d50:	a38f      	add	r3, pc, #572	; (adr r3, 8021f90 <__ieee754_rem_pio2+0x308>)
 8021d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d56:	f7de fa41 	bl	80001dc <__adddf3>
 8021d5a:	4602      	mov	r2, r0
 8021d5c:	460b      	mov	r3, r1
 8021d5e:	e9ca 2300 	strd	r2, r3, [sl]
 8021d62:	4620      	mov	r0, r4
 8021d64:	4629      	mov	r1, r5
 8021d66:	f7de fa37 	bl	80001d8 <__aeabi_dsub>
 8021d6a:	a389      	add	r3, pc, #548	; (adr r3, 8021f90 <__ieee754_rem_pio2+0x308>)
 8021d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d70:	f7de fa34 	bl	80001dc <__adddf3>
 8021d74:	f04f 3bff 	mov.w	fp, #4294967295
 8021d78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021d7c:	e7c4      	b.n	8021d08 <__ieee754_rem_pio2+0x80>
 8021d7e:	a386      	add	r3, pc, #536	; (adr r3, 8021f98 <__ieee754_rem_pio2+0x310>)
 8021d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d84:	f7de fa2a 	bl	80001dc <__adddf3>
 8021d88:	a385      	add	r3, pc, #532	; (adr r3, 8021fa0 <__ieee754_rem_pio2+0x318>)
 8021d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d8e:	4604      	mov	r4, r0
 8021d90:	460d      	mov	r5, r1
 8021d92:	f7de fa23 	bl	80001dc <__adddf3>
 8021d96:	4602      	mov	r2, r0
 8021d98:	460b      	mov	r3, r1
 8021d9a:	e9ca 2300 	strd	r2, r3, [sl]
 8021d9e:	4620      	mov	r0, r4
 8021da0:	4629      	mov	r1, r5
 8021da2:	f7de fa19 	bl	80001d8 <__aeabi_dsub>
 8021da6:	a37e      	add	r3, pc, #504	; (adr r3, 8021fa0 <__ieee754_rem_pio2+0x318>)
 8021da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dac:	e7e0      	b.n	8021d70 <__ieee754_rem_pio2+0xe8>
 8021dae:	4b87      	ldr	r3, [pc, #540]	; (8021fcc <__ieee754_rem_pio2+0x344>)
 8021db0:	4598      	cmp	r8, r3
 8021db2:	f300 80d9 	bgt.w	8021f68 <__ieee754_rem_pio2+0x2e0>
 8021db6:	f000 fe87 	bl	8022ac8 <fabs>
 8021dba:	ec55 4b10 	vmov	r4, r5, d0
 8021dbe:	ee10 0a10 	vmov	r0, s0
 8021dc2:	a379      	add	r3, pc, #484	; (adr r3, 8021fa8 <__ieee754_rem_pio2+0x320>)
 8021dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dc8:	4629      	mov	r1, r5
 8021dca:	f7de fbbd 	bl	8000548 <__aeabi_dmul>
 8021dce:	4b80      	ldr	r3, [pc, #512]	; (8021fd0 <__ieee754_rem_pio2+0x348>)
 8021dd0:	2200      	movs	r2, #0
 8021dd2:	f7de fa03 	bl	80001dc <__adddf3>
 8021dd6:	f7de fe51 	bl	8000a7c <__aeabi_d2iz>
 8021dda:	4683      	mov	fp, r0
 8021ddc:	f7de fb4a 	bl	8000474 <__aeabi_i2d>
 8021de0:	4602      	mov	r2, r0
 8021de2:	460b      	mov	r3, r1
 8021de4:	ec43 2b18 	vmov	d8, r2, r3
 8021de8:	a367      	add	r3, pc, #412	; (adr r3, 8021f88 <__ieee754_rem_pio2+0x300>)
 8021dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dee:	f7de fbab 	bl	8000548 <__aeabi_dmul>
 8021df2:	4602      	mov	r2, r0
 8021df4:	460b      	mov	r3, r1
 8021df6:	4620      	mov	r0, r4
 8021df8:	4629      	mov	r1, r5
 8021dfa:	f7de f9ed 	bl	80001d8 <__aeabi_dsub>
 8021dfe:	a364      	add	r3, pc, #400	; (adr r3, 8021f90 <__ieee754_rem_pio2+0x308>)
 8021e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e04:	4606      	mov	r6, r0
 8021e06:	460f      	mov	r7, r1
 8021e08:	ec51 0b18 	vmov	r0, r1, d8
 8021e0c:	f7de fb9c 	bl	8000548 <__aeabi_dmul>
 8021e10:	f1bb 0f1f 	cmp.w	fp, #31
 8021e14:	4604      	mov	r4, r0
 8021e16:	460d      	mov	r5, r1
 8021e18:	dc0d      	bgt.n	8021e36 <__ieee754_rem_pio2+0x1ae>
 8021e1a:	4b6e      	ldr	r3, [pc, #440]	; (8021fd4 <__ieee754_rem_pio2+0x34c>)
 8021e1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8021e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021e24:	4543      	cmp	r3, r8
 8021e26:	d006      	beq.n	8021e36 <__ieee754_rem_pio2+0x1ae>
 8021e28:	4622      	mov	r2, r4
 8021e2a:	462b      	mov	r3, r5
 8021e2c:	4630      	mov	r0, r6
 8021e2e:	4639      	mov	r1, r7
 8021e30:	f7de f9d2 	bl	80001d8 <__aeabi_dsub>
 8021e34:	e00f      	b.n	8021e56 <__ieee754_rem_pio2+0x1ce>
 8021e36:	462b      	mov	r3, r5
 8021e38:	4622      	mov	r2, r4
 8021e3a:	4630      	mov	r0, r6
 8021e3c:	4639      	mov	r1, r7
 8021e3e:	f7de f9cb 	bl	80001d8 <__aeabi_dsub>
 8021e42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8021e46:	9303      	str	r3, [sp, #12]
 8021e48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021e4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8021e50:	f1b8 0f10 	cmp.w	r8, #16
 8021e54:	dc02      	bgt.n	8021e5c <__ieee754_rem_pio2+0x1d4>
 8021e56:	e9ca 0100 	strd	r0, r1, [sl]
 8021e5a:	e039      	b.n	8021ed0 <__ieee754_rem_pio2+0x248>
 8021e5c:	a34e      	add	r3, pc, #312	; (adr r3, 8021f98 <__ieee754_rem_pio2+0x310>)
 8021e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e62:	ec51 0b18 	vmov	r0, r1, d8
 8021e66:	f7de fb6f 	bl	8000548 <__aeabi_dmul>
 8021e6a:	4604      	mov	r4, r0
 8021e6c:	460d      	mov	r5, r1
 8021e6e:	4602      	mov	r2, r0
 8021e70:	460b      	mov	r3, r1
 8021e72:	4630      	mov	r0, r6
 8021e74:	4639      	mov	r1, r7
 8021e76:	f7de f9af 	bl	80001d8 <__aeabi_dsub>
 8021e7a:	4602      	mov	r2, r0
 8021e7c:	460b      	mov	r3, r1
 8021e7e:	4680      	mov	r8, r0
 8021e80:	4689      	mov	r9, r1
 8021e82:	4630      	mov	r0, r6
 8021e84:	4639      	mov	r1, r7
 8021e86:	f7de f9a7 	bl	80001d8 <__aeabi_dsub>
 8021e8a:	4622      	mov	r2, r4
 8021e8c:	462b      	mov	r3, r5
 8021e8e:	f7de f9a3 	bl	80001d8 <__aeabi_dsub>
 8021e92:	a343      	add	r3, pc, #268	; (adr r3, 8021fa0 <__ieee754_rem_pio2+0x318>)
 8021e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e98:	4604      	mov	r4, r0
 8021e9a:	460d      	mov	r5, r1
 8021e9c:	ec51 0b18 	vmov	r0, r1, d8
 8021ea0:	f7de fb52 	bl	8000548 <__aeabi_dmul>
 8021ea4:	4622      	mov	r2, r4
 8021ea6:	462b      	mov	r3, r5
 8021ea8:	f7de f996 	bl	80001d8 <__aeabi_dsub>
 8021eac:	4602      	mov	r2, r0
 8021eae:	460b      	mov	r3, r1
 8021eb0:	4604      	mov	r4, r0
 8021eb2:	460d      	mov	r5, r1
 8021eb4:	4640      	mov	r0, r8
 8021eb6:	4649      	mov	r1, r9
 8021eb8:	f7de f98e 	bl	80001d8 <__aeabi_dsub>
 8021ebc:	9a03      	ldr	r2, [sp, #12]
 8021ebe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021ec2:	1ad3      	subs	r3, r2, r3
 8021ec4:	2b31      	cmp	r3, #49	; 0x31
 8021ec6:	dc24      	bgt.n	8021f12 <__ieee754_rem_pio2+0x28a>
 8021ec8:	e9ca 0100 	strd	r0, r1, [sl]
 8021ecc:	4646      	mov	r6, r8
 8021ece:	464f      	mov	r7, r9
 8021ed0:	e9da 8900 	ldrd	r8, r9, [sl]
 8021ed4:	4630      	mov	r0, r6
 8021ed6:	4642      	mov	r2, r8
 8021ed8:	464b      	mov	r3, r9
 8021eda:	4639      	mov	r1, r7
 8021edc:	f7de f97c 	bl	80001d8 <__aeabi_dsub>
 8021ee0:	462b      	mov	r3, r5
 8021ee2:	4622      	mov	r2, r4
 8021ee4:	f7de f978 	bl	80001d8 <__aeabi_dsub>
 8021ee8:	9b02      	ldr	r3, [sp, #8]
 8021eea:	2b00      	cmp	r3, #0
 8021eec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021ef0:	f6bf af0a 	bge.w	8021d08 <__ieee754_rem_pio2+0x80>
 8021ef4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8021ef8:	f8ca 3004 	str.w	r3, [sl, #4]
 8021efc:	f8ca 8000 	str.w	r8, [sl]
 8021f00:	f8ca 0008 	str.w	r0, [sl, #8]
 8021f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021f08:	f8ca 300c 	str.w	r3, [sl, #12]
 8021f0c:	f1cb 0b00 	rsb	fp, fp, #0
 8021f10:	e6fa      	b.n	8021d08 <__ieee754_rem_pio2+0x80>
 8021f12:	a327      	add	r3, pc, #156	; (adr r3, 8021fb0 <__ieee754_rem_pio2+0x328>)
 8021f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f18:	ec51 0b18 	vmov	r0, r1, d8
 8021f1c:	f7de fb14 	bl	8000548 <__aeabi_dmul>
 8021f20:	4604      	mov	r4, r0
 8021f22:	460d      	mov	r5, r1
 8021f24:	4602      	mov	r2, r0
 8021f26:	460b      	mov	r3, r1
 8021f28:	4640      	mov	r0, r8
 8021f2a:	4649      	mov	r1, r9
 8021f2c:	f7de f954 	bl	80001d8 <__aeabi_dsub>
 8021f30:	4602      	mov	r2, r0
 8021f32:	460b      	mov	r3, r1
 8021f34:	4606      	mov	r6, r0
 8021f36:	460f      	mov	r7, r1
 8021f38:	4640      	mov	r0, r8
 8021f3a:	4649      	mov	r1, r9
 8021f3c:	f7de f94c 	bl	80001d8 <__aeabi_dsub>
 8021f40:	4622      	mov	r2, r4
 8021f42:	462b      	mov	r3, r5
 8021f44:	f7de f948 	bl	80001d8 <__aeabi_dsub>
 8021f48:	a31b      	add	r3, pc, #108	; (adr r3, 8021fb8 <__ieee754_rem_pio2+0x330>)
 8021f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f4e:	4604      	mov	r4, r0
 8021f50:	460d      	mov	r5, r1
 8021f52:	ec51 0b18 	vmov	r0, r1, d8
 8021f56:	f7de faf7 	bl	8000548 <__aeabi_dmul>
 8021f5a:	4622      	mov	r2, r4
 8021f5c:	462b      	mov	r3, r5
 8021f5e:	f7de f93b 	bl	80001d8 <__aeabi_dsub>
 8021f62:	4604      	mov	r4, r0
 8021f64:	460d      	mov	r5, r1
 8021f66:	e75f      	b.n	8021e28 <__ieee754_rem_pio2+0x1a0>
 8021f68:	4b1b      	ldr	r3, [pc, #108]	; (8021fd8 <__ieee754_rem_pio2+0x350>)
 8021f6a:	4598      	cmp	r8, r3
 8021f6c:	dd36      	ble.n	8021fdc <__ieee754_rem_pio2+0x354>
 8021f6e:	ee10 2a10 	vmov	r2, s0
 8021f72:	462b      	mov	r3, r5
 8021f74:	4620      	mov	r0, r4
 8021f76:	4629      	mov	r1, r5
 8021f78:	f7de f92e 	bl	80001d8 <__aeabi_dsub>
 8021f7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021f80:	e9ca 0100 	strd	r0, r1, [sl]
 8021f84:	e694      	b.n	8021cb0 <__ieee754_rem_pio2+0x28>
 8021f86:	bf00      	nop
 8021f88:	54400000 	.word	0x54400000
 8021f8c:	3ff921fb 	.word	0x3ff921fb
 8021f90:	1a626331 	.word	0x1a626331
 8021f94:	3dd0b461 	.word	0x3dd0b461
 8021f98:	1a600000 	.word	0x1a600000
 8021f9c:	3dd0b461 	.word	0x3dd0b461
 8021fa0:	2e037073 	.word	0x2e037073
 8021fa4:	3ba3198a 	.word	0x3ba3198a
 8021fa8:	6dc9c883 	.word	0x6dc9c883
 8021fac:	3fe45f30 	.word	0x3fe45f30
 8021fb0:	2e000000 	.word	0x2e000000
 8021fb4:	3ba3198a 	.word	0x3ba3198a
 8021fb8:	252049c1 	.word	0x252049c1
 8021fbc:	397b839a 	.word	0x397b839a
 8021fc0:	3fe921fb 	.word	0x3fe921fb
 8021fc4:	4002d97b 	.word	0x4002d97b
 8021fc8:	3ff921fb 	.word	0x3ff921fb
 8021fcc:	413921fb 	.word	0x413921fb
 8021fd0:	3fe00000 	.word	0x3fe00000
 8021fd4:	08023028 	.word	0x08023028
 8021fd8:	7fefffff 	.word	0x7fefffff
 8021fdc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8021fe0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8021fe4:	ee10 0a10 	vmov	r0, s0
 8021fe8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8021fec:	ee10 6a10 	vmov	r6, s0
 8021ff0:	460f      	mov	r7, r1
 8021ff2:	f7de fd43 	bl	8000a7c <__aeabi_d2iz>
 8021ff6:	f7de fa3d 	bl	8000474 <__aeabi_i2d>
 8021ffa:	4602      	mov	r2, r0
 8021ffc:	460b      	mov	r3, r1
 8021ffe:	4630      	mov	r0, r6
 8022000:	4639      	mov	r1, r7
 8022002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022006:	f7de f8e7 	bl	80001d8 <__aeabi_dsub>
 802200a:	4b22      	ldr	r3, [pc, #136]	; (8022094 <__ieee754_rem_pio2+0x40c>)
 802200c:	2200      	movs	r2, #0
 802200e:	f7de fa9b 	bl	8000548 <__aeabi_dmul>
 8022012:	460f      	mov	r7, r1
 8022014:	4606      	mov	r6, r0
 8022016:	f7de fd31 	bl	8000a7c <__aeabi_d2iz>
 802201a:	f7de fa2b 	bl	8000474 <__aeabi_i2d>
 802201e:	4602      	mov	r2, r0
 8022020:	460b      	mov	r3, r1
 8022022:	4630      	mov	r0, r6
 8022024:	4639      	mov	r1, r7
 8022026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802202a:	f7de f8d5 	bl	80001d8 <__aeabi_dsub>
 802202e:	4b19      	ldr	r3, [pc, #100]	; (8022094 <__ieee754_rem_pio2+0x40c>)
 8022030:	2200      	movs	r2, #0
 8022032:	f7de fa89 	bl	8000548 <__aeabi_dmul>
 8022036:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802203a:	ad04      	add	r5, sp, #16
 802203c:	f04f 0803 	mov.w	r8, #3
 8022040:	46a9      	mov	r9, r5
 8022042:	2600      	movs	r6, #0
 8022044:	2700      	movs	r7, #0
 8022046:	4632      	mov	r2, r6
 8022048:	463b      	mov	r3, r7
 802204a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 802204e:	46c3      	mov	fp, r8
 8022050:	3d08      	subs	r5, #8
 8022052:	f108 38ff 	add.w	r8, r8, #4294967295
 8022056:	f7de fcdf 	bl	8000a18 <__aeabi_dcmpeq>
 802205a:	2800      	cmp	r0, #0
 802205c:	d1f3      	bne.n	8022046 <__ieee754_rem_pio2+0x3be>
 802205e:	4b0e      	ldr	r3, [pc, #56]	; (8022098 <__ieee754_rem_pio2+0x410>)
 8022060:	9301      	str	r3, [sp, #4]
 8022062:	2302      	movs	r3, #2
 8022064:	9300      	str	r3, [sp, #0]
 8022066:	4622      	mov	r2, r4
 8022068:	465b      	mov	r3, fp
 802206a:	4651      	mov	r1, sl
 802206c:	4648      	mov	r0, r9
 802206e:	f000 f817 	bl	80220a0 <__kernel_rem_pio2>
 8022072:	9b02      	ldr	r3, [sp, #8]
 8022074:	2b00      	cmp	r3, #0
 8022076:	4683      	mov	fp, r0
 8022078:	f6bf ae46 	bge.w	8021d08 <__ieee754_rem_pio2+0x80>
 802207c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8022080:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022084:	f8ca 3004 	str.w	r3, [sl, #4]
 8022088:	f8da 300c 	ldr.w	r3, [sl, #12]
 802208c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022090:	e73a      	b.n	8021f08 <__ieee754_rem_pio2+0x280>
 8022092:	bf00      	nop
 8022094:	41700000 	.word	0x41700000
 8022098:	080230a8 	.word	0x080230a8
 802209c:	00000000 	.word	0x00000000

080220a0 <__kernel_rem_pio2>:
 80220a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220a4:	ed2d 8b02 	vpush	{d8}
 80220a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80220ac:	f112 0f14 	cmn.w	r2, #20
 80220b0:	9308      	str	r3, [sp, #32]
 80220b2:	9101      	str	r1, [sp, #4]
 80220b4:	4bc6      	ldr	r3, [pc, #792]	; (80223d0 <__kernel_rem_pio2+0x330>)
 80220b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80220b8:	9009      	str	r0, [sp, #36]	; 0x24
 80220ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80220be:	9304      	str	r3, [sp, #16]
 80220c0:	9b08      	ldr	r3, [sp, #32]
 80220c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80220c6:	bfa8      	it	ge
 80220c8:	1ed4      	subge	r4, r2, #3
 80220ca:	9306      	str	r3, [sp, #24]
 80220cc:	bfb2      	itee	lt
 80220ce:	2400      	movlt	r4, #0
 80220d0:	2318      	movge	r3, #24
 80220d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80220d6:	f06f 0317 	mvn.w	r3, #23
 80220da:	fb04 3303 	mla	r3, r4, r3, r3
 80220de:	eb03 0a02 	add.w	sl, r3, r2
 80220e2:	9b04      	ldr	r3, [sp, #16]
 80220e4:	9a06      	ldr	r2, [sp, #24]
 80220e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80223c0 <__kernel_rem_pio2+0x320>
 80220ea:	eb03 0802 	add.w	r8, r3, r2
 80220ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80220f0:	1aa7      	subs	r7, r4, r2
 80220f2:	ae20      	add	r6, sp, #128	; 0x80
 80220f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80220f8:	2500      	movs	r5, #0
 80220fa:	4545      	cmp	r5, r8
 80220fc:	dd18      	ble.n	8022130 <__kernel_rem_pio2+0x90>
 80220fe:	9b08      	ldr	r3, [sp, #32]
 8022100:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022104:	aa20      	add	r2, sp, #128	; 0x80
 8022106:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80223c0 <__kernel_rem_pio2+0x320>
 802210a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802210e:	f1c3 0301 	rsb	r3, r3, #1
 8022112:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8022116:	9307      	str	r3, [sp, #28]
 8022118:	9b07      	ldr	r3, [sp, #28]
 802211a:	9a04      	ldr	r2, [sp, #16]
 802211c:	4443      	add	r3, r8
 802211e:	429a      	cmp	r2, r3
 8022120:	db2f      	blt.n	8022182 <__kernel_rem_pio2+0xe2>
 8022122:	ed8d 8b02 	vstr	d8, [sp, #8]
 8022126:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802212a:	462f      	mov	r7, r5
 802212c:	2600      	movs	r6, #0
 802212e:	e01b      	b.n	8022168 <__kernel_rem_pio2+0xc8>
 8022130:	42ef      	cmn	r7, r5
 8022132:	d407      	bmi.n	8022144 <__kernel_rem_pio2+0xa4>
 8022134:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8022138:	f7de f99c 	bl	8000474 <__aeabi_i2d>
 802213c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8022140:	3501      	adds	r5, #1
 8022142:	e7da      	b.n	80220fa <__kernel_rem_pio2+0x5a>
 8022144:	ec51 0b18 	vmov	r0, r1, d8
 8022148:	e7f8      	b.n	802213c <__kernel_rem_pio2+0x9c>
 802214a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802214e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8022152:	f7de f9f9 	bl	8000548 <__aeabi_dmul>
 8022156:	4602      	mov	r2, r0
 8022158:	460b      	mov	r3, r1
 802215a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802215e:	f7de f83d 	bl	80001dc <__adddf3>
 8022162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022166:	3601      	adds	r6, #1
 8022168:	9b06      	ldr	r3, [sp, #24]
 802216a:	429e      	cmp	r6, r3
 802216c:	f1a7 0708 	sub.w	r7, r7, #8
 8022170:	ddeb      	ble.n	802214a <__kernel_rem_pio2+0xaa>
 8022172:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022176:	3508      	adds	r5, #8
 8022178:	ecab 7b02 	vstmia	fp!, {d7}
 802217c:	f108 0801 	add.w	r8, r8, #1
 8022180:	e7ca      	b.n	8022118 <__kernel_rem_pio2+0x78>
 8022182:	9b04      	ldr	r3, [sp, #16]
 8022184:	aa0c      	add	r2, sp, #48	; 0x30
 8022186:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802218a:	930b      	str	r3, [sp, #44]	; 0x2c
 802218c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 802218e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022192:	9c04      	ldr	r4, [sp, #16]
 8022194:	930a      	str	r3, [sp, #40]	; 0x28
 8022196:	ab98      	add	r3, sp, #608	; 0x260
 8022198:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802219c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80221a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80221a4:	f8cd b008 	str.w	fp, [sp, #8]
 80221a8:	4625      	mov	r5, r4
 80221aa:	2d00      	cmp	r5, #0
 80221ac:	dc78      	bgt.n	80222a0 <__kernel_rem_pio2+0x200>
 80221ae:	ec47 6b10 	vmov	d0, r6, r7
 80221b2:	4650      	mov	r0, sl
 80221b4:	f000 fd14 	bl	8022be0 <scalbn>
 80221b8:	ec57 6b10 	vmov	r6, r7, d0
 80221bc:	2200      	movs	r2, #0
 80221be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80221c2:	ee10 0a10 	vmov	r0, s0
 80221c6:	4639      	mov	r1, r7
 80221c8:	f7de f9be 	bl	8000548 <__aeabi_dmul>
 80221cc:	ec41 0b10 	vmov	d0, r0, r1
 80221d0:	f000 fc86 	bl	8022ae0 <floor>
 80221d4:	4b7f      	ldr	r3, [pc, #508]	; (80223d4 <__kernel_rem_pio2+0x334>)
 80221d6:	ec51 0b10 	vmov	r0, r1, d0
 80221da:	2200      	movs	r2, #0
 80221dc:	f7de f9b4 	bl	8000548 <__aeabi_dmul>
 80221e0:	4602      	mov	r2, r0
 80221e2:	460b      	mov	r3, r1
 80221e4:	4630      	mov	r0, r6
 80221e6:	4639      	mov	r1, r7
 80221e8:	f7dd fff6 	bl	80001d8 <__aeabi_dsub>
 80221ec:	460f      	mov	r7, r1
 80221ee:	4606      	mov	r6, r0
 80221f0:	f7de fc44 	bl	8000a7c <__aeabi_d2iz>
 80221f4:	9007      	str	r0, [sp, #28]
 80221f6:	f7de f93d 	bl	8000474 <__aeabi_i2d>
 80221fa:	4602      	mov	r2, r0
 80221fc:	460b      	mov	r3, r1
 80221fe:	4630      	mov	r0, r6
 8022200:	4639      	mov	r1, r7
 8022202:	f7dd ffe9 	bl	80001d8 <__aeabi_dsub>
 8022206:	f1ba 0f00 	cmp.w	sl, #0
 802220a:	4606      	mov	r6, r0
 802220c:	460f      	mov	r7, r1
 802220e:	dd70      	ble.n	80222f2 <__kernel_rem_pio2+0x252>
 8022210:	1e62      	subs	r2, r4, #1
 8022212:	ab0c      	add	r3, sp, #48	; 0x30
 8022214:	9d07      	ldr	r5, [sp, #28]
 8022216:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802221a:	f1ca 0118 	rsb	r1, sl, #24
 802221e:	fa40 f301 	asr.w	r3, r0, r1
 8022222:	441d      	add	r5, r3
 8022224:	408b      	lsls	r3, r1
 8022226:	1ac0      	subs	r0, r0, r3
 8022228:	ab0c      	add	r3, sp, #48	; 0x30
 802222a:	9507      	str	r5, [sp, #28]
 802222c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8022230:	f1ca 0317 	rsb	r3, sl, #23
 8022234:	fa40 f303 	asr.w	r3, r0, r3
 8022238:	9302      	str	r3, [sp, #8]
 802223a:	9b02      	ldr	r3, [sp, #8]
 802223c:	2b00      	cmp	r3, #0
 802223e:	dd66      	ble.n	802230e <__kernel_rem_pio2+0x26e>
 8022240:	9b07      	ldr	r3, [sp, #28]
 8022242:	2200      	movs	r2, #0
 8022244:	3301      	adds	r3, #1
 8022246:	9307      	str	r3, [sp, #28]
 8022248:	4615      	mov	r5, r2
 802224a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 802224e:	4294      	cmp	r4, r2
 8022250:	f300 8099 	bgt.w	8022386 <__kernel_rem_pio2+0x2e6>
 8022254:	f1ba 0f00 	cmp.w	sl, #0
 8022258:	dd07      	ble.n	802226a <__kernel_rem_pio2+0x1ca>
 802225a:	f1ba 0f01 	cmp.w	sl, #1
 802225e:	f000 80a5 	beq.w	80223ac <__kernel_rem_pio2+0x30c>
 8022262:	f1ba 0f02 	cmp.w	sl, #2
 8022266:	f000 80c1 	beq.w	80223ec <__kernel_rem_pio2+0x34c>
 802226a:	9b02      	ldr	r3, [sp, #8]
 802226c:	2b02      	cmp	r3, #2
 802226e:	d14e      	bne.n	802230e <__kernel_rem_pio2+0x26e>
 8022270:	4632      	mov	r2, r6
 8022272:	463b      	mov	r3, r7
 8022274:	4958      	ldr	r1, [pc, #352]	; (80223d8 <__kernel_rem_pio2+0x338>)
 8022276:	2000      	movs	r0, #0
 8022278:	f7dd ffae 	bl	80001d8 <__aeabi_dsub>
 802227c:	4606      	mov	r6, r0
 802227e:	460f      	mov	r7, r1
 8022280:	2d00      	cmp	r5, #0
 8022282:	d044      	beq.n	802230e <__kernel_rem_pio2+0x26e>
 8022284:	4650      	mov	r0, sl
 8022286:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80223c8 <__kernel_rem_pio2+0x328>
 802228a:	f000 fca9 	bl	8022be0 <scalbn>
 802228e:	4630      	mov	r0, r6
 8022290:	4639      	mov	r1, r7
 8022292:	ec53 2b10 	vmov	r2, r3, d0
 8022296:	f7dd ff9f 	bl	80001d8 <__aeabi_dsub>
 802229a:	4606      	mov	r6, r0
 802229c:	460f      	mov	r7, r1
 802229e:	e036      	b.n	802230e <__kernel_rem_pio2+0x26e>
 80222a0:	4b4e      	ldr	r3, [pc, #312]	; (80223dc <__kernel_rem_pio2+0x33c>)
 80222a2:	2200      	movs	r2, #0
 80222a4:	4630      	mov	r0, r6
 80222a6:	4639      	mov	r1, r7
 80222a8:	f7de f94e 	bl	8000548 <__aeabi_dmul>
 80222ac:	f7de fbe6 	bl	8000a7c <__aeabi_d2iz>
 80222b0:	f7de f8e0 	bl	8000474 <__aeabi_i2d>
 80222b4:	4b4a      	ldr	r3, [pc, #296]	; (80223e0 <__kernel_rem_pio2+0x340>)
 80222b6:	2200      	movs	r2, #0
 80222b8:	4680      	mov	r8, r0
 80222ba:	4689      	mov	r9, r1
 80222bc:	f7de f944 	bl	8000548 <__aeabi_dmul>
 80222c0:	4602      	mov	r2, r0
 80222c2:	460b      	mov	r3, r1
 80222c4:	4630      	mov	r0, r6
 80222c6:	4639      	mov	r1, r7
 80222c8:	f7dd ff86 	bl	80001d8 <__aeabi_dsub>
 80222cc:	f7de fbd6 	bl	8000a7c <__aeabi_d2iz>
 80222d0:	9b02      	ldr	r3, [sp, #8]
 80222d2:	f843 0b04 	str.w	r0, [r3], #4
 80222d6:	3d01      	subs	r5, #1
 80222d8:	9302      	str	r3, [sp, #8]
 80222da:	ab70      	add	r3, sp, #448	; 0x1c0
 80222dc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80222e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222e4:	4640      	mov	r0, r8
 80222e6:	4649      	mov	r1, r9
 80222e8:	f7dd ff78 	bl	80001dc <__adddf3>
 80222ec:	4606      	mov	r6, r0
 80222ee:	460f      	mov	r7, r1
 80222f0:	e75b      	b.n	80221aa <__kernel_rem_pio2+0x10a>
 80222f2:	d105      	bne.n	8022300 <__kernel_rem_pio2+0x260>
 80222f4:	1e63      	subs	r3, r4, #1
 80222f6:	aa0c      	add	r2, sp, #48	; 0x30
 80222f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80222fc:	15c3      	asrs	r3, r0, #23
 80222fe:	e79b      	b.n	8022238 <__kernel_rem_pio2+0x198>
 8022300:	4b38      	ldr	r3, [pc, #224]	; (80223e4 <__kernel_rem_pio2+0x344>)
 8022302:	2200      	movs	r2, #0
 8022304:	f7de fba6 	bl	8000a54 <__aeabi_dcmpge>
 8022308:	2800      	cmp	r0, #0
 802230a:	d139      	bne.n	8022380 <__kernel_rem_pio2+0x2e0>
 802230c:	9002      	str	r0, [sp, #8]
 802230e:	2200      	movs	r2, #0
 8022310:	2300      	movs	r3, #0
 8022312:	4630      	mov	r0, r6
 8022314:	4639      	mov	r1, r7
 8022316:	f7de fb7f 	bl	8000a18 <__aeabi_dcmpeq>
 802231a:	2800      	cmp	r0, #0
 802231c:	f000 80b4 	beq.w	8022488 <__kernel_rem_pio2+0x3e8>
 8022320:	f104 3bff 	add.w	fp, r4, #4294967295
 8022324:	465b      	mov	r3, fp
 8022326:	2200      	movs	r2, #0
 8022328:	9904      	ldr	r1, [sp, #16]
 802232a:	428b      	cmp	r3, r1
 802232c:	da65      	bge.n	80223fa <__kernel_rem_pio2+0x35a>
 802232e:	2a00      	cmp	r2, #0
 8022330:	d07b      	beq.n	802242a <__kernel_rem_pio2+0x38a>
 8022332:	ab0c      	add	r3, sp, #48	; 0x30
 8022334:	f1aa 0a18 	sub.w	sl, sl, #24
 8022338:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 802233c:	2b00      	cmp	r3, #0
 802233e:	f000 80a0 	beq.w	8022482 <__kernel_rem_pio2+0x3e2>
 8022342:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80223c8 <__kernel_rem_pio2+0x328>
 8022346:	4650      	mov	r0, sl
 8022348:	f000 fc4a 	bl	8022be0 <scalbn>
 802234c:	4f23      	ldr	r7, [pc, #140]	; (80223dc <__kernel_rem_pio2+0x33c>)
 802234e:	ec55 4b10 	vmov	r4, r5, d0
 8022352:	46d8      	mov	r8, fp
 8022354:	2600      	movs	r6, #0
 8022356:	f1b8 0f00 	cmp.w	r8, #0
 802235a:	f280 80cf 	bge.w	80224fc <__kernel_rem_pio2+0x45c>
 802235e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80223c0 <__kernel_rem_pio2+0x320>
 8022362:	465f      	mov	r7, fp
 8022364:	f04f 0800 	mov.w	r8, #0
 8022368:	2f00      	cmp	r7, #0
 802236a:	f2c0 80fd 	blt.w	8022568 <__kernel_rem_pio2+0x4c8>
 802236e:	ab70      	add	r3, sp, #448	; 0x1c0
 8022370:	f8df a074 	ldr.w	sl, [pc, #116]	; 80223e8 <__kernel_rem_pio2+0x348>
 8022374:	ec55 4b18 	vmov	r4, r5, d8
 8022378:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 802237c:	2600      	movs	r6, #0
 802237e:	e0e5      	b.n	802254c <__kernel_rem_pio2+0x4ac>
 8022380:	2302      	movs	r3, #2
 8022382:	9302      	str	r3, [sp, #8]
 8022384:	e75c      	b.n	8022240 <__kernel_rem_pio2+0x1a0>
 8022386:	f8db 3000 	ldr.w	r3, [fp]
 802238a:	b955      	cbnz	r5, 80223a2 <__kernel_rem_pio2+0x302>
 802238c:	b123      	cbz	r3, 8022398 <__kernel_rem_pio2+0x2f8>
 802238e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8022392:	f8cb 3000 	str.w	r3, [fp]
 8022396:	2301      	movs	r3, #1
 8022398:	3201      	adds	r2, #1
 802239a:	f10b 0b04 	add.w	fp, fp, #4
 802239e:	461d      	mov	r5, r3
 80223a0:	e755      	b.n	802224e <__kernel_rem_pio2+0x1ae>
 80223a2:	1acb      	subs	r3, r1, r3
 80223a4:	f8cb 3000 	str.w	r3, [fp]
 80223a8:	462b      	mov	r3, r5
 80223aa:	e7f5      	b.n	8022398 <__kernel_rem_pio2+0x2f8>
 80223ac:	1e62      	subs	r2, r4, #1
 80223ae:	ab0c      	add	r3, sp, #48	; 0x30
 80223b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80223b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80223b8:	a90c      	add	r1, sp, #48	; 0x30
 80223ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80223be:	e754      	b.n	802226a <__kernel_rem_pio2+0x1ca>
	...
 80223cc:	3ff00000 	.word	0x3ff00000
 80223d0:	080231f0 	.word	0x080231f0
 80223d4:	40200000 	.word	0x40200000
 80223d8:	3ff00000 	.word	0x3ff00000
 80223dc:	3e700000 	.word	0x3e700000
 80223e0:	41700000 	.word	0x41700000
 80223e4:	3fe00000 	.word	0x3fe00000
 80223e8:	080231b0 	.word	0x080231b0
 80223ec:	1e62      	subs	r2, r4, #1
 80223ee:	ab0c      	add	r3, sp, #48	; 0x30
 80223f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80223f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80223f8:	e7de      	b.n	80223b8 <__kernel_rem_pio2+0x318>
 80223fa:	a90c      	add	r1, sp, #48	; 0x30
 80223fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8022400:	3b01      	subs	r3, #1
 8022402:	430a      	orrs	r2, r1
 8022404:	e790      	b.n	8022328 <__kernel_rem_pio2+0x288>
 8022406:	3301      	adds	r3, #1
 8022408:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 802240c:	2900      	cmp	r1, #0
 802240e:	d0fa      	beq.n	8022406 <__kernel_rem_pio2+0x366>
 8022410:	9a08      	ldr	r2, [sp, #32]
 8022412:	18e3      	adds	r3, r4, r3
 8022414:	18a6      	adds	r6, r4, r2
 8022416:	aa20      	add	r2, sp, #128	; 0x80
 8022418:	1c65      	adds	r5, r4, #1
 802241a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 802241e:	9302      	str	r3, [sp, #8]
 8022420:	9b02      	ldr	r3, [sp, #8]
 8022422:	42ab      	cmp	r3, r5
 8022424:	da04      	bge.n	8022430 <__kernel_rem_pio2+0x390>
 8022426:	461c      	mov	r4, r3
 8022428:	e6b5      	b.n	8022196 <__kernel_rem_pio2+0xf6>
 802242a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802242c:	2301      	movs	r3, #1
 802242e:	e7eb      	b.n	8022408 <__kernel_rem_pio2+0x368>
 8022430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022436:	f7de f81d 	bl	8000474 <__aeabi_i2d>
 802243a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802243e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022440:	46b3      	mov	fp, r6
 8022442:	461c      	mov	r4, r3
 8022444:	2700      	movs	r7, #0
 8022446:	f04f 0800 	mov.w	r8, #0
 802244a:	f04f 0900 	mov.w	r9, #0
 802244e:	9b06      	ldr	r3, [sp, #24]
 8022450:	429f      	cmp	r7, r3
 8022452:	dd06      	ble.n	8022462 <__kernel_rem_pio2+0x3c2>
 8022454:	ab70      	add	r3, sp, #448	; 0x1c0
 8022456:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802245a:	e9c3 8900 	strd	r8, r9, [r3]
 802245e:	3501      	adds	r5, #1
 8022460:	e7de      	b.n	8022420 <__kernel_rem_pio2+0x380>
 8022462:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8022466:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802246a:	f7de f86d 	bl	8000548 <__aeabi_dmul>
 802246e:	4602      	mov	r2, r0
 8022470:	460b      	mov	r3, r1
 8022472:	4640      	mov	r0, r8
 8022474:	4649      	mov	r1, r9
 8022476:	f7dd feb1 	bl	80001dc <__adddf3>
 802247a:	3701      	adds	r7, #1
 802247c:	4680      	mov	r8, r0
 802247e:	4689      	mov	r9, r1
 8022480:	e7e5      	b.n	802244e <__kernel_rem_pio2+0x3ae>
 8022482:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022486:	e754      	b.n	8022332 <__kernel_rem_pio2+0x292>
 8022488:	ec47 6b10 	vmov	d0, r6, r7
 802248c:	f1ca 0000 	rsb	r0, sl, #0
 8022490:	f000 fba6 	bl	8022be0 <scalbn>
 8022494:	ec57 6b10 	vmov	r6, r7, d0
 8022498:	4b9f      	ldr	r3, [pc, #636]	; (8022718 <__kernel_rem_pio2+0x678>)
 802249a:	ee10 0a10 	vmov	r0, s0
 802249e:	2200      	movs	r2, #0
 80224a0:	4639      	mov	r1, r7
 80224a2:	f7de fad7 	bl	8000a54 <__aeabi_dcmpge>
 80224a6:	b300      	cbz	r0, 80224ea <__kernel_rem_pio2+0x44a>
 80224a8:	4b9c      	ldr	r3, [pc, #624]	; (802271c <__kernel_rem_pio2+0x67c>)
 80224aa:	2200      	movs	r2, #0
 80224ac:	4630      	mov	r0, r6
 80224ae:	4639      	mov	r1, r7
 80224b0:	f7de f84a 	bl	8000548 <__aeabi_dmul>
 80224b4:	f7de fae2 	bl	8000a7c <__aeabi_d2iz>
 80224b8:	4605      	mov	r5, r0
 80224ba:	f7dd ffdb 	bl	8000474 <__aeabi_i2d>
 80224be:	4b96      	ldr	r3, [pc, #600]	; (8022718 <__kernel_rem_pio2+0x678>)
 80224c0:	2200      	movs	r2, #0
 80224c2:	f7de f841 	bl	8000548 <__aeabi_dmul>
 80224c6:	460b      	mov	r3, r1
 80224c8:	4602      	mov	r2, r0
 80224ca:	4639      	mov	r1, r7
 80224cc:	4630      	mov	r0, r6
 80224ce:	f7dd fe83 	bl	80001d8 <__aeabi_dsub>
 80224d2:	f7de fad3 	bl	8000a7c <__aeabi_d2iz>
 80224d6:	f104 0b01 	add.w	fp, r4, #1
 80224da:	ab0c      	add	r3, sp, #48	; 0x30
 80224dc:	f10a 0a18 	add.w	sl, sl, #24
 80224e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80224e4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80224e8:	e72b      	b.n	8022342 <__kernel_rem_pio2+0x2a2>
 80224ea:	4630      	mov	r0, r6
 80224ec:	4639      	mov	r1, r7
 80224ee:	f7de fac5 	bl	8000a7c <__aeabi_d2iz>
 80224f2:	ab0c      	add	r3, sp, #48	; 0x30
 80224f4:	46a3      	mov	fp, r4
 80224f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80224fa:	e722      	b.n	8022342 <__kernel_rem_pio2+0x2a2>
 80224fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80224fe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8022502:	ab0c      	add	r3, sp, #48	; 0x30
 8022504:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8022508:	f7dd ffb4 	bl	8000474 <__aeabi_i2d>
 802250c:	4622      	mov	r2, r4
 802250e:	462b      	mov	r3, r5
 8022510:	f7de f81a 	bl	8000548 <__aeabi_dmul>
 8022514:	4632      	mov	r2, r6
 8022516:	e9c9 0100 	strd	r0, r1, [r9]
 802251a:	463b      	mov	r3, r7
 802251c:	4620      	mov	r0, r4
 802251e:	4629      	mov	r1, r5
 8022520:	f7de f812 	bl	8000548 <__aeabi_dmul>
 8022524:	f108 38ff 	add.w	r8, r8, #4294967295
 8022528:	4604      	mov	r4, r0
 802252a:	460d      	mov	r5, r1
 802252c:	e713      	b.n	8022356 <__kernel_rem_pio2+0x2b6>
 802252e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8022532:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8022536:	f7de f807 	bl	8000548 <__aeabi_dmul>
 802253a:	4602      	mov	r2, r0
 802253c:	460b      	mov	r3, r1
 802253e:	4620      	mov	r0, r4
 8022540:	4629      	mov	r1, r5
 8022542:	f7dd fe4b 	bl	80001dc <__adddf3>
 8022546:	3601      	adds	r6, #1
 8022548:	4604      	mov	r4, r0
 802254a:	460d      	mov	r5, r1
 802254c:	9b04      	ldr	r3, [sp, #16]
 802254e:	429e      	cmp	r6, r3
 8022550:	dc01      	bgt.n	8022556 <__kernel_rem_pio2+0x4b6>
 8022552:	45b0      	cmp	r8, r6
 8022554:	daeb      	bge.n	802252e <__kernel_rem_pio2+0x48e>
 8022556:	ab48      	add	r3, sp, #288	; 0x120
 8022558:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802255c:	e9c3 4500 	strd	r4, r5, [r3]
 8022560:	3f01      	subs	r7, #1
 8022562:	f108 0801 	add.w	r8, r8, #1
 8022566:	e6ff      	b.n	8022368 <__kernel_rem_pio2+0x2c8>
 8022568:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 802256a:	2b02      	cmp	r3, #2
 802256c:	dc0b      	bgt.n	8022586 <__kernel_rem_pio2+0x4e6>
 802256e:	2b00      	cmp	r3, #0
 8022570:	dc6e      	bgt.n	8022650 <__kernel_rem_pio2+0x5b0>
 8022572:	d045      	beq.n	8022600 <__kernel_rem_pio2+0x560>
 8022574:	9b07      	ldr	r3, [sp, #28]
 8022576:	f003 0007 	and.w	r0, r3, #7
 802257a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 802257e:	ecbd 8b02 	vpop	{d8}
 8022582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022586:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8022588:	2b03      	cmp	r3, #3
 802258a:	d1f3      	bne.n	8022574 <__kernel_rem_pio2+0x4d4>
 802258c:	ab48      	add	r3, sp, #288	; 0x120
 802258e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8022592:	46d0      	mov	r8, sl
 8022594:	46d9      	mov	r9, fp
 8022596:	f1b9 0f00 	cmp.w	r9, #0
 802259a:	f1a8 0808 	sub.w	r8, r8, #8
 802259e:	dc64      	bgt.n	802266a <__kernel_rem_pio2+0x5ca>
 80225a0:	465c      	mov	r4, fp
 80225a2:	2c01      	cmp	r4, #1
 80225a4:	f1aa 0a08 	sub.w	sl, sl, #8
 80225a8:	dc7e      	bgt.n	80226a8 <__kernel_rem_pio2+0x608>
 80225aa:	2000      	movs	r0, #0
 80225ac:	2100      	movs	r1, #0
 80225ae:	f1bb 0f01 	cmp.w	fp, #1
 80225b2:	f300 8097 	bgt.w	80226e4 <__kernel_rem_pio2+0x644>
 80225b6:	9b02      	ldr	r3, [sp, #8]
 80225b8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80225bc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80225c0:	2b00      	cmp	r3, #0
 80225c2:	f040 8099 	bne.w	80226f8 <__kernel_rem_pio2+0x658>
 80225c6:	9b01      	ldr	r3, [sp, #4]
 80225c8:	e9c3 5600 	strd	r5, r6, [r3]
 80225cc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80225d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80225d4:	e7ce      	b.n	8022574 <__kernel_rem_pio2+0x4d4>
 80225d6:	ab48      	add	r3, sp, #288	; 0x120
 80225d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80225dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225e0:	f7dd fdfc 	bl	80001dc <__adddf3>
 80225e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80225e8:	f1bb 0f00 	cmp.w	fp, #0
 80225ec:	daf3      	bge.n	80225d6 <__kernel_rem_pio2+0x536>
 80225ee:	9b02      	ldr	r3, [sp, #8]
 80225f0:	b113      	cbz	r3, 80225f8 <__kernel_rem_pio2+0x558>
 80225f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80225f6:	4619      	mov	r1, r3
 80225f8:	9b01      	ldr	r3, [sp, #4]
 80225fa:	e9c3 0100 	strd	r0, r1, [r3]
 80225fe:	e7b9      	b.n	8022574 <__kernel_rem_pio2+0x4d4>
 8022600:	2000      	movs	r0, #0
 8022602:	2100      	movs	r1, #0
 8022604:	e7f0      	b.n	80225e8 <__kernel_rem_pio2+0x548>
 8022606:	ab48      	add	r3, sp, #288	; 0x120
 8022608:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022610:	f7dd fde4 	bl	80001dc <__adddf3>
 8022614:	3c01      	subs	r4, #1
 8022616:	2c00      	cmp	r4, #0
 8022618:	daf5      	bge.n	8022606 <__kernel_rem_pio2+0x566>
 802261a:	9b02      	ldr	r3, [sp, #8]
 802261c:	b1e3      	cbz	r3, 8022658 <__kernel_rem_pio2+0x5b8>
 802261e:	4602      	mov	r2, r0
 8022620:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022624:	9c01      	ldr	r4, [sp, #4]
 8022626:	e9c4 2300 	strd	r2, r3, [r4]
 802262a:	4602      	mov	r2, r0
 802262c:	460b      	mov	r3, r1
 802262e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8022632:	f7dd fdd1 	bl	80001d8 <__aeabi_dsub>
 8022636:	ad4a      	add	r5, sp, #296	; 0x128
 8022638:	2401      	movs	r4, #1
 802263a:	45a3      	cmp	fp, r4
 802263c:	da0f      	bge.n	802265e <__kernel_rem_pio2+0x5be>
 802263e:	9b02      	ldr	r3, [sp, #8]
 8022640:	b113      	cbz	r3, 8022648 <__kernel_rem_pio2+0x5a8>
 8022642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022646:	4619      	mov	r1, r3
 8022648:	9b01      	ldr	r3, [sp, #4]
 802264a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802264e:	e791      	b.n	8022574 <__kernel_rem_pio2+0x4d4>
 8022650:	465c      	mov	r4, fp
 8022652:	2000      	movs	r0, #0
 8022654:	2100      	movs	r1, #0
 8022656:	e7de      	b.n	8022616 <__kernel_rem_pio2+0x576>
 8022658:	4602      	mov	r2, r0
 802265a:	460b      	mov	r3, r1
 802265c:	e7e2      	b.n	8022624 <__kernel_rem_pio2+0x584>
 802265e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8022662:	f7dd fdbb 	bl	80001dc <__adddf3>
 8022666:	3401      	adds	r4, #1
 8022668:	e7e7      	b.n	802263a <__kernel_rem_pio2+0x59a>
 802266a:	e9d8 4500 	ldrd	r4, r5, [r8]
 802266e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8022672:	4620      	mov	r0, r4
 8022674:	4632      	mov	r2, r6
 8022676:	463b      	mov	r3, r7
 8022678:	4629      	mov	r1, r5
 802267a:	f7dd fdaf 	bl	80001dc <__adddf3>
 802267e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022682:	4602      	mov	r2, r0
 8022684:	460b      	mov	r3, r1
 8022686:	4620      	mov	r0, r4
 8022688:	4629      	mov	r1, r5
 802268a:	f7dd fda5 	bl	80001d8 <__aeabi_dsub>
 802268e:	4632      	mov	r2, r6
 8022690:	463b      	mov	r3, r7
 8022692:	f7dd fda3 	bl	80001dc <__adddf3>
 8022696:	ed9d 7b04 	vldr	d7, [sp, #16]
 802269a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 802269e:	ed88 7b00 	vstr	d7, [r8]
 80226a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80226a6:	e776      	b.n	8022596 <__kernel_rem_pio2+0x4f6>
 80226a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80226ac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80226b0:	4640      	mov	r0, r8
 80226b2:	4632      	mov	r2, r6
 80226b4:	463b      	mov	r3, r7
 80226b6:	4649      	mov	r1, r9
 80226b8:	f7dd fd90 	bl	80001dc <__adddf3>
 80226bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80226c0:	4602      	mov	r2, r0
 80226c2:	460b      	mov	r3, r1
 80226c4:	4640      	mov	r0, r8
 80226c6:	4649      	mov	r1, r9
 80226c8:	f7dd fd86 	bl	80001d8 <__aeabi_dsub>
 80226cc:	4632      	mov	r2, r6
 80226ce:	463b      	mov	r3, r7
 80226d0:	f7dd fd84 	bl	80001dc <__adddf3>
 80226d4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80226d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80226dc:	ed8a 7b00 	vstr	d7, [sl]
 80226e0:	3c01      	subs	r4, #1
 80226e2:	e75e      	b.n	80225a2 <__kernel_rem_pio2+0x502>
 80226e4:	ab48      	add	r3, sp, #288	; 0x120
 80226e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80226ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226ee:	f7dd fd75 	bl	80001dc <__adddf3>
 80226f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80226f6:	e75a      	b.n	80225ae <__kernel_rem_pio2+0x50e>
 80226f8:	9b01      	ldr	r3, [sp, #4]
 80226fa:	9a01      	ldr	r2, [sp, #4]
 80226fc:	601d      	str	r5, [r3, #0]
 80226fe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8022702:	605c      	str	r4, [r3, #4]
 8022704:	609f      	str	r7, [r3, #8]
 8022706:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 802270a:	60d3      	str	r3, [r2, #12]
 802270c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022710:	6110      	str	r0, [r2, #16]
 8022712:	6153      	str	r3, [r2, #20]
 8022714:	e72e      	b.n	8022574 <__kernel_rem_pio2+0x4d4>
 8022716:	bf00      	nop
 8022718:	41700000 	.word	0x41700000
 802271c:	3e700000 	.word	0x3e700000

08022720 <__kernel_tan>:
 8022720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022724:	ed2d 8b04 	vpush	{d8-d9}
 8022728:	ec5b ab10 	vmov	sl, fp, d0
 802272c:	4be2      	ldr	r3, [pc, #904]	; (8022ab8 <__kernel_tan+0x398>)
 802272e:	b085      	sub	sp, #20
 8022730:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8022734:	429f      	cmp	r7, r3
 8022736:	ed8d 1b00 	vstr	d1, [sp]
 802273a:	4606      	mov	r6, r0
 802273c:	f8cd b00c 	str.w	fp, [sp, #12]
 8022740:	dc24      	bgt.n	802278c <__kernel_tan+0x6c>
 8022742:	ee10 0a10 	vmov	r0, s0
 8022746:	4659      	mov	r1, fp
 8022748:	f7de f998 	bl	8000a7c <__aeabi_d2iz>
 802274c:	2800      	cmp	r0, #0
 802274e:	d148      	bne.n	80227e2 <__kernel_tan+0xc2>
 8022750:	1c73      	adds	r3, r6, #1
 8022752:	4652      	mov	r2, sl
 8022754:	4313      	orrs	r3, r2
 8022756:	433b      	orrs	r3, r7
 8022758:	d112      	bne.n	8022780 <__kernel_tan+0x60>
 802275a:	ec4b ab10 	vmov	d0, sl, fp
 802275e:	f000 f9b3 	bl	8022ac8 <fabs>
 8022762:	49d6      	ldr	r1, [pc, #856]	; (8022abc <__kernel_tan+0x39c>)
 8022764:	ec53 2b10 	vmov	r2, r3, d0
 8022768:	2000      	movs	r0, #0
 802276a:	f7de f817 	bl	800079c <__aeabi_ddiv>
 802276e:	4682      	mov	sl, r0
 8022770:	468b      	mov	fp, r1
 8022772:	ec4b ab10 	vmov	d0, sl, fp
 8022776:	b005      	add	sp, #20
 8022778:	ecbd 8b04 	vpop	{d8-d9}
 802277c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022780:	2e01      	cmp	r6, #1
 8022782:	d0f6      	beq.n	8022772 <__kernel_tan+0x52>
 8022784:	49ce      	ldr	r1, [pc, #824]	; (8022ac0 <__kernel_tan+0x3a0>)
 8022786:	465b      	mov	r3, fp
 8022788:	2000      	movs	r0, #0
 802278a:	e7ee      	b.n	802276a <__kernel_tan+0x4a>
 802278c:	4bcd      	ldr	r3, [pc, #820]	; (8022ac4 <__kernel_tan+0x3a4>)
 802278e:	429f      	cmp	r7, r3
 8022790:	dd27      	ble.n	80227e2 <__kernel_tan+0xc2>
 8022792:	9b03      	ldr	r3, [sp, #12]
 8022794:	2b00      	cmp	r3, #0
 8022796:	da0a      	bge.n	80227ae <__kernel_tan+0x8e>
 8022798:	e9dd 2100 	ldrd	r2, r1, [sp]
 802279c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80227a0:	469b      	mov	fp, r3
 80227a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80227a6:	e9cd 2300 	strd	r2, r3, [sp]
 80227aa:	ee10 aa10 	vmov	sl, s0
 80227ae:	4652      	mov	r2, sl
 80227b0:	465b      	mov	r3, fp
 80227b2:	a1a1      	add	r1, pc, #644	; (adr r1, 8022a38 <__kernel_tan+0x318>)
 80227b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80227b8:	f7dd fd0e 	bl	80001d8 <__aeabi_dsub>
 80227bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80227c0:	4604      	mov	r4, r0
 80227c2:	460d      	mov	r5, r1
 80227c4:	a19e      	add	r1, pc, #632	; (adr r1, 8022a40 <__kernel_tan+0x320>)
 80227c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80227ca:	f7dd fd05 	bl	80001d8 <__aeabi_dsub>
 80227ce:	4622      	mov	r2, r4
 80227d0:	462b      	mov	r3, r5
 80227d2:	f7dd fd03 	bl	80001dc <__adddf3>
 80227d6:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 8022a48 <__kernel_tan+0x328>
 80227da:	ed8d 7b00 	vstr	d7, [sp]
 80227de:	4682      	mov	sl, r0
 80227e0:	468b      	mov	fp, r1
 80227e2:	4652      	mov	r2, sl
 80227e4:	465b      	mov	r3, fp
 80227e6:	4650      	mov	r0, sl
 80227e8:	4659      	mov	r1, fp
 80227ea:	f7dd fead 	bl	8000548 <__aeabi_dmul>
 80227ee:	4602      	mov	r2, r0
 80227f0:	460b      	mov	r3, r1
 80227f2:	4680      	mov	r8, r0
 80227f4:	4689      	mov	r9, r1
 80227f6:	f7dd fea7 	bl	8000548 <__aeabi_dmul>
 80227fa:	4642      	mov	r2, r8
 80227fc:	4604      	mov	r4, r0
 80227fe:	460d      	mov	r5, r1
 8022800:	464b      	mov	r3, r9
 8022802:	4650      	mov	r0, sl
 8022804:	4659      	mov	r1, fp
 8022806:	f7dd fe9f 	bl	8000548 <__aeabi_dmul>
 802280a:	a391      	add	r3, pc, #580	; (adr r3, 8022a50 <__kernel_tan+0x330>)
 802280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022810:	ec41 0b18 	vmov	d8, r0, r1
 8022814:	4620      	mov	r0, r4
 8022816:	4629      	mov	r1, r5
 8022818:	f7dd fe96 	bl	8000548 <__aeabi_dmul>
 802281c:	a38e      	add	r3, pc, #568	; (adr r3, 8022a58 <__kernel_tan+0x338>)
 802281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022822:	f7dd fcdb 	bl	80001dc <__adddf3>
 8022826:	4622      	mov	r2, r4
 8022828:	462b      	mov	r3, r5
 802282a:	f7dd fe8d 	bl	8000548 <__aeabi_dmul>
 802282e:	a38c      	add	r3, pc, #560	; (adr r3, 8022a60 <__kernel_tan+0x340>)
 8022830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022834:	f7dd fcd2 	bl	80001dc <__adddf3>
 8022838:	4622      	mov	r2, r4
 802283a:	462b      	mov	r3, r5
 802283c:	f7dd fe84 	bl	8000548 <__aeabi_dmul>
 8022840:	a389      	add	r3, pc, #548	; (adr r3, 8022a68 <__kernel_tan+0x348>)
 8022842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022846:	f7dd fcc9 	bl	80001dc <__adddf3>
 802284a:	4622      	mov	r2, r4
 802284c:	462b      	mov	r3, r5
 802284e:	f7dd fe7b 	bl	8000548 <__aeabi_dmul>
 8022852:	a387      	add	r3, pc, #540	; (adr r3, 8022a70 <__kernel_tan+0x350>)
 8022854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022858:	f7dd fcc0 	bl	80001dc <__adddf3>
 802285c:	4622      	mov	r2, r4
 802285e:	462b      	mov	r3, r5
 8022860:	f7dd fe72 	bl	8000548 <__aeabi_dmul>
 8022864:	a384      	add	r3, pc, #528	; (adr r3, 8022a78 <__kernel_tan+0x358>)
 8022866:	e9d3 2300 	ldrd	r2, r3, [r3]
 802286a:	f7dd fcb7 	bl	80001dc <__adddf3>
 802286e:	4642      	mov	r2, r8
 8022870:	464b      	mov	r3, r9
 8022872:	f7dd fe69 	bl	8000548 <__aeabi_dmul>
 8022876:	a382      	add	r3, pc, #520	; (adr r3, 8022a80 <__kernel_tan+0x360>)
 8022878:	e9d3 2300 	ldrd	r2, r3, [r3]
 802287c:	ec41 0b19 	vmov	d9, r0, r1
 8022880:	4620      	mov	r0, r4
 8022882:	4629      	mov	r1, r5
 8022884:	f7dd fe60 	bl	8000548 <__aeabi_dmul>
 8022888:	a37f      	add	r3, pc, #508	; (adr r3, 8022a88 <__kernel_tan+0x368>)
 802288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802288e:	f7dd fca5 	bl	80001dc <__adddf3>
 8022892:	4622      	mov	r2, r4
 8022894:	462b      	mov	r3, r5
 8022896:	f7dd fe57 	bl	8000548 <__aeabi_dmul>
 802289a:	a37d      	add	r3, pc, #500	; (adr r3, 8022a90 <__kernel_tan+0x370>)
 802289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228a0:	f7dd fc9c 	bl	80001dc <__adddf3>
 80228a4:	4622      	mov	r2, r4
 80228a6:	462b      	mov	r3, r5
 80228a8:	f7dd fe4e 	bl	8000548 <__aeabi_dmul>
 80228ac:	a37a      	add	r3, pc, #488	; (adr r3, 8022a98 <__kernel_tan+0x378>)
 80228ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228b2:	f7dd fc93 	bl	80001dc <__adddf3>
 80228b6:	4622      	mov	r2, r4
 80228b8:	462b      	mov	r3, r5
 80228ba:	f7dd fe45 	bl	8000548 <__aeabi_dmul>
 80228be:	a378      	add	r3, pc, #480	; (adr r3, 8022aa0 <__kernel_tan+0x380>)
 80228c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228c4:	f7dd fc8a 	bl	80001dc <__adddf3>
 80228c8:	4622      	mov	r2, r4
 80228ca:	462b      	mov	r3, r5
 80228cc:	f7dd fe3c 	bl	8000548 <__aeabi_dmul>
 80228d0:	a375      	add	r3, pc, #468	; (adr r3, 8022aa8 <__kernel_tan+0x388>)
 80228d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228d6:	f7dd fc81 	bl	80001dc <__adddf3>
 80228da:	4602      	mov	r2, r0
 80228dc:	460b      	mov	r3, r1
 80228de:	ec51 0b19 	vmov	r0, r1, d9
 80228e2:	f7dd fc7b 	bl	80001dc <__adddf3>
 80228e6:	ec53 2b18 	vmov	r2, r3, d8
 80228ea:	f7dd fe2d 	bl	8000548 <__aeabi_dmul>
 80228ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80228f2:	f7dd fc73 	bl	80001dc <__adddf3>
 80228f6:	4642      	mov	r2, r8
 80228f8:	464b      	mov	r3, r9
 80228fa:	f7dd fe25 	bl	8000548 <__aeabi_dmul>
 80228fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022902:	f7dd fc6b 	bl	80001dc <__adddf3>
 8022906:	a36a      	add	r3, pc, #424	; (adr r3, 8022ab0 <__kernel_tan+0x390>)
 8022908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802290c:	4604      	mov	r4, r0
 802290e:	460d      	mov	r5, r1
 8022910:	ec51 0b18 	vmov	r0, r1, d8
 8022914:	f7dd fe18 	bl	8000548 <__aeabi_dmul>
 8022918:	4622      	mov	r2, r4
 802291a:	462b      	mov	r3, r5
 802291c:	f7dd fc5e 	bl	80001dc <__adddf3>
 8022920:	460b      	mov	r3, r1
 8022922:	ec41 0b18 	vmov	d8, r0, r1
 8022926:	4602      	mov	r2, r0
 8022928:	4659      	mov	r1, fp
 802292a:	4650      	mov	r0, sl
 802292c:	f7dd fc56 	bl	80001dc <__adddf3>
 8022930:	4b64      	ldr	r3, [pc, #400]	; (8022ac4 <__kernel_tan+0x3a4>)
 8022932:	429f      	cmp	r7, r3
 8022934:	4604      	mov	r4, r0
 8022936:	460d      	mov	r5, r1
 8022938:	dd3e      	ble.n	80229b8 <__kernel_tan+0x298>
 802293a:	4630      	mov	r0, r6
 802293c:	f7dd fd9a 	bl	8000474 <__aeabi_i2d>
 8022940:	4622      	mov	r2, r4
 8022942:	4680      	mov	r8, r0
 8022944:	4689      	mov	r9, r1
 8022946:	462b      	mov	r3, r5
 8022948:	4620      	mov	r0, r4
 802294a:	4629      	mov	r1, r5
 802294c:	f7dd fdfc 	bl	8000548 <__aeabi_dmul>
 8022950:	4642      	mov	r2, r8
 8022952:	4606      	mov	r6, r0
 8022954:	460f      	mov	r7, r1
 8022956:	464b      	mov	r3, r9
 8022958:	4620      	mov	r0, r4
 802295a:	4629      	mov	r1, r5
 802295c:	f7dd fc3e 	bl	80001dc <__adddf3>
 8022960:	4602      	mov	r2, r0
 8022962:	460b      	mov	r3, r1
 8022964:	4630      	mov	r0, r6
 8022966:	4639      	mov	r1, r7
 8022968:	f7dd ff18 	bl	800079c <__aeabi_ddiv>
 802296c:	ec53 2b18 	vmov	r2, r3, d8
 8022970:	f7dd fc32 	bl	80001d8 <__aeabi_dsub>
 8022974:	4602      	mov	r2, r0
 8022976:	460b      	mov	r3, r1
 8022978:	4650      	mov	r0, sl
 802297a:	4659      	mov	r1, fp
 802297c:	f7dd fc2c 	bl	80001d8 <__aeabi_dsub>
 8022980:	4602      	mov	r2, r0
 8022982:	460b      	mov	r3, r1
 8022984:	f7dd fc2a 	bl	80001dc <__adddf3>
 8022988:	4602      	mov	r2, r0
 802298a:	460b      	mov	r3, r1
 802298c:	4640      	mov	r0, r8
 802298e:	4649      	mov	r1, r9
 8022990:	f7dd fc22 	bl	80001d8 <__aeabi_dsub>
 8022994:	9b03      	ldr	r3, [sp, #12]
 8022996:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 802299a:	f00a 0a02 	and.w	sl, sl, #2
 802299e:	4604      	mov	r4, r0
 80229a0:	f1ca 0001 	rsb	r0, sl, #1
 80229a4:	460d      	mov	r5, r1
 80229a6:	f7dd fd65 	bl	8000474 <__aeabi_i2d>
 80229aa:	4602      	mov	r2, r0
 80229ac:	460b      	mov	r3, r1
 80229ae:	4620      	mov	r0, r4
 80229b0:	4629      	mov	r1, r5
 80229b2:	f7dd fdc9 	bl	8000548 <__aeabi_dmul>
 80229b6:	e6da      	b.n	802276e <__kernel_tan+0x4e>
 80229b8:	2e01      	cmp	r6, #1
 80229ba:	d038      	beq.n	8022a2e <__kernel_tan+0x30e>
 80229bc:	460f      	mov	r7, r1
 80229be:	4689      	mov	r9, r1
 80229c0:	4602      	mov	r2, r0
 80229c2:	460b      	mov	r3, r1
 80229c4:	2000      	movs	r0, #0
 80229c6:	493e      	ldr	r1, [pc, #248]	; (8022ac0 <__kernel_tan+0x3a0>)
 80229c8:	f7dd fee8 	bl	800079c <__aeabi_ddiv>
 80229cc:	2600      	movs	r6, #0
 80229ce:	e9cd 0100 	strd	r0, r1, [sp]
 80229d2:	4652      	mov	r2, sl
 80229d4:	465b      	mov	r3, fp
 80229d6:	4630      	mov	r0, r6
 80229d8:	4639      	mov	r1, r7
 80229da:	f7dd fbfd 	bl	80001d8 <__aeabi_dsub>
 80229de:	e9dd 4500 	ldrd	r4, r5, [sp]
 80229e2:	4602      	mov	r2, r0
 80229e4:	460b      	mov	r3, r1
 80229e6:	ec51 0b18 	vmov	r0, r1, d8
 80229ea:	f7dd fbf5 	bl	80001d8 <__aeabi_dsub>
 80229ee:	4632      	mov	r2, r6
 80229f0:	462b      	mov	r3, r5
 80229f2:	f7dd fda9 	bl	8000548 <__aeabi_dmul>
 80229f6:	46b0      	mov	r8, r6
 80229f8:	460f      	mov	r7, r1
 80229fa:	4606      	mov	r6, r0
 80229fc:	4642      	mov	r2, r8
 80229fe:	462b      	mov	r3, r5
 8022a00:	4640      	mov	r0, r8
 8022a02:	4649      	mov	r1, r9
 8022a04:	f7dd fda0 	bl	8000548 <__aeabi_dmul>
 8022a08:	4b2c      	ldr	r3, [pc, #176]	; (8022abc <__kernel_tan+0x39c>)
 8022a0a:	2200      	movs	r2, #0
 8022a0c:	f7dd fbe6 	bl	80001dc <__adddf3>
 8022a10:	4602      	mov	r2, r0
 8022a12:	460b      	mov	r3, r1
 8022a14:	4630      	mov	r0, r6
 8022a16:	4639      	mov	r1, r7
 8022a18:	f7dd fbe0 	bl	80001dc <__adddf3>
 8022a1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022a20:	f7dd fd92 	bl	8000548 <__aeabi_dmul>
 8022a24:	4642      	mov	r2, r8
 8022a26:	462b      	mov	r3, r5
 8022a28:	f7dd fbd8 	bl	80001dc <__adddf3>
 8022a2c:	e69f      	b.n	802276e <__kernel_tan+0x4e>
 8022a2e:	4682      	mov	sl, r0
 8022a30:	468b      	mov	fp, r1
 8022a32:	e69e      	b.n	8022772 <__kernel_tan+0x52>
 8022a34:	f3af 8000 	nop.w
 8022a38:	54442d18 	.word	0x54442d18
 8022a3c:	3fe921fb 	.word	0x3fe921fb
 8022a40:	33145c07 	.word	0x33145c07
 8022a44:	3c81a626 	.word	0x3c81a626
	...
 8022a50:	74bf7ad4 	.word	0x74bf7ad4
 8022a54:	3efb2a70 	.word	0x3efb2a70
 8022a58:	32f0a7e9 	.word	0x32f0a7e9
 8022a5c:	3f12b80f 	.word	0x3f12b80f
 8022a60:	1a8d1068 	.word	0x1a8d1068
 8022a64:	3f3026f7 	.word	0x3f3026f7
 8022a68:	fee08315 	.word	0xfee08315
 8022a6c:	3f57dbc8 	.word	0x3f57dbc8
 8022a70:	e96e8493 	.word	0xe96e8493
 8022a74:	3f8226e3 	.word	0x3f8226e3
 8022a78:	1bb341fe 	.word	0x1bb341fe
 8022a7c:	3faba1ba 	.word	0x3faba1ba
 8022a80:	db605373 	.word	0xdb605373
 8022a84:	bef375cb 	.word	0xbef375cb
 8022a88:	a03792a6 	.word	0xa03792a6
 8022a8c:	3f147e88 	.word	0x3f147e88
 8022a90:	f2f26501 	.word	0xf2f26501
 8022a94:	3f4344d8 	.word	0x3f4344d8
 8022a98:	c9560328 	.word	0xc9560328
 8022a9c:	3f6d6d22 	.word	0x3f6d6d22
 8022aa0:	8406d637 	.word	0x8406d637
 8022aa4:	3f9664f4 	.word	0x3f9664f4
 8022aa8:	1110fe7a 	.word	0x1110fe7a
 8022aac:	3fc11111 	.word	0x3fc11111
 8022ab0:	55555563 	.word	0x55555563
 8022ab4:	3fd55555 	.word	0x3fd55555
 8022ab8:	3e2fffff 	.word	0x3e2fffff
 8022abc:	3ff00000 	.word	0x3ff00000
 8022ac0:	bff00000 	.word	0xbff00000
 8022ac4:	3fe59427 	.word	0x3fe59427

08022ac8 <fabs>:
 8022ac8:	ec51 0b10 	vmov	r0, r1, d0
 8022acc:	ee10 2a10 	vmov	r2, s0
 8022ad0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8022ad4:	ec43 2b10 	vmov	d0, r2, r3
 8022ad8:	4770      	bx	lr
 8022ada:	0000      	movs	r0, r0
 8022adc:	0000      	movs	r0, r0
	...

08022ae0 <floor>:
 8022ae0:	ec51 0b10 	vmov	r0, r1, d0
 8022ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ae8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8022aec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022af0:	2e13      	cmp	r6, #19
 8022af2:	ee10 5a10 	vmov	r5, s0
 8022af6:	ee10 8a10 	vmov	r8, s0
 8022afa:	460c      	mov	r4, r1
 8022afc:	dc32      	bgt.n	8022b64 <floor+0x84>
 8022afe:	2e00      	cmp	r6, #0
 8022b00:	da14      	bge.n	8022b2c <floor+0x4c>
 8022b02:	a333      	add	r3, pc, #204	; (adr r3, 8022bd0 <floor+0xf0>)
 8022b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b08:	f7dd fb68 	bl	80001dc <__adddf3>
 8022b0c:	2200      	movs	r2, #0
 8022b0e:	2300      	movs	r3, #0
 8022b10:	f7dd ffaa 	bl	8000a68 <__aeabi_dcmpgt>
 8022b14:	b138      	cbz	r0, 8022b26 <floor+0x46>
 8022b16:	2c00      	cmp	r4, #0
 8022b18:	da57      	bge.n	8022bca <floor+0xea>
 8022b1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8022b1e:	431d      	orrs	r5, r3
 8022b20:	d001      	beq.n	8022b26 <floor+0x46>
 8022b22:	4c2d      	ldr	r4, [pc, #180]	; (8022bd8 <floor+0xf8>)
 8022b24:	2500      	movs	r5, #0
 8022b26:	4621      	mov	r1, r4
 8022b28:	4628      	mov	r0, r5
 8022b2a:	e025      	b.n	8022b78 <floor+0x98>
 8022b2c:	4f2b      	ldr	r7, [pc, #172]	; (8022bdc <floor+0xfc>)
 8022b2e:	4137      	asrs	r7, r6
 8022b30:	ea01 0307 	and.w	r3, r1, r7
 8022b34:	4303      	orrs	r3, r0
 8022b36:	d01f      	beq.n	8022b78 <floor+0x98>
 8022b38:	a325      	add	r3, pc, #148	; (adr r3, 8022bd0 <floor+0xf0>)
 8022b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b3e:	f7dd fb4d 	bl	80001dc <__adddf3>
 8022b42:	2200      	movs	r2, #0
 8022b44:	2300      	movs	r3, #0
 8022b46:	f7dd ff8f 	bl	8000a68 <__aeabi_dcmpgt>
 8022b4a:	2800      	cmp	r0, #0
 8022b4c:	d0eb      	beq.n	8022b26 <floor+0x46>
 8022b4e:	2c00      	cmp	r4, #0
 8022b50:	bfbe      	ittt	lt
 8022b52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8022b56:	fa43 f606 	asrlt.w	r6, r3, r6
 8022b5a:	19a4      	addlt	r4, r4, r6
 8022b5c:	ea24 0407 	bic.w	r4, r4, r7
 8022b60:	2500      	movs	r5, #0
 8022b62:	e7e0      	b.n	8022b26 <floor+0x46>
 8022b64:	2e33      	cmp	r6, #51	; 0x33
 8022b66:	dd0b      	ble.n	8022b80 <floor+0xa0>
 8022b68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8022b6c:	d104      	bne.n	8022b78 <floor+0x98>
 8022b6e:	ee10 2a10 	vmov	r2, s0
 8022b72:	460b      	mov	r3, r1
 8022b74:	f7dd fb32 	bl	80001dc <__adddf3>
 8022b78:	ec41 0b10 	vmov	d0, r0, r1
 8022b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022b84:	f04f 33ff 	mov.w	r3, #4294967295
 8022b88:	fa23 f707 	lsr.w	r7, r3, r7
 8022b8c:	4207      	tst	r7, r0
 8022b8e:	d0f3      	beq.n	8022b78 <floor+0x98>
 8022b90:	a30f      	add	r3, pc, #60	; (adr r3, 8022bd0 <floor+0xf0>)
 8022b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b96:	f7dd fb21 	bl	80001dc <__adddf3>
 8022b9a:	2200      	movs	r2, #0
 8022b9c:	2300      	movs	r3, #0
 8022b9e:	f7dd ff63 	bl	8000a68 <__aeabi_dcmpgt>
 8022ba2:	2800      	cmp	r0, #0
 8022ba4:	d0bf      	beq.n	8022b26 <floor+0x46>
 8022ba6:	2c00      	cmp	r4, #0
 8022ba8:	da02      	bge.n	8022bb0 <floor+0xd0>
 8022baa:	2e14      	cmp	r6, #20
 8022bac:	d103      	bne.n	8022bb6 <floor+0xd6>
 8022bae:	3401      	adds	r4, #1
 8022bb0:	ea25 0507 	bic.w	r5, r5, r7
 8022bb4:	e7b7      	b.n	8022b26 <floor+0x46>
 8022bb6:	2301      	movs	r3, #1
 8022bb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8022bbc:	fa03 f606 	lsl.w	r6, r3, r6
 8022bc0:	4435      	add	r5, r6
 8022bc2:	4545      	cmp	r5, r8
 8022bc4:	bf38      	it	cc
 8022bc6:	18e4      	addcc	r4, r4, r3
 8022bc8:	e7f2      	b.n	8022bb0 <floor+0xd0>
 8022bca:	2500      	movs	r5, #0
 8022bcc:	462c      	mov	r4, r5
 8022bce:	e7aa      	b.n	8022b26 <floor+0x46>
 8022bd0:	8800759c 	.word	0x8800759c
 8022bd4:	7e37e43c 	.word	0x7e37e43c
 8022bd8:	bff00000 	.word	0xbff00000
 8022bdc:	000fffff 	.word	0x000fffff

08022be0 <scalbn>:
 8022be0:	b570      	push	{r4, r5, r6, lr}
 8022be2:	ec55 4b10 	vmov	r4, r5, d0
 8022be6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8022bea:	4606      	mov	r6, r0
 8022bec:	462b      	mov	r3, r5
 8022bee:	b99a      	cbnz	r2, 8022c18 <scalbn+0x38>
 8022bf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022bf4:	4323      	orrs	r3, r4
 8022bf6:	d036      	beq.n	8022c66 <scalbn+0x86>
 8022bf8:	4b39      	ldr	r3, [pc, #228]	; (8022ce0 <scalbn+0x100>)
 8022bfa:	4629      	mov	r1, r5
 8022bfc:	ee10 0a10 	vmov	r0, s0
 8022c00:	2200      	movs	r2, #0
 8022c02:	f7dd fca1 	bl	8000548 <__aeabi_dmul>
 8022c06:	4b37      	ldr	r3, [pc, #220]	; (8022ce4 <scalbn+0x104>)
 8022c08:	429e      	cmp	r6, r3
 8022c0a:	4604      	mov	r4, r0
 8022c0c:	460d      	mov	r5, r1
 8022c0e:	da10      	bge.n	8022c32 <scalbn+0x52>
 8022c10:	a32b      	add	r3, pc, #172	; (adr r3, 8022cc0 <scalbn+0xe0>)
 8022c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c16:	e03a      	b.n	8022c8e <scalbn+0xae>
 8022c18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8022c1c:	428a      	cmp	r2, r1
 8022c1e:	d10c      	bne.n	8022c3a <scalbn+0x5a>
 8022c20:	ee10 2a10 	vmov	r2, s0
 8022c24:	4620      	mov	r0, r4
 8022c26:	4629      	mov	r1, r5
 8022c28:	f7dd fad8 	bl	80001dc <__adddf3>
 8022c2c:	4604      	mov	r4, r0
 8022c2e:	460d      	mov	r5, r1
 8022c30:	e019      	b.n	8022c66 <scalbn+0x86>
 8022c32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8022c36:	460b      	mov	r3, r1
 8022c38:	3a36      	subs	r2, #54	; 0x36
 8022c3a:	4432      	add	r2, r6
 8022c3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8022c40:	428a      	cmp	r2, r1
 8022c42:	dd08      	ble.n	8022c56 <scalbn+0x76>
 8022c44:	2d00      	cmp	r5, #0
 8022c46:	a120      	add	r1, pc, #128	; (adr r1, 8022cc8 <scalbn+0xe8>)
 8022c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c4c:	da1c      	bge.n	8022c88 <scalbn+0xa8>
 8022c4e:	a120      	add	r1, pc, #128	; (adr r1, 8022cd0 <scalbn+0xf0>)
 8022c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c54:	e018      	b.n	8022c88 <scalbn+0xa8>
 8022c56:	2a00      	cmp	r2, #0
 8022c58:	dd08      	ble.n	8022c6c <scalbn+0x8c>
 8022c5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022c5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022c62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022c66:	ec45 4b10 	vmov	d0, r4, r5
 8022c6a:	bd70      	pop	{r4, r5, r6, pc}
 8022c6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8022c70:	da19      	bge.n	8022ca6 <scalbn+0xc6>
 8022c72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8022c76:	429e      	cmp	r6, r3
 8022c78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8022c7c:	dd0a      	ble.n	8022c94 <scalbn+0xb4>
 8022c7e:	a112      	add	r1, pc, #72	; (adr r1, 8022cc8 <scalbn+0xe8>)
 8022c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	d1e2      	bne.n	8022c4e <scalbn+0x6e>
 8022c88:	a30f      	add	r3, pc, #60	; (adr r3, 8022cc8 <scalbn+0xe8>)
 8022c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c8e:	f7dd fc5b 	bl	8000548 <__aeabi_dmul>
 8022c92:	e7cb      	b.n	8022c2c <scalbn+0x4c>
 8022c94:	a10a      	add	r1, pc, #40	; (adr r1, 8022cc0 <scalbn+0xe0>)
 8022c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	d0b8      	beq.n	8022c10 <scalbn+0x30>
 8022c9e:	a10e      	add	r1, pc, #56	; (adr r1, 8022cd8 <scalbn+0xf8>)
 8022ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022ca4:	e7b4      	b.n	8022c10 <scalbn+0x30>
 8022ca6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022caa:	3236      	adds	r2, #54	; 0x36
 8022cac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022cb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8022cb4:	4620      	mov	r0, r4
 8022cb6:	4b0c      	ldr	r3, [pc, #48]	; (8022ce8 <scalbn+0x108>)
 8022cb8:	2200      	movs	r2, #0
 8022cba:	e7e8      	b.n	8022c8e <scalbn+0xae>
 8022cbc:	f3af 8000 	nop.w
 8022cc0:	c2f8f359 	.word	0xc2f8f359
 8022cc4:	01a56e1f 	.word	0x01a56e1f
 8022cc8:	8800759c 	.word	0x8800759c
 8022ccc:	7e37e43c 	.word	0x7e37e43c
 8022cd0:	8800759c 	.word	0x8800759c
 8022cd4:	fe37e43c 	.word	0xfe37e43c
 8022cd8:	c2f8f359 	.word	0xc2f8f359
 8022cdc:	81a56e1f 	.word	0x81a56e1f
 8022ce0:	43500000 	.word	0x43500000
 8022ce4:	ffff3cb0 	.word	0xffff3cb0
 8022ce8:	3c900000 	.word	0x3c900000

08022cec <_init>:
 8022cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cee:	bf00      	nop
 8022cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022cf2:	bc08      	pop	{r3}
 8022cf4:	469e      	mov	lr, r3
 8022cf6:	4770      	bx	lr

08022cf8 <_fini>:
 8022cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cfa:	bf00      	nop
 8022cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022cfe:	bc08      	pop	{r3}
 8022d00:	469e      	mov	lr, r3
 8022d02:	4770      	bx	lr
